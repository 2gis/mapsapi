(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";
var __moduleName = "app/index";
var app = {plugins: {}},
    State = require('./state')(app),
    Router = require('./router')(app),
    Backbone = require('backbone'),
    _ = require('underscore'),
    $ = require('jquery');
app.root = '/mapsapi';
app.state = new State();
app.vent = _.extend({}, Backbone.Events);
$(document).ready(function() {
  app.router = new Router();
  Backbone.history.start({
    pushState: false,
    root: app.root
  });
});


},{"./router":20,"./state":21,"backbone":26,"jquery":29,"underscore":27}],2:[function(require,module,exports){
"use strict";
var __moduleName = "app/maps/cafeHeat";
module.exports = [[55.746986255132, 37.598473192469, 1500], [55.785034682001, 37.624490092909, 2000], [55.680037489389, 37.513587250391, 600], [55.827798934555, 37.514339121529, 700], [55.710849789922, 37.59408397048, 600], [55.762149128968, 37.612645089596, 1000], [55.441145086112, 37.765501346669, 500], [55.771666180607, 37.63745784407, 1000], [55.73907992628, 37.618035318928, 800], [55.796512625116, 37.542749443345, 1750], [55.772442481282, 37.67667194929, 870], [55.779294674851, 37.601381531412, 1000], [55.769916081628, 37.620232775259, 1000], [55.745311700525, 37.706077339853, 400], [55.766371982736, 37.605462075663, 410], [55.601940297958, 37.498169184556, 350], [55.762492408415, 37.618964437776, 1300], [55.761309508657, 37.614330655452, 1500], [55.799152733286, 37.613178972706, 800], [55.734369821139, 37.655830673388, 1500], [55.739209322874, 37.584848362014, 500], [55.744428405237, 37.629848403627, 750], [55.713382714141, 37.501713676796, 1000], [55.750670542095, 37.596268488773, 450], [55.692624712318, 37.494925457652, 1000], [55.662351017047, 37.485866697887, 1500], [55.777687697662, 37.633535127159, 1200], [55.781898582094, 37.596379594029, 700], [55.770569375091, 37.624856745585, 530], [55.670216620218, 37.476702502889, 800], [55.673288920572, 37.502058830131, 1000], [55.657726363624, 37.529572560283, 1000], [55.790511485903, 37.703674819354, 1000], [55.751582035877, 38.012203822421, 870], [55.695924268066, 37.61982000708, 900], [55.826851556864, 37.521413223916, 1000], [55.754588818818, 37.634799273763, 200], [55.651009417739, 37.750265075491, 900], [55.760045254309, 37.597507083621, 2000], [55.745447006276, 37.604870230282, 1620], [55.750768169536, 37.599618779374, 1620], [55.759357843628, 37.613021659087, 1620], [55.744564606341, 37.565535153144, 1620], [55.832853988712, 37.657596901964, 500], [55.567450993999, 37.562096392385, 1000], [55.81173722984, 37.573120811719, 1200], [55.806063361841, 37.513269492045, 400], [55.595437585489, 37.595147311405, 1000], [55.609705008005, 37.708752873359, 650], [55.681577255371, 37.723485693884, 1000], [55.880825378544, 37.650708744117, 1000], [55.740703001048, 37.622882690898, 1000], [55.750993865697, 37.591234992208, 500], [55.852341432828, 37.446381483313, 1200], [55.866018608445, 37.681317652121, 450], [55.596836181098, 37.512414041497, 2000], [55.926040444243, 37.752220679299, 700], [55.764429901012, 37.655117255395, 600], [55.812134525846, 37.6388830108, 450], [55.747368490038, 37.65619196179, 700], [55.714970913621, 37.401279844474, 700], [55.729419404379, 37.587047742767, 1300], [55.683832022576, 37.624260313295, 800], [55.579415765839, 37.899662083568, 800], [55.76813466449, 37.646858585632, 500], [55.784126601469, 37.634377863505, 1000], [55.43222177298, 37.766947775772, 300], [55.910945654336, 37.39610778156, 300], [55.741262053688, 37.652669449737, 600], [55.740006387887, 37.4818691888, 950], [55.732141874288, 37.611428296205, 750], [55.731760272658, 37.487374248036, 2000], [55.578963616805, 37.651011593221, 400], [55.64994794023, 37.745946714523, 1500], [55.757218779194, 37.659133619148, 1500], [55.809478478002, 37.464487921938, 1500], [55.78534495046, 37.572712320369, 1200], [55.766279184773, 37.630550432062, 500], [55.439840680727, 37.565551874518, 700], [55.633265932444, 37.658004588766, 1000], [55.860742240884, 37.480981381601, 700], [55.754681776367, 37.621529186085, 2000], [55.733147444093, 37.683993732323, 1000], [55.680260577515, 37.570658676066, 800], [55.759645942426, 37.652527251679, 1300], [55.789606412422, 37.747752765646, 500], [55.841027330969, 37.4870212043, 250], [55.70931429573, 37.59133973758, 1200], [55.734357281011, 37.661587559691, 2000], [55.771181731286, 37.669929197776, 500], [55.860062162604, 37.448304070413, 350], [55.776998884207, 37.585339918052, 700], [55.822970886261, 37.757643997523, 1500], [55.705540468065, 37.768754323679, 1250], [56.006655189768, 37.845868305378, 750], [55.722842143869, 37.566960095015, 650], [55.901765684546, 38.063007161654, 450], [55.582380271354, 37.899378636065, 1200], [55.661169299563, 37.760309354532, 1500], [55.778463019919, 37.662828902152, 700], [55.770994848514, 37.587298220222, 1000], [55.790276236475, 37.544519055553, 300], [55.842566721966, 37.495377219143, 800], [55.77230319589, 37.622629336696, 1000], [55.763581604617, 37.615982419427, 1000], [55.618880897886, 37.730128136302, 1000], [55.86341433381, 37.422651302998, 200], [55.754525136764, 37.569626711619, 700], [55.879293506238, 37.524535402947, 1500], [55.856770528115, 37.486485126712, 1500], [55.803589471333, 37.643915280509, 200], [55.761071884667, 37.680177773258, 200], [55.863712683601, 37.545815011827, 1500], [55.629977107428, 37.673373556762, 750], [55.799747520203, 37.482983405183, 800], [55.812807673145, 37.58320981726, 500], [55.839075573, 37.406742455382, 300], [55.781342174549, 37.634122384169, 1460], [55.65280697622, 37.393312493865, 1250], [55.770413463796, 37.599250682115, 1250], [55.744181806549, 37.582898322681, 1250], [55.806385864799, 37.582689491435, 650], [55.876551379068, 37.685568348325, 1000], [55.827142177004, 37.319413642643, 1000], [55.874149275603, 37.122400911238, 1000], [55.776009222546, 37.660531300132, 550], [55.846170470246, 37.357888880037, 580], [55.77860396682, 37.600725836651, 800], [55.794970716751, 37.700189957911, 1100], [55.887986019213, 37.611363501546, 1000], [55.655135789085, 37.49885063732, 700], [55.70403852916, 37.479247283415, 300], [55.750979960374, 37.817756155601, 420], [55.762657994338, 37.594861914268, 1100], [55.712326175491, 37.626365632982, 1000], [55.78362058689, 37.73437570927, 1500], [55.768134259293, 37.614183720107, 1460], [55.729600657132, 37.680548685836, 700], [55.826696559345, 37.445291194739, 800], [55.632537689989, 37.517265926432, 400], [55.813762861546, 37.575504226405, 700], [55.71956372567, 37.626468364906, 1500], [55.665606938848, 37.747059810303, 500], [55.718786226859, 37.787100901543, 850], [55.790889007341, 37.680303773594, 1200], [55.720097009459, 37.626158297101, 700], [55.633227569344, 37.608092460451, 650], [55.789722353328, 37.46162643267, 450], [55.912589569721, 37.732016573666, 700], [55.866255891856, 37.707566535931, 700], [55.659575586735, 37.620347690229, 510], [55.774414435117, 37.598842199853, 1000], [55.681882154546, 37.84811377028, 1000], [55.768562721023, 37.603687151449, 1000], [55.794629972958, 37.56290308605, 300], [55.742653406953, 37.629644100329, 600], [55.539979705876, 37.536368198439, 750], [55.890816149396, 37.446722972174, 800], [55.823689328432, 37.319676193487, 1250], [55.755529024618, 37.600574002572, 1000], [55.758228230733, 37.58694881918, 900], [55.717804377434, 37.857702583447, 200], [55.849967253439, 37.452001547301, 680], [55.774373471473, 37.824963314676, 1000], [55.919544665105, 37.993774414415, 500], [55.776998884207, 37.585339918052, 800], [55.720761642156, 37.600441615748, 1000], [55.766977126076, 37.614289647641, 1000], [55.950373716321, 37.298384529824, 50], [55.653604117265, 37.501497436579, 600], [55.979276672422, 37.180746946489, 1200], [55.759672820566, 37.574812855908, 1000], [55.760167177321, 37.615392575707, 1000], [55.80922485853, 37.528594418385, 600], [55.776614449651, 37.699775078319, 1000], [55.815445872832, 37.738070072691, 1000], [55.727174878288, 37.772082061534, 1000], [55.798765796535, 37.537749039623, 390], [55.759885908886, 37.647074939658, 390], [55.745076665874, 37.62737599133, 350], [55.837369011823, 37.636389809616, 390], [55.769487906099, 37.632520602008, 390], [55.860456251433, 37.602961187904, 390], [55.7266704224073, 37.5865427348999, 1000], [55.753108860751, 37.588977514969, 560], [55.751496916456, 37.599102711355, 560], [55.752531938207, 37.632793021231, 530], [55.774443654204, 37.584092797546, 530], [55.64014322193, 37.621916300111, 530], [55.691757584657, 37.529735958373, 530], [55.676406507069, 37.506304495281, 530], [55.771467704664, 37.582342039539, 530], [55.863110400948, 37.601964531137, 530], [55.819607297775, 37.573284159767, 560], [55.623150014628, 37.603872770782, 560], [55.778597313549, 37.600731575346, 560], [55.865256530469, 37.66147528012, 530], [55.757218779194, 37.659133619148, 560], [55.727623547331, 37.449445298744, 530], [55.789566193232, 37.752520981355, 560], [55.755816683163, 37.627867247421, 530], [55.621825231931, 37.713755930761, 530], [55.744564606341, 37.565535153144, 530], [55.726553183811, 37.582241268775, 530], [55.730167572518, 37.643949335912, 530], [55.754681776367, 37.621529186085, 530], [55.761266733258, 37.616539997438, 530], [55.741580692965, 37.537659888352, 530], [55.780135435647, 37.578934251755, 530], [55.800679859639, 37.534147193856, 560], [55.823284333356, 37.497703115267, 530], [55.687534600878, 37.543440333132, 560], [55.755774841204, 37.614638938872, 530], [55.687097264883, 37.545220575321, 560], [55.757101876616, 37.63490143231, 530], [55.640929309698, 37.530805723969, 530], [55.806800165047, 37.637592914873, 530], [55.808959889762, 37.637973360342, 530], [55.657314259821, 37.845234057199, 530], [55.718472698025, 37.420459482492, 560], [55.913164788065, 37.571248912026, 560], [55.612081708568, 37.732833225154, 560], [55.739179817462, 37.596321351441, 560], [55.730360344394, 37.634686005813, 560], [55.7591039377, 37.62481198576, 800], [55.765212963566, 37.602648109864, 600], [55.734166632305, 37.61887864362, 530], [55.684177612793, 37.56887951568, 560], [55.655853812108, 37.541891016952, 560], [55.741939685979, 37.653397177419, 560], [55.766995665975, 37.380241103557, 560], [55.767011757272, 37.593997571311, 530], [55.790878356686, 37.68030943754, 530], [55.771597995517, 37.632749931667, 560], [55.80575433463, 37.396870691712, 560], [55.795067813018, 37.699191692448, 560], [55.742406724264, 37.631449149292, 530], [55.764639072891, 37.606444569109, 560], [55.76665016629, 37.60269807499, 560], [55.763838306886, 37.606159302744, 560], [55.771884426069, 37.593482752282, 560], [55.775815233143, 37.585599472455, 560], [55.740703001048, 37.622882690898, 530], [55.775975457601, 37.595812073417, 560], [55.772154446907, 37.620631636137, 560], [55.719053465702, 37.608615081982, 560], [55.803342876099, 37.618196783226, 560], [55.781932261342, 37.723656736002, 560], [55.809478478002, 37.464487921938, 530], [55.734677799197, 37.612294339497, 560], [55.794342349883, 37.926247996439, 530], [55.707636825578, 37.657271977687, 530], [55.752035092271, 37.591170852141, 560], [55.80051986105, 37.533337330212, 560], [55.745990979868, 37.549390308713, 530], [55.757148904509, 37.621869395997, 560], [55.780394531565, 37.600349850973, 560], [55.763527057531, 37.635470184714, 560], [55.618623934709, 37.507234271998, 560], [55.845547451118, 37.66106710805, 560], [55.726873139525, 37.57967011542, 900], [55.672952268114, 37.664590121971, 1000], [55.817251553829, 37.387724896706, 300], [55.72423083947, 37.564138706115, 600], [55.742179266693, 37.501629207713, 1620], [55.727833143636, 37.583958142682, 1620], [55.756252533556, 37.60481992442, 1620], [55.761369349671, 37.623879112831, 1620], [55.766142678506, 37.621498880058, 1620], [55.734751896361, 37.64228006419, 1620], [55.777765200836, 37.586915196848, 1620], [55.642469357555, 37.665745763371, 200], [55.971881709193, 37.149851394702, 500], [55.744734838667, 37.624925735553, 500], [55.829241100002, 37.644100142156, 2350], [55.685444967217, 37.570213615301, 780], [55.787379479884, 37.67769500101, 780], [55.758754844155, 37.645943572099, 1000], [55.663741106326, 37.605571292333, 550], [55.760602508394, 37.77269956289, 600], [55.701368167729, 37.751591007256, 500], [55.749443819383, 37.645116754933, 1000], [55.772714146169, 37.630132531415, 1500], [55.828629102958, 37.614436218351, 1000], [55.836818360174, 37.354392081306, 1500], [55.780518307918, 37.601150338286, 700], [55.793483741621, 37.787946142427, 1000], [55.800066832281, 37.968947251242, 1400], [55.660346532821, 37.744091867878, 600], [55.860062162604, 37.448304070413, 800], [55.735469439732, 37.485958826155, 1500], [55.988078003598, 37.233706530176, 1000], [55.889673812351, 37.39146846432, 500], [55.591392298152, 38.202118512037, 600], [55.610327272341, 38.076043752723, 600], [55.702012646054, 37.747416192391, 500], [55.914655229431, 37.743271950892, 500], [55.939745164845, 37.504990147559, 800], [55.788839631795, 37.610403053838, 700], [55.772941243695, 37.542584908224, 800], [55.796751672788, 37.982806829897, 1000], [55.79347336348, 37.494341032716, 600], [55.784084090433, 37.690734434475, 1500], [55.674977497688, 37.739862130505, 800], [55.765430848539, 37.638952222657, 600], [55.753812687712, 37.63607070561, 500], [55.98361046976, 37.155914483068, 500], [55.695822005012, 37.424956853096, 150], [55.726234294865, 37.450796709798, 1000], [55.717710940881, 37.79248074899, 1000], [55.741340333417, 37.595348713969, 800], [55.725443535768, 37.403743437779, 900], [55.76092998167, 37.622881449579, 1000], [55.791600520931, 37.820297531207, 400], [55.761413348926, 37.623787675258, 750], [55.63652618514, 37.654591948707, 1000], [55.98196289666, 37.254116803679, 1000], [55.689097610887, 37.544678907596, 1000], [55.896879485875, 37.396794779325, 1250], [55.681118688478, 37.27011066285, 200], [55.595749546835, 37.602732205792, 1200], [55.768382348277, 37.62490281781, 800], [55.727881559864, 37.612176033049, 1000], [55.737446726589, 37.584581644625, 1000], [55.740408827735, 37.654196009452, 1500], [55.746268872421, 37.603397193081, 500], [55.768839724796, 37.668772605417, 600], [55.774266231637, 37.584394174287, 500], [55.87160135778, 37.684316007408, 750], [55.746841966031, 37.581825913157, 1300], [55.764950918288, 37.572334152251, 300], [55.756375476088, 37.612718608274, 400], [55.757223898723, 37.628305233168, 1000], [55.808803055593, 37.493520100121, 800], [55.79414639545, 37.969625245885, 600], [55.994786542173, 37.207524313881, 600], [55.739120975968, 37.768319375107, 700], [55.769711837348, 37.678775081914, 850], [55.75813566421, 37.795103014966, 800], [55.690412542438, 37.550698329007, 2000], [55.612117278428, 37.555014719248, 400], [55.762603360759, 37.566746904056, 2500], [55.686300464279, 37.621638862264, 180], [55.761413348926, 37.623787675258, 1200], [55.757279188767, 37.712786339749, 500], [55.817071613345, 37.826188315481, 1000], [55.73439801714, 37.85301560368, 700], [55.678625169856, 37.650884179112, 1000], [55.779486628378, 37.577264183111, 1000], [55.920695510133, 37.832235828621, 800], [55.883480776904, 37.53893742645, 1000], [55.711023346832, 37.618531144071, 400], [55.732203852388, 37.665100531762, 350], [55.85539932821, 37.484814743914, 900], [55.756617559493, 37.623097010113, 350], [55.897727342247, 37.593263718721, 1000], [55.706508891492, 37.818862687621, 1250], [55.913164788065, 37.571248912026, 340], [55.72092092074, 37.697162852447, 300], [55.820806196493, 37.6443298491, 600], [55.596456336906, 37.886002462999, 200], [55.747408407389, 37.77591983804, 1000], [55.781746955733, 37.592400475158, 1500], [55.761699738615, 37.751841666446, 250], [55.709892853405, 37.662577712337, 1200], [55.6895970001, 37.532969010674, 1000], [55.80916332953, 37.338823987582, 2000], [55.75475790531, 37.557520820207, 600], [55.658788681727, 37.757830665936, 900], [55.79571188365, 37.674616681733, 500], [55.645752109691, 37.660116823433, 1030], [55.793587272428, 37.518064711101, 1100], [55.866006189017, 37.677798105409, 380], [55.799142810629, 37.968270568062, 300], [55.999411879993, 37.2181833031, 1000], [55.603857351284, 37.523165390598, 1000], [55.547642201595, 37.683933009352, 700], [55.785503632796, 37.596052216386, 700], [55.683126369103, 37.625114569886, 210], [55.767463896608, 37.65218178152, 1000], [55.976549517882, 37.147184036367, 500], [55.796034291449, 37.560478365682, 1000], [55.750905112963, 37.59550816978, 1750], [55.762588217478, 37.62717089602, 500], [55.760360145128, 37.577958978686, 900], [55.757075094801, 37.599223527766, 700], [55.646497524154, 37.516114889581, 1000], [55.859833193823, 37.619712061916, 650], [55.857877219932, 37.50735918709, 700], [55.741774550958, 37.656067388697, 1000], [55.841241050518, 37.181688870606, 800], [55.709892853405, 37.662577712337, 1000], [55.897602671359, 37.604545516533, 1000], [55.76679448127, 37.620916870669, 1000], [55.836880680626, 37.645685809297, 300], [55.770332177129, 37.646665127122, 1500], [55.737031589465, 37.659371141372, 700], [55.80451087513, 37.56464533004, 400], [55.769300403207, 37.620758412817, 500], [55.789593832199, 37.613912434964, 600], [55.769212443729, 37.670588293006, 1500], [55.738859272968, 37.544181597614, 750], [55.787557248695, 37.635898429207, 1000], [55.758144475291, 37.606488470353, 500], [55.768793681912, 37.679214533251, 480], [55.625321711745, 37.714389062969, 480], [55.734911982926, 37.593401930487, 900], [55.760246737029, 37.614827813303, 850], [55.744564606341, 37.565535153144, 900], [55.751998751552, 37.582634665882, 850], [55.744455163708, 37.626940602884, 900], [55.741939685979, 37.653397177419, 900], [55.713144252382, 37.891549283419, 500], [55.739614080327, 37.61345812662, 800], [55.77436262071, 37.618574015397, 600], [55.735659386803, 37.657552016361, 700], [55.776550314742, 37.60772565016, 1200], [55.810421725921, 37.636648573917, 2000], [55.78109645497, 37.599033088456, 850], [55.777765200836, 37.586915196848, 850], [55.822275502309, 37.499092286812, 900], [55.746438894447, 37.536412805538, 850], [55.588541815968, 37.663045606892, 480], [55.551007892297, 37.554181553239, 440], [55.764923914969, 37.411074817282, 480], [55.690763975966, 37.858784972748, 480], [55.846110058845, 37.363451282268, 440], [55.678390539129, 37.703530476072, 480], [55.76959216917, 37.569528816328, 440], [55.702461037735, 37.505228299182, 480], [55.794179160518, 37.576555308959, 480], [55.660269763302, 37.407655219638, 480], [55.770809346816, 37.678694276456, 700], [55.753481638919, 37.71656558641, 820], [55.689401931032, 37.601708984023, 820], [55.809123962677, 37.636334109863, 800], [55.687180882755, 37.573667567491, 800], [55.90939512968, 37.540400571198, 800], [55.756247089733, 37.598597383119, 800], [55.751496916456, 37.599102711355, 800], [55.742637920201, 37.499625131449, 820], [55.752196457456, 37.594079182603, 800], [55.761189621438, 37.579477602474, 800], [55.760137583878, 37.584538920718, 820], [55.772800771938, 37.678895207153, 800], [55.771312877404, 37.682196479574, 820], [55.780135435647, 37.578934251755, 800], [55.643754721005, 37.526395669448, 800], [55.658250613727, 37.742409856383, 800], [55.659491527892, 37.749604419041, 820], [55.653622718299, 37.620706456922, 800], [55.803342876099, 37.618196783226, 820], [55.823284333356, 37.497703115267, 820], [55.727781226876, 37.623560859163, 800], [55.609772239646, 37.720052947482, 800], [55.621825231931, 37.713755930761, 820], [55.744564606341, 37.565535153144, 800], [55.63775182136, 37.656246854628, 800], [55.757488638839, 37.635426874308, 820], [55.757450772214, 37.631843411273, 820], [55.761371390901, 37.570285001036, 820], [55.753926643696, 37.637600182852, 820], [55.777649415311, 37.661054284334, 800], [55.76250270137, 37.567601375155, 800], [55.785539799645, 37.665350801423, 820], [55.768226875937, 37.644771836162, 820], [55.766952891582, 37.65294515469, 800], [55.742499715548, 37.601853458658, 820], [55.759676360832, 37.657071212259, 800], [55.759542275726, 37.658312509843, 820], [55.761674097319, 37.662750594314, 820], [55.757218779194, 37.659133619148, 800], [55.748559043292, 37.558287625139, 820], [55.741774550958, 37.656067388697, 820], [55.765421540525, 37.590952705756, 820], [55.64994794023, 37.745946714523, 820], [55.743146418734, 37.427897376173, 800], [55.767075363589, 37.829477564505, 820], [55.784496839544, 37.597503089423, 820], [55.799747520203, 37.482983405183, 820], [55.794633797563, 37.494482249537, 800], [55.731125812698, 37.634137896397, 820], [55.671452036829, 37.554052965421, 800], [55.730026388995, 37.630671249176, 800], [55.73162984703, 37.640894637165, 820], [55.732452924046, 37.645053861616, 800], [55.739356842589, 37.587617477413, 820], [55.735823244468, 37.520387413717, 800], [55.750089728779, 37.789003669421, 820], [55.863712683601, 37.545815011827, 800], [55.779864915837, 37.632585138351, 820], [55.678477774302, 37.56433014871, 820], [55.804230080474, 37.583478465218, 800], [55.845547451118, 37.66106710805, 820], [55.789976962016, 37.678584678723, 820], [55.782381577149, 37.708583054987, 820], [55.805540116573, 37.414476598367, 800], [55.768370634396, 37.632454670399, 820], [55.773100871573, 37.632824536156, 800], [55.845499600478, 37.438654321025, 800], [55.73881791835, 37.652729612499, 820], [55.741262053688, 37.652669449737, 820], [55.746837632258, 37.654800268997, 800], [55.728243469971, 37.566588340541, 440], [55.772191301651, 37.571416015584, 440], [55.783050965206, 37.702661296059, 440], [55.766767773246, 37.59275738923, 440], [55.760549947998, 37.614613864099, 800], [55.741025968859, 37.627878514764, 820], [55.709128651589, 37.620768031907, 800], [55.693368004546, 37.534068444947, 800], [55.689097610887, 37.544678907596, 820], [55.691949045316, 37.53733129004, 820], [55.743121865542, 37.507063106199, 820], [55.765083905012, 37.611304310635, 820], [55.765748075911, 37.608697885268, 800], [55.763394403663, 37.635978628928, 820], [55.759806718974, 37.647587342083, 800], [55.740453943162, 36.857939217376, 800], [55.719053465702, 37.608615081982, 820], [55.723472614699, 37.610150138193, 820], [55.639104231757, 37.352915131998, 820], [55.658885766722, 37.430131534756, 820], [55.677938521445, 37.467137992801, 820], [55.66412515815, 37.482208186191, 800], [55.646996723794, 37.411716304883, 800], [55.687438023292, 37.604376135164, 820], [55.766995665975, 37.380241103557, 800], [55.793632113318, 37.937960517202, 820], [55.963460131204, 37.405384739265, 800], [55.980682101021, 37.410382084459, 820], [55.937674461372, 37.518347466858, 800], [55.608149376541, 38.091201204575, 800], [55.982765845058, 37.174632671081, 600], [55.891630860967, 37.748865263889, 800], [55.891764330544, 37.727230840786, 800], [55.910945654336, 37.39610778156, 820], [55.657314259821, 37.845234057199, 800], [55.604659717756, 37.488789304422, 820], [55.603727141437, 37.290421342756, 820], [55.668945199444, 37.453592406265, 820], [55.886939765636, 37.656494830514, 630], [55.870642418935, 37.461258085643, 820], [55.62447437611, 37.709202591779, 820], [55.689894195182, 37.852169701422, 820], [55.586248843071, 37.675706072596, 1500], [55.789976962016, 37.678584678723, 1000], [55.823153984039, 37.526957142451, 950], [55.846172191891, 37.575977434061, 950], [55.772154446907, 37.620631636137, 2000], [55.638365321531, 37.666641514304, 540], [55.676352363847, 37.519690398727, 570], [55.779708403421, 37.579983677627, 570], [55.72169472453, 37.622847871489, 540], [55.813459862284, 37.650106999343, 570], [55.626407055249, 37.743703462563, 570], [55.632538572888, 37.519720196442, 570], [55.765220184953, 37.731903188963, 400], [55.75701857305, 37.77506555103, 660], [55.604763692178, 37.712454278175, 540], [55.723958756249, 37.672708766997, 660], [55.698644581603, 37.843144114432, 660], [55.816933307983, 37.403344588749, 660], [55.63775182136, 37.656246854628, 660], [55.735589317995, 37.475611089922, 660], [55.892732162276, 37.616660637098, 660], [55.61230783504, 37.535976655751, 540], [55.844595786881, 37.501079066692, 660], [55.65760463041, 37.740345610743, 660], [55.792489131968, 37.565600822258, 660], [55.847679799211, 37.349631101746, 660], [55.654923733272, 37.544413708852, 660], [55.79850532493, 37.77548802417, 540], [55.675327139352, 37.470627286763, 660], [55.549142358514, 37.55434927375, 660], [55.852299890617, 37.64578853307, 660], [55.607440514158, 37.589925699032, 540], [55.771640051625, 37.620341331098, 630], [55.872173242841, 37.558791462285, 550], [55.747554656643, 37.581902500023, 800], [55.869453919281, 37.675889732233, 400], [55.803342876099, 37.618196783226, 350], [55.639531756018, 37.843378580632, 1000], [55.673454099159, 37.664742061253, 350], [55.420267963107, 37.547847923453, 350], [55.782487837673, 37.509967337465, 600], [55.722874775555, 37.688986011837, 500], [55.730558984026, 37.64484237324, 600], [55.782393043384, 37.59792629707, 1000], [55.828827707661, 37.650749766322, 1000], [55.771475509955, 37.655165106704, 1000], [55.75731757835, 37.602675804282, 1000], [55.886048857963, 37.611480323348, 1500], [55.896564902286, 37.450311678984, 500], [55.726775269113, 37.669614848959, 270], [55.850693246938, 37.430781777171, 1000], [55.696462679157, 37.743983520963, 1500], [55.737266918077, 37.617322275831, 1350], [55.792010121988, 37.7491685368, 800], [55.776395380563, 37.643700736293, 1500], [55.876974364461, 37.683954943348, 1000], [55.763938755663, 37.609338663504, 1250], [55.643754721005, 37.526395669448, 1800], [55.96014542121, 38.050363444435, 700], [55.655853812108, 37.541891016952, 300], [55.743128002056, 37.629735471856, 850], [55.754112711852, 37.798683008731, 1000], [55.756679497615, 37.605780262485, 1250], [55.733990115931, 37.710735104034, 1000], [55.7624887871, 37.656579281339, 1000], [55.745752293751, 37.667850125048, 1500], [55.675327139352, 37.470627286763, 750], [55.81618330704, 37.639693522517, 1000], [55.636192571207, 37.763491507706, 800], [55.757163314201, 37.633960826705, 1000], [55.756789149342, 37.621137249808, 1000], [55.806463988873, 37.718010432457, 1000], [55.78078447067, 37.558516514842, 1000], [55.745647186712, 37.557651500657, 1000], [55.745035242373, 37.598142633342, 1500], [55.738294035125, 37.746194593739, 200], [55.765838129133, 37.591351148391, 500], [55.745176493912, 37.810500073674, 650], [55.800947163139, 37.586565398049, 500], [55.762846609104, 37.606637128204, 850], [55.781294665757, 37.601390409479, 1300], [55.771065287816, 37.62244805909, 1000], [55.777649415311, 37.661054284334, 600], [55.789999429602, 37.680827477937, 360], [55.741331253177, 37.658665241689, 360], [55.743759753668, 37.568930481156, 360], [55.808179284987, 37.638373048779, 360], [55.729218839245, 37.622565476957, 360], [55.771789786379, 37.679058772418, 360], [55.760748787781, 37.632156161768, 360], [55.762846609104, 37.606637128204, 360], [55.727573381721, 37.581227524916, 360], [55.640687011141, 37.603330199438, 400], [55.760838357696, 37.580637390911, 360], [55.618623934709, 37.507234271998, 400], [55.80909257734, 37.798405304541, 360], [55.57030482675, 37.575724028257, 360], [55.801941696941, 37.5319459416, 360], [55.76092998167, 37.622881449579, 360], [55.678323013998, 37.561120844215, 400], [55.888811644547, 37.433530516694, 360], [55.783973028198, 37.597353191198, 360], [55.750707337446, 38.034726400717, 550], [55.74333724768, 37.652522269128, 1020], [55.755529024618, 37.600574002572, 1000], [55.735038333616, 37.585567724913, 1020], [55.651472695113, 37.483053584981, 800], [55.892784849455, 37.57308188522, 500], [55.622606755434, 37.605940442688, 1000], [55.748477634657, 37.608571326264, 1000], [55.910523494729, 37.726726127625, 200], [55.743392781916, 37.582140601765, 1000], [55.752158248681, 37.818582828348, 1000], [55.688767978486, 37.528994523668, 1000], [55.809478478002, 37.464487921938, 1000], [55.666878988825, 37.551940546139, 1000], [55.859990844836, 37.659176916686, 870], [55.551671744284, 37.702541579544, 870], [55.686644027013, 37.30592672329, 830], [55.888047767524, 37.509791385301, 800], [55.770852339959, 37.646962742117, 1250], [55.568479654634, 37.58539296829, 870], [55.83984535307, 37.488826687192, 870], [55.753968150118, 37.636815794663, 870], [55.675934391784, 37.678725386321, 870], [55.741331253177, 37.658665241689, 870], [55.741040576475, 37.627384195544, 870], [55.640136898939, 37.606534270595, 870], [55.977986681098, 37.155032144658, 870], [55.917612903814, 37.867089429432, 870], [55.747513281034, 37.861920893688, 870], [55.878761836987, 37.423415925701, 870], [55.764291345324, 37.590499048565, 1100], [55.66031073858, 37.515378631221, 800], [55.755774841204, 37.614638938872, 350], [55.651736855729, 37.618847007929, 550], [55.639421741307, 37.607284631084, 500], [55.782174472147, 37.633515540895, 1500], [55.820356788918, 37.664990822477, 650], [55.817153223093, 37.500317355476, 1500], [55.774720877, 37.642339972799, 1000], [55.681758026604, 37.256278139317, 900], [55.633799619428, 37.518258000574, 6000], [55.815745982648, 37.619550336038, 2000], [55.776882161555, 37.686817480605, 1620], [55.737796236749, 37.602023064506, 1620], [55.565538176068, 37.562378142303, 300], [55.803180299992, 37.56157114297, 600], [55.752032108269, 37.592619980734, 1500], [55.857868003351, 37.671816211097, 1000], [55.677938521445, 37.467137992801, 380], [55.982765845058, 37.174632671081, 380], [55.712326175491, 37.626365632982, 1070], [55.867114089973, 37.493873190562, 500], [55.669485820138, 37.451645358988, 580], [55.744344643673, 37.627359794989, 1000], [55.7627486683039, 37.6352515669963, 950], [55.89110378887, 37.608876246717, 500], [55.794645438552, 37.490521209392, 1200], [55.763010397193, 37.635687696541, 530], [55.600276470587, 37.608490985121, 500], [55.823284333356, 37.497703115267, 440], [55.7602467384564, 37.6148278935724, 480], [55.763581604617, 37.615982419427, 1500], [55.862969162378, 37.585436561315, 250], [55.743121865542, 37.507063106199, 260], [55.638413033449, 37.351648925286, 280], [55.653622718299, 37.620706456922, 280], [55.633158180348, 37.624287450591, 280], [55.824903123548, 37.436407252143, 280], [55.727061913735, 37.679741325817, 280], [55.982765845058, 37.174632671081, 280], [55.758954366133, 37.61069123102, 250], [55.874633941982, 37.587850252879, 300], [55.863712683601, 37.545815011827, 250], [55.901831185487, 37.548441590617, 260], [55.621825231931, 37.713755930761, 280], [55.90939512968, 37.540400571198, 280], [55.612223538128, 37.718272535552, 280], [55.622606755434, 37.605940442688, 280], [55.667530166701, 37.658514297783, 280], [55.865592495176, 37.46222451979, 280], [55.662145020923, 37.508711262536, 250], [55.700143551074, 37.855631257536, 250], [55.772314741489, 37.631595668126, 280], [55.755774841204, 37.614638938872, 280], [55.677938521445, 37.467137992801, 280], [55.716672930537, 37.409255279024, 280], [55.766995665975, 37.380241103557, 280], [55.612081708568, 37.732833225154, 280], [55.775063779324, 37.479060757281, 250], [55.69586126909, 37.66492576254, 280], [55.762340409755, 37.563405727383, 280], [55.827535601652, 37.642427963005, 280], [55.781060833557, 37.632410425513, 250], [55.809123962677, 37.636334109863, 280], [55.691757584657, 37.529735958373, 250], [55.718006739925, 37.78524257825, 280], [55.729755823778, 37.732120239726, 280], [55.750213382256, 37.817291167553, 280], [55.687438023292, 37.604376135164, 280], [55.747439771414, 37.584306977402, 280], [55.764700113209, 37.603050902011, 280], [55.745886400822, 37.56625820783, 260], [55.781961792897, 37.706595908587, 280], [55.729015251257, 37.623787833549, 280], [55.709128651589, 37.620768031907, 280], [55.74105617465, 37.625242915408, 280], [55.708714114812, 37.622081072261, 250], [55.689401931032, 37.601708984023, 280], [55.658788681727, 37.757830665936, 280], [55.804397925608, 37.582135800769, 250], [55.683138803805, 37.549236332918, 280], [55.548572457166, 37.542419438242, 280], [55.566408261479, 37.573021276811, 280], [55.863110400948, 37.601964531137, 280], [55.706049778639, 37.766978621277, 280], [55.66576076324, 37.628761608084, 250], [55.61108363007, 37.606861806172, 280], [55.898229919658, 37.588464850878, 280], [55.649704518372, 37.744621167289, 280], [55.808857009781, 37.462915218785, 280], [55.757765414493, 37.634415628493, 280], [55.703752094311, 37.458982729513, 280], [55.80713578363, 37.409329486817, 280], [55.640929309698, 37.530805723969, 250], [55.822910849094, 37.588560811176, 280], [55.847685494438, 37.361116027329, 280], [55.765192722344, 37.638936769944, 280], [55.780003432285, 37.601177236636, 250], [55.659491527892, 37.749604419041, 280], [55.665074467241, 37.48158795609, 280], [55.664192839186, 37.481105080583, 280], [55.881017715015, 37.450458802583, 280], [55.885574773449, 37.602199641744, 280], [55.655853812108, 37.541891016952, 280], [55.669789264547, 37.552200036195, 280], [55.78874417097, 37.681389987209, 280], [55.822506742055, 37.823235768643, 280], [55.803342876099, 37.618196783226, 280], [55.88808433141, 37.662537478276, 280], [55.77582926831, 37.835708282522, 280], [55.809478478002, 37.464487921938, 280], [55.741774550958, 37.656067388697, 280], [55.802757516663, 37.755688868964, 280], [55.777307963587, 37.52081996953, 280], [55.851503890709, 37.676193005816, 280], [55.865571828796, 37.704971569412, 280], [55.764122861292, 37.706104506137, 500], [55.658984212023, 37.40259351913, 240], [55.884308721149, 37.601891014402, 340], [55.685217989051, 37.621808807253, 340], [55.653622718299, 37.620706456922, 240], [55.706248220392, 37.765442962958, 340], [55.774994582086, 37.583240905132, 260], [55.863110400948, 37.601964531137, 340], [55.846170470246, 37.357888880037, 340], [55.691757584657, 37.529735958373, 340], [55.757218779194, 37.659133619148, 340], [55.747355645627, 37.679901195341, 340], [55.744564606341, 37.565535153144, 340], [55.622606755434, 37.605940442688, 340], [55.841027330969, 37.4870212043, 340], [55.731742099694, 37.663741294177, 340], [55.823284333356, 37.497703115267, 240], [55.859023751085, 37.39515662787, 240], [55.658250613727, 37.742409856383, 240], [55.657314259821, 37.845234057199, 290], [55.913164788065, 37.571248912026, 290], [55.717315820085, 37.414055657984, 240], [55.618623934709, 37.507234271998, 240], [55.815445872832, 37.738070072691, 290], [55.612628778523, 37.720152956239, 240], [55.659491527892, 37.749604419041, 240], [55.655853812108, 37.541891016952, 290], [55.729755823778, 37.732120239726, 240], [55.717496760801, 37.794159518567, 240], [55.766371982736, 37.605462075663, 290], [55.741774550958, 37.656067388697, 240], [55.770266018446, 37.597235258901, 260], [55.678635074875, 37.892599535826, 240], [55.891630860967, 37.748865263889, 240], [55.67382278562, 37.276155020637, 260], [55.916546364792, 37.759186348776, 240], [55.888811644547, 37.433530516694, 240], [55.648774891061, 37.656282868281, 240], [55.761697065365, 37.636082911922, 700], [55.758621641167, 37.632857404435, 800], [55.73314868412, 37.48480752487, 2000], [55.901831185487, 37.548441590617, 260], [55.757218779194, 37.659133619148, 260], [55.810505065685, 37.383088859638, 260], [55.897530279874, 37.666193998321, 260], [55.707259409807, 37.387145982422, 260], [55.659491527892, 37.749604419041, 260], [55.622606755434, 37.605940442688, 260], [55.766995665975, 37.380241103557, 260], [55.604659717756, 37.488789304422, 260], [55.653622718299, 37.620706456922, 260], [55.658250613727, 37.742409856383, 260], [55.910945654336, 37.39610778156, 260], [55.881017715015, 37.450458802583, 260], [55.865571828796, 37.704971569412, 260], [55.687438023292, 37.604376135164, 260], [55.863712683601, 37.545815011827, 260], [55.891630860967, 37.748865263889, 260], [55.740961920922, 37.415484818858, 260], [55.677938521445, 37.467137992801, 260], [55.606708000971, 37.536719795871, 260], [55.799747520203, 37.482983405183, 260], [55.655853812108, 37.541891016952, 260], [55.898606941829, 37.629384932193, 260], [55.786747511505, 37.482626227805, 260], [55.729755823778, 37.732120239726, 260], [55.658885766722, 37.430131534756, 260], [55.61108363007, 37.606861806172, 260], [55.746962972883, 37.64650132594, 500], [55.758548643042, 37.641135072996, 2000], [55.809478478002, 37.464487921938, 260], [55.753558293862, 37.598244847752, 1350], [55.670557596519, 37.260589927726, 550], [55.823284333356, 37.497703115267, 260], [55.818266420876, 37.769898171037, 200], [55.625142575517, 37.760911936809, 260], [55.850984575599, 37.597454450948, 260], [55.612081708568, 37.732833225154, 260], [55.785539799645, 37.665350801423, 260], [55.69586126909, 37.66492576254, 260], [55.609772239646, 37.720052947482, 260], [55.823284333356, 37.497703115267, 260], [55.916546364792, 37.759186348776, 260], [55.859990844836, 37.659176916686, 500], [55.752447700244, 37.607259959992, 500], [55.815707914915, 37.523575811097, 1000], [55.788458507847, 37.593113762912, 1000], [55.751207115474, 37.606873007226, 1500], [55.70778233772, 37.657282425169, 350], [55.687438023292, 37.604376135164, 350], [55.689401931032, 37.601708984023, 350], [55.913164788065, 37.571248912026, 350], [55.747471451943, 37.706847364924, 350], [55.640929309698, 37.530805723969, 350], [55.658250613727, 37.742409856383, 350], [55.653622718299, 37.620706456922, 350], [55.852795867392, 37.585806826996, 350], [55.891630860967, 37.748865263889, 350], [55.823284333356, 37.497703115267, 350], [55.692224602818, 37.896429179837, 350], [55.621825231931, 37.713755930761, 350], [55.609772239646, 37.720052947482, 350], [55.585271705518, 37.724892853133, 350], [55.655853812108, 37.541891016952, 350], [55.758548643042, 37.641135072996, 350], [55.757454052624, 37.634513679065, 350], [55.69586126909, 37.66492576254, 350], [55.916546364792, 37.759186348776, 350], [55.982765845058, 37.174632671081, 350], [55.612081708568, 37.732833225154, 350], [55.785539799645, 37.665350801423, 350], [55.707259409807, 37.387145982422, 350], [55.766995665975, 37.380241103557, 350], [55.757070679828, 37.660871867922, 350], [55.757218779194, 37.659133619148, 350], [55.751582035877, 38.012203822421, 350], [55.706926865011, 37.592152658726, 350], [55.741774550958, 37.656067388697, 350], [55.846170470246, 37.357888880037, 350], [55.794342349883, 37.926247996439, 350], [55.817251553829, 37.387724896706, 350], [55.669789264547, 37.552200036195, 350], [55.799747520203, 37.482983405183, 350], [55.863712683601, 37.545815011827, 350], [55.755774841204, 37.614638938872, 350], [55.61108363007, 37.606861806172, 350], [55.881017715015, 37.450458802583, 350], [55.855202610184, 37.478390976664, 350], [55.729755823778, 37.732120239726, 350], [55.803342876099, 37.618196783226, 350], [55.782907446107, 37.720787882734, 350], [55.749194241662, 37.589767768503, 350], [55.708714114812, 37.622081072261, 350], [55.618623934709, 37.507234271998, 350], [55.743121865542, 37.507063106199, 350], [55.78197454795, 37.704461943222, 350], [55.691757584657, 37.529735958373, 350], [55.774529139078, 37.580409890024, 350], [55.622606755434, 37.605940442688, 350], [55.708498862021, 37.545168724302, 350], [55.769265057702, 37.596819763786, 350], [55.671692384092, 37.584867928283, 350], [55.779294674851, 37.601381531412, 350], [55.826696559345, 37.445291194739, 350], [55.855803979438, 37.477112831887, 350], [55.809498052431, 37.83123041226, 350], [55.809478478002, 37.464487921938, 350], [55.761072142815, 37.662588236338, 260], [55.783903957296, 37.596340499047, 260], [55.805938331122, 37.58250853923, 210], [55.747554656643, 37.581902500023, 1500], [55.804034999756, 37.398136909597, 900], [55.772600167071, 37.821039219339, 260], [55.88808433141, 37.662537478276, 210], [55.752957674568, 37.656761599259, 260], [55.771248030822, 37.680750388057, 260], [55.753622220812, 37.638424323268, 260], [55.707598780296, 37.729967703016, 260], [55.773100871573, 37.632824536156, 260], [55.773205382391, 37.621255966185, 260], [55.708051859799, 37.657301033806, 260], [55.771949347611, 37.680067508078, 260], [55.758435465199, 37.638963224895, 260], [55.663745043749, 37.608705418698, 260], [55.756679497615, 37.605780262485, 260], [55.756153456853, 37.621425164371, 260], [55.777649415311, 37.661054284334, 260], [55.764982880352, 37.638627214075, 260], [55.727031045738, 37.561063611357, 260], [55.737610520292, 37.247239511569, 1500], [55.729466996732, 37.646906912965, 1500], [55.774501669333, 37.587135328403, 2250], [55.754158274068, 37.6562147321, 1000], [55.773966942959, 37.586350042697, 1500], [55.799159169576, 37.514259757977, 950], [55.744564606341, 37.565535153144, 250], [55.845547451118, 37.66106710805, 260], [55.754852227943, 37.634582918828, 550], [55.824441278824, 37.632309173098, 600], [55.604659717756, 37.488789304422, 250], [55.910945654336, 37.39610778156, 250], [55.766995665975, 37.380241103557, 250], [55.653812483275, 37.844300890172, 250], [55.61108363007, 37.606861806172, 250], [55.809498052431, 37.83123041226, 250], [55.782907446107, 37.720787882734, 250], [55.823284333356, 37.497703115267, 250], [55.964207436938, 37.413049888408, 250], [55.757070679828, 37.660871867922, 250], [55.741774550958, 37.656067388697, 250], [55.913164788065, 37.571248912026, 250], [55.677938521445, 37.467137992801, 250], [55.863110400948, 37.601964531137, 250], [55.7616050670467, 37.6221603833796, 410], [55.75475790531, 37.557520820207, 410], [55.734166632305, 37.61887864362, 410], [55.871537206807, 37.543501390766, 750], [55.789566193232, 37.752520981355, 340], [55.757935500641, 37.627186954348, 1500], [55.612628778523, 37.720152956239, 1600], [55.780423406407, 37.608227423156, 500], [55.881017715015, 37.450458802583, 1000], [55.753110061729, 37.502790689623, 300], [55.795710692864, 37.540795151906, 570], [55.635171968883, 37.436937176274, 570], [55.892535081273, 37.6150845109, 420], [55.752545774615, 37.602905210335, 420], [55.846897541833, 37.651351927391, 420], [55.659491527892, 37.749604419041, 350], [55.760964629175, 37.624354276517, 480], [55.783307106161, 37.597870146752, 380], [55.750670600936, 37.596268566969, 420], [55.771597995517, 37.632749931667, 420], [55.765748122256, 37.608697963952, 570], [55.633924004869, 37.440073244581, 480], [55.718409319233, 37.777056600974, 250], [55.438434782083, 37.763403820065, 200], [55.742909113276, 37.639497076043, 300], [55.780680155256, 37.619513071396, 600], [55.764228612005, 37.623991975185, 600], [55.717256854596, 37.791967038257, 900], [55.642135818182, 37.543087313892, 1000], [55.710764831105, 37.77066569298, 150], [55.7473041457495, 37.6565755798935, 600], [55.700131921105, 37.767744955364, 500], [55.710422974425, 37.590261742772, 1000], [55.791547472662, 37.816217996248, 1000], [55.58597404829, 37.89560498448, 300], [55.758071536861, 37.608799116827, 1000], [55.769212443729, 37.670588293006, 950], [55.765624898981, 37.609390850801, 1000], [55.768980839063, 37.62680036368, 1000], [55.784496839544, 37.597503089423, 1500], [55.768865251446, 37.571551856487, 1300], [55.760749957005, 37.643042542312, 1200], [55.752494160222, 37.597616814229, 350], [55.886490699376, 37.656862256911, 1000], [55.735774247163, 37.586709687532, 1500], [55.820878766105, 37.632773991735, 650], [55.691145347048, 37.560349374838, 400], [55.793096183147, 37.808763488107, 800], [55.651196326126, 37.508473323168, 800], [55.864948984947, 37.604088063846, 1600], [55.761211656686, 37.619585530702, 1500], [55.897691370242, 37.390998485023, 450], [55.794717032643, 37.538264777428, 500], [55.722276563705, 37.621571973485, 1200], [55.869140583507, 37.67725259203, 500], [55.850693246938, 37.430781777171, 1500], [55.766272882163, 37.60768065883, 1800], [55.795728982779, 37.803830295689, 1500], [55.716742502242, 37.785262396887, 1100], [55.810104361025, 37.656221049958, 500], [55.804556681436, 37.645989328994, 300], [55.744781339794, 37.498666499822, 1100], [55.681880839956, 37.290584472304, 540], [55.674255678775, 37.604183035379, 1000], [55.712176215154, 37.608344304309, 1000], [55.756241514282, 37.627075318296, 3000], [55.602675123269, 37.740808966691, 350], [55.845415310956, 37.480665951524, 600], [55.711093974965, 37.632832516896, 600], [55.740961920922, 37.415484818858, 1000], [55.745608415125, 37.680516026974, 1500], [55.862126348035, 37.436668130303, 600], [55.683489062683, 37.843375094003, 350], [55.734224930064, 37.418105273532, 1000], [55.767451609301, 37.858271570081, 350], [55.746042237347, 37.852399837737, 350], [55.712281059902, 37.891350251943, 350], [55.773522183168, 37.825531913672, 350], [55.703805927453, 37.583972312047, 900], [55.994769105263, 37.173658474514, 1500], [55.754852227943, 37.634582918828, 1000], [55.751897620839, 37.532588210911, 1800], [55.748251256142, 37.627465741989, 850], [55.699766690067, 37.623987477951, 900], [55.71066622043, 37.619081579636, 480], [55.752109288221, 37.596287720657, 1000], [55.754681776367, 37.621529186085, 400], [55.795525142742, 37.585199032453, 240], [55.754681776367, 37.621529186085, 200], [55.728206081169, 37.612671541943, 240], [55.621825231931, 37.713755930761, 240], [55.776912726061, 37.659396836779, 240], [55.801941696941, 37.5319459416, 240], [55.755774841204, 37.614638938872, 350], [55.652098588869, 37.499224651082, 200], [55.817251553829, 37.387724896706, 350], [55.897530279874, 37.666193998321, 350], [55.859023751085, 37.39515662787, 350], [55.659491527892, 37.749604419041, 240], [55.655853812108, 37.541891016952, 240], [55.687438023292, 37.604376135164, 240], [55.609772239646, 37.720052947482, 250], [55.846170470246, 37.357888880037, 240], [55.823284333356, 37.497703115267, 240], [55.691757584657, 37.529735958373, 350], [55.606708000971, 37.536719795871, 240], [55.677938521445, 37.467137992801, 240], [55.729755823778, 37.732120239726, 350], [55.782907446107, 37.720787882734, 240], [55.744564606341, 37.565535153144, 240], [55.708714114812, 37.622081072261, 240], [55.653622718299, 37.620706456922, 240], [55.61108363007, 37.606861806172, 240], [55.744428405237, 37.629848403627, 240], [55.612081708568, 37.732833225154, 240], [55.757070679828, 37.660871867922, 350], [55.766995665975, 37.380241103557, 240], [55.809498052431, 37.83123041226, 350], [55.910945654336, 37.39610778156, 350], [55.920599491886, 37.839036673295, 350], [55.653812483275, 37.844300890172, 240], [55.604659717756, 37.488789304422, 350], [55.585891728131, 37.719991064736, 350], [55.794342349883, 37.926247996439, 240], [55.983427593937, 37.408996705722, 1000], [55.641942358265, 37.524163912452, 950], [55.59516863103, 37.541656170256, 550], [55.653890772234, 37.757558220851, 550], [55.784455657699, 37.473715593813, 550], [55.854897463381, 37.498577126778, 550], [55.802833384336, 37.799525194491, 550], [55.786391340399, 37.735475079452, 550], [55.667039214745, 37.785925511087, 500], [55.756722157218, 37.621637921554, 800], [55.827535601652, 37.642427963005, 1000], [55.74497680772, 37.54994856742, 1500], [55.73968527254, 37.604182845926, 1000], [55.910945654336, 37.39610778156, 400], [55.653812483275, 37.844300890172, 490], [55.746742411582, 37.537163778205, 490], [55.748607434274, 37.588043064768, 490], [55.768353490191, 37.590583922054, 400], [55.710056184932, 37.623576314238, 490], [55.801937271298, 37.53194148139, 400], [55.821353169382, 37.497673786593, 490], [55.823284333356, 37.497703115267, 400], [55.762513394649, 37.657688193211, 490], [55.75888646332, 37.640987227808, 400], [55.774521372271, 37.587171523595, 490], [55.747612629207, 37.626020834925, 490], [55.677938521445, 37.467137992801, 490], [55.778531279046, 37.585821093819, 400], [55.726873139525, 37.57967011542, 490], [55.799747520203, 37.482983405183, 490], [55.809478478002, 37.464487921938, 490], [55.727250942531, 37.626490835294, 490], [55.665074467241, 37.48158795609, 400], [55.770090105603, 37.60229476576, 1250], [55.780003432285, 37.601177236636, 400], [55.788585180238, 37.679294619379, 490], [55.790437774305, 37.584810397848, 490], [55.604659717756, 37.488789304422, 490], [55.757218779194, 37.659133619148, 400], [55.744564606341, 37.565535153144, 490], [55.747471451943, 37.706847364924, 490], [55.585271705518, 37.724892853133, 490], [55.691757584657, 37.529735958373, 490], [55.730146484425, 37.635803428188, 490], [55.774024053147, 37.603515160701, 400], [55.747550639477, 37.539572899774, 320], [55.621825231931, 37.713755930761, 490], [55.766995665975, 37.380241103557, 490], [55.645322686927, 37.39804459945, 550], [55.742904382767, 37.600307789153, 800], [55.825465947717, 37.33221159795, 600], [55.777584567326, 37.617632844317, 1000], [55.704822439465, 37.576330110057, 600], [55.802736647954, 37.528361800082, 500], [55.741837856744, 37.558263073725, 250], [56.001801521146, 37.123295702296, 500], [55.727888756959, 37.585423366454, 2500], [55.793273416228, 37.542870569654, 2000], [55.761173659386, 37.57659140944, 1000], [55.709794723456, 37.657093391611, 800], [55.762232733508, 37.568702709834, 750], [55.670648001512, 37.417329667392, 500], [55.747122934801, 37.605145941595, 250], [55.747950668391, 37.607888115278, 450], [55.682823664168, 37.561401899936, 1500], [55.588541815968, 37.663045606892, 1000], [55.679337440317, 37.571318178492, 1000], [55.82016541905, 37.797271894244, 750], [55.764180225958, 37.620422455036, 1000], [55.671729516774, 37.570005813907, 700], [55.763685649365, 37.565604881789, 1500], [55.76981968592, 37.655630685466, 1000], [55.713551690716, 37.77773286353, 1000], [55.764644211875, 37.646178562881, 1500], [55.715202239027, 37.8923381667, 500], [55.734806164264, 37.628003090434, 400], [55.640929309698, 37.530805723969, 490], [55.785539799645, 37.665350801423, 400], [55.67278900663, 37.277997622137, 800], [55.842409379661, 37.486418115862, 200], [55.790276236475, 37.544519055553, 300], [55.704530588482, 37.621101405371, 100], [55.718422535209, 37.825272959872, 1000], [55.803082782687, 37.784235952548, 1000], [55.922790622789, 37.856021969707, 1000], [55.739950427586, 37.861058684444, 600], [55.656965213014, 37.496276617867, 1500], [55.805803098076, 37.514851874339, 600], [55.83984535307, 37.488826687192, 800], [55.83565891578, 37.526489409559, 900], [55.810729205292, 37.476575774842, 1000], [55.606708000971, 37.536719795871, 930], [55.606708000971, 37.536719795871, 350], [55.930418057765, 37.775058994833, 1000], [55.832343625833, 37.454462150965, 300], [55.743002683808, 38.025089404502, 1500], [55.750125683412, 37.96417083287, 500], [55.749883791925, 37.972273309802, 600], [55.750746429234, 37.955645956537, 400], [55.751466984447, 38.01006681019, 1000], [55.734783895012, 37.96880089724, 800], [55.773224060549, 37.619470875035, 1130], [55.750576087819, 38.005342970434, 1400], [55.777895424719, 37.598738174208, 1130], [55.743490209959, 37.625276327527, 1500], [55.767129947585, 37.602492980468, 1130], [55.751909138213, 37.585994685697, 1130], [55.759140488621, 37.64576016478, 1130], [55.771587318732, 37.592805723463, 1130], [55.869133378633, 37.669414531041, 1000], [55.668983236801, 37.539802400189, 1500], [55.5479523454, 37.550537936098, 1000], [55.757218779194, 37.659133619148, 700], [55.747471451943, 37.706847364924, 800], [55.535037526002, 37.527163610495, 400], [55.810917586811, 37.638474040477, 800], [55.752109288221, 37.596287720657, 800], [55.794279887771, 37.543553501265, 800], [55.769212443729, 37.670588293006, 800], [55.775129753692, 37.583913111229, 920], [55.653622718299, 37.620706456922, 800], [55.982765845058, 37.174632671081, 800], [55.63775182136, 37.656246854628, 800], [55.746535681307, 37.561147579852, 800], [55.761173659386, 37.57659140944, 800], [55.761380355246, 37.620716396241, 920], [55.757218779194, 37.659133619148, 800], [55.740801628427, 37.657655347744, 920], [55.64994794023, 37.745946714523, 800], [55.847780292341, 37.360130619095, 800], [55.750658263951, 37.817578994568, 800], [55.780003432285, 37.601177236636, 800], [55.757495209062, 37.612181333906, 920], [55.747508158695, 37.681543229108, 800], [55.676328545266, 37.504639852696, 920], [55.781144974445, 37.63189626231, 920], [55.61108363007, 37.606861806172, 800], [55.822506742055, 37.823235768643, 800], [55.640257402165, 37.608378602853, 800], [55.809478478002, 37.464487921938, 800], [55.778808131423, 37.633214811226, 230], [55.709225257742, 37.618505784967, 400], [55.845547451118, 37.66106710805, 230], [55.723416730351, 37.651761561802, 600], [55.727649872197, 37.625882712045, 490], [55.648853924189, 37.505861510603, 200], [55.845547451118, 37.66106710805, 500], [55.756168053411, 37.627562176391, 1000], [55.86666832334, 37.494625888329, 500], [55.739051643607, 37.575163614773, 2500], [55.735584790376, 37.696334679033, 350], [55.752035092271, 37.591170852141, 750], [55.787365092202, 37.622781895114, 1200], [55.753883346541, 37.406353462431, 1100], [55.734443047195, 37.671002421084, 800], [55.614963345129, 37.721368727241, 1000], [55.772194164212, 37.584440108337, 800], [55.814360245408, 37.601694573892, 500], [55.782375948187, 37.600921603605, 300], [55.690536897577, 37.786914247302, 700], [55.711183116929, 37.506895421467, 1250], [55.888290785522, 37.514910167479, 500], [55.767988814361, 37.598649252049, 1000], [55.809478478002, 37.464487921938, 600], [55.433139331608, 37.54921165836, 600], [55.70395072127, 37.742679493546, 600], [55.644863476169, 37.494352850936, 990], [55.783949528608, 37.709889354538, 1000], [55.761334553636, 37.682204583299, 990], [55.764983525296, 37.608324885321, 990], [55.428216630131, 37.76787253783, 1000], [55.747456099276, 37.608018207411, 500], [55.857426755702, 37.495921468552, 800], [55.679575116111, 37.570190004039, 250], [55.827016111949, 37.622294883798, 200], [55.735504075826, 37.637558683323, 750], [55.87724636896, 37.523360129086, 1000], [55.860273539238, 37.499080156487, 650], [55.679634264807, 37.565516081556, 550], [55.76919674021, 37.671629271988, 650], [55.867549773929, 37.493405653436, 700], [55.740810479714, 37.623644779633, 700], [55.921046666306, 37.525658334466, 170], [55.864929216638, 37.605094712719, 800], [55.747754827722, 37.680643044912, 550], [55.742885513493, 37.629723898647, 720], [55.819333274772, 37.964164863666, 450], [55.792904328149, 37.894897415824, 800], [55.797523196223, 37.969050514229, 700], [55.382542789815, 37.53770709931, 500], [55.801078314198, 37.935178057983, 500], [55.708779328742, 37.658528993936, 900], [55.750905091516, 37.717206891093, 1000], [55.778165637655, 37.574052939348, 830], [55.700375847119, 37.752141226608, 800], [55.760137583878, 37.584538920718, 800], [55.378612293973, 37.541160800955, 300], [55.83984535307, 37.488826687192, 1000], [55.763264535731, 37.605565349952, 1000], [55.747763192885, 37.566927825723, 1000], [55.777146315841, 37.661759036374, 500], [55.773807320127, 37.639534272941, 700], [55.764627425046, 37.657386355848, 800], [55.977213154345, 37.908274680088, 700], [55.791767888695, 37.6610832012, 500], [55.744450837645, 37.67774304154, 1500], [55.679514425532, 37.534020973096, 680], [55.851979360347, 37.443060492096, 1500], [55.923377749035, 37.985919957397, 500], [55.923161116693, 37.992041199469, 500], [55.926444047625, 37.984552804051, 500], [55.924659487159, 37.979255021337, 1000], [55.919834052837, 37.998588235141, 800], [55.921079726755, 37.993121439766, 1000], [55.762958078202, 37.619668542725, 900], [55.771391205685, 37.583056774281, 1500], [55.970736505403, 37.930525701227, 180], [55.625678711272, 37.721954852816, 550], [55.57957440907, 37.677184157488, 600], [55.679086121747, 37.624057462455, 180], [55.764258768471, 37.657744415997, 1000], [55.869359979833, 37.676061854602, 700], [55.898728121214, 37.412248784526, 1500], [55.633520797904, 37.741242995647, 400], [55.83164381525, 37.301765002139, 1750], [55.739339367058, 37.666399940916, 600], [55.739197482023, 37.655878646904, 200], [55.728685497581, 37.610874208154, 450], [55.656440098321, 37.554493081214, 200], [55.776840833971, 37.696417453932, 500], [55.767416521533, 37.587799680587, 200], [55.74823220777, 37.776141144904, 1200], [55.661169299563, 37.760309354532, 1100], [55.723318700194, 37.825088076217, 960], [55.702576784924, 37.766286589195, 1100], [55.761413348926, 37.623787675258, 1000], [55.916915739486, 37.997155100205, 500], [55.948835736267, 38.059462793425, 580], [55.960623354779, 38.041390696306, 580], [55.763725815316, 37.594192339677, 1200], [55.755267990072, 37.560181339283, 3000], [55.948711091347, 37.301006303715, 1500], [55.881383037402, 37.432857074568, 650], [55.500027891116, 37.570972674366, 800], [55.676226300746, 37.889687016993, 1200], [55.914122173655, 37.814395360035, 1200], [55.852786535408, 37.179142883745, 500], [55.816615804611, 37.339993050809, 490], [55.754359090877, 37.636965169706, 1000], [55.945195595093, 37.283993988531, 500], [55.838866272963, 37.32296792265, 500], [55.829213399418, 37.305917868798, 280], [55.621655121291, 37.50501370815, 600], [55.44715263337, 37.759217159094, 600], [55.782907446107, 37.720787882734, 600], [55.893927833022, 37.409649059156, 600], [55.829544352257, 37.308148979495, 800], [55.839136840183, 37.30406176689, 1000], [55.893532948434, 37.725502953708, 600], [55.911873547099, 37.738375056889, 500], [55.892749893002, 37.725934958046, 350], [55.913229063618, 37.764057426894, 550], [55.916444256447, 37.772662753917, 380], [55.926518004423, 37.771320523412, 1000], [55.904673128448, 37.725136342256, 1000], [55.789566193232, 37.752520981355, 350], [55.789566193232, 37.752520981355, 400], [55.653812483275, 37.844300890172, 260], [55.782907446107, 37.720787882734, 700], [55.653812483275, 37.844300890172, 300], [55.780790572106, 37.612630441853, 500], [55.902631820682, 37.718161737325, 800], [55.92125493395, 37.848612240372, 600], [55.924530666905, 37.822225877819, 200], [55.923492448043, 37.813965431326, 600], [55.891764330544, 37.727230840786, 800], [55.920813128428, 37.863943789087, 850], [55.912783382416, 37.856852946878, 750], [55.92025770287, 37.828420141103, 1500], [55.91431497652, 37.864105345262, 500], [56.010359269422, 37.840458919291, 300], [55.919180319374, 37.855807151021, 600], [56.000703720096, 37.815419911672, 500], [55.911657334224, 37.812283714624, 270], [55.98576782137, 37.867574142173, 500], [55.996257348048, 37.867719911532, 1000], [56.008737879278, 37.838450997974, 1000], [55.914479278284, 37.811981120229, 600], [55.919869954839, 37.869321159752, 600], [55.763407536407, 37.65514145251, 300], [55.720842390167, 37.609354530299, 350], [55.758738765031, 37.61298052553, 500], [55.843053015626, 37.402836342334, 1100], [55.687438023292, 37.604376135164, 490], [55.759966576854, 37.614153092168, 400], [55.707109109315, 37.658838800387, 800], [55.749883180703, 37.593551043636, 800], [55.806800165047, 37.637592914873, 820], [55.757708368267, 37.585308188041, 820], [55.774577812557, 37.581948537192, 800], [55.773147147843, 37.590130974081, 820], [55.633158180348, 37.624287450591, 820], [55.746606547868, 37.559602943971, 800], [55.757687959054, 37.407140941064, 820], [55.744606341235, 37.54542869331, 820], [55.730599041743, 37.611478288695, 800], [55.768726886135, 37.597474649545, 820], [55.758455051947, 37.611761423274, 800], [55.755774841204, 37.614638938872, 820], [55.79123562761, 37.633573426092, 820], [55.794407397743, 37.583962670618, 820], [55.676949072502, 37.504839621557, 800], [55.792096012537, 37.575977494713, 800], [55.728220661452, 37.624186976603, 800], [55.818885178148, 37.573796764259, 820], [55.805052150282, 37.517089050768, 820], [55.708714114812, 37.622081072261, 820], [55.846704507598, 37.362039191168, 820], [55.691757584657, 37.529735958373, 820], [55.739210218732, 37.484528523504, 820], [55.724971417105, 37.580095031085, 800], [55.772913097964, 37.610216056872, 800], [55.770562352642, 37.620022952897, 820], [55.803103981236, 37.757756182128, 820], [55.640257402165, 37.608378602853, 820], [55.767320951152, 37.606771142864, 820], [55.809478478002, 37.464487921938, 820], [55.758621749959, 37.641635323392, 820], [55.665074467241, 37.48158795609, 800], [55.946374949271, 37.507300094969, 600], [55.814195136246, 37.343309001691, 500], [55.931929444773, 37.520097896136, 400], [55.618623934709, 37.507234271998, 1000], [55.755774841204, 37.614638938872, 260], [55.755774841204, 37.614638938872, 550], [55.746535681307, 37.561147579852, 1500], [55.771587318732, 37.592805723463, 2500], [56.004268743684, 37.876179359448, 270], [55.985989480163, 37.871875211346, 1000], [55.682524478568, 37.898781435869, 700], [55.784291497281, 37.710844741927, 200], [55.753998074727, 37.635326149259, 560], [55.708714114812, 37.622081072261, 560], [55.766720164096, 37.611236417694, 560], [55.834208162726, 37.410856678284, 560], [55.745148053394, 37.597106259732, 1250], [55.726986139246, 37.561395679624, 700], [55.680372056825, 37.87478965285, 400], [55.750120836929, 37.887474150509, 280], [55.797641840103, 37.939114597037, 280], [55.794342349883, 37.926247996439, 280], [55.668171659505, 37.871106355448, 280], [55.793713092187, 37.936610851543, 250], [55.659235802416, 37.917209754861, 280], [56.008367939483, 37.440043601097, 280], [55.692224602818, 37.896429179837, 260], [55.891764330544, 37.727230840786, 280], [55.916546364792, 37.759186348776, 280], [55.911421122869, 37.778170285819, 280], [55.420267963107, 37.547847923453, 280], [55.68405384974, 37.295320296118, 250], [55.435194797779, 37.549856383349, 280], [55.995247407149, 37.867323277489, 280], [55.74615241283, 37.862732516443, 250], [55.910945654336, 37.39610778156, 280], [55.904979092915, 37.416761425803, 280], [55.859023751085, 37.39515662787, 280], [55.585271705518, 37.724892853133, 280], [55.89180052305, 37.618688822109, 700], [55.739851968514, 37.632865112014, 750], [55.604659717756, 37.488789304422, 280], [55.658885766722, 37.430131534756, 280], [55.653812483275, 37.844300890172, 280], [55.764295373272, 37.844969324677, 280], [55.689519714222, 37.871475999706, 550], [55.680372056825, 37.87478965285, 1000], [55.704168358039, 37.898873979544, 500], [55.785944960942, 37.612039307834, 200], [55.761730555824, 37.619100541088, 2500], [55.665074467241, 37.48158795609, 360], [55.818881069858, 37.577360405626, 360], [55.748058060939, 37.588214742062, 360], [55.722258123984, 37.532183294228, 300], [56.000364076529, 37.205837990039, 360], [55.741025968859, 37.627878514764, 360], [55.852795867392, 37.585806826996, 310], [55.752035092271, 37.591170852141, 330], [55.809478478002, 37.464487921938, 310], [55.657314259821, 37.845234057199, 380], [55.725528909584, 37.645623272855, 310], [55.604659717756, 37.488789304422, 260], [55.691757584657, 37.529735958373, 260], [55.910945654336, 37.39610778156, 260], [55.742751739612, 37.985140097603, 500], [55.751350805844, 38.018705879275, 500], [55.727996960997, 37.961792056923, 500], [55.797384549313, 37.940893970728, 180], [55.744413367868, 38.021822234262, 500], [55.982807040238, 37.173300574006, 350], [55.997643364007, 37.236536689772, 400], [55.991260407069, 37.216982453644, 250], [55.976098549815, 37.156874610627, 550], [55.750889353799, 37.985297830414, 1500], [55.978487610562, 37.155657270281, 700], [56.000182736552, 37.209176461035, 600], [55.999785819392, 37.216592730034, 1500], [55.996738230571, 37.216215796904, 500], [55.757399237771, 37.634036720783, 570], [55.74290050354, 37.503559721353, 250], [55.762194160221, 37.681152267007, 180], [55.763485520537, 37.418074898959, 300], [55.799897825477, 37.411466816127, 500], [55.753277344657, 37.606402767302, 200], [55.727250942531, 37.626490835294, 1000], [55.744080349763, 37.625164932044, 850], [55.744564606341, 37.565535153144, 230], [55.909401729542, 37.540418561472, 230], [55.823284333356, 37.497703115267, 230], [55.689401931032, 37.601708984023, 230], [55.671452036829, 37.554052965421, 340], [55.609772239646, 37.720052947482, 700], [55.671452036829, 37.554052965421, 700], [55.762657994338, 37.594861914268, 520], [55.762694342157, 37.408324278271, 520], [55.761743434368, 37.642859976847, 1000], [55.743713530788, 37.601951353349, 520], [55.742414462988, 37.546392126066, 520], [55.888068141324, 37.400657218254, 700], [55.766340337229, 37.590666123108, 520], [55.715690386954, 37.591621889486, 520], [55.708714114812, 37.622081072261, 700], [55.744564606341, 37.565535153144, 300], [55.823284333356, 37.497703115267, 300], [55.604659717756, 37.488789304422, 300], [55.7658497828051, 37.6027702201121, 270], [55.749547707427, 37.590915282515, 300], [55.772663128441, 37.592410969519, 1000], [55.773460457857, 37.586801696097, 800], [55.792010121988, 37.7491685368, 1070], [55.732196712473, 37.617174084858, 280], [55.618623934709, 37.507234271998, 260], [55.837172160343, 37.6576868452, 900], [55.766313649244, 37.663723954508, 900], [55.863110400948, 37.601964531137, 260], [55.431973232136, 37.491486648549, 750], [55.583954337084, 37.599278309272, 280], [55.782907446107, 37.720787882734, 260], [55.687438023292, 37.604376135164, 1080], [55.782574338276, 37.629945227179, 1500], [55.78267403061, 37.705059351193, 500], [55.855202610184, 37.478390976664, 910], [55.859023751085, 37.39515662787, 2570], [55.782534814176, 37.711677087066, 400], [55.757218779194, 37.659133619148, 260], [55.823284333356, 37.497703115267, 200], [55.897530279874, 37.666193998321, 200], [55.781646890601, 37.705449166951, 200], [55.704444683965, 37.653845930988, 350], [55.782907446107, 37.720787882734, 240], [55.633924004869, 37.440073244581, 200], [55.762065599983, 37.662806045294, 600], [55.855202610184, 37.478390976664, 290], [55.855202610184, 37.478390976664, 260], [55.534701322511, 37.52612400532, 900], [55.766057300393, 37.556592249496, 800], [55.647521957884, 37.595610529319, 1350], [55.778707245836, 37.596556506522, 100], [55.763079604458, 37.560017775201, 350], [55.647521957884, 37.595610529319, 700], [55.768844991828, 37.596233253956, 1000], [55.6567053801, 37.597292306826, 1000], [55.75731757835, 37.602675804282, 400], [55.741836683684, 37.5991613246, 1200], [55.764983525296, 37.608324885321, 1000], [55.65338841677, 37.594121393091, 400], [55.76023755049, 37.613049239239, 2000], [55.863019091241, 37.606940217589, 500], [55.788692079662, 37.787338353497, 880], [55.82244701836, 37.645908298853, 880], [55.889862814067, 37.591261505394, 900], [55.888068141324, 37.400657218254, 570], [55.89486637844, 37.58554844226, 510], [55.857171383422, 37.350308147388, 570], [55.777296681125, 37.457158425817, 570], [55.751172069271, 37.789593594951, 570], [55.727982857455, 37.580548004488, 570], [55.677638573734, 37.574419284597, 540], [55.73998482221, 37.502458467339, 540], [55.790060966035, 37.605468077888, 700], [55.744564606341, 37.565535153144, 1000], [55.744564606341, 37.565535153144, 550], [55.791212943543, 37.635179877101, 800], [55.781238526339, 37.607154400431, 1100], [55.746706437489, 37.537546371942, 300], [55.647521957884, 37.595610529319, 230], [55.776912726061, 37.659396836779, 230], [55.924206571404, 38.001062454549, 1000], [55.799747520203, 37.482983405183, 240], [55.926871029545, 37.799561132041, 300], [55.640929309698, 37.530805723969, 240], [55.640929309698, 37.530805723969, 400], [55.752098013502, 37.598961184311, 400], [55.730146484425, 37.635803428188, 200], [55.420267963107, 37.547847923453, 260], [55.770536685627, 37.421384977121, 200], [55.727623547331, 37.449445298744, 200], [55.722082449129, 37.651474937714, 400], [55.737985591373, 37.637968383326, 200], [55.779238582376, 37.480308481206, 1000], [55.777072909085, 37.480596540801, 1500], [55.884675701698, 37.603798151759, 1000], [55.740801500789, 37.657656149195, 200], [55.763957674517, 37.660061542163, 550], [55.755215363342, 37.715459023668, 430], [55.717733100343, 37.786641312405, 940], [55.776626165316, 37.575080939269, 650], [55.774113493174, 37.654910373055, 500], [55.701317746806, 37.791016134168, 700], [55.701825441813, 37.788643279778, 600], [55.733982109676, 37.564544242054, 700], [55.759672820566, 37.574812855908, 1500], [55.735570406798, 37.66958627395, 1620], [55.612256709537, 37.536971362726, 500], [55.73944907471, 37.66475221829, 250], [55.776009222546, 37.660531300132, 350], [55.739045984333, 37.668174328469, 800], [55.761134494892, 37.571094852073, 1000], [55.633924004869, 37.440073244581, 1000], [55.770432491858, 37.650795518388, 300], [55.635171968883, 37.436937176274, 250], [55.780214757944, 37.692051620009, 300], [55.678635074875, 37.892599535826, 200], [55.747471451943, 37.706847364924, 200], [55.845547451118, 37.66106710805, 300], [55.785539799645, 37.665350801423, 200], [55.739361890842, 37.575407168812, 1000], [55.753049527886, 37.66705359646, 1500], [55.7321944664866, 37.5888958509116, 750], [55.762506481701, 37.593745960275, 2300], [55.750495813861, 37.594355293893, 750], [55.752109288221, 37.596287720657, 500], [55.730466107644, 37.579238828323, 500], [55.801840415768, 37.584887360946, 400], [55.859908509392, 37.467747327174, 1250], [55.769013272083, 37.627749127015, 700], [55.714112167034, 37.574405791668, 700], [55.777807483008, 37.628339013617, 500], [55.74344670661, 37.652227930401, 600], [55.730328535204, 37.623533649751, 700], [55.801941696941, 37.5319459416, 260], [55.737941508595, 37.634305053958, 1300], [55.801941696941, 37.5319459416, 350], [55.773460457857, 37.586801696097, 700], [55.7715980867591, 37.632750008808, 100], [55.766932914984, 37.632841174717, 1000], [55.809478478002, 37.464487921938, 1620], [55.770570924235, 37.637034872654, 300], [55.739221691842, 37.675016759123, 700], [55.749443819383, 37.645116754933, 1000], [55.750613866777, 37.653180087813, 700], [55.748058120881, 37.588214739897, 380], [55.585271705518, 37.724892853133, 380], [55.706926865011, 37.592152658726, 310], [55.843929965101, 37.569942831067, 500], [55.770360960596, 37.832752962246, 1100], [55.774994582086, 37.583240905132, 1000], [55.774577812557, 37.581948537192, 1000], [55.737582947042, 37.820034252975, 1400], [55.863712683601, 37.545815011827, 340], [55.633158180348, 37.624287450591, 260], [55.810154365973, 37.492525270593, 700], [55.886490699376, 37.656862256911, 400], [55.78197454795, 37.704461943222, 500], [55.810505065685, 37.383088859638, 290], [55.810505065685, 37.383088859638, 200], [55.810505065685, 37.383088859638, 500], [55.74921871948, 37.540006244891, 500], [55.74921871948, 37.540006244891, 490], [55.708714361317, 37.622074618194, 260], [55.729755823778, 37.732120239726, 1000], [55.74921871948, 37.540006244891, 300], [55.693855772691, 37.824424890758, 600], [55.74921871948, 37.540006244891, 200], [55.659491527892, 37.749604419041, 350], [55.74921871948, 37.540006244891, 650], [55.74921871948, 37.540006244891, 800], [55.74921871948, 37.540006244891, 1000], [55.729755823778, 37.732120239726, 500], [55.74921871948, 37.540006244891, 350], [55.74921871948, 37.540006244891, 350], [55.704884993562, 37.764841261176, 260], [55.730382938782, 37.737107580163, 200], [55.580372286612, 37.703680603561, 400], [55.759883342176, 37.647886853176, 800], [55.740983531687, 37.628222482234, 1000], [55.868654769253, 37.662457589544, 500], [55.764295373272, 37.844969324677, 750], [55.686323405759, 37.850133929037, 500], [55.733036789359, 37.481182561944, 2000], [55.788606847478, 37.761685743621, 450], [55.752531938207, 37.632793021231, 300], [55.869886304393, 37.588462226279, 900], [55.759157024741, 37.646110993406, 1620], [55.817183619993, 37.48605339228, 800], [55.836113374614, 37.614952183641, 900], [55.669479635027, 37.282099189708, 850], [55.770006484924, 37.678962065739, 1500], [55.798391797016, 37.58056337927, 600], [55.799723120872, 37.581802533991, 900], [55.732196662313, 37.635654205906, 300], [55.817251553829, 37.387724896706, 350], [55.910918099812, 37.736597763851, 600], [55.72138762031, 37.602011038199, 1250], [55.826696559345, 37.445291194739, 170], [55.877297478635, 37.651694781375, 400], [55.778324903851, 37.69960858417, 190], [55.877692102113, 37.646875498489, 400], [55.757072134226, 37.63197634583, 1500], [55.757998890879, 37.623222199901, 600], [55.585271705518, 37.724892853133, 850], [55.772463634868, 37.610910228752, 1000], [55.763166255832, 37.625984699559, 350], [55.743158282926, 37.56736393202, 400], [55.886599093636, 37.66015475446, 960], [55.757454052624, 37.634513679065, 600], [55.754588818818, 37.634799273763, 500], [55.757949222139, 37.633594550294, 400], [55.765716950819, 37.634737470961, 570], [55.655853812108, 37.541891016952, 200], [55.655853812108, 37.541891016952, 800], [55.765179106673, 37.634371817526, 1000], [55.739296510478, 37.548250959915, 500], [55.777710702942, 37.606955781311, 250], [55.753812687712, 37.63607070561, 200], [55.744810069689, 37.555200820209, 500], [55.743730799997, 37.555972235123, 250], [55.762067433598, 37.621123895999, 1500], [55.742503082569, 37.549602079809, 1000], [55.762223635915, 37.634663829487, 1000], [55.810280549793, 37.40459043734, 750], [55.852538081531, 37.350936456975, 1000], [55.69586126909, 37.66492576254, 800], [55.614881574977, 37.71217891483, 650], [55.585271705518, 37.724892853133, 250], [55.725167171244, 37.563464080988, 600], [55.585271705518, 37.724892853133, 820], [55.585271705518, 37.724892853133, 1000], [55.585271705518, 37.724892853133, 250], [55.585271705518, 37.724892853133, 500], [55.708714114812, 37.622081072261, 1100], [55.655853812108, 37.541891016952, 700], [55.752032108269, 37.592619980734, 220], [55.640929309698, 37.530805723969, 250], [55.691757584657, 37.529735958373, 250], [55.823284333356, 37.497703115267, 250], [55.763873010902, 37.646096587507, 940], [55.763321346096, 37.657680196791, 940], [55.841271437072, 37.497863082808, 450], [55.800225372573, 37.58694715233, 1000], [55.788015753239, 37.59353768489, 800], [55.787751747454, 37.593844954621, 700], [55.83966392147, 37.486699505729, 300], [55.842429252568, 37.484382630668, 320], [55.757530425563, 37.608374245135, 450], [55.884960971679, 37.439330433817, 1100], [55.585271705518, 37.724892853133, 300], [55.758683910749, 37.659102625878, 650], [55.784055342339, 37.635405734195, 700], [55.744564606341, 37.565535153144, 250], [55.706926865011, 37.592152658726, 250], [55.747471451943, 37.706847364924, 250], [55.823284333356, 37.497703115267, 250], [55.841869831632, 37.487974038252, 300], [55.856550574338, 37.344752645945, 2000], [55.823284333356, 37.497703115267, 500], [55.823284333356, 37.497703115267, 700], [55.846170470246, 37.357888880037, 1000], [55.772188602643, 37.592963008113, 850], [55.740961920922, 37.415484818858, 1500], [55.773163595845, 37.594902588646, 750], [55.740961920922, 37.415484818858, 80], [55.665074467241, 37.48158795609, 260], [55.665074467241, 37.48158795609, 260], [55.665074467241, 37.48158795609, 300], [55.798579267383, 37.595220401882, 350], [55.769725483812, 37.407530960802, 1200], [55.793436311987, 37.693531662793, 450], [55.74886699273, 37.563511560443, 1750], [55.80636812452, 37.418027401054, 1250], [55.75863161715, 37.742629300663, 500], [55.747471451943, 37.706847364924, 400], [55.70602940493, 37.404356225622, 500], [55.747471451943, 37.706847364924, 600], [55.747471451943, 37.706847364924, 400], [55.747471451943, 37.706847364924, 380], [55.846170470246, 37.357888880037, 260], [55.740961920922, 37.415484818858, 290], [55.662761606946, 37.554520791585, 500], [55.623313068156, 37.742448243708, 600], [55.796179409949, 37.930774773768, 1000], [55.793730516271, 37.560589193478, 750], [55.637593878318, 37.757353776767, 260], [55.637593878318, 37.757353776767, 500], [55.755255843896, 37.402939374035, 1000], [55.626142144875, 37.7495702912, 700], [55.792489131968, 37.565600822258, 500], [55.532199665711, 37.519213462711, 500], [55.811593775972, 37.652571199927, 600], [55.758441998243, 37.640600771932, 400], [55.737031589465, 37.659371141372, 600], [55.838993165982, 37.486785928378, 240], [55.892029006701, 37.745719218541, 280], [55.845519209578, 37.574406017404, 500], [55.758267477143, 37.546420763352, 1000], [55.864217047623, 37.676926323249, 600], [55.634012295335, 37.44198577815, 350], [55.764081990413, 37.703530842579, 300], [55.635171968883, 37.436937176274, 260], [55.753045354213, 37.594588417443, 490], [55.680754140256, 37.662877593439, 350], [55.672678523027, 37.568621308797, 600], [55.738944153392, 37.662919227722, 230], [55.683412055672, 37.660688138718, 450], [55.658984212023, 37.40259351913, 450], [55.851522032261, 37.438329917098, 750], [55.708796305046, 37.61565378794, 1250], [55.805799261127, 37.540848076417, 230], [55.806422550493, 37.549682336343, 1000], [55.78322033577, 37.642677789411, 440], [55.570060373005, 37.580680583791, 500], [55.759164947193, 37.642764034197, 1500], [55.673498352515, 37.277127429592, 800], [55.799926272232, 37.575379167668, 1000], [55.635171968883, 37.436937176274, 180], [55.707637592231, 37.598019898892, 200], [55.751861802562, 37.812765006912, 800], [55.769950333306, 37.482974083468, 400], [55.798235019859, 37.568690524651, 800], [55.708717473136, 37.733396291194, 700], [55.862718993221, 37.435034387733, 260], [55.862718993221, 37.435034387733, 450], [55.751179447589, 37.888812488822, 1700], [55.582689890318, 37.671630414927, 1000], [55.862718993221, 37.435034387733, 320], [55.726385216088, 37.581453973696, 260], [55.77355357874, 37.711961585859, 700], [55.713884208461, 37.750755213358, 600], [55.651736855729, 37.618847007929, 260], [55.682714072076, 37.62274129734, 500], [55.716185339689, 37.682644633385, 250], [55.633962696035, 37.613722536169, 550], [55.704937555409, 37.763947451012, 400], [55.704937555409, 37.763947451012, 400], [55.701670653211, 37.762503040482, 600], [55.726873139525, 37.57967011542, 280], [55.722881683832, 37.396620762172, 600], [55.701846219761, 37.759623925145, 300], [55.854022858841, 37.420595007326, 1000], [55.69324424108, 37.746318667328, 600], [55.692905059514, 37.735588133231, 800], [55.854310614125, 37.410448876219, 300], [55.762122112728, 37.784560323646, 440], [55.774549753619, 37.546504598808, 1100], [55.848417259872, 37.423695565061, 350], [55.629435223882, 37.600283795382, 1000], [55.788921186535, 37.519130252246, 1000], [55.654658346859, 37.584043913807, 500], [55.668592117178, 37.591786892855, 1000], [55.845768781761, 37.43131723137, 700], [55.803290933355, 37.724275996654, 1000], [55.77056935129, 37.624856745793, 530], [55.767436805228, 37.559580588017, 250], [55.745434667167, 37.658569699422, 700], [55.777296681125, 37.457158425817, 1250], [55.708133587648, 37.640341219401, 1000], [55.744131520833, 37.656944345961, 1200], [55.708206180603, 37.641980258728, 800], [55.848579090979, 37.422733783544, 500], [55.848744765361, 37.417098054183, 700], [55.669053138486, 37.629111056939, 1000], [55.786443643779, 37.480898735713, 500], [55.796415247678, 37.80078661876, 300], [55.65667494911, 37.60810757284, 350], [55.73029889179, 37.618923005281, 1300], [55.710896578314, 37.77148396864, 500], [55.697878682715, 37.824436526144, 600], [55.876645983967, 37.712184409058, 500], [55.870214522641, 37.709334023466, 500], [55.877249363333, 37.718363649995, 650], [55.836734863551, 37.641002739937, 1500], [55.831198073458, 37.593107826142, 600], [55.705575999606, 37.511195631122, 500], [55.701263114925, 37.81107127795, 700], [55.696106346916, 37.821454310458, 700], [55.654029472373, 37.482370439885, 750], [55.64070337808, 37.658084508499, 600], [55.651646407435, 37.527718766849, 800], [55.654142566977, 37.763608579844, 540], [55.741331253177, 37.658665241689, 750], [55.702486540764, 37.509255441799, 1000], [55.643149315671, 37.676486905203, 570], [55.649240207644, 37.484359638698, 500], [55.62039161611, 37.669432546412, 150], [55.62039161611, 37.669432546412, 1000], [55.785026539247, 37.556960963969, 650], [55.619827849135, 37.608882879104, 700], [55.742637920201, 37.499625131449, 260], [55.549142358514, 37.55434927375, 260], [55.808179284987, 37.638373048779, 260], [55.751582035877, 38.012203822421, 260], [55.643683919036, 37.508015375808, 600], [55.732156459242, 37.764406231482, 540], [55.724266386633, 37.767814511047, 600], [55.858993878435, 37.659609253914, 650], [55.810917586811, 37.638474040477, 1130], [55.826937775214, 37.595574067315, 750], [55.818117919032, 37.646705705833, 500], [55.7943756231, 37.491154547922, 200], [55.836209504097, 37.551291010399, 700], [55.821287201295, 37.606384939622, 260], [55.793220684448, 37.489265957154, 1500], [55.828211225622, 37.439925961396, 100], [55.7261609075, 37.527099168767, 450], [55.645180888116, 37.519014336803, 450], [55.683214455749, 37.45855479011, 600], [55.77738280265, 37.720874648705, 520], [55.789004504099, 37.521692502281, 700], [55.785181112479, 37.583330813888, 300], [55.781806379579, 37.581909865635, 1000], [55.812666940461, 37.627481081406, 500], [55.705742077269, 37.687276941227, 260], [55.826659515124, 37.517761764917, 700], [55.831758694784, 37.51985070413, 250], [55.704106069967, 37.689012316457, 350], [55.793565145847, 37.804715668126, 500], [55.715231630284, 37.552611683265, 400], [55.842787857573, 37.532108184798, 300], [55.718218443788, 37.549252867556, 590], [55.607934766747, 37.733691800815, 600], [55.83054628449, 37.453684991911, 500], [55.83747100315, 37.537620578937, 1000], [55.835016452587, 37.514881313277, 500], [55.810700188694, 37.459487691243, 200], [55.862568443354, 37.661896729388, 1000], [55.751496916456, 37.599102711355, 280], [55.781363590913, 37.705546101493, 280], [55.808060455571, 37.579815785324, 280], [55.732847218245, 37.663765331007, 230], [55.68534973771, 37.57891504611, 280], [55.727158631962, 37.606898631081, 280], [55.910945654336, 37.39610778156, 230], [55.773668532136, 37.650797549857, 280], [55.687502668844, 37.54339618275, 280], [55.653604117265, 37.501497436579, 280], [55.845547451118, 37.66106710805, 280], [55.770787678328, 37.648722513657, 280], [55.764983525296, 37.608324885321, 280], [55.740961920922, 37.415484818858, 230], [55.916444256447, 37.772662753917, 280], [55.604659717756, 37.488789304422, 280], [55.796132165988, 37.971418024358, 280], [55.916546364792, 37.759186348776, 280], [55.707259409807, 37.387145982422, 230], [55.836426417058, 37.537361657926, 280], [55.79883318104, 37.528077673043, 280], [55.707685033293, 37.584490760738, 280], [55.708420014697, 37.659594938298, 280], [55.743158282926, 37.56736393202, 280], [55.585271705518, 37.724892853133, 280], [55.790961772959, 37.557202617635, 280], [55.776881590737, 37.581462606648, 230], [55.71548202787, 37.815840100863, 280], [55.760232761593, 37.58485214438, 280], [55.757070679828, 37.660871867922, 280], [55.706926865011, 37.592152658726, 280], [55.653812483275, 37.844300890172, 280], [55.764982880352, 37.638627214075, 280], [55.741098991013, 37.656390077589, 230], [55.736359803101, 37.619100464793, 280], [55.716955107866, 37.792232649043, 280], [55.888272843725, 37.588236312554, 280], [55.828341409003, 37.420006580924, 300], [55.583977449186, 37.658744938989, 300], [55.651117896211, 37.557024327016, 1000], [55.581347405637, 37.658639961564, 800], [55.856655791884, 37.661078268634, 500], [55.811737197315, 37.71828757916, 500], [55.722739270933, 37.810280297849, 550], [55.807843615831, 37.712865767031, 600], [55.708416063389, 37.470392311328, 600], [55.644788567352, 37.52877981327, 680], [55.792529542463, 37.779265059256, 1300], [55.836489955513, 37.511485002032, 450], [55.648961167838, 37.744901440519, 260], [55.575585527206, 37.656240889729, 1000], [55.808367493031, 37.530091297647, 200], [55.841298424761, 37.518168895877, 450], [55.740801628427, 37.657655347744, 300], [55.789549568938, 37.500283313627, 1200], [55.759324908875, 37.752462232949, 250], [55.793006599236, 37.493679857668, 240], [55.720418321874, 37.822146778723, 280], [55.800746032579, 37.781309239784, 250], [55.887778671716, 37.558134923732, 500], [55.844027559581, 37.521515252915, 400], [55.706926865011, 37.592152658726, 410], [55.706926865011, 37.592152658726, 350], [55.844027559581, 37.521515252915, 400], [55.617340384694, 37.489574701944, 600], [55.867549773929, 37.493405653436, 450], [55.660195422529, 37.778714714105, 800], [55.790437183176, 37.77020604482, 550], [55.747471451943, 37.706847364924, 340], [55.823284333356, 37.497703115267, 510], [55.585271705518, 37.724892853133, 340], [55.6104256993491, 37.6065926135156, 680], [55.853094692859, 37.607438457972, 650], [55.706195535067, 37.572256659404, 790], [55.830741240355, 37.632305365352, 790], [55.894501490355, 37.613071576485, 350], [55.721431218553, 37.762241346866, 180], [55.732452924046, 37.645053861616, 230], [55.773966942959, 37.586350042697, 600], [55.941521981416, 37.516220231438, 850], [55.720797962077, 37.777747417277, 500], [55.58585194139, 37.630249591873, 450], [55.654463310455, 37.649526343371, 260], [55.848923646341, 37.58691848034, 600], [55.892136871284, 37.621872218634, 200], [55.895259297351, 37.449171141841, 400], [55.720719569796, 37.635516752211, 400], [55.588587380967, 37.61322661356, 300], [55.67113368663, 37.765725946729, 500], [55.885242148322, 37.640787495963, 550], [55.713855223194, 37.836471897257, 650], [55.718503622148, 37.646895014209, 500], [55.887656169353, 37.637983187342, 160], [55.792434410539, 37.718511057125, 350], [55.816491851945, 37.459875885927, 400], [55.764022309663, 37.433454201668, 200], [55.715828862544, 37.438062198137, 1250], [55.408729997265, 37.563658586364, 1200], [55.809131930973, 37.817773533535, 1200], [55.802334611095, 37.792535353101, 1000], [55.754249346714, 37.863193875964, 800], [55.799577583886, 37.791460913189, 600], [55.667865252539, 37.83680736934, 230], [55.421279848126, 37.534522439576, 1000], [55.78111285131, 37.599746546911, 280], [55.472347162906, 37.539648243784, 1000], [55.729755823778, 37.732120239726, 280], [55.860505294369, 37.483285458853, 280], [55.721445261251, 37.63576385909, 280], [55.685809634985, 37.431751572952, 280], [55.613293096799, 37.517422468914, 600], [55.741836683684, 37.5991613246, 280], [55.881650839858, 37.678199621449, 1200], [55.633158180348, 37.624287450591, 230], [55.86509598473, 37.536404352012, 500], [55.828034544504, 37.489458248723, 400], [55.764295373272, 37.844969324677, 350], [55.910606163324, 37.86614843425, 500], [55.90939512968, 37.540400571198, 180], [55.654649735391, 37.702835478739, 600], [55.648206516448, 37.686938775472, 800], [55.549142358514, 37.55434927375, 820], [55.643177783148, 37.768337381725, 580], [55.641772140932, 37.769374530928, 300], [55.901748967575, 37.405495489506, 1000], [55.778867830297, 37.690625379277, 1000], [55.895506451235, 37.480058166585, 1000], [55.813171091294, 37.826253383294, 300], [55.73602530622, 37.706077051095, 1000], [55.816789424988, 37.813160092589, 1900], [55.818087346819, 37.821673858137, 1000], [55.647787788652, 37.528454567188, 1000], [55.899971154255, 37.403883523672, 700], [55.676232945095, 37.259424369612, 540], [55.681302756519, 37.265901938353, 500], [55.685504354711, 37.257875879451, 600], [55.657385900262, 37.709485773068, 500], [55.67845993521, 37.268283194994, 720], [55.855194993912, 37.614401387243, 500], [55.636101741952, 37.358547680183, 600], [55.573534577411, 37.583142744768, 800], [55.75956509484, 37.583114342008, 500], [55.734189430133, 37.627375085573, 500], [55.758455051947, 37.611761423274, 500], [55.871915874926, 37.509935431361, 1000], [55.783629847488, 37.719200825864, 480], [55.756577102596, 37.632575642875, 420], [55.687180882755, 37.573667567491, 420], [55.687412940103, 37.852974746557, 1000], [55.742444748179, 37.624690230926, 1000], [55.690763975966, 37.858784972748, 1200], [55.431665007226, 37.540240669171, 500], [55.708714114812, 37.622081072261, 400], [55.605558851461, 37.287292903448, 820], [55.60555879432, 37.287292826562, 360], [55.672575657581, 37.268327377696, 300], [55.675120575276, 37.275207667315, 800], [55.712551306551, 37.816391474146, 870], [55.554832475004, 37.702840908056, 600], [55.636572718155, 37.700195352796, 400], [55.80158096973, 37.760287705114, 150], [55.624675026211, 37.716162868717, 600], [55.751865534982, 37.859255068489, 1500], [55.671744915787, 37.725002088196, 300], [55.68244219995, 37.722882864406, 750], [55.749015333904, 37.719294219317, 580], [55.751865534982, 37.859255068489, 500], [55.845547451118, 37.66106710805, 1000], [55.794278157977, 37.751879393693, 400], [55.803735093106, 37.753052947661, 300], [55.794278157977, 37.751879393693, 400], [55.794278157977, 37.751879393693, 350], [55.893916748553, 37.390320237307, 1000], [55.893916748553, 37.390320237307, 500], [55.638158112389, 37.696420461688, 300], [55.641221749518, 37.333904142236, 1500], [55.807725354201, 37.504898878686, 480], [55.751865534982, 37.859255068489, 230], [55.882495273676, 37.517875882681, 600], [55.684620593092, 37.858864642845, 640], [55.682898390569, 37.876791293382, 500], [55.904449099129, 37.699296922553, 800], [55.681829178426, 37.891635960411, 800], [55.885601085641, 37.528572258589, 450], [55.689246862338, 37.294922658178, 700], [55.614963345129, 37.721368727241, 1250], [55.433181061709, 37.545346861027, 1200], [55.612628778523, 37.720152956239, 280], [55.744564606341, 37.565535153144, 280], [55.618623934709, 37.507234271998, 280], [55.799747520203, 37.482983405183, 300], [55.897530279874, 37.666193998321, 300], [55.747471451943, 37.706847364924, 300], [55.625142575517, 37.760911936809, 280], [55.793071072285, 37.807137347669, 300], [55.674935692842, 37.270531317192, 300], [55.655853812108, 37.541891016952, 300], [55.809478478002, 37.464487921938, 280], [55.658250613727, 37.742409856383, 280], [55.689522664875, 37.30122309828, 600], [55.748292427813, 37.950377011588, 170], [55.682790259999, 37.865345006961, 110], [55.683692936736, 37.865805098159, 1000], [55.634851869521, 37.849917577895, 600], [55.7469391805, 37.591182449377, 350], [55.979956367843, 37.176376878763, 500], [55.628931503624, 37.74133007778, 500], [56.001960234227, 37.21080721711, 290], [55.680332286602, 37.289144187589, 180], [55.821859337351, 37.969695135632, 300], [55.797350387731, 37.800792812953, 500], [55.923835190015, 37.821373168026, 200], [55.982765845058, 37.174632671081, 260], [55.982765845058, 37.174632671081, 280], [55.661661778656, 37.903054620851, 850], [55.74649946186, 37.972865370044, 400], [55.682374460059, 37.900451042185, 1000], [55.682946156266, 37.897455831263, 250], [55.745148171953, 37.852971857446, 800], [55.558216910993, 37.708112649677, 2000], [55.683812371354, 37.899444762915, 500], [55.541601048326, 37.536500838011, 700], [55.755529024618, 37.600574002572, 350], [55.75394617839, 37.601568431755, 950], [55.83865724054, 37.388013144925, 600], [56.014316389375, 37.205394210621, 250], [55.740067269312, 37.621861103174, 600], [55.503046489266, 37.572557636701, 900], [55.741062022399, 37.629268670326, 1500], [55.493575751274, 37.568421145569, 300], [55.713993923132, 37.723470842703, 250], [55.714069847505, 37.718422186741, 700], [55.88896037421, 37.525760882888, 750], [55.887066453074, 37.523400078111, 690], [55.692224602818, 37.896429179837, 210], [55.762275342485, 37.862185809363, 1000], [55.764347136934, 37.853993307008, 1000], [55.88424954129, 37.755511508845, 350], [55.704453696827, 37.358777960676, 300], [55.675142029529, 37.891415253673, 500], [55.630306627223, 37.859837502453, 120], [55.889104069438, 37.451273299891, 600], [55.924682183624, 37.524794001867, 1100], [55.922382006303, 37.514268596594, 250], [55.749717778119, 37.866759863191, 700], [55.670787584278, 37.281187475468, 800], [55.671520324007, 37.283797449583, 200], [55.747021160342, 38.02188172583, 800], [55.844319363393, 37.382891486395, 500], [55.844319363393, 37.382891486395, 200], [55.751152070361, 37.95701313465, 600], [55.834798837856, 37.299149648107, 580], [55.92106391946, 37.835072564251, 1000], [55.778668303798, 37.696583331786, 350], [55.98945841173, 37.226438614255, 800], [55.385609715874, 37.545351434562, 280], [55.672959615056, 37.284449566364, 200], [55.984105902525, 37.213995912005, 500], [55.672109538731, 37.287589439774, 320], [55.797152586584, 37.517578501493, 750], [55.680743473983, 37.887858734496, 250], [55.437587627034, 37.773824951795, 400], [55.945098527464, 37.512156536127, 500], [55.750613866777, 37.653180087813, 490], [55.437873011218, 37.767855446839, 1000], [55.822936686017, 37.367998782645, 200], [55.993268398407, 37.212863534367, 500], [55.996624311, 37.189370941974, 500], [55.98463446407, 37.156590642037, 500], [55.414880148191, 37.902941276023, 800], [55.674853259741, 37.298453456627, 1500], [55.748689132171, 37.583339557468, 150], [55.414880148191, 37.902941276023, 400], [55.414880148191, 37.902941276023, 750], [55.539901019064, 37.544654564714, 550], [55.388133562206, 37.541245658559, 300], [55.924539486955, 37.754124270746, 800], [55.650797067368, 37.854658225674, 1600], [55.915388247648, 37.857936785517, 600], [55.439992005073, 37.75143457492, 400], [55.729632478591, 37.636281733569, 850], [55.749194241662, 37.589767768503, 900], [55.751834559217, 38.006599436349, 600], [55.60438897835, 38.105186276949, 300], [55.751345335054, 37.999870285277, 800], [55.793229392029, 37.636082176878, 1000], [55.937603024315, 37.857415623243, 300], [55.937095338933, 37.853556844066, 500], [55.950082056289, 37.303098471863, 550], [55.932362778469, 37.843571269488, 600], [55.9184704784, 37.725765388487, 850], [55.687435082317, 37.313506704664, 650], [55.764190249709, 37.629261061939, 1000], [55.919547711631, 38.011451290132, 500], [55.409856323417, 37.550124891348, 500], [55.761266873263, 37.576011868491, 260], [55.799747520203, 37.482983405183, 260], [55.766995665975, 37.380241103557, 260], [55.930911453038, 37.851925113026, 800], [55.855202610184, 37.478390976664, 260], [55.655853812108, 37.541891016952, 260], [55.74921871948, 37.540006244891, 260], [55.418617710259, 37.831839193435, 620], [55.436463875906, 37.77149679334, 500], [55.417994710712, 37.839594261901, 900], [55.590697110627, 38.127607039858, 550], [55.419425631942, 37.832794099567, 600], [55.425850393244, 37.547946125295, 200], [55.936952265088, 37.851470607489, 1000], [55.592055212724, 38.123306397333, 650], [55.601120856973, 37.034549322712, 700], [55.432890909009, 37.56272398919, 1000], [55.923161116693, 37.992041199469, 600], [55.924584774691, 37.998848860812, 280], [55.860505294369, 37.483285458853, 540], [55.815943730737, 37.362868606386, 750], [55.780874106863, 37.606303631166, 400], [55.799883762221, 37.279934224785, 1000], [55.866302825477, 37.119036902748, 500], [55.955239649012, 38.052385956015, 400], [55.747874714219, 37.59243429513, 1500], [55.584596456782, 37.741056217504, 400], [55.760869038631, 37.632843950248, 1000], [55.733796858533, 37.376832891823, 550], [55.912891927746, 37.860051978001, 600], [55.783629847488, 37.719200825864, 1250], [55.670124603108, 37.493602243302, 1500], [55.652643706484, 37.613622245551, 800], [55.799089251894, 37.774704930367, 550], [55.433902668412, 37.756104513081, 1000], [55.917612903814, 37.867089429432, 820], [55.605688524594, 38.09914734397, 600], [55.432078882868, 37.524138949673, 1000], [55.602249667293, 38.107685452717, 550], [55.929534901039, 38.003234675716, 300], [55.919453438936, 37.992496492347, 500], [55.418134191569, 37.574184583865, 250], [55.436313802641, 37.55053628564, 800], [55.885583019255, 37.427820142929, 800], [55.661406269541, 37.857389876583, 1300], [55.774549753619, 37.546504598808, 350], [55.845547451118, 37.66106710805, 350], [55.744564606341, 37.565535153144, 350], [55.600265805317, 38.123001889052, 500], [55.597998909434, 38.113103391894, 1000], [55.75493004172, 37.843127960847, 250], [55.765436774289, 37.597536512493, 280], [55.740975705863, 37.610334380349, 800], [55.758009087439, 37.625453542671, 1200], [55.762312094849, 37.603951836037, 800], [55.736359803101, 37.619100464793, 200], [55.737328775604, 37.615442046456, 740], [55.764172032636, 37.602409523935, 700], [55.762850266625, 37.592730593309, 1000], [55.43222177298, 37.766947775772, 1000], [55.760243846165, 37.639912234986, 1000], [55.661322434902, 37.950266292845, 550], [55.764499112426, 37.656918500813, 400], [55.738352678813, 37.661681134461, 500], [55.759829260581, 37.596083616042, 1000], [55.691757584657, 37.529735958373, 260], [55.804338661935, 37.584854487106, 750], [55.886188307553, 37.424457765574, 500], [55.762495067231, 37.58774297285, 1000], [55.805680642275, 37.413610846446, 870], [55.769265057702, 37.596819763786, 155], [55.765828324602, 37.609897176539, 1250], [55.758047577613, 37.581821158829, 1300], [55.755774841204, 37.614638938872, 230], [56.013406920976, 37.483733591896, 1500], [55.752657402108, 37.60375273511, 800], [55.749704282952, 37.59297975526, 1000], [55.884975570389, 37.423781813987, 770], [55.743768635733, 37.627706749891, 400], [55.745689757766, 37.626294884663, 350], [55.752035092271, 37.591170852141, 280], [55.7540908625696, 37.6352154313146, 380], [55.73345727482, 37.709164212789, 550], [55.771579429883, 37.682198644826, 313], [55.755774841204, 37.614638938872, 310], [56.014086567267, 37.462282389899, 700], [55.885627701921, 37.420626017544, 1200], [55.771147562089, 37.620137300419, 740], [55.73944907471, 37.66475221829, 260], [55.757075094801, 37.599223527766, 280], [55.756433356797, 37.601485481828, 1500], [55.742111776436, 37.652405844137, 500], [55.74700763577, 37.58815087468, 1500], [55.589043731713, 37.754459156326, 800], [55.591313515554, 37.760935761514, 800], [55.439840680727, 37.565551874518, 550], [55.637017390572, 37.842221141441, 1000], [55.766517681305, 37.630542549145, 1500], [55.759713386836, 37.645257104415, 750], [55.76087662737, 37.61716166157, 750], [55.846679587154, 37.193894402071, 700], [55.692294724725, 37.727542838077, 1000], [55.761924247564, 37.613740032818, 560], [55.764190249709, 37.629261061939, 500], [55.76092998167, 37.622881449579, 500], [55.674935692842, 37.270531317192, 540], [55.667665289579, 37.285069219254, 540], [55.640724051284, 37.208089878344, 540], [55.76481462853, 37.638348727197, 150], [55.748190993184, 38.013436565097, 1000], [55.76481462853, 37.638348727197, 400], [55.743583731449, 37.647508018638, 800], [55.740327392281, 37.628176290749, 1500], [55.862718993221, 37.435034387733, 350], [55.716955107866, 37.792232649043, 350], [55.799071590928, 37.529835493526, 200], [55.772319914753, 37.632989295204, 870], [55.762588217478, 37.62717089602, 490], [55.805554241822, 37.801413680379, 900], [55.77766932122, 37.581446425096, 280], [55.931929444773, 37.520097896136, 280], [55.679634264807, 37.565516081556, 230], [55.796686018601, 37.933411837992, 280], [55.961109033365, 37.533672523388, 230], [55.83737312264, 37.57510381928, 420], [55.771601187545, 37.6826272174, 280], [55.708714114812, 37.622081072261, 230], [55.760943029154, 37.632523491435, 230], [55.757495209062, 37.612181333906, 1200], [55.778383150955, 37.599625045419, 280], [55.635171968883, 37.436937176274, 230], [55.755774841204, 37.614638938872, 280], [55.754051953579, 37.861537061249, 800], [55.580845626784, 38.136666772108, 600], [55.981852079473, 37.864166680541, 190], [55.744481711398, 37.627804704704, 1250], [55.758455051947, 37.611761423274, 500], [55.746957624842, 37.654088777221, 600], [55.840864021873, 37.379099122099, 350], [55.856982023576, 37.386120961814, 350], [55.899931899053, 38.060516410755, 290], [55.858723148307, 37.119659849842, 1200], [56.007203991067, 37.865308073997, 650], [55.67503490748, 37.723743600765, 500], [55.74921871948, 37.540006244891, 2570], [55.665505116579, 37.949612053898, 400], [55.923459157091, 37.985505108353, 650], [55.894246907645, 37.613525716771, 800], [55.813025590053, 37.344581345483, 400], [55.812583709719, 37.958673402811, 900], [55.589203663539, 38.135831980218, 400], [55.75926878102, 37.609029644763, 600], [55.707446345261, 37.659701326746, 600], [55.750625802456, 37.594791491688, 280], [55.760131179151, 37.649619232144, 1100], [56.101602294343, 38.125587030199, 300], [55.741073804464, 37.628871140321, 750], [55.846389285269, 37.489792600505, 200], [55.66700693246, 37.858103808969, 900], [56.012283525942, 37.476831804273, 1000], [55.815581279429, 37.340013956612, 400], [56.023275705558, 37.419810119953, 1000], [55.648961167838, 37.744901440519, 400], [55.741593433362, 37.621510863148, 1000], [55.662820641105, 38.005488735741, 600], [55.844328126498, 38.185180632627, 600], [55.952502055117, 38.049679974612, 700], [55.741078886253, 37.621623623636, 620], [55.751496916456, 37.599102711355, 620], [55.956878478506, 38.052311962458, 500], [55.999070881345, 37.839043878683, 150], [55.709041651472, 37.655292846442, 750], [55.956878478506, 38.052311962458, 150], [56.004488197701, 37.846519216692, 800], [56.008210206693, 37.798205804976, 400], [55.847388275613, 37.17917632465, 400], [55.491165260789, 37.311982865984, 400], [55.83893924583, 37.182965847805, 500], [55.767965050159, 37.531765298764, 170], [55.727982857455, 37.580548004488, 800], [55.750899273931, 37.71548870212, 700], [55.657463322389, 37.982490097616, 600], [55.773488995864, 37.544362323497, 100], [55.707685033293, 37.584490760738, 150], [55.707685033293, 37.584490760738, 350], [55.738395153613, 37.640440022717, 1000], [55.706402896195, 37.586522544735, 300], [55.706402896195, 37.586522544735, 250], [55.766242517472, 37.526559559091, 300], [55.902546341881, 37.585969696841, 600], [55.808139245539, 37.58170618594, 820], [55.70394548422, 37.686556592204, 800], [55.677782647253, 37.572171151628, 500], [55.70651983549, 37.585416665934, 420], [55.747471451943, 37.706847364924, 260], [55.589776982666, 37.900513848404, 1010], [55.795982294706, 37.946456493819, 250], [55.707677895924, 37.625416226547, 640], [55.720612925118, 37.746995522322, 350], [55.71450949574, 37.791314348949, 540], [55.659567069009, 37.982484482282, 600], [55.682524850065, 37.621214979594, 155], [56.015628896311, 37.47987782418, 1000], [55.704532518154, 37.584880215001, 230], [55.715611793961, 37.516435736615, 1000], [55.696081106312, 37.625630573974, 700], [55.822275502309, 37.499092286812, 500], [55.743256003064, 37.661647427838, 500], [55.739812322216, 37.469235202172, 800], [55.687438023292, 37.604376135164, 800], [55.803342876099, 37.618196783226, 260], [55.803342876099, 37.618196783226, 240], [55.704419503158, 37.691783941096, 1000], [55.793269887679, 37.608675121467, 600], [55.81142269979, 37.624817121679, 500], [55.9184704784, 37.725765388487, 650], [55.771799644108, 37.705210932705, 600], [55.800860313607, 37.564901216181, 750], [55.687180882755, 37.573667567491, 1000], [55.677542240449, 37.659893175346, 250], [55.741178026686, 37.502752066898, 260], [55.845547451118, 37.66106710805, 260], [55.757070679828, 37.660871867922, 240], [55.850984575599, 37.597454450948, 290], [55.881017715015, 37.450458802583, 240], [55.795599743199, 37.593502649799, 240], [55.609772239646, 37.720052947482, 290], [55.61108363007, 37.606861806172, 240], [55.766995665975, 37.380241103557, 240], [55.606708000971, 37.536719795871, 240], [55.753481638919, 37.71656558641, 290], [55.604659717756, 37.488789304422, 240], [55.806073282891, 37.581353373082, 240], [55.891764330544, 37.727230840786, 240], [55.910945654336, 37.39610778156, 240], [55.746742411582, 37.537163778205, 200], [55.639880689662, 37.758134080368, 260], [55.669789264547, 37.552200036195, 260], [55.733163447411, 37.668964062724, 260], [55.792371246237, 37.602959807388, 260], [55.83737312264, 37.57510381928, 260], [55.652441625944, 37.733722379874, 1500], [55.789566193232, 37.752520981355, 260], [55.679634264807, 37.565516081556, 560], [55.714105210354, 37.794532698735, 700], [55.726498702774, 37.531857789208, 1100], [55.739781178615, 37.652011012848, 260], [55.619503294373, 37.509386127877, 260], [55.743121865542, 37.507063106199, 220], [55.809498052431, 37.83123041226, 260], [55.689401931032, 37.601708984023, 350], [55.689401931032, 37.601708984023, 350], [55.78197454795, 37.704461943222, 260], [55.897773179561, 37.588270962435, 260], [55.640929309698, 37.530805723969, 260], [55.565063267224, 37.556737951728, 260], [55.643754721005, 37.526395669448, 260], [55.503046489266, 37.572557636701, 210], [55.808060455571, 37.579815785324, 260], [55.621825231931, 37.713755930761, 260], [55.414880148191, 37.902941276023, 260], [55.757070679828, 37.660871867922, 260], [55.677966288484, 37.780385907516, 260], [55.810180127781, 38.18253885291, 1000], [55.794342349883, 37.926247996439, 260], [55.870236127551, 38.190335475871, 450], [55.71548202787, 37.815840100863, 300], [55.71548202787, 37.815840100863, 250], [55.71548202787, 37.815840100863, 150], [55.717391625504, 37.78537724455, 550], [55.715248137152, 37.817296699035, 250], [55.819165438522, 37.723179449844, 600], [55.656939036741, 37.725351940208, 200], [55.807131240713, 38.188959115656, 900], [55.616453182536, 37.658060633915, 600], [55.646996723794, 37.411716304883, 260], [55.808060455571, 37.579815785324, 500], [55.609537826626, 37.977031105833, 650], [55.781447073368, 37.55616936873, 550], [55.680260577515, 37.570658676066, 1000], [55.691757584657, 37.529735958373, 280], [55.628823762591, 37.021579885636, 400], [55.805052150282, 37.517089050768, 530], [55.704963253125, 37.027389500014, 1000], [55.757302822621, 37.599146042954, 560], [55.706926865011, 37.592152658726, 530], [55.90939512968, 37.540400571198, 530], [55.66412515815, 37.482208186191, 530], [55.751821220426, 37.716104822503, 530], [55.865571828796, 37.704971569412, 560], [55.705287798576, 37.01974182847, 200], [55.692224602818, 37.896429179837, 560], [55.670923859582, 37.670474082102, 480], [55.670658694982, 37.671264426507, 300], [55.677938521445, 37.467137992801, 280], [55.677938521445, 37.467137992801, 240], [55.570590797821, 37.449967573961, 280], [55.77990865174, 37.69895790161, 350], [55.600076829368, 37.164305460541, 600], [55.798796963315, 37.68960408547, 600], [55.762464221864, 37.591923050914, 1500], [55.628721625642, 38.040891597532, 300], [55.670039541162, 37.538355535833, 500], [55.643352213275, 37.709111349385, 650], [55.782231089608, 37.835808543193, 800], [55.83130184898, 37.445513321759, 150], [55.703784045628, 37.574283900565, 750], [55.805260411904, 37.510972950312, 1000], [55.53829253494, 37.067773391132, 700], [55.648351460285, 37.712797526445, 500], [55.679141790126, 37.56382376674, 1200], [56.069124311109, 37.133902916345, 280], [55.590899600826, 38.203389638743, 700], [55.949390322593, 37.309324846814, 280], [55.540366836062, 37.083494899053, 650], [55.589813476152, 38.21053060709, 200], [55.574883239969, 37.580102603322, 260], [55.818936520262, 37.709408102501, 1500], [55.792551169204, 37.528390876333, 1000], [55.799071590928, 37.529835493526, 300], [55.728510291971, 37.623064329657, 480], [55.658250613727, 37.742409856383, 120], [55.792010121988, 37.7491685368, 1000], [55.599908810778, 37.040281458204, 1000], [55.897602671359, 37.604545516533, 800], [55.7987161746, 37.53219669463, 300], [55.768137913907, 37.599987914793, 490], [55.7825860707508, 37.7055424037749, 1100], [55.566976371548, 38.196431093241, 700], [55.712546169446, 37.56644392455, 820], [55.74921871948, 37.540006244891, 820], [55.883410289037, 37.558531585382, 1500], [55.777368285202, 37.487561852633, 900], [55.779414182078, 37.66692220644, 800], [55.752664827434, 37.818885868476, 820], [55.744908533833, 37.601391184072, 800], [55.728685497581, 37.610874208154, 820], [55.864929216638, 37.605094712719, 800], [55.803952923352, 37.707255070057, 1500], [55.73617735775, 37.59032958394, 820], [55.8494171329, 37.43899435456, 820], [55.963654726041, 37.41507067194, 820], [55.921193582339, 37.66490644393, 820], [55.800131756431, 37.535185468767, 300], [55.632715776761, 37.211286579913, 1500], [55.794757678921, 37.713220392992, 490], [55.774148855879, 37.581948809322, 200], [55.661909055039, 38.015065678736, 200], [55.805244992958, 37.515666125545, 200], [55.620393994526, 37.671036204406, 650], [55.832910157668, 37.628876691753, 250], [55.830425715049, 37.628042564137, 400], [55.653196315268, 37.596164728369, 200], [55.832075113958, 37.630073860267, 600], [55.797195687674, 37.717124312989, 500], [55.884729086336, 37.598421346735, 550], [55.831192223161, 37.62542555897, 250], [55.740149008021, 37.858433640338, 750], [56.004623373726, 37.857429992157, 250], [55.792010121988, 37.7491685368, 700], [55.792010121988, 37.7491685368, 250], [55.551986374641, 37.692835502936, 1000], [55.628931503624, 37.74133007778, 1300], [55.817662978943, 37.596719147677, 1000], [55.770560346071, 37.65551735554, 600], [55.78352556849, 37.692969081527, 900], [55.653186975643, 37.554163957082, 500], [55.789546149986, 37.748373829891, 280], [55.6004854654, 37.607617436507, 700], [55.789546149986, 37.748373829891, 440], [55.789546149986, 37.748373829891, 450], [55.757218779194, 37.659133619148, 65], [55.594440636676, 37.616136994918, 300], [55.789566193232, 37.752520981355, 290], [55.828119410579, 37.601097966093, 530], [55.750403151682, 37.414824836129, 75], [55.75615441333, 37.655576881499, 500], [55.932718445185, 37.547947620676, 1000], [55.79505646503, 37.732068211538, 350], [55.788146482323, 37.74934498316, 260], [55.788446634084, 37.748040044232, 180], [55.656335088779, 37.569643282147, 1500], [55.804035390911, 37.534339084086, 500], [55.420267963107, 37.547847923453, 240], [55.755613272178, 37.623571728773, 500], [55.769540110519, 37.597353627979, 900], [55.784262416783, 37.715268832382, 250], [55.782846986497, 37.728489903745, 350], [55.806946455222, 37.512505822507, 500], [55.792335296968, 37.695330680226, 350], [55.805803098076, 37.514851874339, 500], [55.677512500978, 37.74646170001, 480], [55.581227897966, 37.676533482615, 550], [55.816908606402, 37.71192525409, 450], [55.847723722339, 37.564314234061, 450], [55.808165568545, 37.529414676066, 500], [55.732914214994, 37.427313939555, 700], [55.766995665975, 37.380241103557, 280], [55.704104259298, 37.751068209685, 500], [55.618637363725, 37.592823733589, 1000], [55.678289614327, 37.740210323432, 500], [55.672495095863, 37.51545038858, 830], [55.656807916239, 37.472329902496, 830], [55.618903291256, 37.592543298288, 1000], [55.671474768895, 37.518150100987, 1500], [55.619020471761, 37.591775757352, 200], [55.672928527323, 37.747551229384, 1000], [55.775208196471, 37.58548115887, 830], [55.673087524373, 37.542250102519, 1200], [55.473769572047, 37.311201899249, 280], [55.795071683652, 37.512271984994, 1000], [55.698236845052, 37.763276961308, 700], [55.807422615073, 37.521630812032, 1000], [55.777296681125, 37.457158425817, 210], [55.667165135154, 37.491428164407, 700], [55.791867554161, 37.692765794168, 500], [55.829423683688, 37.816010818039, 700], [55.707053194455, 37.402934579432, 450], [55.64427780257, 37.523179713966, 150], [55.707053194455, 37.402934579432, 450], [55.665313118571, 37.513413342402, 500], [55.643754721005, 37.526395669448, 170], [55.863712683601, 37.545815011827, 500], [55.913164788065, 37.571248912026, 250], [55.90939512968, 37.540400571198, 300], [55.624983621547, 37.79881295173, 600], [55.650751538447, 37.560308207881, 1000], [55.581923186046, 37.657919108967, 1000], [55.701312912112, 37.503790193677, 1070], [55.669789264547, 37.552200036195, 700], [55.761394249535, 37.583682804368, 1000], [55.677938521445, 37.467137992801, 280], [55.604659717756, 37.488789304422, 280], [55.790427638107, 37.68710036412, 350], [55.64256111223, 37.520107886528, 750], [55.635254928475, 37.517635123383, 500], [55.725556534141, 37.377730231065, 300], [55.635254928475, 37.517635123383, 550], [55.652677857552, 37.475640085404, 3000], [55.666079121877, 37.545998274591, 600], [55.702495701949, 37.466427723545, 800], [55.669789264547, 37.552200036195, 240], [55.676949072502, 37.504839621557, 1200], [55.729017524147, 37.680036804185, 350], [55.631559272387, 37.51806504372, 450], [55.818466171713, 37.500497807688, 130], [55.631559272387, 37.51806504372, 450], [55.799747520203, 37.482983405183, 950], [55.839650193478, 37.387919830925, 950], [55.717497163489, 37.793678903103, 200], [55.659491527892, 37.749604419041, 250], [55.655434259562, 37.523293846181, 290], [55.420267963107, 37.547847923453, 250], [55.740217627215, 37.784505848336, 200], [55.716183593702, 37.813672874651, 400], [55.750229029183, 37.77052689167, 1000], [55.775675887908, 37.584798098563, 800], [55.659059066666, 37.754425047486, 600], [55.752000849566, 37.753653612704, 180], [55.714149812695, 37.821086502187, 250], [55.836531492745, 37.574066155111, 500], [55.950437644178, 38.061321965526, 550], [55.819153816247, 37.396819298141, 1000], [55.765323895982, 37.833275634303, 450], [55.805829981825, 37.817542060871, 600], [55.632538572888, 37.519720196442, 280], [55.840228912378, 37.579320818114, 590], [55.639880689662, 37.758134080368, 500], [55.673450082462, 37.780681297176, 700], [55.673450082462, 37.780681297176, 100], [55.673450082462, 37.780681297176, 300], [55.855202610184, 37.478390976664, 230], [55.805056942444, 37.420574813807, 600], [55.673450082462, 37.780681297176, 300], [55.585271705518, 37.724892853133, 240], [55.673450082462, 37.780681297176, 600], [55.430322939548, 37.549634666905, 100], [55.762032839987, 37.635163771622, 650], [55.757232818486, 37.595115648846, 650], [55.611475062844, 37.730662636349, 680], [55.612081708568, 37.732833225154, 280], [55.699389090397, 37.818503323694, 500], [55.848579832225, 37.617971184466, 340], [55.673450082462, 37.780681297176, 250], [55.861681951251, 37.613408928822, 1500], [55.850984575599, 37.597454450948, 240], [55.864443283801, 37.548069646828, 250], [55.850984575599, 37.597454450948, 300], [55.88294212884, 37.605251129796, 350], [55.606708000971, 37.536719795871, 280], [55.639880689662, 37.758134080368, 350], [55.855649920348, 37.619963425367, 700], [55.691757584657, 37.529735958373, 500], [55.762268444695, 37.62220456437, 450], [55.874337670183, 37.609190990901, 700], [55.870166610117, 37.60256861617, 500], [55.625142575517, 37.760911936809, 250], [55.788582721977, 37.78391781451, 200], [55.62861815253, 37.740717177474, 1000], [55.625142575517, 37.760911936809, 250], [55.78053775375, 37.574704259303, 1250], [55.840139058186, 37.486212483799, 140], [55.754681776367, 37.621529186085, 800], [55.619503294373, 37.509386127877, 280], [55.619503294373, 37.509386127877, 230], [55.619503294373, 37.509386127877, 250], [55.619503294373, 37.509386127877, 350], [55.886875688726, 37.601162999595, 500], [55.619503294373, 37.509386127877, 350], [55.845547451118, 37.66106710805, 280], [55.845547451118, 37.66106710805, 290], [55.863110400948, 37.601964531137, 300], [55.845547451118, 37.66106710805, 800], [55.845547451118, 37.66106710805, 350], [55.845547451118, 37.66106710805, 380], [55.641456504007, 37.765336361723, 1000], [55.845547451118, 37.66106710805, 500], [55.845547451118, 37.66106710805, 250], [55.845547451118, 37.66106710805, 850], [55.888272843725, 37.588236312554, 250], [55.876204548394, 37.668356837058, 350], [55.603263392581, 37.54152058988, 1000], [55.888272843725, 37.588236312554, 230], [55.812386373196, 37.827590898435, 300], [55.888272843725, 37.588236312554, 300], [55.604534766721, 37.739568391279, 1100], [55.612628778523, 37.720152956239, 500], [55.88982053857, 37.539316268799, 600], [55.88982053857, 37.539316268799, 350], [55.88982053857, 37.539316268799, 500], [55.88982053857, 37.539316268799, 400], [55.88982053857, 37.539316268799, 155], [55.599392890269, 37.737035897521, 250], [55.821353169382, 37.497673786593, 500], [55.871217157528, 37.665920320547, 1000], [55.750899273931, 37.71548870212, 1000], [55.733497381071, 37.640489400399, 1000], [55.76665016629, 37.60269807499, 1000], [55.701314310551, 37.503792765267, 1000], [55.863110400948, 37.601964531137, 400], [55.845547451118, 37.66106710805, 700], [55.845547451118, 37.66106710805, 200], [55.890156261206, 37.592334381495, 500], [55.606976744456, 37.523602678179, 500], [55.843948776778, 37.662657059824, 250], [55.609877633477, 37.732702521604, 1000], [55.713021680917, 37.690259966673, 350], [55.764335345502, 37.581397335442, 1500], [55.711444151804, 37.688264702985, 300], [55.711830661899, 37.68678593478, 500], [55.870009125533, 37.663994683812, 360], [55.726137808385, 37.561087389625, 1000], [55.775815233143, 37.585599472455, 1500], [55.726808339034, 37.625781220713, 1000], [55.759705267977, 37.578871777723, 280], [55.75980031211, 37.583710780923, 1500], [55.733777567497, 37.666875784402, 400], [55.869823350593, 37.676467689124, 500], [55.774878371284, 37.581423934123, 650], [55.710035397437, 37.66845957225, 400], [55.774529139078, 37.580409890024, 800], [55.706926865011, 37.592152658726, 280], [55.721643304262, 37.572179123246, 700], [55.730213527282, 37.632401459586, 1300], [55.72143319625, 37.626424713799, 800], [55.760330722349, 37.581478033529, 200], [55.740105475597, 38.015621531868, 600], [55.72942489112, 37.622749474837, 280], [55.778324995128, 37.694065070287, 500], [55.769529061013, 37.584998510061, 450], [55.746927236311, 37.626365469754, 230], [55.746742411582, 37.537163778205, 280], [55.715554749045, 37.632797998467, 170], [55.753178681636, 37.575596073196, 1000], [55.792841785441, 37.81855113219, 1500], [55.788912600559, 37.582039557001, 720], [55.778382383447, 37.584767606898, 280], [55.743158282926, 37.56736393202, 350], [55.743158282926, 37.56736393202, 350], [55.817251553829, 37.387724896706, 350], [55.751998751552, 37.582634665882, 270], [55.778247288061, 37.586897271306, 2000], [55.759672820566, 37.574812855908, 190], [55.741641586197, 37.627642340652, 500], [55.776998884207, 37.585339918052, 800], [55.658250613727, 37.742409856383, 260], [55.755774841204, 37.614638938872, 260], [55.732847218245, 37.663765331007, 500], [55.744428405237, 37.629848403627, 200], [55.738157504287, 37.52884591382, 500], [55.754631121672, 37.636594122132, 650], [55.741837856744, 37.558263073725, 550], [55.764295373272, 37.844969324677, 290], [55.982765845058, 37.174632671081, 340], [55.746535681307, 37.561147579852, 500], [55.741774550958, 37.656067388697, 260], [55.741774550958, 37.656067388697, 200], [55.771583771872, 37.681597979282, 280], [55.736962157041, 37.675762906643, 1000], [55.744564606341, 37.565535153144, 380], [55.744009084943, 37.582940746407, 600], [55.637813922442, 37.677676598551, 600], [55.922436318225, 37.715117857887, 250], [55.770136434725, 37.683632761752, 700], [55.632715776761, 37.211286579913, 250], [55.672262114251, 37.279600338201, 280], [55.744564606341, 37.565535153144, 300], [55.751207115474, 37.606873007226, 1500], [55.515552949639, 37.710321304409, 340], [55.743608055282, 37.578054928449, 500], [55.773588231618, 37.587457415653, 1250], [55.772657911855, 37.58576420136, 1000], [55.772894916093, 37.680071738879, 800], [55.783353095814, 37.632302855202, 990], [55.778687293506, 37.632134649576, 700], [55.776302094634, 37.627959024636, 500], [55.585891728131, 37.719991064736, 250], [55.770994848514, 37.587298220222, 900], [55.824631157926, 37.38838051103, 280], [55.647521957884, 37.595610529319, 280], [55.772894916093, 37.680071738879, 600], [55.747763928467, 37.6806663163, 200], [55.763108931584, 37.677867739327, 600], [55.746997981612, 37.678796312378, 150], [55.776009222546, 37.660531300132, 350], [55.776009222546, 37.660531300132, 200], [55.730424238194, 37.642958191241, 390], [55.90939512968, 37.540400571198, 750], [55.645003849785, 37.497065069267, 1100], [55.783353095814, 37.632302855202, 1800], [55.737834351972, 37.586474360298, 500], [55.776009222546, 37.660531300132, 350], [55.709100664643, 37.595542014618, 400], [55.774113493174, 37.654910373055, 400], [55.774113493174, 37.654910373055, 350], [55.774113493174, 37.654910373055, 300], [55.604659717756, 37.488789304422, 530], [55.707259409807, 37.387145982422, 560], [55.76819239992, 37.623026473995, 560], [55.729657614782, 37.639334555514, 300], [55.747368490038, 37.65619196179, 500], [55.772618804666, 37.660595136683, 400], [55.76394212482, 37.563228242806, 300], [55.76985925846, 37.657606954985, 350], [55.764130028303, 37.602553279099, 300], [55.802840814416, 37.517709515611, 300], [55.74921871948, 37.540006244891, 260], [55.706926865011, 37.592152658726, 400], [55.74921871948, 37.540006244891, 350], [55.74921871948, 37.540006244891, 800], [55.74921871948, 37.540006244891, 200], [55.748189829538, 37.584031428695, 400], [55.791720219667, 37.602392803879, 200], [55.738352678813, 37.661681134461, 500], [55.414880148191, 37.902941276023, 330], [55.741311187009, 37.54211320487, 1250], [55.770787678328, 37.648722513657, 1000], [55.810104361025, 37.656221049958, 900], [55.757070679828, 37.660871867922, 155], [55.729061634052, 37.637031446925, 260], [55.803342876099, 37.618196783226, 400], [55.780840877227, 37.722400051444, 250], [55.762697695701, 37.778155853992, 940], [55.916546364792, 37.759186348776, 940], [55.757070679828, 37.660871867922, 430], [55.758343979318, 37.598082733261, 4000], [55.727036064541, 37.650945751568, 1000], [55.657393033602, 37.731328178144, 200], [55.727062901951, 37.651704058359, 500], [55.753286712572, 37.586421918693, 1500], [55.764667676084, 37.55816354368, 400], [55.764667676084, 37.55816354368, 400], [55.781067207789, 37.626501889824, 500], [55.768260681526, 37.679253437652, 600], [55.767648618591, 37.679394160674, 600], [55.755578905063, 37.664499139317, 1000], [55.736434326788, 37.596385017388, 1000], [55.72658508883, 37.646913757539, 500], [55.762079517358, 37.626038059878, 1000], [55.708714114812, 37.622081072261, 250], [55.708714114812, 37.622081072261, 260], [55.750163312679, 37.18781341543, 550], [55.762798153313, 37.660965470984, 1500], [55.708113199402, 37.625497073994, 250], [55.787480383463, 37.61189922661, 700], [55.761072142815, 37.662588236338, 350], [55.708000547705, 37.655124726276, 270], [55.764770452144, 37.640170010447, 200], [55.414880148191, 37.902941276023, 640], [55.691757584657, 37.529735958373, 640], [55.681880839956, 37.290584472304, 280], [55.705267622255, 37.647888960119, 600], [55.717034371768, 37.594908033337, 500], [55.7525684172295, 37.5971779566042, 870], [55.767758698596, 37.598190858009, 550], [55.748784444823, 37.588490268375, 500], [55.62039161611, 37.669432546412, 155], [55.812252069906, 37.722698552568, 400], [55.773209381042, 37.621452235157, 320], [55.757222829684, 37.628308058838, 1000], [55.766873812623, 37.600871498083, 2000], [55.715248137152, 37.817296699035, 200], [55.655963592441, 37.828663260036, 155], [55.656575118246, 37.830068985012, 500], [55.830038135923, 37.812086268339, 600], [55.845547451118, 37.66106710805, 640], [55.582238975972, 37.706926079001, 280], [55.762323806282, 37.644669805088, 900], [55.782502017569, 37.573824546525, 1000], [55.772939039576, 37.610722258193, 1000], [55.845547451118, 37.66106710805, 380], [55.823284333356, 37.497703115267, 310], [55.736005674088, 37.595268132557, 300], [55.743121865542, 37.507063106199, 380], [55.760964629175, 37.624354276517, 250], [55.743230081023, 37.590516568744, 1000], [55.74727142435, 37.654893039954, 900], [55.747874802873, 37.65446202963, 1000], [55.748473466262, 37.648615648164, 400], [55.738003953427, 37.864356935246, 1000], [55.846181958018, 37.453304923257, 600], [55.90939512968, 37.540400571198, 350], [55.723945280653, 37.653898102848, 150], [55.504901661931, 37.559339512081, 700], [55.90939512968, 37.540400571198, 300], [55.891630860967, 37.748865263889, 200], [55.859023751085, 37.39515662787, 300], [55.657314259821, 37.845234057199, 250], [55.760749024838, 37.632151851033, 1500], [55.736839978315, 37.692149329989, 600], [55.773649308532, 37.57801133477, 600], [55.898606941829, 37.629384932193, 500], [55.898606941829, 37.629384932193, 300], [55.759017104904, 37.617233846369, 200], [55.806504512497, 37.587659488176, 580], [55.764295373272, 37.844969324677, 300], [55.881017715015, 37.450458802583, 500], [55.660845386752, 37.776025961213, 240], [55.882744154986, 37.729779247553, 400], [55.881017715015, 37.450458802583, 400], [55.653812483275, 37.844300890172, 260], [55.855202610184, 37.478390976664, 200], [55.855202610184, 37.478390976664, 240], [55.862718993221, 37.435034387733, 550], [55.862718993221, 37.435034387733, 450], [55.690042634963, 37.614611650042, 1000], [55.849076459798, 37.653244544513, 650], [55.708051859799, 37.657301033806, 200], [55.765192722344, 37.638936769944, 1500], [55.78197454795, 37.704461943222, 320], [55.785539799645, 37.665350801423, 200], [55.785539799645, 37.665350801423, 300], [55.621931185121, 37.783203957712, 400], [55.689401931032, 37.601708984023, 280], [55.757454052624, 37.634513679065, 1000], [55.643754721005, 37.526395669448, 450], [55.760823196398, 37.615386539993, 1500], [55.689401931032, 37.601708984023, 300], [55.689401931032, 37.601708984023, 260], [55.758481373819, 37.74104100438, 200], [55.689401931032, 37.601708984023, 240], [55.689401931032, 37.601708984023, 310], [55.689401931032, 37.601708984023, 250], [55.659491527892, 37.749604419041, 280], [55.977345581981, 37.148429145611, 450], [55.659491527892, 37.749604419041, 700], [55.743121865542, 37.507063106199, 540], [55.743121865542, 37.507063106199, 155], [55.920258252385, 37.366435607402, 800], [55.794403456615, 37.592054659366, 1250], [55.716353541063, 37.813247149393, 200], [55.71548202787, 37.815840100863, 300], [55.715248137152, 37.817296699035, 250], [55.741178026686, 37.502752066898, 155], [55.741178026686, 37.502752066898, 250], [55.741178026686, 37.502752066898, 220], [55.621931185121, 37.783203957712, 230], [55.764262078647, 37.653274468157, 800], [55.64014322193, 37.621916300111, 500], [55.64014322193, 37.621916300111, 500], [55.673450082462, 37.780681297176, 200], [55.64014322193, 37.621916300111, 260], [55.66458802383, 37.634781438517, 200], [55.679826047267, 37.565413237652, 500], [55.669789264547, 37.552200036195, 200], [55.743358476554, 37.629499751872, 1000], [55.740288075393, 37.621461787129, 600], [55.826151748246, 37.436071871773, 1000], [55.669789264547, 37.552200036195, 600], [55.869371014272, 37.662628265811, 500], [55.451996870038, 37.763467231162, 260], [55.793405473446, 37.4925115247, 230], [55.640547301745, 37.604430523267, 400], [55.574884876927, 37.580108413838, 1250], [55.737504842133, 37.629573980418, 300], [55.636916136214, 37.598296642963, 350], [55.747471451943, 37.706847364924, 450], [55.744428405237, 37.629848403627, 350], [55.744428405237, 37.629848403627, 400], [55.744428405237, 37.629848403627, 1000], [55.745487175068, 37.627031645714, 440], [55.774174707156, 37.617893528785, 600], [55.620298948843, 37.670881412899, 300], [55.732547527002, 37.623975536599, 500], [55.870341917151, 37.638015877361, 260], [55.80675037016, 37.524266112561, 1000], [55.782470760266, 37.615710216464, 155], [55.643668558942, 37.524737134353, 1000], [55.713086575941, 37.560463945904, 530], [55.720994031257, 37.401880943227, 500], [55.640929309698, 37.530805723969, 280], [55.807725354201, 37.504898878686, 680], [55.863110400948, 37.601964531137, 400], [55.863110400948, 37.601964531137, 300], [55.740961920922, 37.415484818858, 350], [55.822943527422, 37.525037727572, 600], [55.851462600831, 37.440800421599, 300], [55.863413064098, 37.68368040655, 200], [55.653622718299, 37.620706456922, 400], [55.653622718299, 37.620706456922, 300], [55.818327020072, 37.52987350238, 450], [55.603155123756, 37.599083945469, 900], [55.896043426847, 37.619766299278, 700], [55.901636651264, 37.610882996887, 200], [55.850694274202, 37.42541075281, 1000], [55.867234033497, 37.704183860692, 260], [55.743189822057, 37.85980353473, 1000], [55.60555879432, 37.287292826562, 550], [55.79244476363, 37.635600309759, 200], [55.729755823778, 37.732120239726, 200], [55.850485649969, 37.445292589026, 250], [55.739439430039, 37.527714362391, 220], [55.860505294369, 37.483285458853, 330], [55.818435434232, 37.447468350847, 400], [55.698561416057, 37.458106542591, 600], [55.689894195182, 37.852169701422, 1250], [55.976873366526, 37.148024898807, 700], [55.610322326369, 37.292182682084, 550], [55.60555879432, 37.287292826562, 750], [55.668991504632, 37.86549744202, 240], [55.747149501015, 37.420430002869, 350], [55.609107106028, 37.289783677713, 450], [55.604948392581, 37.292899154123, 450], [55.888723043668, 37.643171721107, 450], [55.842667858822, 37.379322399357, 1400], [55.853383456044, 37.351748811482, 1000], [55.683812371354, 37.899444762915, 500], [55.777687697662, 37.633535127159, 300], [55.636873765446, 37.352792659233, 200], [55.699090939543, 37.865141067016, 500], [55.636873765446, 37.352792659233, 400], [55.606422879404, 37.188507710225, 700], [55.634851869521, 37.849917577895, 1000], [55.63190330501, 37.847835880407, 800], [55.830461027391, 37.617351741245, 700], [55.728318400314, 37.610388978717, 260], [55.709380486192, 37.598019076749, 660], [55.830104073962, 37.353178162122, 400], [55.630684372472, 37.624910389394, 450], [55.696129574382, 37.558235193872, 300], [55.722320571622, 37.653857671909, 480], [55.966667740795, 37.415818949959, 300], [55.963460131204, 37.405384739265, 260], [55.966667740795, 37.415818949959, 260], [55.963460131204, 37.405384739265, 1620], [55.798842861287, 37.967221033957, 800], [55.774174707156, 37.617893528785, 1000], [55.963460131204, 37.405384739265, 155], [55.983993163587, 37.142403306335, 300], [55.980682101021, 37.410382084459, 300], [55.981321060905, 37.414962775466, 400], [55.980682101021, 37.410382084459, 500], [55.53421315579, 37.529832901552, 700], [55.758877768901, 37.708917886962, 1000], [55.817913897421, 37.311115352842, 700], [55.793752729057, 37.603935508657, 260], [55.692264482274, 37.561979702932, 680], [55.691926704532, 37.561490637816, 1250], [55.870626226816, 37.640982297148, 1250], [55.71171455561, 37.738094169692, 300], [55.99560706431, 37.19090399938, 600], [55.803342876099, 37.618196783226, 300], [55.803342876099, 37.618196783226, 900], [55.720418321874, 37.822146778723, 600], [55.80555320468, 37.584484288052, 700], [55.70081281838, 37.622323148633, 230], [55.69586126909, 37.66492576254, 280], [55.69586126909, 37.66492576254, 280], [55.812322203782, 37.595349335578, 600], [55.764291345324, 37.590499048565, 1000], [55.80940731273, 37.628481262589, 250], [55.679132026643, 37.888862964084, 1000], [55.921058900714, 37.997608043169, 155], [55.7518543555398, 37.6455805139865, 800], [55.793159932465, 37.592889559691, 500], [55.762711741798, 37.644060582637, 800], [55.706513031706, 37.688692358723, 650], [55.722896534329, 37.515762906241, 900], [55.771723412057, 37.515999229815, 450], [55.683315623078, 37.600406694008, 550], [55.690013505172, 37.676343012162, 200], [55.795961598393, 37.968155451092, 200], [55.825673565863, 37.966541219042, 450], [55.820023190967, 37.971993489408, 600], [55.794651040826, 37.971461050581, 300], [55.799683930333, 37.93770661899, 155], [55.850984575599, 37.597454450948, 200], [55.740654226808, 37.671866526213, 800], [55.744626819867, 37.565387422269, 450], [55.975466526901, 37.490376411311, 350], [55.692363010218, 37.729277268902, 220], [55.901278913436, 37.94853532579, 600], [55.902386877523, 37.716342854695, 200], [55.900382183097, 37.710329312977, 300], [55.954257942499, 37.51154764472, 300], [55.806795831946, 37.517742706523, 1350], [55.567270920872, 37.599718633951, 230], [55.666827358713, 37.458223836361, 280], [55.608263669127, 37.621941652928, 230], [55.70270542932, 37.506439729414, 400], [55.795851783802, 37.962611751236, 300], [55.895702533757, 37.716836096202, 500], [55.647787788652, 37.528454567188, 1000], [55.773289165803, 37.48489844842, 200], [55.675507815578, 37.505467105434, 230], [55.742247637801, 37.655218005737, 700], [55.76092998167, 37.622881449579, 280], [55.736098136693, 36.857045434801, 155], [55.758422547359, 37.692608246303, 180], [55.914871809376, 37.76264770933, 650], [55.919423198922, 37.745376370175, 600], [55.917856139572, 37.746575249332, 550], [55.91540237663, 37.760721485289, 450], [55.91320391053, 37.771143423269, 550], [55.729628682086, 36.857407448901, 350], [55.689953616991, 37.472960469806, 230], [55.963290172537, 37.808333961439, 680], [55.757996634899, 37.698130136196, 600], [55.647163005448, 37.737375845166, 350], [55.652956300164, 37.719411084354, 700], [55.769386897736, 37.692979164626, 350], [55.816997817626, 37.646707556851, 350], [55.578513258134, 37.910151514423, 1000], [55.917921627618, 38.007254512816, 800], [55.686644027013, 37.30592672329, 720], [55.681880839956, 37.290584472304, 1000], [55.153361369556, 37.45936476301, 260], [55.153361369556, 37.45936476301, 260], [55.693313137818, 37.726399425287, 200], [55.153361369556, 37.45936476301, 280], [55.687047516174, 37.571935332727, 800], [55.680840233179, 37.717840366614, 500], [55.676814509749, 37.720072514957, 750], [55.748986123346, 37.607369597852, 630], [55.679176491649, 37.687716967113, 540], [55.685311345604, 37.692477180548, 200], [55.747508158695, 37.681543229108, 900], [55.677638573734, 37.574419284597, 1000], [55.686294425524, 37.294315577953, 500], [55.752877592095, 37.717512454111, 450], [55.766873812623, 37.600871498083, 500], [55.747337412323, 37.58352683396, 500], [55.757529755478, 37.60048147469, 1000], [55.74121102691, 37.614277929719, 600], [55.730069640767, 37.624729156494, 1900], [55.91044450622, 36.866186871098, 500], [55.660784481418, 37.480312681059, 320], [55.668941099432, 37.741447687555, 500], [55.649850194435, 37.658294536338, 680], [55.804719309054, 37.424826342349, 400], [55.820790947227, 37.652788841525, 1000], [55.432785308289, 37.550080644446, 1090], [55.147826192456, 37.487276973577, 220], [55.543445661932, 37.720867757057, 500], [55.781294098416, 37.600432569555, 750], [55.438438711237, 37.751375653142, 620], [55.862452026715, 37.121473233238, 900], [55.766595779579, 37.652059910203, 400], [55.72374347017, 37.377825157032, 250], [55.375563343311, 37.539650599158, 500], [55.726873139525, 37.57967011542, 260], [55.419879655364, 37.573965752005, 500], [55.664040109065, 37.70094733867, 200], [55.595387487406, 37.339952725302, 500], [55.596713170925, 37.343256730118, 1000], [55.659892632973, 37.735951116131, 600], [55.578907473728, 37.237455726278, 155], [55.683817552709, 37.895369022237, 250], [55.585271705518, 37.724892853133, 280], [55.811593775972, 37.652571199927, 450], [55.811593775972, 37.652571199927, 450], [55.711731370175, 37.372061695802, 800], [55.757214738774, 37.618145254607, 400], [55.794834941818, 37.711206743581, 280], [55.980753111065, 37.249369911846, 200], [55.791900126209, 37.711386282968, 400], [55.790409688173, 37.71087998303, 200], [55.779100986355, 37.721656247678, 400], [55.933176126506, 37.979788725958, 700], [55.636916136214, 37.598296642963, 400], [55.836932427487, 37.638447131028, 450], [55.828678272654, 37.633694402371, 150], [55.764770452144, 37.640170010447, 1000], [55.828549229326, 37.630518381206, 600], [55.818799274126, 37.576869233781, 155], [55.832292916043, 37.62509805664, 250], [55.836820639974, 37.628464255431, 1000], [55.546155995992, 37.064685936152, 1500], [55.805554241822, 37.801413680379, 200], [55.55348468977, 37.078995405432, 500], [55.760169157928, 37.651432983216, 700], [55.763838306886, 37.606159302744, 630], [55.754588818818, 37.634799273763, 1020], [55.919494811717, 37.724006432014, 1750], [55.79580265345, 37.512867833058, 600], [55.703958062759, 37.734620223386, 300], [55.929284801122, 37.993065369978, 300], [55.910068680362, 38.0089048708, 250], [55.709794723456, 37.657093391611, 260], [55.606708000971, 37.536719795871, 260], [55.729670310747, 37.610771237162, 260], [55.747086035162, 37.60759708519, 800], [55.748607434274, 37.588043064768, 300], [55.781720589538, 37.71956467486, 600], [55.739559268052, 37.507350459355, 200], [55.74725882215, 38.006067955751, 450], [55.855542975132, 37.495753804057, 500], [55.790276236475, 37.544519055553, 350], [55.790276236475, 37.544519055553, 500], [55.790276236475, 37.544519055553, 300], [55.809498052431, 37.83123041226, 150], [55.734219193633, 37.41939798273, 540], [55.809498052431, 37.83123041226, 300], [55.782034189337, 37.593541742964, 750], [55.858187941968, 37.592713953423, 1800], [55.758081765531, 37.554720807883, 900], [55.746922031329, 37.679505282834, 1000], [55.681786030842, 37.928744683075, 1000], [55.164497561618, 37.468423949582, 1500], [55.789488508326, 37.753827910353, 500], [55.745997326632, 38.023735836206, 350], [55.695931785697, 37.335721765155, 800], [55.749974341867, 38.009886977928, 400], [55.748290550058, 38.0334838466, 400], [55.743575335812, 38.024397168848, 900], [55.748290550058, 38.0334838466, 700], [55.7661940899582, 37.6151033242638, 1000], [55.753773076247, 38.084332606786, 500], [55.862969162378, 37.585436561315, 290], [55.781961792897, 37.706595908587, 290], [55.638413033449, 37.351648925286, 290], [55.804397925608, 37.582135800769, 290], [55.683138803805, 37.549236332918, 290], [55.583954337084, 37.599278309272, 290], [55.548572457166, 37.542419438242, 290], [55.727061913735, 37.679741325817, 290], [55.824903123548, 37.436407252143, 310], [56.014316389375, 37.205394210621, 310], [55.864443283801, 37.548069646828, 290], [55.566408261479, 37.573021276811, 290], [55.66576076324, 37.628761608084, 290], [55.667530166701, 37.658514297783, 290], [55.622230428484, 37.613275921398, 310], [55.865592495176, 37.46222451979, 310], [55.662145020923, 37.508711262536, 310], [55.700143551074, 37.855631257536, 310], [55.898229919658, 37.588464850878, 310], [55.649704518372, 37.744621167289, 310], [55.775063779324, 37.479060757281, 310], [55.80713578363, 37.409329486817, 310], [55.703752094311, 37.458982729513, 310], [55.822910849094, 37.588560811176, 310], [55.827535601652, 37.642427963005, 310], [55.847685494438, 37.361116027329, 310], [55.716672930537, 37.409255279024, 310], [55.664192839186, 37.481105080583, 310], [55.718006739925, 37.78524257825, 310], [55.777307963587, 37.52081996953, 310], [55.750213382256, 37.817291167553, 310], [55.822506742055, 37.823235768643, 310], [55.851503890709, 37.676193005816, 310], [55.802757516663, 37.755688868964, 310], [55.77582926831, 37.835708282522, 310], [55.750120836929, 37.887474150509, 290], [55.793713092187, 37.936610851543, 290], [55.668171659505, 37.871106355448, 290], [55.473769572047, 37.311201899249, 310], [55.819068691218, 37.361139272178, 310], [55.829213399418, 37.305917868798, 290], [55.632715776761, 37.211286579913, 290], [56.008367939483, 37.440043601097, 290], [55.680743473983, 37.887858734496, 290], [55.659235802416, 37.917209754861, 290], [55.922436318225, 37.715117857887, 310], [55.911421122869, 37.778170285819, 310], [55.435194797779, 37.549856383349, 310], [55.995247407149, 37.867323277489, 310], [55.74615241283, 37.862732516443, 310], [55.904979092915, 37.416761425803, 310], [55.924584774691, 37.998848860812, 310], [55.880320033877, 37.489866697676, 500], [55.591691301256, 37.755018757202, 500], [55.794278157977, 37.751879393693, 300], [55.794278157977, 37.751879393693, 200], [55.789159979338, 37.748281590698, 300], [55.756577102596, 37.632575642875, 750], [55.67080164514, 37.747451744724, 200], [55.757879688015, 37.606139190889, 1000], [55.681034145838, 37.760368601449, 600], [55.828866313977, 37.643091894892, 300], [55.828866313977, 37.643091894892, 100], [55.677567106987, 37.753403587485, 800], [55.455708534241, 37.759388664446, 600], [55.757950552426, 37.636841648364, 850], [55.716672118935, 37.508986393161, 400], [55.70129007649, 37.511106840912, 400], [55.8322154874, 37.629840763959, 600], [55.834002640406, 37.62948492068, 450], [55.725697289702, 37.667493316167, 770], [55.737031589465, 37.659371141372, 700], [55.730715744214, 37.667203723785, 260], [55.718618215516, 37.681123888796, 750], [55.718618215516, 37.681123888796, 490], [55.718618215516, 37.681123888796, 600], [55.718618215516, 37.681123888796, 560], [55.718618215516, 37.681123888796, 700], [55.633298649451, 37.766786535272, 800], [55.659491527892, 37.749604419041, 700], [55.7243628171, 37.62153939307, 800], [55.738159502118, 37.673266269196, 250], [55.708561035973, 37.656850338033, 700], [55.728143565235, 37.623577887922, 200], [55.708561035973, 37.656850338033, 350], [55.718618215516, 37.681123888796, 630], [55.718618215516, 37.681123888796, 370], [55.718618215516, 37.681123888796, 720], [55.718618215516, 37.681123888796, 420], [55.654142566977, 37.763608579844, 380], [55.718618215516, 37.681123888796, 300], [55.718618215516, 37.681123888796, 670], [55.718618215516, 37.681123888796, 740], [55.770688554277, 37.596700074065, 480], [55.764757404604, 37.571650266398, 1350], [55.743879142304, 37.578206843884, 1000], [55.739724009193, 37.667371848206, 530], [55.658250613727, 37.742409856383, 155], [55.744715796912, 37.678039629635, 150], [55.782200394, 37.580108627138, 230], [55.731977233561, 37.6431817341, 1200], [55.785503632796, 37.596052216386, 410], [55.757287041235, 37.53665893305, 250], [55.73345727482, 37.709164212789, 540], [55.790367081183, 37.613839357403, 700], [55.779930994401, 37.605993997859, 1000], [55.785992088049, 37.63452725408, 1000], [55.757218779194, 37.659133619148, 800], [55.789799647235, 37.634383358395, 900], [55.73709440566, 37.583754049647, 550], [55.792473672368, 37.605000170935, 220], [55.757218779194, 37.659133619148, 590], [55.707905014476, 37.656741381557, 200], [55.871627093029, 37.637202924129, 1250], [55.776912726061, 37.659396836779, 260], [55.777687697662, 37.633535127159, 1000], [55.565063267224, 37.556737951728, 500], [55.757070679828, 37.660871867922, 500], [55.730108379927, 37.599390274424, 500], [55.903821897216, 36.857846080962, 170], [55.913049341797, 36.824258291, 400], [55.916043086665, 36.833484458869, 500], [55.645684842994, 37.517971473428, 800], [55.757070679828, 37.660871867922, 500], [55.732960801081, 37.55290899063, 1000], [55.859225284906, 37.395591714489, 430], [55.913876124186, 36.864417122524, 150], [55.914071816369, 36.863181205025, 300], [55.955239649012, 38.052385956015, 60], [55.734751896361, 37.64228006419, 1500], [55.961266594827, 38.043816050618, 400], [55.578799965542, 37.902632024287, 350], [55.732196662313, 37.635654205906, 500], [55.675400287074, 37.777187983484, 1000], [55.918911541169, 37.862266115444, 1250], [55.962295473805, 37.916648643999, 400], [55.964861637276, 37.915071666007, 150], [55.755048911704, 37.647206864003, 800], [55.962000710398, 37.908679761139, 400], [55.759507482376, 37.645706807148, 500], [55.859908509392, 37.467747327174, 650], [55.765864120802, 37.604792738671, 1200], [55.765864120802, 37.604792738671, 1630], [55.755339718384, 37.60898241992, 1500], [55.758118667766, 37.637038650601, 1000], [56.013971165509, 37.844119843125, 800], [55.731904727057, 37.624600454096, 600], [55.769692374677, 37.620749672423, 2000], [55.750201417588, 37.59477846838, 300], [55.755774841204, 37.614638938872, 240], [55.566791302472, 37.569793608766, 1000], [55.756679497615, 37.605780262485, 390], [55.753277344657, 37.606402767302, 120], [55.797273660266, 37.799698165609, 540], [55.767543452358, 37.601359508929, 1920], [55.677873618069, 37.507188499027, 200], [55.748308171042, 37.586895435951, 820], [55.757075094801, 37.599223527766, 1500], [55.643668558942, 37.524737134353, 240], [55.6558065843015, 37.5256601649313, 180], [55.760549206893, 37.614611141205, 1000], [55.680320408344, 37.53268090451, 330], [55.663691225211, 37.463965582665, 1000], [55.663691225211, 37.463965582665, 600], [55.856256294005, 37.65328998643, 800], [55.766797185559, 37.596586112304, 1000], [56.018931438428, 37.471818386108, 600], [55.914071816369, 36.863181205025, 1000], [55.751439152598, 37.595876324227, 200], [55.672024458855, 37.543600545667, 830], [55.750751824391, 37.595443412235, 350], [55.893916748553, 37.390320237307, 830], [55.737941508595, 37.634305053958, 800], [55.653812483275, 37.844300890172, 300], [55.739250978495, 37.633318423733, 280], [55.604659717756, 37.488789304422, 330], [55.856256294005, 37.65328998643, 260], [55.669789264547, 37.552200036195, 300], [55.669789264547, 37.552200036195, 250], [55.913397651127, 36.864848131021, 400], [55.633721089794, 37.518735318727, 1000], [55.631559272387, 37.51806504372, 500], [55.630454713453, 37.516977815624, 300], [55.619503294373, 37.509386127877, 260], [55.619503294373, 37.509386127877, 240], [55.618400908003, 37.510495717581, 600], [55.889838715049, 37.47858106729, 700], [55.997554244778, 37.227627114176, 1000], [55.805758092947, 37.581528862418, 800], [55.784850210641, 37.595427942141, 500], [55.612256709537, 37.536971362726, 350], [55.761117385053, 37.614554059401, 1500], [55.88982053857, 37.539316268799, 500], [55.886362281898, 37.524598331495, 350], [55.861565538715, 37.567137347072, 300], [55.879198246805, 37.57945261294, 700], [55.898628992759, 37.539204216138, 1250], [55.801706787464, 37.742966739703, 500], [55.823284333356, 37.497703115267, 280], [55.901831185487, 37.548441590617, 820], [55.758773786055, 37.654327385272, 1000], [55.75690101945, 37.598087809656, 520], [55.916546364792, 37.759186348776, 310], [55.728381920193, 37.608427098373, 310], [55.84351923097, 37.579727537527, 300], [55.800807677575, 37.595079217226, 270], [55.59954756618, 37.718089580769, 160], [55.683065629678, 37.680989273979, 190], [55.431974640257, 37.548688725197, 250], [55.870398475422, 37.676151979168, 500], [55.705850079031, 37.827918326738, 300], [55.870518719261, 37.676737947317, 500], [55.767100512546, 37.588194142857, 1500], [55.871976640513, 37.67181827427, 500], [55.691023012534, 37.906515164456, 550], [55.691023012534, 37.906515164456, 400], [55.869716798201, 37.676946131784, 500], [55.770476156844, 37.581173819924, 900], [55.583083399673, 37.662875767341, 600], [55.709777785755, 37.478232457206, 1000], [55.823284333356, 37.497703115267, 280], [55.758843130677, 37.640737734886, 230], [55.963654726041, 37.41507067194, 280], [55.706248220392, 37.765442962958, 280], [55.881017715015, 37.450458802583, 250], [55.705565751035, 37.689698698828, 280], [55.745109771106, 37.515868833429, 280], [55.653622718299, 37.620706456922, 230], [55.743931658477, 37.819640984341, 600], [55.653112600317, 37.822423257468, 500], [55.855202610184, 37.478390976664, 230], [55.681427414118, 37.624898384405, 280], [55.747355645627, 37.679901195341, 200], [55.794508140927, 37.587267607043, 280], [55.751087761825, 37.816054287414, 280], [55.769154599563, 37.583687553398, 280], [55.744821963359, 37.636703481848, 230], [55.565063267224, 37.556737951728, 230], [55.815445872832, 37.738070072691, 280], [55.762231603534, 37.682930254234, 280], [55.747471451943, 37.706847364924, 230], [55.593633178787, 37.242670838582, 280], [55.783702976415, 37.624285856824, 1500], [55.728570381989, 37.644627654756, 640], [55.772216381812, 37.647887942335, 640], [55.659115038945, 37.879794614863, 280], [55.427623061465, 37.755698452314, 700], [55.665894364208, 37.558209269596, 800], [55.866431932344, 37.592903254731, 600], [55.835046838514, 37.535208601977, 630], [55.879709087832, 37.557321598978, 650], [55.815173860955, 37.499239432495, 750], [55.754525136764, 37.569626711619, 1250], [55.889033009574, 37.594167836276, 700], [55.850984575599, 37.597454450948, 320], [55.876189353952, 37.589135542079, 650], [55.670115454043, 37.553905890365, 500], [55.748119689657, 37.766694084179, 250], [55.852795867392, 37.585806826996, 240], [55.767113398169, 37.607891949702, 1000], [55.681952214595, 37.847220092196, 1000], [56.008860260673, 37.199986030561, 260], [56.008860260673, 37.199986030561, 240], [56.008860260673, 37.199986030561, 800], [55.604659717756, 37.488789304422, 1000], [55.732049512357, 37.647090538931, 1000], [55.881017715015, 37.450458802583, 800], [55.612223538128, 37.718272535552, 290], [55.90939512968, 37.540400571198, 1000], [55.90939512968, 37.540400571198, 310], [55.881371031544, 37.7119314089, 400], [55.88808433141, 37.662537478276, 820], [55.753274458415, 37.857921563488, 1000], [55.856256294005, 37.65328998643, 250], [55.855202610184, 37.478390976664, 400], [55.82002734513, 37.465646913831, 500], [55.673006541475, 37.451270464581, 1000], [55.75493004172, 37.843127960847, 240], [55.748647987422, 37.657305296299, 1500], [55.860505294369, 37.483285458853, 500], [55.859908509392, 37.467747327174, 1000], [55.849967253439, 37.452001547301, 450], [55.794283522629, 37.665410658158, 800], [55.795664408983, 37.562236490378, 250], [55.866637086455, 37.706703397644, 240], [55.88779181345, 37.401307861813, 800], [55.797641840103, 37.939114597037, 320], [55.652098588869, 37.499224651082, 300], [55.622606755434, 37.605940442688, 300], [55.689401931032, 37.601708984023, 300], [55.618623934709, 37.507234271998, 300], [55.766656004917, 37.602708226975, 350], [55.764097104292, 37.615460096641, 600], [55.748780150412, 37.538669150608, 350], [55.74921871948, 37.540006244891, 200], [55.791362725989, 37.483053685305, 1000], [55.806959079784, 37.502593979901, 400], [55.784020908645, 37.470976121864, 230], [55.804372399889, 37.495860528102, 200], [55.803924145734, 37.582258325294, 300], [55.802845649489, 37.58380523113, 300], [55.802845649489, 37.58380523113, 400], [55.730358560152, 37.645524052789, 250], [55.724453040899, 37.646345818254, 250], [55.675926760058, 37.625105680619, 220], [55.68308116812, 37.536989505459, 155], [55.817078322003, 37.522497810124, 400], [55.958462308699, 38.052704455575, 500], [55.761568389824, 37.658246280325, 400], [55.796570458467, 37.599266685076, 400], [55.742179266693, 37.501629207713, 400], [55.610407177799, 37.71864676468, 400], [55.612628778523, 37.720152956239, 350], [55.644563578114, 37.654516619299, 500], [55.837967444134, 37.453808107366, 350], [55.827265924547, 37.445709592479, 300], [55.759045946292, 37.580816130841, 530], [55.792642711367, 37.590832743493, 300], [55.806538897265, 37.50413872608, 450], [55.649376918936, 37.744361489443, 530], [55.826696559345, 37.445291194739, 350], [55.818976143258, 37.51854615794, 700], [56.027274112326, 37.468331149117, 500], [55.614284930879, 37.743389008296, 155], [56.011984460707, 37.463055358094, 500], [55.745327053367, 37.856207666444, 1000], [55.862718993221, 37.435034387733, 260], [55.612081708568, 37.732833225154, 250], [55.812258716757, 37.588305820992, 350], [55.793869970526, 37.593564518961, 300], [55.8072627912, 37.588772751701, 350], [55.759803169696, 37.646334509936, 600], [55.875419072404, 37.333028718546, 600], [55.749895924563, 37.704519216807, 340], [55.759324908875, 37.752462232949, 230], [55.777932322397, 37.555685479113, 330], [55.84641768535, 37.655531395293, 560], [55.621931185121, 37.783203957712, 310], [55.847406003771, 37.658522657442, 500], [55.744564606341, 37.565535153144, 2570], [55.684427563615, 37.450952195709, 200], [55.684427563615, 37.450952195709, 300], [55.785026539247, 37.556960963969, 400], [55.77946653982, 37.547204283264, 400], [55.774082353601, 37.544088307507, 400], [55.759880945983, 37.752902817666, 300], [55.790756330567, 37.958926010199, 200], [55.694087292001, 37.531647808096, 820], [55.686046778736, 37.302675075125, 1000], [55.58215866813, 37.912458708418, 250], [55.58215866813, 37.912458708418, 260], [55.58215866813, 37.912458708418, 400], [55.58215866813, 37.912458708418, 870], [55.679974897508, 37.625335032798, 300], [55.764217867844, 37.61846958934, 400], [55.850485649969, 37.445292589026, 260], [55.743748411371, 37.628381951324, 250], [55.850485649969, 37.445292589026, 220], [55.850485649969, 37.445292589026, 300], [55.850485649969, 37.445292589026, 260], [55.850485649969, 37.445292589026, 350], [55.739720906619, 37.618665583849, 1000], [55.850485649969, 37.445292589026, 820], [55.850485649969, 37.445292589026, 950], [55.741789294471, 37.525489530308, 500], [55.850485649969, 37.445292589026, 1000], [55.748175795991, 37.543985114489, 400], [55.451996870038, 37.763467231162, 820], [55.725167562822, 37.578484476247, 1500], [55.451996870038, 37.763467231162, 350], [55.451996870038, 37.763467231162, 1000], [55.451996870038, 37.763467231162, 260], [55.607878603956, 37.42543058229, 500], [55.785318066239, 37.631249421912, 200], [55.846170470246, 37.357888880037, 260], [55.725168151448, 37.563465158945, 300], [55.77312783644, 37.600882277697, 600], [55.897540163431, 37.751317282666, 400], [55.773765746924, 37.59928636084, 200], [55.415759307162, 37.607656189792, 250], [55.415759307162, 37.607656189792, 200], [55.776998884207, 37.585339918052, 1000], [55.731987529579, 37.562326370978, 1900], [55.777224781004, 37.58614281069, 480], [55.732295254632, 37.564665236399, 300400], [55.698577022167, 37.850158616366, 820], [55.726670333592, 37.586542737462, 1500], [55.753108860751, 37.588977514969, 1090], [55.706926865011, 37.592152658726, 260], [55.837738797758, 37.480584331401, 400], [55.766253171977, 37.626278913763, 500], [55.774288595037, 37.674353341519, 320], [55.777902563442, 37.674570578232, 350], [55.925824768154, 37.817336612509, 500], [55.756244362357, 37.664964975364, 1000], [55.618623934709, 37.507234271998, 260], [55.659491527892, 37.749604419041, 260], [55.665074467241, 37.48158795609, 260], [55.760137583878, 37.584538920718, 260], [55.7267427047, 37.611323446575, 1250], [55.711458025176, 37.655872468953, 300], [55.728971931466, 38.028327920573, 500], [55.780770840735, 37.590335640001, 300], [55.742172912029, 37.975087700422, 500], [55.661665306256, 37.45263647377, 200], [55.783533231582, 37.721340170563, 350], [55.764741561553, 37.656071941813, 1250], [55.726651876721, 37.578161593954, 155], [55.758683910749, 37.659102625878, 150], [55.807375007459, 37.756802411098, 200], [55.807375007459, 37.756802411098, 200], [55.774113493174, 37.654910373055, 250], [55.774113493174, 37.654910373055, 400], [55.774113493174, 37.654910373055, 155], [55.774113493174, 37.654910373055, 350], [55.774113493174, 37.654910373055, 400], [55.774113493174, 37.654910373055, 400], [55.774113493174, 37.654910373055, 250], [55.767108050588, 37.657714254946, 400], [55.786623161872, 37.584198673065, 250], [55.738160701149, 37.678923042094, 1630], [55.792321548263, 37.601410266438, 500], [55.739724009193, 37.667371848206, 800], [55.772595706608, 37.67830160907, 1000], [55.713790986121, 37.757617353014, 1000], [55.770138552849, 37.686131916521, 700], [55.512357999158, 37.563424501442, 1000], [55.897702694186, 37.400965809506, 750], [55.770138552849, 37.686131916521, 250], [55.769540110519, 37.597353627979, 500], [55.776813497468, 37.649330953511, 350], [55.796451900069, 37.600637224176, 450], [55.608318110609, 38.090034815365, 250], [55.781623483079, 37.697015981889, 500], [55.780989817441, 37.633022191895, 155], [55.769516103495, 37.679425868006, 155], [55.769516103495, 37.679425868006, 200], [55.727374037218, 37.61259977421, 155], [55.720595879302, 37.61032969355, 700], [55.760081782631, 37.581421888604, 200], [55.774529139078, 37.580409890024, 200], [55.721262573816, 37.621726307026, 350], [55.774878371284, 37.581423934123, 150], [55.609974069375, 37.603543188871, 600], [55.76124150426, 37.683777072462, 250], [55.609974069375, 37.603543188871, 350], [55.609974069375, 37.603543188871, 600], [55.749455970574, 37.536879473823, 140], [55.791924251878, 37.603092563654, 300], [55.772216381812, 37.647887942335, 140], [55.746271604333, 37.546149768019, 150], [55.763358500503, 37.551320520453, 150], [55.699766690067, 37.623987477951, 150], [55.751897620839, 37.532588210911, 150], [55.722082449129, 37.651474937714, 140], [55.669789264547, 37.552200036195, 150], [55.775675887908, 37.584798098563, 600], [55.721945260777, 37.632814172339, 1000], [55.7243628171, 37.62153939307, 300], [55.794014880239, 37.495126152377, 1090], [55.720596780743, 37.632394645731, 300], [55.730358560152, 37.645524052789, 820], [55.705634444116, 37.611711751926, 250], [55.763023862447, 37.596697596541, 500], [55.764942376338, 37.632065912836, 1750], [55.794355911, 37.588159202283, 240], [55.770048977123, 37.584551015679, 200], [55.797390159361, 37.720514903925, 250], [55.767811516391, 37.738287162982, 250], [55.729484869367, 37.644696930368, 250], [55.794722220375, 37.713133673097, 480], [55.712116349378, 37.896429220249, 250], [55.73218465933, 37.680081855303, 700], [55.604466866594, 38.081169269331, 450], [55.685348646798, 37.673471372949, 1000], [55.733924211589, 37.663186565054, 180], [55.813789295272, 37.345845328744, 180], [55.719815736955, 37.648105457336, 600], [55.850485649969, 37.445292589026, 400], [55.850485649969, 37.445292589026, 550], [55.69871374278, 37.580255900273, 400], [55.601685185822, 38.115601924642, 1000], [55.726714033837, 37.450122921716, 200], [55.829028951017, 37.617316018847, 1000], [55.753932022284, 37.637593382543, 620], [55.721346106551, 37.733868615244, 710], [55.743121865542, 37.507063106199, 260], [55.60143891149, 37.479014438803, 200], [55.60143891149, 37.479014438803, 300], [55.74921871948, 37.540006244891, 300], [55.601758348205, 37.482797814467, 300], [55.743508742793, 37.505474871086, 500], [55.78610052622, 37.65796210722, 1000], [55.70081281838, 37.622323148633, 1100], [55.774514404695, 37.520613781467, 220], [55.726560800403, 37.607305266028, 450], [55.818974625447, 37.347260594916, 310], [55.705151965275, 37.588692164074, 200], [55.70493923325, 37.588901152513, 270], [55.818974625447, 37.347260594916, 260], [55.760549947998, 37.614613864099, 330], [55.761309508657, 37.614330655452, 400], [55.653812483275, 37.844300890172, 330], [55.761893153159, 37.624604718077, 1630], [55.759885908886, 37.647074939658, 1630], [55.730733384616, 37.628130183266, 570], [55.733758649151, 37.627296557622, 250], [55.730733384616, 37.628130183266, 1750], [55.733787233035, 37.627876386212, 750], [55.742157998642, 37.504094715255, 300], [55.742157998642, 37.504094715255, 400], [55.761413348926, 37.623787675258, 650], [55.742157998642, 37.504094715255, 155], [55.761879765483, 37.623268887996, 400], [55.76092998167, 37.622881449579, 450], [55.76092998167, 37.622881449579, 500], [55.764770452144, 37.640170010447, 820], [55.739708279854, 37.633576095301, 210], [55.744394954512, 37.649872565909, 450], [55.758729851921, 37.657203504171, 300], [55.755774841204, 37.614638938872, 500], [55.755774841204, 37.614638938872, 200], [55.770562352642, 37.620022952897, 260], [55.791584825291, 37.541433035095, 600], [55.771598041317, 37.632750009772, 200], [55.754681776367, 37.621529186085, 250], [55.729755823778, 37.732120239726, 600], [55.602699541508, 37.470098552412, 250], [55.754681776367, 37.621529186085, 1920], [55.714069847505, 37.718422186741, 500], [55.604659717756, 37.488789304422, 200], [55.604659717756, 37.488789304422, 600], [55.604659717756, 37.488789304422, 300], [55.604659717756, 37.488789304422, 250], [55.735431702794, 37.701599127011, 240], [55.729755823778, 37.732120239726, 700], [55.604659717756, 37.488789304422, 280], [55.90939512968, 37.540400571198, 300], [55.809498052431, 37.83123041226, 330], [55.809498052431, 37.83123041226, 180], [55.819313994767, 37.387350527868, 1500], [55.76607849585, 37.532574057922, 450], [55.76607849585, 37.532574057922, 400], [55.758136419075, 37.657147403599, 1500], [55.758729851921, 37.657203504171, 700], [55.848673680045, 37.590642632377, 800], [55.74233554254, 37.652898324682, 250], [55.737043072128, 37.594641065453, 210], [55.659059066666, 37.754425047486, 260], [55.88808433141, 37.662537478276, 400], [55.991379842205, 37.216038528927, 1000], [55.739708279854, 37.633576095301, 500], [55.740387893501, 37.609395547864, 1000], [55.841993841254, 37.677377827759, 750], [55.57830266146, 38.110552469054, 570], [55.809206088907, 37.126825074252, 600], [55.785019706783, 37.464210616547, 1500], [55.757218779194, 37.659133619148, 300], [55.811290084901, 37.128513205851, 250], [55.757218779194, 37.659133619148, 800], [55.901649290741, 37.58588637071, 300], [55.850485649969, 37.445292589026, 310], [55.757347846495, 37.622505314555, 350], [55.797641840103, 37.939114597037, 350], [55.70163368328, 37.731865292137, 720], [55.565063267224, 37.556737951728, 200], [55.765849770901, 37.602770219898, 820], [55.856758773873, 37.494838639351, 500], [55.722523433054, 37.561673768371, 1000], [55.837369011823, 37.636389809616, 400], [55.807789234938, 37.578367864454, 240], [55.750613866777, 37.653180087813, 300], [55.796228652104, 37.713512052336, 240], [55.802950097168, 37.773111096453, 270], [55.734508950496, 37.595467939714, 1250], [55.796820525924, 37.798946426867, 800], [55.803000946059, 37.778598219821, 500], [55.790212557145, 37.789741667087, 500], [55.818607021668, 37.647578706931, 200], [55.818682015359, 37.4481300282, 560], [55.82052241103, 37.648019680325, 600], [55.802382168392, 37.825832165808, 500], [55.820748810993, 37.642198714123, 450], [55.681871258225, 37.62274276643, 350], [55.758269666594, 37.700688982672, 700], [55.775986435224, 37.692044179138, 30], [55.774664554428, 37.687245824154, 200], [55.779565483396, 37.690723801507, 250], [55.780843602198, 37.689486156566, 300], [55.783949528608, 37.709889354538, 600], [55.778861327481, 37.67634152128, 200], [55.792641412347, 37.752150893819, 150], [55.792271129268, 37.752047734992, 500], [55.793869970526, 37.593564518961, 500], [55.78837068235, 37.662793153251, 90], [55.727481128826, 37.62148126863, 1900], [55.79190315935, 37.68128995252, 1250], [55.767320951152, 37.606771142864, 440], [55.963654726041, 37.41507067194, 330], [55.747550639477, 37.539572899774, 440], [55.789999429602, 37.680827477937, 400], [55.439883353296, 37.570688030922, 230], [55.794207310756, 37.674455957195, 500], [55.758481373819, 37.74104100438, 450], [55.802418017737, 37.74397668627, 450], [55.78197454795, 37.704461943222, 260], [55.79552599627, 37.678293086127, 300], [55.795454618903, 37.669317768366, 200], [55.782890489435, 37.728030515369, 500], [55.782648375224, 37.72341566127, 820], [55.622606755434, 37.605940442688, 280], [55.852795867392, 37.585806826996, 200], [55.796243756223, 37.719551853916, 200], [55.764295373272, 37.844969324677, 200], [55.656254780847, 37.744666492629, 300], [55.803445148279, 37.647799039668, 270], [55.772629438819, 37.712758552426, 300], [55.802418017737, 37.74397668627, 155], [55.785452148986, 37.71948676962, 500], [55.787716297398, 37.72970090693, 450], [55.721907458389, 37.638601501647, 450], [55.787876973753, 37.732661867452, 900], [55.779126806818, 37.628626070308, 540], [55.775680139623, 37.6845113773, 540], [55.701338710577, 37.511397320523, 540], [55.595176875532, 37.037985829957, 350], [55.614971383096, 36.99023615384, 350], [55.684364586762, 37.296269791629, 400], [55.799462367996, 37.794727768993, 450], [55.821939226742, 37.82378426975, 450], [55.718618215516, 37.681123888796, 670], [55.735823244468, 37.520387413717, 700], [55.790276236475, 37.544519055553, 250], [55.880320033877, 37.489866697676, 450], [55.7987161746, 37.53219669463, 1000], [55.788100359625, 37.491193327314, 1250], [55.868899962053, 37.498906605099, 600], [55.805260411904, 37.510972950312, 370], [55.748793667399, 37.755874683303, 630], [55.792551169204, 37.528390876333, 2250], [55.875219480982, 37.490501560085, 550], [55.786165457089, 37.499611636332, 500], [55.921391131679, 37.870553722262, 700], [55.921873082192, 37.748554170631, 750], [55.925871325652, 37.755444498916, 750], [55.897621696757, 37.578914683776, 300], [55.757300318822, 37.601529830808, 820], [55.760748787781, 37.632156161768, 820], [55.855075241058, 37.355131967948, 820], [55.845547451118, 37.66106710805, 250], [55.854847003676, 37.653708412566, 530], [55.855202610184, 37.478390976664, 820], [55.788693881889, 37.560129021868, 155], [55.966667740795, 37.415818949959, 820], [55.677523436644, 37.665029163514, 260], [55.964207436938, 37.413049888408, 820], [55.919735480926, 37.708558747358, 820], [55.686271698538, 37.738696268986, 300], [55.694347446539, 37.331585712376, 720], [55.685803249606, 37.71853008273, 500], [55.780697384393, 37.633796216016, 530], [55.770780734965, 37.610683616619, 600], [55.850485649969, 37.445292589026, 530], [55.719960391091, 37.419988342848, 530], [55.414880148191, 37.902941276023, 530], [55.737021569802, 37.525670742788, 530], [55.678428977136, 37.688764758992, 500], [55.910945654336, 37.39610778156, 245], [55.749455970574, 37.536879473823, 400], [55.770536685627, 37.421384977121, 400], [55.654304260256, 37.765682695757, 150], [55.710835583089, 37.880385487704, 660], [55.746971106233, 37.556821513795, 1920], [55.672811661283, 37.738954143291, 250], [55.645979407771, 37.747105142918, 50], [55.807887065744, 37.579088411808, 700], [55.636373161271, 37.758824899134, 550], [55.643767938944, 37.724398968363, 400], [55.64449410212, 37.711616478778, 600], [55.679302797806, 37.575722220926, 1200], [55.963460131204, 37.405384739265, 350], [55.874912260593, 37.563105946751, 1000], [55.703582585697, 37.744131188851, 190], [55.656332673804, 37.729835639472, 170], [55.714505677001, 37.646344920307, 1000], [55.611433833058, 37.600279607, 1200], [55.847723722339, 37.564314234061, 500], [55.605509727357, 37.59146303635, 550], [55.741061975149, 37.629268671355, 350], [55.647521957884, 37.595610529319, 260], [55.659785297175, 37.537659944676, 600], [55.807390084098, 37.580594297689, 530], [55.690884335766, 37.75453459798, 155], [55.679982567675, 37.640589311237, 1500], [55.470504988765, 37.546165280894, 300], [55.745109771106, 37.515868833429, 300], [55.363626355554, 37.522849648753, 600], [55.764130028303, 37.602553279099, 500], [55.609565133889, 37.605260259075, 300], [55.643757300822, 37.480958957997, 300], [55.610731086203, 37.743868131012, 530], [55.707259409807, 37.387145982422, 240], [55.891630860967, 37.748865263889, 360], [55.64199303185, 37.541575352543, 300], [55.755128370552, 37.667150804956, 300], [55.706926865011, 37.592152658726, 300], [55.771432844196, 37.594282072908, 500], [55.894155045779, 37.449790922215, 240], [55.850485649969, 37.445292589026, 240], [55.659900022524, 37.562890025347, 400], [55.613932719534, 37.494103766928, 480], [55.675914133468, 37.472921790863, 830], [55.658808348219, 37.51447839794, 300], [55.757127211504, 37.613541778783, 500], [55.644429793169, 37.49502020029, 300], [55.919735480926, 37.708558747358, 260], [55.919735480926, 37.708558747358, 1000], [55.919735480926, 37.708558747358, 280], [55.919735480926, 37.708558747358, 260], [55.919735480926, 37.708558747358, 350], [55.618623934709, 37.507234271998, 250], [55.747550639477, 37.539572899774, 200], [55.780171840788, 37.632621586572, 700], [55.69657184619, 37.561549311014, 300], [55.676968807749, 37.578238495299, 1000], [55.763221489411, 37.593405599683, 600], [55.919039625417, 37.746226780103, 650], [55.762970581352, 37.591741114648, 500], [55.772216473045, 37.647888019506, 400], [55.774631006913, 37.608572576516, 200], [55.753713404971, 37.577173862107, 200], [55.752035092271, 37.591170852141, 350], [55.919039625417, 37.746226780103, 550], [55.66162098435, 37.879765165878, 550], [55.749883180703, 37.593551043636, 650], [55.759966576854, 37.614153092168, 1000], [55.770269682977, 37.621433407686, 200], [55.751897620839, 37.532588210911, 700], [55.747337412323, 37.58352683396, 820], [55.749187635785, 37.58345150087, 70], [55.746927236311, 37.626365469754, 640], [55.765787334664, 37.611366651941, 1500], [55.759885908886, 37.647074939658, 1000], [55.938330492381, 37.31356770293, 310], [55.938330492381, 37.31356770293, 250], [55.752109288221, 37.596287720657, 400], [55.761137397742, 37.632723476035, 1000], [55.774113493174, 37.654910373055, 240], [55.677332462645, 37.271351496596, 600], [55.748182545284, 37.626077755149, 3500], [55.730156716643, 37.734483987246, 350], [55.757998890879, 37.623222199901, 500], [55.730156716643, 37.734483987246, 350], [55.730156716643, 37.734483987246, 155], [55.752019549508, 37.639838343923, 200], [55.758621749959, 37.641635323392, 400], [55.774994582086, 37.583240905132, 500], [55.748704958067, 37.423037340388, 1500], [55.736984324936, 37.630892868, 150], [55.757360114139, 37.657132169931, 530], [55.75552751839, 37.654770620679, 250], [55.737521693932, 37.631714723868, 500], [55.90939512968, 37.540400571198, 260], [55.781363590913, 37.705546101493, 260], [55.797121394264, 37.776210363585, 450], [55.707685033293, 37.584490760738, 250], [55.741061975149, 37.629268671355, 950], [55.743541151711, 37.866307756445, 1000], [55.73464481893, 37.632222141509, 500], [55.832117400619, 37.624763045494, 1000], [55.760334730342, 37.86354465714, 400], [55.758047577613, 37.581821158829, 600], [55.741044412598, 37.626609740111, 530], [55.751179447589, 37.888812488822, 400], [55.683024926091, 37.896621462308, 600], [55.80813188385, 37.635928394623, 210], [55.624939724838, 37.708420676376, 750], [55.624675026211, 37.716162868717, 500], [55.606563947945, 37.708687175788, 500], [55.591221305971, 37.66467067158, 700], [55.654218171194, 37.533662678501, 1000], [55.613053840144, 37.743830706636, 300], [55.813063888948, 37.479656262149, 1000], [56.008591646091, 37.851756110238, 1000], [55.565063267224, 37.556737951728, 600], [55.612628778523, 37.720152956239, 250], [55.602429717927, 37.723167893475, 400], [55.958508351024, 38.029107816108, 790], [55.565063267224, 37.556737951728, 300], [55.622148866229, 37.751197358167, 500], [55.565063267224, 37.556737951728, 350], [55.658885766722, 37.430131534756, 500], [55.609943593426, 37.722326659044, 550], [55.751861802562, 37.812765006912, 450], [55.5511081831, 37.557025295755, 600], [55.64014322193, 37.621916300111, 650], [55.625490879674, 37.618682769504, 800], [55.718247596014, 37.793441494097, 600], [55.653116219065, 37.623032641845, 155], [55.625490879674, 37.618682769504, 660], [55.569232592308, 37.473486475146, 700], [55.78340074708, 37.600638022603, 500], [55.76819239992, 37.623026473995, 500], [55.712898015757, 37.79595230272, 600], [55.505766406482, 37.572697360477, 500], [55.733119493397, 37.764566439985, 500], [55.738849198673, 37.780965539778, 500], [55.803342876099, 37.618196783226, 260], [55.14106091605, 37.452021297587, 280], [55.14106091605, 37.452021297587, 310], [55.547852275153, 37.542813047416, 200], [55.749374294199, 37.765125157062, 500], [55.754389007899, 37.751813675803, 500], [55.751153192636, 37.754424716338, 300], [55.740635659611, 37.609301515324, 1500], [55.728087592545, 37.755446315398, 500], [55.546104220824, 37.555558749935, 1140], [55.731854060855, 37.736487251723, 300], [55.716108907156, 37.815897225726, 150], [55.713609355437, 37.821363670092, 250], [55.508358486638, 37.563616729974, 500], [55.863596777613, 37.682818984249, 250], [55.764982880352, 37.638627214075, 300], [55.768121982514, 37.684024713476, 400], [55.78343168586, 37.601248306483, 700], [55.71548202787, 37.815840100863, 350], [55.844319363393, 37.382891486395, 300], [55.841415726534, 37.382391729687, 750], [55.845547451118, 37.66106710805, 300], [55.867844351228, 37.708945671945, 500], [55.891447059701, 37.621980941688, 500], [55.852608033371, 37.350329136419, 300], [55.873407139428, 37.62628129402, 700], [55.703322823136, 37.326172305591, 400], [55.548417419996, 37.773781331602, 500], [55.877875387584, 37.721048010143, 400], [55.862642199751, 37.687251862792, 500], [55.8520068472, 37.647642669787, 450], [55.862642199751, 37.687251862792, 150], [55.874270705206, 37.549458416568, 700], [55.789202146881, 37.583396665229, 800], [55.73983306116, 37.656772698652, 640], [55.885326417872, 37.406258017517, 400], [55.885326417872, 37.406258017517, 350], [55.80275275746, 37.525970540755, 520], [55.852786021152, 37.56859596833, 300], [55.881460032635, 37.683899568812, 450], [55.8352228366, 37.573779843111, 550], [55.872765289704, 37.712552444371, 700], [55.983433624301, 37.143851214916, 350], [55.66458802383, 37.634781438517, 200], [55.846945320907, 37.573956413173, 800], [55.997643364007, 37.236536689772, 550], [55.792404629837, 37.632659061917, 450], [55.984105902525, 37.213995912005, 480], [56.004768203651, 37.206275092709, 510], [55.765340656281, 37.595717789751, 2000], [55.759806718974, 37.647587342083, 1000], [55.865631549664, 37.570609913446, 500], [55.973470579668, 37.160304006415, 400], [55.740222657039, 37.610421992545, 1000], [55.867234033497, 37.704183860692, 250], [55.845835448217, 37.574306434686, 250], [55.866637086455, 37.706703397644, 300], [55.640037908026, 37.687615301667, 155], [55.361697655128, 37.522209164514, 400], [56.008471579005, 37.44289704663, 300], [55.901387743807, 37.402537384222, 700], [55.383141811971, 37.538237005797, 500], [55.897781911176, 37.403136619675, 300], [55.905809034738, 37.707207767531, 500], [55.895476633123, 37.697758674557, 350], [55.601342820756, 37.044056285358, 400], [55.621825231931, 37.713755930761, 400], [55.919735480926, 37.708558747358, 400], [55.601342820756, 37.044056285358, 200], [55.601342820756, 37.044056285358, 200], [55.601342820756, 37.044056285358, 400], [55.891493475605, 37.420458570948, 500], [55.601342820756, 37.044056285358, 250], [55.810614805076, 37.338607996392, 550], [55.814075698019, 37.342154913083, 400], [55.901939111885, 37.743508020719, 300], [55.818974625447, 37.347260594916, 350], [55.91516282691, 37.751239200045, 900], [55.432414538625, 37.55226835609, 500], [55.744896886797, 37.600668179384, 350], [55.803342876099, 37.618196783226, 300], [55.82513555154, 37.636502230945, 350], [55.891388151847, 37.71224351293, 400], [55.817423987039, 37.368798898845, 800], [55.810505065685, 37.383088859638, 230], [55.906596040024, 37.400921862105, 300], [55.727500441092, 37.608854478778, 1000], [55.83164381525, 37.301765002139, 700], [55.891630860967, 37.748865263889, 400], [55.891630860967, 37.748865263889, 400], [55.935400316626, 37.494171308696, 600], [55.822172203448, 37.364487942795, 1000], [55.734552993131, 37.606191376431, 200], [55.65514567529, 37.951521089906, 550], [55.919149065825, 37.742189475439, 600], [55.850485649969, 37.445292589026, 350], [55.92457781588, 37.71761648284, 400], [55.915146640006, 36.857601981877, 600], [55.920172632588, 37.722291586885, 400], [55.856012988477, 37.125905612081, 450], [55.600558595481, 37.141817381282, 500], [55.636610892267, 37.521356786017, 280], [55.631372433959, 37.849035786177, 250], [55.83997107895, 37.297251201293, 600], [55.865747386378, 37.125046197912, 450], [55.911804424161, 36.826320574114, 800], [55.432215622121, 37.543233224857, 500], [55.917856139572, 37.746575249332, 600], [55.90939512968, 37.540400571198, 260], [55.894916455183, 37.451940524961, 300], [55.919613956063, 37.752425868314, 1000], [55.884241779762, 37.427227317816, 800], [55.755267990072, 37.560181339283, 1000], [55.471785906453, 37.562153297405, 450], [55.906457168358, 37.409961580478, 450], [55.466340304984, 37.560081717645, 500], [55.608263669127, 37.621941652928, 500], [55.501898601238, 37.610505313811, 500], [55.893387873463, 37.43754181482, 500], [55.741728574999, 37.628157474854, 500], [55.946631679539, 37.499457985036, 700], [55.433139331608, 37.54921165836, 400], [55.90239613217, 37.463542640197, 500], [55.884960971679, 37.439330433817, 1000], [55.729957431769, 37.674149289658, 500], [55.92680231904, 37.772023751233, 500], [55.756639841466, 37.627136699102, 1000], [55.930418057765, 37.775058994833, 450], [55.792793973206, 37.957963482414, 500], [55.419229460586, 37.546699004106, 155], [55.893822131127, 37.476319480159, 800], [55.893978609714, 37.476880912225, 600], [55.835593182445, 37.322125150669, 400], [55.750930835607, 38.004830955144, 1000], [55.728356897141, 38.030585666547, 500], [55.761480334883, 37.631540701104, 400], [55.750902015242, 37.958261590207, 450], [55.80814287713, 37.943107270525, 500], [55.820768793354, 37.953744029341, 200], [55.996591635364, 37.725645004757, 2000], [55.586504227086, 37.900824449142, 400], [55.759045946292, 37.580816130841, 800], [55.751378109151, 37.956711391408, 450], [55.750960966795, 37.954214258216, 500], [55.751285320316, 37.98666524875, 700], [55.420267963107, 37.547847923453, 260], [55.817950927719, 37.967052350914, 150], [55.918708155399, 37.984506228776, 510], [55.432053567982, 37.545848085306, 500], [55.712292870799, 37.605873407471, 500], [55.58215866813, 37.912458708418, 220], [55.420267963107, 37.547847923453, 800], [55.918835112885, 37.806272108742, 300], [55.918241936001, 37.80643643202, 250], [55.724332306041, 37.584427824708, 700], [55.921266895498, 37.991872727603, 300], [55.805981817839, 37.842531596582, 550], [55.805981817839, 37.842531596582, 700], [55.925914796363, 38.010456512725, 500], [55.752836637557, 37.667914757938, 1500], [55.831083215099, 37.625155587137, 350], [55.924391412333, 37.821458071199, 450], [56.01789574584, 37.434182057121, 1000], [55.922378604893, 37.813147921375, 450], [55.949275744221, 37.835448130283, 600], [55.957008229402, 37.821685925017, 500], [55.916069804088, 37.846537869517, 600], [55.966999708455, 37.903449553185, 500], [55.933022579517, 37.856207096725, 250], [55.916069804088, 37.846537869517, 300], [55.954573238022, 38.058464109533, 155], [55.924530666905, 37.822225877819, 350], [55.967603096743, 37.913444543606, 500], [55.960859532885, 37.922558362337, 300], [55.786983955028, 37.882625248957, 560], [55.786582925327, 37.882082720271, 260], [55.451996870038, 37.763467231162, 300], [55.924325840777, 37.826750793402, 400], [55.754516810927, 37.609074652932, 750], [55.767953854851, 37.605630198614, 1500], [55.732174681522, 37.634605952339, 750], [55.451996870038, 37.763467231162, 280], [55.995825051877, 37.867690703115, 200], [55.818350784963, 37.965330037526, 800], [55.926538820136, 37.860693605588, 400], [55.926994587132, 37.862065619693, 750], [55.920286384718, 37.998322782756, 150], [55.962537346714, 37.932059507308, 500], [55.894672847763, 37.480077007222, 300], [55.951379338704, 38.051081691992, 250], [55.695880124576, 37.860665917402, 550], [55.619727938741, 37.963633589654, 420], [55.926337346316, 37.859652972063, 350], [55.671249034827, 37.944550896405, 400], [55.677040911668, 37.895237818019, 700], [55.92537045078, 37.860037781194, 450], [55.668870469254, 37.953052958042, 450], [55.666449345431, 37.9509338189, 450], [55.925734612195, 37.858579011146, 300], [55.976949242835, 37.819144628916, 600], [55.762320447248, 37.595685458155, 500], [55.689894195182, 37.852169701422, 700], [55.914335332345, 37.866597824258, 300], [55.682950055775, 37.899312474553, 350], [55.433216731508, 37.727805675492, 720], [55.82713323243, 37.436410055493, 500], [55.747157061715, 37.962374886345, 450], [55.913293314608, 37.814440974537, 200], [55.826696559345, 37.445291194739, 350], [55.826281810729, 37.437488297864, 350], [55.161520058217, 37.468115341248, 400], [55.928195927196, 37.858069228596, 250], [55.926781218062, 37.859466123967, 600], [55.85716597964, 37.431903054724, 500], [55.85716597964, 37.431903054724, 600], [55.838191345038, 37.417292477116, 650], [55.84428181972, 37.398467105769, 400], [55.857734334214, 37.419097036467, 600], [55.41668985897, 37.835648742283, 650], [55.41668985897, 37.835648742283, 790], [55.692224602818, 37.896429179837, 200], [55.68184253845, 37.896440676451, 500], [55.850485649969, 37.445292589026, 400], [55.673397134339, 37.479694608641, 300], [55.676722730076, 37.496190915265, 250], [55.678115890095, 37.495888243389, 1000], [55.759713386836, 37.645257104415, 500], [55.165236614497, 37.467918361429, 800], [55.165236614497, 37.467918361429, 500], [55.759140488621, 37.64576016478, 400], [55.697925191209, 37.560497951256, 450], [55.712578612946, 37.559693103545, 500], [55.759632877365, 37.584496803588, 500], [55.770695936989, 37.403167141935, 500], [55.646485894804, 37.715523264108, 300], [55.585271705518, 37.724892853133, 650], [55.773223979616, 37.6194702402, 600], [55.741147285786, 37.417811506365, 500], [55.740961920922, 37.415484818858, 300], [55.740591108036, 37.415238919402, 350], [55.771587318732, 37.592805723463, 990], [55.771503912235, 37.518669238544, 400], [55.791412922048, 37.556011700741, 155], [55.77678893708, 37.471977144943, 800], [55.778312448317, 37.521371710389, 400], [55.757965468479, 37.597688186773, 1000], [55.793405473446, 37.4925115247, 120], [55.794766035505, 37.491839244548, 560], [55.731760272658, 37.487374248036, 1000], [55.734751896361, 37.64228006419, 500], [55.777187632791, 37.525591701141, 300], [55.731760272658, 37.487374248036, 1500], [55.809478478002, 37.464487921938, 300], [55.799747520203, 37.482983405183, 200], [55.799747520203, 37.482983405183, 280], [55.77870729152, 37.665312027913, 300], [55.610192063561, 37.332581794591, 370], [55.74921871948, 37.540006244891, 300], [55.766241810007, 37.604151388796, 300], [55.810955203751, 37.476596787721, 500], [55.741789294471, 37.525489530308, 350], [55.776308751874, 37.541627430683, 500], [55.804365396734, 37.4990306643, 300], [55.799130554802, 37.506601528906, 350], [55.801941696941, 37.5319459416, 500], [55.800799960648, 37.554875987195, 750], [55.807887065744, 37.579088411808, 450], [55.807789234938, 37.578367864454, 350], [55.807789234938, 37.578367864454, 450], [55.784850210641, 37.595427942141, 400], [55.799901035104, 37.526495315734, 1000], [55.855202610184, 37.478390976664, 250], [55.820389149745, 37.499310809296, 350], [55.820389149745, 37.499310809296, 155], [55.820389149745, 37.499310809296, 300], [55.854091791457, 37.476152877935, 400], [55.741293372243, 37.656275875394, 155], [55.800424281262, 37.574765752338, 1000], [55.871072837418, 37.460530144413, 155], [55.884695220148, 37.51752743134, 350], [55.805741219184, 37.571779531018, 400], [55.856066430943, 37.521273118933, 400], [55.64230034322, 37.507017843783, 450], [55.83966392147, 37.486699505729, 155], [55.83966392147, 37.486699505729, 260], [55.823807140129, 36.919118421769, 500], [55.76400202845, 37.533373131279, 500], [55.705947814732, 37.586295155722, 200], [55.838993165982, 37.486785928378, 700], [55.707685033293, 37.584490760738, 155], [55.856217395105, 37.475476298298, 300], [55.862718993221, 37.435034387733, 300], [55.855528850475, 37.475794512897, 350], [55.693517357062, 37.557413016924, 300], [55.67550546198, 37.883102049231, 570], [55.662659383374, 37.554890680575, 155], [55.663800021752, 37.511090277307, 300], [55.669789264547, 37.552200036195, 400], [55.766242517472, 37.526559559091, 450], [55.915946641992, 37.868522056702, 510], [55.850151562995, 37.644953856562, 510], [55.963654726041, 37.41507067194, 510], [55.679058160616, 37.564833248907, 250], [55.640257402165, 37.608378602853, 260], [55.626077675408, 37.487040288618, 600], [55.669940572625, 37.632682723129, 350], [55.651978964893, 37.580762846811, 500], [55.675926760058, 37.625105680619, 250], [55.638940061155, 37.603892035272, 500], [55.681490890471, 37.675873819049, 350], [55.684894608128, 37.687512745263, 700], [55.683065629678, 37.680989273979, 500], [55.678184827071, 37.697357811705, 280], [55.845547451118, 37.66106710805, 250], [55.61108363007, 37.606861806172, 500], [55.622456120938, 37.705202136185, 1000], [55.622456120938, 37.705202136185, 700], [55.70394548422, 37.686556592204, 350], [55.710345840551, 37.668100278729, 400], [55.710345840551, 37.668100278729, 300], [55.71002158486, 37.655578311927, 1000], [55.709128651589, 37.620768031907, 260], [55.727263100653, 37.613272184226, 350], [55.722808586534, 37.62050238939, 350], [55.722276563705, 37.621571973485, 500], [55.721919784413, 37.646278064598, 300], [55.716904792516, 37.644222986057, 250], [55.728616384209, 37.639968247197, 280], [55.728349829364, 37.614946139595, 1600], [55.728065700121, 37.649440149402, 350], [55.728705602684, 37.647911789765, 350], [55.78340074708, 37.600638022603, 350], [55.757218779194, 37.659133619148, 300], [55.823284333356, 37.497703115267, 300], [55.663800021752, 37.511090277307, 300], [55.708714114812, 37.622081072261, 350], [55.663800021752, 37.511090277307, 250], [55.663800021752, 37.511090277307, 350], [55.663800021752, 37.511090277307, 200], [55.663800021752, 37.511090277307, 400], [55.748723363253, 37.581695358653, 180], [55.758664117365, 37.55713278786, 700], [55.761405569209, 37.55158578183, 1000], [55.623970431943, 37.608859544897, 155], [55.761189621438, 37.579477602474, 200], [55.771187776843, 37.59076540257, 350], [55.70574559625, 37.686118707641, 200], [55.778382383447, 37.584767606898, 300], [55.778382383447, 37.584767606898, 250], [55.787557248695, 37.635898429207, 750], [55.784496839544, 37.597503089423, 1000], [55.77436262071, 37.618574015397, 400], [55.791100238288, 37.59058332085, 450], [55.778648584135, 37.581916134574, 500], [55.789951756213, 37.634380906915, 450], [55.788141620243, 37.61259450942, 155], [55.772346547143, 37.679583320006, 350], [55.775035980311, 37.657208514699, 280], [55.774113493174, 37.654910373055, 700], [55.776135509391, 37.670375409014, 400], [55.774113493174, 37.654910373055, 700], [55.774113493174, 37.654910373055, 500], [55.774113493174, 37.654910373055, 500], [55.774113493174, 37.654910373055, 450], [55.774113493174, 37.654910373055, 350], [55.774113493174, 37.654910373055, 400], [55.774113493174, 37.654910373055, 400], [55.732196712473, 37.617174084858, 500], [55.744564606341, 37.565535153144, 300], [55.774113493174, 37.654910373055, 350], [55.772216381812, 37.647887942335, 300], [55.762513394649, 37.657688193211, 1000], [55.709632243079, 37.895886802729, 160], [55.772125227177, 37.650697824023, 500], [55.771473237591, 37.649376790792, 350], [55.747427678453, 37.660699415765, 600], [55.850984575599, 37.597454450948, 155], [55.73846046984, 37.696090203529, 500], [55.746922031329, 37.679505282834, 820], [55.754200648923, 37.716525402701, 480], [55.759130484912, 37.409291665616, 350], [55.75492120862, 37.661798354647, 450], [55.73735631587, 37.693035156298, 350], [55.757070679828, 37.660871867922, 300], [55.58215866813, 37.912458708418, 350], [55.758435465199, 37.638963224895, 1000], [55.736684047129, 37.661204671307, 200], [55.723472614699, 37.610150138193, 250], [55.747550639477, 37.539572899774, 750], [55.762268444695, 37.62220456437, 820], [55.56976701251, 37.579063933693, 350], [55.724094382807, 37.687084477676, 160], [55.761274066204, 37.605857445309, 700], [55.722874775555, 37.688986011837, 250], [55.723879034997, 37.690111013872, 320], [55.373480770945, 37.206470554492, 750], [55.751861802562, 37.812765006912, 400], [55.750205803552, 37.594777593066, 400], [55.750410765042, 37.595342064879, 400], [55.740346894316, 37.705578519429, 830], [55.744428405237, 37.629848403627, 300], [55.744428405237, 37.629848403627, 400], [55.744428405237, 37.629848403627, 250], [55.718618215516, 37.681123888796, 250], [55.718618215516, 37.681123888796, 155], [55.744428405237, 37.629848403627, 450], [55.718618215516, 37.681123888796, 280], [55.718618215516, 37.681123888796, 320], [55.718618215516, 37.681123888796, 380], [55.718618215516, 37.681123888796, 430], [55.736359803101, 37.619100464793, 300], [55.755992137795, 37.621103383716, 320], [55.343452545681, 37.172841910575, 1000], [55.736359803101, 37.619100464793, 300], [55.632574817048, 37.658739309629, 350], [55.753108860751, 37.588977514969, 500], [55.645640969932, 37.719440384698, 700], [55.771269830904, 37.625459542819, 1000], [55.7987161746, 37.53219669463, 350], [55.79482858045, 37.808966933759, 500], [55.606809530369, 37.734103809013, 155], [55.620504403381, 37.668853544165, 400], [55.647738073255, 37.741858807157, 600], [55.658676826865, 37.739755151927, 260], [55.845547451118, 37.66106710805, 300], [55.654205886053, 37.646022809904, 280], [55.672237732727, 37.74469855763, 1500], [55.759130484912, 37.409291665616, 1000], [55.704023956991, 37.771489859607, 250], [55.654321851713, 37.702225984546, 400], [55.736359803101, 37.619100464793, 300], [55.819153755053, 37.338379287122, 250], [55.757399237771, 37.634036720783, 450], [55.679346966349, 37.739294624309, 250], [55.684298731217, 37.750334655688, 350], [55.684298731217, 37.750334655688, 800], [55.67113368663, 37.765725946729, 300], [55.668182020771, 37.767427715888, 300], [55.671573701049, 37.77304500887, 650], [55.681034145838, 37.760368601449, 200], [55.64014322193, 37.621916300111, 260], [55.74962485052, 37.731238133519, 400], [55.826078367599, 37.388443912365, 820], [55.975487934254, 37.161136187551, 450], [55.896879485875, 37.396794779325, 750], [55.574883239969, 37.580102603322, 300], [55.846908047849, 37.346399508381, 700], [55.574883239969, 37.580102603322, 350], [55.57736638886, 37.571083527941, 600], [56.001960234227, 37.21080721711, 990], [55.566406691482, 37.57364299128, 155], [55.717710940881, 37.79248074899, 450], [55.717497163489, 37.793678903103, 350], [55.715008075748, 37.791445400515, 250], [55.756895376974, 37.707852917883, 400], [55.716985150491, 37.79338760589, 250], [55.716955107866, 37.792232649043, 250], [55.716985150491, 37.79338760589, 250], [55.758877768901, 37.708917886962, 550], [55.756265668158, 37.704178510564, 400], [55.755770627386, 37.704895112377, 400], [55.716899707347, 37.794176003778, 450], [55.754826978783, 37.716774606908, 300], [55.731175974348, 37.753579431456, 750], [55.718125731791, 37.783927431799, 600], [55.750488112993, 37.816258225156, 300], [55.75371709463, 37.817634322769, 250], [55.747796278759, 37.854323533305, 400], [55.583012620125, 37.595247645357, 260], [55.779375371004, 37.733946487528, 300], [55.789340440357, 37.81903142961, 450], [55.791793311542, 37.787145657861, 260], [55.810625155156, 37.794936208434, 155], [55.69543658443, 37.906930354379, 340], [55.829423683688, 37.816010818039, 650], [55.800949148129, 37.711518790145, 155], [55.635171968883, 37.436937176274, 350], [55.797273660266, 37.799698165609, 200], [55.862278808748, 37.563302016335, 155], [55.881202678402, 37.569990230025, 500], [55.683412055672, 37.660688138718, 400], [55.898705973135, 37.593653097914, 450], [55.896043426847, 37.619766299278, 500], [55.743955997119, 37.580875522255, 300], [55.864929216638, 37.605094712719, 155], [55.856217395105, 37.475476298298, 155], [55.839191256911, 37.488484438843, 155], [55.88982053857, 37.539316268799, 350], [55.809504583146, 37.569067154172, 1000], [55.85929430303, 37.552695071951, 155], [55.70930999737, 37.657109223867, 500], [55.70930999737, 37.657109223867, 1000], [55.792622136208, 37.58383333551, 155], [55.778531279046, 37.585821093819, 260], [55.792473672368, 37.605000170935, 350], [55.779438987737, 37.600496677494, 350], [55.805244992958, 37.515666125545, 155], [55.774153078814, 37.615372943813, 300], [55.783191803845, 37.585881418946, 200], [55.769154599563, 37.583687553398, 900], [55.725606207831, 37.596310166168, 1200], [55.781375700761, 37.629117931551, 750], [55.634012295335, 37.44198577815, 260], [55.743158282926, 37.56736393202, 155], [55.414880148191, 37.902941276023, 260], [55.71393208007, 37.62396197387, 450], [55.744564606341, 37.565535153144, 300], [55.744564606341, 37.565535153144, 155], [55.752224779655, 37.668537746369, 500], [55.747763928467, 37.6806663163, 350], [55.744462295868, 37.817511503718, 155], [55.959252508754, 37.414845796288, 155], [55.677873618069, 37.507188499027, 260], [55.706402896195, 37.586522544735, 155], [55.798848939608, 37.487927148745, 1250], [55.741695740279, 37.615632443909, 1500], [55.691757584657, 37.529735958373, 500], [55.776711335883, 37.536048090751, 1200], [55.667705554074, 37.524961374471, 1000], [55.774577812557, 37.581948537192, 260], [55.752005820697, 37.88756405639, 350], [55.668653749042, 37.559303633894, 1000], [55.645887856887, 37.673204369121, 800], [55.750846535719, 37.820394840248, 260], [55.766814824029, 37.372206179444, 260], [55.939904611046, 37.364688802758, 260], [55.161520058217, 37.468115341248, 260], [55.691571327892, 37.662706457963, 500], [55.747471451943, 37.706847364924, 155], [55.747550639477, 37.539572899774, 500], [55.761568389824, 37.658246280325, 500], [55.785556322214, 37.241026820662, 500], [55.653812483275, 37.844300890172, 350], [55.642346786058, 37.542229400827, 450], [55.662636699264, 37.580116756577, 155], [55.647955092655, 37.57828613412, 155], [55.585271705518, 37.724892853133, 260], [55.68846654697, 37.569934559234, 200], [55.572711225402, 37.673959274923, 260], [55.683834999499, 37.549313628544, 250], [55.678120709875, 37.535632005111, 500], [55.849457769993, 36.806746422903, 400], [55.683525729322, 37.552629081775, 350], [55.758120228054, 37.676303966302, 1500], [55.740195749355, 37.634615623457, 700], [55.677873618069, 37.507188499027, 155], [55.744131431479, 37.656944268763, 800], [55.653500185342, 37.646633641737, 350], [55.733770862174, 37.634245718852, 450], [59.807127085367, 30.377379010852, 260], [55.737239880549, 37.594743894301, 500], [56.260372776542, 43.859266516676, 500], [50.566049718226, 36.551508513573, 350], [50.05245089272, 14.472776915317, 300], [54.789978568329, 56.036813004485, 1000], [53.224438420449, 50.167941164174, 1000], [47.276799552109, 39.809404463427, 155], [55.912257589724, 36.861869661134, 350], [25.269998956288, 55.299678052015, 350], [50.092948743859, 14.443615365882, 155], [25.185662023643, 55.240854526065, 1000], [55.670582740187, 37.760900382001, 500], [55.723768241983, 37.592541541333, 1750], [55.806217411436, 37.828966197839, 300]];


},{}],3:[function(require,module,exports){
"use strict";
var __moduleName = "app/maps/dark-theme";
var theme = require('./theme');
module.exports = function(map) {
  theme(map, 'dark');
  return map;
};


},{"./theme":18}],4:[function(require,module,exports){
"use strict";
var __moduleName = "app/maps/device";
module.exports = function(app) {
  var device = app.base.control.$('.device'),
      display = device.children(),
      map = new DG.Map('mobile-map', {
        'center': new DG.LatLng(54.980156831455, 82.897440725094),
        'zoom': 13,
        'geoclicker': false,
        'worldCopyJump': true,
        'locationControl': false,
        'zoomControl': true,
        'fullscreenControl': false
      });
  return {
    enable: function() {
      device.addClass('device_is-visible_true');
      return this;
    },
    disable: function() {
      device.removeClass('device_is-visible_true');
      return this;
    },
    clean: function() {
      device.removeClass('tablet smartphone notepad');
      display.removeClass();
      return this;
    },
    setType: function(type) {
      this.clean();
      device.addClass(type);
      display.addClass(type + '__display');
      map.invalidateSize();
      return this;
    },
    map: map
  };
};


},{}],5:[function(require,module,exports){
"use strict";
var __moduleName = "app/maps/entrances";
module.exports = [{
  entrance: ['LINESTRING(30.438000494497626 59.994491404967391,30.437971300025943 59.994307749284225,30.438630242018608 59.994281728092794,30.438785108642286 59.994053221833617,30.438842610143436 59.993968273206889)'],
  description: {
    address: 'Пискарёвский проспект, 63',
    company: 'Балтик, ООО, группа компаний',
    text: 'С Пискаревского проспекта сверните направо, затем по дороге сразу налево. Зайдите внутрь и идите влево по коридорам, пока не найдете нужный офис.'
  }
}, {
  entrance: ['LINESTRING(82.89755344390868 54.982320605449296, 82.89714574813843 54.982566865457464, 82.89677560329437 54.9823329184856, 82.89664685726164 54.98240679662398, 82.89677023887634 54.98247451813142)'],
  description: {
    address: 'Боткинская, 1',
    company: 'АНТ НЕДВИЖИМОСТЬ, ООО, агентство недвижимости',
    text: 'Входите со стороны станции метро «Площадь Ленина», увидите здание сложной формы. Вам нужно в левое крыло. Ищите 141 офис.'
  }
}, {
  entrance: ['LINESTRING(30.324549033601716 59.854343806634077,30.325078843000412 59.854351520900806,30.325074340650939 59.854407581362537,30.324939898779725 59.854404848890709)'],
  description: {
    address: 'Авиационная, 18',
    company: 'Дента-Мед, стоматологический центр',
    text: 'С Пискаревского проспекта сверните направо, затем по дороге сразу налево. Зайдите внутрь и идите влево по коридорам, пока не найдете нужный офис.'
  }
}, {
  entrance: ['LINESTRING(30.378849478242262 59.926403368290842,30.378349166046458 59.926567439016566,30.378399909895517 59.926607079685738,30.378545244323146 59.926554898038752)'],
  description: {
    address: 'Невский проспект, 170',
    company: 'Центр реабилитации речи Татьяны Соловьёвой',
    text: 'С Невского проспекта сверните на Исполкомскую, но далеко не уезжайте вам в угловое здание. Пройдите во двор, вход будет по правую руку.'
  }
}, {
  entrance: ['LINESTRING(30.322164094455246 59.933053955454568,30.321405732371108 59.933227486478827,30.320738194958359 59.932492844975677,30.320493984085964 59.932548704483153,30.320338777568114 59.932377903442955,30.320181227088419 59.932420250768061)'],
  description: {
    address: 'Казанская, 7',
    company: 'ОбликМедиа, ООО, рекламное агентство',
    text: 'От Невского проспекта двигайтесь по улице Казанской до дома №5. Проходите во вторую арку и поверните налево в следующую арку. Дойдите до здания, пройдите насквозь, увидите вход справа.'
  }
}, {
  entrance: ['LINESTRING(30.378849478242262 59.926403368290842,30.378349166046458 59.926567439016566,30.378399909895517 59.926607079685738,30.378545244323146 59.926554898038752)'],
  description: {
    address: 'Невский проспект, 170',
    company: 'Центр реабилитации речи Татьяны Соловьёвой',
    text: 'С Невского проспекта сверните на Исполкомскую, но далеко не уезжайте вам в угловое здание. Пройдите во двор, вход будет по правую руку.'
  }
}];


},{}],6:[function(require,module,exports){
"use strict";
var __moduleName = "app/maps/index";
module.exports = {
  'page1': require('./page1'),
  'page4': require('./page4'),
  'page5': require('./page5'),
  'two-markers': require('./two-markers'),
  'sun': require('./sun'),
  'marker': require('./marker'),
  'dark-theme': require('./dark-theme'),
  'light-theme': require('./light-theme'),
  'smartphone': require('./smartphone'),
  'notepad': require('./notepad'),
  'tablet': require('./tablet'),
  'setup': require('./setup'),
  'reset': require('./reset')
};


},{"./dark-theme":3,"./light-theme":7,"./marker":8,"./notepad":9,"./page1":10,"./page4":11,"./page5":12,"./reset":13,"./setup":14,"./smartphone":15,"./sun":16,"./tablet":17,"./two-markers":19}],7:[function(require,module,exports){
"use strict";
var __moduleName = "app/maps/light-theme";
var theme = require('./theme');
module.exports = function(map) {
  theme(map, 'light');
  return map;
};


},{"./theme":18}],8:[function(require,module,exports){
"use strict";
var __moduleName = "app/maps/marker";
var $ = require('jquery');
module.exports = function(map, app) {
  map.setView([55.698098749057806, 37.59521484375001], 10);
  if (map.marker) {
    map.addLayer(map.marker);
    anim(map.marker);
    return map;
  }
  app.plugins.marker.then(function() {
    return app.banks;
  }).then(function(data) {
    var result = data.result.markers;
    var group = map.marker = DG.featureGroup();
    function populate() {
      for (var i = 0; i < 20; i++) {
        var m = new L.Marker([result[i].lat, result[i].lon], {bounceOnAdd: true});
        group.addLayer(m);
      }
    }
    populate();
    group.on('click', function(e) {
      e.layer.bounce({
        duration: 500,
        height: 400
      });
    });
    map.addLayer(group);
    anim(group);
  });
  function gen(group) {
    var layers = group.getLayers(),
        pos = 0,
        next = function() {
          var value = layers[pos];
          pos++;
          return (value && pos < 10) ? value : false;
        };
    return next;
  }
  ;
  function anim(group) {
    setTimeout(function() {
      var next = gen(group),
          markerClass = 'dg-customization__marker_type_mushroom-is_hover',
          timer = setInterval(function() {
            var marker = next();
            $('.' + markerClass).removeClass(markerClass);
            if (!marker) {
              return clearInterval(timer);
            }
            $(marker._icon).addClass(markerClass);
          }, 200);
    }, 800);
  }
  ;
  return map;
};


},{"jquery":29}],9:[function(require,module,exports){
"use strict";
var __moduleName = "app/maps/notepad";
module.exports = function(map, app) {
  app.device.enable().setType('notepad');
  return map;
};


},{}],10:[function(require,module,exports){
"use strict";
var __moduleName = "app/maps/page1";
module.exports = function(map, app) {
  var loader = app.base.footer.$('[data-footer-state=page1]'),
      timeEl = loader.find('.lightness-panel__counter'),
      newBar = loader.find('.lightness-panel__version_of_new-api .lightness-panel__progress-bar-fill'),
      oldBar = loader.find('.lightness-panel__version_of_old-api .lightness-panel__progress-bar-fill'),
      loaded = 'lightness-panel__progress-bar-fill-is_loaded',
      timer,
      time = 0,
      ms,
      s;
  newBar.add(oldBar).width(0).stop().removeClass(loaded);
  newBar.animate({width: '60%'}, {
    duration: 2000,
    complete: function() {
      newBar.addClass(loaded);
      app.base.$('.map').removeClass('map_has-overlay_dark');
    }
  });
  oldBar.animate({width: '100%'}, {
    duration: 4000,
    start: startTimer,
    always: function() {
      oldBar.addClass(loaded);
      clearInterval(timer);
    }
  });
  function startTimer() {
    timer = setInterval(function() {
      time += 1;
      s = Math.floor(time / 60);
      ms = Math.floor(time % 60);
      if (s < 10) {
        s = '0' + s;
      }
      if (ms < 10) {
        ms = '0' + ms;
      }
      timeEl.text(['00', s, ms].join(' : '));
    }, 20);
  }
  ;
  return map;
};


},{}],11:[function(require,module,exports){
"use strict";
var __moduleName = "app/maps/page4";
var data = require('./entrances'),
    $ = require('jquery');
module.exports = function(map, app) {
  var entrances = {},
      titleNode = $('.pseudocard__header'),
      addressNode = $('.pseudocard__address'),
      textNode = $('.pseudocard__route-instructions');
  function showEntrance(id) {
    if (!entrances[id]) {
      entrances[id] = new DG.Entrance({'vectors': data[id].entrance});
    }
    entrances[id].addTo(map).show();
  }
  function updateDescription(id) {
    var description = data[id].description;
    titleNode.html(description.company);
    addressNode.html(description.address);
    textNode.html(description.text);
  }
  app.vent.on('showEntrance changeEntrance', function(data) {
    showEntrance(data.id);
  });
  app.vent.on('changeEntrance', function(data) {
    updateDescription(data.id);
  });
  showEntrance(0);
  app.base.control._currEl = $('.entrances-examples__example-link_is-shown_true');
  return map;
};


},{"./entrances":5,"jquery":29}],12:[function(require,module,exports){
"use strict";
var __moduleName = "app/maps/page5";
var $ = require('jquery');
module.exports = function(map, app) {
  var Commits_JSAPI = {
    "2010": [{
      "date": "2010-06-18T15:42:50Z",
      "author": {
        "login": "Gaidamak",
        "location": "Kiev, Ukraine"
      },
      "latlng": {
        "lat": 50.4501,
        "lng": 30.5234
      }
    }, {
      "date": "2010-06-23T08:10:16Z",
      "author": {
        "login": "porqz",
        "location": "Novosibirsk"
      },
      "latlng": {
        "lat": 55.00835259999999,
        "lng": 82.9357327
      }
    }],
    "2011": [{
      "date": "2011-06-18T15:42:50Z",
      "author": {
        "login": "Gaidamak",
        "location": "Kiev, Ukraine"
      },
      "latlng": {
        "lat": 50.4501,
        "lng": 30.5234
      }
    }, {
      "date": "2011-06-23T08:10:16Z",
      "author": {
        "login": "porqz",
        "location": "Novosibirsk"
      },
      "latlng": {
        "lat": 55.00835259999999,
        "lng": 82.9357327
      }
    }],
    "2012": [{
      "date": "2012-06-18T15:42:50Z",
      "author": {
        "login": "Gaidamak",
        "location": "Kiev, Ukraine"
      },
      "latlng": {
        "lat": 50.4501,
        "lng": 30.5234
      }
    }, {
      "date": "2012-06-23T08:10:16Z",
      "author": {
        "login": "porqz",
        "location": "Novosibirsk"
      },
      "latlng": {
        "lat": 55.00835259999999,
        "lng": 82.9357327
      }
    }],
    "2013": [{
      "date": "2013-06-18T15:42:50Z",
      "author": {
        "login": "Gaidamak",
        "location": "Kiev, Ukraine"
      },
      "latlng": {
        "lat": 50.4501,
        "lng": 30.5234
      }
    }, {
      "date": "2013-06-23T08:10:16Z",
      "author": {
        "login": "porqz",
        "location": "Novosibirsk"
      },
      "latlng": {
        "lat": 55.00835259999999,
        "lng": 82.9357327
      }
    }],
    "2014": [{
      "date": "2014-06-18T15:42:50Z",
      "author": {
        "login": "Gaidamak",
        "location": "Kiev, Ukraine"
      },
      "latlng": {
        "lat": 50.4501,
        "lng": 30.5234
      }
    }, {
      "date": "2014-06-23T08:10:16Z",
      "author": {
        "login": "porqz",
        "location": "Novosibirsk"
      },
      "latlng": {
        "lat": 55.00835259999999,
        "lng": 82.9357327
      }
    }]
  };
  var GitHubIcon = DG.icon({
    iconUrl: '/img/github-mark.png',
    iconRetinaUrl: '/img/github-mark.png',
    iconSize: [32, 32],
    iconAnchor: [16, 16]
  });
  var cLayers = [];
  Object.keys(Commits_JSAPI).forEach(function(year) {
    var commitMark = [];
    addMarkersToGroup(year, commitMark);
  });
  map.setZoom(4);
  map.setView([32.657875736955305, 44.25292968750001]);
  function addMarkersToGroup(year, aMarkers) {
    if (Commits_JSAPI[year]) {
      Commits_JSAPI[year].forEach(function(commit) {
        aMarkers.push(DG.marker([commit.latlng.lat, commit.latlng.lng], {icon: GitHubIcon}));
      });
    }
  }
  function showCommits(year) {
    if (cLayers[year] || !Commits_JSAPI[year]) {
      return;
    }
    var commits = [];
    addMarkersToGroup(year, commits);
    cLayers[year] = DG.layerGroup(commits).addTo(map);
  }
  function hideCommits(year) {
    if (!cLayers[year] || !Commits_JSAPI[year]) {
      return;
    }
    map.removeLayer(cLayers[year]);
  }
  app.vent.on('changeOpennes', function(data) {
    console.log(data.id);
  });
  app.base.control._currEl = $('.openness-examples__example-link_is-shown_true');
  return map;
};


},{"jquery":29}],13:[function(require,module,exports){
"use strict";
var __moduleName = "app/maps/reset";
module.exports = function(map, app) {
  if (map.clusters && map.hasLayer(map.clusters)) {
    map.removeLayer(map.clusters);
  }
  if (map.heat && map.hasLayer(map.heat)) {
    map.removeLayer(map.heat);
  }
  if (map.marker && map.hasLayer(map.marker)) {
    map.removeLayer(map.marker);
  }
  !map.geoclicker.enabled() && map.geoclicker.disable();
  if (map.controls.ruler) {
    map.removeControl(map.controls.ruler);
    map.controls.ruler = null;
  }
  map.geoclicker._map._popup && map.closePopup(map.geoclicker._map._popup);
  app.device.clean().disable();
  return map;
};


},{}],14:[function(require,module,exports){
"use strict";
var __moduleName = "app/maps/setup";
var setup = require('./device');
module.exports = function(map, app) {
  app.banks = DG.ajax('http://catalog.api.2gis.ru/2.0/catalog/branch/search', {data: {
      q: 'банкоматы',
      page_size: 1,
      page: 1,
      region_id: 32,
      fields: 'markers',
      key: 'rudcgu3317',
      output: 'json'
    }});
  app.plugins.markers = DG.plugin(['./vendors/Leaflet.markerCluster/leaflet.markercluster-src.js', './vendors/Leaflet.markerCluster/MarkerCluster.Default.css']);
  app.plugins.heat = DG.plugin('./vendors/HeatLayer/heatLayer.js');
  app.plugins.marker = DG.plugin('./vendors/Leaflet.bounceMarker/leaflet.bouncemarker.js');
  app.device = setup(app);
  return map;
};


},{"./device":4}],15:[function(require,module,exports){
"use strict";
var __moduleName = "app/maps/smartphone";
module.exports = function(map, app) {
  app.device.enable().setType('smartphone');
  return map;
};


},{}],16:[function(require,module,exports){
"use strict";
var __moduleName = "app/maps/sun";
var data = require('./cafeHeat');
module.exports = function(map, app) {
  map.setView([55.698098749057806, 37.59521484375001], 10);
  if (map.heat) {
    return map.addLayer(map.heat);
  }
  app.plugins.heat.then(function() {
    map.heat = L.heatLayer(data, {radius: 25}).addTo(map);
  });
  return map;
};


},{"./cafeHeat":2}],17:[function(require,module,exports){
"use strict";
var __moduleName = "app/maps/tablet";
module.exports = function(map, app) {
  var map2 = app.device.map;
  app.device.enable().setType('tablet');
  map.on('move', function(e) {
    console.log(e.target.getCenter());
    map2.setView(e.target.getCenter(), map.getZoom(), {animate: false});
  });
  return map;
};


},{}],18:[function(require,module,exports){
"use strict";
var __moduleName = "app/maps/theme";
var $ = require('jquery');
require('../../polyfill/indexOf');
module.exports = function(map, skin) {
  map.setView([54.980496831455, 82.897140725094], 18);
  var css = $('head [rel=stylesheet]').filter(function() {
    return $(this).attr('href').indexOf('maps.api') > -1;
  }),
      url = css.attr('href'),
      regex = /skin=(\w*)/,
      test = url.match(regex);
  map.geoclicker.enable();
  if (!map.controls.ruler) {
    map.controls.ruler = DG.control.ruler().addTo(map);
  }
  map.fire('click', {latlng: new DG.LatLng(54.98018731490755, 82.89802551269531)});
  css.attr('href', test ? url.replace(regex, 'skin=' + skin) : (url + 'skin=' + skin));
  return map;
};


},{"../../polyfill/indexOf":35,"jquery":29}],19:[function(require,module,exports){
"use strict";
var __moduleName = "app/maps/two-markers";
module.exports = function(map, app) {
  map.setView([55.698098749057806, 37.59521484375001], 10);
  if (map.clusters) {
    return map.addLayer(map.clusters).fitBounds(map.clusters.getBounds());
  }
  app.plugins.markers.then(function() {
    return app.banks;
  }).then(function(data) {
    var result = data.result.markers;
    var markers = map.clusters = L.markerClusterGroup({showCoverageOnHover: false});
    function populate() {
      for (var i = 0; i < result.length; i++) {
        var m = L.marker([result[i].lat, result[i].lon]);
        m.bindLabel(result[i].name_ex.primary);
        markers.addLayer(m);
      }
    }
    populate();
    map.addLayer(markers).fitBounds(markers.getBounds());
  });
  return map;
};


},{}],20:[function(require,module,exports){
"use strict";
var __moduleName = "app/router";
var Backbone = require('backbone');
Backbone.$ = require('jquery');
module.exports = function(app) {
  var BaseView = require('./view/base')(app);
  return Backbone.Router.extend({
    routes: {
      '': 'index',
      ':page': 'renderPage'
    },
    initialize: function() {
      app.base = new BaseView({
        el: 'body',
        model: app.state
      });
      app.state.on('change:page', this.update, this);
    },
    update: function() {
      this.navigate('/' + app.state.getPageName());
    },
    index: function() {
      app.state.setPage(0);
    },
    renderPage: function(page) {
      app.state.setPageName(page);
    }
  });
};


},{"./view/base":22,"backbone":26,"jquery":29}],21:[function(require,module,exports){
"use strict";
var __moduleName = "app/state";
var Backbone = require('backbone');
Backbone.$ = require('jquery');
module.exports = function() {
  return Backbone.Model.extend({
    defaults: {
      max: 7,
      pages: ['', 'lightness', 'modularity', 'themes', 'entrances', 'openness', 'mobile', 'start']
    },
    validate: function(attrs, options) {
      if (attrs.page > attrs.max) {
        return 'error';
      }
      if (attrs.page < 0) {
        return 'error';
      }
    },
    getPageName: function() {
      return this.get('pages')[this.get('page')];
    },
    setPageName: function(page, silent) {
      var pageNum = this.get('pages').indexOf(page);
      if (pageNum === -1) {
        pageNum = 0;
      }
      this.set('page', pageNum, {
        validate: true,
        silent: silent
      });
    },
    setPage: function(page, silent) {
      this.set('page', page, {
        validate: true,
        silent: silent
      });
    },
    upPage: function() {
      this.set('page', +this.get('page') + 1, {validate: true});
    },
    downPage: function() {
      this.set('page', +this.get('page') - 1, {validate: true});
    }
  });
};


},{"backbone":26,"jquery":29}],22:[function(require,module,exports){
"use strict";
var __moduleName = "app/view/base";
var Backbone = require('backbone');
Backbone.$ = require('jquery');
require('../../polyfill/indexOf');
module.exports = function(app) {
  var MapView = require('./map')(app),
      ControlView = require('./control')(app),
      FooterView = require('./footer')(app);
  return Backbone.View.extend({
    events: {
      'click .intro': 'start',
      'scroll .intro': 'start'
    },
    template: {
      intro: require('../../pages/index'),
      map: require('../../partials/map'),
      outro: require('../../pages/start')
    },
    initialize: function() {
      this.model.on('change:page', this.update, this);
      this.map = new MapView({model: this.model});
      this.control = new ControlView({model: this.model});
      this.footer = new FooterView({model: this.model});
      this.render();
    },
    update: function() {
      this.$('.map')[([0, 1, '0', '1', this.model.get('max')].indexOf(this.model.get('page')) !== -1 ? 'add' : 'remove') + 'Class']('map_has-overlay_dark');
      this.$('.intro')[(this.model.get('page') != 0 ? 'add' : 'remove') + 'Class']('intro_is-started_true');
      this.$('.start')[(this.model.get('page') != this.model.get('max') ? 'add' : 'remove') + 'Class']('start_is-started_true');
      return this;
    },
    start: function() {
      this.model.upPage();
    },
    render: function() {
      this.$el.html([this.template.map.render(), this.template.intro.render({layout: true}), this.template.outro.render({layout: true})].join(''));
      this.$el.append(this.map.$el);
      this.$el.append(this.control.$el);
      this.$el.append(this.footer.$el);
      this.update();
      return this;
    }
  });
};


},{"../../pages/index":30,"../../pages/start":31,"../../partials/map":34,"../../polyfill/indexOf":35,"./control":23,"./footer":24,"./map":25,"backbone":26,"jquery":29}],23:[function(require,module,exports){
"use strict";
var __moduleName = "app/view/control";
var Backbone = require('backbone');
Backbone.$ = require('jquery');
module.exports = function(app) {
  return Backbone.View.extend({
    events: {
      'click .features__arrow-link_to_right': 'next',
      'click .features__arrow-link_to_left': 'prev',
      'click .features__table-of-contents-item': 'goPage',
      'click .features__round-link': 'setState',
      'click .openness-examples__list': 'handleSlider',
      'click .entrances-examples__list': 'handleSlider',
      'click .pseudocard__find-entrance-link': '_showEntrance'
    },
    template: require('../../partials/header'),
    initialize: function() {
      this.model.on('change:page', this.update, this);
      this._currId = 0;
      this.render().toggle();
    },
    toggle: function() {
      var action = ((this.model.get('page') == 0 || this.model.get('page') == this.model.get('max')) ? 'remove' : 'add') + 'Class';
      this.$('.features')[action]('features_is-visible_true');
      return this;
    },
    setPage: function() {
      var pins = 'features__table-of-contents-item',
          tabs = 'features__list-item',
          active = '_is-active_true',
          item = ':eq(' + (this.model.get('page') - 1) + ')';
      this.$('.' + pins + active).removeClass(pins + active);
      this.$('.' + tabs + active).removeClass(tabs + active);
      this.$('.' + pins + item).addClass(pins + active);
      this.$('.' + tabs + item).addClass(tabs + active);
      return this;
    },
    update: function() {
      this.toggle().setPage().setState();
      return this;
    },
    next: function(e) {
      e.preventDefault();
      this.model.upPage();
      return this;
    },
    prev: function(e) {
      e.preventDefault();
      this.model.downPage();
      return this;
    },
    goPage: function(e) {
      this.model.setPage(this.$(e.target).index() + 1);
      return this;
    },
    setState: function(e) {
      var $el,
          state,
          activeClass = 'features__round-link-is-active_true';
      if (e) {
        e.preventDefault();
        $el = this.$(e.target);
      } else {
        $el = this.$('.features__list-item_is-active_true .features__round-link:eq(0)');
      }
      this.$('.' + activeClass).removeClass(activeClass);
      $el.addClass(activeClass);
      state = $el.data('state') ? $el.data('state') : 'page' + this.model.get('page');
      this.model.set('state', state);
      return this;
    },
    handleSlider: function(e) {
      var type = e.currentTarget.className.split('-')[0],
          $el = this.$(e.target);
      e.preventDefault();
      if ($el.hasClass(type + '-examples__example-link')) {
        var id = $el.data('id');
        this._currId !== id && this._handleSliderPos(id, $el, type);
      } else if ($el.hasClass(type + '-examples__play-pause-button')) {
        this._handleSliderStart();
      }
    },
    _handleSliderPos: function(id, el, type) {
      var activeClass = type + '-examples__example-link_is-shown_true',
          l = type.length - 1,
          eventName = type.charAt(0).toUpperCase() + type.slice(1, l);
      this._currEl.removeClass(activeClass);
      el.addClass(activeClass);
      this._currId = id;
      this._currEl = el;
      app.vent.trigger('change' + eventName, {id: this._currId});
    },
    _handleSliderStart: function() {
      if (!this._interval) {
        console.log(this._currId + 1, this._currEl, this._currEl.parent().next().children());
        var id = this._currId + 1,
            el = this._currEl.parent().next().children();
        this._interval = window.setInterval(this._handleSliderPos.bind(this), 1500, id, el);
      } else {
        window.clearInterval(this._interval);
      }
    },
    _showEntrance: function(e) {
      e.preventDefault();
      app.vent.trigger('showEntrance', {id: this._currId});
    },
    render: function() {
      this.$el.html(this.template.render());
      return this;
    }
  });
};


},{"../../partials/header":33,"backbone":26,"jquery":29}],24:[function(require,module,exports){
"use strict";
var __moduleName = "app/view/footer";
var Backbone = require('backbone');
Backbone.$ = require('jquery');
module.exports = function(app) {
  return Backbone.View.extend({
    template: require('../../partials/footer'),
    initialize: function() {
      this.model.on('change:state', this.setState, this);
      this.render().setState();
    },
    setState: function() {
      var tabs = 'footer__panel',
          active = '_is-active_true',
          item = '[data-footer-state=' + this.model.get('state') + ']';
      this.$('.' + tabs + active).removeClass(tabs + active);
      this.$(item).addClass(tabs + active);
      return this;
    },
    render: function() {
      this.$el.html(this.template.render());
      return this;
    }
  });
};


},{"../../partials/footer":32,"backbone":26,"jquery":29}],25:[function(require,module,exports){
"use strict";
var __moduleName = "app/view/map";
var Backbone = require('backbone'),
    _ = require('underscore'),
    maps = require('../maps');
Backbone.$ = require('jquery');
module.exports = function(app) {
  return Backbone.View.extend({
    mapOpts: function() {
      return {
        'center': new DG.LatLng(54.980156831455, 82.897440725094),
        'zoom': 13,
        'geoclicker': false,
        'worldCopyJump': true,
        'locationControl': false,
        'zoomControl': true,
        'fullscreenControl': false
      };
    },
    initialize: function() {
      this.model.on('change:state', this.update, this);
      DG.then(_.bind(this.render, this));
    },
    update: function() {
      DG.then(_.bind(function() {
        var map = this.model.get('map'),
            scene = maps[this.model.get('state')];
        maps.reset(map, app);
        scene && scene(map, app);
        return this;
      }, this));
    },
    render: function() {
      var map = new DG.Map('map', this.mapOpts());
      maps.setup(map, app);
      map.controls = {fullscreen: DG.control.fullscreen()};
      map.zoomControl.setPosition('topright');
      map.controls.fullscreen.addTo(map);
      this.model.set('map', map);
      return this;
    }
  });
};


},{"../maps":6,"backbone":26,"jquery":29,"underscore":27}],26:[function(require,module,exports){
//     Backbone.js 1.1.2

//     (c) 2010-2014 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
//     Backbone may be freely distributed under the MIT license.
//     For all details and documentation:
//     http://backbonejs.org

(function(root, factory) {

  // Set up Backbone appropriately for the environment. Start with AMD.
  if (typeof define === 'function' && define.amd) {
    define(['underscore', 'jquery', 'exports'], function(_, $, exports) {
      // Export global even in AMD case in case this script is loaded with
      // others that may still expect a global Backbone.
      root.Backbone = factory(root, exports, _, $);
    });

  // Next for Node.js or CommonJS. jQuery may not be needed as a module.
  } else if (typeof exports !== 'undefined') {
    var _ = require('underscore');
    factory(root, exports, _);

  // Finally, as a browser global.
  } else {
    root.Backbone = factory(root, {}, root._, (root.jQuery || root.Zepto || root.ender || root.$));
  }

}(this, function(root, Backbone, _, $) {

  // Initial Setup
  // -------------

  // Save the previous value of the `Backbone` variable, so that it can be
  // restored later on, if `noConflict` is used.
  var previousBackbone = root.Backbone;

  // Create local references to array methods we'll want to use later.
  var array = [];
  var push = array.push;
  var slice = array.slice;
  var splice = array.splice;

  // Current version of the library. Keep in sync with `package.json`.
  Backbone.VERSION = '1.1.2';

  // For Backbone's purposes, jQuery, Zepto, Ender, or My Library (kidding) owns
  // the `$` variable.
  Backbone.$ = $;

  // Runs Backbone.js in *noConflict* mode, returning the `Backbone` variable
  // to its previous owner. Returns a reference to this Backbone object.
  Backbone.noConflict = function() {
    root.Backbone = previousBackbone;
    return this;
  };

  // Turn on `emulateHTTP` to support legacy HTTP servers. Setting this option
  // will fake `"PATCH"`, `"PUT"` and `"DELETE"` requests via the `_method` parameter and
  // set a `X-Http-Method-Override` header.
  Backbone.emulateHTTP = false;

  // Turn on `emulateJSON` to support legacy servers that can't deal with direct
  // `application/json` requests ... will encode the body as
  // `application/x-www-form-urlencoded` instead and will send the model in a
  // form param named `model`.
  Backbone.emulateJSON = false;

  // Backbone.Events
  // ---------------

  // A module that can be mixed in to *any object* in order to provide it with
  // custom events. You may bind with `on` or remove with `off` callback
  // functions to an event; `trigger`-ing an event fires all callbacks in
  // succession.
  //
  //     var object = {};
  //     _.extend(object, Backbone.Events);
  //     object.on('expand', function(){ alert('expanded'); });
  //     object.trigger('expand');
  //
  var Events = Backbone.Events = {

    // Bind an event to a `callback` function. Passing `"all"` will bind
    // the callback to all events fired.
    on: function(name, callback, context) {
      if (!eventsApi(this, 'on', name, [callback, context]) || !callback) return this;
      this._events || (this._events = {});
      var events = this._events[name] || (this._events[name] = []);
      events.push({callback: callback, context: context, ctx: context || this});
      return this;
    },

    // Bind an event to only be triggered a single time. After the first time
    // the callback is invoked, it will be removed.
    once: function(name, callback, context) {
      if (!eventsApi(this, 'once', name, [callback, context]) || !callback) return this;
      var self = this;
      var once = _.once(function() {
        self.off(name, once);
        callback.apply(this, arguments);
      });
      once._callback = callback;
      return this.on(name, once, context);
    },

    // Remove one or many callbacks. If `context` is null, removes all
    // callbacks with that function. If `callback` is null, removes all
    // callbacks for the event. If `name` is null, removes all bound
    // callbacks for all events.
    off: function(name, callback, context) {
      var retain, ev, events, names, i, l, j, k;
      if (!this._events || !eventsApi(this, 'off', name, [callback, context])) return this;
      if (!name && !callback && !context) {
        this._events = void 0;
        return this;
      }
      names = name ? [name] : _.keys(this._events);
      for (i = 0, l = names.length; i < l; i++) {
        name = names[i];
        if (events = this._events[name]) {
          this._events[name] = retain = [];
          if (callback || context) {
            for (j = 0, k = events.length; j < k; j++) {
              ev = events[j];
              if ((callback && callback !== ev.callback && callback !== ev.callback._callback) ||
                  (context && context !== ev.context)) {
                retain.push(ev);
              }
            }
          }
          if (!retain.length) delete this._events[name];
        }
      }

      return this;
    },

    // Trigger one or many events, firing all bound callbacks. Callbacks are
    // passed the same arguments as `trigger` is, apart from the event name
    // (unless you're listening on `"all"`, which will cause your callback to
    // receive the true name of the event as the first argument).
    trigger: function(name) {
      if (!this._events) return this;
      var args = slice.call(arguments, 1);
      if (!eventsApi(this, 'trigger', name, args)) return this;
      var events = this._events[name];
      var allEvents = this._events.all;
      if (events) triggerEvents(events, args);
      if (allEvents) triggerEvents(allEvents, arguments);
      return this;
    },

    // Tell this object to stop listening to either specific events ... or
    // to every object it's currently listening to.
    stopListening: function(obj, name, callback) {
      var listeningTo = this._listeningTo;
      if (!listeningTo) return this;
      var remove = !name && !callback;
      if (!callback && typeof name === 'object') callback = this;
      if (obj) (listeningTo = {})[obj._listenId] = obj;
      for (var id in listeningTo) {
        obj = listeningTo[id];
        obj.off(name, callback, this);
        if (remove || _.isEmpty(obj._events)) delete this._listeningTo[id];
      }
      return this;
    }

  };

  // Regular expression used to split event strings.
  var eventSplitter = /\s+/;

  // Implement fancy features of the Events API such as multiple event
  // names `"change blur"` and jQuery-style event maps `{change: action}`
  // in terms of the existing API.
  var eventsApi = function(obj, action, name, rest) {
    if (!name) return true;

    // Handle event maps.
    if (typeof name === 'object') {
      for (var key in name) {
        obj[action].apply(obj, [key, name[key]].concat(rest));
      }
      return false;
    }

    // Handle space separated event names.
    if (eventSplitter.test(name)) {
      var names = name.split(eventSplitter);
      for (var i = 0, l = names.length; i < l; i++) {
        obj[action].apply(obj, [names[i]].concat(rest));
      }
      return false;
    }

    return true;
  };

  // A difficult-to-believe, but optimized internal dispatch function for
  // triggering events. Tries to keep the usual cases speedy (most internal
  // Backbone events have 3 arguments).
  var triggerEvents = function(events, args) {
    var ev, i = -1, l = events.length, a1 = args[0], a2 = args[1], a3 = args[2];
    switch (args.length) {
      case 0: while (++i < l) (ev = events[i]).callback.call(ev.ctx); return;
      case 1: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1); return;
      case 2: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1, a2); return;
      case 3: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1, a2, a3); return;
      default: while (++i < l) (ev = events[i]).callback.apply(ev.ctx, args); return;
    }
  };

  var listenMethods = {listenTo: 'on', listenToOnce: 'once'};

  // Inversion-of-control versions of `on` and `once`. Tell *this* object to
  // listen to an event in another object ... keeping track of what it's
  // listening to.
  _.each(listenMethods, function(implementation, method) {
    Events[method] = function(obj, name, callback) {
      var listeningTo = this._listeningTo || (this._listeningTo = {});
      var id = obj._listenId || (obj._listenId = _.uniqueId('l'));
      listeningTo[id] = obj;
      if (!callback && typeof name === 'object') callback = this;
      obj[implementation](name, callback, this);
      return this;
    };
  });

  // Aliases for backwards compatibility.
  Events.bind   = Events.on;
  Events.unbind = Events.off;

  // Allow the `Backbone` object to serve as a global event bus, for folks who
  // want global "pubsub" in a convenient place.
  _.extend(Backbone, Events);

  // Backbone.Model
  // --------------

  // Backbone **Models** are the basic data object in the framework --
  // frequently representing a row in a table in a database on your server.
  // A discrete chunk of data and a bunch of useful, related methods for
  // performing computations and transformations on that data.

  // Create a new model with the specified attributes. A client id (`cid`)
  // is automatically generated and assigned for you.
  var Model = Backbone.Model = function(attributes, options) {
    var attrs = attributes || {};
    options || (options = {});
    this.cid = _.uniqueId('c');
    this.attributes = {};
    if (options.collection) this.collection = options.collection;
    if (options.parse) attrs = this.parse(attrs, options) || {};
    attrs = _.defaults({}, attrs, _.result(this, 'defaults'));
    this.set(attrs, options);
    this.changed = {};
    this.initialize.apply(this, arguments);
  };

  // Attach all inheritable methods to the Model prototype.
  _.extend(Model.prototype, Events, {

    // A hash of attributes whose current and previous value differ.
    changed: null,

    // The value returned during the last failed validation.
    validationError: null,

    // The default name for the JSON `id` attribute is `"id"`. MongoDB and
    // CouchDB users may want to set this to `"_id"`.
    idAttribute: 'id',

    // Initialize is an empty function by default. Override it with your own
    // initialization logic.
    initialize: function(){},

    // Return a copy of the model's `attributes` object.
    toJSON: function(options) {
      return _.clone(this.attributes);
    },

    // Proxy `Backbone.sync` by default -- but override this if you need
    // custom syncing semantics for *this* particular model.
    sync: function() {
      return Backbone.sync.apply(this, arguments);
    },

    // Get the value of an attribute.
    get: function(attr) {
      return this.attributes[attr];
    },

    // Get the HTML-escaped value of an attribute.
    escape: function(attr) {
      return _.escape(this.get(attr));
    },

    // Returns `true` if the attribute contains a value that is not null
    // or undefined.
    has: function(attr) {
      return this.get(attr) != null;
    },

    // Set a hash of model attributes on the object, firing `"change"`. This is
    // the core primitive operation of a model, updating the data and notifying
    // anyone who needs to know about the change in state. The heart of the beast.
    set: function(key, val, options) {
      var attr, attrs, unset, changes, silent, changing, prev, current;
      if (key == null) return this;

      // Handle both `"key", value` and `{key: value}` -style arguments.
      if (typeof key === 'object') {
        attrs = key;
        options = val;
      } else {
        (attrs = {})[key] = val;
      }

      options || (options = {});

      // Run validation.
      if (!this._validate(attrs, options)) return false;

      // Extract attributes and options.
      unset           = options.unset;
      silent          = options.silent;
      changes         = [];
      changing        = this._changing;
      this._changing  = true;

      if (!changing) {
        this._previousAttributes = _.clone(this.attributes);
        this.changed = {};
      }
      current = this.attributes, prev = this._previousAttributes;

      // Check for changes of `id`.
      if (this.idAttribute in attrs) this.id = attrs[this.idAttribute];

      // For each `set` attribute, update or delete the current value.
      for (attr in attrs) {
        val = attrs[attr];
        if (!_.isEqual(current[attr], val)) changes.push(attr);
        if (!_.isEqual(prev[attr], val)) {
          this.changed[attr] = val;
        } else {
          delete this.changed[attr];
        }
        unset ? delete current[attr] : current[attr] = val;
      }

      // Trigger all relevant attribute changes.
      if (!silent) {
        if (changes.length) this._pending = options;
        for (var i = 0, l = changes.length; i < l; i++) {
          this.trigger('change:' + changes[i], this, current[changes[i]], options);
        }
      }

      // You might be wondering why there's a `while` loop here. Changes can
      // be recursively nested within `"change"` events.
      if (changing) return this;
      if (!silent) {
        while (this._pending) {
          options = this._pending;
          this._pending = false;
          this.trigger('change', this, options);
        }
      }
      this._pending = false;
      this._changing = false;
      return this;
    },

    // Remove an attribute from the model, firing `"change"`. `unset` is a noop
    // if the attribute doesn't exist.
    unset: function(attr, options) {
      return this.set(attr, void 0, _.extend({}, options, {unset: true}));
    },

    // Clear all attributes on the model, firing `"change"`.
    clear: function(options) {
      var attrs = {};
      for (var key in this.attributes) attrs[key] = void 0;
      return this.set(attrs, _.extend({}, options, {unset: true}));
    },

    // Determine if the model has changed since the last `"change"` event.
    // If you specify an attribute name, determine if that attribute has changed.
    hasChanged: function(attr) {
      if (attr == null) return !_.isEmpty(this.changed);
      return _.has(this.changed, attr);
    },

    // Return an object containing all the attributes that have changed, or
    // false if there are no changed attributes. Useful for determining what
    // parts of a view need to be updated and/or what attributes need to be
    // persisted to the server. Unset attributes will be set to undefined.
    // You can also pass an attributes object to diff against the model,
    // determining if there *would be* a change.
    changedAttributes: function(diff) {
      if (!diff) return this.hasChanged() ? _.clone(this.changed) : false;
      var val, changed = false;
      var old = this._changing ? this._previousAttributes : this.attributes;
      for (var attr in diff) {
        if (_.isEqual(old[attr], (val = diff[attr]))) continue;
        (changed || (changed = {}))[attr] = val;
      }
      return changed;
    },

    // Get the previous value of an attribute, recorded at the time the last
    // `"change"` event was fired.
    previous: function(attr) {
      if (attr == null || !this._previousAttributes) return null;
      return this._previousAttributes[attr];
    },

    // Get all of the attributes of the model at the time of the previous
    // `"change"` event.
    previousAttributes: function() {
      return _.clone(this._previousAttributes);
    },

    // Fetch the model from the server. If the server's representation of the
    // model differs from its current attributes, they will be overridden,
    // triggering a `"change"` event.
    fetch: function(options) {
      options = options ? _.clone(options) : {};
      if (options.parse === void 0) options.parse = true;
      var model = this;
      var success = options.success;
      options.success = function(resp) {
        if (!model.set(model.parse(resp, options), options)) return false;
        if (success) success(model, resp, options);
        model.trigger('sync', model, resp, options);
      };
      wrapError(this, options);
      return this.sync('read', this, options);
    },

    // Set a hash of model attributes, and sync the model to the server.
    // If the server returns an attributes hash that differs, the model's
    // state will be `set` again.
    save: function(key, val, options) {
      var attrs, method, xhr, attributes = this.attributes;

      // Handle both `"key", value` and `{key: value}` -style arguments.
      if (key == null || typeof key === 'object') {
        attrs = key;
        options = val;
      } else {
        (attrs = {})[key] = val;
      }

      options = _.extend({validate: true}, options);

      // If we're not waiting and attributes exist, save acts as
      // `set(attr).save(null, opts)` with validation. Otherwise, check if
      // the model will be valid when the attributes, if any, are set.
      if (attrs && !options.wait) {
        if (!this.set(attrs, options)) return false;
      } else {
        if (!this._validate(attrs, options)) return false;
      }

      // Set temporary attributes if `{wait: true}`.
      if (attrs && options.wait) {
        this.attributes = _.extend({}, attributes, attrs);
      }

      // After a successful server-side save, the client is (optionally)
      // updated with the server-side state.
      if (options.parse === void 0) options.parse = true;
      var model = this;
      var success = options.success;
      options.success = function(resp) {
        // Ensure attributes are restored during synchronous saves.
        model.attributes = attributes;
        var serverAttrs = model.parse(resp, options);
        if (options.wait) serverAttrs = _.extend(attrs || {}, serverAttrs);
        if (_.isObject(serverAttrs) && !model.set(serverAttrs, options)) {
          return false;
        }
        if (success) success(model, resp, options);
        model.trigger('sync', model, resp, options);
      };
      wrapError(this, options);

      method = this.isNew() ? 'create' : (options.patch ? 'patch' : 'update');
      if (method === 'patch') options.attrs = attrs;
      xhr = this.sync(method, this, options);

      // Restore attributes.
      if (attrs && options.wait) this.attributes = attributes;

      return xhr;
    },

    // Destroy this model on the server if it was already persisted.
    // Optimistically removes the model from its collection, if it has one.
    // If `wait: true` is passed, waits for the server to respond before removal.
    destroy: function(options) {
      options = options ? _.clone(options) : {};
      var model = this;
      var success = options.success;

      var destroy = function() {
        model.trigger('destroy', model, model.collection, options);
      };

      options.success = function(resp) {
        if (options.wait || model.isNew()) destroy();
        if (success) success(model, resp, options);
        if (!model.isNew()) model.trigger('sync', model, resp, options);
      };

      if (this.isNew()) {
        options.success();
        return false;
      }
      wrapError(this, options);

      var xhr = this.sync('delete', this, options);
      if (!options.wait) destroy();
      return xhr;
    },

    // Default URL for the model's representation on the server -- if you're
    // using Backbone's restful methods, override this to change the endpoint
    // that will be called.
    url: function() {
      var base =
        _.result(this, 'urlRoot') ||
        _.result(this.collection, 'url') ||
        urlError();
      if (this.isNew()) return base;
      return base.replace(/([^\/])$/, '$1/') + encodeURIComponent(this.id);
    },

    // **parse** converts a response into the hash of attributes to be `set` on
    // the model. The default implementation is just to pass the response along.
    parse: function(resp, options) {
      return resp;
    },

    // Create a new model with identical attributes to this one.
    clone: function() {
      return new this.constructor(this.attributes);
    },

    // A model is new if it has never been saved to the server, and lacks an id.
    isNew: function() {
      return !this.has(this.idAttribute);
    },

    // Check if the model is currently in a valid state.
    isValid: function(options) {
      return this._validate({}, _.extend(options || {}, { validate: true }));
    },

    // Run validation against the next complete set of model attributes,
    // returning `true` if all is well. Otherwise, fire an `"invalid"` event.
    _validate: function(attrs, options) {
      if (!options.validate || !this.validate) return true;
      attrs = _.extend({}, this.attributes, attrs);
      var error = this.validationError = this.validate(attrs, options) || null;
      if (!error) return true;
      this.trigger('invalid', this, error, _.extend(options, {validationError: error}));
      return false;
    }

  });

  // Underscore methods that we want to implement on the Model.
  var modelMethods = ['keys', 'values', 'pairs', 'invert', 'pick', 'omit'];

  // Mix in each Underscore method as a proxy to `Model#attributes`.
  _.each(modelMethods, function(method) {
    Model.prototype[method] = function() {
      var args = slice.call(arguments);
      args.unshift(this.attributes);
      return _[method].apply(_, args);
    };
  });

  // Backbone.Collection
  // -------------------

  // If models tend to represent a single row of data, a Backbone Collection is
  // more analagous to a table full of data ... or a small slice or page of that
  // table, or a collection of rows that belong together for a particular reason
  // -- all of the messages in this particular folder, all of the documents
  // belonging to this particular author, and so on. Collections maintain
  // indexes of their models, both in order, and for lookup by `id`.

  // Create a new **Collection**, perhaps to contain a specific type of `model`.
  // If a `comparator` is specified, the Collection will maintain
  // its models in sort order, as they're added and removed.
  var Collection = Backbone.Collection = function(models, options) {
    options || (options = {});
    if (options.model) this.model = options.model;
    if (options.comparator !== void 0) this.comparator = options.comparator;
    this._reset();
    this.initialize.apply(this, arguments);
    if (models) this.reset(models, _.extend({silent: true}, options));
  };

  // Default options for `Collection#set`.
  var setOptions = {add: true, remove: true, merge: true};
  var addOptions = {add: true, remove: false};

  // Define the Collection's inheritable methods.
  _.extend(Collection.prototype, Events, {

    // The default model for a collection is just a **Backbone.Model**.
    // This should be overridden in most cases.
    model: Model,

    // Initialize is an empty function by default. Override it with your own
    // initialization logic.
    initialize: function(){},

    // The JSON representation of a Collection is an array of the
    // models' attributes.
    toJSON: function(options) {
      return this.map(function(model){ return model.toJSON(options); });
    },

    // Proxy `Backbone.sync` by default.
    sync: function() {
      return Backbone.sync.apply(this, arguments);
    },

    // Add a model, or list of models to the set.
    add: function(models, options) {
      return this.set(models, _.extend({merge: false}, options, addOptions));
    },

    // Remove a model, or a list of models from the set.
    remove: function(models, options) {
      var singular = !_.isArray(models);
      models = singular ? [models] : _.clone(models);
      options || (options = {});
      var i, l, index, model;
      for (i = 0, l = models.length; i < l; i++) {
        model = models[i] = this.get(models[i]);
        if (!model) continue;
        delete this._byId[model.id];
        delete this._byId[model.cid];
        index = this.indexOf(model);
        this.models.splice(index, 1);
        this.length--;
        if (!options.silent) {
          options.index = index;
          model.trigger('remove', model, this, options);
        }
        this._removeReference(model, options);
      }
      return singular ? models[0] : models;
    },

    // Update a collection by `set`-ing a new list of models, adding new ones,
    // removing models that are no longer present, and merging models that
    // already exist in the collection, as necessary. Similar to **Model#set**,
    // the core operation for updating the data contained by the collection.
    set: function(models, options) {
      options = _.defaults({}, options, setOptions);
      if (options.parse) models = this.parse(models, options);
      var singular = !_.isArray(models);
      models = singular ? (models ? [models] : []) : _.clone(models);
      var i, l, id, model, attrs, existing, sort;
      var at = options.at;
      var targetModel = this.model;
      var sortable = this.comparator && (at == null) && options.sort !== false;
      var sortAttr = _.isString(this.comparator) ? this.comparator : null;
      var toAdd = [], toRemove = [], modelMap = {};
      var add = options.add, merge = options.merge, remove = options.remove;
      var order = !sortable && add && remove ? [] : false;

      // Turn bare objects into model references, and prevent invalid models
      // from being added.
      for (i = 0, l = models.length; i < l; i++) {
        attrs = models[i] || {};
        if (attrs instanceof Model) {
          id = model = attrs;
        } else {
          id = attrs[targetModel.prototype.idAttribute || 'id'];
        }

        // If a duplicate is found, prevent it from being added and
        // optionally merge it into the existing model.
        if (existing = this.get(id)) {
          if (remove) modelMap[existing.cid] = true;
          if (merge) {
            attrs = attrs === model ? model.attributes : attrs;
            if (options.parse) attrs = existing.parse(attrs, options);
            existing.set(attrs, options);
            if (sortable && !sort && existing.hasChanged(sortAttr)) sort = true;
          }
          models[i] = existing;

        // If this is a new, valid model, push it to the `toAdd` list.
        } else if (add) {
          model = models[i] = this._prepareModel(attrs, options);
          if (!model) continue;
          toAdd.push(model);
          this._addReference(model, options);
        }

        // Do not add multiple models with the same `id`.
        model = existing || model;
        if (order && (model.isNew() || !modelMap[model.id])) order.push(model);
        modelMap[model.id] = true;
      }

      // Remove nonexistent models if appropriate.
      if (remove) {
        for (i = 0, l = this.length; i < l; ++i) {
          if (!modelMap[(model = this.models[i]).cid]) toRemove.push(model);
        }
        if (toRemove.length) this.remove(toRemove, options);
      }

      // See if sorting is needed, update `length` and splice in new models.
      if (toAdd.length || (order && order.length)) {
        if (sortable) sort = true;
        this.length += toAdd.length;
        if (at != null) {
          for (i = 0, l = toAdd.length; i < l; i++) {
            this.models.splice(at + i, 0, toAdd[i]);
          }
        } else {
          if (order) this.models.length = 0;
          var orderedModels = order || toAdd;
          for (i = 0, l = orderedModels.length; i < l; i++) {
            this.models.push(orderedModels[i]);
          }
        }
      }

      // Silently sort the collection if appropriate.
      if (sort) this.sort({silent: true});

      // Unless silenced, it's time to fire all appropriate add/sort events.
      if (!options.silent) {
        for (i = 0, l = toAdd.length; i < l; i++) {
          (model = toAdd[i]).trigger('add', model, this, options);
        }
        if (sort || (order && order.length)) this.trigger('sort', this, options);
      }

      // Return the added (or merged) model (or models).
      return singular ? models[0] : models;
    },

    // When you have more items than you want to add or remove individually,
    // you can reset the entire set with a new list of models, without firing
    // any granular `add` or `remove` events. Fires `reset` when finished.
    // Useful for bulk operations and optimizations.
    reset: function(models, options) {
      options || (options = {});
      for (var i = 0, l = this.models.length; i < l; i++) {
        this._removeReference(this.models[i], options);
      }
      options.previousModels = this.models;
      this._reset();
      models = this.add(models, _.extend({silent: true}, options));
      if (!options.silent) this.trigger('reset', this, options);
      return models;
    },

    // Add a model to the end of the collection.
    push: function(model, options) {
      return this.add(model, _.extend({at: this.length}, options));
    },

    // Remove a model from the end of the collection.
    pop: function(options) {
      var model = this.at(this.length - 1);
      this.remove(model, options);
      return model;
    },

    // Add a model to the beginning of the collection.
    unshift: function(model, options) {
      return this.add(model, _.extend({at: 0}, options));
    },

    // Remove a model from the beginning of the collection.
    shift: function(options) {
      var model = this.at(0);
      this.remove(model, options);
      return model;
    },

    // Slice out a sub-array of models from the collection.
    slice: function() {
      return slice.apply(this.models, arguments);
    },

    // Get a model from the set by id.
    get: function(obj) {
      if (obj == null) return void 0;
      return this._byId[obj] || this._byId[obj.id] || this._byId[obj.cid];
    },

    // Get the model at the given index.
    at: function(index) {
      return this.models[index];
    },

    // Return models with matching attributes. Useful for simple cases of
    // `filter`.
    where: function(attrs, first) {
      if (_.isEmpty(attrs)) return first ? void 0 : [];
      return this[first ? 'find' : 'filter'](function(model) {
        for (var key in attrs) {
          if (attrs[key] !== model.get(key)) return false;
        }
        return true;
      });
    },

    // Return the first model with matching attributes. Useful for simple cases
    // of `find`.
    findWhere: function(attrs) {
      return this.where(attrs, true);
    },

    // Force the collection to re-sort itself. You don't need to call this under
    // normal circumstances, as the set will maintain sort order as each item
    // is added.
    sort: function(options) {
      if (!this.comparator) throw new Error('Cannot sort a set without a comparator');
      options || (options = {});

      // Run sort based on type of `comparator`.
      if (_.isString(this.comparator) || this.comparator.length === 1) {
        this.models = this.sortBy(this.comparator, this);
      } else {
        this.models.sort(_.bind(this.comparator, this));
      }

      if (!options.silent) this.trigger('sort', this, options);
      return this;
    },

    // Pluck an attribute from each model in the collection.
    pluck: function(attr) {
      return _.invoke(this.models, 'get', attr);
    },

    // Fetch the default set of models for this collection, resetting the
    // collection when they arrive. If `reset: true` is passed, the response
    // data will be passed through the `reset` method instead of `set`.
    fetch: function(options) {
      options = options ? _.clone(options) : {};
      if (options.parse === void 0) options.parse = true;
      var success = options.success;
      var collection = this;
      options.success = function(resp) {
        var method = options.reset ? 'reset' : 'set';
        collection[method](resp, options);
        if (success) success(collection, resp, options);
        collection.trigger('sync', collection, resp, options);
      };
      wrapError(this, options);
      return this.sync('read', this, options);
    },

    // Create a new instance of a model in this collection. Add the model to the
    // collection immediately, unless `wait: true` is passed, in which case we
    // wait for the server to agree.
    create: function(model, options) {
      options = options ? _.clone(options) : {};
      if (!(model = this._prepareModel(model, options))) return false;
      if (!options.wait) this.add(model, options);
      var collection = this;
      var success = options.success;
      options.success = function(model, resp) {
        if (options.wait) collection.add(model, options);
        if (success) success(model, resp, options);
      };
      model.save(null, options);
      return model;
    },

    // **parse** converts a response into a list of models to be added to the
    // collection. The default implementation is just to pass it through.
    parse: function(resp, options) {
      return resp;
    },

    // Create a new collection with an identical list of models as this one.
    clone: function() {
      return new this.constructor(this.models);
    },

    // Private method to reset all internal state. Called when the collection
    // is first initialized or reset.
    _reset: function() {
      this.length = 0;
      this.models = [];
      this._byId  = {};
    },

    // Prepare a hash of attributes (or other model) to be added to this
    // collection.
    _prepareModel: function(attrs, options) {
      if (attrs instanceof Model) return attrs;
      options = options ? _.clone(options) : {};
      options.collection = this;
      var model = new this.model(attrs, options);
      if (!model.validationError) return model;
      this.trigger('invalid', this, model.validationError, options);
      return false;
    },

    // Internal method to create a model's ties to a collection.
    _addReference: function(model, options) {
      this._byId[model.cid] = model;
      if (model.id != null) this._byId[model.id] = model;
      if (!model.collection) model.collection = this;
      model.on('all', this._onModelEvent, this);
    },

    // Internal method to sever a model's ties to a collection.
    _removeReference: function(model, options) {
      if (this === model.collection) delete model.collection;
      model.off('all', this._onModelEvent, this);
    },

    // Internal method called every time a model in the set fires an event.
    // Sets need to update their indexes when models change ids. All other
    // events simply proxy through. "add" and "remove" events that originate
    // in other collections are ignored.
    _onModelEvent: function(event, model, collection, options) {
      if ((event === 'add' || event === 'remove') && collection !== this) return;
      if (event === 'destroy') this.remove(model, options);
      if (model && event === 'change:' + model.idAttribute) {
        delete this._byId[model.previous(model.idAttribute)];
        if (model.id != null) this._byId[model.id] = model;
      }
      this.trigger.apply(this, arguments);
    }

  });

  // Underscore methods that we want to implement on the Collection.
  // 90% of the core usefulness of Backbone Collections is actually implemented
  // right here:
  var methods = ['forEach', 'each', 'map', 'collect', 'reduce', 'foldl',
    'inject', 'reduceRight', 'foldr', 'find', 'detect', 'filter', 'select',
    'reject', 'every', 'all', 'some', 'any', 'include', 'contains', 'invoke',
    'max', 'min', 'toArray', 'size', 'first', 'head', 'take', 'initial', 'rest',
    'tail', 'drop', 'last', 'without', 'difference', 'indexOf', 'shuffle',
    'lastIndexOf', 'isEmpty', 'chain', 'sample'];

  // Mix in each Underscore method as a proxy to `Collection#models`.
  _.each(methods, function(method) {
    Collection.prototype[method] = function() {
      var args = slice.call(arguments);
      args.unshift(this.models);
      return _[method].apply(_, args);
    };
  });

  // Underscore methods that take a property name as an argument.
  var attributeMethods = ['groupBy', 'countBy', 'sortBy', 'indexBy'];

  // Use attributes instead of properties.
  _.each(attributeMethods, function(method) {
    Collection.prototype[method] = function(value, context) {
      var iterator = _.isFunction(value) ? value : function(model) {
        return model.get(value);
      };
      return _[method](this.models, iterator, context);
    };
  });

  // Backbone.View
  // -------------

  // Backbone Views are almost more convention than they are actual code. A View
  // is simply a JavaScript object that represents a logical chunk of UI in the
  // DOM. This might be a single item, an entire list, a sidebar or panel, or
  // even the surrounding frame which wraps your whole app. Defining a chunk of
  // UI as a **View** allows you to define your DOM events declaratively, without
  // having to worry about render order ... and makes it easy for the view to
  // react to specific changes in the state of your models.

  // Creating a Backbone.View creates its initial element outside of the DOM,
  // if an existing element is not provided...
  var View = Backbone.View = function(options) {
    this.cid = _.uniqueId('view');
    options || (options = {});
    _.extend(this, _.pick(options, viewOptions));
    this._ensureElement();
    this.initialize.apply(this, arguments);
    this.delegateEvents();
  };

  // Cached regex to split keys for `delegate`.
  var delegateEventSplitter = /^(\S+)\s*(.*)$/;

  // List of view options to be merged as properties.
  var viewOptions = ['model', 'collection', 'el', 'id', 'attributes', 'className', 'tagName', 'events'];

  // Set up all inheritable **Backbone.View** properties and methods.
  _.extend(View.prototype, Events, {

    // The default `tagName` of a View's element is `"div"`.
    tagName: 'div',

    // jQuery delegate for element lookup, scoped to DOM elements within the
    // current view. This should be preferred to global lookups where possible.
    $: function(selector) {
      return this.$el.find(selector);
    },

    // Initialize is an empty function by default. Override it with your own
    // initialization logic.
    initialize: function(){},

    // **render** is the core function that your view should override, in order
    // to populate its element (`this.el`), with the appropriate HTML. The
    // convention is for **render** to always return `this`.
    render: function() {
      return this;
    },

    // Remove this view by taking the element out of the DOM, and removing any
    // applicable Backbone.Events listeners.
    remove: function() {
      this.$el.remove();
      this.stopListening();
      return this;
    },

    // Change the view's element (`this.el` property), including event
    // re-delegation.
    setElement: function(element, delegate) {
      if (this.$el) this.undelegateEvents();
      this.$el = element instanceof Backbone.$ ? element : Backbone.$(element);
      this.el = this.$el[0];
      if (delegate !== false) this.delegateEvents();
      return this;
    },

    // Set callbacks, where `this.events` is a hash of
    //
    // *{"event selector": "callback"}*
    //
    //     {
    //       'mousedown .title':  'edit',
    //       'click .button':     'save',
    //       'click .open':       function(e) { ... }
    //     }
    //
    // pairs. Callbacks will be bound to the view, with `this` set properly.
    // Uses event delegation for efficiency.
    // Omitting the selector binds the event to `this.el`.
    // This only works for delegate-able events: not `focus`, `blur`, and
    // not `change`, `submit`, and `reset` in Internet Explorer.
    delegateEvents: function(events) {
      if (!(events || (events = _.result(this, 'events')))) return this;
      this.undelegateEvents();
      for (var key in events) {
        var method = events[key];
        if (!_.isFunction(method)) method = this[events[key]];
        if (!method) continue;

        var match = key.match(delegateEventSplitter);
        var eventName = match[1], selector = match[2];
        method = _.bind(method, this);
        eventName += '.delegateEvents' + this.cid;
        if (selector === '') {
          this.$el.on(eventName, method);
        } else {
          this.$el.on(eventName, selector, method);
        }
      }
      return this;
    },

    // Clears all callbacks previously bound to the view with `delegateEvents`.
    // You usually don't need to use this, but may wish to if you have multiple
    // Backbone views attached to the same DOM element.
    undelegateEvents: function() {
      this.$el.off('.delegateEvents' + this.cid);
      return this;
    },

    // Ensure that the View has a DOM element to render into.
    // If `this.el` is a string, pass it through `$()`, take the first
    // matching element, and re-assign it to `el`. Otherwise, create
    // an element from the `id`, `className` and `tagName` properties.
    _ensureElement: function() {
      if (!this.el) {
        var attrs = _.extend({}, _.result(this, 'attributes'));
        if (this.id) attrs.id = _.result(this, 'id');
        if (this.className) attrs['class'] = _.result(this, 'className');
        var $el = Backbone.$('<' + _.result(this, 'tagName') + '>').attr(attrs);
        this.setElement($el, false);
      } else {
        this.setElement(_.result(this, 'el'), false);
      }
    }

  });

  // Backbone.sync
  // -------------

  // Override this function to change the manner in which Backbone persists
  // models to the server. You will be passed the type of request, and the
  // model in question. By default, makes a RESTful Ajax request
  // to the model's `url()`. Some possible customizations could be:
  //
  // * Use `setTimeout` to batch rapid-fire updates into a single request.
  // * Send up the models as XML instead of JSON.
  // * Persist models via WebSockets instead of Ajax.
  //
  // Turn on `Backbone.emulateHTTP` in order to send `PUT` and `DELETE` requests
  // as `POST`, with a `_method` parameter containing the true HTTP method,
  // as well as all requests with the body as `application/x-www-form-urlencoded`
  // instead of `application/json` with the model in a param named `model`.
  // Useful when interfacing with server-side languages like **PHP** that make
  // it difficult to read the body of `PUT` requests.
  Backbone.sync = function(method, model, options) {
    var type = methodMap[method];

    // Default options, unless specified.
    _.defaults(options || (options = {}), {
      emulateHTTP: Backbone.emulateHTTP,
      emulateJSON: Backbone.emulateJSON
    });

    // Default JSON-request options.
    var params = {type: type, dataType: 'json'};

    // Ensure that we have a URL.
    if (!options.url) {
      params.url = _.result(model, 'url') || urlError();
    }

    // Ensure that we have the appropriate request data.
    if (options.data == null && model && (method === 'create' || method === 'update' || method === 'patch')) {
      params.contentType = 'application/json';
      params.data = JSON.stringify(options.attrs || model.toJSON(options));
    }

    // For older servers, emulate JSON by encoding the request into an HTML-form.
    if (options.emulateJSON) {
      params.contentType = 'application/x-www-form-urlencoded';
      params.data = params.data ? {model: params.data} : {};
    }

    // For older servers, emulate HTTP by mimicking the HTTP method with `_method`
    // And an `X-HTTP-Method-Override` header.
    if (options.emulateHTTP && (type === 'PUT' || type === 'DELETE' || type === 'PATCH')) {
      params.type = 'POST';
      if (options.emulateJSON) params.data._method = type;
      var beforeSend = options.beforeSend;
      options.beforeSend = function(xhr) {
        xhr.setRequestHeader('X-HTTP-Method-Override', type);
        if (beforeSend) return beforeSend.apply(this, arguments);
      };
    }

    // Don't process data on a non-GET request.
    if (params.type !== 'GET' && !options.emulateJSON) {
      params.processData = false;
    }

    // If we're sending a `PATCH` request, and we're in an old Internet Explorer
    // that still has ActiveX enabled by default, override jQuery to use that
    // for XHR instead. Remove this line when jQuery supports `PATCH` on IE8.
    if (params.type === 'PATCH' && noXhrPatch) {
      params.xhr = function() {
        return new ActiveXObject("Microsoft.XMLHTTP");
      };
    }

    // Make the request, allowing the user to override any Ajax options.
    var xhr = options.xhr = Backbone.ajax(_.extend(params, options));
    model.trigger('request', model, xhr, options);
    return xhr;
  };

  var noXhrPatch =
    typeof window !== 'undefined' && !!window.ActiveXObject &&
      !(window.XMLHttpRequest && (new XMLHttpRequest).dispatchEvent);

  // Map from CRUD to HTTP for our default `Backbone.sync` implementation.
  var methodMap = {
    'create': 'POST',
    'update': 'PUT',
    'patch':  'PATCH',
    'delete': 'DELETE',
    'read':   'GET'
  };

  // Set the default implementation of `Backbone.ajax` to proxy through to `$`.
  // Override this if you'd like to use a different library.
  Backbone.ajax = function() {
    return Backbone.$.ajax.apply(Backbone.$, arguments);
  };

  // Backbone.Router
  // ---------------

  // Routers map faux-URLs to actions, and fire events when routes are
  // matched. Creating a new one sets its `routes` hash, if not set statically.
  var Router = Backbone.Router = function(options) {
    options || (options = {});
    if (options.routes) this.routes = options.routes;
    this._bindRoutes();
    this.initialize.apply(this, arguments);
  };

  // Cached regular expressions for matching named param parts and splatted
  // parts of route strings.
  var optionalParam = /\((.*?)\)/g;
  var namedParam    = /(\(\?)?:\w+/g;
  var splatParam    = /\*\w+/g;
  var escapeRegExp  = /[\-{}\[\]+?.,\\\^$|#\s]/g;

  // Set up all inheritable **Backbone.Router** properties and methods.
  _.extend(Router.prototype, Events, {

    // Initialize is an empty function by default. Override it with your own
    // initialization logic.
    initialize: function(){},

    // Manually bind a single named route to a callback. For example:
    //
    //     this.route('search/:query/p:num', 'search', function(query, num) {
    //       ...
    //     });
    //
    route: function(route, name, callback) {
      if (!_.isRegExp(route)) route = this._routeToRegExp(route);
      if (_.isFunction(name)) {
        callback = name;
        name = '';
      }
      if (!callback) callback = this[name];
      var router = this;
      Backbone.history.route(route, function(fragment) {
        var args = router._extractParameters(route, fragment);
        router.execute(callback, args);
        router.trigger.apply(router, ['route:' + name].concat(args));
        router.trigger('route', name, args);
        Backbone.history.trigger('route', router, name, args);
      });
      return this;
    },

    // Execute a route handler with the provided parameters.  This is an
    // excellent place to do pre-route setup or post-route cleanup.
    execute: function(callback, args) {
      if (callback) callback.apply(this, args);
    },

    // Simple proxy to `Backbone.history` to save a fragment into the history.
    navigate: function(fragment, options) {
      Backbone.history.navigate(fragment, options);
      return this;
    },

    // Bind all defined routes to `Backbone.history`. We have to reverse the
    // order of the routes here to support behavior where the most general
    // routes can be defined at the bottom of the route map.
    _bindRoutes: function() {
      if (!this.routes) return;
      this.routes = _.result(this, 'routes');
      var route, routes = _.keys(this.routes);
      while ((route = routes.pop()) != null) {
        this.route(route, this.routes[route]);
      }
    },

    // Convert a route string into a regular expression, suitable for matching
    // against the current location hash.
    _routeToRegExp: function(route) {
      route = route.replace(escapeRegExp, '\\$&')
                   .replace(optionalParam, '(?:$1)?')
                   .replace(namedParam, function(match, optional) {
                     return optional ? match : '([^/?]+)';
                   })
                   .replace(splatParam, '([^?]*?)');
      return new RegExp('^' + route + '(?:\\?([\\s\\S]*))?$');
    },

    // Given a route, and a URL fragment that it matches, return the array of
    // extracted decoded parameters. Empty or unmatched parameters will be
    // treated as `null` to normalize cross-browser behavior.
    _extractParameters: function(route, fragment) {
      var params = route.exec(fragment).slice(1);
      return _.map(params, function(param, i) {
        // Don't decode the search params.
        if (i === params.length - 1) return param || null;
        return param ? decodeURIComponent(param) : null;
      });
    }

  });

  // Backbone.History
  // ----------------

  // Handles cross-browser history management, based on either
  // [pushState](http://diveintohtml5.info/history.html) and real URLs, or
  // [onhashchange](https://developer.mozilla.org/en-US/docs/DOM/window.onhashchange)
  // and URL fragments. If the browser supports neither (old IE, natch),
  // falls back to polling.
  var History = Backbone.History = function() {
    this.handlers = [];
    _.bindAll(this, 'checkUrl');

    // Ensure that `History` can be used outside of the browser.
    if (typeof window !== 'undefined') {
      this.location = window.location;
      this.history = window.history;
    }
  };

  // Cached regex for stripping a leading hash/slash and trailing space.
  var routeStripper = /^[#\/]|\s+$/g;

  // Cached regex for stripping leading and trailing slashes.
  var rootStripper = /^\/+|\/+$/g;

  // Cached regex for detecting MSIE.
  var isExplorer = /msie [\w.]+/;

  // Cached regex for removing a trailing slash.
  var trailingSlash = /\/$/;

  // Cached regex for stripping urls of hash.
  var pathStripper = /#.*$/;

  // Has the history handling already been started?
  History.started = false;

  // Set up all inheritable **Backbone.History** properties and methods.
  _.extend(History.prototype, Events, {

    // The default interval to poll for hash changes, if necessary, is
    // twenty times a second.
    interval: 50,

    // Are we at the app root?
    atRoot: function() {
      return this.location.pathname.replace(/[^\/]$/, '$&/') === this.root;
    },

    // Gets the true hash value. Cannot use location.hash directly due to bug
    // in Firefox where location.hash will always be decoded.
    getHash: function(window) {
      var match = (window || this).location.href.match(/#(.*)$/);
      return match ? match[1] : '';
    },

    // Get the cross-browser normalized URL fragment, either from the URL,
    // the hash, or the override.
    getFragment: function(fragment, forcePushState) {
      if (fragment == null) {
        if (this._hasPushState || !this._wantsHashChange || forcePushState) {
          fragment = decodeURI(this.location.pathname + this.location.search);
          var root = this.root.replace(trailingSlash, '');
          if (!fragment.indexOf(root)) fragment = fragment.slice(root.length);
        } else {
          fragment = this.getHash();
        }
      }
      return fragment.replace(routeStripper, '');
    },

    // Start the hash change handling, returning `true` if the current URL matches
    // an existing route, and `false` otherwise.
    start: function(options) {
      if (History.started) throw new Error("Backbone.history has already been started");
      History.started = true;

      // Figure out the initial configuration. Do we need an iframe?
      // Is pushState desired ... is it available?
      this.options          = _.extend({root: '/'}, this.options, options);
      this.root             = this.options.root;
      this._wantsHashChange = this.options.hashChange !== false;
      this._wantsPushState  = !!this.options.pushState;
      this._hasPushState    = !!(this.options.pushState && this.history && this.history.pushState);
      var fragment          = this.getFragment();
      var docMode           = document.documentMode;
      var oldIE             = (isExplorer.exec(navigator.userAgent.toLowerCase()) && (!docMode || docMode <= 7));

      // Normalize root to always include a leading and trailing slash.
      this.root = ('/' + this.root + '/').replace(rootStripper, '/');

      if (oldIE && this._wantsHashChange) {
        var frame = Backbone.$('<iframe src="javascript:0" tabindex="-1">');
        this.iframe = frame.hide().appendTo('body')[0].contentWindow;
        this.navigate(fragment);
      }

      // Depending on whether we're using pushState or hashes, and whether
      // 'onhashchange' is supported, determine how we check the URL state.
      if (this._hasPushState) {
        Backbone.$(window).on('popstate', this.checkUrl);
      } else if (this._wantsHashChange && ('onhashchange' in window) && !oldIE) {
        Backbone.$(window).on('hashchange', this.checkUrl);
      } else if (this._wantsHashChange) {
        this._checkUrlInterval = setInterval(this.checkUrl, this.interval);
      }

      // Determine if we need to change the base url, for a pushState link
      // opened by a non-pushState browser.
      this.fragment = fragment;
      var loc = this.location;

      // Transition from hashChange to pushState or vice versa if both are
      // requested.
      if (this._wantsHashChange && this._wantsPushState) {

        // If we've started off with a route from a `pushState`-enabled
        // browser, but we're currently in a browser that doesn't support it...
        if (!this._hasPushState && !this.atRoot()) {
          this.fragment = this.getFragment(null, true);
          this.location.replace(this.root + '#' + this.fragment);
          // Return immediately as browser will do redirect to new url
          return true;

        // Or if we've started out with a hash-based route, but we're currently
        // in a browser where it could be `pushState`-based instead...
        } else if (this._hasPushState && this.atRoot() && loc.hash) {
          this.fragment = this.getHash().replace(routeStripper, '');
          this.history.replaceState({}, document.title, this.root + this.fragment);
        }

      }

      if (!this.options.silent) return this.loadUrl();
    },

    // Disable Backbone.history, perhaps temporarily. Not useful in a real app,
    // but possibly useful for unit testing Routers.
    stop: function() {
      Backbone.$(window).off('popstate', this.checkUrl).off('hashchange', this.checkUrl);
      if (this._checkUrlInterval) clearInterval(this._checkUrlInterval);
      History.started = false;
    },

    // Add a route to be tested when the fragment changes. Routes added later
    // may override previous routes.
    route: function(route, callback) {
      this.handlers.unshift({route: route, callback: callback});
    },

    // Checks the current URL to see if it has changed, and if it has,
    // calls `loadUrl`, normalizing across the hidden iframe.
    checkUrl: function(e) {
      var current = this.getFragment();
      if (current === this.fragment && this.iframe) {
        current = this.getFragment(this.getHash(this.iframe));
      }
      if (current === this.fragment) return false;
      if (this.iframe) this.navigate(current);
      this.loadUrl();
    },

    // Attempt to load the current URL fragment. If a route succeeds with a
    // match, returns `true`. If no defined routes matches the fragment,
    // returns `false`.
    loadUrl: function(fragment) {
      fragment = this.fragment = this.getFragment(fragment);
      return _.any(this.handlers, function(handler) {
        if (handler.route.test(fragment)) {
          handler.callback(fragment);
          return true;
        }
      });
    },

    // Save a fragment into the hash history, or replace the URL state if the
    // 'replace' option is passed. You are responsible for properly URL-encoding
    // the fragment in advance.
    //
    // The options object can contain `trigger: true` if you wish to have the
    // route callback be fired (not usually desirable), or `replace: true`, if
    // you wish to modify the current URL without adding an entry to the history.
    navigate: function(fragment, options) {
      if (!History.started) return false;
      if (!options || options === true) options = {trigger: !!options};

      var url = this.root + (fragment = this.getFragment(fragment || ''));

      // Strip the hash for matching.
      fragment = fragment.replace(pathStripper, '');

      if (this.fragment === fragment) return;
      this.fragment = fragment;

      // Don't include a trailing slash on the root.
      if (fragment === '' && url !== '/') url = url.slice(0, -1);

      // If pushState is available, we use it to set the fragment as a real URL.
      if (this._hasPushState) {
        this.history[options.replace ? 'replaceState' : 'pushState']({}, document.title, url);

      // If hash changes haven't been explicitly disabled, update the hash
      // fragment to store history.
      } else if (this._wantsHashChange) {
        this._updateHash(this.location, fragment, options.replace);
        if (this.iframe && (fragment !== this.getFragment(this.getHash(this.iframe)))) {
          // Opening and closing the iframe tricks IE7 and earlier to push a
          // history entry on hash-tag change.  When replace is true, we don't
          // want this.
          if(!options.replace) this.iframe.document.open().close();
          this._updateHash(this.iframe.location, fragment, options.replace);
        }

      // If you've told us that you explicitly don't want fallback hashchange-
      // based history, then `navigate` becomes a page refresh.
      } else {
        return this.location.assign(url);
      }
      if (options.trigger) return this.loadUrl(fragment);
    },

    // Update the hash location, either replacing the current entry, or adding
    // a new one to the browser history.
    _updateHash: function(location, fragment, replace) {
      if (replace) {
        var href = location.href.replace(/(javascript:|#).*$/, '');
        location.replace(href + '#' + fragment);
      } else {
        // Some browsers require that `hash` contains a leading #.
        location.hash = '#' + fragment;
      }
    }

  });

  // Create the default Backbone.history.
  Backbone.history = new History;

  // Helpers
  // -------

  // Helper function to correctly set up the prototype chain, for subclasses.
  // Similar to `goog.inherits`, but uses a hash of prototype properties and
  // class properties to be extended.
  var extend = function(protoProps, staticProps) {
    var parent = this;
    var child;

    // The constructor function for the new subclass is either defined by you
    // (the "constructor" property in your `extend` definition), or defaulted
    // by us to simply call the parent's constructor.
    if (protoProps && _.has(protoProps, 'constructor')) {
      child = protoProps.constructor;
    } else {
      child = function(){ return parent.apply(this, arguments); };
    }

    // Add static properties to the constructor function, if supplied.
    _.extend(child, parent, staticProps);

    // Set the prototype chain to inherit from `parent`, without calling
    // `parent`'s constructor function.
    var Surrogate = function(){ this.constructor = child; };
    Surrogate.prototype = parent.prototype;
    child.prototype = new Surrogate;

    // Add prototype properties (instance properties) to the subclass,
    // if supplied.
    if (protoProps) _.extend(child.prototype, protoProps);

    // Set a convenience property in case the parent's prototype is needed
    // later.
    child.__super__ = parent.prototype;

    return child;
  };

  // Set up inheritance for the model, collection, router, view and history.
  Model.extend = Collection.extend = Router.extend = View.extend = History.extend = extend;

  // Throw an error when a URL is needed, and none is supplied.
  var urlError = function() {
    throw new Error('A "url" property or function must be specified');
  };

  // Wrap an optional error callback with a fallback error event.
  var wrapError = function(model, options) {
    var error = options.error;
    options.error = function(resp) {
      if (error) error(model, resp, options);
      model.trigger('error', model, resp, options);
    };
  };

  return Backbone;

}));

},{"underscore":27}],27:[function(require,module,exports){
//     Underscore.js 1.6.0
//     http://underscorejs.org
//     (c) 2009-2014 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
//     Underscore may be freely distributed under the MIT license.

(function() {

  // Baseline setup
  // --------------

  // Establish the root object, `window` in the browser, or `exports` on the server.
  var root = this;

  // Save the previous value of the `_` variable.
  var previousUnderscore = root._;

  // Establish the object that gets returned to break out of a loop iteration.
  var breaker = {};

  // Save bytes in the minified (but not gzipped) version:
  var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;

  // Create quick reference variables for speed access to core prototypes.
  var
    push             = ArrayProto.push,
    slice            = ArrayProto.slice,
    concat           = ArrayProto.concat,
    toString         = ObjProto.toString,
    hasOwnProperty   = ObjProto.hasOwnProperty;

  // All **ECMAScript 5** native function implementations that we hope to use
  // are declared here.
  var
    nativeForEach      = ArrayProto.forEach,
    nativeMap          = ArrayProto.map,
    nativeReduce       = ArrayProto.reduce,
    nativeReduceRight  = ArrayProto.reduceRight,
    nativeFilter       = ArrayProto.filter,
    nativeEvery        = ArrayProto.every,
    nativeSome         = ArrayProto.some,
    nativeIndexOf      = ArrayProto.indexOf,
    nativeLastIndexOf  = ArrayProto.lastIndexOf,
    nativeIsArray      = Array.isArray,
    nativeKeys         = Object.keys,
    nativeBind         = FuncProto.bind;

  // Create a safe reference to the Underscore object for use below.
  var _ = function(obj) {
    if (obj instanceof _) return obj;
    if (!(this instanceof _)) return new _(obj);
    this._wrapped = obj;
  };

  // Export the Underscore object for **Node.js**, with
  // backwards-compatibility for the old `require()` API. If we're in
  // the browser, add `_` as a global object via a string identifier,
  // for Closure Compiler "advanced" mode.
  if (typeof exports !== 'undefined') {
    if (typeof module !== 'undefined' && module.exports) {
      exports = module.exports = _;
    }
    exports._ = _;
  } else {
    root._ = _;
  }

  // Current version.
  _.VERSION = '1.6.0';

  // Collection Functions
  // --------------------

  // The cornerstone, an `each` implementation, aka `forEach`.
  // Handles objects with the built-in `forEach`, arrays, and raw objects.
  // Delegates to **ECMAScript 5**'s native `forEach` if available.
  var each = _.each = _.forEach = function(obj, iterator, context) {
    if (obj == null) return obj;
    if (nativeForEach && obj.forEach === nativeForEach) {
      obj.forEach(iterator, context);
    } else if (obj.length === +obj.length) {
      for (var i = 0, length = obj.length; i < length; i++) {
        if (iterator.call(context, obj[i], i, obj) === breaker) return;
      }
    } else {
      var keys = _.keys(obj);
      for (var i = 0, length = keys.length; i < length; i++) {
        if (iterator.call(context, obj[keys[i]], keys[i], obj) === breaker) return;
      }
    }
    return obj;
  };

  // Return the results of applying the iterator to each element.
  // Delegates to **ECMAScript 5**'s native `map` if available.
  _.map = _.collect = function(obj, iterator, context) {
    var results = [];
    if (obj == null) return results;
    if (nativeMap && obj.map === nativeMap) return obj.map(iterator, context);
    each(obj, function(value, index, list) {
      results.push(iterator.call(context, value, index, list));
    });
    return results;
  };

  var reduceError = 'Reduce of empty array with no initial value';

  // **Reduce** builds up a single result from a list of values, aka `inject`,
  // or `foldl`. Delegates to **ECMAScript 5**'s native `reduce` if available.
  _.reduce = _.foldl = _.inject = function(obj, iterator, memo, context) {
    var initial = arguments.length > 2;
    if (obj == null) obj = [];
    if (nativeReduce && obj.reduce === nativeReduce) {
      if (context) iterator = _.bind(iterator, context);
      return initial ? obj.reduce(iterator, memo) : obj.reduce(iterator);
    }
    each(obj, function(value, index, list) {
      if (!initial) {
        memo = value;
        initial = true;
      } else {
        memo = iterator.call(context, memo, value, index, list);
      }
    });
    if (!initial) throw new TypeError(reduceError);
    return memo;
  };

  // The right-associative version of reduce, also known as `foldr`.
  // Delegates to **ECMAScript 5**'s native `reduceRight` if available.
  _.reduceRight = _.foldr = function(obj, iterator, memo, context) {
    var initial = arguments.length > 2;
    if (obj == null) obj = [];
    if (nativeReduceRight && obj.reduceRight === nativeReduceRight) {
      if (context) iterator = _.bind(iterator, context);
      return initial ? obj.reduceRight(iterator, memo) : obj.reduceRight(iterator);
    }
    var length = obj.length;
    if (length !== +length) {
      var keys = _.keys(obj);
      length = keys.length;
    }
    each(obj, function(value, index, list) {
      index = keys ? keys[--length] : --length;
      if (!initial) {
        memo = obj[index];
        initial = true;
      } else {
        memo = iterator.call(context, memo, obj[index], index, list);
      }
    });
    if (!initial) throw new TypeError(reduceError);
    return memo;
  };

  // Return the first value which passes a truth test. Aliased as `detect`.
  _.find = _.detect = function(obj, predicate, context) {
    var result;
    any(obj, function(value, index, list) {
      if (predicate.call(context, value, index, list)) {
        result = value;
        return true;
      }
    });
    return result;
  };

  // Return all the elements that pass a truth test.
  // Delegates to **ECMAScript 5**'s native `filter` if available.
  // Aliased as `select`.
  _.filter = _.select = function(obj, predicate, context) {
    var results = [];
    if (obj == null) return results;
    if (nativeFilter && obj.filter === nativeFilter) return obj.filter(predicate, context);
    each(obj, function(value, index, list) {
      if (predicate.call(context, value, index, list)) results.push(value);
    });
    return results;
  };

  // Return all the elements for which a truth test fails.
  _.reject = function(obj, predicate, context) {
    return _.filter(obj, function(value, index, list) {
      return !predicate.call(context, value, index, list);
    }, context);
  };

  // Determine whether all of the elements match a truth test.
  // Delegates to **ECMAScript 5**'s native `every` if available.
  // Aliased as `all`.
  _.every = _.all = function(obj, predicate, context) {
    predicate || (predicate = _.identity);
    var result = true;
    if (obj == null) return result;
    if (nativeEvery && obj.every === nativeEvery) return obj.every(predicate, context);
    each(obj, function(value, index, list) {
      if (!(result = result && predicate.call(context, value, index, list))) return breaker;
    });
    return !!result;
  };

  // Determine if at least one element in the object matches a truth test.
  // Delegates to **ECMAScript 5**'s native `some` if available.
  // Aliased as `any`.
  var any = _.some = _.any = function(obj, predicate, context) {
    predicate || (predicate = _.identity);
    var result = false;
    if (obj == null) return result;
    if (nativeSome && obj.some === nativeSome) return obj.some(predicate, context);
    each(obj, function(value, index, list) {
      if (result || (result = predicate.call(context, value, index, list))) return breaker;
    });
    return !!result;
  };

  // Determine if the array or object contains a given value (using `===`).
  // Aliased as `include`.
  _.contains = _.include = function(obj, target) {
    if (obj == null) return false;
    if (nativeIndexOf && obj.indexOf === nativeIndexOf) return obj.indexOf(target) != -1;
    return any(obj, function(value) {
      return value === target;
    });
  };

  // Invoke a method (with arguments) on every item in a collection.
  _.invoke = function(obj, method) {
    var args = slice.call(arguments, 2);
    var isFunc = _.isFunction(method);
    return _.map(obj, function(value) {
      return (isFunc ? method : value[method]).apply(value, args);
    });
  };

  // Convenience version of a common use case of `map`: fetching a property.
  _.pluck = function(obj, key) {
    return _.map(obj, _.property(key));
  };

  // Convenience version of a common use case of `filter`: selecting only objects
  // containing specific `key:value` pairs.
  _.where = function(obj, attrs) {
    return _.filter(obj, _.matches(attrs));
  };

  // Convenience version of a common use case of `find`: getting the first object
  // containing specific `key:value` pairs.
  _.findWhere = function(obj, attrs) {
    return _.find(obj, _.matches(attrs));
  };

  // Return the maximum element or (element-based computation).
  // Can't optimize arrays of integers longer than 65,535 elements.
  // See [WebKit Bug 80797](https://bugs.webkit.org/show_bug.cgi?id=80797)
  _.max = function(obj, iterator, context) {
    if (!iterator && _.isArray(obj) && obj[0] === +obj[0] && obj.length < 65535) {
      return Math.max.apply(Math, obj);
    }
    var result = -Infinity, lastComputed = -Infinity;
    each(obj, function(value, index, list) {
      var computed = iterator ? iterator.call(context, value, index, list) : value;
      if (computed > lastComputed) {
        result = value;
        lastComputed = computed;
      }
    });
    return result;
  };

  // Return the minimum element (or element-based computation).
  _.min = function(obj, iterator, context) {
    if (!iterator && _.isArray(obj) && obj[0] === +obj[0] && obj.length < 65535) {
      return Math.min.apply(Math, obj);
    }
    var result = Infinity, lastComputed = Infinity;
    each(obj, function(value, index, list) {
      var computed = iterator ? iterator.call(context, value, index, list) : value;
      if (computed < lastComputed) {
        result = value;
        lastComputed = computed;
      }
    });
    return result;
  };

  // Shuffle an array, using the modern version of the
  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).
  _.shuffle = function(obj) {
    var rand;
    var index = 0;
    var shuffled = [];
    each(obj, function(value) {
      rand = _.random(index++);
      shuffled[index - 1] = shuffled[rand];
      shuffled[rand] = value;
    });
    return shuffled;
  };

  // Sample **n** random values from a collection.
  // If **n** is not specified, returns a single random element.
  // The internal `guard` argument allows it to work with `map`.
  _.sample = function(obj, n, guard) {
    if (n == null || guard) {
      if (obj.length !== +obj.length) obj = _.values(obj);
      return obj[_.random(obj.length - 1)];
    }
    return _.shuffle(obj).slice(0, Math.max(0, n));
  };

  // An internal function to generate lookup iterators.
  var lookupIterator = function(value) {
    if (value == null) return _.identity;
    if (_.isFunction(value)) return value;
    return _.property(value);
  };

  // Sort the object's values by a criterion produced by an iterator.
  _.sortBy = function(obj, iterator, context) {
    iterator = lookupIterator(iterator);
    return _.pluck(_.map(obj, function(value, index, list) {
      return {
        value: value,
        index: index,
        criteria: iterator.call(context, value, index, list)
      };
    }).sort(function(left, right) {
      var a = left.criteria;
      var b = right.criteria;
      if (a !== b) {
        if (a > b || a === void 0) return 1;
        if (a < b || b === void 0) return -1;
      }
      return left.index - right.index;
    }), 'value');
  };

  // An internal function used for aggregate "group by" operations.
  var group = function(behavior) {
    return function(obj, iterator, context) {
      var result = {};
      iterator = lookupIterator(iterator);
      each(obj, function(value, index) {
        var key = iterator.call(context, value, index, obj);
        behavior(result, key, value);
      });
      return result;
    };
  };

  // Groups the object's values by a criterion. Pass either a string attribute
  // to group by, or a function that returns the criterion.
  _.groupBy = group(function(result, key, value) {
    _.has(result, key) ? result[key].push(value) : result[key] = [value];
  });

  // Indexes the object's values by a criterion, similar to `groupBy`, but for
  // when you know that your index values will be unique.
  _.indexBy = group(function(result, key, value) {
    result[key] = value;
  });

  // Counts instances of an object that group by a certain criterion. Pass
  // either a string attribute to count by, or a function that returns the
  // criterion.
  _.countBy = group(function(result, key) {
    _.has(result, key) ? result[key]++ : result[key] = 1;
  });

  // Use a comparator function to figure out the smallest index at which
  // an object should be inserted so as to maintain order. Uses binary search.
  _.sortedIndex = function(array, obj, iterator, context) {
    iterator = lookupIterator(iterator);
    var value = iterator.call(context, obj);
    var low = 0, high = array.length;
    while (low < high) {
      var mid = (low + high) >>> 1;
      iterator.call(context, array[mid]) < value ? low = mid + 1 : high = mid;
    }
    return low;
  };

  // Safely create a real, live array from anything iterable.
  _.toArray = function(obj) {
    if (!obj) return [];
    if (_.isArray(obj)) return slice.call(obj);
    if (obj.length === +obj.length) return _.map(obj, _.identity);
    return _.values(obj);
  };

  // Return the number of elements in an object.
  _.size = function(obj) {
    if (obj == null) return 0;
    return (obj.length === +obj.length) ? obj.length : _.keys(obj).length;
  };

  // Array Functions
  // ---------------

  // Get the first element of an array. Passing **n** will return the first N
  // values in the array. Aliased as `head` and `take`. The **guard** check
  // allows it to work with `_.map`.
  _.first = _.head = _.take = function(array, n, guard) {
    if (array == null) return void 0;
    if ((n == null) || guard) return array[0];
    if (n < 0) return [];
    return slice.call(array, 0, n);
  };

  // Returns everything but the last entry of the array. Especially useful on
  // the arguments object. Passing **n** will return all the values in
  // the array, excluding the last N. The **guard** check allows it to work with
  // `_.map`.
  _.initial = function(array, n, guard) {
    return slice.call(array, 0, array.length - ((n == null) || guard ? 1 : n));
  };

  // Get the last element of an array. Passing **n** will return the last N
  // values in the array. The **guard** check allows it to work with `_.map`.
  _.last = function(array, n, guard) {
    if (array == null) return void 0;
    if ((n == null) || guard) return array[array.length - 1];
    return slice.call(array, Math.max(array.length - n, 0));
  };

  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.
  // Especially useful on the arguments object. Passing an **n** will return
  // the rest N values in the array. The **guard**
  // check allows it to work with `_.map`.
  _.rest = _.tail = _.drop = function(array, n, guard) {
    return slice.call(array, (n == null) || guard ? 1 : n);
  };

  // Trim out all falsy values from an array.
  _.compact = function(array) {
    return _.filter(array, _.identity);
  };

  // Internal implementation of a recursive `flatten` function.
  var flatten = function(input, shallow, output) {
    if (shallow && _.every(input, _.isArray)) {
      return concat.apply(output, input);
    }
    each(input, function(value) {
      if (_.isArray(value) || _.isArguments(value)) {
        shallow ? push.apply(output, value) : flatten(value, shallow, output);
      } else {
        output.push(value);
      }
    });
    return output;
  };

  // Flatten out an array, either recursively (by default), or just one level.
  _.flatten = function(array, shallow) {
    return flatten(array, shallow, []);
  };

  // Return a version of the array that does not contain the specified value(s).
  _.without = function(array) {
    return _.difference(array, slice.call(arguments, 1));
  };

  // Split an array into two arrays: one whose elements all satisfy the given
  // predicate, and one whose elements all do not satisfy the predicate.
  _.partition = function(array, predicate) {
    var pass = [], fail = [];
    each(array, function(elem) {
      (predicate(elem) ? pass : fail).push(elem);
    });
    return [pass, fail];
  };

  // Produce a duplicate-free version of the array. If the array has already
  // been sorted, you have the option of using a faster algorithm.
  // Aliased as `unique`.
  _.uniq = _.unique = function(array, isSorted, iterator, context) {
    if (_.isFunction(isSorted)) {
      context = iterator;
      iterator = isSorted;
      isSorted = false;
    }
    var initial = iterator ? _.map(array, iterator, context) : array;
    var results = [];
    var seen = [];
    each(initial, function(value, index) {
      if (isSorted ? (!index || seen[seen.length - 1] !== value) : !_.contains(seen, value)) {
        seen.push(value);
        results.push(array[index]);
      }
    });
    return results;
  };

  // Produce an array that contains the union: each distinct element from all of
  // the passed-in arrays.
  _.union = function() {
    return _.uniq(_.flatten(arguments, true));
  };

  // Produce an array that contains every item shared between all the
  // passed-in arrays.
  _.intersection = function(array) {
    var rest = slice.call(arguments, 1);
    return _.filter(_.uniq(array), function(item) {
      return _.every(rest, function(other) {
        return _.contains(other, item);
      });
    });
  };

  // Take the difference between one array and a number of other arrays.
  // Only the elements present in just the first array will remain.
  _.difference = function(array) {
    var rest = concat.apply(ArrayProto, slice.call(arguments, 1));
    return _.filter(array, function(value){ return !_.contains(rest, value); });
  };

  // Zip together multiple lists into a single array -- elements that share
  // an index go together.
  _.zip = function() {
    var length = _.max(_.pluck(arguments, 'length').concat(0));
    var results = new Array(length);
    for (var i = 0; i < length; i++) {
      results[i] = _.pluck(arguments, '' + i);
    }
    return results;
  };

  // Converts lists into objects. Pass either a single array of `[key, value]`
  // pairs, or two parallel arrays of the same length -- one of keys, and one of
  // the corresponding values.
  _.object = function(list, values) {
    if (list == null) return {};
    var result = {};
    for (var i = 0, length = list.length; i < length; i++) {
      if (values) {
        result[list[i]] = values[i];
      } else {
        result[list[i][0]] = list[i][1];
      }
    }
    return result;
  };

  // If the browser doesn't supply us with indexOf (I'm looking at you, **MSIE**),
  // we need this function. Return the position of the first occurrence of an
  // item in an array, or -1 if the item is not included in the array.
  // Delegates to **ECMAScript 5**'s native `indexOf` if available.
  // If the array is large and already in sort order, pass `true`
  // for **isSorted** to use binary search.
  _.indexOf = function(array, item, isSorted) {
    if (array == null) return -1;
    var i = 0, length = array.length;
    if (isSorted) {
      if (typeof isSorted == 'number') {
        i = (isSorted < 0 ? Math.max(0, length + isSorted) : isSorted);
      } else {
        i = _.sortedIndex(array, item);
        return array[i] === item ? i : -1;
      }
    }
    if (nativeIndexOf && array.indexOf === nativeIndexOf) return array.indexOf(item, isSorted);
    for (; i < length; i++) if (array[i] === item) return i;
    return -1;
  };

  // Delegates to **ECMAScript 5**'s native `lastIndexOf` if available.
  _.lastIndexOf = function(array, item, from) {
    if (array == null) return -1;
    var hasIndex = from != null;
    if (nativeLastIndexOf && array.lastIndexOf === nativeLastIndexOf) {
      return hasIndex ? array.lastIndexOf(item, from) : array.lastIndexOf(item);
    }
    var i = (hasIndex ? from : array.length);
    while (i--) if (array[i] === item) return i;
    return -1;
  };

  // Generate an integer Array containing an arithmetic progression. A port of
  // the native Python `range()` function. See
  // [the Python documentation](http://docs.python.org/library/functions.html#range).
  _.range = function(start, stop, step) {
    if (arguments.length <= 1) {
      stop = start || 0;
      start = 0;
    }
    step = arguments[2] || 1;

    var length = Math.max(Math.ceil((stop - start) / step), 0);
    var idx = 0;
    var range = new Array(length);

    while(idx < length) {
      range[idx++] = start;
      start += step;
    }

    return range;
  };

  // Function (ahem) Functions
  // ------------------

  // Reusable constructor function for prototype setting.
  var ctor = function(){};

  // Create a function bound to a given object (assigning `this`, and arguments,
  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if
  // available.
  _.bind = function(func, context) {
    var args, bound;
    if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));
    if (!_.isFunction(func)) throw new TypeError;
    args = slice.call(arguments, 2);
    return bound = function() {
      if (!(this instanceof bound)) return func.apply(context, args.concat(slice.call(arguments)));
      ctor.prototype = func.prototype;
      var self = new ctor;
      ctor.prototype = null;
      var result = func.apply(self, args.concat(slice.call(arguments)));
      if (Object(result) === result) return result;
      return self;
    };
  };

  // Partially apply a function by creating a version that has had some of its
  // arguments pre-filled, without changing its dynamic `this` context. _ acts
  // as a placeholder, allowing any combination of arguments to be pre-filled.
  _.partial = function(func) {
    var boundArgs = slice.call(arguments, 1);
    return function() {
      var position = 0;
      var args = boundArgs.slice();
      for (var i = 0, length = args.length; i < length; i++) {
        if (args[i] === _) args[i] = arguments[position++];
      }
      while (position < arguments.length) args.push(arguments[position++]);
      return func.apply(this, args);
    };
  };

  // Bind a number of an object's methods to that object. Remaining arguments
  // are the method names to be bound. Useful for ensuring that all callbacks
  // defined on an object belong to it.
  _.bindAll = function(obj) {
    var funcs = slice.call(arguments, 1);
    if (funcs.length === 0) throw new Error('bindAll must be passed function names');
    each(funcs, function(f) { obj[f] = _.bind(obj[f], obj); });
    return obj;
  };

  // Memoize an expensive function by storing its results.
  _.memoize = function(func, hasher) {
    var memo = {};
    hasher || (hasher = _.identity);
    return function() {
      var key = hasher.apply(this, arguments);
      return _.has(memo, key) ? memo[key] : (memo[key] = func.apply(this, arguments));
    };
  };

  // Delays a function for the given number of milliseconds, and then calls
  // it with the arguments supplied.
  _.delay = function(func, wait) {
    var args = slice.call(arguments, 2);
    return setTimeout(function(){ return func.apply(null, args); }, wait);
  };

  // Defers a function, scheduling it to run after the current call stack has
  // cleared.
  _.defer = function(func) {
    return _.delay.apply(_, [func, 1].concat(slice.call(arguments, 1)));
  };

  // Returns a function, that, when invoked, will only be triggered at most once
  // during a given window of time. Normally, the throttled function will run
  // as much as it can, without ever going more than once per `wait` duration;
  // but if you'd like to disable the execution on the leading edge, pass
  // `{leading: false}`. To disable execution on the trailing edge, ditto.
  _.throttle = function(func, wait, options) {
    var context, args, result;
    var timeout = null;
    var previous = 0;
    options || (options = {});
    var later = function() {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      context = args = null;
    };
    return function() {
      var now = _.now();
      if (!previous && options.leading === false) previous = now;
      var remaining = wait - (now - previous);
      context = this;
      args = arguments;
      if (remaining <= 0) {
        clearTimeout(timeout);
        timeout = null;
        previous = now;
        result = func.apply(context, args);
        context = args = null;
      } else if (!timeout && options.trailing !== false) {
        timeout = setTimeout(later, remaining);
      }
      return result;
    };
  };

  // Returns a function, that, as long as it continues to be invoked, will not
  // be triggered. The function will be called after it stops being called for
  // N milliseconds. If `immediate` is passed, trigger the function on the
  // leading edge, instead of the trailing.
  _.debounce = function(func, wait, immediate) {
    var timeout, args, context, timestamp, result;

    var later = function() {
      var last = _.now() - timestamp;
      if (last < wait) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          context = args = null;
        }
      }
    };

    return function() {
      context = this;
      args = arguments;
      timestamp = _.now();
      var callNow = immediate && !timeout;
      if (!timeout) {
        timeout = setTimeout(later, wait);
      }
      if (callNow) {
        result = func.apply(context, args);
        context = args = null;
      }

      return result;
    };
  };

  // Returns a function that will be executed at most one time, no matter how
  // often you call it. Useful for lazy initialization.
  _.once = function(func) {
    var ran = false, memo;
    return function() {
      if (ran) return memo;
      ran = true;
      memo = func.apply(this, arguments);
      func = null;
      return memo;
    };
  };

  // Returns the first function passed as an argument to the second,
  // allowing you to adjust arguments, run code before and after, and
  // conditionally execute the original function.
  _.wrap = function(func, wrapper) {
    return _.partial(wrapper, func);
  };

  // Returns a function that is the composition of a list of functions, each
  // consuming the return value of the function that follows.
  _.compose = function() {
    var funcs = arguments;
    return function() {
      var args = arguments;
      for (var i = funcs.length - 1; i >= 0; i--) {
        args = [funcs[i].apply(this, args)];
      }
      return args[0];
    };
  };

  // Returns a function that will only be executed after being called N times.
  _.after = function(times, func) {
    return function() {
      if (--times < 1) {
        return func.apply(this, arguments);
      }
    };
  };

  // Object Functions
  // ----------------

  // Retrieve the names of an object's properties.
  // Delegates to **ECMAScript 5**'s native `Object.keys`
  _.keys = function(obj) {
    if (!_.isObject(obj)) return [];
    if (nativeKeys) return nativeKeys(obj);
    var keys = [];
    for (var key in obj) if (_.has(obj, key)) keys.push(key);
    return keys;
  };

  // Retrieve the values of an object's properties.
  _.values = function(obj) {
    var keys = _.keys(obj);
    var length = keys.length;
    var values = new Array(length);
    for (var i = 0; i < length; i++) {
      values[i] = obj[keys[i]];
    }
    return values;
  };

  // Convert an object into a list of `[key, value]` pairs.
  _.pairs = function(obj) {
    var keys = _.keys(obj);
    var length = keys.length;
    var pairs = new Array(length);
    for (var i = 0; i < length; i++) {
      pairs[i] = [keys[i], obj[keys[i]]];
    }
    return pairs;
  };

  // Invert the keys and values of an object. The values must be serializable.
  _.invert = function(obj) {
    var result = {};
    var keys = _.keys(obj);
    for (var i = 0, length = keys.length; i < length; i++) {
      result[obj[keys[i]]] = keys[i];
    }
    return result;
  };

  // Return a sorted list of the function names available on the object.
  // Aliased as `methods`
  _.functions = _.methods = function(obj) {
    var names = [];
    for (var key in obj) {
      if (_.isFunction(obj[key])) names.push(key);
    }
    return names.sort();
  };

  // Extend a given object with all the properties in passed-in object(s).
  _.extend = function(obj) {
    each(slice.call(arguments, 1), function(source) {
      if (source) {
        for (var prop in source) {
          obj[prop] = source[prop];
        }
      }
    });
    return obj;
  };

  // Return a copy of the object only containing the whitelisted properties.
  _.pick = function(obj) {
    var copy = {};
    var keys = concat.apply(ArrayProto, slice.call(arguments, 1));
    each(keys, function(key) {
      if (key in obj) copy[key] = obj[key];
    });
    return copy;
  };

   // Return a copy of the object without the blacklisted properties.
  _.omit = function(obj) {
    var copy = {};
    var keys = concat.apply(ArrayProto, slice.call(arguments, 1));
    for (var key in obj) {
      if (!_.contains(keys, key)) copy[key] = obj[key];
    }
    return copy;
  };

  // Fill in a given object with default properties.
  _.defaults = function(obj) {
    each(slice.call(arguments, 1), function(source) {
      if (source) {
        for (var prop in source) {
          if (obj[prop] === void 0) obj[prop] = source[prop];
        }
      }
    });
    return obj;
  };

  // Create a (shallow-cloned) duplicate of an object.
  _.clone = function(obj) {
    if (!_.isObject(obj)) return obj;
    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
  };

  // Invokes interceptor with the obj, and then returns obj.
  // The primary purpose of this method is to "tap into" a method chain, in
  // order to perform operations on intermediate results within the chain.
  _.tap = function(obj, interceptor) {
    interceptor(obj);
    return obj;
  };

  // Internal recursive comparison function for `isEqual`.
  var eq = function(a, b, aStack, bStack) {
    // Identical objects are equal. `0 === -0`, but they aren't identical.
    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).
    if (a === b) return a !== 0 || 1 / a == 1 / b;
    // A strict comparison is necessary because `null == undefined`.
    if (a == null || b == null) return a === b;
    // Unwrap any wrapped objects.
    if (a instanceof _) a = a._wrapped;
    if (b instanceof _) b = b._wrapped;
    // Compare `[[Class]]` names.
    var className = toString.call(a);
    if (className != toString.call(b)) return false;
    switch (className) {
      // Strings, numbers, dates, and booleans are compared by value.
      case '[object String]':
        // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
        // equivalent to `new String("5")`.
        return a == String(b);
      case '[object Number]':
        // `NaN`s are equivalent, but non-reflexive. An `egal` comparison is performed for
        // other numeric values.
        return a != +a ? b != +b : (a == 0 ? 1 / a == 1 / b : a == +b);
      case '[object Date]':
      case '[object Boolean]':
        // Coerce dates and booleans to numeric primitive values. Dates are compared by their
        // millisecond representations. Note that invalid dates with millisecond representations
        // of `NaN` are not equivalent.
        return +a == +b;
      // RegExps are compared by their source patterns and flags.
      case '[object RegExp]':
        return a.source == b.source &&
               a.global == b.global &&
               a.multiline == b.multiline &&
               a.ignoreCase == b.ignoreCase;
    }
    if (typeof a != 'object' || typeof b != 'object') return false;
    // Assume equality for cyclic structures. The algorithm for detecting cyclic
    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.
    var length = aStack.length;
    while (length--) {
      // Linear search. Performance is inversely proportional to the number of
      // unique nested structures.
      if (aStack[length] == a) return bStack[length] == b;
    }
    // Objects with different constructors are not equivalent, but `Object`s
    // from different frames are.
    var aCtor = a.constructor, bCtor = b.constructor;
    if (aCtor !== bCtor && !(_.isFunction(aCtor) && (aCtor instanceof aCtor) &&
                             _.isFunction(bCtor) && (bCtor instanceof bCtor))
                        && ('constructor' in a && 'constructor' in b)) {
      return false;
    }
    // Add the first object to the stack of traversed objects.
    aStack.push(a);
    bStack.push(b);
    var size = 0, result = true;
    // Recursively compare objects and arrays.
    if (className == '[object Array]') {
      // Compare array lengths to determine if a deep comparison is necessary.
      size = a.length;
      result = size == b.length;
      if (result) {
        // Deep compare the contents, ignoring non-numeric properties.
        while (size--) {
          if (!(result = eq(a[size], b[size], aStack, bStack))) break;
        }
      }
    } else {
      // Deep compare objects.
      for (var key in a) {
        if (_.has(a, key)) {
          // Count the expected number of properties.
          size++;
          // Deep compare each member.
          if (!(result = _.has(b, key) && eq(a[key], b[key], aStack, bStack))) break;
        }
      }
      // Ensure that both objects contain the same number of properties.
      if (result) {
        for (key in b) {
          if (_.has(b, key) && !(size--)) break;
        }
        result = !size;
      }
    }
    // Remove the first object from the stack of traversed objects.
    aStack.pop();
    bStack.pop();
    return result;
  };

  // Perform a deep comparison to check if two objects are equal.
  _.isEqual = function(a, b) {
    return eq(a, b, [], []);
  };

  // Is a given array, string, or object empty?
  // An "empty" object has no enumerable own-properties.
  _.isEmpty = function(obj) {
    if (obj == null) return true;
    if (_.isArray(obj) || _.isString(obj)) return obj.length === 0;
    for (var key in obj) if (_.has(obj, key)) return false;
    return true;
  };

  // Is a given value a DOM element?
  _.isElement = function(obj) {
    return !!(obj && obj.nodeType === 1);
  };

  // Is a given value an array?
  // Delegates to ECMA5's native Array.isArray
  _.isArray = nativeIsArray || function(obj) {
    return toString.call(obj) == '[object Array]';
  };

  // Is a given variable an object?
  _.isObject = function(obj) {
    return obj === Object(obj);
  };

  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp.
  each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp'], function(name) {
    _['is' + name] = function(obj) {
      return toString.call(obj) == '[object ' + name + ']';
    };
  });

  // Define a fallback version of the method in browsers (ahem, IE), where
  // there isn't any inspectable "Arguments" type.
  if (!_.isArguments(arguments)) {
    _.isArguments = function(obj) {
      return !!(obj && _.has(obj, 'callee'));
    };
  }

  // Optimize `isFunction` if appropriate.
  if (typeof (/./) !== 'function') {
    _.isFunction = function(obj) {
      return typeof obj === 'function';
    };
  }

  // Is a given object a finite number?
  _.isFinite = function(obj) {
    return isFinite(obj) && !isNaN(parseFloat(obj));
  };

  // Is the given value `NaN`? (NaN is the only number which does not equal itself).
  _.isNaN = function(obj) {
    return _.isNumber(obj) && obj != +obj;
  };

  // Is a given value a boolean?
  _.isBoolean = function(obj) {
    return obj === true || obj === false || toString.call(obj) == '[object Boolean]';
  };

  // Is a given value equal to null?
  _.isNull = function(obj) {
    return obj === null;
  };

  // Is a given variable undefined?
  _.isUndefined = function(obj) {
    return obj === void 0;
  };

  // Shortcut function for checking if an object has a given property directly
  // on itself (in other words, not on a prototype).
  _.has = function(obj, key) {
    return hasOwnProperty.call(obj, key);
  };

  // Utility Functions
  // -----------------

  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its
  // previous owner. Returns a reference to the Underscore object.
  _.noConflict = function() {
    root._ = previousUnderscore;
    return this;
  };

  // Keep the identity function around for default iterators.
  _.identity = function(value) {
    return value;
  };

  _.constant = function(value) {
    return function () {
      return value;
    };
  };

  _.property = function(key) {
    return function(obj) {
      return obj[key];
    };
  };

  // Returns a predicate for checking whether an object has a given set of `key:value` pairs.
  _.matches = function(attrs) {
    return function(obj) {
      if (obj === attrs) return true; //avoid comparing an object to itself.
      for (var key in attrs) {
        if (attrs[key] !== obj[key])
          return false;
      }
      return true;
    }
  };

  // Run a function **n** times.
  _.times = function(n, iterator, context) {
    var accum = Array(Math.max(0, n));
    for (var i = 0; i < n; i++) accum[i] = iterator.call(context, i);
    return accum;
  };

  // Return a random integer between min and max (inclusive).
  _.random = function(min, max) {
    if (max == null) {
      max = min;
      min = 0;
    }
    return min + Math.floor(Math.random() * (max - min + 1));
  };

  // A (possibly faster) way to get the current timestamp as an integer.
  _.now = Date.now || function() { return new Date().getTime(); };

  // List of HTML entities for escaping.
  var entityMap = {
    escape: {
      '&': '&amp;',
      '<': '&lt;',
      '>': '&gt;',
      '"': '&quot;',
      "'": '&#x27;'
    }
  };
  entityMap.unescape = _.invert(entityMap.escape);

  // Regexes containing the keys and values listed immediately above.
  var entityRegexes = {
    escape:   new RegExp('[' + _.keys(entityMap.escape).join('') + ']', 'g'),
    unescape: new RegExp('(' + _.keys(entityMap.unescape).join('|') + ')', 'g')
  };

  // Functions for escaping and unescaping strings to/from HTML interpolation.
  _.each(['escape', 'unescape'], function(method) {
    _[method] = function(string) {
      if (string == null) return '';
      return ('' + string).replace(entityRegexes[method], function(match) {
        return entityMap[method][match];
      });
    };
  });

  // If the value of the named `property` is a function then invoke it with the
  // `object` as context; otherwise, return it.
  _.result = function(object, property) {
    if (object == null) return void 0;
    var value = object[property];
    return _.isFunction(value) ? value.call(object) : value;
  };

  // Add your own custom functions to the Underscore object.
  _.mixin = function(obj) {
    each(_.functions(obj), function(name) {
      var func = _[name] = obj[name];
      _.prototype[name] = function() {
        var args = [this._wrapped];
        push.apply(args, arguments);
        return result.call(this, func.apply(_, args));
      };
    });
  };

  // Generate a unique integer id (unique within the entire client session).
  // Useful for temporary DOM ids.
  var idCounter = 0;
  _.uniqueId = function(prefix) {
    var id = ++idCounter + '';
    return prefix ? prefix + id : id;
  };

  // By default, Underscore uses ERB-style template delimiters, change the
  // following template settings to use alternative delimiters.
  _.templateSettings = {
    evaluate    : /<%([\s\S]+?)%>/g,
    interpolate : /<%=([\s\S]+?)%>/g,
    escape      : /<%-([\s\S]+?)%>/g
  };

  // When customizing `templateSettings`, if you don't want to define an
  // interpolation, evaluation or escaping regex, we need one that is
  // guaranteed not to match.
  var noMatch = /(.)^/;

  // Certain characters need to be escaped so that they can be put into a
  // string literal.
  var escapes = {
    "'":      "'",
    '\\':     '\\',
    '\r':     'r',
    '\n':     'n',
    '\t':     't',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  var escaper = /\\|'|\r|\n|\t|\u2028|\u2029/g;

  // JavaScript micro-templating, similar to John Resig's implementation.
  // Underscore templating handles arbitrary delimiters, preserves whitespace,
  // and correctly escapes quotes within interpolated code.
  _.template = function(text, data, settings) {
    var render;
    settings = _.defaults({}, settings, _.templateSettings);

    // Combine delimiters into one regular expression via alternation.
    var matcher = new RegExp([
      (settings.escape || noMatch).source,
      (settings.interpolate || noMatch).source,
      (settings.evaluate || noMatch).source
    ].join('|') + '|$', 'g');

    // Compile the template source, escaping string literals appropriately.
    var index = 0;
    var source = "__p+='";
    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
      source += text.slice(index, offset)
        .replace(escaper, function(match) { return '\\' + escapes[match]; });

      if (escape) {
        source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
      }
      if (interpolate) {
        source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
      }
      if (evaluate) {
        source += "';\n" + evaluate + "\n__p+='";
      }
      index = offset + match.length;
      return match;
    });
    source += "';\n";

    // If a variable is not specified, place data values in local scope.
    if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';

    source = "var __t,__p='',__j=Array.prototype.join," +
      "print=function(){__p+=__j.call(arguments,'');};\n" +
      source + "return __p;\n";

    try {
      render = new Function(settings.variable || 'obj', '_', source);
    } catch (e) {
      e.source = source;
      throw e;
    }

    if (data) return render(data, _);
    var template = function(data) {
      return render.call(this, data, _);
    };

    // Provide the compiled function source as a convenience for precompilation.
    template.source = 'function(' + (settings.variable || 'obj') + '){\n' + source + '}';

    return template;
  };

  // Add a "chain" function, which will delegate to the wrapper.
  _.chain = function(obj) {
    return _(obj).chain();
  };

  // OOP
  // ---------------
  // If Underscore is called as a function, it returns a wrapped object that
  // can be used OO-style. This wrapper holds altered versions of all the
  // underscore functions. Wrapped objects may be chained.

  // Helper function to continue chaining intermediate results.
  var result = function(obj) {
    return this._chain ? _(obj).chain() : obj;
  };

  // Add all of the Underscore functions to the wrapper object.
  _.mixin(_);

  // Add all mutator Array functions to the wrapper.
  each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      var obj = this._wrapped;
      method.apply(obj, arguments);
      if ((name == 'shift' || name == 'splice') && obj.length === 0) delete obj[0];
      return result.call(this, obj);
    };
  });

  // Add all accessor Array functions to the wrapper.
  each(['concat', 'join', 'slice'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      return result.call(this, method.apply(this._wrapped, arguments));
    };
  });

  _.extend(_.prototype, {

    // Start chaining a wrapped Underscore object.
    chain: function() {
      this._chain = true;
      return this;
    },

    // Extracts the result from a wrapped and chained object.
    value: function() {
      return this._wrapped;
    }

  });

  // AMD registration happens at the end for compatibility with AMD loaders
  // that may not enforce next-turn semantics on modules. Even though general
  // practice for AMD registration is to be anonymous, underscore registers
  // as a named module because, like jQuery, it is a base library that is
  // popular enough to be bundled in a third party lib, but not be part of
  // an AMD load request. Those cases could generate an error when an
  // anonymous define() is called outside of a loader request.
  if (typeof define === 'function' && define.amd) {
    define('underscore', [], function() {
      return _;
    });
  }
}).call(this);

},{}],28:[function(require,module,exports){
/*
 *  Copyright 2011 Twitter, Inc.
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

var Hogan = {};

(function (Hogan, useArrayBuffer) {
  Hogan.Template = function (renderFunc, text, compiler, options) {
    this.r = renderFunc || this.r;
    this.c = compiler;
    this.options = options;
    this.text = text || '';
    this.buf = (useArrayBuffer) ? [] : '';
  }

  Hogan.Template.prototype = {
    // render: replaced by generated code.
    r: function (context, partials, indent) { return ''; },

    // variable escaping
    v: hoganEscape,

    // triple stache
    t: coerceToString,

    render: function render(context, partials, indent) {
      return this.ri([context], partials || {}, indent);
    },

    // render internal -- a hook for overrides that catches partials too
    ri: function (context, partials, indent) {
      return this.r(context, partials, indent);
    },

    // tries to find a partial in the curent scope and render it
    rp: function(name, context, partials, indent) {
      var partial = partials[name];

      if (!partial) {
        return '';
      }

      if (this.c && typeof partial == 'string') {
        partial = this.c.compile(partial, this.options);
      }

      return partial.ri(context, partials, indent);
    },

    // render a section
    rs: function(context, partials, section) {
      var tail = context[context.length - 1];

      if (!isArray(tail)) {
        section(context, partials, this);
        return;
      }

      for (var i = 0; i < tail.length; i++) {
        context.push(tail[i]);
        section(context, partials, this);
        context.pop();
      }
    },

    // maybe start a section
    s: function(val, ctx, partials, inverted, start, end, tags) {
      var pass;

      if (isArray(val) && val.length === 0) {
        return false;
      }

      if (typeof val == 'function') {
        val = this.ls(val, ctx, partials, inverted, start, end, tags);
      }

      pass = (val === '') || !!val;

      if (!inverted && pass && ctx) {
        ctx.push((typeof val == 'object') ? val : ctx[ctx.length - 1]);
      }

      return pass;
    },

    // find values with dotted names
    d: function(key, ctx, partials, returnFound) {
      var names = key.split('.'),
          val = this.f(names[0], ctx, partials, returnFound),
          cx = null;

      if (key === '.' && isArray(ctx[ctx.length - 2])) {
        return ctx[ctx.length - 1];
      }

      for (var i = 1; i < names.length; i++) {
        if (val && typeof val == 'object' && names[i] in val) {
          cx = val;
          val = val[names[i]];
        } else {
          val = '';
        }
      }

      if (returnFound && !val) {
        return false;
      }

      if (!returnFound && typeof val == 'function') {
        ctx.push(cx);
        val = this.lv(val, ctx, partials);
        ctx.pop();
      }

      return val;
    },

    // find values with normal names
    f: function(key, ctx, partials, returnFound) {
      var val = false,
          v = null,
          found = false;

      for (var i = ctx.length - 1; i >= 0; i--) {
        v = ctx[i];
        if (v && typeof v == 'object' && key in v) {
          val = v[key];
          found = true;
          break;
        }
      }

      if (!found) {
        return (returnFound) ? false : "";
      }

      if (!returnFound && typeof val == 'function') {
        val = this.lv(val, ctx, partials);
      }

      return val;
    },

    // higher order templates
    ho: function(val, cx, partials, text, tags) {
      var compiler = this.c;
      var options = this.options;
      options.delimiters = tags;
      var text = val.call(cx, text);
      text = (text == null) ? String(text) : text.toString();
      this.b(compiler.compile(text, options).render(cx, partials));
      return false;
    },

    // template result buffering
    b: (useArrayBuffer) ? function(s) { this.buf.push(s); } :
                          function(s) { this.buf += s; },
    fl: (useArrayBuffer) ? function() { var r = this.buf.join(''); this.buf = []; return r; } :
                           function() { var r = this.buf; this.buf = ''; return r; },

    // lambda replace section
    ls: function(val, ctx, partials, inverted, start, end, tags) {
      var cx = ctx[ctx.length - 1],
          t = null;

      if (!inverted && this.c && val.length > 0) {
        return this.ho(val, cx, partials, this.text.substring(start, end), tags);
      }

      t = val.call(cx);

      if (typeof t == 'function') {
        if (inverted) {
          return true;
        } else if (this.c) {
          return this.ho(t, cx, partials, this.text.substring(start, end), tags);
        }
      }

      return t;
    },

    // lambda replace variable
    lv: function(val, ctx, partials) {
      var cx = ctx[ctx.length - 1];
      var result = val.call(cx);

      if (typeof result == 'function') {
        result = coerceToString(result.call(cx));
        if (this.c && ~result.indexOf("{\u007B")) {
          return this.c.compile(result, this.options).render(cx, partials);
        }
      }

      return coerceToString(result);
    }

  };

  var rAmp = /&/g,
      rLt = /</g,
      rGt = />/g,
      rApos =/\'/g,
      rQuot = /\"/g,
      hChars =/[&<>\"\']/;


  function coerceToString(val) {
    return String((val === null || val === undefined) ? '' : val);
  }

  function hoganEscape(str) {
    str = coerceToString(str);
    return hChars.test(str) ?
      str
        .replace(rAmp,'&amp;')
        .replace(rLt,'&lt;')
        .replace(rGt,'&gt;')
        .replace(rApos,'&#39;')
        .replace(rQuot, '&quot;') :
      str;
  }

  var isArray = Array.isArray || function(a) {
    return Object.prototype.toString.call(a) === '[object Array]';
  };

})(typeof exports !== 'undefined' ? exports : Hogan);


},{}],29:[function(require,module,exports){
/*!
 * jQuery JavaScript Library v1.11.1
 * http://jquery.com/
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 *
 * Copyright 2005, 2014 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2014-05-01T17:42Z
 */

(function( global, factory ) {

	if ( typeof module === "object" && typeof module.exports === "object" ) {
		// For CommonJS and CommonJS-like environments where a proper window is present,
		// execute the factory and get jQuery
		// For environments that do not inherently posses a window with a document
		// (such as Node.js), expose a jQuery-making factory as module.exports
		// This accentuates the need for the creation of a real window
		// e.g. var jQuery = require("jquery")(window);
		// See ticket #14549 for more info
		module.exports = global.document ?
			factory( global, true ) :
			function( w ) {
				if ( !w.document ) {
					throw new Error( "jQuery requires a window with a document" );
				}
				return factory( w );
			};
	} else {
		factory( global );
	}

// Pass this if window is not defined yet
}(typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

// Can't do this because several apps including ASP.NET trace
// the stack via arguments.caller.callee and Firefox dies if
// you try to trace through "use strict" call chains. (#13335)
// Support: Firefox 18+
//

var deletedIds = [];

var slice = deletedIds.slice;

var concat = deletedIds.concat;

var push = deletedIds.push;

var indexOf = deletedIds.indexOf;

var class2type = {};

var toString = class2type.toString;

var hasOwn = class2type.hasOwnProperty;

var support = {};



var
	version = "1.11.1",

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {
		// The jQuery object is actually just the init constructor 'enhanced'
		// Need init if jQuery is called (just allow error to be thrown if not included)
		return new jQuery.fn.init( selector, context );
	},

	// Support: Android<4.1, IE<9
	// Make sure we trim BOM and NBSP
	rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,

	// Matches dashed string for camelizing
	rmsPrefix = /^-ms-/,
	rdashAlpha = /-([\da-z])/gi,

	// Used by jQuery.camelCase as callback to replace()
	fcamelCase = function( all, letter ) {
		return letter.toUpperCase();
	};

jQuery.fn = jQuery.prototype = {
	// The current version of jQuery being used
	jquery: version,

	constructor: jQuery,

	// Start with an empty selector
	selector: "",

	// The default length of a jQuery object is 0
	length: 0,

	toArray: function() {
		return slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {
		return num != null ?

			// Return just the one element from the set
			( num < 0 ? this[ num + this.length ] : this[ num ] ) :

			// Return all the elements in a clean array
			slice.call( this );
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;
		ret.context = this.context;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	// (You can seed the arguments with an array of args, but this is
	// only used internally.)
	each: function( callback, args ) {
		return jQuery.each( this, callback, args );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map(this, function( elem, i ) {
			return callback.call( elem, i, elem );
		}));
	},

	slice: function() {
		return this.pushStack( slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[j] ] : [] );
	},

	end: function() {
		return this.prevObject || this.constructor(null);
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: push,
	sort: deletedIds.sort,
	splice: deletedIds.splice
};

jQuery.extend = jQuery.fn.extend = function() {
	var src, copyIsArray, copy, name, options, clone,
		target = arguments[0] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;

		// skip the boolean and the target
		target = arguments[ i ] || {};
		i++;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !jQuery.isFunction(target) ) {
		target = {};
	}

	// extend jQuery itself if only one argument is passed
	if ( i === length ) {
		target = this;
		i--;
	}

	for ( ; i < length; i++ ) {
		// Only deal with non-null/undefined values
		if ( (options = arguments[ i ]) != null ) {
			// Extend the base object
			for ( name in options ) {
				src = target[ name ];
				copy = options[ name ];

				// Prevent never-ending loop
				if ( target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)) ) ) {
					if ( copyIsArray ) {
						copyIsArray = false;
						clone = src && jQuery.isArray(src) ? src : [];

					} else {
						clone = src && jQuery.isPlainObject(src) ? src : {};
					}

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend({
	// Unique for each copy of jQuery on the page
	expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

	// Assume jQuery is ready without the ready module
	isReady: true,

	error: function( msg ) {
		throw new Error( msg );
	},

	noop: function() {},

	// See test/unit/core.js for details concerning isFunction.
	// Since version 1.3, DOM methods and functions like alert
	// aren't supported. They return false on IE (#2968).
	isFunction: function( obj ) {
		return jQuery.type(obj) === "function";
	},

	isArray: Array.isArray || function( obj ) {
		return jQuery.type(obj) === "array";
	},

	isWindow: function( obj ) {
		/* jshint eqeqeq: false */
		return obj != null && obj == obj.window;
	},

	isNumeric: function( obj ) {
		// parseFloat NaNs numeric-cast false positives (null|true|false|"")
		// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
		// subtraction forces infinities to NaN
		return !jQuery.isArray( obj ) && obj - parseFloat( obj ) >= 0;
	},

	isEmptyObject: function( obj ) {
		var name;
		for ( name in obj ) {
			return false;
		}
		return true;
	},

	isPlainObject: function( obj ) {
		var key;

		// Must be an Object.
		// Because of IE, we also have to check the presence of the constructor property.
		// Make sure that DOM nodes and window objects don't pass through, as well
		if ( !obj || jQuery.type(obj) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {
			return false;
		}

		try {
			// Not own constructor property must be Object
			if ( obj.constructor &&
				!hasOwn.call(obj, "constructor") &&
				!hasOwn.call(obj.constructor.prototype, "isPrototypeOf") ) {
				return false;
			}
		} catch ( e ) {
			// IE8,9 Will throw exceptions on certain host objects #9897
			return false;
		}

		// Support: IE<9
		// Handle iteration over inherited properties before own properties.
		if ( support.ownLast ) {
			for ( key in obj ) {
				return hasOwn.call( obj, key );
			}
		}

		// Own properties are enumerated firstly, so to speed up,
		// if last one is own, then all properties are own.
		for ( key in obj ) {}

		return key === undefined || hasOwn.call( obj, key );
	},

	type: function( obj ) {
		if ( obj == null ) {
			return obj + "";
		}
		return typeof obj === "object" || typeof obj === "function" ?
			class2type[ toString.call(obj) ] || "object" :
			typeof obj;
	},

	// Evaluates a script in a global context
	// Workarounds based on findings by Jim Driscoll
	// http://weblogs.java.net/blog/driscoll/archive/2009/09/08/eval-javascript-global-context
	globalEval: function( data ) {
		if ( data && jQuery.trim( data ) ) {
			// We use execScript on Internet Explorer
			// We use an anonymous function so that context is window
			// rather than jQuery in Firefox
			( window.execScript || function( data ) {
				window[ "eval" ].call( window, data );
			} )( data );
		}
	},

	// Convert dashed to camelCase; used by the css and data modules
	// Microsoft forgot to hump their vendor prefix (#9572)
	camelCase: function( string ) {
		return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
	},

	nodeName: function( elem, name ) {
		return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
	},

	// args is for internal usage only
	each: function( obj, callback, args ) {
		var value,
			i = 0,
			length = obj.length,
			isArray = isArraylike( obj );

		if ( args ) {
			if ( isArray ) {
				for ( ; i < length; i++ ) {
					value = callback.apply( obj[ i ], args );

					if ( value === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					value = callback.apply( obj[ i ], args );

					if ( value === false ) {
						break;
					}
				}
			}

		// A special, fast, case for the most common use of each
		} else {
			if ( isArray ) {
				for ( ; i < length; i++ ) {
					value = callback.call( obj[ i ], i, obj[ i ] );

					if ( value === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					value = callback.call( obj[ i ], i, obj[ i ] );

					if ( value === false ) {
						break;
					}
				}
			}
		}

		return obj;
	},

	// Support: Android<4.1, IE<9
	trim: function( text ) {
		return text == null ?
			"" :
			( text + "" ).replace( rtrim, "" );
	},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArraylike( Object(arr) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
					[ arr ] : arr
				);
			} else {
				push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		var len;

		if ( arr ) {
			if ( indexOf ) {
				return indexOf.call( arr, elem, i );
			}

			len = arr.length;
			i = i ? i < 0 ? Math.max( 0, len + i ) : i : 0;

			for ( ; i < len; i++ ) {
				// Skip accessing in sparse arrays
				if ( i in arr && arr[ i ] === elem ) {
					return i;
				}
			}
		}

		return -1;
	},

	merge: function( first, second ) {
		var len = +second.length,
			j = 0,
			i = first.length;

		while ( j < len ) {
			first[ i++ ] = second[ j++ ];
		}

		// Support: IE<9
		// Workaround casting of .length to NaN on otherwise arraylike objects (e.g., NodeLists)
		if ( len !== len ) {
			while ( second[j] !== undefined ) {
				first[ i++ ] = second[ j++ ];
			}
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, invert ) {
		var callbackInverse,
			matches = [],
			i = 0,
			length = elems.length,
			callbackExpect = !invert;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			callbackInverse = !callback( elems[ i ], i );
			if ( callbackInverse !== callbackExpect ) {
				matches.push( elems[ i ] );
			}
		}

		return matches;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var value,
			i = 0,
			length = elems.length,
			isArray = isArraylike( elems ),
			ret = [];

		// Go through the array, translating each of the items to their new values
		if ( isArray ) {
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}
		}

		// Flatten any nested arrays
		return concat.apply( [], ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// Bind a function to a context, optionally partially applying any
	// arguments.
	proxy: function( fn, context ) {
		var args, proxy, tmp;

		if ( typeof context === "string" ) {
			tmp = fn[ context ];
			context = fn;
			fn = tmp;
		}

		// Quick check to determine if target is callable, in the spec
		// this throws a TypeError, but we will just return undefined.
		if ( !jQuery.isFunction( fn ) ) {
			return undefined;
		}

		// Simulated bind
		args = slice.call( arguments, 2 );
		proxy = function() {
			return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
		};

		// Set the guid of unique handler to the same of original handler, so it can be removed
		proxy.guid = fn.guid = fn.guid || jQuery.guid++;

		return proxy;
	},

	now: function() {
		return +( new Date() );
	},

	// jQuery.support is not used in Core but other projects attach their
	// properties to it so it needs to exist.
	support: support
});

// Populate the class2type map
jQuery.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function(i, name) {
	class2type[ "[object " + name + "]" ] = name.toLowerCase();
});

function isArraylike( obj ) {
	var length = obj.length,
		type = jQuery.type( obj );

	if ( type === "function" || jQuery.isWindow( obj ) ) {
		return false;
	}

	if ( obj.nodeType === 1 && length ) {
		return true;
	}

	return type === "array" || length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj;
}
var Sizzle =
/*!
 * Sizzle CSS Selector Engine v1.10.19
 * http://sizzlejs.com/
 *
 * Copyright 2013 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2014-04-18
 */
(function( window ) {

var i,
	support,
	Expr,
	getText,
	isXML,
	tokenize,
	compile,
	select,
	outermostContext,
	sortInput,
	hasDuplicate,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsHTML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,

	// Instance-specific data
	expando = "sizzle" + -(new Date()),
	preferredDoc = window.document,
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
		}
		return 0;
	},

	// General-purpose constants
	strundefined = typeof undefined,
	MAX_NEGATIVE = 1 << 31,

	// Instance methods
	hasOwn = ({}).hasOwnProperty,
	arr = [],
	pop = arr.pop,
	push_native = arr.push,
	push = arr.push,
	slice = arr.slice,
	// Use a stripped-down indexOf if we can't use a native one
	indexOf = arr.indexOf || function( elem ) {
		var i = 0,
			len = this.length;
		for ( ; i < len; i++ ) {
			if ( this[i] === elem ) {
				return i;
			}
		}
		return -1;
	},

	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

	// Regular expressions

	// Whitespace characters http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",
	// http://www.w3.org/TR/css3-syntax/#characters
	characterEncoding = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",

	// Loosely modeled on CSS identifier characters
	// An unquoted value should be a CSS identifier http://www.w3.org/TR/css3-selectors/#attribute-selectors
	// Proper syntax: http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
	identifier = characterEncoding.replace( "w", "w#" ),

	// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
	attributes = "\\[" + whitespace + "*(" + characterEncoding + ")(?:" + whitespace +
		// Operator (capture 2)
		"*([*^$|!~]?=)" + whitespace +
		// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
		"*\\]",

	pseudos = ":(" + characterEncoding + ")(?:\\((" +
		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
		// 1. quoted (capture 3; capture 4 or capture 5)
		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
		// 2. simple (capture 6)
		"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
		// 3. anything else (capture 2)
		".*" +
		")\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),

	rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),

	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + characterEncoding + ")" ),
		"CLASS": new RegExp( "^\\.(" + characterEncoding + ")" ),
		"TAG": new RegExp( "^(" + characterEncoding.replace( "w", "w*" ) + ")" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
			"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
			"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
			whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rnative = /^[^{]+\{\s*\[native \w/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rsibling = /[+~]/,
	rescape = /'|\\/g,

	// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
	funescape = function( _, escaped, escapedWhitespace ) {
		var high = "0x" + escaped - 0x10000;
		// NaN means non-codepoint
		// Support: Firefox<24
		// Workaround erroneous numeric interpretation of +"0x"
		return high !== high || escapedWhitespace ?
			escaped :
			high < 0 ?
				// BMP codepoint
				String.fromCharCode( high + 0x10000 ) :
				// Supplemental Plane codepoint (surrogate pair)
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	};

// Optimize for push.apply( _, NodeList )
try {
	push.apply(
		(arr = slice.call( preferredDoc.childNodes )),
		preferredDoc.childNodes
	);
	// Support: Android<4.0
	// Detect silently failing push.apply
	arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
	push = { apply: arr.length ?

		// Leverage slice if possible
		function( target, els ) {
			push_native.apply( target, slice.call(els) );
		} :

		// Support: IE<9
		// Otherwise append directly
		function( target, els ) {
			var j = target.length,
				i = 0;
			// Can't trust NodeList.length
			while ( (target[j++] = els[i++]) ) {}
			target.length = j - 1;
		}
	};
}

function Sizzle( selector, context, results, seed ) {
	var match, elem, m, nodeType,
		// QSA vars
		i, groups, old, nid, newContext, newSelector;

	if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
		setDocument( context );
	}

	context = context || document;
	results = results || [];

	if ( !selector || typeof selector !== "string" ) {
		return results;
	}

	if ( (nodeType = context.nodeType) !== 1 && nodeType !== 9 ) {
		return [];
	}

	if ( documentIsHTML && !seed ) {

		// Shortcuts
		if ( (match = rquickExpr.exec( selector )) ) {
			// Speed-up: Sizzle("#ID")
			if ( (m = match[1]) ) {
				if ( nodeType === 9 ) {
					elem = context.getElementById( m );
					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document (jQuery #6963)
					if ( elem && elem.parentNode ) {
						// Handle the case where IE, Opera, and Webkit return items
						// by name instead of ID
						if ( elem.id === m ) {
							results.push( elem );
							return results;
						}
					} else {
						return results;
					}
				} else {
					// Context is not a document
					if ( context.ownerDocument && (elem = context.ownerDocument.getElementById( m )) &&
						contains( context, elem ) && elem.id === m ) {
						results.push( elem );
						return results;
					}
				}

			// Speed-up: Sizzle("TAG")
			} else if ( match[2] ) {
				push.apply( results, context.getElementsByTagName( selector ) );
				return results;

			// Speed-up: Sizzle(".CLASS")
			} else if ( (m = match[3]) && support.getElementsByClassName && context.getElementsByClassName ) {
				push.apply( results, context.getElementsByClassName( m ) );
				return results;
			}
		}

		// QSA path
		if ( support.qsa && (!rbuggyQSA || !rbuggyQSA.test( selector )) ) {
			nid = old = expando;
			newContext = context;
			newSelector = nodeType === 9 && selector;

			// qSA works strangely on Element-rooted queries
			// We can work around this by specifying an extra ID on the root
			// and working up from there (Thanks to Andrew Dupont for the technique)
			// IE 8 doesn't work on object elements
			if ( nodeType === 1 && context.nodeName.toLowerCase() !== "object" ) {
				groups = tokenize( selector );

				if ( (old = context.getAttribute("id")) ) {
					nid = old.replace( rescape, "\\$&" );
				} else {
					context.setAttribute( "id", nid );
				}
				nid = "[id='" + nid + "'] ";

				i = groups.length;
				while ( i-- ) {
					groups[i] = nid + toSelector( groups[i] );
				}
				newContext = rsibling.test( selector ) && testContext( context.parentNode ) || context;
				newSelector = groups.join(",");
			}

			if ( newSelector ) {
				try {
					push.apply( results,
						newContext.querySelectorAll( newSelector )
					);
					return results;
				} catch(qsaError) {
				} finally {
					if ( !old ) {
						context.removeAttribute("id");
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Create key-value caches of limited size
 * @returns {Function(string, Object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var keys = [];

	function cache( key, value ) {
		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key + " " ) > Expr.cacheLength ) {
			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return (cache[ key + " " ] = value);
	}
	return cache;
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created div and expects a boolean result
 */
function assert( fn ) {
	var div = document.createElement("div");

	try {
		return !!fn( div );
	} catch (e) {
		return false;
	} finally {
		// Remove from its parent by default
		if ( div.parentNode ) {
			div.parentNode.removeChild( div );
		}
		// release memory in IE
		div = null;
	}
}

/**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
function addHandle( attrs, handler ) {
	var arr = attrs.split("|"),
		i = attrs.length;

	while ( i-- ) {
		Expr.attrHandle[ arr[i] ] = handler;
	}
}

/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
			( ~b.sourceIndex || MAX_NEGATIVE ) -
			( ~a.sourceIndex || MAX_NEGATIVE );

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( (cur = cur.nextSibling) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return (name === "input" || name === "button") && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
function createPositionalPseudo( fn ) {
	return markFunction(function( argument ) {
		argument = +argument;
		return markFunction(function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ (j = matchIndexes[i]) ] ) {
					seed[j] = !(matches[j] = seed[j]);
				}
			}
		});
	});
}

/**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */
function testContext( context ) {
	return context && typeof context.getElementsByTagName !== strundefined && context;
}

// Expose support vars for convenience
support = Sizzle.support = {};

/**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */
isXML = Sizzle.isXML = function( elem ) {
	// documentElement is verified for cases where it doesn't yet exist
	// (such as loading iframes in IE - #4833)
	var documentElement = elem && (elem.ownerDocument || elem).documentElement;
	return documentElement ? documentElement.nodeName !== "HTML" : false;
};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var hasCompare,
		doc = node ? node.ownerDocument || node : preferredDoc,
		parent = doc.defaultView;

	// If no document and documentElement is available, return
	if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Set our document
	document = doc;
	docElem = doc.documentElement;

	// Support tests
	documentIsHTML = !isXML( doc );

	// Support: IE>8
	// If iframe document is assigned to "document" variable and if iframe has been reloaded,
	// IE will throw "permission denied" error when accessing "document" variable, see jQuery #13936
	// IE6-8 do not support the defaultView property so parent will be undefined
	if ( parent && parent !== parent.top ) {
		// IE11 does not have attachEvent, so all must suffer
		if ( parent.addEventListener ) {
			parent.addEventListener( "unload", function() {
				setDocument();
			}, false );
		} else if ( parent.attachEvent ) {
			parent.attachEvent( "onunload", function() {
				setDocument();
			});
		}
	}

	/* Attributes
	---------------------------------------------------------------------- */

	// Support: IE<8
	// Verify that getAttribute really returns attributes and not properties (excepting IE8 booleans)
	support.attributes = assert(function( div ) {
		div.className = "i";
		return !div.getAttribute("className");
	});

	/* getElement(s)By*
	---------------------------------------------------------------------- */

	// Check if getElementsByTagName("*") returns only elements
	support.getElementsByTagName = assert(function( div ) {
		div.appendChild( doc.createComment("") );
		return !div.getElementsByTagName("*").length;
	});

	// Check if getElementsByClassName can be trusted
	support.getElementsByClassName = rnative.test( doc.getElementsByClassName ) && assert(function( div ) {
		div.innerHTML = "<div class='a'></div><div class='a i'></div>";

		// Support: Safari<4
		// Catch class over-caching
		div.firstChild.className = "i";
		// Support: Opera<10
		// Catch gEBCN failure to find non-leading classes
		return div.getElementsByClassName("i").length === 2;
	});

	// Support: IE<10
	// Check if getElementById returns elements by name
	// The broken getElementById methods don't pick up programatically-set names,
	// so use a roundabout getElementsByName test
	support.getById = assert(function( div ) {
		docElem.appendChild( div ).id = expando;
		return !doc.getElementsByName || !doc.getElementsByName( expando ).length;
	});

	// ID find and filter
	if ( support.getById ) {
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== strundefined && documentIsHTML ) {
				var m = context.getElementById( id );
				// Check parentNode to catch when Blackberry 4.6 returns
				// nodes that are no longer in the document #6963
				return m && m.parentNode ? [ m ] : [];
			}
		};
		Expr.filter["ID"] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute("id") === attrId;
			};
		};
	} else {
		// Support: IE6/7
		// getElementById is not reliable as a find shortcut
		delete Expr.find["ID"];

		Expr.filter["ID"] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== strundefined && elem.getAttributeNode("id");
				return node && node.value === attrId;
			};
		};
	}

	// Tag
	Expr.find["TAG"] = support.getElementsByTagName ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== strundefined ) {
				return context.getElementsByTagName( tag );
			}
		} :
		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( (elem = results[i++]) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Class
	Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
		if ( typeof context.getElementsByClassName !== strundefined && documentIsHTML ) {
			return context.getElementsByClassName( className );
		}
	};

	/* QSA/matchesSelector
	---------------------------------------------------------------------- */

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21)
	// We allow this because of a bug in IE8/9 that throws an error
	// whenever `document.activeElement` is accessed on an iframe
	// So, we allow :focus to pass through QSA all the time to avoid the IE error
	// See http://bugs.jquery.com/ticket/13378
	rbuggyQSA = [];

	if ( (support.qsa = rnative.test( doc.querySelectorAll )) ) {
		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert(function( div ) {
			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explicitly
			// setting a boolean content attribute,
			// since its presence should be enough
			// http://bugs.jquery.com/ticket/12359
			div.innerHTML = "<select msallowclip=''><option selected=''></option></select>";

			// Support: IE8, Opera 11-12.16
			// Nothing should be selected when empty strings follow ^= or $= or *=
			// The test attribute must be unknown in Opera but "safe" for WinRT
			// http://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
			if ( div.querySelectorAll("[msallowclip^='']").length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
			}

			// Support: IE8
			// Boolean attributes and "value" are not treated correctly
			if ( !div.querySelectorAll("[selected]").length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":checked").length ) {
				rbuggyQSA.push(":checked");
			}
		});

		assert(function( div ) {
			// Support: Windows 8 Native Apps
			// The type and name attributes are restricted during .innerHTML assignment
			var input = doc.createElement("input");
			input.setAttribute( "type", "hidden" );
			div.appendChild( input ).setAttribute( "name", "D" );

			// Support: IE8
			// Enforce case-sensitivity of name attribute
			if ( div.querySelectorAll("[name=d]").length ) {
				rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":enabled").length ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Opera 10-11 does not throw on post-comma invalid pseudos
			div.querySelectorAll("*,:x");
			rbuggyQSA.push(",.*:");
		});
	}

	if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
		docElem.webkitMatchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector) )) ) {

		assert(function( div ) {
			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( div, "div" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( div, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		});
	}

	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

	/* Contains
	---------------------------------------------------------------------- */
	hasCompare = rnative.test( docElem.compareDocumentPosition );

	// Element contains another
	// Purposefully does not implement inclusive descendent
	// As in, an element does not contain itself
	contains = hasCompare || rnative.test( docElem.contains ) ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			));
		} :
		function( a, b ) {
			if ( b ) {
				while ( (b = b.parentNode) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	/* Sorting
	---------------------------------------------------------------------- */

	// Document order sorting
	sortOrder = hasCompare ?
	function( a, b ) {

		// Flag for duplicate removal
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		// Sort on method existence if only one input has compareDocumentPosition
		var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
		if ( compare ) {
			return compare;
		}

		// Calculate position if both inputs belong to the same document
		compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
			a.compareDocumentPosition( b ) :

			// Otherwise we know they are disconnected
			1;

		// Disconnected nodes
		if ( compare & 1 ||
			(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

			// Choose the first element that is related to our preferred document
			if ( a === doc || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
				return -1;
			}
			if ( b === doc || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
				return 1;
			}

			// Maintain original order
			return sortInput ?
				( indexOf.call( sortInput, a ) - indexOf.call( sortInput, b ) ) :
				0;
		}

		return compare & 4 ? -1 : 1;
	} :
	function( a, b ) {
		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Parentless nodes are either documents or disconnected
		if ( !aup || !bup ) {
			return a === doc ? -1 :
				b === doc ? 1 :
				aup ? -1 :
				bup ? 1 :
				sortInput ?
				( indexOf.call( sortInput, a ) - indexOf.call( sortInput, b ) ) :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( (cur = cur.parentNode) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( (cur = cur.parentNode) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[i] === bp[i] ) {
			i++;
		}

		return i ?
			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[i], bp[i] ) :

			// Otherwise nodes in our document sort first
			ap[i] === preferredDoc ? -1 :
			bp[i] === preferredDoc ? 1 :
			0;
	};

	return doc;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	// Make sure that attribute selectors are quoted
	expr = expr.replace( rattributeQuotes, "='$1']" );

	if ( support.matchesSelector && documentIsHTML &&
		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||
					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch(e) {}
	}

	return Sizzle( expr, document, null, [ elem ] ).length > 0;
};

Sizzle.contains = function( context, elem ) {
	// Set document vars if needed
	if ( ( context.ownerDocument || context ) !== document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	var fn = Expr.attrHandle[ name.toLowerCase() ],
		// Don't get fooled by Object.prototype properties (jQuery #13807)
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
			fn( elem, name, !documentIsHTML ) :
			undefined;

	return val !== undefined ?
		val :
		support.attributes || !documentIsHTML ?
			elem.getAttribute( name ) :
			(val = elem.getAttributeNode(name)) && val.specified ?
				val.value :
				null;
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		j = 0,
		i = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	sortInput = !support.sortStable && results.slice( 0 );
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		while ( (elem = results[i++]) ) {
			if ( elem === results[ i ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	// Clear input after sorting to release objects
	// See https://github.com/jquery/sizzle/pull/225
	sortInput = null;

	return results;
};

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {
		// If no nodeType, this is expected to be an array
		while ( (node = elem[i++]) ) {
			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
		// Use textContent for elements
		// innerText usage removed for consistency of new lines (jQuery #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {
			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}
	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	attrHandle: {},

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[1] = match[1].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );

			if ( match[2] === "~=" ) {
				match[3] = " " + match[3] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {
			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[1] = match[1].toLowerCase();

			if ( match[1].slice( 0, 3 ) === "nth" ) {
				// nth-* requires argument
				if ( !match[3] ) {
					Sizzle.error( match[0] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
				match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

			// other types prohibit arguments
			} else if ( match[3] ) {
				Sizzle.error( match[0] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[6] && match[2];

			if ( matchExpr["CHILD"].test( match[0] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[3] ) {
				match[2] = match[4] || match[5] || "";

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&
				// Get excess from tokenize (recursively)
				(excess = tokenize( unquoted, true )) &&
				// advance to the next closing parenthesis
				(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

				// excess is a negative index
				match[0] = match[0].slice( 0, excess );
				match[2] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeNameSelector ) {
			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
			return nodeNameSelector === "*" ?
				function() { return true; } :
				function( elem ) {
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
				};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
				classCache( className, function( elem ) {
					return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== strundefined && elem.getAttribute("class") || "" );
				});
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
			};
		},

		"CHILD": function( type, what, argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, context, xml ) {
					var cache, outerCache, node, diff, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( (node = node[ dir ]) ) {
									if ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) {
										return false;
									}
								}
								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {
							// Seek `elem` from a previously-cached index
							outerCache = parent[ expando ] || (parent[ expando ] = {});
							cache = outerCache[ type ] || [];
							nodeIndex = cache[0] === dirruns && cache[1];
							diff = cache[0] === dirruns && cache[2];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( (node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								(diff = nodeIndex = 0) || start.pop()) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									outerCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						// Use previously-cached element index if available
						} else if ( useCache && (cache = (elem[ expando ] || (elem[ expando ] = {}))[ type ]) && cache[0] === dirruns ) {
							diff = cache[1];

						// xml :nth-child(...) or :nth-last-child(...) or :nth(-last)?-of-type(...)
						} else {
							// Use the same loop as above to seek `elem` from the start
							while ( (node = ++nodeIndex && node && node[ dir ] ||
								(diff = nodeIndex = 0) || start.pop()) ) {

								if ( ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) && ++diff ) {
									// Cache the index of each encountered element
									if ( useCache ) {
										(node[ expando ] || (node[ expando ] = {}))[ type ] = [ dirruns, diff ];
									}

									if ( node === elem ) {
										break;
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {
			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction(function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf.call( seed, matched[i] );
							seed[ idx ] = !( matches[ idx ] = matched[i] );
						}
					}) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {
		// Potentially complex pseudos
		"not": markFunction(function( selector ) {
			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction(function( seed, matches, context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( (elem = unmatched[i]) ) {
							seed[i] = !(matches[i] = elem);
						}
					}
				}) :
				function( elem, context, xml ) {
					input[0] = elem;
					matcher( input, null, xml, results );
					return !results.pop();
				};
		}),

		"has": markFunction(function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		}),

		"contains": markFunction(function( text ) {
			return function( elem ) {
				return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
			};
		}),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {
			// lang value must be a valid identifier
			if ( !ridentifier.test(lang || "") ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( (elemLang = documentIsHTML ?
						elem.lang :
						elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
				return false;
			};
		}),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
		},

		// Boolean properties
		"enabled": function( elem ) {
			return elem.disabled === false;
		},

		"disabled": function( elem ) {
			return elem.disabled === true;
		},

		"checked": function( elem ) {
			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
		},

		"selected": function( elem ) {
			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {
			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
			//   but not by others (comment: 8; processing instruction: 7; etc.)
			// nodeType < 6 works because attributes (2) do not appear as children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeType < 6 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos["empty"]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&

				// Support: IE<8
				// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
				( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
		},

		// Position-in-collection
		"first": createPositionalPseudo(function() {
			return [ 0 ];
		}),

		"last": createPositionalPseudo(function( matchIndexes, length ) {
			return [ length - 1 ];
		}),

		"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		}),

		"even": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"odd": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		})
	}
};

Expr.pseudos["nth"] = Expr.pseudos["eq"];

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

// Easy API for creating new setFilters
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();

tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || (match = rcomma.exec( soFar )) ) {
			if ( match ) {
				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[0].length ) || soFar;
			}
			groups.push( (tokens = []) );
		}

		matched = false;

		// Combinators
		if ( (match = rcombinators.exec( soFar )) ) {
			matched = match.shift();
			tokens.push({
				value: matched,
				// Cast descendant combinators to space
				type: match[0].replace( rtrim, " " )
			});
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
				(match = preFilters[ type ]( match ))) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					type: type,
					matches: match
				});
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :
			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
};

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[i].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		checkNonElements = base && dir === "parentNode",
		doneName = done++;

	return combinator.first ?
		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( (elem = elem[ dir ]) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var oldCache, outerCache,
				newCache = [ dirruns, doneName ];

			// We can't set arbitrary data on XML nodes, so they don't benefit from dir caching
			if ( xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || (elem[ expando ] = {});
						if ( (oldCache = outerCache[ dir ]) &&
							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

							// Assign to newCache so results back-propagate to previous elements
							return (newCache[ 2 ] = oldCache[ 2 ]);
						} else {
							// Reuse newcache so results back-propagate to previous elements
							outerCache[ dir ] = newCache;

							// A match means we're done; a fail means we have to keep checking
							if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
								return true;
							}
						}
					}
				}
			}
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[i]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[0];
}

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[i], results );
	}
	return results;
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( (elem = unmatched[i]) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction(function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( (elem = temp[i]) ) {
					matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {
					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) ) {
							// Restore matcherIn since elem is not yet a final match
							temp.push( (matcherIn[i] = elem) );
						}
					}
					postFinder( null, (matcherOut = []), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( (elem = matcherOut[i]) &&
						(temp = postFinder ? indexOf.call( seed, elem ) : preMap[i]) > -1 ) {

						seed[temp] = !(results[temp] = elem);
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	});
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[0].type ],
		implicitRelative = leadingRelative || Expr.relative[" "],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf.call( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			return ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				(checkContext = context).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );
		} ];

	for ( ; i < len; i++ ) {
		if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
			matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
		} else {
			matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {
				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[j].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector(
						// If the preceding token was a descendant combinator, insert an implicit any-element `*`
						tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
					).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	var bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, outermost ) {
			var elem, j, matcher,
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				setMatched = [],
				contextBackup = outermostContext,
				// We must always have either seed elements or outermost context
				elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
				len = elems.length;

			if ( outermost ) {
				outermostContext = context !== document && context;
			}

			// Add elements passing elementMatchers directly to results
			// Keep `i` a string if there are no elements so `matchedCount` will be "00" below
			// Support: IE<9, Safari
			// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
			for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;
					while ( (matcher = elementMatchers[j++]) ) {
						if ( matcher( elem, context, xml ) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {
					// They will have gone through all possible matchers
					if ( (elem = !matcher && elem) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// Apply set filters to unmatched elements
			matchedCount += i;
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( (matcher = setMatchers[j++]) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {
					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !(unmatched[i] || setMatched[i]) ) {
								setMatched[i] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {
		// Generate a function of recursive functions that can be used to check each element
		if ( !match ) {
			match = tokenize( selector );
		}
		i = match.length;
		while ( i-- ) {
			cached = matcherFromTokens( match[i] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );

		// Save selector and tokenization
		cached.selector = selector;
	}
	return cached;
};

/**
 * A low-level selection function that works with Sizzle's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with Sizzle.compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */
select = Sizzle.select = function( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		compiled = typeof selector === "function" && selector,
		match = !seed && tokenize( (selector = compiled.selector || selector) );

	results = results || [];

	// Try to minimize operations if there is no seed and only one group
	if ( match.length === 1 ) {

		// Take a shortcut and set the context if the root selector is an ID
		tokens = match[0] = match[0].slice( 0 );
		if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
				support.getById && context.nodeType === 9 && documentIsHTML &&
				Expr.relative[ tokens[1].type ] ) {

			context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
			if ( !context ) {
				return results;

			// Precompiled matchers will still verify ancestry, so step up a level
			} else if ( compiled ) {
				context = context.parentNode;
			}

			selector = selector.slice( tokens.shift().value.length );
		}

		// Fetch a seed set for right-to-left matching
		i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
		while ( i-- ) {
			token = tokens[i];

			// Abort if we hit a combinator
			if ( Expr.relative[ (type = token.type) ] ) {
				break;
			}
			if ( (find = Expr.find[ type ]) ) {
				// Search, expanding context for leading sibling combinators
				if ( (seed = find(
					token.matches[0].replace( runescape, funescape ),
					rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
				)) ) {

					// If seed is empty or no tokens remain, we can return early
					tokens.splice( i, 1 );
					selector = seed.length && toSelector( tokens );
					if ( !selector ) {
						push.apply( results, seed );
						return results;
					}

					break;
				}
			}
		}
	}

	// Compile and execute a filtering function if one is not provided
	// Provide `match` to avoid retokenization if we modified the selector above
	( compiled || compile( selector, match ) )(
		seed,
		context,
		!documentIsHTML,
		results,
		rsibling.test( selector ) && testContext( context.parentNode ) || context
	);
	return results;
};

// One-time assignments

// Sort stability
support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

// Support: Chrome<14
// Always assume duplicates if they aren't passed to the comparison function
support.detectDuplicates = !!hasDuplicate;

// Initialize against the default document
setDocument();

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
support.sortDetached = assert(function( div1 ) {
	// Should return 1, but returns 4 (following)
	return div1.compareDocumentPosition( document.createElement("div") ) & 1;
});

// Support: IE<8
// Prevent attribute/property "interpolation"
// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !assert(function( div ) {
	div.innerHTML = "<a href='#'></a>";
	return div.firstChild.getAttribute("href") === "#" ;
}) ) {
	addHandle( "type|href|height|width", function( elem, name, isXML ) {
		if ( !isXML ) {
			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
		}
	});
}

// Support: IE<9
// Use defaultValue in place of getAttribute("value")
if ( !support.attributes || !assert(function( div ) {
	div.innerHTML = "<input/>";
	div.firstChild.setAttribute( "value", "" );
	return div.firstChild.getAttribute( "value" ) === "";
}) ) {
	addHandle( "value", function( elem, name, isXML ) {
		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
			return elem.defaultValue;
		}
	});
}

// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
if ( !assert(function( div ) {
	return div.getAttribute("disabled") == null;
}) ) {
	addHandle( booleans, function( elem, name, isXML ) {
		var val;
		if ( !isXML ) {
			return elem[ name ] === true ? name.toLowerCase() :
					(val = elem.getAttributeNode( name )) && val.specified ?
					val.value :
				null;
		}
	});
}

return Sizzle;

})( window );



jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;
jQuery.expr[":"] = jQuery.expr.pseudos;
jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;



var rneedsContext = jQuery.expr.match.needsContext;

var rsingleTag = (/^<(\w+)\s*\/?>(?:<\/\1>|)$/);



var risSimple = /^.[^:#\[\.,]*$/;

// Implement the identical functionality for filter and not
function winnow( elements, qualifier, not ) {
	if ( jQuery.isFunction( qualifier ) ) {
		return jQuery.grep( elements, function( elem, i ) {
			/* jshint -W018 */
			return !!qualifier.call( elem, i, elem ) !== not;
		});

	}

	if ( qualifier.nodeType ) {
		return jQuery.grep( elements, function( elem ) {
			return ( elem === qualifier ) !== not;
		});

	}

	if ( typeof qualifier === "string" ) {
		if ( risSimple.test( qualifier ) ) {
			return jQuery.filter( qualifier, elements, not );
		}

		qualifier = jQuery.filter( qualifier, elements );
	}

	return jQuery.grep( elements, function( elem ) {
		return ( jQuery.inArray( elem, qualifier ) >= 0 ) !== not;
	});
}

jQuery.filter = function( expr, elems, not ) {
	var elem = elems[ 0 ];

	if ( not ) {
		expr = ":not(" + expr + ")";
	}

	return elems.length === 1 && elem.nodeType === 1 ?
		jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [] :
		jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
			return elem.nodeType === 1;
		}));
};

jQuery.fn.extend({
	find: function( selector ) {
		var i,
			ret = [],
			self = this,
			len = self.length;

		if ( typeof selector !== "string" ) {
			return this.pushStack( jQuery( selector ).filter(function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			}) );
		}

		for ( i = 0; i < len; i++ ) {
			jQuery.find( selector, self[ i ], ret );
		}

		// Needed because $( selector, context ) becomes $( context ).find( selector )
		ret = this.pushStack( len > 1 ? jQuery.unique( ret ) : ret );
		ret.selector = this.selector ? this.selector + " " + selector : selector;
		return ret;
	},
	filter: function( selector ) {
		return this.pushStack( winnow(this, selector || [], false) );
	},
	not: function( selector ) {
		return this.pushStack( winnow(this, selector || [], true) );
	},
	is: function( selector ) {
		return !!winnow(
			this,

			// If this is a positional/relative selector, check membership in the returned set
			// so $("p:first").is("p:last") won't return true for a doc with two "p".
			typeof selector === "string" && rneedsContext.test( selector ) ?
				jQuery( selector ) :
				selector || [],
			false
		).length;
	}
});


// Initialize a jQuery object


// A central reference to the root jQuery(document)
var rootjQuery,

	// Use the correct document accordingly with window argument (sandbox)
	document = window.document,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,

	init = jQuery.fn.init = function( selector, context ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector.charAt(0) === "<" && selector.charAt( selector.length - 1 ) === ">" && selector.length >= 3 ) {
				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && (match[1] || !context) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[1] ) {
					context = context instanceof jQuery ? context[0] : context;

					// scripts is true for back-compat
					// Intentionally let the error be thrown if parseHTML is not present
					jQuery.merge( this, jQuery.parseHTML(
						match[1],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[1] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {
							// Properties of context are called as methods if possible
							if ( jQuery.isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[2] );

					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document #6963
					if ( elem && elem.parentNode ) {
						// Handle the case where IE and Opera return items
						// by name instead of ID
						if ( elem.id !== match[2] ) {
							return rootjQuery.find( selector );
						}

						// Otherwise, we inject the element directly into the jQuery object
						this.length = 1;
						this[0] = elem;
					}

					this.context = document;
					this.selector = selector;
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || rootjQuery ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this.context = this[0] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( jQuery.isFunction( selector ) ) {
			return typeof rootjQuery.ready !== "undefined" ?
				rootjQuery.ready( selector ) :
				// Execute immediately if ready is not present
				selector( jQuery );
		}

		if ( selector.selector !== undefined ) {
			this.selector = selector.selector;
			this.context = selector.context;
		}

		return jQuery.makeArray( selector, this );
	};

// Give the init function the jQuery prototype for later instantiation
init.prototype = jQuery.fn;

// Initialize central reference
rootjQuery = jQuery( document );


var rparentsprev = /^(?:parents|prev(?:Until|All))/,
	// methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.extend({
	dir: function( elem, dir, until ) {
		var matched = [],
			cur = elem[ dir ];

		while ( cur && cur.nodeType !== 9 && (until === undefined || cur.nodeType !== 1 || !jQuery( cur ).is( until )) ) {
			if ( cur.nodeType === 1 ) {
				matched.push( cur );
			}
			cur = cur[dir];
		}
		return matched;
	},

	sibling: function( n, elem ) {
		var r = [];

		for ( ; n; n = n.nextSibling ) {
			if ( n.nodeType === 1 && n !== elem ) {
				r.push( n );
			}
		}

		return r;
	}
});

jQuery.fn.extend({
	has: function( target ) {
		var i,
			targets = jQuery( target, this ),
			len = targets.length;

		return this.filter(function() {
			for ( i = 0; i < len; i++ ) {
				if ( jQuery.contains( this, targets[i] ) ) {
					return true;
				}
			}
		});
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			matched = [],
			pos = rneedsContext.test( selectors ) || typeof selectors !== "string" ?
				jQuery( selectors, context || this.context ) :
				0;

		for ( ; i < l; i++ ) {
			for ( cur = this[i]; cur && cur !== context; cur = cur.parentNode ) {
				// Always skip document fragments
				if ( cur.nodeType < 11 && (pos ?
					pos.index(cur) > -1 :

					// Don't pass non-elements to Sizzle
					cur.nodeType === 1 &&
						jQuery.find.matchesSelector(cur, selectors)) ) {

					matched.push( cur );
					break;
				}
			}
		}

		return this.pushStack( matched.length > 1 ? jQuery.unique( matched ) : matched );
	},

	// Determine the position of an element within
	// the matched set of elements
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[0] && this[0].parentNode ) ? this.first().prevAll().length : -1;
		}

		// index in selector
		if ( typeof elem === "string" ) {
			return jQuery.inArray( this[0], jQuery( elem ) );
		}

		// Locate the position of the desired element
		return jQuery.inArray(
			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[0] : elem, this );
	},

	add: function( selector, context ) {
		return this.pushStack(
			jQuery.unique(
				jQuery.merge( this.get(), jQuery( selector, context ) )
			)
		);
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter(selector)
		);
	}
});

function sibling( cur, dir ) {
	do {
		cur = cur[ dir ];
	} while ( cur && cur.nodeType !== 1 );

	return cur;
}

jQuery.each({
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return jQuery.dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return jQuery.dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return jQuery.dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return jQuery.sibling( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return jQuery.sibling( elem.firstChild );
	},
	contents: function( elem ) {
		return jQuery.nodeName( elem, "iframe" ) ?
			elem.contentDocument || elem.contentWindow.document :
			jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var ret = jQuery.map( this, fn, until );

		if ( name.slice( -5 ) !== "Until" ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			ret = jQuery.filter( selector, ret );
		}

		if ( this.length > 1 ) {
			// Remove duplicates
			if ( !guaranteedUnique[ name ] ) {
				ret = jQuery.unique( ret );
			}

			// Reverse order for parents* and prev-derivatives
			if ( rparentsprev.test( name ) ) {
				ret = ret.reverse();
			}
		}

		return this.pushStack( ret );
	};
});
var rnotwhite = (/\S+/g);



// String to Object options format cache
var optionsCache = {};

// Convert String-formatted options into Object-formatted ones and store in cache
function createOptions( options ) {
	var object = optionsCache[ options ] = {};
	jQuery.each( options.match( rnotwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	});
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		( optionsCache[ options ] || createOptions( options ) ) :
		jQuery.extend( {}, options );

	var // Flag to know if list is currently firing
		firing,
		// Last fire value (for non-forgettable lists)
		memory,
		// Flag to know if list was already fired
		fired,
		// End of the loop when firing
		firingLength,
		// Index of currently firing callback (modified by remove if needed)
		firingIndex,
		// First callback to fire (used internally by add and fireWith)
		firingStart,
		// Actual callback list
		list = [],
		// Stack of fire calls for repeatable lists
		stack = !options.once && [],
		// Fire callbacks
		fire = function( data ) {
			memory = options.memory && data;
			fired = true;
			firingIndex = firingStart || 0;
			firingStart = 0;
			firingLength = list.length;
			firing = true;
			for ( ; list && firingIndex < firingLength; firingIndex++ ) {
				if ( list[ firingIndex ].apply( data[ 0 ], data[ 1 ] ) === false && options.stopOnFalse ) {
					memory = false; // To prevent further calls using add
					break;
				}
			}
			firing = false;
			if ( list ) {
				if ( stack ) {
					if ( stack.length ) {
						fire( stack.shift() );
					}
				} else if ( memory ) {
					list = [];
				} else {
					self.disable();
				}
			}
		},
		// Actual Callbacks object
		self = {
			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {
					// First, we save the current length
					var start = list.length;
					(function add( args ) {
						jQuery.each( args, function( _, arg ) {
							var type = jQuery.type( arg );
							if ( type === "function" ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && type !== "string" ) {
								// Inspect recursively
								add( arg );
							}
						});
					})( arguments );
					// Do we need to add the callbacks to the
					// current firing batch?
					if ( firing ) {
						firingLength = list.length;
					// With memory, if we're not firing then
					// we should call right away
					} else if ( memory ) {
						firingStart = start;
						fire( memory );
					}
				}
				return this;
			},
			// Remove a callback from the list
			remove: function() {
				if ( list ) {
					jQuery.each( arguments, function( _, arg ) {
						var index;
						while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
							list.splice( index, 1 );
							// Handle firing indexes
							if ( firing ) {
								if ( index <= firingLength ) {
									firingLength--;
								}
								if ( index <= firingIndex ) {
									firingIndex--;
								}
							}
						}
					});
				}
				return this;
			},
			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ? jQuery.inArray( fn, list ) > -1 : !!( list && list.length );
			},
			// Remove all callbacks from the list
			empty: function() {
				list = [];
				firingLength = 0;
				return this;
			},
			// Have the list do nothing anymore
			disable: function() {
				list = stack = memory = undefined;
				return this;
			},
			// Is it disabled?
			disabled: function() {
				return !list;
			},
			// Lock the list in its current state
			lock: function() {
				stack = undefined;
				if ( !memory ) {
					self.disable();
				}
				return this;
			},
			// Is it locked?
			locked: function() {
				return !stack;
			},
			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				if ( list && ( !fired || stack ) ) {
					args = args || [];
					args = [ context, args.slice ? args.slice() : args ];
					if ( firing ) {
						stack.push( args );
					} else {
						fire( args );
					}
				}
				return this;
			},
			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},
			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};


jQuery.extend({

	Deferred: function( func ) {
		var tuples = [
				// action, add listener, listener list, final state
				[ "resolve", "done", jQuery.Callbacks("once memory"), "resolved" ],
				[ "reject", "fail", jQuery.Callbacks("once memory"), "rejected" ],
				[ "notify", "progress", jQuery.Callbacks("memory") ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				then: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;
					return jQuery.Deferred(function( newDefer ) {
						jQuery.each( tuples, function( i, tuple ) {
							var fn = jQuery.isFunction( fns[ i ] ) && fns[ i ];
							// deferred[ done | fail | progress ] for forwarding actions to newDefer
							deferred[ tuple[1] ](function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && jQuery.isFunction( returned.promise ) ) {
									returned.promise()
										.done( newDefer.resolve )
										.fail( newDefer.reject )
										.progress( newDefer.notify );
								} else {
									newDefer[ tuple[ 0 ] + "With" ]( this === promise ? newDefer.promise() : this, fn ? [ returned ] : arguments );
								}
							});
						});
						fns = null;
					}).promise();
				},
				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Keep pipe for back-compat
		promise.pipe = promise.then;

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 3 ];

			// promise[ done | fail | progress ] = list.add
			promise[ tuple[1] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add(function() {
					// state = [ resolved | rejected ]
					state = stateString;

				// [ reject_list | resolve_list ].disable; progress_list.lock
				}, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );
			}

			// deferred[ resolve | reject | notify ]
			deferred[ tuple[0] ] = function() {
				deferred[ tuple[0] + "With" ]( this === deferred ? promise : this, arguments );
				return this;
			};
			deferred[ tuple[0] + "With" ] = list.fireWith;
		});

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( subordinate /* , ..., subordinateN */ ) {
		var i = 0,
			resolveValues = slice.call( arguments ),
			length = resolveValues.length,

			// the count of uncompleted subordinates
			remaining = length !== 1 || ( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,

			// the master Deferred. If resolveValues consist of only a single Deferred, just use that.
			deferred = remaining === 1 ? subordinate : jQuery.Deferred(),

			// Update function for both resolve and progress values
			updateFunc = function( i, contexts, values ) {
				return function( value ) {
					contexts[ i ] = this;
					values[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
					if ( values === progressValues ) {
						deferred.notifyWith( contexts, values );

					} else if ( !(--remaining) ) {
						deferred.resolveWith( contexts, values );
					}
				};
			},

			progressValues, progressContexts, resolveContexts;

		// add listeners to Deferred subordinates; treat others as resolved
		if ( length > 1 ) {
			progressValues = new Array( length );
			progressContexts = new Array( length );
			resolveContexts = new Array( length );
			for ( ; i < length; i++ ) {
				if ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {
					resolveValues[ i ].promise()
						.done( updateFunc( i, resolveContexts, resolveValues ) )
						.fail( deferred.reject )
						.progress( updateFunc( i, progressContexts, progressValues ) );
				} else {
					--remaining;
				}
			}
		}

		// if we're not waiting on anything, resolve the master
		if ( !remaining ) {
			deferred.resolveWith( resolveContexts, resolveValues );
		}

		return deferred.promise();
	}
});


// The deferred used on DOM ready
var readyList;

jQuery.fn.ready = function( fn ) {
	// Add the callback
	jQuery.ready.promise().done( fn );

	return this;
};

jQuery.extend({
	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Hold (or release) the ready event
	holdReady: function( hold ) {
		if ( hold ) {
			jQuery.readyWait++;
		} else {
			jQuery.ready( true );
		}
	},

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Make sure body exists, at least, in case IE gets a little overzealous (ticket #5443).
		if ( !document.body ) {
			return setTimeout( jQuery.ready );
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );

		// Trigger any bound ready events
		if ( jQuery.fn.triggerHandler ) {
			jQuery( document ).triggerHandler( "ready" );
			jQuery( document ).off( "ready" );
		}
	}
});

/**
 * Clean-up method for dom ready events
 */
function detach() {
	if ( document.addEventListener ) {
		document.removeEventListener( "DOMContentLoaded", completed, false );
		window.removeEventListener( "load", completed, false );

	} else {
		document.detachEvent( "onreadystatechange", completed );
		window.detachEvent( "onload", completed );
	}
}

/**
 * The ready event handler and self cleanup method
 */
function completed() {
	// readyState === "complete" is good enough for us to call the dom ready in oldIE
	if ( document.addEventListener || event.type === "load" || document.readyState === "complete" ) {
		detach();
		jQuery.ready();
	}
}

jQuery.ready.promise = function( obj ) {
	if ( !readyList ) {

		readyList = jQuery.Deferred();

		// Catch cases where $(document).ready() is called after the browser event has already occurred.
		// we once tried to use readyState "interactive" here, but it caused issues like the one
		// discovered by ChrisS here: http://bugs.jquery.com/ticket/12282#comment:15
		if ( document.readyState === "complete" ) {
			// Handle it asynchronously to allow scripts the opportunity to delay ready
			setTimeout( jQuery.ready );

		// Standards-based browsers support DOMContentLoaded
		} else if ( document.addEventListener ) {
			// Use the handy event callback
			document.addEventListener( "DOMContentLoaded", completed, false );

			// A fallback to window.onload, that will always work
			window.addEventListener( "load", completed, false );

		// If IE event model is used
		} else {
			// Ensure firing before onload, maybe late but safe also for iframes
			document.attachEvent( "onreadystatechange", completed );

			// A fallback to window.onload, that will always work
			window.attachEvent( "onload", completed );

			// If IE and not a frame
			// continually check to see if the document is ready
			var top = false;

			try {
				top = window.frameElement == null && document.documentElement;
			} catch(e) {}

			if ( top && top.doScroll ) {
				(function doScrollCheck() {
					if ( !jQuery.isReady ) {

						try {
							// Use the trick by Diego Perini
							// http://javascript.nwbox.com/IEContentLoaded/
							top.doScroll("left");
						} catch(e) {
							return setTimeout( doScrollCheck, 50 );
						}

						// detach all dom ready events
						detach();

						// and execute any waiting functions
						jQuery.ready();
					}
				})();
			}
		}
	}
	return readyList.promise( obj );
};


var strundefined = typeof undefined;



// Support: IE<9
// Iteration over object's inherited properties before its own
var i;
for ( i in jQuery( support ) ) {
	break;
}
support.ownLast = i !== "0";

// Note: most support tests are defined in their respective modules.
// false until the test is run
support.inlineBlockNeedsLayout = false;

// Execute ASAP in case we need to set body.style.zoom
jQuery(function() {
	// Minified: var a,b,c,d
	var val, div, body, container;

	body = document.getElementsByTagName( "body" )[ 0 ];
	if ( !body || !body.style ) {
		// Return for frameset docs that don't have a body
		return;
	}

	// Setup
	div = document.createElement( "div" );
	container = document.createElement( "div" );
	container.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px";
	body.appendChild( container ).appendChild( div );

	if ( typeof div.style.zoom !== strundefined ) {
		// Support: IE<8
		// Check if natively block-level elements act like inline-block
		// elements when setting their display to 'inline' and giving
		// them layout
		div.style.cssText = "display:inline;margin:0;border:0;padding:1px;width:1px;zoom:1";

		support.inlineBlockNeedsLayout = val = div.offsetWidth === 3;
		if ( val ) {
			// Prevent IE 6 from affecting layout for positioned elements #11048
			// Prevent IE from shrinking the body in IE 7 mode #12869
			// Support: IE<8
			body.style.zoom = 1;
		}
	}

	body.removeChild( container );
});




(function() {
	var div = document.createElement( "div" );

	// Execute the test only if not already executed in another module.
	if (support.deleteExpando == null) {
		// Support: IE<9
		support.deleteExpando = true;
		try {
			delete div.test;
		} catch( e ) {
			support.deleteExpando = false;
		}
	}

	// Null elements to avoid leaks in IE.
	div = null;
})();


/**
 * Determines whether an object can have data
 */
jQuery.acceptData = function( elem ) {
	var noData = jQuery.noData[ (elem.nodeName + " ").toLowerCase() ],
		nodeType = +elem.nodeType || 1;

	// Do not set data on non-element DOM nodes because it will not be cleared (#8335).
	return nodeType !== 1 && nodeType !== 9 ?
		false :

		// Nodes accept data unless otherwise specified; rejection can be conditional
		!noData || noData !== true && elem.getAttribute("classid") === noData;
};


var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	rmultiDash = /([A-Z])/g;

function dataAttr( elem, key, data ) {
	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {

		var name = "data-" + key.replace( rmultiDash, "-$1" ).toLowerCase();

		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = data === "true" ? true :
					data === "false" ? false :
					data === "null" ? null :
					// Only convert to a number if it doesn't change the string
					+data + "" === data ? +data :
					rbrace.test( data ) ? jQuery.parseJSON( data ) :
					data;
			} catch( e ) {}

			// Make sure we set the data so it isn't changed later
			jQuery.data( elem, key, data );

		} else {
			data = undefined;
		}
	}

	return data;
}

// checks a cache object for emptiness
function isEmptyDataObject( obj ) {
	var name;
	for ( name in obj ) {

		// if the public data object is empty, the private is still empty
		if ( name === "data" && jQuery.isEmptyObject( obj[name] ) ) {
			continue;
		}
		if ( name !== "toJSON" ) {
			return false;
		}
	}

	return true;
}

function internalData( elem, name, data, pvt /* Internal Use Only */ ) {
	if ( !jQuery.acceptData( elem ) ) {
		return;
	}

	var ret, thisCache,
		internalKey = jQuery.expando,

		// We have to handle DOM nodes and JS objects differently because IE6-7
		// can't GC object references properly across the DOM-JS boundary
		isNode = elem.nodeType,

		// Only DOM nodes need the global jQuery cache; JS object data is
		// attached directly to the object so GC can occur automatically
		cache = isNode ? jQuery.cache : elem,

		// Only defining an ID for JS objects if its cache already exists allows
		// the code to shortcut on the same path as a DOM node with no cache
		id = isNode ? elem[ internalKey ] : elem[ internalKey ] && internalKey;

	// Avoid doing any more work than we need to when trying to get data on an
	// object that has no data at all
	if ( (!id || !cache[id] || (!pvt && !cache[id].data)) && data === undefined && typeof name === "string" ) {
		return;
	}

	if ( !id ) {
		// Only DOM nodes need a new unique ID for each element since their data
		// ends up in the global cache
		if ( isNode ) {
			id = elem[ internalKey ] = deletedIds.pop() || jQuery.guid++;
		} else {
			id = internalKey;
		}
	}

	if ( !cache[ id ] ) {
		// Avoid exposing jQuery metadata on plain JS objects when the object
		// is serialized using JSON.stringify
		cache[ id ] = isNode ? {} : { toJSON: jQuery.noop };
	}

	// An object can be passed to jQuery.data instead of a key/value pair; this gets
	// shallow copied over onto the existing cache
	if ( typeof name === "object" || typeof name === "function" ) {
		if ( pvt ) {
			cache[ id ] = jQuery.extend( cache[ id ], name );
		} else {
			cache[ id ].data = jQuery.extend( cache[ id ].data, name );
		}
	}

	thisCache = cache[ id ];

	// jQuery data() is stored in a separate object inside the object's internal data
	// cache in order to avoid key collisions between internal data and user-defined
	// data.
	if ( !pvt ) {
		if ( !thisCache.data ) {
			thisCache.data = {};
		}

		thisCache = thisCache.data;
	}

	if ( data !== undefined ) {
		thisCache[ jQuery.camelCase( name ) ] = data;
	}

	// Check for both converted-to-camel and non-converted data property names
	// If a data property was specified
	if ( typeof name === "string" ) {

		// First Try to find as-is property data
		ret = thisCache[ name ];

		// Test for null|undefined property data
		if ( ret == null ) {

			// Try to find the camelCased property
			ret = thisCache[ jQuery.camelCase( name ) ];
		}
	} else {
		ret = thisCache;
	}

	return ret;
}

function internalRemoveData( elem, name, pvt ) {
	if ( !jQuery.acceptData( elem ) ) {
		return;
	}

	var thisCache, i,
		isNode = elem.nodeType,

		// See jQuery.data for more information
		cache = isNode ? jQuery.cache : elem,
		id = isNode ? elem[ jQuery.expando ] : jQuery.expando;

	// If there is already no cache entry for this object, there is no
	// purpose in continuing
	if ( !cache[ id ] ) {
		return;
	}

	if ( name ) {

		thisCache = pvt ? cache[ id ] : cache[ id ].data;

		if ( thisCache ) {

			// Support array or space separated string names for data keys
			if ( !jQuery.isArray( name ) ) {

				// try the string as a key before any manipulation
				if ( name in thisCache ) {
					name = [ name ];
				} else {

					// split the camel cased version by spaces unless a key with the spaces exists
					name = jQuery.camelCase( name );
					if ( name in thisCache ) {
						name = [ name ];
					} else {
						name = name.split(" ");
					}
				}
			} else {
				// If "name" is an array of keys...
				// When data is initially created, via ("key", "val") signature,
				// keys will be converted to camelCase.
				// Since there is no way to tell _how_ a key was added, remove
				// both plain key and camelCase key. #12786
				// This will only penalize the array argument path.
				name = name.concat( jQuery.map( name, jQuery.camelCase ) );
			}

			i = name.length;
			while ( i-- ) {
				delete thisCache[ name[i] ];
			}

			// If there is no data left in the cache, we want to continue
			// and let the cache object itself get destroyed
			if ( pvt ? !isEmptyDataObject(thisCache) : !jQuery.isEmptyObject(thisCache) ) {
				return;
			}
		}
	}

	// See jQuery.data for more information
	if ( !pvt ) {
		delete cache[ id ].data;

		// Don't destroy the parent cache unless the internal data object
		// had been the only thing left in it
		if ( !isEmptyDataObject( cache[ id ] ) ) {
			return;
		}
	}

	// Destroy the cache
	if ( isNode ) {
		jQuery.cleanData( [ elem ], true );

	// Use delete when supported for expandos or `cache` is not a window per isWindow (#10080)
	/* jshint eqeqeq: false */
	} else if ( support.deleteExpando || cache != cache.window ) {
		/* jshint eqeqeq: true */
		delete cache[ id ];

	// When all else fails, null
	} else {
		cache[ id ] = null;
	}
}

jQuery.extend({
	cache: {},

	// The following elements (space-suffixed to avoid Object.prototype collisions)
	// throw uncatchable exceptions if you attempt to set expando properties
	noData: {
		"applet ": true,
		"embed ": true,
		// ...but Flash objects (which have this classid) *can* handle expandos
		"object ": "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"
	},

	hasData: function( elem ) {
		elem = elem.nodeType ? jQuery.cache[ elem[jQuery.expando] ] : elem[ jQuery.expando ];
		return !!elem && !isEmptyDataObject( elem );
	},

	data: function( elem, name, data ) {
		return internalData( elem, name, data );
	},

	removeData: function( elem, name ) {
		return internalRemoveData( elem, name );
	},

	// For internal use only.
	_data: function( elem, name, data ) {
		return internalData( elem, name, data, true );
	},

	_removeData: function( elem, name ) {
		return internalRemoveData( elem, name, true );
	}
});

jQuery.fn.extend({
	data: function( key, value ) {
		var i, name, data,
			elem = this[0],
			attrs = elem && elem.attributes;

		// Special expections of .data basically thwart jQuery.access,
		// so implement the relevant behavior ourselves

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = jQuery.data( elem );

				if ( elem.nodeType === 1 && !jQuery._data( elem, "parsedAttrs" ) ) {
					i = attrs.length;
					while ( i-- ) {

						// Support: IE11+
						// The attrs elements can be null (#14894)
						if ( attrs[ i ] ) {
							name = attrs[ i ].name;
							if ( name.indexOf( "data-" ) === 0 ) {
								name = jQuery.camelCase( name.slice(5) );
								dataAttr( elem, name, data[ name ] );
							}
						}
					}
					jQuery._data( elem, "parsedAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each(function() {
				jQuery.data( this, key );
			});
		}

		return arguments.length > 1 ?

			// Sets one value
			this.each(function() {
				jQuery.data( this, key, value );
			}) :

			// Gets one value
			// Try to fetch any internally stored data first
			elem ? dataAttr( elem, key, jQuery.data( elem, key ) ) : undefined;
	},

	removeData: function( key ) {
		return this.each(function() {
			jQuery.removeData( this, key );
		});
	}
});


jQuery.extend({
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = jQuery._data( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || jQuery.isArray(data) ) {
					queue = jQuery._data( elem, type, jQuery.makeArray(data) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// not intended for public consumption - generates a queueHooks object, or returns the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return jQuery._data( elem, key ) || jQuery._data( elem, key, {
			empty: jQuery.Callbacks("once memory").add(function() {
				jQuery._removeData( elem, type + "queue" );
				jQuery._removeData( elem, key );
			})
		});
	}
});

jQuery.fn.extend({
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[0], type );
		}

		return data === undefined ?
			this :
			this.each(function() {
				var queue = jQuery.queue( this, type, data );

				// ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[0] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			});
	},
	dequeue: function( type ) {
		return this.each(function() {
			jQuery.dequeue( this, type );
		});
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},
	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while ( i-- ) {
			tmp = jQuery._data( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
});
var pnum = (/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/).source;

var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

var isHidden = function( elem, el ) {
		// isHidden might be called from jQuery#filter function;
		// in that case, element will be second argument
		elem = el || elem;
		return jQuery.css( elem, "display" ) === "none" || !jQuery.contains( elem.ownerDocument, elem );
	};



// Multifunctional method to get and set values of a collection
// The value/s can optionally be executed if it's a function
var access = jQuery.access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
	var i = 0,
		length = elems.length,
		bulk = key == null;

	// Sets many values
	if ( jQuery.type( key ) === "object" ) {
		chainable = true;
		for ( i in key ) {
			jQuery.access( elems, fn, i, key[i], true, emptyGet, raw );
		}

	// Sets one value
	} else if ( value !== undefined ) {
		chainable = true;

		if ( !jQuery.isFunction( value ) ) {
			raw = true;
		}

		if ( bulk ) {
			// Bulk operations run against the entire set
			if ( raw ) {
				fn.call( elems, value );
				fn = null;

			// ...except when executing function values
			} else {
				bulk = fn;
				fn = function( elem, key, value ) {
					return bulk.call( jQuery( elem ), value );
				};
			}
		}

		if ( fn ) {
			for ( ; i < length; i++ ) {
				fn( elems[i], key, raw ? value : value.call( elems[i], i, fn( elems[i], key ) ) );
			}
		}
	}

	return chainable ?
		elems :

		// Gets
		bulk ?
			fn.call( elems ) :
			length ? fn( elems[0], key ) : emptyGet;
};
var rcheckableType = (/^(?:checkbox|radio)$/i);



(function() {
	// Minified: var a,b,c
	var input = document.createElement( "input" ),
		div = document.createElement( "div" ),
		fragment = document.createDocumentFragment();

	// Setup
	div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";

	// IE strips leading whitespace when .innerHTML is used
	support.leadingWhitespace = div.firstChild.nodeType === 3;

	// Make sure that tbody elements aren't automatically inserted
	// IE will insert them into empty tables
	support.tbody = !div.getElementsByTagName( "tbody" ).length;

	// Make sure that link elements get serialized correctly by innerHTML
	// This requires a wrapper element in IE
	support.htmlSerialize = !!div.getElementsByTagName( "link" ).length;

	// Makes sure cloning an html5 element does not cause problems
	// Where outerHTML is undefined, this still works
	support.html5Clone =
		document.createElement( "nav" ).cloneNode( true ).outerHTML !== "<:nav></:nav>";

	// Check if a disconnected checkbox will retain its checked
	// value of true after appended to the DOM (IE6/7)
	input.type = "checkbox";
	input.checked = true;
	fragment.appendChild( input );
	support.appendChecked = input.checked;

	// Make sure textarea (and checkbox) defaultValue is properly cloned
	// Support: IE6-IE11+
	div.innerHTML = "<textarea>x</textarea>";
	support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;

	// #11217 - WebKit loses check when the name is after the checked attribute
	fragment.appendChild( div );
	div.innerHTML = "<input type='radio' checked='checked' name='t'/>";

	// Support: Safari 5.1, iOS 5.1, Android 4.x, Android 2.3
	// old WebKit doesn't clone checked state correctly in fragments
	support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Support: IE<9
	// Opera does not clone events (and typeof div.attachEvent === undefined).
	// IE9-10 clones events bound via attachEvent, but they don't trigger with .click()
	support.noCloneEvent = true;
	if ( div.attachEvent ) {
		div.attachEvent( "onclick", function() {
			support.noCloneEvent = false;
		});

		div.cloneNode( true ).click();
	}

	// Execute the test only if not already executed in another module.
	if (support.deleteExpando == null) {
		// Support: IE<9
		support.deleteExpando = true;
		try {
			delete div.test;
		} catch( e ) {
			support.deleteExpando = false;
		}
	}
})();


(function() {
	var i, eventName,
		div = document.createElement( "div" );

	// Support: IE<9 (lack submit/change bubble), Firefox 23+ (lack focusin event)
	for ( i in { submit: true, change: true, focusin: true }) {
		eventName = "on" + i;

		if ( !(support[ i + "Bubbles" ] = eventName in window) ) {
			// Beware of CSP restrictions (https://developer.mozilla.org/en/Security/CSP)
			div.setAttribute( eventName, "t" );
			support[ i + "Bubbles" ] = div.attributes[ eventName ].expando === false;
		}
	}

	// Null elements to avoid leaks in IE.
	div = null;
})();


var rformElems = /^(?:input|select|textarea)$/i,
	rkeyEvent = /^key/,
	rmouseEvent = /^(?:mouse|pointer|contextmenu)|click/,
	rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	rtypenamespace = /^([^.]*)(?:\.(.+)|)$/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

function safeActiveElement() {
	try {
		return document.activeElement;
	} catch ( err ) { }
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {
		var tmp, events, t, handleObjIn,
			special, eventHandle, handleObj,
			handlers, type, namespaces, origType,
			elemData = jQuery._data( elem );

		// Don't attach events to noData or text/comment nodes (but allow plain objects)
		if ( !elemData ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !(events = elemData.events) ) {
			events = elemData.events = {};
		}
		if ( !(eventHandle = elemData.handle) ) {
			eventHandle = elemData.handle = function( e ) {
				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== strundefined && (!e || jQuery.event.triggered !== e.type) ?
					jQuery.event.dispatch.apply( eventHandle.elem, arguments ) :
					undefined;
			};
			// Add elem as a property of the handle fn to prevent a memory leak with IE non-native events
			eventHandle.elem = elem;
		}

		// Handle multiple events separated by a space
		types = ( types || "" ).match( rnotwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[t] ) || [];
			type = origType = tmp[1];
			namespaces = ( tmp[2] || "" ).split( "." ).sort();

			// There *must* be a type, no attaching namespace-only handlers
			if ( !type ) {
				continue;
			}

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend({
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join(".")
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !(handlers = events[ type ]) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener/attachEvent if the special events handler returns false
				if ( !special.setup || special.setup.call( elem, data, namespaces, eventHandle ) === false ) {
					// Bind the global event handler to the element
					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle, false );

					} else if ( elem.attachEvent ) {
						elem.attachEvent( "on" + type, eventHandle );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

		// Nullify elem to prevent memory leaks in IE
		elem = null;
	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {
		var j, handleObj, tmp,
			origCount, t, events,
			special, handlers, type,
			namespaces, origType,
			elemData = jQuery.hasData( elem ) && jQuery._data( elem );

		if ( !elemData || !(events = elemData.events) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( rnotwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[t] ) || [];
			type = origType = tmp[1];
			namespaces = ( tmp[2] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[2] && new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector || selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown || special.teardown.call( elem, namespaces, elemData.handle ) === false ) {
					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			delete elemData.handle;

			// removeData also checks for emptiness and clears the expando if empty
			// so use it instead of delete
			jQuery._removeData( elem, "events" );
		}
	},

	trigger: function( event, data, elem, onlyHandlers ) {
		var handle, ontype, cur,
			bubbleType, special, tmp, i,
			eventPath = [ elem || document ],
			type = hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split(".") : [];

		cur = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf(".") >= 0 ) {
			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split(".");
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf(":") < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
		event.isTrigger = onlyHandlers ? 2 : 3;
		event.namespace = namespaces.join(".");
		event.namespace_re = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === (elem.ownerDocument || document) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( (cur = eventPath[i++]) && !event.isPropagationStopped() ) {

			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = ( jQuery._data( cur, "events" ) || {} )[ event.type ] && jQuery._data( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && handle.apply && jQuery.acceptData( cur ) ) {
				event.result = handle.apply( cur, data );
				if ( event.result === false ) {
					event.preventDefault();
				}
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( (!special._default || special._default.apply( eventPath.pop(), data ) === false) &&
				jQuery.acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name name as the event.
				// Can't use an .isFunction() check here because IE6/7 fails that test.
				// Don't do default actions on window, that's where global variables be (#6170)
				if ( ontype && elem[ type ] && !jQuery.isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;
					try {
						elem[ type ]();
					} catch ( e ) {
						// IE<9 dies on focus/blur to hidden element (#1486,#12518)
						// only reproducible on winXP IE8 native, not IE9 in IE8 mode
					}
					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	dispatch: function( event ) {

		// Make a writable jQuery.Event from the native event object
		event = jQuery.event.fix( event );

		var i, ret, handleObj, matched, j,
			handlerQueue = [],
			args = slice.call( arguments ),
			handlers = ( jQuery._data( this, "events" ) || {} )[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[0] = event;
		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( (matched = handlerQueue[ i++ ]) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( (handleObj = matched.handlers[ j++ ]) && !event.isImmediatePropagationStopped() ) {

				// Triggered event must either 1) have no namespace, or
				// 2) have namespace(s) a subset or equal to those in the bound event (both can have no namespace).
				if ( !event.namespace_re || event.namespace_re.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( (jQuery.event.special[ handleObj.origType ] || {}).handle || handleObj.handler )
							.apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( (event.result = ret) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var sel, handleObj, matches, i,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Find delegate handlers
		// Black-hole SVG <use> instance trees (#13180)
		// Avoid non-left-click bubbling in Firefox (#3861)
		if ( delegateCount && cur.nodeType && (!event.button || event.type !== "click") ) {

			/* jshint eqeqeq: false */
			for ( ; cur != this; cur = cur.parentNode || this ) {
				/* jshint eqeqeq: true */

				// Don't check non-elements (#13208)
				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
				if ( cur.nodeType === 1 && (cur.disabled !== true || event.type !== "click") ) {
					matches = [];
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (#13203)
						sel = handleObj.selector + " ";

						if ( matches[ sel ] === undefined ) {
							matches[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) >= 0 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matches[ sel ] ) {
							matches.push( handleObj );
						}
					}
					if ( matches.length ) {
						handlerQueue.push({ elem: cur, handlers: matches });
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		if ( delegateCount < handlers.length ) {
			handlerQueue.push({ elem: this, handlers: handlers.slice( delegateCount ) });
		}

		return handlerQueue;
	},

	fix: function( event ) {
		if ( event[ jQuery.expando ] ) {
			return event;
		}

		// Create a writable copy of the event object and normalize some properties
		var i, prop, copy,
			type = event.type,
			originalEvent = event,
			fixHook = this.fixHooks[ type ];

		if ( !fixHook ) {
			this.fixHooks[ type ] = fixHook =
				rmouseEvent.test( type ) ? this.mouseHooks :
				rkeyEvent.test( type ) ? this.keyHooks :
				{};
		}
		copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;

		event = new jQuery.Event( originalEvent );

		i = copy.length;
		while ( i-- ) {
			prop = copy[ i ];
			event[ prop ] = originalEvent[ prop ];
		}

		// Support: IE<9
		// Fix target property (#1925)
		if ( !event.target ) {
			event.target = originalEvent.srcElement || document;
		}

		// Support: Chrome 23+, Safari?
		// Target should not be a text node (#504, #13143)
		if ( event.target.nodeType === 3 ) {
			event.target = event.target.parentNode;
		}

		// Support: IE<9
		// For mouse/key events, metaKey==false if it's undefined (#3368, #11328)
		event.metaKey = !!event.metaKey;

		return fixHook.filter ? fixHook.filter( event, originalEvent ) : event;
	},

	// Includes some event props shared by KeyEvent and MouseEvent
	props: "altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),

	fixHooks: {},

	keyHooks: {
		props: "char charCode key keyCode".split(" "),
		filter: function( event, original ) {

			// Add which for key events
			if ( event.which == null ) {
				event.which = original.charCode != null ? original.charCode : original.keyCode;
			}

			return event;
		}
	},

	mouseHooks: {
		props: "button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
		filter: function( event, original ) {
			var body, eventDoc, doc,
				button = original.button,
				fromElement = original.fromElement;

			// Calculate pageX/Y if missing and clientX/Y available
			if ( event.pageX == null && original.clientX != null ) {
				eventDoc = event.target.ownerDocument || document;
				doc = eventDoc.documentElement;
				body = eventDoc.body;

				event.pageX = original.clientX + ( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) - ( doc && doc.clientLeft || body && body.clientLeft || 0 );
				event.pageY = original.clientY + ( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) - ( doc && doc.clientTop  || body && body.clientTop  || 0 );
			}

			// Add relatedTarget, if necessary
			if ( !event.relatedTarget && fromElement ) {
				event.relatedTarget = fromElement === event.target ? original.toElement : fromElement;
			}

			// Add which for click: 1 === left; 2 === middle; 3 === right
			// Note: button is not normalized, so don't use it
			if ( !event.which && button !== undefined ) {
				event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
			}

			return event;
		}
	},

	special: {
		load: {
			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		focus: {
			// Fire native event if possible so blur/focus sequence is correct
			trigger: function() {
				if ( this !== safeActiveElement() && this.focus ) {
					try {
						this.focus();
						return false;
					} catch ( e ) {
						// Support: IE<9
						// If we error on focus to hidden element (#1486, #12518),
						// let .trigger() run the handlers
					}
				}
			},
			delegateType: "focusin"
		},
		blur: {
			trigger: function() {
				if ( this === safeActiveElement() && this.blur ) {
					this.blur();
					return false;
				}
			},
			delegateType: "focusout"
		},
		click: {
			// For checkbox, fire native event so checked state will be right
			trigger: function() {
				if ( jQuery.nodeName( this, "input" ) && this.type === "checkbox" && this.click ) {
					this.click();
					return false;
				}
			},

			// For cross-browser consistency, don't fire native .click() on links
			_default: function( event ) {
				return jQuery.nodeName( event.target, "a" );
			}
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Support: Firefox 20+
				// Firefox doesn't alert if the returnValue field is not set.
				if ( event.result !== undefined && event.originalEvent ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	},

	simulate: function( type, elem, event, bubble ) {
		// Piggyback on a donor event to simulate a different one.
		// Fake originalEvent to avoid donor's stopPropagation, but if the
		// simulated event prevents default then we do the same on the donor.
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{
				type: type,
				isSimulated: true,
				originalEvent: {}
			}
		);
		if ( bubble ) {
			jQuery.event.trigger( e, null, elem );
		} else {
			jQuery.event.dispatch.call( elem, e );
		}
		if ( e.isDefaultPrevented() ) {
			event.preventDefault();
		}
	}
};

jQuery.removeEvent = document.removeEventListener ?
	function( elem, type, handle ) {
		if ( elem.removeEventListener ) {
			elem.removeEventListener( type, handle, false );
		}
	} :
	function( elem, type, handle ) {
		var name = "on" + type;

		if ( elem.detachEvent ) {

			// #8545, #7054, preventing memory leaks for custom events in IE6-8
			// detachEvent needed property on element, by name of that event, to properly expose it to GC
			if ( typeof elem[ name ] === strundefined ) {
				elem[ name ] = null;
			}

			elem.detachEvent( name, handle );
		}
	};

jQuery.Event = function( src, props ) {
	// Allow instantiation without the 'new' keyword
	if ( !(this instanceof jQuery.Event) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = src.defaultPrevented ||
				src.defaultPrevented === undefined &&
				// Support: IE < 9, Android < 4.0
				src.returnValue === false ?
			returnTrue :
			returnFalse;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || jQuery.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;
		if ( !e ) {
			return;
		}

		// If preventDefault exists, run it on the original event
		if ( e.preventDefault ) {
			e.preventDefault();

		// Support: IE
		// Otherwise set the returnValue property of the original event to false
		} else {
			e.returnValue = false;
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;
		if ( !e ) {
			return;
		}
		// If stopPropagation exists, run it on the original event
		if ( e.stopPropagation ) {
			e.stopPropagation();
		}

		// Support: IE
		// Set the cancelBubble property of the original event to true
		e.cancelBubble = true;
	},
	stopImmediatePropagation: function() {
		var e = this.originalEvent;

		this.isImmediatePropagationStopped = returnTrue;

		if ( e && e.stopImmediatePropagation ) {
			e.stopImmediatePropagation();
		}

		this.stopPropagation();
	}
};

// Create mouseenter/leave events using mouseover/out and event-time checks
jQuery.each({
	mouseenter: "mouseover",
	mouseleave: "mouseout",
	pointerenter: "pointerover",
	pointerleave: "pointerout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mousenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || (related !== target && !jQuery.contains( target, related )) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
});

// IE submit delegation
if ( !support.submitBubbles ) {

	jQuery.event.special.submit = {
		setup: function() {
			// Only need this for delegated form submit events
			if ( jQuery.nodeName( this, "form" ) ) {
				return false;
			}

			// Lazy-add a submit handler when a descendant form may potentially be submitted
			jQuery.event.add( this, "click._submit keypress._submit", function( e ) {
				// Node name check avoids a VML-related crash in IE (#9807)
				var elem = e.target,
					form = jQuery.nodeName( elem, "input" ) || jQuery.nodeName( elem, "button" ) ? elem.form : undefined;
				if ( form && !jQuery._data( form, "submitBubbles" ) ) {
					jQuery.event.add( form, "submit._submit", function( event ) {
						event._submit_bubble = true;
					});
					jQuery._data( form, "submitBubbles", true );
				}
			});
			// return undefined since we don't need an event listener
		},

		postDispatch: function( event ) {
			// If form was submitted by the user, bubble the event up the tree
			if ( event._submit_bubble ) {
				delete event._submit_bubble;
				if ( this.parentNode && !event.isTrigger ) {
					jQuery.event.simulate( "submit", this.parentNode, event, true );
				}
			}
		},

		teardown: function() {
			// Only need this for delegated form submit events
			if ( jQuery.nodeName( this, "form" ) ) {
				return false;
			}

			// Remove delegated handlers; cleanData eventually reaps submit handlers attached above
			jQuery.event.remove( this, "._submit" );
		}
	};
}

// IE change delegation and checkbox/radio fix
if ( !support.changeBubbles ) {

	jQuery.event.special.change = {

		setup: function() {

			if ( rformElems.test( this.nodeName ) ) {
				// IE doesn't fire change on a check/radio until blur; trigger it on click
				// after a propertychange. Eat the blur-change in special.change.handle.
				// This still fires onchange a second time for check/radio after blur.
				if ( this.type === "checkbox" || this.type === "radio" ) {
					jQuery.event.add( this, "propertychange._change", function( event ) {
						if ( event.originalEvent.propertyName === "checked" ) {
							this._just_changed = true;
						}
					});
					jQuery.event.add( this, "click._change", function( event ) {
						if ( this._just_changed && !event.isTrigger ) {
							this._just_changed = false;
						}
						// Allow triggered, simulated change events (#11500)
						jQuery.event.simulate( "change", this, event, true );
					});
				}
				return false;
			}
			// Delegated event; lazy-add a change handler on descendant inputs
			jQuery.event.add( this, "beforeactivate._change", function( e ) {
				var elem = e.target;

				if ( rformElems.test( elem.nodeName ) && !jQuery._data( elem, "changeBubbles" ) ) {
					jQuery.event.add( elem, "change._change", function( event ) {
						if ( this.parentNode && !event.isSimulated && !event.isTrigger ) {
							jQuery.event.simulate( "change", this.parentNode, event, true );
						}
					});
					jQuery._data( elem, "changeBubbles", true );
				}
			});
		},

		handle: function( event ) {
			var elem = event.target;

			// Swallow native change events from checkbox/radio, we already triggered them above
			if ( this !== elem || event.isSimulated || event.isTrigger || (elem.type !== "radio" && elem.type !== "checkbox") ) {
				return event.handleObj.handler.apply( this, arguments );
			}
		},

		teardown: function() {
			jQuery.event.remove( this, "._change" );

			return !rformElems.test( this.nodeName );
		}
	};
}

// Create "bubbling" focus and blur events
if ( !support.focusinBubbles ) {
	jQuery.each({ focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler on the document while someone wants focusin/focusout
		var handler = function( event ) {
				jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ), true );
			};

		jQuery.event.special[ fix ] = {
			setup: function() {
				var doc = this.ownerDocument || this,
					attaches = jQuery._data( doc, fix );

				if ( !attaches ) {
					doc.addEventListener( orig, handler, true );
				}
				jQuery._data( doc, fix, ( attaches || 0 ) + 1 );
			},
			teardown: function() {
				var doc = this.ownerDocument || this,
					attaches = jQuery._data( doc, fix ) - 1;

				if ( !attaches ) {
					doc.removeEventListener( orig, handler, true );
					jQuery._removeData( doc, fix );
				} else {
					jQuery._data( doc, fix, attaches );
				}
			}
		};
	});
}

jQuery.fn.extend({

	on: function( types, selector, data, fn, /*INTERNAL*/ one ) {
		var type, origFn;

		// Types can be a map of types/handlers
		if ( typeof types === "object" ) {
			// ( types-Object, selector, data )
			if ( typeof selector !== "string" ) {
				// ( types-Object, data )
				data = data || selector;
				selector = undefined;
			}
			for ( type in types ) {
				this.on( type, selector, data, types[ type ], one );
			}
			return this;
		}

		if ( data == null && fn == null ) {
			// ( types, fn )
			fn = selector;
			data = selector = undefined;
		} else if ( fn == null ) {
			if ( typeof selector === "string" ) {
				// ( types, selector, fn )
				fn = data;
				data = undefined;
			} else {
				// ( types, data, fn )
				fn = data;
				data = selector;
				selector = undefined;
			}
		}
		if ( fn === false ) {
			fn = returnFalse;
		} else if ( !fn ) {
			return this;
		}

		if ( one === 1 ) {
			origFn = fn;
			fn = function( event ) {
				// Can use an empty set, since event contains the info
				jQuery().off( event );
				return origFn.apply( this, arguments );
			};
			// Use same guid so caller can remove using origFn
			fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
		}
		return this.each( function() {
			jQuery.event.add( this, types, fn, data, selector );
		});
	},
	one: function( types, selector, data, fn ) {
		return this.on( types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {
			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {
			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {
			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each(function() {
			jQuery.event.remove( this, types, fn, selector );
		});
	},

	trigger: function( type, data ) {
		return this.each(function() {
			jQuery.event.trigger( type, data, this );
		});
	},
	triggerHandler: function( type, data ) {
		var elem = this[0];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
});


function createSafeFragment( document ) {
	var list = nodeNames.split( "|" ),
		safeFrag = document.createDocumentFragment();

	if ( safeFrag.createElement ) {
		while ( list.length ) {
			safeFrag.createElement(
				list.pop()
			);
		}
	}
	return safeFrag;
}

var nodeNames = "abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|" +
		"header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",
	rinlinejQuery = / jQuery\d+="(?:null|\d+)"/g,
	rnoshimcache = new RegExp("<(?:" + nodeNames + ")[\\s/>]", "i"),
	rleadingWhitespace = /^\s+/,
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,
	rtagName = /<([\w:]+)/,
	rtbody = /<tbody/i,
	rhtml = /<|&#?\w+;/,
	rnoInnerhtml = /<(?:script|style|link)/i,
	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rscriptType = /^$|\/(?:java|ecma)script/i,
	rscriptTypeMasked = /^true\/(.*)/,
	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,

	// We have to close these tags to support XHTML (#13200)
	wrapMap = {
		option: [ 1, "<select multiple='multiple'>", "</select>" ],
		legend: [ 1, "<fieldset>", "</fieldset>" ],
		area: [ 1, "<map>", "</map>" ],
		param: [ 1, "<object>", "</object>" ],
		thead: [ 1, "<table>", "</table>" ],
		tr: [ 2, "<table><tbody>", "</tbody></table>" ],
		col: [ 2, "<table><tbody></tbody><colgroup>", "</colgroup></table>" ],
		td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

		// IE6-8 can't serialize link, script, style, or any html5 (NoScope) tags,
		// unless wrapped in a div with non-breaking characters in front of it.
		_default: support.htmlSerialize ? [ 0, "", "" ] : [ 1, "X<div>", "</div>"  ]
	},
	safeFragment = createSafeFragment( document ),
	fragmentDiv = safeFragment.appendChild( document.createElement("div") );

wrapMap.optgroup = wrapMap.option;
wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;

function getAll( context, tag ) {
	var elems, elem,
		i = 0,
		found = typeof context.getElementsByTagName !== strundefined ? context.getElementsByTagName( tag || "*" ) :
			typeof context.querySelectorAll !== strundefined ? context.querySelectorAll( tag || "*" ) :
			undefined;

	if ( !found ) {
		for ( found = [], elems = context.childNodes || context; (elem = elems[i]) != null; i++ ) {
			if ( !tag || jQuery.nodeName( elem, tag ) ) {
				found.push( elem );
			} else {
				jQuery.merge( found, getAll( elem, tag ) );
			}
		}
	}

	return tag === undefined || tag && jQuery.nodeName( context, tag ) ?
		jQuery.merge( [ context ], found ) :
		found;
}

// Used in buildFragment, fixes the defaultChecked property
function fixDefaultChecked( elem ) {
	if ( rcheckableType.test( elem.type ) ) {
		elem.defaultChecked = elem.checked;
	}
}

// Support: IE<8
// Manipulating tables requires a tbody
function manipulationTarget( elem, content ) {
	return jQuery.nodeName( elem, "table" ) &&
		jQuery.nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ?

		elem.getElementsByTagName("tbody")[0] ||
			elem.appendChild( elem.ownerDocument.createElement("tbody") ) :
		elem;
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	elem.type = (jQuery.find.attr( elem, "type" ) !== null) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	var match = rscriptTypeMasked.exec( elem.type );
	if ( match ) {
		elem.type = match[1];
	} else {
		elem.removeAttribute("type");
	}
	return elem;
}

// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var elem,
		i = 0;
	for ( ; (elem = elems[i]) != null; i++ ) {
		jQuery._data( elem, "globalEval", !refElements || jQuery._data( refElements[i], "globalEval" ) );
	}
}

function cloneCopyEvent( src, dest ) {

	if ( dest.nodeType !== 1 || !jQuery.hasData( src ) ) {
		return;
	}

	var type, i, l,
		oldData = jQuery._data( src ),
		curData = jQuery._data( dest, oldData ),
		events = oldData.events;

	if ( events ) {
		delete curData.handle;
		curData.events = {};

		for ( type in events ) {
			for ( i = 0, l = events[ type ].length; i < l; i++ ) {
				jQuery.event.add( dest, type, events[ type ][ i ] );
			}
		}
	}

	// make the cloned public data object a copy from the original
	if ( curData.data ) {
		curData.data = jQuery.extend( {}, curData.data );
	}
}

function fixCloneNodeIssues( src, dest ) {
	var nodeName, e, data;

	// We do not need to do anything for non-Elements
	if ( dest.nodeType !== 1 ) {
		return;
	}

	nodeName = dest.nodeName.toLowerCase();

	// IE6-8 copies events bound via attachEvent when using cloneNode.
	if ( !support.noCloneEvent && dest[ jQuery.expando ] ) {
		data = jQuery._data( dest );

		for ( e in data.events ) {
			jQuery.removeEvent( dest, e, data.handle );
		}

		// Event data gets referenced instead of copied if the expando gets copied too
		dest.removeAttribute( jQuery.expando );
	}

	// IE blanks contents when cloning scripts, and tries to evaluate newly-set text
	if ( nodeName === "script" && dest.text !== src.text ) {
		disableScript( dest ).text = src.text;
		restoreScript( dest );

	// IE6-10 improperly clones children of object elements using classid.
	// IE10 throws NoModificationAllowedError if parent is null, #12132.
	} else if ( nodeName === "object" ) {
		if ( dest.parentNode ) {
			dest.outerHTML = src.outerHTML;
		}

		// This path appears unavoidable for IE9. When cloning an object
		// element in IE9, the outerHTML strategy above is not sufficient.
		// If the src has innerHTML and the destination does not,
		// copy the src.innerHTML into the dest.innerHTML. #10324
		if ( support.html5Clone && ( src.innerHTML && !jQuery.trim(dest.innerHTML) ) ) {
			dest.innerHTML = src.innerHTML;
		}

	} else if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
		// IE6-8 fails to persist the checked state of a cloned checkbox
		// or radio button. Worse, IE6-7 fail to give the cloned element
		// a checked appearance if the defaultChecked value isn't also set

		dest.defaultChecked = dest.checked = src.checked;

		// IE6-7 get confused and end up setting the value of a cloned
		// checkbox/radio button to an empty string instead of "on"
		if ( dest.value !== src.value ) {
			dest.value = src.value;
		}

	// IE6-8 fails to return the selected option to the default selected
	// state when cloning options
	} else if ( nodeName === "option" ) {
		dest.defaultSelected = dest.selected = src.defaultSelected;

	// IE6-8 fails to set the defaultValue to the correct value when
	// cloning other types of input fields
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}

jQuery.extend({
	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var destElements, node, clone, i, srcElements,
			inPage = jQuery.contains( elem.ownerDocument, elem );

		if ( support.html5Clone || jQuery.isXMLDoc(elem) || !rnoshimcache.test( "<" + elem.nodeName + ">" ) ) {
			clone = elem.cloneNode( true );

		// IE<=8 does not properly clone detached, unknown element nodes
		} else {
			fragmentDiv.innerHTML = elem.outerHTML;
			fragmentDiv.removeChild( clone = fragmentDiv.firstChild );
		}

		if ( (!support.noCloneEvent || !support.noCloneChecked) &&
				(elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem) ) {

			// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			// Fix all IE cloning issues
			for ( i = 0; (node = srcElements[i]) != null; ++i ) {
				// Ensure that the destination node is not null; Fixes #9587
				if ( destElements[i] ) {
					fixCloneNodeIssues( node, destElements[i] );
				}
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0; (node = srcElements[i]) != null; i++ ) {
					cloneCopyEvent( node, destElements[i] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		destElements = srcElements = node = null;

		// Return the cloned set
		return clone;
	},

	buildFragment: function( elems, context, scripts, selection ) {
		var j, elem, contains,
			tmp, tag, tbody, wrap,
			l = elems.length,

			// Ensure a safe fragment
			safe = createSafeFragment( context ),

			nodes = [],
			i = 0;

		for ( ; i < l; i++ ) {
			elem = elems[ i ];

			if ( elem || elem === 0 ) {

				// Add nodes directly
				if ( jQuery.type( elem ) === "object" ) {
					jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

				// Convert non-html into a text node
				} else if ( !rhtml.test( elem ) ) {
					nodes.push( context.createTextNode( elem ) );

				// Convert html into DOM nodes
				} else {
					tmp = tmp || safe.appendChild( context.createElement("div") );

					// Deserialize a standard representation
					tag = (rtagName.exec( elem ) || [ "", "" ])[ 1 ].toLowerCase();
					wrap = wrapMap[ tag ] || wrapMap._default;

					tmp.innerHTML = wrap[1] + elem.replace( rxhtmlTag, "<$1></$2>" ) + wrap[2];

					// Descend through wrappers to the right content
					j = wrap[0];
					while ( j-- ) {
						tmp = tmp.lastChild;
					}

					// Manually add leading whitespace removed by IE
					if ( !support.leadingWhitespace && rleadingWhitespace.test( elem ) ) {
						nodes.push( context.createTextNode( rleadingWhitespace.exec( elem )[0] ) );
					}

					// Remove IE's autoinserted <tbody> from table fragments
					if ( !support.tbody ) {

						// String was a <table>, *may* have spurious <tbody>
						elem = tag === "table" && !rtbody.test( elem ) ?
							tmp.firstChild :

							// String was a bare <thead> or <tfoot>
							wrap[1] === "<table>" && !rtbody.test( elem ) ?
								tmp :
								0;

						j = elem && elem.childNodes.length;
						while ( j-- ) {
							if ( jQuery.nodeName( (tbody = elem.childNodes[j]), "tbody" ) && !tbody.childNodes.length ) {
								elem.removeChild( tbody );
							}
						}
					}

					jQuery.merge( nodes, tmp.childNodes );

					// Fix #12392 for WebKit and IE > 9
					tmp.textContent = "";

					// Fix #12392 for oldIE
					while ( tmp.firstChild ) {
						tmp.removeChild( tmp.firstChild );
					}

					// Remember the top-level container for proper cleanup
					tmp = safe.lastChild;
				}
			}
		}

		// Fix #11356: Clear elements from fragment
		if ( tmp ) {
			safe.removeChild( tmp );
		}

		// Reset defaultChecked for any radios and checkboxes
		// about to be appended to the DOM in IE 6/7 (#8060)
		if ( !support.appendChecked ) {
			jQuery.grep( getAll( nodes, "input" ), fixDefaultChecked );
		}

		i = 0;
		while ( (elem = nodes[ i++ ]) ) {

			// #4087 - If origin and destination elements are the same, and this is
			// that element, do not do anything
			if ( selection && jQuery.inArray( elem, selection ) !== -1 ) {
				continue;
			}

			contains = jQuery.contains( elem.ownerDocument, elem );

			// Append to fragment
			tmp = getAll( safe.appendChild( elem ), "script" );

			// Preserve script evaluation history
			if ( contains ) {
				setGlobalEval( tmp );
			}

			// Capture executables
			if ( scripts ) {
				j = 0;
				while ( (elem = tmp[ j++ ]) ) {
					if ( rscriptType.test( elem.type || "" ) ) {
						scripts.push( elem );
					}
				}
			}
		}

		tmp = null;

		return safe;
	},

	cleanData: function( elems, /* internal */ acceptData ) {
		var elem, type, id, data,
			i = 0,
			internalKey = jQuery.expando,
			cache = jQuery.cache,
			deleteExpando = support.deleteExpando,
			special = jQuery.event.special;

		for ( ; (elem = elems[i]) != null; i++ ) {
			if ( acceptData || jQuery.acceptData( elem ) ) {

				id = elem[ internalKey ];
				data = id && cache[ id ];

				if ( data ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}

					// Remove cache only if it was not already removed by jQuery.event.remove
					if ( cache[ id ] ) {

						delete cache[ id ];

						// IE does not allow us to delete expando properties from nodes,
						// nor does it have a removeAttribute function on Document nodes;
						// we must handle all of these cases
						if ( deleteExpando ) {
							delete elem[ internalKey ];

						} else if ( typeof elem.removeAttribute !== strundefined ) {
							elem.removeAttribute( internalKey );

						} else {
							elem[ internalKey ] = null;
						}

						deletedIds.push( id );
					}
				}
			}
		}
	}
});

jQuery.fn.extend({
	text: function( value ) {
		return access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().append( ( this[0] && this[0].ownerDocument || document ).createTextNode( value ) );
		}, null, value, arguments.length );
	},

	append: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.appendChild( elem );
			}
		});
	},

	prepend: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.insertBefore( elem, target.firstChild );
			}
		});
	},

	before: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		});
	},

	after: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		});
	},

	remove: function( selector, keepData /* Internal Use Only */ ) {
		var elem,
			elems = selector ? jQuery.filter( selector, this ) : this,
			i = 0;

		for ( ; (elem = elems[i]) != null; i++ ) {

			if ( !keepData && elem.nodeType === 1 ) {
				jQuery.cleanData( getAll( elem ) );
			}

			if ( elem.parentNode ) {
				if ( keepData && jQuery.contains( elem.ownerDocument, elem ) ) {
					setGlobalEval( getAll( elem, "script" ) );
				}
				elem.parentNode.removeChild( elem );
			}
		}

		return this;
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; (elem = this[i]) != null; i++ ) {
			// Remove element nodes and prevent memory leaks
			if ( elem.nodeType === 1 ) {
				jQuery.cleanData( getAll( elem, false ) );
			}

			// Remove any remaining nodes
			while ( elem.firstChild ) {
				elem.removeChild( elem.firstChild );
			}

			// If this is a select, ensure that it displays empty (#12336)
			// Support: IE<9
			if ( elem.options && jQuery.nodeName( elem, "select" ) ) {
				elem.options.length = 0;
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map(function() {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		});
	},

	html: function( value ) {
		return access( this, function( value ) {
			var elem = this[ 0 ] || {},
				i = 0,
				l = this.length;

			if ( value === undefined ) {
				return elem.nodeType === 1 ?
					elem.innerHTML.replace( rinlinejQuery, "" ) :
					undefined;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				( support.htmlSerialize || !rnoshimcache.test( value )  ) &&
				( support.leadingWhitespace || !rleadingWhitespace.test( value ) ) &&
				!wrapMap[ (rtagName.exec( value ) || [ "", "" ])[ 1 ].toLowerCase() ] ) {

				value = value.replace( rxhtmlTag, "<$1></$2>" );

				try {
					for (; i < l; i++ ) {
						// Remove element nodes and prevent memory leaks
						elem = this[i] || {};
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch(e) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function() {
		var arg = arguments[ 0 ];

		// Make the changes, replacing each context element with the new content
		this.domManip( arguments, function( elem ) {
			arg = this.parentNode;

			jQuery.cleanData( getAll( this ) );

			if ( arg ) {
				arg.replaceChild( elem, this );
			}
		});

		// Force removal if there was no new content (e.g., from empty arguments)
		return arg && (arg.length || arg.nodeType) ? this : this.remove();
	},

	detach: function( selector ) {
		return this.remove( selector, true );
	},

	domManip: function( args, callback ) {

		// Flatten any nested arrays
		args = concat.apply( [], args );

		var first, node, hasScripts,
			scripts, doc, fragment,
			i = 0,
			l = this.length,
			set = this,
			iNoClone = l - 1,
			value = args[0],
			isFunction = jQuery.isFunction( value );

		// We can't cloneNode fragments that contain checked, in WebKit
		if ( isFunction ||
				( l > 1 && typeof value === "string" &&
					!support.checkClone && rchecked.test( value ) ) ) {
			return this.each(function( index ) {
				var self = set.eq( index );
				if ( isFunction ) {
					args[0] = value.call( this, index, self.html() );
				}
				self.domManip( args, callback );
			});
		}

		if ( l ) {
			fragment = jQuery.buildFragment( args, this[ 0 ].ownerDocument, false, this );
			first = fragment.firstChild;

			if ( fragment.childNodes.length === 1 ) {
				fragment = first;
			}

			if ( first ) {
				scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
				hasScripts = scripts.length;

				// Use the original fragment for the last item instead of the first because it can end up
				// being emptied incorrectly in certain situations (#8070).
				for ( ; i < l; i++ ) {
					node = fragment;

					if ( i !== iNoClone ) {
						node = jQuery.clone( node, true, true );

						// Keep references to cloned scripts for later restoration
						if ( hasScripts ) {
							jQuery.merge( scripts, getAll( node, "script" ) );
						}
					}

					callback.call( this[i], node, i );
				}

				if ( hasScripts ) {
					doc = scripts[ scripts.length - 1 ].ownerDocument;

					// Reenable scripts
					jQuery.map( scripts, restoreScript );

					// Evaluate executable scripts on first document insertion
					for ( i = 0; i < hasScripts; i++ ) {
						node = scripts[ i ];
						if ( rscriptType.test( node.type || "" ) &&
							!jQuery._data( node, "globalEval" ) && jQuery.contains( doc, node ) ) {

							if ( node.src ) {
								// Optional AJAX dependency, but won't run scripts if not present
								if ( jQuery._evalUrl ) {
									jQuery._evalUrl( node.src );
								}
							} else {
								jQuery.globalEval( ( node.text || node.textContent || node.innerHTML || "" ).replace( rcleanScript, "" ) );
							}
						}
					}
				}

				// Fix #11809: Avoid leaking memory
				fragment = first = null;
			}
		}

		return this;
	}
});

jQuery.each({
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			i = 0,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone(true);
			jQuery( insert[i] )[ original ]( elems );

			// Modern browsers can apply jQuery collections as arrays, but oldIE needs a .get()
			push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
});


var iframe,
	elemdisplay = {};

/**
 * Retrieve the actual display of a element
 * @param {String} name nodeName of the element
 * @param {Object} doc Document object
 */
// Called only from within defaultDisplay
function actualDisplay( name, doc ) {
	var style,
		elem = jQuery( doc.createElement( name ) ).appendTo( doc.body ),

		// getDefaultComputedStyle might be reliably used only on attached element
		display = window.getDefaultComputedStyle && ( style = window.getDefaultComputedStyle( elem[ 0 ] ) ) ?

			// Use of this method is a temporary fix (more like optmization) until something better comes along,
			// since it was removed from specification and supported only in FF
			style.display : jQuery.css( elem[ 0 ], "display" );

	// We don't have any data stored on the element,
	// so use "detach" method as fast way to get rid of the element
	elem.detach();

	return display;
}

/**
 * Try to determine the default display value of an element
 * @param {String} nodeName
 */
function defaultDisplay( nodeName ) {
	var doc = document,
		display = elemdisplay[ nodeName ];

	if ( !display ) {
		display = actualDisplay( nodeName, doc );

		// If the simple way fails, read from inside an iframe
		if ( display === "none" || !display ) {

			// Use the already-created iframe if possible
			iframe = (iframe || jQuery( "<iframe frameborder='0' width='0' height='0'/>" )).appendTo( doc.documentElement );

			// Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
			doc = ( iframe[ 0 ].contentWindow || iframe[ 0 ].contentDocument ).document;

			// Support: IE
			doc.write();
			doc.close();

			display = actualDisplay( nodeName, doc );
			iframe.detach();
		}

		// Store the correct default display
		elemdisplay[ nodeName ] = display;
	}

	return display;
}


(function() {
	var shrinkWrapBlocksVal;

	support.shrinkWrapBlocks = function() {
		if ( shrinkWrapBlocksVal != null ) {
			return shrinkWrapBlocksVal;
		}

		// Will be changed later if needed.
		shrinkWrapBlocksVal = false;

		// Minified: var b,c,d
		var div, body, container;

		body = document.getElementsByTagName( "body" )[ 0 ];
		if ( !body || !body.style ) {
			// Test fired too early or in an unsupported environment, exit.
			return;
		}

		// Setup
		div = document.createElement( "div" );
		container = document.createElement( "div" );
		container.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px";
		body.appendChild( container ).appendChild( div );

		// Support: IE6
		// Check if elements with layout shrink-wrap their children
		if ( typeof div.style.zoom !== strundefined ) {
			// Reset CSS: box-sizing; display; margin; border
			div.style.cssText =
				// Support: Firefox<29, Android 2.3
				// Vendor-prefix box-sizing
				"-webkit-box-sizing:content-box;-moz-box-sizing:content-box;" +
				"box-sizing:content-box;display:block;margin:0;border:0;" +
				"padding:1px;width:1px;zoom:1";
			div.appendChild( document.createElement( "div" ) ).style.width = "5px";
			shrinkWrapBlocksVal = div.offsetWidth !== 3;
		}

		body.removeChild( container );

		return shrinkWrapBlocksVal;
	};

})();
var rmargin = (/^margin/);

var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );



var getStyles, curCSS,
	rposition = /^(top|right|bottom|left)$/;

if ( window.getComputedStyle ) {
	getStyles = function( elem ) {
		return elem.ownerDocument.defaultView.getComputedStyle( elem, null );
	};

	curCSS = function( elem, name, computed ) {
		var width, minWidth, maxWidth, ret,
			style = elem.style;

		computed = computed || getStyles( elem );

		// getPropertyValue is only needed for .css('filter') in IE9, see #12537
		ret = computed ? computed.getPropertyValue( name ) || computed[ name ] : undefined;

		if ( computed ) {

			if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
				ret = jQuery.style( elem, name );
			}

			// A tribute to the "awesome hack by Dean Edwards"
			// Chrome < 17 and Safari 5.0 uses "computed value" instead of "used value" for margin-right
			// Safari 5.1.7 (at least) returns percentage for a larger set of values, but width seems to be reliably pixels
			// this is against the CSSOM draft spec: http://dev.w3.org/csswg/cssom/#resolved-values
			if ( rnumnonpx.test( ret ) && rmargin.test( name ) ) {

				// Remember the original values
				width = style.width;
				minWidth = style.minWidth;
				maxWidth = style.maxWidth;

				// Put in the new values to get a computed value out
				style.minWidth = style.maxWidth = style.width = ret;
				ret = computed.width;

				// Revert the changed values
				style.width = width;
				style.minWidth = minWidth;
				style.maxWidth = maxWidth;
			}
		}

		// Support: IE
		// IE returns zIndex value as an integer.
		return ret === undefined ?
			ret :
			ret + "";
	};
} else if ( document.documentElement.currentStyle ) {
	getStyles = function( elem ) {
		return elem.currentStyle;
	};

	curCSS = function( elem, name, computed ) {
		var left, rs, rsLeft, ret,
			style = elem.style;

		computed = computed || getStyles( elem );
		ret = computed ? computed[ name ] : undefined;

		// Avoid setting ret to empty string here
		// so we don't default to auto
		if ( ret == null && style && style[ name ] ) {
			ret = style[ name ];
		}

		// From the awesome hack by Dean Edwards
		// http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291

		// If we're not dealing with a regular pixel number
		// but a number that has a weird ending, we need to convert it to pixels
		// but not position css attributes, as those are proportional to the parent element instead
		// and we can't measure the parent instead because it might trigger a "stacking dolls" problem
		if ( rnumnonpx.test( ret ) && !rposition.test( name ) ) {

			// Remember the original values
			left = style.left;
			rs = elem.runtimeStyle;
			rsLeft = rs && rs.left;

			// Put in the new values to get a computed value out
			if ( rsLeft ) {
				rs.left = elem.currentStyle.left;
			}
			style.left = name === "fontSize" ? "1em" : ret;
			ret = style.pixelLeft + "px";

			// Revert the changed values
			style.left = left;
			if ( rsLeft ) {
				rs.left = rsLeft;
			}
		}

		// Support: IE
		// IE returns zIndex value as an integer.
		return ret === undefined ?
			ret :
			ret + "" || "auto";
	};
}




function addGetHookIf( conditionFn, hookFn ) {
	// Define the hook, we'll check on the first run if it's really needed.
	return {
		get: function() {
			var condition = conditionFn();

			if ( condition == null ) {
				// The test was not ready at this point; screw the hook this time
				// but check again when needed next time.
				return;
			}

			if ( condition ) {
				// Hook not needed (or it's not possible to use it due to missing dependency),
				// remove it.
				// Since there are no other hooks for marginRight, remove the whole object.
				delete this.get;
				return;
			}

			// Hook needed; redefine it so that the support test is not executed again.

			return (this.get = hookFn).apply( this, arguments );
		}
	};
}


(function() {
	// Minified: var b,c,d,e,f,g, h,i
	var div, style, a, pixelPositionVal, boxSizingReliableVal,
		reliableHiddenOffsetsVal, reliableMarginRightVal;

	// Setup
	div = document.createElement( "div" );
	div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";
	a = div.getElementsByTagName( "a" )[ 0 ];
	style = a && a.style;

	// Finish early in limited (non-browser) environments
	if ( !style ) {
		return;
	}

	style.cssText = "float:left;opacity:.5";

	// Support: IE<9
	// Make sure that element opacity exists (as opposed to filter)
	support.opacity = style.opacity === "0.5";

	// Verify style float existence
	// (IE uses styleFloat instead of cssFloat)
	support.cssFloat = !!style.cssFloat;

	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	// Support: Firefox<29, Android 2.3
	// Vendor-prefix box-sizing
	support.boxSizing = style.boxSizing === "" || style.MozBoxSizing === "" ||
		style.WebkitBoxSizing === "";

	jQuery.extend(support, {
		reliableHiddenOffsets: function() {
			if ( reliableHiddenOffsetsVal == null ) {
				computeStyleTests();
			}
			return reliableHiddenOffsetsVal;
		},

		boxSizingReliable: function() {
			if ( boxSizingReliableVal == null ) {
				computeStyleTests();
			}
			return boxSizingReliableVal;
		},

		pixelPosition: function() {
			if ( pixelPositionVal == null ) {
				computeStyleTests();
			}
			return pixelPositionVal;
		},

		// Support: Android 2.3
		reliableMarginRight: function() {
			if ( reliableMarginRightVal == null ) {
				computeStyleTests();
			}
			return reliableMarginRightVal;
		}
	});

	function computeStyleTests() {
		// Minified: var b,c,d,j
		var div, body, container, contents;

		body = document.getElementsByTagName( "body" )[ 0 ];
		if ( !body || !body.style ) {
			// Test fired too early or in an unsupported environment, exit.
			return;
		}

		// Setup
		div = document.createElement( "div" );
		container = document.createElement( "div" );
		container.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px";
		body.appendChild( container ).appendChild( div );

		div.style.cssText =
			// Support: Firefox<29, Android 2.3
			// Vendor-prefix box-sizing
			"-webkit-box-sizing:border-box;-moz-box-sizing:border-box;" +
			"box-sizing:border-box;display:block;margin-top:1%;top:1%;" +
			"border:1px;padding:1px;width:4px;position:absolute";

		// Support: IE<9
		// Assume reasonable values in the absence of getComputedStyle
		pixelPositionVal = boxSizingReliableVal = false;
		reliableMarginRightVal = true;

		// Check for getComputedStyle so that this code is not run in IE<9.
		if ( window.getComputedStyle ) {
			pixelPositionVal = ( window.getComputedStyle( div, null ) || {} ).top !== "1%";
			boxSizingReliableVal =
				( window.getComputedStyle( div, null ) || { width: "4px" } ).width === "4px";

			// Support: Android 2.3
			// Div with explicit width and no margin-right incorrectly
			// gets computed margin-right based on width of container (#3333)
			// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
			contents = div.appendChild( document.createElement( "div" ) );

			// Reset CSS: box-sizing; display; margin; border; padding
			contents.style.cssText = div.style.cssText =
				// Support: Firefox<29, Android 2.3
				// Vendor-prefix box-sizing
				"-webkit-box-sizing:content-box;-moz-box-sizing:content-box;" +
				"box-sizing:content-box;display:block;margin:0;border:0;padding:0";
			contents.style.marginRight = contents.style.width = "0";
			div.style.width = "1px";

			reliableMarginRightVal =
				!parseFloat( ( window.getComputedStyle( contents, null ) || {} ).marginRight );
		}

		// Support: IE8
		// Check if table cells still have offsetWidth/Height when they are set
		// to display:none and there are still other visible table cells in a
		// table row; if so, offsetWidth/Height are not reliable for use when
		// determining if an element has been hidden directly using
		// display:none (it is still safe to use offsets if a parent element is
		// hidden; don safety goggles and see bug #4512 for more information).
		div.innerHTML = "<table><tr><td></td><td>t</td></tr></table>";
		contents = div.getElementsByTagName( "td" );
		contents[ 0 ].style.cssText = "margin:0;border:0;padding:0;display:none";
		reliableHiddenOffsetsVal = contents[ 0 ].offsetHeight === 0;
		if ( reliableHiddenOffsetsVal ) {
			contents[ 0 ].style.display = "";
			contents[ 1 ].style.display = "none";
			reliableHiddenOffsetsVal = contents[ 0 ].offsetHeight === 0;
		}

		body.removeChild( container );
	}

})();


// A method for quickly swapping in/out CSS properties to get correct calculations.
jQuery.swap = function( elem, options, callback, args ) {
	var ret, name,
		old = {};

	// Remember the old values, and insert the new ones
	for ( name in options ) {
		old[ name ] = elem.style[ name ];
		elem.style[ name ] = options[ name ];
	}

	ret = callback.apply( elem, args || [] );

	// Revert the old values
	for ( name in options ) {
		elem.style[ name ] = old[ name ];
	}

	return ret;
};


var
		ralpha = /alpha\([^)]*\)/i,
	ropacity = /opacity\s*=\s*([^)]*)/,

	// swappable if display is none or starts with table except "table", "table-cell", or "table-caption"
	// see here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	rnumsplit = new RegExp( "^(" + pnum + ")(.*)$", "i" ),
	rrelNum = new RegExp( "^([+-])=(" + pnum + ")", "i" ),

	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: "0",
		fontWeight: "400"
	},

	cssPrefixes = [ "Webkit", "O", "Moz", "ms" ];


// return a css property mapped to a potentially vendor prefixed property
function vendorPropName( style, name ) {

	// shortcut for names that are not vendor prefixed
	if ( name in style ) {
		return name;
	}

	// check for vendor prefixed names
	var capName = name.charAt(0).toUpperCase() + name.slice(1),
		origName = name,
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in style ) {
			return name;
		}
	}

	return origName;
}

function showHide( elements, show ) {
	var display, elem, hidden,
		values = [],
		index = 0,
		length = elements.length;

	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		values[ index ] = jQuery._data( elem, "olddisplay" );
		display = elem.style.display;
		if ( show ) {
			// Reset the inline display of this element to learn if it is
			// being hidden by cascaded rules or not
			if ( !values[ index ] && display === "none" ) {
				elem.style.display = "";
			}

			// Set elements which have been overridden with display: none
			// in a stylesheet to whatever the default browser style is
			// for such an element
			if ( elem.style.display === "" && isHidden( elem ) ) {
				values[ index ] = jQuery._data( elem, "olddisplay", defaultDisplay(elem.nodeName) );
			}
		} else {
			hidden = isHidden( elem );

			if ( display && display !== "none" || !hidden ) {
				jQuery._data( elem, "olddisplay", hidden ? display : jQuery.css( elem, "display" ) );
			}
		}
	}

	// Set the display of most of the elements in a second loop
	// to avoid the constant reflow
	for ( index = 0; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}
		if ( !show || elem.style.display === "none" || elem.style.display === "" ) {
			elem.style.display = show ? values[ index ] || "" : "none";
		}
	}

	return elements;
}

function setPositiveNumber( elem, value, subtract ) {
	var matches = rnumsplit.exec( value );
	return matches ?
		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 1 ] - ( subtract || 0 ) ) + ( matches[ 2 ] || "px" ) :
		value;
}

function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
	var i = extra === ( isBorderBox ? "border" : "content" ) ?
		// If we already have the right measurement, avoid augmentation
		4 :
		// Otherwise initialize for horizontal or vertical properties
		name === "width" ? 1 : 0,

		val = 0;

	for ( ; i < 4; i += 2 ) {
		// both box models exclude margin, so add it if we want it
		if ( extra === "margin" ) {
			val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
		}

		if ( isBorderBox ) {
			// border-box includes padding, so remove it if we want content
			if ( extra === "content" ) {
				val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// at this point, extra isn't border nor margin, so remove border
			if ( extra !== "margin" ) {
				val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		} else {
			// at this point, extra isn't content, so add padding
			val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// at this point, extra isn't content nor padding, so add border
			if ( extra !== "padding" ) {
				val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	return val;
}

function getWidthOrHeight( elem, name, extra ) {

	// Start with offset property, which is equivalent to the border-box value
	var valueIsBorderBox = true,
		val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
		styles = getStyles( elem ),
		isBorderBox = support.boxSizing && jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

	// some non-html elements return undefined for offsetWidth, so check for null/undefined
	// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
	// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
	if ( val <= 0 || val == null ) {
		// Fall back to computed then uncomputed css if necessary
		val = curCSS( elem, name, styles );
		if ( val < 0 || val == null ) {
			val = elem.style[ name ];
		}

		// Computed unit is not pixels. Stop here and return.
		if ( rnumnonpx.test(val) ) {
			return val;
		}

		// we need the check for style in case a browser which returns unreliable values
		// for getComputedStyle silently falls back to the reliable elem.style
		valueIsBorderBox = isBorderBox && ( support.boxSizingReliable() || val === elem.style[ name ] );

		// Normalize "", auto, and prepare for extra
		val = parseFloat( val ) || 0;
	}

	// use the active box-sizing model to add/subtract irrelevant styles
	return ( val +
		augmentWidthOrHeight(
			elem,
			name,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles
		)
	) + "px";
}

jQuery.extend({
	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {
					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Don't automatically add "px" to these possibly-unitless properties
	cssNumber: {
		"columnCount": true,
		"fillOpacity": true,
		"flexGrow": true,
		"flexShrink": true,
		"fontWeight": true,
		"lineHeight": true,
		"opacity": true,
		"order": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {
		// normalize float css property
		"float": support.cssFloat ? "cssFloat" : "styleFloat"
	},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {
		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = jQuery.camelCase( name ),
			style = elem.style;

		name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( style, origName ) );

		// gets hook for the prefixed version
		// followed by the unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// convert relative number strings (+= or -=) to relative numbers. #7345
			if ( type === "string" && (ret = rrelNum.exec( value )) ) {
				value = ( ret[1] + 1 ) * ret[2] + parseFloat( jQuery.css( elem, name ) );
				// Fixes bug #9237
				type = "number";
			}

			// Make sure that null and NaN values aren't set. See: #7116
			if ( value == null || value !== value ) {
				return;
			}

			// If a number was passed in, add 'px' to the (except for certain CSS properties)
			if ( type === "number" && !jQuery.cssNumber[ origName ] ) {
				value += "px";
			}

			// Fixes #8908, it can be done more correctly by specifing setters in cssHooks,
			// but it would mean to define eight (for every problematic property) identical functions
			if ( !support.clearCloneStyle && value === "" && name.indexOf("background") === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !("set" in hooks) || (value = hooks.set( elem, value, extra )) !== undefined ) {

				// Support: IE
				// Swallow errors from 'invalid' CSS values (#5509)
				try {
					style[ name ] = value;
				} catch(e) {}
			}

		} else {
			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks && (ret = hooks.get( elem, false, extra )) !== undefined ) {
				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var num, val, hooks,
			origName = jQuery.camelCase( name );

		// Make sure that we're working with the right name
		name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( elem.style, origName ) );

		// gets hook for the prefixed version
		// followed by the unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		//convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Return, converting to number if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || jQuery.isNumeric( num ) ? num || 0 : val;
		}
		return val;
	}
});

jQuery.each([ "height", "width" ], function( i, name ) {
	jQuery.cssHooks[ name ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {
				// certain elements can have dimension info if we invisibly show them
				// however, it must have a current display style that would benefit from this
				return rdisplayswap.test( jQuery.css( elem, "display" ) ) && elem.offsetWidth === 0 ?
					jQuery.swap( elem, cssShow, function() {
						return getWidthOrHeight( elem, name, extra );
					}) :
					getWidthOrHeight( elem, name, extra );
			}
		},

		set: function( elem, value, extra ) {
			var styles = extra && getStyles( elem );
			return setPositiveNumber( elem, value, extra ?
				augmentWidthOrHeight(
					elem,
					name,
					extra,
					support.boxSizing && jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
					styles
				) : 0
			);
		}
	};
});

if ( !support.opacity ) {
	jQuery.cssHooks.opacity = {
		get: function( elem, computed ) {
			// IE uses filters for opacity
			return ropacity.test( (computed && elem.currentStyle ? elem.currentStyle.filter : elem.style.filter) || "" ) ?
				( 0.01 * parseFloat( RegExp.$1 ) ) + "" :
				computed ? "1" : "";
		},

		set: function( elem, value ) {
			var style = elem.style,
				currentStyle = elem.currentStyle,
				opacity = jQuery.isNumeric( value ) ? "alpha(opacity=" + value * 100 + ")" : "",
				filter = currentStyle && currentStyle.filter || style.filter || "";

			// IE has trouble with opacity if it does not have layout
			// Force it by setting the zoom level
			style.zoom = 1;

			// if setting opacity to 1, and no other filters exist - attempt to remove filter attribute #6652
			// if value === "", then remove inline opacity #12685
			if ( ( value >= 1 || value === "" ) &&
					jQuery.trim( filter.replace( ralpha, "" ) ) === "" &&
					style.removeAttribute ) {

				// Setting style.filter to null, "" & " " still leave "filter:" in the cssText
				// if "filter:" is present at all, clearType is disabled, we want to avoid this
				// style.removeAttribute is IE Only, but so apparently is this code path...
				style.removeAttribute( "filter" );

				// if there is no filter style applied in a css rule or unset inline opacity, we are done
				if ( value === "" || currentStyle && !currentStyle.filter ) {
					return;
				}
			}

			// otherwise, set new filter values
			style.filter = ralpha.test( filter ) ?
				filter.replace( ralpha, opacity ) :
				filter + " " + opacity;
		}
	};
}

jQuery.cssHooks.marginRight = addGetHookIf( support.reliableMarginRight,
	function( elem, computed ) {
		if ( computed ) {
			// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
			// Work around by temporarily setting element display to inline-block
			return jQuery.swap( elem, { "display": "inline-block" },
				curCSS, [ elem, "marginRight" ] );
		}
	}
);

// These hooks are used by animate to expand properties
jQuery.each({
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// assumes a single number if not a string
				parts = typeof value === "string" ? value.split(" ") : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( !rmargin.test( prefix ) ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
});

jQuery.fn.extend({
	css: function( name, value ) {
		return access( this, function( elem, name, value ) {
			var styles, len,
				map = {},
				i = 0;

			if ( jQuery.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	},
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		if ( typeof state === "boolean" ) {
			return state ? this.show() : this.hide();
		}

		return this.each(function() {
			if ( isHidden( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		});
	}
});


function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || "swing";
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			if ( tween.elem[ tween.prop ] != null &&
				(!tween.elem.style || tween.elem.style[ tween.prop ] == null) ) {
				return tween.elem[ tween.prop ];
			}

			// passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails
			// so, simple values such as "10px" are parsed to Float.
			// complex values such as "rotate(1rad)" are returned as is.
			result = jQuery.css( tween.elem, tween.prop, "" );
			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {
			// use step hook for back compat - use cssHook if its there - use .style if its
			// available and use plain properties where available
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.style && ( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null || jQuery.cssHooks[ tween.prop ] ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Support: IE <=9
// Panic based approach to setting things on disconnected nodes

Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p * Math.PI ) / 2;
	}
};

jQuery.fx = Tween.prototype.init;

// Back Compat <1.8 extension point
jQuery.fx.step = {};




var
	fxNow, timerId,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rfxnum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" ),
	rrun = /queueHooks$/,
	animationPrefilters = [ defaultPrefilter ],
	tweeners = {
		"*": [ function( prop, value ) {
			var tween = this.createTween( prop, value ),
				target = tween.cur(),
				parts = rfxnum.exec( value ),
				unit = parts && parts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

				// Starting value computation is required for potential unit mismatches
				start = ( jQuery.cssNumber[ prop ] || unit !== "px" && +target ) &&
					rfxnum.exec( jQuery.css( tween.elem, prop ) ),
				scale = 1,
				maxIterations = 20;

			if ( start && start[ 3 ] !== unit ) {
				// Trust units reported by jQuery.css
				unit = unit || start[ 3 ];

				// Make sure we update the tween properties later on
				parts = parts || [];

				// Iteratively approximate from a nonzero starting point
				start = +target || 1;

				do {
					// If previous iteration zeroed out, double until we get *something*
					// Use a string for doubling factor so we don't accidentally see scale as unchanged below
					scale = scale || ".5";

					// Adjust and apply
					start = start / scale;
					jQuery.style( tween.elem, prop, start + unit );

				// Update scale, tolerating zero or NaN from tween.cur()
				// And breaking the loop if scale is unchanged or perfect, or if we've just had enough
				} while ( scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations );
			}

			// Update tween properties
			if ( parts ) {
				start = tween.start = +start || +target || 0;
				tween.unit = unit;
				// If a +=/-= token was provided, we're doing a relative animation
				tween.end = parts[ 1 ] ?
					start + ( parts[ 1 ] + 1 ) * parts[ 2 ] :
					+parts[ 2 ];
			}

			return tween;
		} ]
	};

// Animations created synchronously will run synchronously
function createFxNow() {
	setTimeout(function() {
		fxNow = undefined;
	});
	return ( fxNow = jQuery.now() );
}

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		attrs = { height: type },
		i = 0;

	// if we include width, step value is 1 to do all cssExpand values,
	// if we don't include width, step value is 2 to skip over Left and Right
	includeWidth = includeWidth ? 1 : 0;
	for ( ; i < 4 ; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

function createTween( value, prop, animation ) {
	var tween,
		collection = ( tweeners[ prop ] || [] ).concat( tweeners[ "*" ] ),
		index = 0,
		length = collection.length;
	for ( ; index < length; index++ ) {
		if ( (tween = collection[ index ].call( animation, prop, value )) ) {

			// we're done with this property
			return tween;
		}
	}
}

function defaultPrefilter( elem, props, opts ) {
	/* jshint validthis: true */
	var prop, value, toggle, tween, hooks, oldfire, display, checkDisplay,
		anim = this,
		orig = {},
		style = elem.style,
		hidden = elem.nodeType && isHidden( elem ),
		dataShow = jQuery._data( elem, "fxshow" );

	// handle queue: false promises
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always(function() {
			// doing this makes sure that the complete handler will be called
			// before this completes
			anim.always(function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			});
		});
	}

	// height/width overflow pass
	if ( elem.nodeType === 1 && ( "height" in props || "width" in props ) ) {
		// Make sure that nothing sneaks out
		// Record all 3 overflow attributes because IE does not
		// change the overflow attribute when overflowX and
		// overflowY are set to the same value
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Set display property to inline-block for height/width
		// animations on inline elements that are having width/height animated
		display = jQuery.css( elem, "display" );

		// Test default display if display is currently "none"
		checkDisplay = display === "none" ?
			jQuery._data( elem, "olddisplay" ) || defaultDisplay( elem.nodeName ) : display;

		if ( checkDisplay === "inline" && jQuery.css( elem, "float" ) === "none" ) {

			// inline-level elements accept inline-block;
			// block-level elements need to be inline with layout
			if ( !support.inlineBlockNeedsLayout || defaultDisplay( elem.nodeName ) === "inline" ) {
				style.display = "inline-block";
			} else {
				style.zoom = 1;
			}
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		if ( !support.shrinkWrapBlocks() ) {
			anim.always(function() {
				style.overflow = opts.overflow[ 0 ];
				style.overflowX = opts.overflow[ 1 ];
				style.overflowY = opts.overflow[ 2 ];
			});
		}
	}

	// show/hide pass
	for ( prop in props ) {
		value = props[ prop ];
		if ( rfxtypes.exec( value ) ) {
			delete props[ prop ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {

				// If there is dataShow left over from a stopped hide or show and we are going to proceed with show, we should pretend to be hidden
				if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
					hidden = true;
				} else {
					continue;
				}
			}
			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );

		// Any non-fx value stops us from restoring the original display value
		} else {
			display = undefined;
		}
	}

	if ( !jQuery.isEmptyObject( orig ) ) {
		if ( dataShow ) {
			if ( "hidden" in dataShow ) {
				hidden = dataShow.hidden;
			}
		} else {
			dataShow = jQuery._data( elem, "fxshow", {} );
		}

		// store state if its toggle - enables .stop().toggle() to "reverse"
		if ( toggle ) {
			dataShow.hidden = !hidden;
		}
		if ( hidden ) {
			jQuery( elem ).show();
		} else {
			anim.done(function() {
				jQuery( elem ).hide();
			});
		}
		anim.done(function() {
			var prop;
			jQuery._removeData( elem, "fxshow" );
			for ( prop in orig ) {
				jQuery.style( elem, prop, orig[ prop ] );
			}
		});
		for ( prop in orig ) {
			tween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );

			if ( !( prop in dataShow ) ) {
				dataShow[ prop ] = tween.start;
				if ( hidden ) {
					tween.end = tween.start;
					tween.start = prop === "width" || prop === "height" ? 1 : 0;
				}
			}
		}

	// If this is a noop like .hide().hide(), restore an overwritten display value
	} else if ( (display === "none" ? defaultDisplay( elem.nodeName ) : display) === "inline" ) {
		style.display = display;
	}
}

function propFilter( props, specialEasing ) {
	var index, name, easing, value, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = jQuery.camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( jQuery.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// not quite $.extend, this wont overwrite keys already present.
			// also - reusing 'index' from above because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = animationPrefilters.length,
		deferred = jQuery.Deferred().always( function() {
			// don't match elem in the :animated selector
			delete tick.elem;
		}),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),
				// archaic crash bug won't allow us to use 1 - ( 0.5 || 0 ) (#12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length ; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ]);

			if ( percent < 1 && length ) {
				return remaining;
			} else {
				deferred.resolveWith( elem, [ animation ] );
				return false;
			}
		},
		animation = deferred.promise({
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, { specialEasing: {} }, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
						animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,
					// if we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length ; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// resolve when we played the last frame
				// otherwise, reject
				if ( gotoEnd ) {
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		}),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length ; index++ ) {
		result = animationPrefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			return result;
		}
	}

	jQuery.map( props, createTween, animation );

	if ( jQuery.isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		})
	);

	// attach callbacks from options
	return animation.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );
}

jQuery.Animation = jQuery.extend( Animation, {
	tweener: function( props, callback ) {
		if ( jQuery.isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.split(" ");
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length ; index++ ) {
			prop = props[ index ];
			tweeners[ prop ] = tweeners[ prop ] || [];
			tweeners[ prop ].unshift( callback );
		}
	},

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			animationPrefilters.unshift( callback );
		} else {
			animationPrefilters.push( callback );
		}
	}
});

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			jQuery.isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
	};

	opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration :
		opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;

	// normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( jQuery.isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.fn.extend({
	fadeTo: function( speed, to, easing, callback ) {

		// show any hidden elements after setting opacity to 0
		return this.filter( isHidden ).css( "opacity", 0 ).show()

			// animate to the value specified
			.end().animate({ opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {
				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );

				// Empty animations, or finishing resolves immediately
				if ( empty || jQuery._data( this, "finish" ) ) {
					anim.stop( true );
				}
			};
			doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue && type !== false ) {
			this.queue( type || "fx", [] );
		}

		return this.each(function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = jQuery._data( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && (type == null || timers[ index ].queue === type) ) {
					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// start the next in the queue if the last step wasn't forced
			// timers currently will call their complete callbacks, which will dequeue
			// but only if they were gotoEnd
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		});
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each(function() {
			var index,
				data = jQuery._data( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// enable finishing flag on private data
			data.finish = true;

			// empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.stop ) {
				hooks.stop.call( this, true );
			}

			// look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// turn off finishing flag
			delete data.finish;
		});
	}
});

jQuery.each([ "toggle", "show", "hide" ], function( i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
});

// Generate shortcuts for custom animations
jQuery.each({
	slideDown: genFx("show"),
	slideUp: genFx("hide"),
	slideToggle: genFx("toggle"),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
});

jQuery.timers = [];
jQuery.fx.tick = function() {
	var timer,
		timers = jQuery.timers,
		i = 0;

	fxNow = jQuery.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];
		// Checks the timer has not already been removed
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	jQuery.timers.push( timer );
	if ( timer() ) {
		jQuery.fx.start();
	} else {
		jQuery.timers.pop();
	}
};

jQuery.fx.interval = 13;

jQuery.fx.start = function() {
	if ( !timerId ) {
		timerId = setInterval( jQuery.fx.tick, jQuery.fx.interval );
	}
};

jQuery.fx.stop = function() {
	clearInterval( timerId );
	timerId = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,
	// Default speed
	_default: 400
};


// Based off of the plugin by Clint Helfers, with permission.
// http://blindsignals.com/index.php/2009/07/jquery-delay/
jQuery.fn.delay = function( time, type ) {
	time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
	type = type || "fx";

	return this.queue( type, function( next, hooks ) {
		var timeout = setTimeout( next, time );
		hooks.stop = function() {
			clearTimeout( timeout );
		};
	});
};


(function() {
	// Minified: var a,b,c,d,e
	var input, div, select, a, opt;

	// Setup
	div = document.createElement( "div" );
	div.setAttribute( "className", "t" );
	div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";
	a = div.getElementsByTagName("a")[ 0 ];

	// First batch of tests.
	select = document.createElement("select");
	opt = select.appendChild( document.createElement("option") );
	input = div.getElementsByTagName("input")[ 0 ];

	a.style.cssText = "top:1px";

	// Test setAttribute on camelCase class. If it works, we need attrFixes when doing get/setAttribute (ie6/7)
	support.getSetAttribute = div.className !== "t";

	// Get the style information from getAttribute
	// (IE uses .cssText instead)
	support.style = /top/.test( a.getAttribute("style") );

	// Make sure that URLs aren't manipulated
	// (IE normalizes it by default)
	support.hrefNormalized = a.getAttribute("href") === "/a";

	// Check the default checkbox/radio value ("" on WebKit; "on" elsewhere)
	support.checkOn = !!input.value;

	// Make sure that a selected-by-default option has a working selected property.
	// (WebKit defaults to false instead of true, IE too, if it's in an optgroup)
	support.optSelected = opt.selected;

	// Tests for enctype support on a form (#6743)
	support.enctype = !!document.createElement("form").enctype;

	// Make sure that the options inside disabled selects aren't marked as disabled
	// (WebKit marks them as disabled)
	select.disabled = true;
	support.optDisabled = !opt.disabled;

	// Support: IE8 only
	// Check if we can trust getAttribute("value")
	input = document.createElement( "input" );
	input.setAttribute( "value", "" );
	support.input = input.getAttribute( "value" ) === "";

	// Check if an input maintains its value after becoming a radio
	input.value = "t";
	input.setAttribute( "type", "radio" );
	support.radioValue = input.value === "t";
})();


var rreturn = /\r/g;

jQuery.fn.extend({
	val: function( value ) {
		var hooks, ret, isFunction,
			elem = this[0];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] || jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks && "get" in hooks && (ret = hooks.get( elem, "value" )) !== undefined ) {
					return ret;
				}

				ret = elem.value;

				return typeof ret === "string" ?
					// handle most common string cases
					ret.replace(rreturn, "") :
					// handle cases where value is null/undef or number
					ret == null ? "" : ret;
			}

			return;
		}

		isFunction = jQuery.isFunction( value );

		return this.each(function( i ) {
			var val;

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( isFunction ) {
				val = value.call( this, i, jQuery( this ).val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";
			} else if ( typeof val === "number" ) {
				val += "";
			} else if ( jQuery.isArray( val ) ) {
				val = jQuery.map( val, function( value ) {
					return value == null ? "" : value + "";
				});
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !("set" in hooks) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		});
	}
});

jQuery.extend({
	valHooks: {
		option: {
			get: function( elem ) {
				var val = jQuery.find.attr( elem, "value" );
				return val != null ?
					val :
					// Support: IE10-11+
					// option.text throws exceptions (#14686, #14858)
					jQuery.trim( jQuery.text( elem ) );
			}
		},
		select: {
			get: function( elem ) {
				var value, option,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one" || index < 0,
					values = one ? null : [],
					max = one ? index + 1 : options.length,
					i = index < 0 ?
						max :
						one ? index : 0;

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// oldIE doesn't update selected after form reset (#2551)
					if ( ( option.selected || i === index ) &&
							// Don't return options that are disabled or in a disabled optgroup
							( support.optDisabled ? !option.disabled : option.getAttribute("disabled") === null ) &&
							( !option.parentNode.disabled || !jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var optionSet, option,
					options = elem.options,
					values = jQuery.makeArray( value ),
					i = options.length;

				while ( i-- ) {
					option = options[ i ];

					if ( jQuery.inArray( jQuery.valHooks.option.get( option ), values ) >= 0 ) {

						// Support: IE6
						// When new option element is added to select box we need to
						// force reflow of newly added node in order to workaround delay
						// of initialization properties
						try {
							option.selected = optionSet = true;

						} catch ( _ ) {

							// Will be executed only in IE6
							option.scrollHeight;
						}

					} else {
						option.selected = false;
					}
				}

				// Force browsers to behave consistently when non-matching value is set
				if ( !optionSet ) {
					elem.selectedIndex = -1;
				}

				return options;
			}
		}
	}
});

// Radios and checkboxes getter/setter
jQuery.each([ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = {
		set: function( elem, value ) {
			if ( jQuery.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery(elem).val(), value ) >= 0 );
			}
		}
	};
	if ( !support.checkOn ) {
		jQuery.valHooks[ this ].get = function( elem ) {
			// Support: Webkit
			// "" is returned instead of "on" if a value isn't specified
			return elem.getAttribute("value") === null ? "on" : elem.value;
		};
	}
});




var nodeHook, boolHook,
	attrHandle = jQuery.expr.attrHandle,
	ruseDefault = /^(?:checked|selected)$/i,
	getSetAttribute = support.getSetAttribute,
	getSetInput = support.input;

jQuery.fn.extend({
	attr: function( name, value ) {
		return access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each(function() {
			jQuery.removeAttr( this, name );
		});
	}
});

jQuery.extend({
	attr: function( elem, name, value ) {
		var hooks, ret,
			nType = elem.nodeType;

		// don't get/set attributes on text, comment and attribute nodes
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === strundefined ) {
			return jQuery.prop( elem, name, value );
		}

		// All attributes are lowercase
		// Grab necessary hook if one is defined
		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
			name = name.toLowerCase();
			hooks = jQuery.attrHooks[ name ] ||
				( jQuery.expr.match.bool.test( name ) ? boolHook : nodeHook );
		}

		if ( value !== undefined ) {

			if ( value === null ) {
				jQuery.removeAttr( elem, name );

			} else if ( hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ) {
				return ret;

			} else {
				elem.setAttribute( name, value + "" );
				return value;
			}

		} else if ( hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ) {
			return ret;

		} else {
			ret = jQuery.find.attr( elem, name );

			// Non-existent attributes return null, we normalize to undefined
			return ret == null ?
				undefined :
				ret;
		}
	},

	removeAttr: function( elem, value ) {
		var name, propName,
			i = 0,
			attrNames = value && value.match( rnotwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( (name = attrNames[i++]) ) {
				propName = jQuery.propFix[ name ] || name;

				// Boolean attributes get special treatment (#10870)
				if ( jQuery.expr.match.bool.test( name ) ) {
					// Set corresponding property to false
					if ( getSetInput && getSetAttribute || !ruseDefault.test( name ) ) {
						elem[ propName ] = false;
					// Support: IE<9
					// Also clear defaultChecked/defaultSelected (if appropriate)
					} else {
						elem[ jQuery.camelCase( "default-" + name ) ] =
							elem[ propName ] = false;
					}

				// See #9699 for explanation of this approach (setting first, then removal)
				} else {
					jQuery.attr( elem, name, "" );
				}

				elem.removeAttribute( getSetAttribute ? name : propName );
			}
		}
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !support.radioValue && value === "radio" && jQuery.nodeName(elem, "input") ) {
					// Setting the type on a radio button after the value resets the value in IE6-9
					// Reset value to default in case type is set after value during creation
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	}
});

// Hook for boolean attributes
boolHook = {
	set: function( elem, value, name ) {
		if ( value === false ) {
			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else if ( getSetInput && getSetAttribute || !ruseDefault.test( name ) ) {
			// IE<8 needs the *property* name
			elem.setAttribute( !getSetAttribute && jQuery.propFix[ name ] || name, name );

		// Use defaultChecked and defaultSelected for oldIE
		} else {
			elem[ jQuery.camelCase( "default-" + name ) ] = elem[ name ] = true;
		}

		return name;
	}
};

// Retrieve booleans specially
jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {

	var getter = attrHandle[ name ] || jQuery.find.attr;

	attrHandle[ name ] = getSetInput && getSetAttribute || !ruseDefault.test( name ) ?
		function( elem, name, isXML ) {
			var ret, handle;
			if ( !isXML ) {
				// Avoid an infinite loop by temporarily removing this function from the getter
				handle = attrHandle[ name ];
				attrHandle[ name ] = ret;
				ret = getter( elem, name, isXML ) != null ?
					name.toLowerCase() :
					null;
				attrHandle[ name ] = handle;
			}
			return ret;
		} :
		function( elem, name, isXML ) {
			if ( !isXML ) {
				return elem[ jQuery.camelCase( "default-" + name ) ] ?
					name.toLowerCase() :
					null;
			}
		};
});

// fix oldIE attroperties
if ( !getSetInput || !getSetAttribute ) {
	jQuery.attrHooks.value = {
		set: function( elem, value, name ) {
			if ( jQuery.nodeName( elem, "input" ) ) {
				// Does not return so that setAttribute is also used
				elem.defaultValue = value;
			} else {
				// Use nodeHook if defined (#1954); otherwise setAttribute is fine
				return nodeHook && nodeHook.set( elem, value, name );
			}
		}
	};
}

// IE6/7 do not support getting/setting some attributes with get/setAttribute
if ( !getSetAttribute ) {

	// Use this for any attribute in IE6/7
	// This fixes almost every IE6/7 issue
	nodeHook = {
		set: function( elem, value, name ) {
			// Set the existing or create a new attribute node
			var ret = elem.getAttributeNode( name );
			if ( !ret ) {
				elem.setAttributeNode(
					(ret = elem.ownerDocument.createAttribute( name ))
				);
			}

			ret.value = value += "";

			// Break association with cloned elements by also using setAttribute (#9646)
			if ( name === "value" || value === elem.getAttribute( name ) ) {
				return value;
			}
		}
	};

	// Some attributes are constructed with empty-string values when not defined
	attrHandle.id = attrHandle.name = attrHandle.coords =
		function( elem, name, isXML ) {
			var ret;
			if ( !isXML ) {
				return (ret = elem.getAttributeNode( name )) && ret.value !== "" ?
					ret.value :
					null;
			}
		};

	// Fixing value retrieval on a button requires this module
	jQuery.valHooks.button = {
		get: function( elem, name ) {
			var ret = elem.getAttributeNode( name );
			if ( ret && ret.specified ) {
				return ret.value;
			}
		},
		set: nodeHook.set
	};

	// Set contenteditable to false on removals(#10429)
	// Setting to empty string throws an error as an invalid value
	jQuery.attrHooks.contenteditable = {
		set: function( elem, value, name ) {
			nodeHook.set( elem, value === "" ? false : value, name );
		}
	};

	// Set width and height to auto instead of 0 on empty string( Bug #8150 )
	// This is for removals
	jQuery.each([ "width", "height" ], function( i, name ) {
		jQuery.attrHooks[ name ] = {
			set: function( elem, value ) {
				if ( value === "" ) {
					elem.setAttribute( name, "auto" );
					return value;
				}
			}
		};
	});
}

if ( !support.style ) {
	jQuery.attrHooks.style = {
		get: function( elem ) {
			// Return undefined in the case of empty string
			// Note: IE uppercases css property names, but if we were to .toLowerCase()
			// .cssText, that would destroy case senstitivity in URL's, like in "background"
			return elem.style.cssText || undefined;
		},
		set: function( elem, value ) {
			return ( elem.style.cssText = value + "" );
		}
	};
}




var rfocusable = /^(?:input|select|textarea|button|object)$/i,
	rclickable = /^(?:a|area)$/i;

jQuery.fn.extend({
	prop: function( name, value ) {
		return access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		name = jQuery.propFix[ name ] || name;
		return this.each(function() {
			// try/catch handles cases where IE balks (such as removing a property on window)
			try {
				this[ name ] = undefined;
				delete this[ name ];
			} catch( e ) {}
		});
	}
});

jQuery.extend({
	propFix: {
		"for": "htmlFor",
		"class": "className"
	},

	prop: function( elem, name, value ) {
		var ret, hooks, notxml,
			nType = elem.nodeType;

		// don't get/set properties on text, comment and attribute nodes
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		notxml = nType !== 1 || !jQuery.isXMLDoc( elem );

		if ( notxml ) {
			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			return hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ?
				ret :
				( elem[ name ] = value );

		} else {
			return hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ?
				ret :
				elem[ name ];
		}
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {
				// elem.tabIndex doesn't always return the correct value when it hasn't been explicitly set
				// http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
				// Use proper attribute retrieval(#12072)
				var tabindex = jQuery.find.attr( elem, "tabindex" );

				return tabindex ?
					parseInt( tabindex, 10 ) :
					rfocusable.test( elem.nodeName ) || rclickable.test( elem.nodeName ) && elem.href ?
						0 :
						-1;
			}
		}
	}
});

// Some attributes require a special call on IE
// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !support.hrefNormalized ) {
	// href/src property should get the full normalized URL (#10299/#12915)
	jQuery.each([ "href", "src" ], function( i, name ) {
		jQuery.propHooks[ name ] = {
			get: function( elem ) {
				return elem.getAttribute( name, 4 );
			}
		};
	});
}

// Support: Safari, IE9+
// mis-reports the default selected property of an option
// Accessing the parent's selectedIndex property fixes it
if ( !support.optSelected ) {
	jQuery.propHooks.selected = {
		get: function( elem ) {
			var parent = elem.parentNode;

			if ( parent ) {
				parent.selectedIndex;

				// Make sure that it also works with optgroups, see #5701
				if ( parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
			}
			return null;
		}
	};
}

jQuery.each([
	"tabIndex",
	"readOnly",
	"maxLength",
	"cellSpacing",
	"cellPadding",
	"rowSpan",
	"colSpan",
	"useMap",
	"frameBorder",
	"contentEditable"
], function() {
	jQuery.propFix[ this.toLowerCase() ] = this;
});

// IE6/7 call enctype encoding
if ( !support.enctype ) {
	jQuery.propFix.enctype = "encoding";
}




var rclass = /[\t\r\n\f]/g;

jQuery.fn.extend({
	addClass: function( value ) {
		var classes, elem, cur, clazz, j, finalValue,
			i = 0,
			len = this.length,
			proceed = typeof value === "string" && value;

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( j ) {
				jQuery( this ).addClass( value.call( this, j, this.className ) );
			});
		}

		if ( proceed ) {
			// The disjunction here is for better compressibility (see removeClass)
			classes = ( value || "" ).match( rnotwhite ) || [];

			for ( ; i < len; i++ ) {
				elem = this[ i ];
				cur = elem.nodeType === 1 && ( elem.className ?
					( " " + elem.className + " " ).replace( rclass, " " ) :
					" "
				);

				if ( cur ) {
					j = 0;
					while ( (clazz = classes[j++]) ) {
						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
							cur += clazz + " ";
						}
					}

					// only assign if different to avoid unneeded rendering.
					finalValue = jQuery.trim( cur );
					if ( elem.className !== finalValue ) {
						elem.className = finalValue;
					}
				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classes, elem, cur, clazz, j, finalValue,
			i = 0,
			len = this.length,
			proceed = arguments.length === 0 || typeof value === "string" && value;

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( j ) {
				jQuery( this ).removeClass( value.call( this, j, this.className ) );
			});
		}
		if ( proceed ) {
			classes = ( value || "" ).match( rnotwhite ) || [];

			for ( ; i < len; i++ ) {
				elem = this[ i ];
				// This expression is here for better compressibility (see addClass)
				cur = elem.nodeType === 1 && ( elem.className ?
					( " " + elem.className + " " ).replace( rclass, " " ) :
					""
				);

				if ( cur ) {
					j = 0;
					while ( (clazz = classes[j++]) ) {
						// Remove *all* instances
						while ( cur.indexOf( " " + clazz + " " ) >= 0 ) {
							cur = cur.replace( " " + clazz + " ", " " );
						}
					}

					// only assign if different to avoid unneeded rendering.
					finalValue = value ? jQuery.trim( cur ) : "";
					if ( elem.className !== finalValue ) {
						elem.className = finalValue;
					}
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value;

		if ( typeof stateVal === "boolean" && type === "string" ) {
			return stateVal ? this.addClass( value ) : this.removeClass( value );
		}

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( i ) {
				jQuery( this ).toggleClass( value.call(this, i, this.className, stateVal), stateVal );
			});
		}

		return this.each(function() {
			if ( type === "string" ) {
				// toggle individual class names
				var className,
					i = 0,
					self = jQuery( this ),
					classNames = value.match( rnotwhite ) || [];

				while ( (className = classNames[ i++ ]) ) {
					// check each className given, space separated list
					if ( self.hasClass( className ) ) {
						self.removeClass( className );
					} else {
						self.addClass( className );
					}
				}

			// Toggle whole class name
			} else if ( type === strundefined || type === "boolean" ) {
				if ( this.className ) {
					// store className if set
					jQuery._data( this, "__className__", this.className );
				}

				// If the element has a class name or if we're passed "false",
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				this.className = this.className || value === false ? "" : jQuery._data( this, "__className__" ) || "";
			}
		});
	},

	hasClass: function( selector ) {
		var className = " " + selector + " ",
			i = 0,
			l = this.length;
		for ( ; i < l; i++ ) {
			if ( this[i].nodeType === 1 && (" " + this[i].className + " ").replace(rclass, " ").indexOf( className ) >= 0 ) {
				return true;
			}
		}

		return false;
	}
});




// Return jQuery for attributes-only inclusion


jQuery.each( ("blur focus focusin focusout load resize scroll unload click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup error contextmenu").split(" "), function( i, name ) {

	// Handle event binding
	jQuery.fn[ name ] = function( data, fn ) {
		return arguments.length > 0 ?
			this.on( name, null, data, fn ) :
			this.trigger( name );
	};
});

jQuery.fn.extend({
	hover: function( fnOver, fnOut ) {
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	},

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {
		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ? this.off( selector, "**" ) : this.off( types, selector || "**", fn );
	}
});


var nonce = jQuery.now();

var rquery = (/\?/);



var rvalidtokens = /(,)|(\[|{)|(}|])|"(?:[^"\\\r\n]|\\["\\\/bfnrt]|\\u[\da-fA-F]{4})*"\s*:?|true|false|null|-?(?!0\d)\d+(?:\.\d+|)(?:[eE][+-]?\d+|)/g;

jQuery.parseJSON = function( data ) {
	// Attempt to parse using the native JSON parser first
	if ( window.JSON && window.JSON.parse ) {
		// Support: Android 2.3
		// Workaround failure to string-cast null input
		return window.JSON.parse( data + "" );
	}

	var requireNonComma,
		depth = null,
		str = jQuery.trim( data + "" );

	// Guard against invalid (and possibly dangerous) input by ensuring that nothing remains
	// after removing valid tokens
	return str && !jQuery.trim( str.replace( rvalidtokens, function( token, comma, open, close ) {

		// Force termination if we see a misplaced comma
		if ( requireNonComma && comma ) {
			depth = 0;
		}

		// Perform no more replacements after returning to outermost depth
		if ( depth === 0 ) {
			return token;
		}

		// Commas must not follow "[", "{", or ","
		requireNonComma = open || comma;

		// Determine new depth
		// array/object open ("[" or "{"): depth += true - false (increment)
		// array/object close ("]" or "}"): depth += false - true (decrement)
		// other cases ("," or primitive): depth += true - true (numeric cast)
		depth += !close - !open;

		// Remove this token
		return "";
	}) ) ?
		( Function( "return " + str ) )() :
		jQuery.error( "Invalid JSON: " + data );
};


// Cross-browser xml parsing
jQuery.parseXML = function( data ) {
	var xml, tmp;
	if ( !data || typeof data !== "string" ) {
		return null;
	}
	try {
		if ( window.DOMParser ) { // Standard
			tmp = new DOMParser();
			xml = tmp.parseFromString( data, "text/xml" );
		} else { // IE
			xml = new ActiveXObject( "Microsoft.XMLDOM" );
			xml.async = "false";
			xml.loadXML( data );
		}
	} catch( e ) {
		xml = undefined;
	}
	if ( !xml || !xml.documentElement || xml.getElementsByTagName( "parsererror" ).length ) {
		jQuery.error( "Invalid XML: " + data );
	}
	return xml;
};


var
	// Document location
	ajaxLocParts,
	ajaxLocation,

	rhash = /#.*$/,
	rts = /([?&])_=[^&]*/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)\r?$/mg, // IE leaves an \r character at EOL
	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,
	rurl = /^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat("*");

// #8138, IE may throw an exception when accessing
// a field from window.location if document.domain has been set
try {
	ajaxLocation = location.href;
} catch( e ) {
	// Use the href attribute of an A element
	// since IE will modify it given document.location
	ajaxLocation = document.createElement( "a" );
	ajaxLocation.href = "";
	ajaxLocation = ajaxLocation.href;
}

// Segment location into parts
ajaxLocParts = rurl.exec( ajaxLocation.toLowerCase() ) || [];

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( rnotwhite ) || [];

		if ( jQuery.isFunction( func ) ) {
			// For each dataType in the dataTypeExpression
			while ( (dataType = dataTypes[i++]) ) {
				// Prepend if requested
				if ( dataType.charAt( 0 ) === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					(structure[ dataType ] = structure[ dataType ] || []).unshift( func );

				// Otherwise append
				} else {
					(structure[ dataType ] = structure[ dataType ] || []).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if ( typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[ dataTypeOrTransport ] ) {
				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		});
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var deep, key,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || (deep = {}) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {
	var firstDataType, ct, finalDataType, type,
		contents = s.contents,
		dataTypes = s.dataTypes;

	// Remove auto dataType and get content-type in the process
	while ( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {
		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[0] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}
		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
function ajaxConvert( s, response, jqXHR, isSuccess ) {
	var conv2, current, conv, tmp, prev,
		converters = {},
		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	current = dataTypes.shift();

	// Convert to each sequential dataType
	while ( current ) {

		if ( s.responseFields[ current ] ) {
			jqXHR[ s.responseFields[ current ] ] = response;
		}

		// Apply the dataFilter if provided
		if ( !prev && isSuccess && s.dataFilter ) {
			response = s.dataFilter( response, s.dataType );
		}

		prev = current;
		current = dataTypes.shift();

		if ( current ) {

			// There's only work to do if current dataType is non-auto
			if ( current === "*" ) {

				current = prev;

			// Convert response if prev dataType is non-auto and differs from current
			} else if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split( " " );
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {
								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.unshift( tmp[ 1 ] );
								}
								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s[ "throws" ] ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return { state: "parsererror", error: conv ? e : "No conversion from " + prev + " to " + current };
						}
					}
				}
			}
		}
	}

	return { state: "success", data: response };
}

jQuery.extend({

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: ajaxLocation,
		type: "GET",
		isLocal: rlocalProtocol.test( ajaxLocParts[ 1 ] ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",
		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /xml/,
			html: /html/,
			json: /json/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText",
			json: "responseJSON"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": jQuery.parseJSON,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var // Cross-domain detection vars
			parts,
			// Loop variable
			i,
			// URL without anti-cache param
			cacheURL,
			// Response headers as string
			responseHeadersString,
			// timeout handle
			timeoutTimer,

			// To know if global events are to be dispatched
			fireGlobals,

			transport,
			// Response headers
			responseHeaders,
			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),
			// Callbacks context
			callbackContext = s.context || s,
			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context && ( callbackContext.nodeType || callbackContext.jquery ) ?
				jQuery( callbackContext ) :
				jQuery.event,
			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks("once memory"),
			// Status-dependent callbacks
			statusCode = s.statusCode || {},
			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},
			// The jqXHR state
			state = 0,
			// Default abort message
			strAbort = "canceled",
			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( state === 2 ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( (match = rheaders.exec( responseHeadersString )) ) {
								responseHeaders[ match[1].toLowerCase() ] = match[ 2 ];
							}
						}
						match = responseHeaders[ key.toLowerCase() ];
					}
					return match == null ? null : match;
				},

				// Raw string
				getAllResponseHeaders: function() {
					return state === 2 ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					var lname = name.toLowerCase();
					if ( !state ) {
						name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( !state ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( state < 2 ) {
							for ( code in map ) {
								// Lazy-add the new callback in a way that preserves old ones
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						} else {
							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR ).complete = completeDeferred.add;
		jqXHR.success = jqXHR.done;
		jqXHR.error = jqXHR.fail;

		// Remove hash character (#7531: and string promotion)
		// Add protocol if not provided (#5866: IE7 issue with protocol-less urls)
		// Handle falsy url in the settings object (#10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || ajaxLocation ) + "" ).replace( rhash, "" ).replace( rprotocol, ajaxLocParts[ 1 ] + "//" );

		// Alias method option to type as per ticket #12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = jQuery.trim( s.dataType || "*" ).toLowerCase().match( rnotwhite ) || [ "" ];

		// A cross-domain request is in order when we have a protocol:host:port mismatch
		if ( s.crossDomain == null ) {
			parts = rurl.exec( s.url.toLowerCase() );
			s.crossDomain = !!( parts &&
				( parts[ 1 ] !== ajaxLocParts[ 1 ] || parts[ 2 ] !== ajaxLocParts[ 2 ] ||
					( parts[ 3 ] || ( parts[ 1 ] === "http:" ? "80" : "443" ) ) !==
						( ajaxLocParts[ 3 ] || ( ajaxLocParts[ 1 ] === "http:" ? "80" : "443" ) ) )
			);
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( state === 2 ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		fireGlobals = s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger("ajaxStart");
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		cacheURL = s.url;

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// If data is available, append data to url
			if ( s.data ) {
				cacheURL = ( s.url += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data );
				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add anti-cache in url if needed
			if ( s.cache === false ) {
				s.url = rts.test( cacheURL ) ?

					// If there is already a '_' parameter, set its value
					cacheURL.replace( rts, "$1_=" + nonce++ ) :

					// Otherwise add one to the end
					cacheURL + ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + nonce++;
			}
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[0] ] ?
				s.accepts[ s.dataTypes[0] ] + ( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend && ( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {
			// Abort if not done already and return
			return jqXHR.abort();
		}

		// aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		for ( i in { success: 1, error: 1, complete: 1 } ) {
			jqXHR[ i ]( s[ i ] );
		}

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}
			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = setTimeout(function() {
					jqXHR.abort("timeout");
				}, s.timeout );
			}

			try {
				state = 1;
				transport.send( requestHeaders, done );
			} catch ( e ) {
				// Propagate exception as error if not done
				if ( state < 2 ) {
					done( -1, e );
				// Simply rethrow otherwise
				} else {
					throw e;
				}
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Called once
			if ( state === 2 ) {
				return;
			}

			// State is "done" now
			state = 2;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Determine if successful
			isSuccess = status >= 200 && status < 300 || status === 304;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// Convert no matter what (that way responseXXX fields are always set)
			response = ajaxConvert( s, response, jqXHR, isSuccess );

			// If successful, handle type chaining
			if ( isSuccess ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader("Last-Modified");
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader("etag");
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 || s.type === "HEAD" ) {
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					statusText = response.state;
					success = response.data;
					error = response.error;
					isSuccess = !error;
				}
			} else {
				// We extract error from statusText
				// then normalize statusText and status for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );
				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger("ajaxStop");
				}
			}
		}

		return jqXHR;
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	}
});

jQuery.each( [ "get", "post" ], function( i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {
		// shift arguments if data argument was omitted
		if ( jQuery.isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		return jQuery.ajax({
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		});
	};
});

// Attach a bunch of functions for handling common AJAX events
jQuery.each( [ "ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend" ], function( i, type ) {
	jQuery.fn[ type ] = function( fn ) {
		return this.on( type, fn );
	};
});


jQuery._evalUrl = function( url ) {
	return jQuery.ajax({
		url: url,
		type: "GET",
		dataType: "script",
		async: false,
		global: false,
		"throws": true
	});
};


jQuery.fn.extend({
	wrapAll: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each(function(i) {
				jQuery(this).wrapAll( html.call(this, i) );
			});
		}

		if ( this[0] ) {
			// The elements to wrap the target around
			var wrap = jQuery( html, this[0].ownerDocument ).eq(0).clone(true);

			if ( this[0].parentNode ) {
				wrap.insertBefore( this[0] );
			}

			wrap.map(function() {
				var elem = this;

				while ( elem.firstChild && elem.firstChild.nodeType === 1 ) {
					elem = elem.firstChild;
				}

				return elem;
			}).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each(function(i) {
				jQuery(this).wrapInner( html.call(this, i) );
			});
		}

		return this.each(function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		});
	},

	wrap: function( html ) {
		var isFunction = jQuery.isFunction( html );

		return this.each(function(i) {
			jQuery( this ).wrapAll( isFunction ? html.call(this, i) : html );
		});
	},

	unwrap: function() {
		return this.parent().each(function() {
			if ( !jQuery.nodeName( this, "body" ) ) {
				jQuery( this ).replaceWith( this.childNodes );
			}
		}).end();
	}
});


jQuery.expr.filters.hidden = function( elem ) {
	// Support: Opera <= 12.12
	// Opera reports offsetWidths and offsetHeights less than zero on some elements
	return elem.offsetWidth <= 0 && elem.offsetHeight <= 0 ||
		(!support.reliableHiddenOffsets() &&
			((elem.style && elem.style.display) || jQuery.css( elem, "display" )) === "none");
};

jQuery.expr.filters.visible = function( elem ) {
	return !jQuery.expr.filters.hidden( elem );
};




var r20 = /%20/g,
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( jQuery.isArray( obj ) ) {
		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {
				// Treat each array item as a scalar.
				add( prefix, v );

			} else {
				// Item is non-scalar (array or object), encode its numeric index.
				buildParams( prefix + "[" + ( typeof v === "object" ? i : "" ) + "]", v, traditional, add );
			}
		});

	} else if ( !traditional && jQuery.type( obj ) === "object" ) {
		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {
		// Serialize scalar item.
		add( prefix, obj );
	}
}

// Serialize an array of form elements or a set of
// key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, value ) {
			// If value is a function, invoke it and return its value
			value = jQuery.isFunction( value ) ? value() : ( value == null ? "" : value );
			s[ s.length ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );
		};

	// Set traditional to true for jQuery <= 1.3.2 behavior.
	if ( traditional === undefined ) {
		traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
	}

	// If an array was passed in, assume that it is an array of form elements.
	if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {
		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		});

	} else {
		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" ).replace( r20, "+" );
};

jQuery.fn.extend({
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map(function() {
			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		})
		.filter(function() {
			var type = this.type;
			// Use .is(":disabled") so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !rcheckableType.test( type ) );
		})
		.map(function( i, elem ) {
			var val = jQuery( this ).val();

			return val == null ?
				null :
				jQuery.isArray( val ) ?
					jQuery.map( val, function( val ) {
						return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
					}) :
					{ name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		}).get();
	}
});


// Create the request object
// (This is still attached to ajaxSettings for backward compatibility)
jQuery.ajaxSettings.xhr = window.ActiveXObject !== undefined ?
	// Support: IE6+
	function() {

		// XHR cannot access local files, always use ActiveX for that case
		return !this.isLocal &&

			// Support: IE7-8
			// oldIE XHR does not support non-RFC2616 methods (#13240)
			// See http://msdn.microsoft.com/en-us/library/ie/ms536648(v=vs.85).aspx
			// and http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9
			// Although this check for six methods instead of eight
			// since IE also does not support "trace" and "connect"
			/^(get|post|head|put|delete|options)$/i.test( this.type ) &&

			createStandardXHR() || createActiveXHR();
	} :
	// For all other browsers, use the standard XMLHttpRequest object
	createStandardXHR;

var xhrId = 0,
	xhrCallbacks = {},
	xhrSupported = jQuery.ajaxSettings.xhr();

// Support: IE<10
// Open requests must be manually aborted on unload (#5280)
if ( window.ActiveXObject ) {
	jQuery( window ).on( "unload", function() {
		for ( var key in xhrCallbacks ) {
			xhrCallbacks[ key ]( undefined, true );
		}
	});
}

// Determine support properties
support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
xhrSupported = support.ajax = !!xhrSupported;

// Create transport if the browser can provide an xhr
if ( xhrSupported ) {

	jQuery.ajaxTransport(function( options ) {
		// Cross domain only allowed if supported through XMLHttpRequest
		if ( !options.crossDomain || support.cors ) {

			var callback;

			return {
				send: function( headers, complete ) {
					var i,
						xhr = options.xhr(),
						id = ++xhrId;

					// Open the socket
					xhr.open( options.type, options.url, options.async, options.username, options.password );

					// Apply custom fields if provided
					if ( options.xhrFields ) {
						for ( i in options.xhrFields ) {
							xhr[ i ] = options.xhrFields[ i ];
						}
					}

					// Override mime type if needed
					if ( options.mimeType && xhr.overrideMimeType ) {
						xhr.overrideMimeType( options.mimeType );
					}

					// X-Requested-With header
					// For cross-domain requests, seeing as conditions for a preflight are
					// akin to a jigsaw puzzle, we simply never set it to be sure.
					// (it can always be set on a per-request basis or even using ajaxSetup)
					// For same-domain requests, won't change header if already provided.
					if ( !options.crossDomain && !headers["X-Requested-With"] ) {
						headers["X-Requested-With"] = "XMLHttpRequest";
					}

					// Set headers
					for ( i in headers ) {
						// Support: IE<9
						// IE's ActiveXObject throws a 'Type Mismatch' exception when setting
						// request header to a null-value.
						//
						// To keep consistent with other XHR implementations, cast the value
						// to string and ignore `undefined`.
						if ( headers[ i ] !== undefined ) {
							xhr.setRequestHeader( i, headers[ i ] + "" );
						}
					}

					// Do send the request
					// This may raise an exception which is actually
					// handled in jQuery.ajax (so no try/catch here)
					xhr.send( ( options.hasContent && options.data ) || null );

					// Listener
					callback = function( _, isAbort ) {
						var status, statusText, responses;

						// Was never called and is aborted or complete
						if ( callback && ( isAbort || xhr.readyState === 4 ) ) {
							// Clean up
							delete xhrCallbacks[ id ];
							callback = undefined;
							xhr.onreadystatechange = jQuery.noop;

							// Abort manually if needed
							if ( isAbort ) {
								if ( xhr.readyState !== 4 ) {
									xhr.abort();
								}
							} else {
								responses = {};
								status = xhr.status;

								// Support: IE<10
								// Accessing binary-data responseText throws an exception
								// (#11426)
								if ( typeof xhr.responseText === "string" ) {
									responses.text = xhr.responseText;
								}

								// Firefox throws an exception when accessing
								// statusText for faulty cross-domain requests
								try {
									statusText = xhr.statusText;
								} catch( e ) {
									// We normalize with Webkit giving an empty statusText
									statusText = "";
								}

								// Filter status for non standard behaviors

								// If the request is local and we have data: assume a success
								// (success with no data won't get notified, that's the best we
								// can do given current implementations)
								if ( !status && options.isLocal && !options.crossDomain ) {
									status = responses.text ? 200 : 404;
								// IE - #1450: sometimes returns 1223 when it should be 204
								} else if ( status === 1223 ) {
									status = 204;
								}
							}
						}

						// Call complete if needed
						if ( responses ) {
							complete( status, statusText, responses, xhr.getAllResponseHeaders() );
						}
					};

					if ( !options.async ) {
						// if we're in sync mode we fire the callback
						callback();
					} else if ( xhr.readyState === 4 ) {
						// (IE6 & IE7) if it's in cache and has been
						// retrieved directly we need to fire the callback
						setTimeout( callback );
					} else {
						// Add to the list of active xhr callbacks
						xhr.onreadystatechange = xhrCallbacks[ id ] = callback;
					}
				},

				abort: function() {
					if ( callback ) {
						callback( undefined, true );
					}
				}
			};
		}
	});
}

// Functions to create xhrs
function createStandardXHR() {
	try {
		return new window.XMLHttpRequest();
	} catch( e ) {}
}

function createActiveXHR() {
	try {
		return new window.ActiveXObject( "Microsoft.XMLHTTP" );
	} catch( e ) {}
}




// Install script dataType
jQuery.ajaxSetup({
	accepts: {
		script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /(?:java|ecma)script/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
});

// Handle cache's special case and global
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
		s.global = false;
	}
});

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function(s) {

	// This transport only deals with cross domain requests
	if ( s.crossDomain ) {

		var script,
			head = document.head || jQuery("head")[0] || document.documentElement;

		return {

			send: function( _, callback ) {

				script = document.createElement("script");

				script.async = true;

				if ( s.scriptCharset ) {
					script.charset = s.scriptCharset;
				}

				script.src = s.url;

				// Attach handlers for all browsers
				script.onload = script.onreadystatechange = function( _, isAbort ) {

					if ( isAbort || !script.readyState || /loaded|complete/.test( script.readyState ) ) {

						// Handle memory leak in IE
						script.onload = script.onreadystatechange = null;

						// Remove the script
						if ( script.parentNode ) {
							script.parentNode.removeChild( script );
						}

						// Dereference the script
						script = null;

						// Callback if not abort
						if ( !isAbort ) {
							callback( 200, "success" );
						}
					}
				};

				// Circumvent IE6 bugs with base elements (#2709 and #4378) by prepending
				// Use native DOM manipulation to avoid our domManip AJAX trickery
				head.insertBefore( script, head.firstChild );
			},

			abort: function() {
				if ( script ) {
					script.onload( undefined, true );
				}
			}
		};
	}
});




var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup({
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
		this[ callback ] = true;
		return callback;
	}
});

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" && !( s.contentType || "" ).indexOf("application/x-www-form-urlencoded") && rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters["script json"] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always(function() {
			// Restore preexisting value
			window[ callbackName ] = overwritten;

			// Save back as free
			if ( s[ callbackName ] ) {
				// make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && jQuery.isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		});

		// Delegate to script
		return "script";
	}
});




// data: string of html
// context (optional): If specified, the fragment will be created in this context, defaults to document
// keepScripts (optional): If true, will include scripts passed in the html string
jQuery.parseHTML = function( data, context, keepScripts ) {
	if ( !data || typeof data !== "string" ) {
		return null;
	}
	if ( typeof context === "boolean" ) {
		keepScripts = context;
		context = false;
	}
	context = context || document;

	var parsed = rsingleTag.exec( data ),
		scripts = !keepScripts && [];

	// Single tag
	if ( parsed ) {
		return [ context.createElement( parsed[1] ) ];
	}

	parsed = jQuery.buildFragment( [ data ], context, scripts );

	if ( scripts && scripts.length ) {
		jQuery( scripts ).remove();
	}

	return jQuery.merge( [], parsed.childNodes );
};


// Keep a copy of the old load method
var _load = jQuery.fn.load;

/**
 * Load a url into a page
 */
jQuery.fn.load = function( url, params, callback ) {
	if ( typeof url !== "string" && _load ) {
		return _load.apply( this, arguments );
	}

	var selector, response, type,
		self = this,
		off = url.indexOf(" ");

	if ( off >= 0 ) {
		selector = jQuery.trim( url.slice( off, url.length ) );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( jQuery.isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax({
			url: url,

			// if "type" variable is undefined, then "GET" method will be used
			type: type,
			dataType: "html",
			data: params
		}).done(function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery("<div>").append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		}).complete( callback && function( jqXHR, status ) {
			self.each( callback, response || [ jqXHR.responseText, status, jqXHR ] );
		});
	}

	return this;
};




jQuery.expr.filters.animated = function( elem ) {
	return jQuery.grep(jQuery.timers, function( fn ) {
		return elem === fn.elem;
	}).length;
};





var docElem = window.document.documentElement;

/**
 * Gets a window from an element
 */
function getWindow( elem ) {
	return jQuery.isWindow( elem ) ?
		elem :
		elem.nodeType === 9 ?
			elem.defaultView || elem.parentWindow :
			false;
}

jQuery.offset = {
	setOffset: function( elem, options, i ) {
		var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
			position = jQuery.css( elem, "position" ),
			curElem = jQuery( elem ),
			props = {};

		// set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		curOffset = curElem.offset();
		curCSSTop = jQuery.css( elem, "top" );
		curCSSLeft = jQuery.css( elem, "left" );
		calculatePosition = ( position === "absolute" || position === "fixed" ) &&
			jQuery.inArray("auto", [ curCSSTop, curCSSLeft ] ) > -1;

		// need to be able to calculate position if either top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;
		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( jQuery.isFunction( options ) ) {
			options = options.call( elem, i, curOffset );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );
		} else {
			curElem.css( props );
		}
	}
};

jQuery.fn.extend({
	offset: function( options ) {
		if ( arguments.length ) {
			return options === undefined ?
				this :
				this.each(function( i ) {
					jQuery.offset.setOffset( this, options, i );
				});
		}

		var docElem, win,
			box = { top: 0, left: 0 },
			elem = this[ 0 ],
			doc = elem && elem.ownerDocument;

		if ( !doc ) {
			return;
		}

		docElem = doc.documentElement;

		// Make sure it's not a disconnected DOM node
		if ( !jQuery.contains( docElem, elem ) ) {
			return box;
		}

		// If we don't have gBCR, just use 0,0 rather than error
		// BlackBerry 5, iOS 3 (original iPhone)
		if ( typeof elem.getBoundingClientRect !== strundefined ) {
			box = elem.getBoundingClientRect();
		}
		win = getWindow( doc );
		return {
			top: box.top  + ( win.pageYOffset || docElem.scrollTop )  - ( docElem.clientTop  || 0 ),
			left: box.left + ( win.pageXOffset || docElem.scrollLeft ) - ( docElem.clientLeft || 0 )
		};
	},

	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset,
			parentOffset = { top: 0, left: 0 },
			elem = this[ 0 ];

		// fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is its only offset parent
		if ( jQuery.css( elem, "position" ) === "fixed" ) {
			// we assume that getBoundingClientRect is available when computed position is fixed
			offset = elem.getBoundingClientRect();
		} else {
			// Get *real* offsetParent
			offsetParent = this.offsetParent();

			// Get correct offsets
			offset = this.offset();
			if ( !jQuery.nodeName( offsetParent[ 0 ], "html" ) ) {
				parentOffset = offsetParent.offset();
			}

			// Add offsetParent borders
			parentOffset.top  += jQuery.css( offsetParent[ 0 ], "borderTopWidth", true );
			parentOffset.left += jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true );
		}

		// Subtract parent offsets and element margins
		// note: when an element has margin: auto the offsetLeft and marginLeft
		// are the same in Safari causing offset.left to incorrectly be 0
		return {
			top:  offset.top  - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true)
		};
	},

	offsetParent: function() {
		return this.map(function() {
			var offsetParent = this.offsetParent || docElem;

			while ( offsetParent && ( !jQuery.nodeName( offsetParent, "html" ) && jQuery.css( offsetParent, "position" ) === "static" ) ) {
				offsetParent = offsetParent.offsetParent;
			}
			return offsetParent || docElem;
		});
	}
});

// Create scrollLeft and scrollTop methods
jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
	var top = /Y/.test( prop );

	jQuery.fn[ method ] = function( val ) {
		return access( this, function( elem, method, val ) {
			var win = getWindow( elem );

			if ( val === undefined ) {
				return win ? (prop in win) ? win[ prop ] :
					win.document.documentElement[ method ] :
					elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : jQuery( win ).scrollLeft(),
					top ? val : jQuery( win ).scrollTop()
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length, null );
	};
});

// Add the top/left cssHooks using jQuery.fn.position
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
// getComputedStyle returns percent when specified for top/left/bottom/right
// rather than make the css module depend on the offset module, we just check for it here
jQuery.each( [ "top", "left" ], function( i, prop ) {
	jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
		function( elem, computed ) {
			if ( computed ) {
				computed = curCSS( elem, prop );
				// if curCSS returns percentage, fallback to offset
				return rnumnonpx.test( computed ) ?
					jQuery( elem ).position()[ prop ] + "px" :
					computed;
			}
		}
	);
});


// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name }, function( defaultExtra, funcName ) {
		// margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return access( this, function( elem, type, value ) {
				var doc;

				if ( jQuery.isWindow( elem ) ) {
					// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
					// isn't a whole lot we can do. See pull request at this URL for discussion:
					// https://github.com/jquery/jquery/pull/764
					return elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height], whichever is greatest
					// unfortunately, this causes bug #3838 in IE6/8 only, but there is currently no good, small way to fix it.
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?
					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable, null );
		};
	});
});


// The number of elements contained in the matched element set
jQuery.fn.size = function() {
	return this.length;
};

jQuery.fn.andSelf = jQuery.fn.addBack;




// Register as a named AMD module, since jQuery can be concatenated with other
// files that may use define, but not via a proper concatenation script that
// understands anonymous AMD modules. A named AMD is safest and most robust
// way to register. Lowercase jquery is used because AMD module names are
// derived from file names, and jQuery is normally delivered in a lowercase
// file name. Do this after creating the global so that if an AMD module wants
// to call noConflict to hide this version of jQuery, it will work.

// Note that for maximum portability, libraries that are not jQuery should
// declare themselves as anonymous modules, and avoid setting a global if an
// AMD loader is present. jQuery is a special case. For more information, see
// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

if ( typeof define === "function" && define.amd ) {
	define( "jquery", [], function() {
		return jQuery;
	});
}




var
	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$;

jQuery.noConflict = function( deep ) {
	if ( window.$ === jQuery ) {
		window.$ = _$;
	}

	if ( deep && window.jQuery === jQuery ) {
		window.jQuery = _jQuery;
	}

	return jQuery;
};

// Expose jQuery and $ identifiers, even in
// AMD (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
// and CommonJS for browser emulators (#13566)
if ( typeof noGlobal === strundefined ) {
	window.jQuery = window.$ = jQuery;
}




return jQuery;

}));

},{}],30:[function(require,module,exports){
var t = new (require('hogan.js/lib/template')).Template(function(c,p,i){var _=this;_.b(i=i||"");if(_.s(_.f("layout",c,p,1),c,p,0,11,236,"{{ }}")){_.rs(c,p,function(c,p,_){_.b(_.rp("map",c,p,"    "));_.b("    <div class=\"intro\">");_.b("\n" + i);_.b("        <h1 class=\"intro__header\">");_.b("\n" + i);_.b("            API <span class=\"intro__api-version\">2.0</span>");_.b("\n" + i);_.b("            <span class=\"intro__subheader\">Карты по-новому</span>");_.b("\n" + i);_.b("        </h1>");_.b("\n" + i);_.b("    </div>");_.b("\n");});c.pop();}return _.fl();;});module.exports = {  render: function () { return t.render.apply(t, arguments); },  r: function () { return t.r.apply(t, arguments); },  ri: function () { return t.ri.apply(t, arguments); }};
},{"hogan.js/lib/template":28}],31:[function(require,module,exports){
var t = new (require('hogan.js/lib/template')).Template(function(c,p,i){var _=this;_.b(i=i||"");if(_.s(_.f("layout",c,p,1),c,p,0,11,820,"{{ }}")){_.rs(c,p,function(c,p,_){_.b(_.rp("map",c,p,"    "));_.b("    <div class=\"start\">");_.b("\n" + i);_.b("        <div class=\"start__content\">");_.b("\n" + i);_.b("            <a class=\"start__button\" href=\"http://api.2gis.ru/doc/maps/quickstart/\" title=\"Быстрый старт\">Быстрый старт</a>");_.b("\n" + i);_.b("            <div class=\"follow-us\">");_.b("\n" + i);_.b("                <a class=\"follow-us__link follow-us__link_name_twitter\" href=\"https://twitter.com/api2gis\" title=\"Следи за нами в Твиттере\">Следи за нами в Твиттере</a>");_.b("\n" + i);_.b("                <a class=\"follow-us__link follow-us__link_name_facebook\" href=\"https://www.facebook.com/api.2gis.ru\" title=\"Следи за нами в Фейсбуке\">Следи за нами в Фейсбуке</a>");_.b("\n" + i);_.b("                <a class=\"follow-us__link follow-us__link_name_vk\" href=\"https://vk.com/api2gis\" title=\"Следи за нами во Вконтакте\">Следи за нами во Вконтакте</a>");_.b("\n" + i);_.b("            </div>");_.b("\n" + i);_.b("        </div>");_.b("\n" + i);_.b("    </div>");_.b("\n" + i);_.b(_.rp("footer",c,p,"    "));});c.pop();}return _.fl();;});module.exports = {  render: function () { return t.render.apply(t, arguments); },  r: function () { return t.r.apply(t, arguments); },  ri: function () { return t.ri.apply(t, arguments); }};
},{"hogan.js/lib/template":28}],32:[function(require,module,exports){
var t = new (require('hogan.js/lib/template')).Template(function(c,p,i){var _=this;_.b(i=i||"");_.b("<div class=\"footer\">");_.b("\n" + i);_.b("    <div class=\"panel panel_type_white billing-dynamics footer__panel footer__panel_name_billing-dynamics\" data-footer-state=\"sun\">");_.b("\n" + i);_.b("        <div class=\"billing-dynamics__graph-wrapper\">");_.b("\n" + i);_.b("            <ul class=\"billing-dynamics__graph\">");_.b("\n" + i);_.b("                <li class=\"billing-dynamics__graph-point\">");_.b("\n" + i);_.b("                    <span class=\"billing-dynamics__graph-point-value\">");_.b("\n" + i);_.b("                        200");_.b("\n" + i);_.b("                    </span>");_.b("\n" + i);_.b("                </li>");_.b("\n" + i);_.b("                <li class=\"billing-dynamics__graph-point\">");_.b("\n" + i);_.b("                    <span class=\"billing-dynamics__graph-point-value\">");_.b("\n" + i);_.b("                        700");_.b("\n" + i);_.b("                    </span>");_.b("\n" + i);_.b("                </li>");_.b("\n" + i);_.b("                <li class=\"billing-dynamics__graph-point\">");_.b("\n" + i);_.b("                    <span class=\"billing-dynamics__graph-point-value\">");_.b("\n" + i);_.b("                        1300");_.b("\n" + i);_.b("                    </span>");_.b("\n" + i);_.b("                </li>");_.b("\n" + i);_.b("                <li class=\"billing-dynamics__graph-point\">");_.b("\n" + i);_.b("                    <span class=\"billing-dynamics__graph-point-value\">");_.b("\n" + i);_.b("                        1800");_.b("\n" + i);_.b("                    </span>");_.b("\n" + i);_.b("                </li>");_.b("\n" + i);_.b("            </ul>");_.b("\n" + i);_.b("        </div>");_.b("\n" + i);_.b("        <p class=\"billing-dynamics__description\">");_.b("\n" + i);_.b("            Динамика среднего чека (в рублях)");_.b("\n" + i);_.b("        </p>");_.b("\n" + i);_.b("    </div>");_.b("\n" + i);_.b("\n" + i);_.b("    <div class=\"panel panel_type_white lightness-panel footer__panel footer__panel_name_lightness\" data-footer-state=\"page1\">");_.b("\n" + i);_.b("        <div class=\"lightness-panel__counter\">00 : 02 : 25</div>");_.b("\n" + i);_.b("        <div class=\"lightness-panel__version lightness-panel__version_of_new-api\">");_.b("\n" + i);_.b("            <span class=\"lightness-panel__version-title\">Новый API</span>");_.b("\n" + i);_.b("            <span class=\"lightness-panel__progress-bar\">");_.b("\n" + i);_.b("                <span class=\"lightness-panel__progress-bar-fill\"></span>");_.b("\n" + i);_.b("            </span>");_.b("\n" + i);_.b("            <p class=\"lightness-panel__version-speed-level\">");_.b("\n" + i);_.b("                JS код: 358,8 KB  /  CSS код: 89,0 KB");_.b("\n" + i);_.b("            </p>");_.b("\n" + i);_.b("        </div>");_.b("\n" + i);_.b("        <div class=\"lightness-panel__version lightness-panel__version_of_old-api\">");_.b("\n" + i);_.b("            <span class=\"lightness-panel__version-title\">Старый API</span>");_.b("\n" + i);_.b("            <span class=\"lightness-panel__progress-bar\">");_.b("\n" + i);_.b("                <span class=\"lightness-panel__progress-bar-fill\"></span>");_.b("\n" + i);_.b("            </span>");_.b("\n" + i);_.b("            <p class=\"lightness-panel__version-speed-level\">");_.b("\n" + i);_.b("                JS код: 687,6 KB  /  CSS код: 60,4 KB");_.b("\n" + i);_.b("            </p>");_.b("\n" + i);_.b("        </div>");_.b("\n" + i);_.b("    </div>");_.b("\n" + i);_.b("\n" + i);_.b("    <div class=\"panel panel_type_white bankomats-panel footer__panel footer__panel_name_atm\" data-footer-state=\"two-markers\">");_.b("\n" + i);_.b("        <span class=\"bankomats-panel__title\">Банкоматы<br />Москвы</span>");_.b("\n" + i);_.b("    </div>");_.b("\n" + i);_.b("\n" + i);_.b("    <div class=\"footer__panel footer__panel_name_links\" data-footer-state=\"page7\">");_.b("\n" + i);_.b("        <a class=\"footer__link\" href=\"http://api.2gis.ru/doc/maps/info/\" title=\"Документация\">Документация</a>");_.b("\n" + i);_.b("        <a class=\"footer__link\" href=\"http://api.2gis.ru/doc/maps/examples/\" title=\"Примеры\">Примеры</a>");_.b("\n" + i);_.b("        <!--<a class=\"footer__link\" href=\"#\" title=\"\">Идеи и вопросы</a>-->");_.b("\n" + i);_.b("    </div>");_.b("\n" + i);_.b("</div>");_.b("\n");return _.fl();;});module.exports = {  render: function () { return t.render.apply(t, arguments); },  r: function () { return t.r.apply(t, arguments); },  ri: function () { return t.ri.apply(t, arguments); }};
},{"hogan.js/lib/template":28}],33:[function(require,module,exports){
var t = new (require('hogan.js/lib/template')).Template(function(c,p,i){var _=this;_.b(i=i||"");_.b("<div class=\"header\">");_.b("\n" + i);_.b("    <div class=\"header__panel panel panel_type_black features\">");_.b("\n" + i);_.b("        <a class=\"features__arrow-link features__arrow-link_to_left\" href=\"#\" title=\"\">Назад</a>");_.b("\n" + i);_.b("        <a class=\"features__arrow-link features__arrow-link_to_right\" href=\"#\" title=\"\">Вперёд</a>");_.b("\n" + i);_.b("\n" + i);_.b("        <ul class=\"features__table-of-contents\">");_.b("\n" + i);_.b("            <li class=\"features__table-of-contents-item features__table-of-contents-item_is-active_true\">Легковесность</li>");_.b("\n" + i);_.b("            <li class=\"features__table-of-contents-item\">Модульность</li>");_.b("\n" + i);_.b("            <li class=\"features__table-of-contents-item\"></li>");_.b("\n" + i);_.b("            <li class=\"features__table-of-contents-item\"></li>");_.b("\n" + i);_.b("            <li class=\"features__table-of-contents-item\"></li>");_.b("\n" + i);_.b("            <li class=\"features__table-of-contents-item\"></li>");_.b("\n" + i);_.b("        </ul>");_.b("\n" + i);_.b("\n" + i);_.b("        <ul class=\"features__list\">");_.b("\n" + i);_.b("            <li class=\"features__list-item features__list-item_name_lightness\">");_.b("\n" + i);_.b("                <div class=\"features__list-item-section\">");_.b("\n" + i);_.b("                    <h1 class=\"features__header\">Легковесность</h1>");_.b("\n" + i);_.b("                    <p>");_.b("\n" + i);_.b("                        JS и CSS код новой версии API занимает всего 105 Кб. в базовой поставке, вместо прежних 255 Кб., что позволило увеличить скорость открытия страниц с картой.");_.b("\n" + i);_.b("                    </p>");_.b("\n" + i);_.b("                </div>");_.b("\n" + i);_.b("            </li>");_.b("\n" + i);_.b("            <li class=\"features__list-item features__list-item_name_modularity\">");_.b("\n" + i);_.b("                <div class=\"features__list-item-section\">");_.b("\n" + i);_.b("                    <h1 class=\"features__header\">Модульность</h1>");_.b("\n" + i);_.b("                    <p>");_.b("\n" + i);_.b("                        Новый API совместим с большинством модулей библиотеки Leaflet. Помимо готовых модулей, таких как кластеризация, тепловая карта или анимированные маркеры, вы можете добавить свои.");_.b("\n" + i);_.b("                    </p>");_.b("\n" + i);_.b("                </div>");_.b("\n" + i);_.b("                <div class=\"features__list-item-section features__list-item-section_is-bottom_true\">");_.b("\n" + i);_.b("                    <a class=\"features__round-link features__round-link_name_two-markers\" data-state=\"two-markers\" href=\"#\" title=\"\"></a>");_.b("\n" + i);_.b("                    <a class=\"features__round-link features__round-link_name_sun\" data-state=\"sun\" href=\"#\" title=\"\"></a>");_.b("\n" + i);_.b("                    <a class=\"features__round-link features__round-link_name_marker\" data-state=\"marker\" href=\"#\" title=\"\"></a>");_.b("\n" + i);_.b("                </div>");_.b("\n" + i);_.b("            </li>");_.b("\n" + i);_.b("            <li class=\"features__list-item features__list-item_name_themes\">");_.b("\n" + i);_.b("                <div class=\"features__list-item-section\">");_.b("\n" + i);_.b("                    <h1 class=\"features__header\">Новый дизайн и&nbsp;выбор темы</h1>");_.b("\n" + i);_.b("                    <p>");_.b("\n" + i);_.b("                        Используйте тему, которая будет лучше смотреться на вашем сайте — тёмную или&nbsp;светлую.");_.b("\n" + i);_.b("                    </p>");_.b("\n" + i);_.b("                </div>");_.b("\n" + i);_.b("                <div class=\"features__list-item-section themes-switcher features__list-item-section_is-bottom_true\">");_.b("\n" + i);_.b("                    <a class=\"themes-switcher__switcher-link features__round-link themes-switcher__switcher-link_theme_light\" data-state=\"light-theme\" href=\"#\" title=\"Включить светлую тему\">Включить светлую тему</a>");_.b("\n" + i);_.b("                    <a class=\"themes-switcher__switcher-link features__round-link themes-switcher__switcher-link_theme_dark\" data-state=\"dark-theme\" href=\"#\" title=\"Включить тёмную тему\">Включить тёмную тему</a>");_.b("\n" + i);_.b("                </div>");_.b("\n" + i);_.b("            </li>");_.b("\n" + i);_.b("            <li class=\"features__list-item features__list-item_name_entrances\">");_.b("\n" + i);_.b("                <div class=\"features__list-item-section\">");_.b("\n" + i);_.b("                    <h1 class=\"features__header\">Входы в здания</h1>");_.b("\n" + i);_.b("                    <div class=\"pseudocard\">");_.b("\n" + i);_.b("                        <h2 class=\"pseudocard__header\">Центр реабилитации речи Татьяны Соловьёвой</h2>");_.b("\n" + i);_.b("                        <p class=\"pseudocard__address\">Невский проспект, 170</p>");_.b("\n" + i);_.b("                        <p class=\"pseudocard__route-instructions\">");_.b("\n" + i);_.b("                            Поверните на Исполкомскую, но далеко не уезжайте&nbsp;— вам в угловое здание. Пройдите во двор, вход будет по правую руку.");_.b("\n" + i);_.b("                        </p>");_.b("\n" + i);_.b("                        <p class=\"pseudocard__try-it\">");_.b("\n" + i);_.b("                            Вместо тысячи слов: <a class=\"pseudocard__find-entrance-link\" href=\"#\">Найти вход</a>");_.b("\n" + i);_.b("                        </p>");_.b("\n" + i);_.b("                    </div>");_.b("\n" + i);_.b("                </div>");_.b("\n" + i);_.b("                <div class=\"features__list-item-section entrances-examples features__list-item-section_is-bottom_true\">");_.b("\n" + i);_.b("                    <a class=\"entrances-examples__play-pause-button\" href=\"#\" title=\"\"></a>");_.b("\n" + i);_.b("                    <ul class=\"entrances-examples__list\">");_.b("\n" + i);_.b("                        <li class=\"entrances-examples__item\">");_.b("\n" + i);_.b("                            <a class=\"entrances-examples__example-link entrances-examples__example-link_is-shown_true\" href=\"#\" data-id=\"0\" title=\"\">1</a>");_.b("\n" + i);_.b("                        </li>");_.b("\n" + i);_.b("                        <li class=\"entrances-examples__item\">");_.b("\n" + i);_.b("                            <a class=\"entrances-examples__example-link\" data-id=\"1\" href=\"#\" title=\"\">2</a>");_.b("\n" + i);_.b("                        </li>");_.b("\n" + i);_.b("                        <li class=\"entrances-examples__item\">");_.b("\n" + i);_.b("                            <a class=\"entrances-examples__example-link\"  data-id=\"2\" href=\"#\" title=\"\">3</a>");_.b("\n" + i);_.b("                        </li>");_.b("\n" + i);_.b("                        <li class=\"entrances-examples__item\">");_.b("\n" + i);_.b("                            <a class=\"entrances-examples__example-link\" data-id=\"3\" href=\"#\" title=\"\">4</a>");_.b("\n" + i);_.b("                        </li>");_.b("\n" + i);_.b("                        <li class=\"entrances-examples__item\">");_.b("\n" + i);_.b("                            <a class=\"entrances-examples__example-link\"  data-id=\"4\" href=\"#\" title=\"\">5</a>");_.b("\n" + i);_.b("                        </li>");_.b("\n" + i);_.b("                        <li class=\"entrances-examples__item\">");_.b("\n" + i);_.b("                            <a class=\"entrances-examples__example-link\"  data-id=\"5\" href=\"#\" title=\"\">6</a>");_.b("\n" + i);_.b("                        </li>");_.b("\n" + i);_.b("                    </ul>");_.b("\n" + i);_.b("                </div>");_.b("\n" + i);_.b("            </li>");_.b("\n" + i);_.b("            <li class=\"features__list-item features__list-item_name_openness\">");_.b("\n" + i);_.b("                <div class=\"features__list-item-section\">");_.b("\n" + i);_.b("                    <h1 class=\"features__header\">Открытость</h1>");_.b("\n" + i);_.b("                    <p class=\"features__discription\">");_.b("\n" + i);_.b("                        Хорошая базовая функциональность");_.b("\n" + i);_.b("                        API 2ГИС обеспечивается использованием open-source библиотеки Leaflet.");_.b("\n" + i);_.b("                    </p>");_.b("\n" + i);_.b("                    <p class=\"features__discription\">");_.b("\n" + i);_.b("                        Свободная лицензия обоих проектов позволяет вам изменять и улучшать их код под любые задачи.");_.b("\n" + i);_.b("                    </p>");_.b("\n" + i);_.b("                </div>");_.b("\n" + i);_.b("                <div class=\"features__list-item-section openness-examples features__list-item-section_is-bottom_true\">");_.b("\n" + i);_.b("                    <a class=\"openness-examples__play-pause-button\" href=\"#\" title=\"\"></a>");_.b("\n" + i);_.b("                    <ul class=\"openness-examples__list\">");_.b("\n" + i);_.b("                        <li class=\"openness-examples__item\">");_.b("\n" + i);_.b("                            <a class=\"openness-examples__example-link openness-examples__example-link_is-shown_true\" data-id=\"0\" href=\"#\" title=\"\">2010</a>");_.b("\n" + i);_.b("                        </li>");_.b("\n" + i);_.b("                        <li class=\"openness-examples__item\">");_.b("\n" + i);_.b("                            <a class=\"openness-examples__example-link\" data-id=\"1\" href=\"#\" title=\"\">2011</a>");_.b("\n" + i);_.b("                        </li>");_.b("\n" + i);_.b("                        <li class=\"openness-examples__item\">");_.b("\n" + i);_.b("                            <a class=\"openness-examples__example-link\" data-id=\"2\" href=\"#\" title=\"\">2012</a>");_.b("\n" + i);_.b("                        </li>");_.b("\n" + i);_.b("                        <li class=\"openness-examples__item\">");_.b("\n" + i);_.b("                            <a class=\"openness-examples__example-link\" data-id=\"3\" href=\"#\" title=\"\">2012</a>");_.b("\n" + i);_.b("                        </li>");_.b("\n" + i);_.b("                        <li class=\"openness-examples__item\">");_.b("\n" + i);_.b("                            <a class=\"openness-examples__example-link\" data-id=\"4\" href=\"#\" title=\"\">2013</a>");_.b("\n" + i);_.b("                        </li>");_.b("\n" + i);_.b("                        <li class=\"openness-examples__item\">");_.b("\n" + i);_.b("                            <a class=\"openness-examples__example-link\" data-id=\"5\" href=\"#\" title=\"\">2014</a>");_.b("\n" + i);_.b("                        </li>");_.b("\n" + i);_.b("                    </ul>");_.b("\n" + i);_.b("                </div>");_.b("\n" + i);_.b("            </li>");_.b("\n" + i);_.b("            <li class=\"features__list-item features__list-item_name_all-devices\">");_.b("\n" + i);_.b("                <div class=\"features__list-item-section\">");_.b("\n" + i);_.b("                    <h1 class=\"features__header\">На всех экранах</h1>");_.b("\n" + i);_.b("                    <p>");_.b("\n" + i);_.b("                        Наша карта адаптируется под размер экрана. Ей одинаково удобно пользоваться на компьютерах, планшетах и телефонах.");_.b("\n" + i);_.b("                    </p>");_.b("\n" + i);_.b("                </div>");_.b("\n" + i);_.b("                <div class=\"features__list-item-section features__list-item-section_is-bottom_true\">");_.b("\n" + i);_.b("                    <a class=\"features__round-link features__round-link_name_smartphone\" data-state=\"smartphone\" href=\"#\" title=\"\"></a>");_.b("\n" + i);_.b("                    <a class=\"features__round-link features__round-link_name_notebook\" data-state=\"notepad\" href=\"#\" title=\"\"></a>");_.b("\n" + i);_.b("                    <a class=\"features__round-link features__round-link_name_tablet\" data-state=\"tablet\" href=\"#\" title=\"\"></a>");_.b("\n" + i);_.b("                </div>");_.b("\n" + i);_.b("            </li>");_.b("\n" + i);_.b("        </ul>");_.b("\n" + i);_.b("    </div>");_.b("\n" + i);_.b("\n" + i);_.b("    <div class=\"device tablet\">");_.b("\n" + i);_.b("        <div class=\"tablet__display\">");_.b("\n" + i);_.b("            <div id=\"mobile-map\" class=\"device__map\"></div>");_.b("\n" + i);_.b("\n" + i);_.b("            <div class=\"loupe\">");_.b("\n" + i);_.b("                <div class=\"loupe__glass loupe__glass_type_usual\"></div>");_.b("\n" + i);_.b("                <div class=\"loupe__glass loupe__glass_type_retina\"></div>");_.b("\n" + i);_.b("            </div>");_.b("\n" + i);_.b("        </div>");_.b("\n" + i);_.b("    </div>");_.b("\n" + i);_.b("</div>");_.b("\n" + i);_.b("\n");return _.fl();;});module.exports = {  render: function () { return t.render.apply(t, arguments); },  r: function () { return t.r.apply(t, arguments); },  ri: function () { return t.ri.apply(t, arguments); }};
},{"hogan.js/lib/template":28}],34:[function(require,module,exports){
var t = new (require('hogan.js/lib/template')).Template(function(c,p,i){var _=this;_.b(i=i||"");_.b("<div class=\"map\" id=\"map\"></div>");_.b("\n");return _.fl();;});module.exports = {  render: function () { return t.render.apply(t, arguments); },  r: function () { return t.r.apply(t, arguments); },  ri: function () { return t.ri.apply(t, arguments); }};
},{"hogan.js/lib/template":28}],35:[function(require,module,exports){
"use strict";
var __moduleName = "polyfill/indexOf";
if (!Array.prototype.indexOf) {
  Array.prototype.indexOf = function(elt) {
    var len = this.length >>> 0;
    var from = Number(arguments[1]) || 0;
    from = (from < 0) ? Math.ceil(from) : Math.floor(from);
    if (from < 0)
      from += len;
    for (; from < len; from++) {
      if (from in this && this[from] === elt)
        return from;
    }
    return -1;
  };
}


},{}]},{},[1])
//# sourceMappingURL=data:application/json;base64,
