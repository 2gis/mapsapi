(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";
var app = {plugins: {}},
    State = require('./state')(app),
    Router = require('./router')(app),
    Backbone = require('backbone'),
    _ = require('underscore'),
    $ = require('jquery');
app.root = '/';
app.state = new State();
app.vent = _.extend({}, Backbone.Events);
$(document).ready(function() {
  app.router = new Router();
  Backbone.history.start({
    pushState: true,
    root: app.root
  });
});


},{"./router":20,"./state":21,"backbone":26,"jquery":29,"underscore":27}],2:[function(require,module,exports){
"use strict";
module.exports = [[55.746986255132, 37.598473192469, 1500], [55.785034682001, 37.624490092909, 2000], [55.680037489389, 37.513587250391, 600], [55.827798934555, 37.514339121529, 700], [55.710849789922, 37.59408397048, 600], [55.762149128968, 37.612645089596, 1000], [55.441145086112, 37.765501346669, 500], [55.771666180607, 37.63745784407, 1000], [55.73907992628, 37.618035318928, 800], [55.796512625116, 37.542749443345, 1750], [55.772442481282, 37.67667194929, 870], [55.779294674851, 37.601381531412, 1000], [55.769916081628, 37.620232775259, 1000], [55.745311700525, 37.706077339853, 400], [55.766371982736, 37.605462075663, 410], [55.601940297958, 37.498169184556, 350], [55.762492408415, 37.618964437776, 1300], [55.761309508657, 37.614330655452, 1500], [55.799152733286, 37.613178972706, 800], [55.734369821139, 37.655830673388, 1500], [55.739209322874, 37.584848362014, 500], [55.744428405237, 37.629848403627, 750], [55.713382714141, 37.501713676796, 1000], [55.750670542095, 37.596268488773, 450], [55.692624712318, 37.494925457652, 1000], [55.662351017047, 37.485866697887, 1500], [55.777687697662, 37.633535127159, 1200], [55.781898582094, 37.596379594029, 700], [55.770569375091, 37.624856745585, 530], [55.670216620218, 37.476702502889, 800], [55.673288920572, 37.502058830131, 1000], [55.657726363624, 37.529572560283, 1000], [55.790511485903, 37.703674819354, 1000], [55.751582035877, 38.012203822421, 870], [55.695924268066, 37.61982000708, 900], [55.826851556864, 37.521413223916, 1000], [55.754588818818, 37.634799273763, 200], [55.651009417739, 37.750265075491, 900], [55.760045254309, 37.597507083621, 2000], [55.745447006276, 37.604870230282, 1620], [55.750768169536, 37.599618779374, 1620], [55.759357843628, 37.613021659087, 1620], [55.744564606341, 37.565535153144, 1620], [55.832853988712, 37.657596901964, 500], [55.567450993999, 37.562096392385, 1000], [55.81173722984, 37.573120811719, 1200], [55.806063361841, 37.513269492045, 400], [55.595437585489, 37.595147311405, 1000], [55.609705008005, 37.708752873359, 650], [55.681577255371, 37.723485693884, 1000], [55.880825378544, 37.650708744117, 1000], [55.740703001048, 37.622882690898, 1000], [55.750993865697, 37.591234992208, 500], [55.852341432828, 37.446381483313, 1200], [55.866018608445, 37.681317652121, 450], [55.596836181098, 37.512414041497, 2000], [55.926040444243, 37.752220679299, 700], [55.764429901012, 37.655117255395, 600], [55.812134525846, 37.6388830108, 450], [55.747368490038, 37.65619196179, 700], [55.714970913621, 37.401279844474, 700], [55.729419404379, 37.587047742767, 1300], [55.683832022576, 37.624260313295, 800], [55.579415765839, 37.899662083568, 800], [55.76813466449, 37.646858585632, 500], [55.784126601469, 37.634377863505, 1000], [55.43222177298, 37.766947775772, 300], [55.910945654336, 37.39610778156, 300], [55.741262053688, 37.652669449737, 600], [55.740006387887, 37.4818691888, 950], [55.732141874288, 37.611428296205, 750], [55.731760272658, 37.487374248036, 2000], [55.578963616805, 37.651011593221, 400], [55.64994794023, 37.745946714523, 1500], [55.757218779194, 37.659133619148, 1500], [55.809478478002, 37.464487921938, 1500], [55.78534495046, 37.572712320369, 1200], [55.766279184773, 37.630550432062, 500], [55.439840680727, 37.565551874518, 700], [55.633265932444, 37.658004588766, 1000], [55.860742240884, 37.480981381601, 700], [55.754681776367, 37.621529186085, 2000], [55.733147444093, 37.683993732323, 1000], [55.680260577515, 37.570658676066, 800], [55.759645942426, 37.652527251679, 1300], [55.789606412422, 37.747752765646, 500], [55.841027330969, 37.4870212043, 250], [55.70931429573, 37.59133973758, 1200], [55.734357281011, 37.661587559691, 2000], [55.771181731286, 37.669929197776, 500], [55.860062162604, 37.448304070413, 350], [55.776998884207, 37.585339918052, 700], [55.822970886261, 37.757643997523, 1500], [55.705540468065, 37.768754323679, 1250], [56.006655189768, 37.845868305378, 750], [55.722842143869, 37.566960095015, 650], [55.901765684546, 38.063007161654, 450], [55.582380271354, 37.899378636065, 1200], [55.661169299563, 37.760309354532, 1500], [55.778463019919, 37.662828902152, 700], [55.770994848514, 37.587298220222, 1000], [55.790276236475, 37.544519055553, 300], [55.842566721966, 37.495377219143, 800], [55.77230319589, 37.622629336696, 1000], [55.763581604617, 37.615982419427, 1000], [55.618880897886, 37.730128136302, 1000], [55.86341433381, 37.422651302998, 200], [55.754525136764, 37.569626711619, 700], [55.879293506238, 37.524535402947, 1500], [55.856770528115, 37.486485126712, 1500], [55.803589471333, 37.643915280509, 200], [55.761071884667, 37.680177773258, 200], [55.863712683601, 37.545815011827, 1500], [55.629977107428, 37.673373556762, 750], [55.799747520203, 37.482983405183, 800], [55.812807673145, 37.58320981726, 500], [55.839075573, 37.406742455382, 300], [55.781342174549, 37.634122384169, 1460], [55.65280697622, 37.393312493865, 1250], [55.770413463796, 37.599250682115, 1250], [55.744181806549, 37.582898322681, 1250], [55.806385864799, 37.582689491435, 650], [55.876551379068, 37.685568348325, 1000], [55.827142177004, 37.319413642643, 1000], [55.874149275603, 37.122400911238, 1000], [55.776009222546, 37.660531300132, 550], [55.846170470246, 37.357888880037, 580], [55.77860396682, 37.600725836651, 800], [55.794970716751, 37.700189957911, 1100], [55.887986019213, 37.611363501546, 1000], [55.655135789085, 37.49885063732, 700], [55.70403852916, 37.479247283415, 300], [55.750979960374, 37.817756155601, 420], [55.762657994338, 37.594861914268, 1100], [55.712326175491, 37.626365632982, 1000], [55.78362058689, 37.73437570927, 1500], [55.768134259293, 37.614183720107, 1460], [55.729600657132, 37.680548685836, 700], [55.826696559345, 37.445291194739, 800], [55.632537689989, 37.517265926432, 400], [55.813762861546, 37.575504226405, 700], [55.71956372567, 37.626468364906, 1500], [55.665606938848, 37.747059810303, 500], [55.718786226859, 37.787100901543, 850], [55.790889007341, 37.680303773594, 1200], [55.720097009459, 37.626158297101, 700], [55.633227569344, 37.608092460451, 650], [55.789722353328, 37.46162643267, 450], [55.912589569721, 37.732016573666, 700], [55.866255891856, 37.707566535931, 700], [55.659575586735, 37.620347690229, 510], [55.774414435117, 37.598842199853, 1000], [55.681882154546, 37.84811377028, 1000], [55.768562721023, 37.603687151449, 1000], [55.794629972958, 37.56290308605, 300], [55.742653406953, 37.629644100329, 600], [55.539979705876, 37.536368198439, 750], [55.890816149396, 37.446722972174, 800], [55.823689328432, 37.319676193487, 1250], [55.755529024618, 37.600574002572, 1000], [55.758228230733, 37.58694881918, 900], [55.717804377434, 37.857702583447, 200], [55.849967253439, 37.452001547301, 680], [55.774373471473, 37.824963314676, 1000], [55.919544665105, 37.993774414415, 500], [55.776998884207, 37.585339918052, 800], [55.720761642156, 37.600441615748, 1000], [55.766977126076, 37.614289647641, 1000], [55.950373716321, 37.298384529824, 50], [55.653604117265, 37.501497436579, 600], [55.979276672422, 37.180746946489, 1200], [55.759672820566, 37.574812855908, 1000], [55.760167177321, 37.615392575707, 1000], [55.80922485853, 37.528594418385, 600], [55.776614449651, 37.699775078319, 1000], [55.815445872832, 37.738070072691, 1000], [55.727174878288, 37.772082061534, 1000], [55.798765796535, 37.537749039623, 390], [55.759885908886, 37.647074939658, 390], [55.745076665874, 37.62737599133, 350], [55.837369011823, 37.636389809616, 390], [55.769487906099, 37.632520602008, 390], [55.860456251433, 37.602961187904, 390], [55.7266704224073, 37.5865427348999, 1000], [55.753108860751, 37.588977514969, 560], [55.751496916456, 37.599102711355, 560], [55.752531938207, 37.632793021231, 530], [55.774443654204, 37.584092797546, 530], [55.64014322193, 37.621916300111, 530], [55.691757584657, 37.529735958373, 530], [55.676406507069, 37.506304495281, 530], [55.771467704664, 37.582342039539, 530], [55.863110400948, 37.601964531137, 530], [55.819607297775, 37.573284159767, 560], [55.623150014628, 37.603872770782, 560], [55.778597313549, 37.600731575346, 560], [55.865256530469, 37.66147528012, 530], [55.757218779194, 37.659133619148, 560], [55.727623547331, 37.449445298744, 530], [55.789566193232, 37.752520981355, 560], [55.755816683163, 37.627867247421, 530], [55.621825231931, 37.713755930761, 530], [55.744564606341, 37.565535153144, 530], [55.726553183811, 37.582241268775, 530], [55.730167572518, 37.643949335912, 530], [55.754681776367, 37.621529186085, 530], [55.761266733258, 37.616539997438, 530], [55.741580692965, 37.537659888352, 530], [55.780135435647, 37.578934251755, 530], [55.800679859639, 37.534147193856, 560], [55.823284333356, 37.497703115267, 530], [55.687534600878, 37.543440333132, 560], [55.755774841204, 37.614638938872, 530], [55.687097264883, 37.545220575321, 560], [55.757101876616, 37.63490143231, 530], [55.640929309698, 37.530805723969, 530], [55.806800165047, 37.637592914873, 530], [55.808959889762, 37.637973360342, 530], [55.657314259821, 37.845234057199, 530], [55.718472698025, 37.420459482492, 560], [55.913164788065, 37.571248912026, 560], [55.612081708568, 37.732833225154, 560], [55.739179817462, 37.596321351441, 560], [55.730360344394, 37.634686005813, 560], [55.7591039377, 37.62481198576, 800], [55.765212963566, 37.602648109864, 600], [55.734166632305, 37.61887864362, 530], [55.684177612793, 37.56887951568, 560], [55.655853812108, 37.541891016952, 560], [55.741939685979, 37.653397177419, 560], [55.766995665975, 37.380241103557, 560], [55.767011757272, 37.593997571311, 530], [55.790878356686, 37.68030943754, 530], [55.771597995517, 37.632749931667, 560], [55.80575433463, 37.396870691712, 560], [55.795067813018, 37.699191692448, 560], [55.742406724264, 37.631449149292, 530], [55.764639072891, 37.606444569109, 560], [55.76665016629, 37.60269807499, 560], [55.763838306886, 37.606159302744, 560], [55.771884426069, 37.593482752282, 560], [55.775815233143, 37.585599472455, 560], [55.740703001048, 37.622882690898, 530], [55.775975457601, 37.595812073417, 560], [55.772154446907, 37.620631636137, 560], [55.719053465702, 37.608615081982, 560], [55.803342876099, 37.618196783226, 560], [55.781932261342, 37.723656736002, 560], [55.809478478002, 37.464487921938, 530], [55.734677799197, 37.612294339497, 560], [55.794342349883, 37.926247996439, 530], [55.707636825578, 37.657271977687, 530], [55.752035092271, 37.591170852141, 560], [55.80051986105, 37.533337330212, 560], [55.745990979868, 37.549390308713, 530], [55.757148904509, 37.621869395997, 560], [55.780394531565, 37.600349850973, 560], [55.763527057531, 37.635470184714, 560], [55.618623934709, 37.507234271998, 560], [55.845547451118, 37.66106710805, 560], [55.726873139525, 37.57967011542, 900], [55.672952268114, 37.664590121971, 1000], [55.817251553829, 37.387724896706, 300], [55.72423083947, 37.564138706115, 600], [55.742179266693, 37.501629207713, 1620], [55.727833143636, 37.583958142682, 1620], [55.756252533556, 37.60481992442, 1620], [55.761369349671, 37.623879112831, 1620], [55.766142678506, 37.621498880058, 1620], [55.734751896361, 37.64228006419, 1620], [55.777765200836, 37.586915196848, 1620], [55.642469357555, 37.665745763371, 200], [55.971881709193, 37.149851394702, 500], [55.744734838667, 37.624925735553, 500], [55.829241100002, 37.644100142156, 2350], [55.685444967217, 37.570213615301, 780], [55.787379479884, 37.67769500101, 780], [55.758754844155, 37.645943572099, 1000], [55.663741106326, 37.605571292333, 550], [55.760602508394, 37.77269956289, 600], [55.701368167729, 37.751591007256, 500], [55.749443819383, 37.645116754933, 1000], [55.772714146169, 37.630132531415, 1500], [55.828629102958, 37.614436218351, 1000], [55.836818360174, 37.354392081306, 1500], [55.780518307918, 37.601150338286, 700], [55.793483741621, 37.787946142427, 1000], [55.800066832281, 37.968947251242, 1400], [55.660346532821, 37.744091867878, 600], [55.860062162604, 37.448304070413, 800], [55.735469439732, 37.485958826155, 1500], [55.988078003598, 37.233706530176, 1000], [55.889673812351, 37.39146846432, 500], [55.591392298152, 38.202118512037, 600], [55.610327272341, 38.076043752723, 600], [55.702012646054, 37.747416192391, 500], [55.914655229431, 37.743271950892, 500], [55.939745164845, 37.504990147559, 800], [55.788839631795, 37.610403053838, 700], [55.772941243695, 37.542584908224, 800], [55.796751672788, 37.982806829897, 1000], [55.79347336348, 37.494341032716, 600], [55.784084090433, 37.690734434475, 1500], [55.674977497688, 37.739862130505, 800], [55.765430848539, 37.638952222657, 600], [55.753812687712, 37.63607070561, 500], [55.98361046976, 37.155914483068, 500], [55.695822005012, 37.424956853096, 150], [55.726234294865, 37.450796709798, 1000], [55.717710940881, 37.79248074899, 1000], [55.741340333417, 37.595348713969, 800], [55.725443535768, 37.403743437779, 900], [55.76092998167, 37.622881449579, 1000], [55.791600520931, 37.820297531207, 400], [55.761413348926, 37.623787675258, 750], [55.63652618514, 37.654591948707, 1000], [55.98196289666, 37.254116803679, 1000], [55.689097610887, 37.544678907596, 1000], [55.896879485875, 37.396794779325, 1250], [55.681118688478, 37.27011066285, 200], [55.595749546835, 37.602732205792, 1200], [55.768382348277, 37.62490281781, 800], [55.727881559864, 37.612176033049, 1000], [55.737446726589, 37.584581644625, 1000], [55.740408827735, 37.654196009452, 1500], [55.746268872421, 37.603397193081, 500], [55.768839724796, 37.668772605417, 600], [55.774266231637, 37.584394174287, 500], [55.87160135778, 37.684316007408, 750], [55.746841966031, 37.581825913157, 1300], [55.764950918288, 37.572334152251, 300], [55.756375476088, 37.612718608274, 400], [55.757223898723, 37.628305233168, 1000], [55.808803055593, 37.493520100121, 800], [55.79414639545, 37.969625245885, 600], [55.994786542173, 37.207524313881, 600], [55.739120975968, 37.768319375107, 700], [55.769711837348, 37.678775081914, 850], [55.75813566421, 37.795103014966, 800], [55.690412542438, 37.550698329007, 2000], [55.612117278428, 37.555014719248, 400], [55.762603360759, 37.566746904056, 2500], [55.686300464279, 37.621638862264, 180], [55.761413348926, 37.623787675258, 1200], [55.757279188767, 37.712786339749, 500], [55.817071613345, 37.826188315481, 1000], [55.73439801714, 37.85301560368, 700], [55.678625169856, 37.650884179112, 1000], [55.779486628378, 37.577264183111, 1000], [55.920695510133, 37.832235828621, 800], [55.883480776904, 37.53893742645, 1000], [55.711023346832, 37.618531144071, 400], [55.732203852388, 37.665100531762, 350], [55.85539932821, 37.484814743914, 900], [55.756617559493, 37.623097010113, 350], [55.897727342247, 37.593263718721, 1000], [55.706508891492, 37.818862687621, 1250], [55.913164788065, 37.571248912026, 340], [55.72092092074, 37.697162852447, 300], [55.820806196493, 37.6443298491, 600], [55.596456336906, 37.886002462999, 200], [55.747408407389, 37.77591983804, 1000], [55.781746955733, 37.592400475158, 1500], [55.761699738615, 37.751841666446, 250], [55.709892853405, 37.662577712337, 1200], [55.6895970001, 37.532969010674, 1000], [55.80916332953, 37.338823987582, 2000], [55.75475790531, 37.557520820207, 600], [55.658788681727, 37.757830665936, 900], [55.79571188365, 37.674616681733, 500], [55.645752109691, 37.660116823433, 1030], [55.793587272428, 37.518064711101, 1100], [55.866006189017, 37.677798105409, 380], [55.799142810629, 37.968270568062, 300], [55.999411879993, 37.2181833031, 1000], [55.603857351284, 37.523165390598, 1000], [55.547642201595, 37.683933009352, 700], [55.785503632796, 37.596052216386, 700], [55.683126369103, 37.625114569886, 210], [55.767463896608, 37.65218178152, 1000], [55.976549517882, 37.147184036367, 500], [55.796034291449, 37.560478365682, 1000], [55.750905112963, 37.59550816978, 1750], [55.762588217478, 37.62717089602, 500], [55.760360145128, 37.577958978686, 900], [55.757075094801, 37.599223527766, 700], [55.646497524154, 37.516114889581, 1000], [55.859833193823, 37.619712061916, 650], [55.857877219932, 37.50735918709, 700], [55.741774550958, 37.656067388697, 1000], [55.841241050518, 37.181688870606, 800], [55.709892853405, 37.662577712337, 1000], [55.897602671359, 37.604545516533, 1000], [55.76679448127, 37.620916870669, 1000], [55.836880680626, 37.645685809297, 300], [55.770332177129, 37.646665127122, 1500], [55.737031589465, 37.659371141372, 700], [55.80451087513, 37.56464533004, 400], [55.769300403207, 37.620758412817, 500], [55.789593832199, 37.613912434964, 600], [55.769212443729, 37.670588293006, 1500], [55.738859272968, 37.544181597614, 750], [55.787557248695, 37.635898429207, 1000], [55.758144475291, 37.606488470353, 500], [55.768793681912, 37.679214533251, 480], [55.625321711745, 37.714389062969, 480], [55.734911982926, 37.593401930487, 900], [55.760246737029, 37.614827813303, 850], [55.744564606341, 37.565535153144, 900], [55.751998751552, 37.582634665882, 850], [55.744455163708, 37.626940602884, 900], [55.741939685979, 37.653397177419, 900], [55.713144252382, 37.891549283419, 500], [55.739614080327, 37.61345812662, 800], [55.77436262071, 37.618574015397, 600], [55.735659386803, 37.657552016361, 700], [55.776550314742, 37.60772565016, 1200], [55.810421725921, 37.636648573917, 2000], [55.78109645497, 37.599033088456, 850], [55.777765200836, 37.586915196848, 850], [55.822275502309, 37.499092286812, 900], [55.746438894447, 37.536412805538, 850], [55.588541815968, 37.663045606892, 480], [55.551007892297, 37.554181553239, 440], [55.764923914969, 37.411074817282, 480], [55.690763975966, 37.858784972748, 480], [55.846110058845, 37.363451282268, 440], [55.678390539129, 37.703530476072, 480], [55.76959216917, 37.569528816328, 440], [55.702461037735, 37.505228299182, 480], [55.794179160518, 37.576555308959, 480], [55.660269763302, 37.407655219638, 480], [55.770809346816, 37.678694276456, 700], [55.753481638919, 37.71656558641, 820], [55.689401931032, 37.601708984023, 820], [55.809123962677, 37.636334109863, 800], [55.687180882755, 37.573667567491, 800], [55.90939512968, 37.540400571198, 800], [55.756247089733, 37.598597383119, 800], [55.751496916456, 37.599102711355, 800], [55.742637920201, 37.499625131449, 820], [55.752196457456, 37.594079182603, 800], [55.761189621438, 37.579477602474, 800], [55.760137583878, 37.584538920718, 820], [55.772800771938, 37.678895207153, 800], [55.771312877404, 37.682196479574, 820], [55.780135435647, 37.578934251755, 800], [55.643754721005, 37.526395669448, 800], [55.658250613727, 37.742409856383, 800], [55.659491527892, 37.749604419041, 820], [55.653622718299, 37.620706456922, 800], [55.803342876099, 37.618196783226, 820], [55.823284333356, 37.497703115267, 820], [55.727781226876, 37.623560859163, 800], [55.609772239646, 37.720052947482, 800], [55.621825231931, 37.713755930761, 820], [55.744564606341, 37.565535153144, 800], [55.63775182136, 37.656246854628, 800], [55.757488638839, 37.635426874308, 820], [55.757450772214, 37.631843411273, 820], [55.761371390901, 37.570285001036, 820], [55.753926643696, 37.637600182852, 820], [55.777649415311, 37.661054284334, 800], [55.76250270137, 37.567601375155, 800], [55.785539799645, 37.665350801423, 820], [55.768226875937, 37.644771836162, 820], [55.766952891582, 37.65294515469, 800], [55.742499715548, 37.601853458658, 820], [55.759676360832, 37.657071212259, 800], [55.759542275726, 37.658312509843, 820], [55.761674097319, 37.662750594314, 820], [55.757218779194, 37.659133619148, 800], [55.748559043292, 37.558287625139, 820], [55.741774550958, 37.656067388697, 820], [55.765421540525, 37.590952705756, 820], [55.64994794023, 37.745946714523, 820], [55.743146418734, 37.427897376173, 800], [55.767075363589, 37.829477564505, 820], [55.784496839544, 37.597503089423, 820], [55.799747520203, 37.482983405183, 820], [55.794633797563, 37.494482249537, 800], [55.731125812698, 37.634137896397, 820], [55.671452036829, 37.554052965421, 800], [55.730026388995, 37.630671249176, 800], [55.73162984703, 37.640894637165, 820], [55.732452924046, 37.645053861616, 800], [55.739356842589, 37.587617477413, 820], [55.735823244468, 37.520387413717, 800], [55.750089728779, 37.789003669421, 820], [55.863712683601, 37.545815011827, 800], [55.779864915837, 37.632585138351, 820], [55.678477774302, 37.56433014871, 820], [55.804230080474, 37.583478465218, 800], [55.845547451118, 37.66106710805, 820], [55.789976962016, 37.678584678723, 820], [55.782381577149, 37.708583054987, 820], [55.805540116573, 37.414476598367, 800], [55.768370634396, 37.632454670399, 820], [55.773100871573, 37.632824536156, 800], [55.845499600478, 37.438654321025, 800], [55.73881791835, 37.652729612499, 820], [55.741262053688, 37.652669449737, 820], [55.746837632258, 37.654800268997, 800], [55.728243469971, 37.566588340541, 440], [55.772191301651, 37.571416015584, 440], [55.783050965206, 37.702661296059, 440], [55.766767773246, 37.59275738923, 440], [55.760549947998, 37.614613864099, 800], [55.741025968859, 37.627878514764, 820], [55.709128651589, 37.620768031907, 800], [55.693368004546, 37.534068444947, 800], [55.689097610887, 37.544678907596, 820], [55.691949045316, 37.53733129004, 820], [55.743121865542, 37.507063106199, 820], [55.765083905012, 37.611304310635, 820], [55.765748075911, 37.608697885268, 800], [55.763394403663, 37.635978628928, 820], [55.759806718974, 37.647587342083, 800], [55.740453943162, 36.857939217376, 800], [55.719053465702, 37.608615081982, 820], [55.723472614699, 37.610150138193, 820], [55.639104231757, 37.352915131998, 820], [55.658885766722, 37.430131534756, 820], [55.677938521445, 37.467137992801, 820], [55.66412515815, 37.482208186191, 800], [55.646996723794, 37.411716304883, 800], [55.687438023292, 37.604376135164, 820], [55.766995665975, 37.380241103557, 800], [55.793632113318, 37.937960517202, 820], [55.963460131204, 37.405384739265, 800], [55.980682101021, 37.410382084459, 820], [55.937674461372, 37.518347466858, 800], [55.608149376541, 38.091201204575, 800], [55.982765845058, 37.174632671081, 600], [55.891630860967, 37.748865263889, 800], [55.891764330544, 37.727230840786, 800], [55.910945654336, 37.39610778156, 820], [55.657314259821, 37.845234057199, 800], [55.604659717756, 37.488789304422, 820], [55.603727141437, 37.290421342756, 820], [55.668945199444, 37.453592406265, 820], [55.886939765636, 37.656494830514, 630], [55.870642418935, 37.461258085643, 820], [55.62447437611, 37.709202591779, 820], [55.689894195182, 37.852169701422, 820], [55.586248843071, 37.675706072596, 1500], [55.789976962016, 37.678584678723, 1000], [55.823153984039, 37.526957142451, 950], [55.846172191891, 37.575977434061, 950], [55.772154446907, 37.620631636137, 2000], [55.638365321531, 37.666641514304, 540], [55.676352363847, 37.519690398727, 570], [55.779708403421, 37.579983677627, 570], [55.72169472453, 37.622847871489, 540], [55.813459862284, 37.650106999343, 570], [55.626407055249, 37.743703462563, 570], [55.632538572888, 37.519720196442, 570], [55.765220184953, 37.731903188963, 400], [55.75701857305, 37.77506555103, 660], [55.604763692178, 37.712454278175, 540], [55.723958756249, 37.672708766997, 660], [55.698644581603, 37.843144114432, 660], [55.816933307983, 37.403344588749, 660], [55.63775182136, 37.656246854628, 660], [55.735589317995, 37.475611089922, 660], [55.892732162276, 37.616660637098, 660], [55.61230783504, 37.535976655751, 540], [55.844595786881, 37.501079066692, 660], [55.65760463041, 37.740345610743, 660], [55.792489131968, 37.565600822258, 660], [55.847679799211, 37.349631101746, 660], [55.654923733272, 37.544413708852, 660], [55.79850532493, 37.77548802417, 540], [55.675327139352, 37.470627286763, 660], [55.549142358514, 37.55434927375, 660], [55.852299890617, 37.64578853307, 660], [55.607440514158, 37.589925699032, 540], [55.771640051625, 37.620341331098, 630], [55.872173242841, 37.558791462285, 550], [55.747554656643, 37.581902500023, 800], [55.869453919281, 37.675889732233, 400], [55.803342876099, 37.618196783226, 350], [55.639531756018, 37.843378580632, 1000], [55.673454099159, 37.664742061253, 350], [55.420267963107, 37.547847923453, 350], [55.782487837673, 37.509967337465, 600], [55.722874775555, 37.688986011837, 500], [55.730558984026, 37.64484237324, 600], [55.782393043384, 37.59792629707, 1000], [55.828827707661, 37.650749766322, 1000], [55.771475509955, 37.655165106704, 1000], [55.75731757835, 37.602675804282, 1000], [55.886048857963, 37.611480323348, 1500], [55.896564902286, 37.450311678984, 500], [55.726775269113, 37.669614848959, 270], [55.850693246938, 37.430781777171, 1000], [55.696462679157, 37.743983520963, 1500], [55.737266918077, 37.617322275831, 1350], [55.792010121988, 37.7491685368, 800], [55.776395380563, 37.643700736293, 1500], [55.876974364461, 37.683954943348, 1000], [55.763938755663, 37.609338663504, 1250], [55.643754721005, 37.526395669448, 1800], [55.96014542121, 38.050363444435, 700], [55.655853812108, 37.541891016952, 300], [55.743128002056, 37.629735471856, 850], [55.754112711852, 37.798683008731, 1000], [55.756679497615, 37.605780262485, 1250], [55.733990115931, 37.710735104034, 1000], [55.7624887871, 37.656579281339, 1000], [55.745752293751, 37.667850125048, 1500], [55.675327139352, 37.470627286763, 750], [55.81618330704, 37.639693522517, 1000], [55.636192571207, 37.763491507706, 800], [55.757163314201, 37.633960826705, 1000], [55.756789149342, 37.621137249808, 1000], [55.806463988873, 37.718010432457, 1000], [55.78078447067, 37.558516514842, 1000], [55.745647186712, 37.557651500657, 1000], [55.745035242373, 37.598142633342, 1500], [55.738294035125, 37.746194593739, 200], [55.765838129133, 37.591351148391, 500], [55.745176493912, 37.810500073674, 650], [55.800947163139, 37.586565398049, 500], [55.762846609104, 37.606637128204, 850], [55.781294665757, 37.601390409479, 1300], [55.771065287816, 37.62244805909, 1000], [55.777649415311, 37.661054284334, 600], [55.789999429602, 37.680827477937, 360], [55.741331253177, 37.658665241689, 360], [55.743759753668, 37.568930481156, 360], [55.808179284987, 37.638373048779, 360], [55.729218839245, 37.622565476957, 360], [55.771789786379, 37.679058772418, 360], [55.760748787781, 37.632156161768, 360], [55.762846609104, 37.606637128204, 360], [55.727573381721, 37.581227524916, 360], [55.640687011141, 37.603330199438, 400], [55.760838357696, 37.580637390911, 360], [55.618623934709, 37.507234271998, 400], [55.80909257734, 37.798405304541, 360], [55.57030482675, 37.575724028257, 360], [55.801941696941, 37.5319459416, 360], [55.76092998167, 37.622881449579, 360], [55.678323013998, 37.561120844215, 400], [55.888811644547, 37.433530516694, 360], [55.783973028198, 37.597353191198, 360], [55.750707337446, 38.034726400717, 550], [55.74333724768, 37.652522269128, 1020], [55.755529024618, 37.600574002572, 1000], [55.735038333616, 37.585567724913, 1020], [55.651472695113, 37.483053584981, 800], [55.892784849455, 37.57308188522, 500], [55.622606755434, 37.605940442688, 1000], [55.748477634657, 37.608571326264, 1000], [55.910523494729, 37.726726127625, 200], [55.743392781916, 37.582140601765, 1000], [55.752158248681, 37.818582828348, 1000], [55.688767978486, 37.528994523668, 1000], [55.809478478002, 37.464487921938, 1000], [55.666878988825, 37.551940546139, 1000], [55.859990844836, 37.659176916686, 870], [55.551671744284, 37.702541579544, 870], [55.686644027013, 37.30592672329, 830], [55.888047767524, 37.509791385301, 800], [55.770852339959, 37.646962742117, 1250], [55.568479654634, 37.58539296829, 870], [55.83984535307, 37.488826687192, 870], [55.753968150118, 37.636815794663, 870], [55.675934391784, 37.678725386321, 870], [55.741331253177, 37.658665241689, 870], [55.741040576475, 37.627384195544, 870], [55.640136898939, 37.606534270595, 870], [55.977986681098, 37.155032144658, 870], [55.917612903814, 37.867089429432, 870], [55.747513281034, 37.861920893688, 870], [55.878761836987, 37.423415925701, 870], [55.764291345324, 37.590499048565, 1100], [55.66031073858, 37.515378631221, 800], [55.755774841204, 37.614638938872, 350], [55.651736855729, 37.618847007929, 550], [55.639421741307, 37.607284631084, 500], [55.782174472147, 37.633515540895, 1500], [55.820356788918, 37.664990822477, 650], [55.817153223093, 37.500317355476, 1500], [55.774720877, 37.642339972799, 1000], [55.681758026604, 37.256278139317, 900], [55.633799619428, 37.518258000574, 6000], [55.815745982648, 37.619550336038, 2000], [55.776882161555, 37.686817480605, 1620], [55.737796236749, 37.602023064506, 1620], [55.565538176068, 37.562378142303, 300], [55.803180299992, 37.56157114297, 600], [55.752032108269, 37.592619980734, 1500], [55.857868003351, 37.671816211097, 1000], [55.677938521445, 37.467137992801, 380], [55.982765845058, 37.174632671081, 380], [55.712326175491, 37.626365632982, 1070], [55.867114089973, 37.493873190562, 500], [55.669485820138, 37.451645358988, 580], [55.744344643673, 37.627359794989, 1000], [55.7627486683039, 37.6352515669963, 950], [55.89110378887, 37.608876246717, 500], [55.794645438552, 37.490521209392, 1200], [55.763010397193, 37.635687696541, 530], [55.600276470587, 37.608490985121, 500], [55.823284333356, 37.497703115267, 440], [55.7602467384564, 37.6148278935724, 480], [55.763581604617, 37.615982419427, 1500], [55.862969162378, 37.585436561315, 250], [55.743121865542, 37.507063106199, 260], [55.638413033449, 37.351648925286, 280], [55.653622718299, 37.620706456922, 280], [55.633158180348, 37.624287450591, 280], [55.824903123548, 37.436407252143, 280], [55.727061913735, 37.679741325817, 280], [55.982765845058, 37.174632671081, 280], [55.758954366133, 37.61069123102, 250], [55.874633941982, 37.587850252879, 300], [55.863712683601, 37.545815011827, 250], [55.901831185487, 37.548441590617, 260], [55.621825231931, 37.713755930761, 280], [55.90939512968, 37.540400571198, 280], [55.612223538128, 37.718272535552, 280], [55.622606755434, 37.605940442688, 280], [55.667530166701, 37.658514297783, 280], [55.865592495176, 37.46222451979, 280], [55.662145020923, 37.508711262536, 250], [55.700143551074, 37.855631257536, 250], [55.772314741489, 37.631595668126, 280], [55.755774841204, 37.614638938872, 280], [55.677938521445, 37.467137992801, 280], [55.716672930537, 37.409255279024, 280], [55.766995665975, 37.380241103557, 280], [55.612081708568, 37.732833225154, 280], [55.775063779324, 37.479060757281, 250], [55.69586126909, 37.66492576254, 280], [55.762340409755, 37.563405727383, 280], [55.827535601652, 37.642427963005, 280], [55.781060833557, 37.632410425513, 250], [55.809123962677, 37.636334109863, 280], [55.691757584657, 37.529735958373, 250], [55.718006739925, 37.78524257825, 280], [55.729755823778, 37.732120239726, 280], [55.750213382256, 37.817291167553, 280], [55.687438023292, 37.604376135164, 280], [55.747439771414, 37.584306977402, 280], [55.764700113209, 37.603050902011, 280], [55.745886400822, 37.56625820783, 260], [55.781961792897, 37.706595908587, 280], [55.729015251257, 37.623787833549, 280], [55.709128651589, 37.620768031907, 280], [55.74105617465, 37.625242915408, 280], [55.708714114812, 37.622081072261, 250], [55.689401931032, 37.601708984023, 280], [55.658788681727, 37.757830665936, 280], [55.804397925608, 37.582135800769, 250], [55.683138803805, 37.549236332918, 280], [55.548572457166, 37.542419438242, 280], [55.566408261479, 37.573021276811, 280], [55.863110400948, 37.601964531137, 280], [55.706049778639, 37.766978621277, 280], [55.66576076324, 37.628761608084, 250], [55.61108363007, 37.606861806172, 280], [55.898229919658, 37.588464850878, 280], [55.649704518372, 37.744621167289, 280], [55.808857009781, 37.462915218785, 280], [55.757765414493, 37.634415628493, 280], [55.703752094311, 37.458982729513, 280], [55.80713578363, 37.409329486817, 280], [55.640929309698, 37.530805723969, 250], [55.822910849094, 37.588560811176, 280], [55.847685494438, 37.361116027329, 280], [55.765192722344, 37.638936769944, 280], [55.780003432285, 37.601177236636, 250], [55.659491527892, 37.749604419041, 280], [55.665074467241, 37.48158795609, 280], [55.664192839186, 37.481105080583, 280], [55.881017715015, 37.450458802583, 280], [55.885574773449, 37.602199641744, 280], [55.655853812108, 37.541891016952, 280], [55.669789264547, 37.552200036195, 280], [55.78874417097, 37.681389987209, 280], [55.822506742055, 37.823235768643, 280], [55.803342876099, 37.618196783226, 280], [55.88808433141, 37.662537478276, 280], [55.77582926831, 37.835708282522, 280], [55.809478478002, 37.464487921938, 280], [55.741774550958, 37.656067388697, 280], [55.802757516663, 37.755688868964, 280], [55.777307963587, 37.52081996953, 280], [55.851503890709, 37.676193005816, 280], [55.865571828796, 37.704971569412, 280], [55.764122861292, 37.706104506137, 500], [55.658984212023, 37.40259351913, 240], [55.884308721149, 37.601891014402, 340], [55.685217989051, 37.621808807253, 340], [55.653622718299, 37.620706456922, 240], [55.706248220392, 37.765442962958, 340], [55.774994582086, 37.583240905132, 260], [55.863110400948, 37.601964531137, 340], [55.846170470246, 37.357888880037, 340], [55.691757584657, 37.529735958373, 340], [55.757218779194, 37.659133619148, 340], [55.747355645627, 37.679901195341, 340], [55.744564606341, 37.565535153144, 340], [55.622606755434, 37.605940442688, 340], [55.841027330969, 37.4870212043, 340], [55.731742099694, 37.663741294177, 340], [55.823284333356, 37.497703115267, 240], [55.859023751085, 37.39515662787, 240], [55.658250613727, 37.742409856383, 240], [55.657314259821, 37.845234057199, 290], [55.913164788065, 37.571248912026, 290], [55.717315820085, 37.414055657984, 240], [55.618623934709, 37.507234271998, 240], [55.815445872832, 37.738070072691, 290], [55.612628778523, 37.720152956239, 240], [55.659491527892, 37.749604419041, 240], [55.655853812108, 37.541891016952, 290], [55.729755823778, 37.732120239726, 240], [55.717496760801, 37.794159518567, 240], [55.766371982736, 37.605462075663, 290], [55.741774550958, 37.656067388697, 240], [55.770266018446, 37.597235258901, 260], [55.678635074875, 37.892599535826, 240], [55.891630860967, 37.748865263889, 240], [55.67382278562, 37.276155020637, 260], [55.916546364792, 37.759186348776, 240], [55.888811644547, 37.433530516694, 240], [55.648774891061, 37.656282868281, 240], [55.761697065365, 37.636082911922, 700], [55.758621641167, 37.632857404435, 800], [55.73314868412, 37.48480752487, 2000], [55.901831185487, 37.548441590617, 260], [55.757218779194, 37.659133619148, 260], [55.810505065685, 37.383088859638, 260], [55.897530279874, 37.666193998321, 260], [55.707259409807, 37.387145982422, 260], [55.659491527892, 37.749604419041, 260], [55.622606755434, 37.605940442688, 260], [55.766995665975, 37.380241103557, 260], [55.604659717756, 37.488789304422, 260], [55.653622718299, 37.620706456922, 260], [55.658250613727, 37.742409856383, 260], [55.910945654336, 37.39610778156, 260], [55.881017715015, 37.450458802583, 260], [55.865571828796, 37.704971569412, 260], [55.687438023292, 37.604376135164, 260], [55.863712683601, 37.545815011827, 260], [55.891630860967, 37.748865263889, 260], [55.740961920922, 37.415484818858, 260], [55.677938521445, 37.467137992801, 260], [55.606708000971, 37.536719795871, 260], [55.799747520203, 37.482983405183, 260], [55.655853812108, 37.541891016952, 260], [55.898606941829, 37.629384932193, 260], [55.786747511505, 37.482626227805, 260], [55.729755823778, 37.732120239726, 260], [55.658885766722, 37.430131534756, 260], [55.61108363007, 37.606861806172, 260], [55.746962972883, 37.64650132594, 500], [55.758548643042, 37.641135072996, 2000], [55.809478478002, 37.464487921938, 260], [55.753558293862, 37.598244847752, 1350], [55.670557596519, 37.260589927726, 550], [55.823284333356, 37.497703115267, 260], [55.818266420876, 37.769898171037, 200], [55.625142575517, 37.760911936809, 260], [55.850984575599, 37.597454450948, 260], [55.612081708568, 37.732833225154, 260], [55.785539799645, 37.665350801423, 260], [55.69586126909, 37.66492576254, 260], [55.609772239646, 37.720052947482, 260], [55.823284333356, 37.497703115267, 260], [55.916546364792, 37.759186348776, 260], [55.859990844836, 37.659176916686, 500], [55.752447700244, 37.607259959992, 500], [55.815707914915, 37.523575811097, 1000], [55.788458507847, 37.593113762912, 1000], [55.751207115474, 37.606873007226, 1500], [55.70778233772, 37.657282425169, 350], [55.687438023292, 37.604376135164, 350], [55.689401931032, 37.601708984023, 350], [55.913164788065, 37.571248912026, 350], [55.747471451943, 37.706847364924, 350], [55.640929309698, 37.530805723969, 350], [55.658250613727, 37.742409856383, 350], [55.653622718299, 37.620706456922, 350], [55.852795867392, 37.585806826996, 350], [55.891630860967, 37.748865263889, 350], [55.823284333356, 37.497703115267, 350], [55.692224602818, 37.896429179837, 350], [55.621825231931, 37.713755930761, 350], [55.609772239646, 37.720052947482, 350], [55.585271705518, 37.724892853133, 350], [55.655853812108, 37.541891016952, 350], [55.758548643042, 37.641135072996, 350], [55.757454052624, 37.634513679065, 350], [55.69586126909, 37.66492576254, 350], [55.916546364792, 37.759186348776, 350], [55.982765845058, 37.174632671081, 350], [55.612081708568, 37.732833225154, 350], [55.785539799645, 37.665350801423, 350], [55.707259409807, 37.387145982422, 350], [55.766995665975, 37.380241103557, 350], [55.757070679828, 37.660871867922, 350], [55.757218779194, 37.659133619148, 350], [55.751582035877, 38.012203822421, 350], [55.706926865011, 37.592152658726, 350], [55.741774550958, 37.656067388697, 350], [55.846170470246, 37.357888880037, 350], [55.794342349883, 37.926247996439, 350], [55.817251553829, 37.387724896706, 350], [55.669789264547, 37.552200036195, 350], [55.799747520203, 37.482983405183, 350], [55.863712683601, 37.545815011827, 350], [55.755774841204, 37.614638938872, 350], [55.61108363007, 37.606861806172, 350], [55.881017715015, 37.450458802583, 350], [55.855202610184, 37.478390976664, 350], [55.729755823778, 37.732120239726, 350], [55.803342876099, 37.618196783226, 350], [55.782907446107, 37.720787882734, 350], [55.749194241662, 37.589767768503, 350], [55.708714114812, 37.622081072261, 350], [55.618623934709, 37.507234271998, 350], [55.743121865542, 37.507063106199, 350], [55.78197454795, 37.704461943222, 350], [55.691757584657, 37.529735958373, 350], [55.774529139078, 37.580409890024, 350], [55.622606755434, 37.605940442688, 350], [55.708498862021, 37.545168724302, 350], [55.769265057702, 37.596819763786, 350], [55.671692384092, 37.584867928283, 350], [55.779294674851, 37.601381531412, 350], [55.826696559345, 37.445291194739, 350], [55.855803979438, 37.477112831887, 350], [55.809498052431, 37.83123041226, 350], [55.809478478002, 37.464487921938, 350], [55.761072142815, 37.662588236338, 260], [55.783903957296, 37.596340499047, 260], [55.805938331122, 37.58250853923, 210], [55.747554656643, 37.581902500023, 1500], [55.804034999756, 37.398136909597, 900], [55.772600167071, 37.821039219339, 260], [55.88808433141, 37.662537478276, 210], [55.752957674568, 37.656761599259, 260], [55.771248030822, 37.680750388057, 260], [55.753622220812, 37.638424323268, 260], [55.707598780296, 37.729967703016, 260], [55.773100871573, 37.632824536156, 260], [55.773205382391, 37.621255966185, 260], [55.708051859799, 37.657301033806, 260], [55.771949347611, 37.680067508078, 260], [55.758435465199, 37.638963224895, 260], [55.663745043749, 37.608705418698, 260], [55.756679497615, 37.605780262485, 260], [55.756153456853, 37.621425164371, 260], [55.777649415311, 37.661054284334, 260], [55.764982880352, 37.638627214075, 260], [55.727031045738, 37.561063611357, 260], [55.737610520292, 37.247239511569, 1500], [55.729466996732, 37.646906912965, 1500], [55.774501669333, 37.587135328403, 2250], [55.754158274068, 37.6562147321, 1000], [55.773966942959, 37.586350042697, 1500], [55.799159169576, 37.514259757977, 950], [55.744564606341, 37.565535153144, 250], [55.845547451118, 37.66106710805, 260], [55.754852227943, 37.634582918828, 550], [55.824441278824, 37.632309173098, 600], [55.604659717756, 37.488789304422, 250], [55.910945654336, 37.39610778156, 250], [55.766995665975, 37.380241103557, 250], [55.653812483275, 37.844300890172, 250], [55.61108363007, 37.606861806172, 250], [55.809498052431, 37.83123041226, 250], [55.782907446107, 37.720787882734, 250], [55.823284333356, 37.497703115267, 250], [55.964207436938, 37.413049888408, 250], [55.757070679828, 37.660871867922, 250], [55.741774550958, 37.656067388697, 250], [55.913164788065, 37.571248912026, 250], [55.677938521445, 37.467137992801, 250], [55.863110400948, 37.601964531137, 250], [55.7616050670467, 37.6221603833796, 410], [55.75475790531, 37.557520820207, 410], [55.734166632305, 37.61887864362, 410], [55.871537206807, 37.543501390766, 750], [55.789566193232, 37.752520981355, 340], [55.757935500641, 37.627186954348, 1500], [55.612628778523, 37.720152956239, 1600], [55.780423406407, 37.608227423156, 500], [55.881017715015, 37.450458802583, 1000], [55.753110061729, 37.502790689623, 300], [55.795710692864, 37.540795151906, 570], [55.635171968883, 37.436937176274, 570], [55.892535081273, 37.6150845109, 420], [55.752545774615, 37.602905210335, 420], [55.846897541833, 37.651351927391, 420], [55.659491527892, 37.749604419041, 350], [55.760964629175, 37.624354276517, 480], [55.783307106161, 37.597870146752, 380], [55.750670600936, 37.596268566969, 420], [55.771597995517, 37.632749931667, 420], [55.765748122256, 37.608697963952, 570], [55.633924004869, 37.440073244581, 480], [55.718409319233, 37.777056600974, 250], [55.438434782083, 37.763403820065, 200], [55.742909113276, 37.639497076043, 300], [55.780680155256, 37.619513071396, 600], [55.764228612005, 37.623991975185, 600], [55.717256854596, 37.791967038257, 900], [55.642135818182, 37.543087313892, 1000], [55.710764831105, 37.77066569298, 150], [55.7473041457495, 37.6565755798935, 600], [55.700131921105, 37.767744955364, 500], [55.710422974425, 37.590261742772, 1000], [55.791547472662, 37.816217996248, 1000], [55.58597404829, 37.89560498448, 300], [55.758071536861, 37.608799116827, 1000], [55.769212443729, 37.670588293006, 950], [55.765624898981, 37.609390850801, 1000], [55.768980839063, 37.62680036368, 1000], [55.784496839544, 37.597503089423, 1500], [55.768865251446, 37.571551856487, 1300], [55.760749957005, 37.643042542312, 1200], [55.752494160222, 37.597616814229, 350], [55.886490699376, 37.656862256911, 1000], [55.735774247163, 37.586709687532, 1500], [55.820878766105, 37.632773991735, 650], [55.691145347048, 37.560349374838, 400], [55.793096183147, 37.808763488107, 800], [55.651196326126, 37.508473323168, 800], [55.864948984947, 37.604088063846, 1600], [55.761211656686, 37.619585530702, 1500], [55.897691370242, 37.390998485023, 450], [55.794717032643, 37.538264777428, 500], [55.722276563705, 37.621571973485, 1200], [55.869140583507, 37.67725259203, 500], [55.850693246938, 37.430781777171, 1500], [55.766272882163, 37.60768065883, 1800], [55.795728982779, 37.803830295689, 1500], [55.716742502242, 37.785262396887, 1100], [55.810104361025, 37.656221049958, 500], [55.804556681436, 37.645989328994, 300], [55.744781339794, 37.498666499822, 1100], [55.681880839956, 37.290584472304, 540], [55.674255678775, 37.604183035379, 1000], [55.712176215154, 37.608344304309, 1000], [55.756241514282, 37.627075318296, 3000], [55.602675123269, 37.740808966691, 350], [55.845415310956, 37.480665951524, 600], [55.711093974965, 37.632832516896, 600], [55.740961920922, 37.415484818858, 1000], [55.745608415125, 37.680516026974, 1500], [55.862126348035, 37.436668130303, 600], [55.683489062683, 37.843375094003, 350], [55.734224930064, 37.418105273532, 1000], [55.767451609301, 37.858271570081, 350], [55.746042237347, 37.852399837737, 350], [55.712281059902, 37.891350251943, 350], [55.773522183168, 37.825531913672, 350], [55.703805927453, 37.583972312047, 900], [55.994769105263, 37.173658474514, 1500], [55.754852227943, 37.634582918828, 1000], [55.751897620839, 37.532588210911, 1800], [55.748251256142, 37.627465741989, 850], [55.699766690067, 37.623987477951, 900], [55.71066622043, 37.619081579636, 480], [55.752109288221, 37.596287720657, 1000], [55.754681776367, 37.621529186085, 400], [55.795525142742, 37.585199032453, 240], [55.754681776367, 37.621529186085, 200], [55.728206081169, 37.612671541943, 240], [55.621825231931, 37.713755930761, 240], [55.776912726061, 37.659396836779, 240], [55.801941696941, 37.5319459416, 240], [55.755774841204, 37.614638938872, 350], [55.652098588869, 37.499224651082, 200], [55.817251553829, 37.387724896706, 350], [55.897530279874, 37.666193998321, 350], [55.859023751085, 37.39515662787, 350], [55.659491527892, 37.749604419041, 240], [55.655853812108, 37.541891016952, 240], [55.687438023292, 37.604376135164, 240], [55.609772239646, 37.720052947482, 250], [55.846170470246, 37.357888880037, 240], [55.823284333356, 37.497703115267, 240], [55.691757584657, 37.529735958373, 350], [55.606708000971, 37.536719795871, 240], [55.677938521445, 37.467137992801, 240], [55.729755823778, 37.732120239726, 350], [55.782907446107, 37.720787882734, 240], [55.744564606341, 37.565535153144, 240], [55.708714114812, 37.622081072261, 240], [55.653622718299, 37.620706456922, 240], [55.61108363007, 37.606861806172, 240], [55.744428405237, 37.629848403627, 240], [55.612081708568, 37.732833225154, 240], [55.757070679828, 37.660871867922, 350], [55.766995665975, 37.380241103557, 240], [55.809498052431, 37.83123041226, 350], [55.910945654336, 37.39610778156, 350], [55.920599491886, 37.839036673295, 350], [55.653812483275, 37.844300890172, 240], [55.604659717756, 37.488789304422, 350], [55.585891728131, 37.719991064736, 350], [55.794342349883, 37.926247996439, 240], [55.983427593937, 37.408996705722, 1000], [55.641942358265, 37.524163912452, 950], [55.59516863103, 37.541656170256, 550], [55.653890772234, 37.757558220851, 550], [55.784455657699, 37.473715593813, 550], [55.854897463381, 37.498577126778, 550], [55.802833384336, 37.799525194491, 550], [55.786391340399, 37.735475079452, 550], [55.667039214745, 37.785925511087, 500], [55.756722157218, 37.621637921554, 800], [55.827535601652, 37.642427963005, 1000], [55.74497680772, 37.54994856742, 1500], [55.73968527254, 37.604182845926, 1000], [55.910945654336, 37.39610778156, 400], [55.653812483275, 37.844300890172, 490], [55.746742411582, 37.537163778205, 490], [55.748607434274, 37.588043064768, 490], [55.768353490191, 37.590583922054, 400], [55.710056184932, 37.623576314238, 490], [55.801937271298, 37.53194148139, 400], [55.821353169382, 37.497673786593, 490], [55.823284333356, 37.497703115267, 400], [55.762513394649, 37.657688193211, 490], [55.75888646332, 37.640987227808, 400], [55.774521372271, 37.587171523595, 490], [55.747612629207, 37.626020834925, 490], [55.677938521445, 37.467137992801, 490], [55.778531279046, 37.585821093819, 400], [55.726873139525, 37.57967011542, 490], [55.799747520203, 37.482983405183, 490], [55.809478478002, 37.464487921938, 490], [55.727250942531, 37.626490835294, 490], [55.665074467241, 37.48158795609, 400], [55.770090105603, 37.60229476576, 1250], [55.780003432285, 37.601177236636, 400], [55.788585180238, 37.679294619379, 490], [55.790437774305, 37.584810397848, 490], [55.604659717756, 37.488789304422, 490], [55.757218779194, 37.659133619148, 400], [55.744564606341, 37.565535153144, 490], [55.747471451943, 37.706847364924, 490], [55.585271705518, 37.724892853133, 490], [55.691757584657, 37.529735958373, 490], [55.730146484425, 37.635803428188, 490], [55.774024053147, 37.603515160701, 400], [55.747550639477, 37.539572899774, 320], [55.621825231931, 37.713755930761, 490], [55.766995665975, 37.380241103557, 490], [55.645322686927, 37.39804459945, 550], [55.742904382767, 37.600307789153, 800], [55.825465947717, 37.33221159795, 600], [55.777584567326, 37.617632844317, 1000], [55.704822439465, 37.576330110057, 600], [55.802736647954, 37.528361800082, 500], [55.741837856744, 37.558263073725, 250], [56.001801521146, 37.123295702296, 500], [55.727888756959, 37.585423366454, 2500], [55.793273416228, 37.542870569654, 2000], [55.761173659386, 37.57659140944, 1000], [55.709794723456, 37.657093391611, 800], [55.762232733508, 37.568702709834, 750], [55.670648001512, 37.417329667392, 500], [55.747122934801, 37.605145941595, 250], [55.747950668391, 37.607888115278, 450], [55.682823664168, 37.561401899936, 1500], [55.588541815968, 37.663045606892, 1000], [55.679337440317, 37.571318178492, 1000], [55.82016541905, 37.797271894244, 750], [55.764180225958, 37.620422455036, 1000], [55.671729516774, 37.570005813907, 700], [55.763685649365, 37.565604881789, 1500], [55.76981968592, 37.655630685466, 1000], [55.713551690716, 37.77773286353, 1000], [55.764644211875, 37.646178562881, 1500], [55.715202239027, 37.8923381667, 500], [55.734806164264, 37.628003090434, 400], [55.640929309698, 37.530805723969, 490], [55.785539799645, 37.665350801423, 400], [55.67278900663, 37.277997622137, 800], [55.842409379661, 37.486418115862, 200], [55.790276236475, 37.544519055553, 300], [55.704530588482, 37.621101405371, 100], [55.718422535209, 37.825272959872, 1000], [55.803082782687, 37.784235952548, 1000], [55.922790622789, 37.856021969707, 1000], [55.739950427586, 37.861058684444, 600], [55.656965213014, 37.496276617867, 1500], [55.805803098076, 37.514851874339, 600], [55.83984535307, 37.488826687192, 800], [55.83565891578, 37.526489409559, 900], [55.810729205292, 37.476575774842, 1000], [55.606708000971, 37.536719795871, 930], [55.606708000971, 37.536719795871, 350], [55.930418057765, 37.775058994833, 1000], [55.832343625833, 37.454462150965, 300], [55.743002683808, 38.025089404502, 1500], [55.750125683412, 37.96417083287, 500], [55.749883791925, 37.972273309802, 600], [55.750746429234, 37.955645956537, 400], [55.751466984447, 38.01006681019, 1000], [55.734783895012, 37.96880089724, 800], [55.773224060549, 37.619470875035, 1130], [55.750576087819, 38.005342970434, 1400], [55.777895424719, 37.598738174208, 1130], [55.743490209959, 37.625276327527, 1500], [55.767129947585, 37.602492980468, 1130], [55.751909138213, 37.585994685697, 1130], [55.759140488621, 37.64576016478, 1130], [55.771587318732, 37.592805723463, 1130], [55.869133378633, 37.669414531041, 1000], [55.668983236801, 37.539802400189, 1500], [55.5479523454, 37.550537936098, 1000], [55.757218779194, 37.659133619148, 700], [55.747471451943, 37.706847364924, 800], [55.535037526002, 37.527163610495, 400], [55.810917586811, 37.638474040477, 800], [55.752109288221, 37.596287720657, 800], [55.794279887771, 37.543553501265, 800], [55.769212443729, 37.670588293006, 800], [55.775129753692, 37.583913111229, 920], [55.653622718299, 37.620706456922, 800], [55.982765845058, 37.174632671081, 800], [55.63775182136, 37.656246854628, 800], [55.746535681307, 37.561147579852, 800], [55.761173659386, 37.57659140944, 800], [55.761380355246, 37.620716396241, 920], [55.757218779194, 37.659133619148, 800], [55.740801628427, 37.657655347744, 920], [55.64994794023, 37.745946714523, 800], [55.847780292341, 37.360130619095, 800], [55.750658263951, 37.817578994568, 800], [55.780003432285, 37.601177236636, 800], [55.757495209062, 37.612181333906, 920], [55.747508158695, 37.681543229108, 800], [55.676328545266, 37.504639852696, 920], [55.781144974445, 37.63189626231, 920], [55.61108363007, 37.606861806172, 800], [55.822506742055, 37.823235768643, 800], [55.640257402165, 37.608378602853, 800], [55.809478478002, 37.464487921938, 800], [55.778808131423, 37.633214811226, 230], [55.709225257742, 37.618505784967, 400], [55.845547451118, 37.66106710805, 230], [55.723416730351, 37.651761561802, 600], [55.727649872197, 37.625882712045, 490], [55.648853924189, 37.505861510603, 200], [55.845547451118, 37.66106710805, 500], [55.756168053411, 37.627562176391, 1000], [55.86666832334, 37.494625888329, 500], [55.739051643607, 37.575163614773, 2500], [55.735584790376, 37.696334679033, 350], [55.752035092271, 37.591170852141, 750], [55.787365092202, 37.622781895114, 1200], [55.753883346541, 37.406353462431, 1100], [55.734443047195, 37.671002421084, 800], [55.614963345129, 37.721368727241, 1000], [55.772194164212, 37.584440108337, 800], [55.814360245408, 37.601694573892, 500], [55.782375948187, 37.600921603605, 300], [55.690536897577, 37.786914247302, 700], [55.711183116929, 37.506895421467, 1250], [55.888290785522, 37.514910167479, 500], [55.767988814361, 37.598649252049, 1000], [55.809478478002, 37.464487921938, 600], [55.433139331608, 37.54921165836, 600], [55.70395072127, 37.742679493546, 600], [55.644863476169, 37.494352850936, 990], [55.783949528608, 37.709889354538, 1000], [55.761334553636, 37.682204583299, 990], [55.764983525296, 37.608324885321, 990], [55.428216630131, 37.76787253783, 1000], [55.747456099276, 37.608018207411, 500], [55.857426755702, 37.495921468552, 800], [55.679575116111, 37.570190004039, 250], [55.827016111949, 37.622294883798, 200], [55.735504075826, 37.637558683323, 750], [55.87724636896, 37.523360129086, 1000], [55.860273539238, 37.499080156487, 650], [55.679634264807, 37.565516081556, 550], [55.76919674021, 37.671629271988, 650], [55.867549773929, 37.493405653436, 700], [55.740810479714, 37.623644779633, 700], [55.921046666306, 37.525658334466, 170], [55.864929216638, 37.605094712719, 800], [55.747754827722, 37.680643044912, 550], [55.742885513493, 37.629723898647, 720], [55.819333274772, 37.964164863666, 450], [55.792904328149, 37.894897415824, 800], [55.797523196223, 37.969050514229, 700], [55.382542789815, 37.53770709931, 500], [55.801078314198, 37.935178057983, 500], [55.708779328742, 37.658528993936, 900], [55.750905091516, 37.717206891093, 1000], [55.778165637655, 37.574052939348, 830], [55.700375847119, 37.752141226608, 800], [55.760137583878, 37.584538920718, 800], [55.378612293973, 37.541160800955, 300], [55.83984535307, 37.488826687192, 1000], [55.763264535731, 37.605565349952, 1000], [55.747763192885, 37.566927825723, 1000], [55.777146315841, 37.661759036374, 500], [55.773807320127, 37.639534272941, 700], [55.764627425046, 37.657386355848, 800], [55.977213154345, 37.908274680088, 700], [55.791767888695, 37.6610832012, 500], [55.744450837645, 37.67774304154, 1500], [55.679514425532, 37.534020973096, 680], [55.851979360347, 37.443060492096, 1500], [55.923377749035, 37.985919957397, 500], [55.923161116693, 37.992041199469, 500], [55.926444047625, 37.984552804051, 500], [55.924659487159, 37.979255021337, 1000], [55.919834052837, 37.998588235141, 800], [55.921079726755, 37.993121439766, 1000], [55.762958078202, 37.619668542725, 900], [55.771391205685, 37.583056774281, 1500], [55.970736505403, 37.930525701227, 180], [55.625678711272, 37.721954852816, 550], [55.57957440907, 37.677184157488, 600], [55.679086121747, 37.624057462455, 180], [55.764258768471, 37.657744415997, 1000], [55.869359979833, 37.676061854602, 700], [55.898728121214, 37.412248784526, 1500], [55.633520797904, 37.741242995647, 400], [55.83164381525, 37.301765002139, 1750], [55.739339367058, 37.666399940916, 600], [55.739197482023, 37.655878646904, 200], [55.728685497581, 37.610874208154, 450], [55.656440098321, 37.554493081214, 200], [55.776840833971, 37.696417453932, 500], [55.767416521533, 37.587799680587, 200], [55.74823220777, 37.776141144904, 1200], [55.661169299563, 37.760309354532, 1100], [55.723318700194, 37.825088076217, 960], [55.702576784924, 37.766286589195, 1100], [55.761413348926, 37.623787675258, 1000], [55.916915739486, 37.997155100205, 500], [55.948835736267, 38.059462793425, 580], [55.960623354779, 38.041390696306, 580], [55.763725815316, 37.594192339677, 1200], [55.755267990072, 37.560181339283, 3000], [55.948711091347, 37.301006303715, 1500], [55.881383037402, 37.432857074568, 650], [55.500027891116, 37.570972674366, 800], [55.676226300746, 37.889687016993, 1200], [55.914122173655, 37.814395360035, 1200], [55.852786535408, 37.179142883745, 500], [55.816615804611, 37.339993050809, 490], [55.754359090877, 37.636965169706, 1000], [55.945195595093, 37.283993988531, 500], [55.838866272963, 37.32296792265, 500], [55.829213399418, 37.305917868798, 280], [55.621655121291, 37.50501370815, 600], [55.44715263337, 37.759217159094, 600], [55.782907446107, 37.720787882734, 600], [55.893927833022, 37.409649059156, 600], [55.829544352257, 37.308148979495, 800], [55.839136840183, 37.30406176689, 1000], [55.893532948434, 37.725502953708, 600], [55.911873547099, 37.738375056889, 500], [55.892749893002, 37.725934958046, 350], [55.913229063618, 37.764057426894, 550], [55.916444256447, 37.772662753917, 380], [55.926518004423, 37.771320523412, 1000], [55.904673128448, 37.725136342256, 1000], [55.789566193232, 37.752520981355, 350], [55.789566193232, 37.752520981355, 400], [55.653812483275, 37.844300890172, 260], [55.782907446107, 37.720787882734, 700], [55.653812483275, 37.844300890172, 300], [55.780790572106, 37.612630441853, 500], [55.902631820682, 37.718161737325, 800], [55.92125493395, 37.848612240372, 600], [55.924530666905, 37.822225877819, 200], [55.923492448043, 37.813965431326, 600], [55.891764330544, 37.727230840786, 800], [55.920813128428, 37.863943789087, 850], [55.912783382416, 37.856852946878, 750], [55.92025770287, 37.828420141103, 1500], [55.91431497652, 37.864105345262, 500], [56.010359269422, 37.840458919291, 300], [55.919180319374, 37.855807151021, 600], [56.000703720096, 37.815419911672, 500], [55.911657334224, 37.812283714624, 270], [55.98576782137, 37.867574142173, 500], [55.996257348048, 37.867719911532, 1000], [56.008737879278, 37.838450997974, 1000], [55.914479278284, 37.811981120229, 600], [55.919869954839, 37.869321159752, 600], [55.763407536407, 37.65514145251, 300], [55.720842390167, 37.609354530299, 350], [55.758738765031, 37.61298052553, 500], [55.843053015626, 37.402836342334, 1100], [55.687438023292, 37.604376135164, 490], [55.759966576854, 37.614153092168, 400], [55.707109109315, 37.658838800387, 800], [55.749883180703, 37.593551043636, 800], [55.806800165047, 37.637592914873, 820], [55.757708368267, 37.585308188041, 820], [55.774577812557, 37.581948537192, 800], [55.773147147843, 37.590130974081, 820], [55.633158180348, 37.624287450591, 820], [55.746606547868, 37.559602943971, 800], [55.757687959054, 37.407140941064, 820], [55.744606341235, 37.54542869331, 820], [55.730599041743, 37.611478288695, 800], [55.768726886135, 37.597474649545, 820], [55.758455051947, 37.611761423274, 800], [55.755774841204, 37.614638938872, 820], [55.79123562761, 37.633573426092, 820], [55.794407397743, 37.583962670618, 820], [55.676949072502, 37.504839621557, 800], [55.792096012537, 37.575977494713, 800], [55.728220661452, 37.624186976603, 800], [55.818885178148, 37.573796764259, 820], [55.805052150282, 37.517089050768, 820], [55.708714114812, 37.622081072261, 820], [55.846704507598, 37.362039191168, 820], [55.691757584657, 37.529735958373, 820], [55.739210218732, 37.484528523504, 820], [55.724971417105, 37.580095031085, 800], [55.772913097964, 37.610216056872, 800], [55.770562352642, 37.620022952897, 820], [55.803103981236, 37.757756182128, 820], [55.640257402165, 37.608378602853, 820], [55.767320951152, 37.606771142864, 820], [55.809478478002, 37.464487921938, 820], [55.758621749959, 37.641635323392, 820], [55.665074467241, 37.48158795609, 800], [55.946374949271, 37.507300094969, 600], [55.814195136246, 37.343309001691, 500], [55.931929444773, 37.520097896136, 400], [55.618623934709, 37.507234271998, 1000], [55.755774841204, 37.614638938872, 260], [55.755774841204, 37.614638938872, 550], [55.746535681307, 37.561147579852, 1500], [55.771587318732, 37.592805723463, 2500], [56.004268743684, 37.876179359448, 270], [55.985989480163, 37.871875211346, 1000], [55.682524478568, 37.898781435869, 700], [55.784291497281, 37.710844741927, 200], [55.753998074727, 37.635326149259, 560], [55.708714114812, 37.622081072261, 560], [55.766720164096, 37.611236417694, 560], [55.834208162726, 37.410856678284, 560], [55.745148053394, 37.597106259732, 1250], [55.726986139246, 37.561395679624, 700], [55.680372056825, 37.87478965285, 400], [55.750120836929, 37.887474150509, 280], [55.797641840103, 37.939114597037, 280], [55.794342349883, 37.926247996439, 280], [55.668171659505, 37.871106355448, 280], [55.793713092187, 37.936610851543, 250], [55.659235802416, 37.917209754861, 280], [56.008367939483, 37.440043601097, 280], [55.692224602818, 37.896429179837, 260], [55.891764330544, 37.727230840786, 280], [55.916546364792, 37.759186348776, 280], [55.911421122869, 37.778170285819, 280], [55.420267963107, 37.547847923453, 280], [55.68405384974, 37.295320296118, 250], [55.435194797779, 37.549856383349, 280], [55.995247407149, 37.867323277489, 280], [55.74615241283, 37.862732516443, 250], [55.910945654336, 37.39610778156, 280], [55.904979092915, 37.416761425803, 280], [55.859023751085, 37.39515662787, 280], [55.585271705518, 37.724892853133, 280], [55.89180052305, 37.618688822109, 700], [55.739851968514, 37.632865112014, 750], [55.604659717756, 37.488789304422, 280], [55.658885766722, 37.430131534756, 280], [55.653812483275, 37.844300890172, 280], [55.764295373272, 37.844969324677, 280], [55.689519714222, 37.871475999706, 550], [55.680372056825, 37.87478965285, 1000], [55.704168358039, 37.898873979544, 500], [55.785944960942, 37.612039307834, 200], [55.761730555824, 37.619100541088, 2500], [55.665074467241, 37.48158795609, 360], [55.818881069858, 37.577360405626, 360], [55.748058060939, 37.588214742062, 360], [55.722258123984, 37.532183294228, 300], [56.000364076529, 37.205837990039, 360], [55.741025968859, 37.627878514764, 360], [55.852795867392, 37.585806826996, 310], [55.752035092271, 37.591170852141, 330], [55.809478478002, 37.464487921938, 310], [55.657314259821, 37.845234057199, 380], [55.725528909584, 37.645623272855, 310], [55.604659717756, 37.488789304422, 260], [55.691757584657, 37.529735958373, 260], [55.910945654336, 37.39610778156, 260], [55.742751739612, 37.985140097603, 500], [55.751350805844, 38.018705879275, 500], [55.727996960997, 37.961792056923, 500], [55.797384549313, 37.940893970728, 180], [55.744413367868, 38.021822234262, 500], [55.982807040238, 37.173300574006, 350], [55.997643364007, 37.236536689772, 400], [55.991260407069, 37.216982453644, 250], [55.976098549815, 37.156874610627, 550], [55.750889353799, 37.985297830414, 1500], [55.978487610562, 37.155657270281, 700], [56.000182736552, 37.209176461035, 600], [55.999785819392, 37.216592730034, 1500], [55.996738230571, 37.216215796904, 500], [55.757399237771, 37.634036720783, 570], [55.74290050354, 37.503559721353, 250], [55.762194160221, 37.681152267007, 180], [55.763485520537, 37.418074898959, 300], [55.799897825477, 37.411466816127, 500], [55.753277344657, 37.606402767302, 200], [55.727250942531, 37.626490835294, 1000], [55.744080349763, 37.625164932044, 850], [55.744564606341, 37.565535153144, 230], [55.909401729542, 37.540418561472, 230], [55.823284333356, 37.497703115267, 230], [55.689401931032, 37.601708984023, 230], [55.671452036829, 37.554052965421, 340], [55.609772239646, 37.720052947482, 700], [55.671452036829, 37.554052965421, 700], [55.762657994338, 37.594861914268, 520], [55.762694342157, 37.408324278271, 520], [55.761743434368, 37.642859976847, 1000], [55.743713530788, 37.601951353349, 520], [55.742414462988, 37.546392126066, 520], [55.888068141324, 37.400657218254, 700], [55.766340337229, 37.590666123108, 520], [55.715690386954, 37.591621889486, 520], [55.708714114812, 37.622081072261, 700], [55.744564606341, 37.565535153144, 300], [55.823284333356, 37.497703115267, 300], [55.604659717756, 37.488789304422, 300], [55.7658497828051, 37.6027702201121, 270], [55.749547707427, 37.590915282515, 300], [55.772663128441, 37.592410969519, 1000], [55.773460457857, 37.586801696097, 800], [55.792010121988, 37.7491685368, 1070], [55.732196712473, 37.617174084858, 280], [55.618623934709, 37.507234271998, 260], [55.837172160343, 37.6576868452, 900], [55.766313649244, 37.663723954508, 900], [55.863110400948, 37.601964531137, 260], [55.431973232136, 37.491486648549, 750], [55.583954337084, 37.599278309272, 280], [55.782907446107, 37.720787882734, 260], [55.687438023292, 37.604376135164, 1080], [55.782574338276, 37.629945227179, 1500], [55.78267403061, 37.705059351193, 500], [55.855202610184, 37.478390976664, 910], [55.859023751085, 37.39515662787, 2570], [55.782534814176, 37.711677087066, 400], [55.757218779194, 37.659133619148, 260], [55.823284333356, 37.497703115267, 200], [55.897530279874, 37.666193998321, 200], [55.781646890601, 37.705449166951, 200], [55.704444683965, 37.653845930988, 350], [55.782907446107, 37.720787882734, 240], [55.633924004869, 37.440073244581, 200], [55.762065599983, 37.662806045294, 600], [55.855202610184, 37.478390976664, 290], [55.855202610184, 37.478390976664, 260], [55.534701322511, 37.52612400532, 900], [55.766057300393, 37.556592249496, 800], [55.647521957884, 37.595610529319, 1350], [55.778707245836, 37.596556506522, 100], [55.763079604458, 37.560017775201, 350], [55.647521957884, 37.595610529319, 700], [55.768844991828, 37.596233253956, 1000], [55.6567053801, 37.597292306826, 1000], [55.75731757835, 37.602675804282, 400], [55.741836683684, 37.5991613246, 1200], [55.764983525296, 37.608324885321, 1000], [55.65338841677, 37.594121393091, 400], [55.76023755049, 37.613049239239, 2000], [55.863019091241, 37.606940217589, 500], [55.788692079662, 37.787338353497, 880], [55.82244701836, 37.645908298853, 880], [55.889862814067, 37.591261505394, 900], [55.888068141324, 37.400657218254, 570], [55.89486637844, 37.58554844226, 510], [55.857171383422, 37.350308147388, 570], [55.777296681125, 37.457158425817, 570], [55.751172069271, 37.789593594951, 570], [55.727982857455, 37.580548004488, 570], [55.677638573734, 37.574419284597, 540], [55.73998482221, 37.502458467339, 540], [55.790060966035, 37.605468077888, 700], [55.744564606341, 37.565535153144, 1000], [55.744564606341, 37.565535153144, 550], [55.791212943543, 37.635179877101, 800], [55.781238526339, 37.607154400431, 1100], [55.746706437489, 37.537546371942, 300], [55.647521957884, 37.595610529319, 230], [55.776912726061, 37.659396836779, 230], [55.924206571404, 38.001062454549, 1000], [55.799747520203, 37.482983405183, 240], [55.926871029545, 37.799561132041, 300], [55.640929309698, 37.530805723969, 240], [55.640929309698, 37.530805723969, 400], [55.752098013502, 37.598961184311, 400], [55.730146484425, 37.635803428188, 200], [55.420267963107, 37.547847923453, 260], [55.770536685627, 37.421384977121, 200], [55.727623547331, 37.449445298744, 200], [55.722082449129, 37.651474937714, 400], [55.737985591373, 37.637968383326, 200], [55.779238582376, 37.480308481206, 1000], [55.777072909085, 37.480596540801, 1500], [55.884675701698, 37.603798151759, 1000], [55.740801500789, 37.657656149195, 200], [55.763957674517, 37.660061542163, 550], [55.755215363342, 37.715459023668, 430], [55.717733100343, 37.786641312405, 940], [55.776626165316, 37.575080939269, 650], [55.774113493174, 37.654910373055, 500], [55.701317746806, 37.791016134168, 700], [55.701825441813, 37.788643279778, 600], [55.733982109676, 37.564544242054, 700], [55.759672820566, 37.574812855908, 1500], [55.735570406798, 37.66958627395, 1620], [55.612256709537, 37.536971362726, 500], [55.73944907471, 37.66475221829, 250], [55.776009222546, 37.660531300132, 350], [55.739045984333, 37.668174328469, 800], [55.761134494892, 37.571094852073, 1000], [55.633924004869, 37.440073244581, 1000], [55.770432491858, 37.650795518388, 300], [55.635171968883, 37.436937176274, 250], [55.780214757944, 37.692051620009, 300], [55.678635074875, 37.892599535826, 200], [55.747471451943, 37.706847364924, 200], [55.845547451118, 37.66106710805, 300], [55.785539799645, 37.665350801423, 200], [55.739361890842, 37.575407168812, 1000], [55.753049527886, 37.66705359646, 1500], [55.7321944664866, 37.5888958509116, 750], [55.762506481701, 37.593745960275, 2300], [55.750495813861, 37.594355293893, 750], [55.752109288221, 37.596287720657, 500], [55.730466107644, 37.579238828323, 500], [55.801840415768, 37.584887360946, 400], [55.859908509392, 37.467747327174, 1250], [55.769013272083, 37.627749127015, 700], [55.714112167034, 37.574405791668, 700], [55.777807483008, 37.628339013617, 500], [55.74344670661, 37.652227930401, 600], [55.730328535204, 37.623533649751, 700], [55.801941696941, 37.5319459416, 260], [55.737941508595, 37.634305053958, 1300], [55.801941696941, 37.5319459416, 350], [55.773460457857, 37.586801696097, 700], [55.7715980867591, 37.632750008808, 100], [55.766932914984, 37.632841174717, 1000], [55.809478478002, 37.464487921938, 1620], [55.770570924235, 37.637034872654, 300], [55.739221691842, 37.675016759123, 700], [55.749443819383, 37.645116754933, 1000], [55.750613866777, 37.653180087813, 700], [55.748058120881, 37.588214739897, 380], [55.585271705518, 37.724892853133, 380], [55.706926865011, 37.592152658726, 310], [55.843929965101, 37.569942831067, 500], [55.770360960596, 37.832752962246, 1100], [55.774994582086, 37.583240905132, 1000], [55.774577812557, 37.581948537192, 1000], [55.737582947042, 37.820034252975, 1400], [55.863712683601, 37.545815011827, 340], [55.633158180348, 37.624287450591, 260], [55.810154365973, 37.492525270593, 700], [55.886490699376, 37.656862256911, 400], [55.78197454795, 37.704461943222, 500], [55.810505065685, 37.383088859638, 290], [55.810505065685, 37.383088859638, 200], [55.810505065685, 37.383088859638, 500], [55.74921871948, 37.540006244891, 500], [55.74921871948, 37.540006244891, 490], [55.708714361317, 37.622074618194, 260], [55.729755823778, 37.732120239726, 1000], [55.74921871948, 37.540006244891, 300], [55.693855772691, 37.824424890758, 600], [55.74921871948, 37.540006244891, 200], [55.659491527892, 37.749604419041, 350], [55.74921871948, 37.540006244891, 650], [55.74921871948, 37.540006244891, 800], [55.74921871948, 37.540006244891, 1000], [55.729755823778, 37.732120239726, 500], [55.74921871948, 37.540006244891, 350], [55.74921871948, 37.540006244891, 350], [55.704884993562, 37.764841261176, 260], [55.730382938782, 37.737107580163, 200], [55.580372286612, 37.703680603561, 400], [55.759883342176, 37.647886853176, 800], [55.740983531687, 37.628222482234, 1000], [55.868654769253, 37.662457589544, 500], [55.764295373272, 37.844969324677, 750], [55.686323405759, 37.850133929037, 500], [55.733036789359, 37.481182561944, 2000], [55.788606847478, 37.761685743621, 450], [55.752531938207, 37.632793021231, 300], [55.869886304393, 37.588462226279, 900], [55.759157024741, 37.646110993406, 1620], [55.817183619993, 37.48605339228, 800], [55.836113374614, 37.614952183641, 900], [55.669479635027, 37.282099189708, 850], [55.770006484924, 37.678962065739, 1500], [55.798391797016, 37.58056337927, 600], [55.799723120872, 37.581802533991, 900], [55.732196662313, 37.635654205906, 300], [55.817251553829, 37.387724896706, 350], [55.910918099812, 37.736597763851, 600], [55.72138762031, 37.602011038199, 1250], [55.826696559345, 37.445291194739, 170], [55.877297478635, 37.651694781375, 400], [55.778324903851, 37.69960858417, 190], [55.877692102113, 37.646875498489, 400], [55.757072134226, 37.63197634583, 1500], [55.757998890879, 37.623222199901, 600], [55.585271705518, 37.724892853133, 850], [55.772463634868, 37.610910228752, 1000], [55.763166255832, 37.625984699559, 350], [55.743158282926, 37.56736393202, 400], [55.886599093636, 37.66015475446, 960], [55.757454052624, 37.634513679065, 600], [55.754588818818, 37.634799273763, 500], [55.757949222139, 37.633594550294, 400], [55.765716950819, 37.634737470961, 570], [55.655853812108, 37.541891016952, 200], [55.655853812108, 37.541891016952, 800], [55.765179106673, 37.634371817526, 1000], [55.739296510478, 37.548250959915, 500], [55.777710702942, 37.606955781311, 250], [55.753812687712, 37.63607070561, 200], [55.744810069689, 37.555200820209, 500], [55.743730799997, 37.555972235123, 250], [55.762067433598, 37.621123895999, 1500], [55.742503082569, 37.549602079809, 1000], [55.762223635915, 37.634663829487, 1000], [55.810280549793, 37.40459043734, 750], [55.852538081531, 37.350936456975, 1000], [55.69586126909, 37.66492576254, 800], [55.614881574977, 37.71217891483, 650], [55.585271705518, 37.724892853133, 250], [55.725167171244, 37.563464080988, 600], [55.585271705518, 37.724892853133, 820], [55.585271705518, 37.724892853133, 1000], [55.585271705518, 37.724892853133, 250], [55.585271705518, 37.724892853133, 500], [55.708714114812, 37.622081072261, 1100], [55.655853812108, 37.541891016952, 700], [55.752032108269, 37.592619980734, 220], [55.640929309698, 37.530805723969, 250], [55.691757584657, 37.529735958373, 250], [55.823284333356, 37.497703115267, 250], [55.763873010902, 37.646096587507, 940], [55.763321346096, 37.657680196791, 940], [55.841271437072, 37.497863082808, 450], [55.800225372573, 37.58694715233, 1000], [55.788015753239, 37.59353768489, 800], [55.787751747454, 37.593844954621, 700], [55.83966392147, 37.486699505729, 300], [55.842429252568, 37.484382630668, 320], [55.757530425563, 37.608374245135, 450], [55.884960971679, 37.439330433817, 1100], [55.585271705518, 37.724892853133, 300], [55.758683910749, 37.659102625878, 650], [55.784055342339, 37.635405734195, 700], [55.744564606341, 37.565535153144, 250], [55.706926865011, 37.592152658726, 250], [55.747471451943, 37.706847364924, 250], [55.823284333356, 37.497703115267, 250], [55.841869831632, 37.487974038252, 300], [55.856550574338, 37.344752645945, 2000], [55.823284333356, 37.497703115267, 500], [55.823284333356, 37.497703115267, 700], [55.846170470246, 37.357888880037, 1000], [55.772188602643, 37.592963008113, 850], [55.740961920922, 37.415484818858, 1500], [55.773163595845, 37.594902588646, 750], [55.740961920922, 37.415484818858, 80], [55.665074467241, 37.48158795609, 260], [55.665074467241, 37.48158795609, 260], [55.665074467241, 37.48158795609, 300], [55.798579267383, 37.595220401882, 350], [55.769725483812, 37.407530960802, 1200], [55.793436311987, 37.693531662793, 450], [55.74886699273, 37.563511560443, 1750], [55.80636812452, 37.418027401054, 1250], [55.75863161715, 37.742629300663, 500], [55.747471451943, 37.706847364924, 400], [55.70602940493, 37.404356225622, 500], [55.747471451943, 37.706847364924, 600], [55.747471451943, 37.706847364924, 400], [55.747471451943, 37.706847364924, 380], [55.846170470246, 37.357888880037, 260], [55.740961920922, 37.415484818858, 290], [55.662761606946, 37.554520791585, 500], [55.623313068156, 37.742448243708, 600], [55.796179409949, 37.930774773768, 1000], [55.793730516271, 37.560589193478, 750], [55.637593878318, 37.757353776767, 260], [55.637593878318, 37.757353776767, 500], [55.755255843896, 37.402939374035, 1000], [55.626142144875, 37.7495702912, 700], [55.792489131968, 37.565600822258, 500], [55.532199665711, 37.519213462711, 500], [55.811593775972, 37.652571199927, 600], [55.758441998243, 37.640600771932, 400], [55.737031589465, 37.659371141372, 600], [55.838993165982, 37.486785928378, 240], [55.892029006701, 37.745719218541, 280], [55.845519209578, 37.574406017404, 500], [55.758267477143, 37.546420763352, 1000], [55.864217047623, 37.676926323249, 600], [55.634012295335, 37.44198577815, 350], [55.764081990413, 37.703530842579, 300], [55.635171968883, 37.436937176274, 260], [55.753045354213, 37.594588417443, 490], [55.680754140256, 37.662877593439, 350], [55.672678523027, 37.568621308797, 600], [55.738944153392, 37.662919227722, 230], [55.683412055672, 37.660688138718, 450], [55.658984212023, 37.40259351913, 450], [55.851522032261, 37.438329917098, 750], [55.708796305046, 37.61565378794, 1250], [55.805799261127, 37.540848076417, 230], [55.806422550493, 37.549682336343, 1000], [55.78322033577, 37.642677789411, 440], [55.570060373005, 37.580680583791, 500], [55.759164947193, 37.642764034197, 1500], [55.673498352515, 37.277127429592, 800], [55.799926272232, 37.575379167668, 1000], [55.635171968883, 37.436937176274, 180], [55.707637592231, 37.598019898892, 200], [55.751861802562, 37.812765006912, 800], [55.769950333306, 37.482974083468, 400], [55.798235019859, 37.568690524651, 800], [55.708717473136, 37.733396291194, 700], [55.862718993221, 37.435034387733, 260], [55.862718993221, 37.435034387733, 450], [55.751179447589, 37.888812488822, 1700], [55.582689890318, 37.671630414927, 1000], [55.862718993221, 37.435034387733, 320], [55.726385216088, 37.581453973696, 260], [55.77355357874, 37.711961585859, 700], [55.713884208461, 37.750755213358, 600], [55.651736855729, 37.618847007929, 260], [55.682714072076, 37.62274129734, 500], [55.716185339689, 37.682644633385, 250], [55.633962696035, 37.613722536169, 550], [55.704937555409, 37.763947451012, 400], [55.704937555409, 37.763947451012, 400], [55.701670653211, 37.762503040482, 600], [55.726873139525, 37.57967011542, 280], [55.722881683832, 37.396620762172, 600], [55.701846219761, 37.759623925145, 300], [55.854022858841, 37.420595007326, 1000], [55.69324424108, 37.746318667328, 600], [55.692905059514, 37.735588133231, 800], [55.854310614125, 37.410448876219, 300], [55.762122112728, 37.784560323646, 440], [55.774549753619, 37.546504598808, 1100], [55.848417259872, 37.423695565061, 350], [55.629435223882, 37.600283795382, 1000], [55.788921186535, 37.519130252246, 1000], [55.654658346859, 37.584043913807, 500], [55.668592117178, 37.591786892855, 1000], [55.845768781761, 37.43131723137, 700], [55.803290933355, 37.724275996654, 1000], [55.77056935129, 37.624856745793, 530], [55.767436805228, 37.559580588017, 250], [55.745434667167, 37.658569699422, 700], [55.777296681125, 37.457158425817, 1250], [55.708133587648, 37.640341219401, 1000], [55.744131520833, 37.656944345961, 1200], [55.708206180603, 37.641980258728, 800], [55.848579090979, 37.422733783544, 500], [55.848744765361, 37.417098054183, 700], [55.669053138486, 37.629111056939, 1000], [55.786443643779, 37.480898735713, 500], [55.796415247678, 37.80078661876, 300], [55.65667494911, 37.60810757284, 350], [55.73029889179, 37.618923005281, 1300], [55.710896578314, 37.77148396864, 500], [55.697878682715, 37.824436526144, 600], [55.876645983967, 37.712184409058, 500], [55.870214522641, 37.709334023466, 500], [55.877249363333, 37.718363649995, 650], [55.836734863551, 37.641002739937, 1500], [55.831198073458, 37.593107826142, 600], [55.705575999606, 37.511195631122, 500], [55.701263114925, 37.81107127795, 700], [55.696106346916, 37.821454310458, 700], [55.654029472373, 37.482370439885, 750], [55.64070337808, 37.658084508499, 600], [55.651646407435, 37.527718766849, 800], [55.654142566977, 37.763608579844, 540], [55.741331253177, 37.658665241689, 750], [55.702486540764, 37.509255441799, 1000], [55.643149315671, 37.676486905203, 570], [55.649240207644, 37.484359638698, 500], [55.62039161611, 37.669432546412, 150], [55.62039161611, 37.669432546412, 1000], [55.785026539247, 37.556960963969, 650], [55.619827849135, 37.608882879104, 700], [55.742637920201, 37.499625131449, 260], [55.549142358514, 37.55434927375, 260], [55.808179284987, 37.638373048779, 260], [55.751582035877, 38.012203822421, 260], [55.643683919036, 37.508015375808, 600], [55.732156459242, 37.764406231482, 540], [55.724266386633, 37.767814511047, 600], [55.858993878435, 37.659609253914, 650], [55.810917586811, 37.638474040477, 1130], [55.826937775214, 37.595574067315, 750], [55.818117919032, 37.646705705833, 500], [55.7943756231, 37.491154547922, 200], [55.836209504097, 37.551291010399, 700], [55.821287201295, 37.606384939622, 260], [55.793220684448, 37.489265957154, 1500], [55.828211225622, 37.439925961396, 100], [55.7261609075, 37.527099168767, 450], [55.645180888116, 37.519014336803, 450], [55.683214455749, 37.45855479011, 600], [55.77738280265, 37.720874648705, 520], [55.789004504099, 37.521692502281, 700], [55.785181112479, 37.583330813888, 300], [55.781806379579, 37.581909865635, 1000], [55.812666940461, 37.627481081406, 500], [55.705742077269, 37.687276941227, 260], [55.826659515124, 37.517761764917, 700], [55.831758694784, 37.51985070413, 250], [55.704106069967, 37.689012316457, 350], [55.793565145847, 37.804715668126, 500], [55.715231630284, 37.552611683265, 400], [55.842787857573, 37.532108184798, 300], [55.718218443788, 37.549252867556, 590], [55.607934766747, 37.733691800815, 600], [55.83054628449, 37.453684991911, 500], [55.83747100315, 37.537620578937, 1000], [55.835016452587, 37.514881313277, 500], [55.810700188694, 37.459487691243, 200], [55.862568443354, 37.661896729388, 1000], [55.751496916456, 37.599102711355, 280], [55.781363590913, 37.705546101493, 280], [55.808060455571, 37.579815785324, 280], [55.732847218245, 37.663765331007, 230], [55.68534973771, 37.57891504611, 280], [55.727158631962, 37.606898631081, 280], [55.910945654336, 37.39610778156, 230], [55.773668532136, 37.650797549857, 280], [55.687502668844, 37.54339618275, 280], [55.653604117265, 37.501497436579, 280], [55.845547451118, 37.66106710805, 280], [55.770787678328, 37.648722513657, 280], [55.764983525296, 37.608324885321, 280], [55.740961920922, 37.415484818858, 230], [55.916444256447, 37.772662753917, 280], [55.604659717756, 37.488789304422, 280], [55.796132165988, 37.971418024358, 280], [55.916546364792, 37.759186348776, 280], [55.707259409807, 37.387145982422, 230], [55.836426417058, 37.537361657926, 280], [55.79883318104, 37.528077673043, 280], [55.707685033293, 37.584490760738, 280], [55.708420014697, 37.659594938298, 280], [55.743158282926, 37.56736393202, 280], [55.585271705518, 37.724892853133, 280], [55.790961772959, 37.557202617635, 280], [55.776881590737, 37.581462606648, 230], [55.71548202787, 37.815840100863, 280], [55.760232761593, 37.58485214438, 280], [55.757070679828, 37.660871867922, 280], [55.706926865011, 37.592152658726, 280], [55.653812483275, 37.844300890172, 280], [55.764982880352, 37.638627214075, 280], [55.741098991013, 37.656390077589, 230], [55.736359803101, 37.619100464793, 280], [55.716955107866, 37.792232649043, 280], [55.888272843725, 37.588236312554, 280], [55.828341409003, 37.420006580924, 300], [55.583977449186, 37.658744938989, 300], [55.651117896211, 37.557024327016, 1000], [55.581347405637, 37.658639961564, 800], [55.856655791884, 37.661078268634, 500], [55.811737197315, 37.71828757916, 500], [55.722739270933, 37.810280297849, 550], [55.807843615831, 37.712865767031, 600], [55.708416063389, 37.470392311328, 600], [55.644788567352, 37.52877981327, 680], [55.792529542463, 37.779265059256, 1300], [55.836489955513, 37.511485002032, 450], [55.648961167838, 37.744901440519, 260], [55.575585527206, 37.656240889729, 1000], [55.808367493031, 37.530091297647, 200], [55.841298424761, 37.518168895877, 450], [55.740801628427, 37.657655347744, 300], [55.789549568938, 37.500283313627, 1200], [55.759324908875, 37.752462232949, 250], [55.793006599236, 37.493679857668, 240], [55.720418321874, 37.822146778723, 280], [55.800746032579, 37.781309239784, 250], [55.887778671716, 37.558134923732, 500], [55.844027559581, 37.521515252915, 400], [55.706926865011, 37.592152658726, 410], [55.706926865011, 37.592152658726, 350], [55.844027559581, 37.521515252915, 400], [55.617340384694, 37.489574701944, 600], [55.867549773929, 37.493405653436, 450], [55.660195422529, 37.778714714105, 800], [55.790437183176, 37.77020604482, 550], [55.747471451943, 37.706847364924, 340], [55.823284333356, 37.497703115267, 510], [55.585271705518, 37.724892853133, 340], [55.6104256993491, 37.6065926135156, 680], [55.853094692859, 37.607438457972, 650], [55.706195535067, 37.572256659404, 790], [55.830741240355, 37.632305365352, 790], [55.894501490355, 37.613071576485, 350], [55.721431218553, 37.762241346866, 180], [55.732452924046, 37.645053861616, 230], [55.773966942959, 37.586350042697, 600], [55.941521981416, 37.516220231438, 850], [55.720797962077, 37.777747417277, 500], [55.58585194139, 37.630249591873, 450], [55.654463310455, 37.649526343371, 260], [55.848923646341, 37.58691848034, 600], [55.892136871284, 37.621872218634, 200], [55.895259297351, 37.449171141841, 400], [55.720719569796, 37.635516752211, 400], [55.588587380967, 37.61322661356, 300], [55.67113368663, 37.765725946729, 500], [55.885242148322, 37.640787495963, 550], [55.713855223194, 37.836471897257, 650], [55.718503622148, 37.646895014209, 500], [55.887656169353, 37.637983187342, 160], [55.792434410539, 37.718511057125, 350], [55.816491851945, 37.459875885927, 400], [55.764022309663, 37.433454201668, 200], [55.715828862544, 37.438062198137, 1250], [55.408729997265, 37.563658586364, 1200], [55.809131930973, 37.817773533535, 1200], [55.802334611095, 37.792535353101, 1000], [55.754249346714, 37.863193875964, 800], [55.799577583886, 37.791460913189, 600], [55.667865252539, 37.83680736934, 230], [55.421279848126, 37.534522439576, 1000], [55.78111285131, 37.599746546911, 280], [55.472347162906, 37.539648243784, 1000], [55.729755823778, 37.732120239726, 280], [55.860505294369, 37.483285458853, 280], [55.721445261251, 37.63576385909, 280], [55.685809634985, 37.431751572952, 280], [55.613293096799, 37.517422468914, 600], [55.741836683684, 37.5991613246, 280], [55.881650839858, 37.678199621449, 1200], [55.633158180348, 37.624287450591, 230], [55.86509598473, 37.536404352012, 500], [55.828034544504, 37.489458248723, 400], [55.764295373272, 37.844969324677, 350], [55.910606163324, 37.86614843425, 500], [55.90939512968, 37.540400571198, 180], [55.654649735391, 37.702835478739, 600], [55.648206516448, 37.686938775472, 800], [55.549142358514, 37.55434927375, 820], [55.643177783148, 37.768337381725, 580], [55.641772140932, 37.769374530928, 300], [55.901748967575, 37.405495489506, 1000], [55.778867830297, 37.690625379277, 1000], [55.895506451235, 37.480058166585, 1000], [55.813171091294, 37.826253383294, 300], [55.73602530622, 37.706077051095, 1000], [55.816789424988, 37.813160092589, 1900], [55.818087346819, 37.821673858137, 1000], [55.647787788652, 37.528454567188, 1000], [55.899971154255, 37.403883523672, 700], [55.676232945095, 37.259424369612, 540], [55.681302756519, 37.265901938353, 500], [55.685504354711, 37.257875879451, 600], [55.657385900262, 37.709485773068, 500], [55.67845993521, 37.268283194994, 720], [55.855194993912, 37.614401387243, 500], [55.636101741952, 37.358547680183, 600], [55.573534577411, 37.583142744768, 800], [55.75956509484, 37.583114342008, 500], [55.734189430133, 37.627375085573, 500], [55.758455051947, 37.611761423274, 500], [55.871915874926, 37.509935431361, 1000], [55.783629847488, 37.719200825864, 480], [55.756577102596, 37.632575642875, 420], [55.687180882755, 37.573667567491, 420], [55.687412940103, 37.852974746557, 1000], [55.742444748179, 37.624690230926, 1000], [55.690763975966, 37.858784972748, 1200], [55.431665007226, 37.540240669171, 500], [55.708714114812, 37.622081072261, 400], [55.605558851461, 37.287292903448, 820], [55.60555879432, 37.287292826562, 360], [55.672575657581, 37.268327377696, 300], [55.675120575276, 37.275207667315, 800], [55.712551306551, 37.816391474146, 870], [55.554832475004, 37.702840908056, 600], [55.636572718155, 37.700195352796, 400], [55.80158096973, 37.760287705114, 150], [55.624675026211, 37.716162868717, 600], [55.751865534982, 37.859255068489, 1500], [55.671744915787, 37.725002088196, 300], [55.68244219995, 37.722882864406, 750], [55.749015333904, 37.719294219317, 580], [55.751865534982, 37.859255068489, 500], [55.845547451118, 37.66106710805, 1000], [55.794278157977, 37.751879393693, 400], [55.803735093106, 37.753052947661, 300], [55.794278157977, 37.751879393693, 400], [55.794278157977, 37.751879393693, 350], [55.893916748553, 37.390320237307, 1000], [55.893916748553, 37.390320237307, 500], [55.638158112389, 37.696420461688, 300], [55.641221749518, 37.333904142236, 1500], [55.807725354201, 37.504898878686, 480], [55.751865534982, 37.859255068489, 230], [55.882495273676, 37.517875882681, 600], [55.684620593092, 37.858864642845, 640], [55.682898390569, 37.876791293382, 500], [55.904449099129, 37.699296922553, 800], [55.681829178426, 37.891635960411, 800], [55.885601085641, 37.528572258589, 450], [55.689246862338, 37.294922658178, 700], [55.614963345129, 37.721368727241, 1250], [55.433181061709, 37.545346861027, 1200], [55.612628778523, 37.720152956239, 280], [55.744564606341, 37.565535153144, 280], [55.618623934709, 37.507234271998, 280], [55.799747520203, 37.482983405183, 300], [55.897530279874, 37.666193998321, 300], [55.747471451943, 37.706847364924, 300], [55.625142575517, 37.760911936809, 280], [55.793071072285, 37.807137347669, 300], [55.674935692842, 37.270531317192, 300], [55.655853812108, 37.541891016952, 300], [55.809478478002, 37.464487921938, 280], [55.658250613727, 37.742409856383, 280], [55.689522664875, 37.30122309828, 600], [55.748292427813, 37.950377011588, 170], [55.682790259999, 37.865345006961, 110], [55.683692936736, 37.865805098159, 1000], [55.634851869521, 37.849917577895, 600], [55.7469391805, 37.591182449377, 350], [55.979956367843, 37.176376878763, 500], [55.628931503624, 37.74133007778, 500], [56.001960234227, 37.21080721711, 290], [55.680332286602, 37.289144187589, 180], [55.821859337351, 37.969695135632, 300], [55.797350387731, 37.800792812953, 500], [55.923835190015, 37.821373168026, 200], [55.982765845058, 37.174632671081, 260], [55.982765845058, 37.174632671081, 280], [55.661661778656, 37.903054620851, 850], [55.74649946186, 37.972865370044, 400], [55.682374460059, 37.900451042185, 1000], [55.682946156266, 37.897455831263, 250], [55.745148171953, 37.852971857446, 800], [55.558216910993, 37.708112649677, 2000], [55.683812371354, 37.899444762915, 500], [55.541601048326, 37.536500838011, 700], [55.755529024618, 37.600574002572, 350], [55.75394617839, 37.601568431755, 950], [55.83865724054, 37.388013144925, 600], [56.014316389375, 37.205394210621, 250], [55.740067269312, 37.621861103174, 600], [55.503046489266, 37.572557636701, 900], [55.741062022399, 37.629268670326, 1500], [55.493575751274, 37.568421145569, 300], [55.713993923132, 37.723470842703, 250], [55.714069847505, 37.718422186741, 700], [55.88896037421, 37.525760882888, 750], [55.887066453074, 37.523400078111, 690], [55.692224602818, 37.896429179837, 210], [55.762275342485, 37.862185809363, 1000], [55.764347136934, 37.853993307008, 1000], [55.88424954129, 37.755511508845, 350], [55.704453696827, 37.358777960676, 300], [55.675142029529, 37.891415253673, 500], [55.630306627223, 37.859837502453, 120], [55.889104069438, 37.451273299891, 600], [55.924682183624, 37.524794001867, 1100], [55.922382006303, 37.514268596594, 250], [55.749717778119, 37.866759863191, 700], [55.670787584278, 37.281187475468, 800], [55.671520324007, 37.283797449583, 200], [55.747021160342, 38.02188172583, 800], [55.844319363393, 37.382891486395, 500], [55.844319363393, 37.382891486395, 200], [55.751152070361, 37.95701313465, 600], [55.834798837856, 37.299149648107, 580], [55.92106391946, 37.835072564251, 1000], [55.778668303798, 37.696583331786, 350], [55.98945841173, 37.226438614255, 800], [55.385609715874, 37.545351434562, 280], [55.672959615056, 37.284449566364, 200], [55.984105902525, 37.213995912005, 500], [55.672109538731, 37.287589439774, 320], [55.797152586584, 37.517578501493, 750], [55.680743473983, 37.887858734496, 250], [55.437587627034, 37.773824951795, 400], [55.945098527464, 37.512156536127, 500], [55.750613866777, 37.653180087813, 490], [55.437873011218, 37.767855446839, 1000], [55.822936686017, 37.367998782645, 200], [55.993268398407, 37.212863534367, 500], [55.996624311, 37.189370941974, 500], [55.98463446407, 37.156590642037, 500], [55.414880148191, 37.902941276023, 800], [55.674853259741, 37.298453456627, 1500], [55.748689132171, 37.583339557468, 150], [55.414880148191, 37.902941276023, 400], [55.414880148191, 37.902941276023, 750], [55.539901019064, 37.544654564714, 550], [55.388133562206, 37.541245658559, 300], [55.924539486955, 37.754124270746, 800], [55.650797067368, 37.854658225674, 1600], [55.915388247648, 37.857936785517, 600], [55.439992005073, 37.75143457492, 400], [55.729632478591, 37.636281733569, 850], [55.749194241662, 37.589767768503, 900], [55.751834559217, 38.006599436349, 600], [55.60438897835, 38.105186276949, 300], [55.751345335054, 37.999870285277, 800], [55.793229392029, 37.636082176878, 1000], [55.937603024315, 37.857415623243, 300], [55.937095338933, 37.853556844066, 500], [55.950082056289, 37.303098471863, 550], [55.932362778469, 37.843571269488, 600], [55.9184704784, 37.725765388487, 850], [55.687435082317, 37.313506704664, 650], [55.764190249709, 37.629261061939, 1000], [55.919547711631, 38.011451290132, 500], [55.409856323417, 37.550124891348, 500], [55.761266873263, 37.576011868491, 260], [55.799747520203, 37.482983405183, 260], [55.766995665975, 37.380241103557, 260], [55.930911453038, 37.851925113026, 800], [55.855202610184, 37.478390976664, 260], [55.655853812108, 37.541891016952, 260], [55.74921871948, 37.540006244891, 260], [55.418617710259, 37.831839193435, 620], [55.436463875906, 37.77149679334, 500], [55.417994710712, 37.839594261901, 900], [55.590697110627, 38.127607039858, 550], [55.419425631942, 37.832794099567, 600], [55.425850393244, 37.547946125295, 200], [55.936952265088, 37.851470607489, 1000], [55.592055212724, 38.123306397333, 650], [55.601120856973, 37.034549322712, 700], [55.432890909009, 37.56272398919, 1000], [55.923161116693, 37.992041199469, 600], [55.924584774691, 37.998848860812, 280], [55.860505294369, 37.483285458853, 540], [55.815943730737, 37.362868606386, 750], [55.780874106863, 37.606303631166, 400], [55.799883762221, 37.279934224785, 1000], [55.866302825477, 37.119036902748, 500], [55.955239649012, 38.052385956015, 400], [55.747874714219, 37.59243429513, 1500], [55.584596456782, 37.741056217504, 400], [55.760869038631, 37.632843950248, 1000], [55.733796858533, 37.376832891823, 550], [55.912891927746, 37.860051978001, 600], [55.783629847488, 37.719200825864, 1250], [55.670124603108, 37.493602243302, 1500], [55.652643706484, 37.613622245551, 800], [55.799089251894, 37.774704930367, 550], [55.433902668412, 37.756104513081, 1000], [55.917612903814, 37.867089429432, 820], [55.605688524594, 38.09914734397, 600], [55.432078882868, 37.524138949673, 1000], [55.602249667293, 38.107685452717, 550], [55.929534901039, 38.003234675716, 300], [55.919453438936, 37.992496492347, 500], [55.418134191569, 37.574184583865, 250], [55.436313802641, 37.55053628564, 800], [55.885583019255, 37.427820142929, 800], [55.661406269541, 37.857389876583, 1300], [55.774549753619, 37.546504598808, 350], [55.845547451118, 37.66106710805, 350], [55.744564606341, 37.565535153144, 350], [55.600265805317, 38.123001889052, 500], [55.597998909434, 38.113103391894, 1000], [55.75493004172, 37.843127960847, 250], [55.765436774289, 37.597536512493, 280], [55.740975705863, 37.610334380349, 800], [55.758009087439, 37.625453542671, 1200], [55.762312094849, 37.603951836037, 800], [55.736359803101, 37.619100464793, 200], [55.737328775604, 37.615442046456, 740], [55.764172032636, 37.602409523935, 700], [55.762850266625, 37.592730593309, 1000], [55.43222177298, 37.766947775772, 1000], [55.760243846165, 37.639912234986, 1000], [55.661322434902, 37.950266292845, 550], [55.764499112426, 37.656918500813, 400], [55.738352678813, 37.661681134461, 500], [55.759829260581, 37.596083616042, 1000], [55.691757584657, 37.529735958373, 260], [55.804338661935, 37.584854487106, 750], [55.886188307553, 37.424457765574, 500], [55.762495067231, 37.58774297285, 1000], [55.805680642275, 37.413610846446, 870], [55.769265057702, 37.596819763786, 155], [55.765828324602, 37.609897176539, 1250], [55.758047577613, 37.581821158829, 1300], [55.755774841204, 37.614638938872, 230], [56.013406920976, 37.483733591896, 1500], [55.752657402108, 37.60375273511, 800], [55.749704282952, 37.59297975526, 1000], [55.884975570389, 37.423781813987, 770], [55.743768635733, 37.627706749891, 400], [55.745689757766, 37.626294884663, 350], [55.752035092271, 37.591170852141, 280], [55.7540908625696, 37.6352154313146, 380], [55.73345727482, 37.709164212789, 550], [55.771579429883, 37.682198644826, 313], [55.755774841204, 37.614638938872, 310], [56.014086567267, 37.462282389899, 700], [55.885627701921, 37.420626017544, 1200], [55.771147562089, 37.620137300419, 740], [55.73944907471, 37.66475221829, 260], [55.757075094801, 37.599223527766, 280], [55.756433356797, 37.601485481828, 1500], [55.742111776436, 37.652405844137, 500], [55.74700763577, 37.58815087468, 1500], [55.589043731713, 37.754459156326, 800], [55.591313515554, 37.760935761514, 800], [55.439840680727, 37.565551874518, 550], [55.637017390572, 37.842221141441, 1000], [55.766517681305, 37.630542549145, 1500], [55.759713386836, 37.645257104415, 750], [55.76087662737, 37.61716166157, 750], [55.846679587154, 37.193894402071, 700], [55.692294724725, 37.727542838077, 1000], [55.761924247564, 37.613740032818, 560], [55.764190249709, 37.629261061939, 500], [55.76092998167, 37.622881449579, 500], [55.674935692842, 37.270531317192, 540], [55.667665289579, 37.285069219254, 540], [55.640724051284, 37.208089878344, 540], [55.76481462853, 37.638348727197, 150], [55.748190993184, 38.013436565097, 1000], [55.76481462853, 37.638348727197, 400], [55.743583731449, 37.647508018638, 800], [55.740327392281, 37.628176290749, 1500], [55.862718993221, 37.435034387733, 350], [55.716955107866, 37.792232649043, 350], [55.799071590928, 37.529835493526, 200], [55.772319914753, 37.632989295204, 870], [55.762588217478, 37.62717089602, 490], [55.805554241822, 37.801413680379, 900], [55.77766932122, 37.581446425096, 280], [55.931929444773, 37.520097896136, 280], [55.679634264807, 37.565516081556, 230], [55.796686018601, 37.933411837992, 280], [55.961109033365, 37.533672523388, 230], [55.83737312264, 37.57510381928, 420], [55.771601187545, 37.6826272174, 280], [55.708714114812, 37.622081072261, 230], [55.760943029154, 37.632523491435, 230], [55.757495209062, 37.612181333906, 1200], [55.778383150955, 37.599625045419, 280], [55.635171968883, 37.436937176274, 230], [55.755774841204, 37.614638938872, 280], [55.754051953579, 37.861537061249, 800], [55.580845626784, 38.136666772108, 600], [55.981852079473, 37.864166680541, 190], [55.744481711398, 37.627804704704, 1250], [55.758455051947, 37.611761423274, 500], [55.746957624842, 37.654088777221, 600], [55.840864021873, 37.379099122099, 350], [55.856982023576, 37.386120961814, 350], [55.899931899053, 38.060516410755, 290], [55.858723148307, 37.119659849842, 1200], [56.007203991067, 37.865308073997, 650], [55.67503490748, 37.723743600765, 500], [55.74921871948, 37.540006244891, 2570], [55.665505116579, 37.949612053898, 400], [55.923459157091, 37.985505108353, 650], [55.894246907645, 37.613525716771, 800], [55.813025590053, 37.344581345483, 400], [55.812583709719, 37.958673402811, 900], [55.589203663539, 38.135831980218, 400], [55.75926878102, 37.609029644763, 600], [55.707446345261, 37.659701326746, 600], [55.750625802456, 37.594791491688, 280], [55.760131179151, 37.649619232144, 1100], [56.101602294343, 38.125587030199, 300], [55.741073804464, 37.628871140321, 750], [55.846389285269, 37.489792600505, 200], [55.66700693246, 37.858103808969, 900], [56.012283525942, 37.476831804273, 1000], [55.815581279429, 37.340013956612, 400], [56.023275705558, 37.419810119953, 1000], [55.648961167838, 37.744901440519, 400], [55.741593433362, 37.621510863148, 1000], [55.662820641105, 38.005488735741, 600], [55.844328126498, 38.185180632627, 600], [55.952502055117, 38.049679974612, 700], [55.741078886253, 37.621623623636, 620], [55.751496916456, 37.599102711355, 620], [55.956878478506, 38.052311962458, 500], [55.999070881345, 37.839043878683, 150], [55.709041651472, 37.655292846442, 750], [55.956878478506, 38.052311962458, 150], [56.004488197701, 37.846519216692, 800], [56.008210206693, 37.798205804976, 400], [55.847388275613, 37.17917632465, 400], [55.491165260789, 37.311982865984, 400], [55.83893924583, 37.182965847805, 500], [55.767965050159, 37.531765298764, 170], [55.727982857455, 37.580548004488, 800], [55.750899273931, 37.71548870212, 700], [55.657463322389, 37.982490097616, 600], [55.773488995864, 37.544362323497, 100], [55.707685033293, 37.584490760738, 150], [55.707685033293, 37.584490760738, 350], [55.738395153613, 37.640440022717, 1000], [55.706402896195, 37.586522544735, 300], [55.706402896195, 37.586522544735, 250], [55.766242517472, 37.526559559091, 300], [55.902546341881, 37.585969696841, 600], [55.808139245539, 37.58170618594, 820], [55.70394548422, 37.686556592204, 800], [55.677782647253, 37.572171151628, 500], [55.70651983549, 37.585416665934, 420], [55.747471451943, 37.706847364924, 260], [55.589776982666, 37.900513848404, 1010], [55.795982294706, 37.946456493819, 250], [55.707677895924, 37.625416226547, 640], [55.720612925118, 37.746995522322, 350], [55.71450949574, 37.791314348949, 540], [55.659567069009, 37.982484482282, 600], [55.682524850065, 37.621214979594, 155], [56.015628896311, 37.47987782418, 1000], [55.704532518154, 37.584880215001, 230], [55.715611793961, 37.516435736615, 1000], [55.696081106312, 37.625630573974, 700], [55.822275502309, 37.499092286812, 500], [55.743256003064, 37.661647427838, 500], [55.739812322216, 37.469235202172, 800], [55.687438023292, 37.604376135164, 800], [55.803342876099, 37.618196783226, 260], [55.803342876099, 37.618196783226, 240], [55.704419503158, 37.691783941096, 1000], [55.793269887679, 37.608675121467, 600], [55.81142269979, 37.624817121679, 500], [55.9184704784, 37.725765388487, 650], [55.771799644108, 37.705210932705, 600], [55.800860313607, 37.564901216181, 750], [55.687180882755, 37.573667567491, 1000], [55.677542240449, 37.659893175346, 250], [55.741178026686, 37.502752066898, 260], [55.845547451118, 37.66106710805, 260], [55.757070679828, 37.660871867922, 240], [55.850984575599, 37.597454450948, 290], [55.881017715015, 37.450458802583, 240], [55.795599743199, 37.593502649799, 240], [55.609772239646, 37.720052947482, 290], [55.61108363007, 37.606861806172, 240], [55.766995665975, 37.380241103557, 240], [55.606708000971, 37.536719795871, 240], [55.753481638919, 37.71656558641, 290], [55.604659717756, 37.488789304422, 240], [55.806073282891, 37.581353373082, 240], [55.891764330544, 37.727230840786, 240], [55.910945654336, 37.39610778156, 240], [55.746742411582, 37.537163778205, 200], [55.639880689662, 37.758134080368, 260], [55.669789264547, 37.552200036195, 260], [55.733163447411, 37.668964062724, 260], [55.792371246237, 37.602959807388, 260], [55.83737312264, 37.57510381928, 260], [55.652441625944, 37.733722379874, 1500], [55.789566193232, 37.752520981355, 260], [55.679634264807, 37.565516081556, 560], [55.714105210354, 37.794532698735, 700], [55.726498702774, 37.531857789208, 1100], [55.739781178615, 37.652011012848, 260], [55.619503294373, 37.509386127877, 260], [55.743121865542, 37.507063106199, 220], [55.809498052431, 37.83123041226, 260], [55.689401931032, 37.601708984023, 350], [55.689401931032, 37.601708984023, 350], [55.78197454795, 37.704461943222, 260], [55.897773179561, 37.588270962435, 260], [55.640929309698, 37.530805723969, 260], [55.565063267224, 37.556737951728, 260], [55.643754721005, 37.526395669448, 260], [55.503046489266, 37.572557636701, 210], [55.808060455571, 37.579815785324, 260], [55.621825231931, 37.713755930761, 260], [55.414880148191, 37.902941276023, 260], [55.757070679828, 37.660871867922, 260], [55.677966288484, 37.780385907516, 260], [55.810180127781, 38.18253885291, 1000], [55.794342349883, 37.926247996439, 260], [55.870236127551, 38.190335475871, 450], [55.71548202787, 37.815840100863, 300], [55.71548202787, 37.815840100863, 250], [55.71548202787, 37.815840100863, 150], [55.717391625504, 37.78537724455, 550], [55.715248137152, 37.817296699035, 250], [55.819165438522, 37.723179449844, 600], [55.656939036741, 37.725351940208, 200], [55.807131240713, 38.188959115656, 900], [55.616453182536, 37.658060633915, 600], [55.646996723794, 37.411716304883, 260], [55.808060455571, 37.579815785324, 500], [55.609537826626, 37.977031105833, 650], [55.781447073368, 37.55616936873, 550], [55.680260577515, 37.570658676066, 1000], [55.691757584657, 37.529735958373, 280], [55.628823762591, 37.021579885636, 400], [55.805052150282, 37.517089050768, 530], [55.704963253125, 37.027389500014, 1000], [55.757302822621, 37.599146042954, 560], [55.706926865011, 37.592152658726, 530], [55.90939512968, 37.540400571198, 530], [55.66412515815, 37.482208186191, 530], [55.751821220426, 37.716104822503, 530], [55.865571828796, 37.704971569412, 560], [55.705287798576, 37.01974182847, 200], [55.692224602818, 37.896429179837, 560], [55.670923859582, 37.670474082102, 480], [55.670658694982, 37.671264426507, 300], [55.677938521445, 37.467137992801, 280], [55.677938521445, 37.467137992801, 240], [55.570590797821, 37.449967573961, 280], [55.77990865174, 37.69895790161, 350], [55.600076829368, 37.164305460541, 600], [55.798796963315, 37.68960408547, 600], [55.762464221864, 37.591923050914, 1500], [55.628721625642, 38.040891597532, 300], [55.670039541162, 37.538355535833, 500], [55.643352213275, 37.709111349385, 650], [55.782231089608, 37.835808543193, 800], [55.83130184898, 37.445513321759, 150], [55.703784045628, 37.574283900565, 750], [55.805260411904, 37.510972950312, 1000], [55.53829253494, 37.067773391132, 700], [55.648351460285, 37.712797526445, 500], [55.679141790126, 37.56382376674, 1200], [56.069124311109, 37.133902916345, 280], [55.590899600826, 38.203389638743, 700], [55.949390322593, 37.309324846814, 280], [55.540366836062, 37.083494899053, 650], [55.589813476152, 38.21053060709, 200], [55.574883239969, 37.580102603322, 260], [55.818936520262, 37.709408102501, 1500], [55.792551169204, 37.528390876333, 1000], [55.799071590928, 37.529835493526, 300], [55.728510291971, 37.623064329657, 480], [55.658250613727, 37.742409856383, 120], [55.792010121988, 37.7491685368, 1000], [55.599908810778, 37.040281458204, 1000], [55.897602671359, 37.604545516533, 800], [55.7987161746, 37.53219669463, 300], [55.768137913907, 37.599987914793, 490], [55.7825860707508, 37.7055424037749, 1100], [55.566976371548, 38.196431093241, 700], [55.712546169446, 37.56644392455, 820], [55.74921871948, 37.540006244891, 820], [55.883410289037, 37.558531585382, 1500], [55.777368285202, 37.487561852633, 900], [55.779414182078, 37.66692220644, 800], [55.752664827434, 37.818885868476, 820], [55.744908533833, 37.601391184072, 800], [55.728685497581, 37.610874208154, 820], [55.864929216638, 37.605094712719, 800], [55.803952923352, 37.707255070057, 1500], [55.73617735775, 37.59032958394, 820], [55.8494171329, 37.43899435456, 820], [55.963654726041, 37.41507067194, 820], [55.921193582339, 37.66490644393, 820], [55.800131756431, 37.535185468767, 300], [55.632715776761, 37.211286579913, 1500], [55.794757678921, 37.713220392992, 490], [55.774148855879, 37.581948809322, 200], [55.661909055039, 38.015065678736, 200], [55.805244992958, 37.515666125545, 200], [55.620393994526, 37.671036204406, 650], [55.832910157668, 37.628876691753, 250], [55.830425715049, 37.628042564137, 400], [55.653196315268, 37.596164728369, 200], [55.832075113958, 37.630073860267, 600], [55.797195687674, 37.717124312989, 500], [55.884729086336, 37.598421346735, 550], [55.831192223161, 37.62542555897, 250], [55.740149008021, 37.858433640338, 750], [56.004623373726, 37.857429992157, 250], [55.792010121988, 37.7491685368, 700], [55.792010121988, 37.7491685368, 250], [55.551986374641, 37.692835502936, 1000], [55.628931503624, 37.74133007778, 1300], [55.817662978943, 37.596719147677, 1000], [55.770560346071, 37.65551735554, 600], [55.78352556849, 37.692969081527, 900], [55.653186975643, 37.554163957082, 500], [55.789546149986, 37.748373829891, 280], [55.6004854654, 37.607617436507, 700], [55.789546149986, 37.748373829891, 440], [55.789546149986, 37.748373829891, 450], [55.757218779194, 37.659133619148, 65], [55.594440636676, 37.616136994918, 300], [55.789566193232, 37.752520981355, 290], [55.828119410579, 37.601097966093, 530], [55.750403151682, 37.414824836129, 75], [55.75615441333, 37.655576881499, 500], [55.932718445185, 37.547947620676, 1000], [55.79505646503, 37.732068211538, 350], [55.788146482323, 37.74934498316, 260], [55.788446634084, 37.748040044232, 180], [55.656335088779, 37.569643282147, 1500], [55.804035390911, 37.534339084086, 500], [55.420267963107, 37.547847923453, 240], [55.755613272178, 37.623571728773, 500], [55.769540110519, 37.597353627979, 900], [55.784262416783, 37.715268832382, 250], [55.782846986497, 37.728489903745, 350], [55.806946455222, 37.512505822507, 500], [55.792335296968, 37.695330680226, 350], [55.805803098076, 37.514851874339, 500], [55.677512500978, 37.74646170001, 480], [55.581227897966, 37.676533482615, 550], [55.816908606402, 37.71192525409, 450], [55.847723722339, 37.564314234061, 450], [55.808165568545, 37.529414676066, 500], [55.732914214994, 37.427313939555, 700], [55.766995665975, 37.380241103557, 280], [55.704104259298, 37.751068209685, 500], [55.618637363725, 37.592823733589, 1000], [55.678289614327, 37.740210323432, 500], [55.672495095863, 37.51545038858, 830], [55.656807916239, 37.472329902496, 830], [55.618903291256, 37.592543298288, 1000], [55.671474768895, 37.518150100987, 1500], [55.619020471761, 37.591775757352, 200], [55.672928527323, 37.747551229384, 1000], [55.775208196471, 37.58548115887, 830], [55.673087524373, 37.542250102519, 1200], [55.473769572047, 37.311201899249, 280], [55.795071683652, 37.512271984994, 1000], [55.698236845052, 37.763276961308, 700], [55.807422615073, 37.521630812032, 1000], [55.777296681125, 37.457158425817, 210], [55.667165135154, 37.491428164407, 700], [55.791867554161, 37.692765794168, 500], [55.829423683688, 37.816010818039, 700], [55.707053194455, 37.402934579432, 450], [55.64427780257, 37.523179713966, 150], [55.707053194455, 37.402934579432, 450], [55.665313118571, 37.513413342402, 500], [55.643754721005, 37.526395669448, 170], [55.863712683601, 37.545815011827, 500], [55.913164788065, 37.571248912026, 250], [55.90939512968, 37.540400571198, 300], [55.624983621547, 37.79881295173, 600], [55.650751538447, 37.560308207881, 1000], [55.581923186046, 37.657919108967, 1000], [55.701312912112, 37.503790193677, 1070], [55.669789264547, 37.552200036195, 700], [55.761394249535, 37.583682804368, 1000], [55.677938521445, 37.467137992801, 280], [55.604659717756, 37.488789304422, 280], [55.790427638107, 37.68710036412, 350], [55.64256111223, 37.520107886528, 750], [55.635254928475, 37.517635123383, 500], [55.725556534141, 37.377730231065, 300], [55.635254928475, 37.517635123383, 550], [55.652677857552, 37.475640085404, 3000], [55.666079121877, 37.545998274591, 600], [55.702495701949, 37.466427723545, 800], [55.669789264547, 37.552200036195, 240], [55.676949072502, 37.504839621557, 1200], [55.729017524147, 37.680036804185, 350], [55.631559272387, 37.51806504372, 450], [55.818466171713, 37.500497807688, 130], [55.631559272387, 37.51806504372, 450], [55.799747520203, 37.482983405183, 950], [55.839650193478, 37.387919830925, 950], [55.717497163489, 37.793678903103, 200], [55.659491527892, 37.749604419041, 250], [55.655434259562, 37.523293846181, 290], [55.420267963107, 37.547847923453, 250], [55.740217627215, 37.784505848336, 200], [55.716183593702, 37.813672874651, 400], [55.750229029183, 37.77052689167, 1000], [55.775675887908, 37.584798098563, 800], [55.659059066666, 37.754425047486, 600], [55.752000849566, 37.753653612704, 180], [55.714149812695, 37.821086502187, 250], [55.836531492745, 37.574066155111, 500], [55.950437644178, 38.061321965526, 550], [55.819153816247, 37.396819298141, 1000], [55.765323895982, 37.833275634303, 450], [55.805829981825, 37.817542060871, 600], [55.632538572888, 37.519720196442, 280], [55.840228912378, 37.579320818114, 590], [55.639880689662, 37.758134080368, 500], [55.673450082462, 37.780681297176, 700], [55.673450082462, 37.780681297176, 100], [55.673450082462, 37.780681297176, 300], [55.855202610184, 37.478390976664, 230], [55.805056942444, 37.420574813807, 600], [55.673450082462, 37.780681297176, 300], [55.585271705518, 37.724892853133, 240], [55.673450082462, 37.780681297176, 600], [55.430322939548, 37.549634666905, 100], [55.762032839987, 37.635163771622, 650], [55.757232818486, 37.595115648846, 650], [55.611475062844, 37.730662636349, 680], [55.612081708568, 37.732833225154, 280], [55.699389090397, 37.818503323694, 500], [55.848579832225, 37.617971184466, 340], [55.673450082462, 37.780681297176, 250], [55.861681951251, 37.613408928822, 1500], [55.850984575599, 37.597454450948, 240], [55.864443283801, 37.548069646828, 250], [55.850984575599, 37.597454450948, 300], [55.88294212884, 37.605251129796, 350], [55.606708000971, 37.536719795871, 280], [55.639880689662, 37.758134080368, 350], [55.855649920348, 37.619963425367, 700], [55.691757584657, 37.529735958373, 500], [55.762268444695, 37.62220456437, 450], [55.874337670183, 37.609190990901, 700], [55.870166610117, 37.60256861617, 500], [55.625142575517, 37.760911936809, 250], [55.788582721977, 37.78391781451, 200], [55.62861815253, 37.740717177474, 1000], [55.625142575517, 37.760911936809, 250], [55.78053775375, 37.574704259303, 1250], [55.840139058186, 37.486212483799, 140], [55.754681776367, 37.621529186085, 800], [55.619503294373, 37.509386127877, 280], [55.619503294373, 37.509386127877, 230], [55.619503294373, 37.509386127877, 250], [55.619503294373, 37.509386127877, 350], [55.886875688726, 37.601162999595, 500], [55.619503294373, 37.509386127877, 350], [55.845547451118, 37.66106710805, 280], [55.845547451118, 37.66106710805, 290], [55.863110400948, 37.601964531137, 300], [55.845547451118, 37.66106710805, 800], [55.845547451118, 37.66106710805, 350], [55.845547451118, 37.66106710805, 380], [55.641456504007, 37.765336361723, 1000], [55.845547451118, 37.66106710805, 500], [55.845547451118, 37.66106710805, 250], [55.845547451118, 37.66106710805, 850], [55.888272843725, 37.588236312554, 250], [55.876204548394, 37.668356837058, 350], [55.603263392581, 37.54152058988, 1000], [55.888272843725, 37.588236312554, 230], [55.812386373196, 37.827590898435, 300], [55.888272843725, 37.588236312554, 300], [55.604534766721, 37.739568391279, 1100], [55.612628778523, 37.720152956239, 500], [55.88982053857, 37.539316268799, 600], [55.88982053857, 37.539316268799, 350], [55.88982053857, 37.539316268799, 500], [55.88982053857, 37.539316268799, 400], [55.88982053857, 37.539316268799, 155], [55.599392890269, 37.737035897521, 250], [55.821353169382, 37.497673786593, 500], [55.871217157528, 37.665920320547, 1000], [55.750899273931, 37.71548870212, 1000], [55.733497381071, 37.640489400399, 1000], [55.76665016629, 37.60269807499, 1000], [55.701314310551, 37.503792765267, 1000], [55.863110400948, 37.601964531137, 400], [55.845547451118, 37.66106710805, 700], [55.845547451118, 37.66106710805, 200], [55.890156261206, 37.592334381495, 500], [55.606976744456, 37.523602678179, 500], [55.843948776778, 37.662657059824, 250], [55.609877633477, 37.732702521604, 1000], [55.713021680917, 37.690259966673, 350], [55.764335345502, 37.581397335442, 1500], [55.711444151804, 37.688264702985, 300], [55.711830661899, 37.68678593478, 500], [55.870009125533, 37.663994683812, 360], [55.726137808385, 37.561087389625, 1000], [55.775815233143, 37.585599472455, 1500], [55.726808339034, 37.625781220713, 1000], [55.759705267977, 37.578871777723, 280], [55.75980031211, 37.583710780923, 1500], [55.733777567497, 37.666875784402, 400], [55.869823350593, 37.676467689124, 500], [55.774878371284, 37.581423934123, 650], [55.710035397437, 37.66845957225, 400], [55.774529139078, 37.580409890024, 800], [55.706926865011, 37.592152658726, 280], [55.721643304262, 37.572179123246, 700], [55.730213527282, 37.632401459586, 1300], [55.72143319625, 37.626424713799, 800], [55.760330722349, 37.581478033529, 200], [55.740105475597, 38.015621531868, 600], [55.72942489112, 37.622749474837, 280], [55.778324995128, 37.694065070287, 500], [55.769529061013, 37.584998510061, 450], [55.746927236311, 37.626365469754, 230], [55.746742411582, 37.537163778205, 280], [55.715554749045, 37.632797998467, 170], [55.753178681636, 37.575596073196, 1000], [55.792841785441, 37.81855113219, 1500], [55.788912600559, 37.582039557001, 720], [55.778382383447, 37.584767606898, 280], [55.743158282926, 37.56736393202, 350], [55.743158282926, 37.56736393202, 350], [55.817251553829, 37.387724896706, 350], [55.751998751552, 37.582634665882, 270], [55.778247288061, 37.586897271306, 2000], [55.759672820566, 37.574812855908, 190], [55.741641586197, 37.627642340652, 500], [55.776998884207, 37.585339918052, 800], [55.658250613727, 37.742409856383, 260], [55.755774841204, 37.614638938872, 260], [55.732847218245, 37.663765331007, 500], [55.744428405237, 37.629848403627, 200], [55.738157504287, 37.52884591382, 500], [55.754631121672, 37.636594122132, 650], [55.741837856744, 37.558263073725, 550], [55.764295373272, 37.844969324677, 290], [55.982765845058, 37.174632671081, 340], [55.746535681307, 37.561147579852, 500], [55.741774550958, 37.656067388697, 260], [55.741774550958, 37.656067388697, 200], [55.771583771872, 37.681597979282, 280], [55.736962157041, 37.675762906643, 1000], [55.744564606341, 37.565535153144, 380], [55.744009084943, 37.582940746407, 600], [55.637813922442, 37.677676598551, 600], [55.922436318225, 37.715117857887, 250], [55.770136434725, 37.683632761752, 700], [55.632715776761, 37.211286579913, 250], [55.672262114251, 37.279600338201, 280], [55.744564606341, 37.565535153144, 300], [55.751207115474, 37.606873007226, 1500], [55.515552949639, 37.710321304409, 340], [55.743608055282, 37.578054928449, 500], [55.773588231618, 37.587457415653, 1250], [55.772657911855, 37.58576420136, 1000], [55.772894916093, 37.680071738879, 800], [55.783353095814, 37.632302855202, 990], [55.778687293506, 37.632134649576, 700], [55.776302094634, 37.627959024636, 500], [55.585891728131, 37.719991064736, 250], [55.770994848514, 37.587298220222, 900], [55.824631157926, 37.38838051103, 280], [55.647521957884, 37.595610529319, 280], [55.772894916093, 37.680071738879, 600], [55.747763928467, 37.6806663163, 200], [55.763108931584, 37.677867739327, 600], [55.746997981612, 37.678796312378, 150], [55.776009222546, 37.660531300132, 350], [55.776009222546, 37.660531300132, 200], [55.730424238194, 37.642958191241, 390], [55.90939512968, 37.540400571198, 750], [55.645003849785, 37.497065069267, 1100], [55.783353095814, 37.632302855202, 1800], [55.737834351972, 37.586474360298, 500], [55.776009222546, 37.660531300132, 350], [55.709100664643, 37.595542014618, 400], [55.774113493174, 37.654910373055, 400], [55.774113493174, 37.654910373055, 350], [55.774113493174, 37.654910373055, 300], [55.604659717756, 37.488789304422, 530], [55.707259409807, 37.387145982422, 560], [55.76819239992, 37.623026473995, 560], [55.729657614782, 37.639334555514, 300], [55.747368490038, 37.65619196179, 500], [55.772618804666, 37.660595136683, 400], [55.76394212482, 37.563228242806, 300], [55.76985925846, 37.657606954985, 350], [55.764130028303, 37.602553279099, 300], [55.802840814416, 37.517709515611, 300], [55.74921871948, 37.540006244891, 260], [55.706926865011, 37.592152658726, 400], [55.74921871948, 37.540006244891, 350], [55.74921871948, 37.540006244891, 800], [55.74921871948, 37.540006244891, 200], [55.748189829538, 37.584031428695, 400], [55.791720219667, 37.602392803879, 200], [55.738352678813, 37.661681134461, 500], [55.414880148191, 37.902941276023, 330], [55.741311187009, 37.54211320487, 1250], [55.770787678328, 37.648722513657, 1000], [55.810104361025, 37.656221049958, 900], [55.757070679828, 37.660871867922, 155], [55.729061634052, 37.637031446925, 260], [55.803342876099, 37.618196783226, 400], [55.780840877227, 37.722400051444, 250], [55.762697695701, 37.778155853992, 940], [55.916546364792, 37.759186348776, 940], [55.757070679828, 37.660871867922, 430], [55.758343979318, 37.598082733261, 4000], [55.727036064541, 37.650945751568, 1000], [55.657393033602, 37.731328178144, 200], [55.727062901951, 37.651704058359, 500], [55.753286712572, 37.586421918693, 1500], [55.764667676084, 37.55816354368, 400], [55.764667676084, 37.55816354368, 400], [55.781067207789, 37.626501889824, 500], [55.768260681526, 37.679253437652, 600], [55.767648618591, 37.679394160674, 600], [55.755578905063, 37.664499139317, 1000], [55.736434326788, 37.596385017388, 1000], [55.72658508883, 37.646913757539, 500], [55.762079517358, 37.626038059878, 1000], [55.708714114812, 37.622081072261, 250], [55.708714114812, 37.622081072261, 260], [55.750163312679, 37.18781341543, 550], [55.762798153313, 37.660965470984, 1500], [55.708113199402, 37.625497073994, 250], [55.787480383463, 37.61189922661, 700], [55.761072142815, 37.662588236338, 350], [55.708000547705, 37.655124726276, 270], [55.764770452144, 37.640170010447, 200], [55.414880148191, 37.902941276023, 640], [55.691757584657, 37.529735958373, 640], [55.681880839956, 37.290584472304, 280], [55.705267622255, 37.647888960119, 600], [55.717034371768, 37.594908033337, 500], [55.7525684172295, 37.5971779566042, 870], [55.767758698596, 37.598190858009, 550], [55.748784444823, 37.588490268375, 500], [55.62039161611, 37.669432546412, 155], [55.812252069906, 37.722698552568, 400], [55.773209381042, 37.621452235157, 320], [55.757222829684, 37.628308058838, 1000], [55.766873812623, 37.600871498083, 2000], [55.715248137152, 37.817296699035, 200], [55.655963592441, 37.828663260036, 155], [55.656575118246, 37.830068985012, 500], [55.830038135923, 37.812086268339, 600], [55.845547451118, 37.66106710805, 640], [55.582238975972, 37.706926079001, 280], [55.762323806282, 37.644669805088, 900], [55.782502017569, 37.573824546525, 1000], [55.772939039576, 37.610722258193, 1000], [55.845547451118, 37.66106710805, 380], [55.823284333356, 37.497703115267, 310], [55.736005674088, 37.595268132557, 300], [55.743121865542, 37.507063106199, 380], [55.760964629175, 37.624354276517, 250], [55.743230081023, 37.590516568744, 1000], [55.74727142435, 37.654893039954, 900], [55.747874802873, 37.65446202963, 1000], [55.748473466262, 37.648615648164, 400], [55.738003953427, 37.864356935246, 1000], [55.846181958018, 37.453304923257, 600], [55.90939512968, 37.540400571198, 350], [55.723945280653, 37.653898102848, 150], [55.504901661931, 37.559339512081, 700], [55.90939512968, 37.540400571198, 300], [55.891630860967, 37.748865263889, 200], [55.859023751085, 37.39515662787, 300], [55.657314259821, 37.845234057199, 250], [55.760749024838, 37.632151851033, 1500], [55.736839978315, 37.692149329989, 600], [55.773649308532, 37.57801133477, 600], [55.898606941829, 37.629384932193, 500], [55.898606941829, 37.629384932193, 300], [55.759017104904, 37.617233846369, 200], [55.806504512497, 37.587659488176, 580], [55.764295373272, 37.844969324677, 300], [55.881017715015, 37.450458802583, 500], [55.660845386752, 37.776025961213, 240], [55.882744154986, 37.729779247553, 400], [55.881017715015, 37.450458802583, 400], [55.653812483275, 37.844300890172, 260], [55.855202610184, 37.478390976664, 200], [55.855202610184, 37.478390976664, 240], [55.862718993221, 37.435034387733, 550], [55.862718993221, 37.435034387733, 450], [55.690042634963, 37.614611650042, 1000], [55.849076459798, 37.653244544513, 650], [55.708051859799, 37.657301033806, 200], [55.765192722344, 37.638936769944, 1500], [55.78197454795, 37.704461943222, 320], [55.785539799645, 37.665350801423, 200], [55.785539799645, 37.665350801423, 300], [55.621931185121, 37.783203957712, 400], [55.689401931032, 37.601708984023, 280], [55.757454052624, 37.634513679065, 1000], [55.643754721005, 37.526395669448, 450], [55.760823196398, 37.615386539993, 1500], [55.689401931032, 37.601708984023, 300], [55.689401931032, 37.601708984023, 260], [55.758481373819, 37.74104100438, 200], [55.689401931032, 37.601708984023, 240], [55.689401931032, 37.601708984023, 310], [55.689401931032, 37.601708984023, 250], [55.659491527892, 37.749604419041, 280], [55.977345581981, 37.148429145611, 450], [55.659491527892, 37.749604419041, 700], [55.743121865542, 37.507063106199, 540], [55.743121865542, 37.507063106199, 155], [55.920258252385, 37.366435607402, 800], [55.794403456615, 37.592054659366, 1250], [55.716353541063, 37.813247149393, 200], [55.71548202787, 37.815840100863, 300], [55.715248137152, 37.817296699035, 250], [55.741178026686, 37.502752066898, 155], [55.741178026686, 37.502752066898, 250], [55.741178026686, 37.502752066898, 220], [55.621931185121, 37.783203957712, 230], [55.764262078647, 37.653274468157, 800], [55.64014322193, 37.621916300111, 500], [55.64014322193, 37.621916300111, 500], [55.673450082462, 37.780681297176, 200], [55.64014322193, 37.621916300111, 260], [55.66458802383, 37.634781438517, 200], [55.679826047267, 37.565413237652, 500], [55.669789264547, 37.552200036195, 200], [55.743358476554, 37.629499751872, 1000], [55.740288075393, 37.621461787129, 600], [55.826151748246, 37.436071871773, 1000], [55.669789264547, 37.552200036195, 600], [55.869371014272, 37.662628265811, 500], [55.451996870038, 37.763467231162, 260], [55.793405473446, 37.4925115247, 230], [55.640547301745, 37.604430523267, 400], [55.574884876927, 37.580108413838, 1250], [55.737504842133, 37.629573980418, 300], [55.636916136214, 37.598296642963, 350], [55.747471451943, 37.706847364924, 450], [55.744428405237, 37.629848403627, 350], [55.744428405237, 37.629848403627, 400], [55.744428405237, 37.629848403627, 1000], [55.745487175068, 37.627031645714, 440], [55.774174707156, 37.617893528785, 600], [55.620298948843, 37.670881412899, 300], [55.732547527002, 37.623975536599, 500], [55.870341917151, 37.638015877361, 260], [55.80675037016, 37.524266112561, 1000], [55.782470760266, 37.615710216464, 155], [55.643668558942, 37.524737134353, 1000], [55.713086575941, 37.560463945904, 530], [55.720994031257, 37.401880943227, 500], [55.640929309698, 37.530805723969, 280], [55.807725354201, 37.504898878686, 680], [55.863110400948, 37.601964531137, 400], [55.863110400948, 37.601964531137, 300], [55.740961920922, 37.415484818858, 350], [55.822943527422, 37.525037727572, 600], [55.851462600831, 37.440800421599, 300], [55.863413064098, 37.68368040655, 200], [55.653622718299, 37.620706456922, 400], [55.653622718299, 37.620706456922, 300], [55.818327020072, 37.52987350238, 450], [55.603155123756, 37.599083945469, 900], [55.896043426847, 37.619766299278, 700], [55.901636651264, 37.610882996887, 200], [55.850694274202, 37.42541075281, 1000], [55.867234033497, 37.704183860692, 260], [55.743189822057, 37.85980353473, 1000], [55.60555879432, 37.287292826562, 550], [55.79244476363, 37.635600309759, 200], [55.729755823778, 37.732120239726, 200], [55.850485649969, 37.445292589026, 250], [55.739439430039, 37.527714362391, 220], [55.860505294369, 37.483285458853, 330], [55.818435434232, 37.447468350847, 400], [55.698561416057, 37.458106542591, 600], [55.689894195182, 37.852169701422, 1250], [55.976873366526, 37.148024898807, 700], [55.610322326369, 37.292182682084, 550], [55.60555879432, 37.287292826562, 750], [55.668991504632, 37.86549744202, 240], [55.747149501015, 37.420430002869, 350], [55.609107106028, 37.289783677713, 450], [55.604948392581, 37.292899154123, 450], [55.888723043668, 37.643171721107, 450], [55.842667858822, 37.379322399357, 1400], [55.853383456044, 37.351748811482, 1000], [55.683812371354, 37.899444762915, 500], [55.777687697662, 37.633535127159, 300], [55.636873765446, 37.352792659233, 200], [55.699090939543, 37.865141067016, 500], [55.636873765446, 37.352792659233, 400], [55.606422879404, 37.188507710225, 700], [55.634851869521, 37.849917577895, 1000], [55.63190330501, 37.847835880407, 800], [55.830461027391, 37.617351741245, 700], [55.728318400314, 37.610388978717, 260], [55.709380486192, 37.598019076749, 660], [55.830104073962, 37.353178162122, 400], [55.630684372472, 37.624910389394, 450], [55.696129574382, 37.558235193872, 300], [55.722320571622, 37.653857671909, 480], [55.966667740795, 37.415818949959, 300], [55.963460131204, 37.405384739265, 260], [55.966667740795, 37.415818949959, 260], [55.963460131204, 37.405384739265, 1620], [55.798842861287, 37.967221033957, 800], [55.774174707156, 37.617893528785, 1000], [55.963460131204, 37.405384739265, 155], [55.983993163587, 37.142403306335, 300], [55.980682101021, 37.410382084459, 300], [55.981321060905, 37.414962775466, 400], [55.980682101021, 37.410382084459, 500], [55.53421315579, 37.529832901552, 700], [55.758877768901, 37.708917886962, 1000], [55.817913897421, 37.311115352842, 700], [55.793752729057, 37.603935508657, 260], [55.692264482274, 37.561979702932, 680], [55.691926704532, 37.561490637816, 1250], [55.870626226816, 37.640982297148, 1250], [55.71171455561, 37.738094169692, 300], [55.99560706431, 37.19090399938, 600], [55.803342876099, 37.618196783226, 300], [55.803342876099, 37.618196783226, 900], [55.720418321874, 37.822146778723, 600], [55.80555320468, 37.584484288052, 700], [55.70081281838, 37.622323148633, 230], [55.69586126909, 37.66492576254, 280], [55.69586126909, 37.66492576254, 280], [55.812322203782, 37.595349335578, 600], [55.764291345324, 37.590499048565, 1000], [55.80940731273, 37.628481262589, 250], [55.679132026643, 37.888862964084, 1000], [55.921058900714, 37.997608043169, 155], [55.7518543555398, 37.6455805139865, 800], [55.793159932465, 37.592889559691, 500], [55.762711741798, 37.644060582637, 800], [55.706513031706, 37.688692358723, 650], [55.722896534329, 37.515762906241, 900], [55.771723412057, 37.515999229815, 450], [55.683315623078, 37.600406694008, 550], [55.690013505172, 37.676343012162, 200], [55.795961598393, 37.968155451092, 200], [55.825673565863, 37.966541219042, 450], [55.820023190967, 37.971993489408, 600], [55.794651040826, 37.971461050581, 300], [55.799683930333, 37.93770661899, 155], [55.850984575599, 37.597454450948, 200], [55.740654226808, 37.671866526213, 800], [55.744626819867, 37.565387422269, 450], [55.975466526901, 37.490376411311, 350], [55.692363010218, 37.729277268902, 220], [55.901278913436, 37.94853532579, 600], [55.902386877523, 37.716342854695, 200], [55.900382183097, 37.710329312977, 300], [55.954257942499, 37.51154764472, 300], [55.806795831946, 37.517742706523, 1350], [55.567270920872, 37.599718633951, 230], [55.666827358713, 37.458223836361, 280], [55.608263669127, 37.621941652928, 230], [55.70270542932, 37.506439729414, 400], [55.795851783802, 37.962611751236, 300], [55.895702533757, 37.716836096202, 500], [55.647787788652, 37.528454567188, 1000], [55.773289165803, 37.48489844842, 200], [55.675507815578, 37.505467105434, 230], [55.742247637801, 37.655218005737, 700], [55.76092998167, 37.622881449579, 280], [55.736098136693, 36.857045434801, 155], [55.758422547359, 37.692608246303, 180], [55.914871809376, 37.76264770933, 650], [55.919423198922, 37.745376370175, 600], [55.917856139572, 37.746575249332, 550], [55.91540237663, 37.760721485289, 450], [55.91320391053, 37.771143423269, 550], [55.729628682086, 36.857407448901, 350], [55.689953616991, 37.472960469806, 230], [55.963290172537, 37.808333961439, 680], [55.757996634899, 37.698130136196, 600], [55.647163005448, 37.737375845166, 350], [55.652956300164, 37.719411084354, 700], [55.769386897736, 37.692979164626, 350], [55.816997817626, 37.646707556851, 350], [55.578513258134, 37.910151514423, 1000], [55.917921627618, 38.007254512816, 800], [55.686644027013, 37.30592672329, 720], [55.681880839956, 37.290584472304, 1000], [55.153361369556, 37.45936476301, 260], [55.153361369556, 37.45936476301, 260], [55.693313137818, 37.726399425287, 200], [55.153361369556, 37.45936476301, 280], [55.687047516174, 37.571935332727, 800], [55.680840233179, 37.717840366614, 500], [55.676814509749, 37.720072514957, 750], [55.748986123346, 37.607369597852, 630], [55.679176491649, 37.687716967113, 540], [55.685311345604, 37.692477180548, 200], [55.747508158695, 37.681543229108, 900], [55.677638573734, 37.574419284597, 1000], [55.686294425524, 37.294315577953, 500], [55.752877592095, 37.717512454111, 450], [55.766873812623, 37.600871498083, 500], [55.747337412323, 37.58352683396, 500], [55.757529755478, 37.60048147469, 1000], [55.74121102691, 37.614277929719, 600], [55.730069640767, 37.624729156494, 1900], [55.91044450622, 36.866186871098, 500], [55.660784481418, 37.480312681059, 320], [55.668941099432, 37.741447687555, 500], [55.649850194435, 37.658294536338, 680], [55.804719309054, 37.424826342349, 400], [55.820790947227, 37.652788841525, 1000], [55.432785308289, 37.550080644446, 1090], [55.147826192456, 37.487276973577, 220], [55.543445661932, 37.720867757057, 500], [55.781294098416, 37.600432569555, 750], [55.438438711237, 37.751375653142, 620], [55.862452026715, 37.121473233238, 900], [55.766595779579, 37.652059910203, 400], [55.72374347017, 37.377825157032, 250], [55.375563343311, 37.539650599158, 500], [55.726873139525, 37.57967011542, 260], [55.419879655364, 37.573965752005, 500], [55.664040109065, 37.70094733867, 200], [55.595387487406, 37.339952725302, 500], [55.596713170925, 37.343256730118, 1000], [55.659892632973, 37.735951116131, 600], [55.578907473728, 37.237455726278, 155], [55.683817552709, 37.895369022237, 250], [55.585271705518, 37.724892853133, 280], [55.811593775972, 37.652571199927, 450], [55.811593775972, 37.652571199927, 450], [55.711731370175, 37.372061695802, 800], [55.757214738774, 37.618145254607, 400], [55.794834941818, 37.711206743581, 280], [55.980753111065, 37.249369911846, 200], [55.791900126209, 37.711386282968, 400], [55.790409688173, 37.71087998303, 200], [55.779100986355, 37.721656247678, 400], [55.933176126506, 37.979788725958, 700], [55.636916136214, 37.598296642963, 400], [55.836932427487, 37.638447131028, 450], [55.828678272654, 37.633694402371, 150], [55.764770452144, 37.640170010447, 1000], [55.828549229326, 37.630518381206, 600], [55.818799274126, 37.576869233781, 155], [55.832292916043, 37.62509805664, 250], [55.836820639974, 37.628464255431, 1000], [55.546155995992, 37.064685936152, 1500], [55.805554241822, 37.801413680379, 200], [55.55348468977, 37.078995405432, 500], [55.760169157928, 37.651432983216, 700], [55.763838306886, 37.606159302744, 630], [55.754588818818, 37.634799273763, 1020], [55.919494811717, 37.724006432014, 1750], [55.79580265345, 37.512867833058, 600], [55.703958062759, 37.734620223386, 300], [55.929284801122, 37.993065369978, 300], [55.910068680362, 38.0089048708, 250], [55.709794723456, 37.657093391611, 260], [55.606708000971, 37.536719795871, 260], [55.729670310747, 37.610771237162, 260], [55.747086035162, 37.60759708519, 800], [55.748607434274, 37.588043064768, 300], [55.781720589538, 37.71956467486, 600], [55.739559268052, 37.507350459355, 200], [55.74725882215, 38.006067955751, 450], [55.855542975132, 37.495753804057, 500], [55.790276236475, 37.544519055553, 350], [55.790276236475, 37.544519055553, 500], [55.790276236475, 37.544519055553, 300], [55.809498052431, 37.83123041226, 150], [55.734219193633, 37.41939798273, 540], [55.809498052431, 37.83123041226, 300], [55.782034189337, 37.593541742964, 750], [55.858187941968, 37.592713953423, 1800], [55.758081765531, 37.554720807883, 900], [55.746922031329, 37.679505282834, 1000], [55.681786030842, 37.928744683075, 1000], [55.164497561618, 37.468423949582, 1500], [55.789488508326, 37.753827910353, 500], [55.745997326632, 38.023735836206, 350], [55.695931785697, 37.335721765155, 800], [55.749974341867, 38.009886977928, 400], [55.748290550058, 38.0334838466, 400], [55.743575335812, 38.024397168848, 900], [55.748290550058, 38.0334838466, 700], [55.7661940899582, 37.6151033242638, 1000], [55.753773076247, 38.084332606786, 500], [55.862969162378, 37.585436561315, 290], [55.781961792897, 37.706595908587, 290], [55.638413033449, 37.351648925286, 290], [55.804397925608, 37.582135800769, 290], [55.683138803805, 37.549236332918, 290], [55.583954337084, 37.599278309272, 290], [55.548572457166, 37.542419438242, 290], [55.727061913735, 37.679741325817, 290], [55.824903123548, 37.436407252143, 310], [56.014316389375, 37.205394210621, 310], [55.864443283801, 37.548069646828, 290], [55.566408261479, 37.573021276811, 290], [55.66576076324, 37.628761608084, 290], [55.667530166701, 37.658514297783, 290], [55.622230428484, 37.613275921398, 310], [55.865592495176, 37.46222451979, 310], [55.662145020923, 37.508711262536, 310], [55.700143551074, 37.855631257536, 310], [55.898229919658, 37.588464850878, 310], [55.649704518372, 37.744621167289, 310], [55.775063779324, 37.479060757281, 310], [55.80713578363, 37.409329486817, 310], [55.703752094311, 37.458982729513, 310], [55.822910849094, 37.588560811176, 310], [55.827535601652, 37.642427963005, 310], [55.847685494438, 37.361116027329, 310], [55.716672930537, 37.409255279024, 310], [55.664192839186, 37.481105080583, 310], [55.718006739925, 37.78524257825, 310], [55.777307963587, 37.52081996953, 310], [55.750213382256, 37.817291167553, 310], [55.822506742055, 37.823235768643, 310], [55.851503890709, 37.676193005816, 310], [55.802757516663, 37.755688868964, 310], [55.77582926831, 37.835708282522, 310], [55.750120836929, 37.887474150509, 290], [55.793713092187, 37.936610851543, 290], [55.668171659505, 37.871106355448, 290], [55.473769572047, 37.311201899249, 310], [55.819068691218, 37.361139272178, 310], [55.829213399418, 37.305917868798, 290], [55.632715776761, 37.211286579913, 290], [56.008367939483, 37.440043601097, 290], [55.680743473983, 37.887858734496, 290], [55.659235802416, 37.917209754861, 290], [55.922436318225, 37.715117857887, 310], [55.911421122869, 37.778170285819, 310], [55.435194797779, 37.549856383349, 310], [55.995247407149, 37.867323277489, 310], [55.74615241283, 37.862732516443, 310], [55.904979092915, 37.416761425803, 310], [55.924584774691, 37.998848860812, 310], [55.880320033877, 37.489866697676, 500], [55.591691301256, 37.755018757202, 500], [55.794278157977, 37.751879393693, 300], [55.794278157977, 37.751879393693, 200], [55.789159979338, 37.748281590698, 300], [55.756577102596, 37.632575642875, 750], [55.67080164514, 37.747451744724, 200], [55.757879688015, 37.606139190889, 1000], [55.681034145838, 37.760368601449, 600], [55.828866313977, 37.643091894892, 300], [55.828866313977, 37.643091894892, 100], [55.677567106987, 37.753403587485, 800], [55.455708534241, 37.759388664446, 600], [55.757950552426, 37.636841648364, 850], [55.716672118935, 37.508986393161, 400], [55.70129007649, 37.511106840912, 400], [55.8322154874, 37.629840763959, 600], [55.834002640406, 37.62948492068, 450], [55.725697289702, 37.667493316167, 770], [55.737031589465, 37.659371141372, 700], [55.730715744214, 37.667203723785, 260], [55.718618215516, 37.681123888796, 750], [55.718618215516, 37.681123888796, 490], [55.718618215516, 37.681123888796, 600], [55.718618215516, 37.681123888796, 560], [55.718618215516, 37.681123888796, 700], [55.633298649451, 37.766786535272, 800], [55.659491527892, 37.749604419041, 700], [55.7243628171, 37.62153939307, 800], [55.738159502118, 37.673266269196, 250], [55.708561035973, 37.656850338033, 700], [55.728143565235, 37.623577887922, 200], [55.708561035973, 37.656850338033, 350], [55.718618215516, 37.681123888796, 630], [55.718618215516, 37.681123888796, 370], [55.718618215516, 37.681123888796, 720], [55.718618215516, 37.681123888796, 420], [55.654142566977, 37.763608579844, 380], [55.718618215516, 37.681123888796, 300], [55.718618215516, 37.681123888796, 670], [55.718618215516, 37.681123888796, 740], [55.770688554277, 37.596700074065, 480], [55.764757404604, 37.571650266398, 1350], [55.743879142304, 37.578206843884, 1000], [55.739724009193, 37.667371848206, 530], [55.658250613727, 37.742409856383, 155], [55.744715796912, 37.678039629635, 150], [55.782200394, 37.580108627138, 230], [55.731977233561, 37.6431817341, 1200], [55.785503632796, 37.596052216386, 410], [55.757287041235, 37.53665893305, 250], [55.73345727482, 37.709164212789, 540], [55.790367081183, 37.613839357403, 700], [55.779930994401, 37.605993997859, 1000], [55.785992088049, 37.63452725408, 1000], [55.757218779194, 37.659133619148, 800], [55.789799647235, 37.634383358395, 900], [55.73709440566, 37.583754049647, 550], [55.792473672368, 37.605000170935, 220], [55.757218779194, 37.659133619148, 590], [55.707905014476, 37.656741381557, 200], [55.871627093029, 37.637202924129, 1250], [55.776912726061, 37.659396836779, 260], [55.777687697662, 37.633535127159, 1000], [55.565063267224, 37.556737951728, 500], [55.757070679828, 37.660871867922, 500], [55.730108379927, 37.599390274424, 500], [55.903821897216, 36.857846080962, 170], [55.913049341797, 36.824258291, 400], [55.916043086665, 36.833484458869, 500], [55.645684842994, 37.517971473428, 800], [55.757070679828, 37.660871867922, 500], [55.732960801081, 37.55290899063, 1000], [55.859225284906, 37.395591714489, 430], [55.913876124186, 36.864417122524, 150], [55.914071816369, 36.863181205025, 300], [55.955239649012, 38.052385956015, 60], [55.734751896361, 37.64228006419, 1500], [55.961266594827, 38.043816050618, 400], [55.578799965542, 37.902632024287, 350], [55.732196662313, 37.635654205906, 500], [55.675400287074, 37.777187983484, 1000], [55.918911541169, 37.862266115444, 1250], [55.962295473805, 37.916648643999, 400], [55.964861637276, 37.915071666007, 150], [55.755048911704, 37.647206864003, 800], [55.962000710398, 37.908679761139, 400], [55.759507482376, 37.645706807148, 500], [55.859908509392, 37.467747327174, 650], [55.765864120802, 37.604792738671, 1200], [55.765864120802, 37.604792738671, 1630], [55.755339718384, 37.60898241992, 1500], [55.758118667766, 37.637038650601, 1000], [56.013971165509, 37.844119843125, 800], [55.731904727057, 37.624600454096, 600], [55.769692374677, 37.620749672423, 2000], [55.750201417588, 37.59477846838, 300], [55.755774841204, 37.614638938872, 240], [55.566791302472, 37.569793608766, 1000], [55.756679497615, 37.605780262485, 390], [55.753277344657, 37.606402767302, 120], [55.797273660266, 37.799698165609, 540], [55.767543452358, 37.601359508929, 1920], [55.677873618069, 37.507188499027, 200], [55.748308171042, 37.586895435951, 820], [55.757075094801, 37.599223527766, 1500], [55.643668558942, 37.524737134353, 240], [55.6558065843015, 37.5256601649313, 180], [55.760549206893, 37.614611141205, 1000], [55.680320408344, 37.53268090451, 330], [55.663691225211, 37.463965582665, 1000], [55.663691225211, 37.463965582665, 600], [55.856256294005, 37.65328998643, 800], [55.766797185559, 37.596586112304, 1000], [56.018931438428, 37.471818386108, 600], [55.914071816369, 36.863181205025, 1000], [55.751439152598, 37.595876324227, 200], [55.672024458855, 37.543600545667, 830], [55.750751824391, 37.595443412235, 350], [55.893916748553, 37.390320237307, 830], [55.737941508595, 37.634305053958, 800], [55.653812483275, 37.844300890172, 300], [55.739250978495, 37.633318423733, 280], [55.604659717756, 37.488789304422, 330], [55.856256294005, 37.65328998643, 260], [55.669789264547, 37.552200036195, 300], [55.669789264547, 37.552200036195, 250], [55.913397651127, 36.864848131021, 400], [55.633721089794, 37.518735318727, 1000], [55.631559272387, 37.51806504372, 500], [55.630454713453, 37.516977815624, 300], [55.619503294373, 37.509386127877, 260], [55.619503294373, 37.509386127877, 240], [55.618400908003, 37.510495717581, 600], [55.889838715049, 37.47858106729, 700], [55.997554244778, 37.227627114176, 1000], [55.805758092947, 37.581528862418, 800], [55.784850210641, 37.595427942141, 500], [55.612256709537, 37.536971362726, 350], [55.761117385053, 37.614554059401, 1500], [55.88982053857, 37.539316268799, 500], [55.886362281898, 37.524598331495, 350], [55.861565538715, 37.567137347072, 300], [55.879198246805, 37.57945261294, 700], [55.898628992759, 37.539204216138, 1250], [55.801706787464, 37.742966739703, 500], [55.823284333356, 37.497703115267, 280], [55.901831185487, 37.548441590617, 820], [55.758773786055, 37.654327385272, 1000], [55.75690101945, 37.598087809656, 520], [55.916546364792, 37.759186348776, 310], [55.728381920193, 37.608427098373, 310], [55.84351923097, 37.579727537527, 300], [55.800807677575, 37.595079217226, 270], [55.59954756618, 37.718089580769, 160], [55.683065629678, 37.680989273979, 190], [55.431974640257, 37.548688725197, 250], [55.870398475422, 37.676151979168, 500], [55.705850079031, 37.827918326738, 300], [55.870518719261, 37.676737947317, 500], [55.767100512546, 37.588194142857, 1500], [55.871976640513, 37.67181827427, 500], [55.691023012534, 37.906515164456, 550], [55.691023012534, 37.906515164456, 400], [55.869716798201, 37.676946131784, 500], [55.770476156844, 37.581173819924, 900], [55.583083399673, 37.662875767341, 600], [55.709777785755, 37.478232457206, 1000], [55.823284333356, 37.497703115267, 280], [55.758843130677, 37.640737734886, 230], [55.963654726041, 37.41507067194, 280], [55.706248220392, 37.765442962958, 280], [55.881017715015, 37.450458802583, 250], [55.705565751035, 37.689698698828, 280], [55.745109771106, 37.515868833429, 280], [55.653622718299, 37.620706456922, 230], [55.743931658477, 37.819640984341, 600], [55.653112600317, 37.822423257468, 500], [55.855202610184, 37.478390976664, 230], [55.681427414118, 37.624898384405, 280], [55.747355645627, 37.679901195341, 200], [55.794508140927, 37.587267607043, 280], [55.751087761825, 37.816054287414, 280], [55.769154599563, 37.583687553398, 280], [55.744821963359, 37.636703481848, 230], [55.565063267224, 37.556737951728, 230], [55.815445872832, 37.738070072691, 280], [55.762231603534, 37.682930254234, 280], [55.747471451943, 37.706847364924, 230], [55.593633178787, 37.242670838582, 280], [55.783702976415, 37.624285856824, 1500], [55.728570381989, 37.644627654756, 640], [55.772216381812, 37.647887942335, 640], [55.659115038945, 37.879794614863, 280], [55.427623061465, 37.755698452314, 700], [55.665894364208, 37.558209269596, 800], [55.866431932344, 37.592903254731, 600], [55.835046838514, 37.535208601977, 630], [55.879709087832, 37.557321598978, 650], [55.815173860955, 37.499239432495, 750], [55.754525136764, 37.569626711619, 1250], [55.889033009574, 37.594167836276, 700], [55.850984575599, 37.597454450948, 320], [55.876189353952, 37.589135542079, 650], [55.670115454043, 37.553905890365, 500], [55.748119689657, 37.766694084179, 250], [55.852795867392, 37.585806826996, 240], [55.767113398169, 37.607891949702, 1000], [55.681952214595, 37.847220092196, 1000], [56.008860260673, 37.199986030561, 260], [56.008860260673, 37.199986030561, 240], [56.008860260673, 37.199986030561, 800], [55.604659717756, 37.488789304422, 1000], [55.732049512357, 37.647090538931, 1000], [55.881017715015, 37.450458802583, 800], [55.612223538128, 37.718272535552, 290], [55.90939512968, 37.540400571198, 1000], [55.90939512968, 37.540400571198, 310], [55.881371031544, 37.7119314089, 400], [55.88808433141, 37.662537478276, 820], [55.753274458415, 37.857921563488, 1000], [55.856256294005, 37.65328998643, 250], [55.855202610184, 37.478390976664, 400], [55.82002734513, 37.465646913831, 500], [55.673006541475, 37.451270464581, 1000], [55.75493004172, 37.843127960847, 240], [55.748647987422, 37.657305296299, 1500], [55.860505294369, 37.483285458853, 500], [55.859908509392, 37.467747327174, 1000], [55.849967253439, 37.452001547301, 450], [55.794283522629, 37.665410658158, 800], [55.795664408983, 37.562236490378, 250], [55.866637086455, 37.706703397644, 240], [55.88779181345, 37.401307861813, 800], [55.797641840103, 37.939114597037, 320], [55.652098588869, 37.499224651082, 300], [55.622606755434, 37.605940442688, 300], [55.689401931032, 37.601708984023, 300], [55.618623934709, 37.507234271998, 300], [55.766656004917, 37.602708226975, 350], [55.764097104292, 37.615460096641, 600], [55.748780150412, 37.538669150608, 350], [55.74921871948, 37.540006244891, 200], [55.791362725989, 37.483053685305, 1000], [55.806959079784, 37.502593979901, 400], [55.784020908645, 37.470976121864, 230], [55.804372399889, 37.495860528102, 200], [55.803924145734, 37.582258325294, 300], [55.802845649489, 37.58380523113, 300], [55.802845649489, 37.58380523113, 400], [55.730358560152, 37.645524052789, 250], [55.724453040899, 37.646345818254, 250], [55.675926760058, 37.625105680619, 220], [55.68308116812, 37.536989505459, 155], [55.817078322003, 37.522497810124, 400], [55.958462308699, 38.052704455575, 500], [55.761568389824, 37.658246280325, 400], [55.796570458467, 37.599266685076, 400], [55.742179266693, 37.501629207713, 400], [55.610407177799, 37.71864676468, 400], [55.612628778523, 37.720152956239, 350], [55.644563578114, 37.654516619299, 500], [55.837967444134, 37.453808107366, 350], [55.827265924547, 37.445709592479, 300], [55.759045946292, 37.580816130841, 530], [55.792642711367, 37.590832743493, 300], [55.806538897265, 37.50413872608, 450], [55.649376918936, 37.744361489443, 530], [55.826696559345, 37.445291194739, 350], [55.818976143258, 37.51854615794, 700], [56.027274112326, 37.468331149117, 500], [55.614284930879, 37.743389008296, 155], [56.011984460707, 37.463055358094, 500], [55.745327053367, 37.856207666444, 1000], [55.862718993221, 37.435034387733, 260], [55.612081708568, 37.732833225154, 250], [55.812258716757, 37.588305820992, 350], [55.793869970526, 37.593564518961, 300], [55.8072627912, 37.588772751701, 350], [55.759803169696, 37.646334509936, 600], [55.875419072404, 37.333028718546, 600], [55.749895924563, 37.704519216807, 340], [55.759324908875, 37.752462232949, 230], [55.777932322397, 37.555685479113, 330], [55.84641768535, 37.655531395293, 560], [55.621931185121, 37.783203957712, 310], [55.847406003771, 37.658522657442, 500], [55.744564606341, 37.565535153144, 2570], [55.684427563615, 37.450952195709, 200], [55.684427563615, 37.450952195709, 300], [55.785026539247, 37.556960963969, 400], [55.77946653982, 37.547204283264, 400], [55.774082353601, 37.544088307507, 400], [55.759880945983, 37.752902817666, 300], [55.790756330567, 37.958926010199, 200], [55.694087292001, 37.531647808096, 820], [55.686046778736, 37.302675075125, 1000], [55.58215866813, 37.912458708418, 250], [55.58215866813, 37.912458708418, 260], [55.58215866813, 37.912458708418, 400], [55.58215866813, 37.912458708418, 870], [55.679974897508, 37.625335032798, 300], [55.764217867844, 37.61846958934, 400], [55.850485649969, 37.445292589026, 260], [55.743748411371, 37.628381951324, 250], [55.850485649969, 37.445292589026, 220], [55.850485649969, 37.445292589026, 300], [55.850485649969, 37.445292589026, 260], [55.850485649969, 37.445292589026, 350], [55.739720906619, 37.618665583849, 1000], [55.850485649969, 37.445292589026, 820], [55.850485649969, 37.445292589026, 950], [55.741789294471, 37.525489530308, 500], [55.850485649969, 37.445292589026, 1000], [55.748175795991, 37.543985114489, 400], [55.451996870038, 37.763467231162, 820], [55.725167562822, 37.578484476247, 1500], [55.451996870038, 37.763467231162, 350], [55.451996870038, 37.763467231162, 1000], [55.451996870038, 37.763467231162, 260], [55.607878603956, 37.42543058229, 500], [55.785318066239, 37.631249421912, 200], [55.846170470246, 37.357888880037, 260], [55.725168151448, 37.563465158945, 300], [55.77312783644, 37.600882277697, 600], [55.897540163431, 37.751317282666, 400], [55.773765746924, 37.59928636084, 200], [55.415759307162, 37.607656189792, 250], [55.415759307162, 37.607656189792, 200], [55.776998884207, 37.585339918052, 1000], [55.731987529579, 37.562326370978, 1900], [55.777224781004, 37.58614281069, 480], [55.732295254632, 37.564665236399, 300400], [55.698577022167, 37.850158616366, 820], [55.726670333592, 37.586542737462, 1500], [55.753108860751, 37.588977514969, 1090], [55.706926865011, 37.592152658726, 260], [55.837738797758, 37.480584331401, 400], [55.766253171977, 37.626278913763, 500], [55.774288595037, 37.674353341519, 320], [55.777902563442, 37.674570578232, 350], [55.925824768154, 37.817336612509, 500], [55.756244362357, 37.664964975364, 1000], [55.618623934709, 37.507234271998, 260], [55.659491527892, 37.749604419041, 260], [55.665074467241, 37.48158795609, 260], [55.760137583878, 37.584538920718, 260], [55.7267427047, 37.611323446575, 1250], [55.711458025176, 37.655872468953, 300], [55.728971931466, 38.028327920573, 500], [55.780770840735, 37.590335640001, 300], [55.742172912029, 37.975087700422, 500], [55.661665306256, 37.45263647377, 200], [55.783533231582, 37.721340170563, 350], [55.764741561553, 37.656071941813, 1250], [55.726651876721, 37.578161593954, 155], [55.758683910749, 37.659102625878, 150], [55.807375007459, 37.756802411098, 200], [55.807375007459, 37.756802411098, 200], [55.774113493174, 37.654910373055, 250], [55.774113493174, 37.654910373055, 400], [55.774113493174, 37.654910373055, 155], [55.774113493174, 37.654910373055, 350], [55.774113493174, 37.654910373055, 400], [55.774113493174, 37.654910373055, 400], [55.774113493174, 37.654910373055, 250], [55.767108050588, 37.657714254946, 400], [55.786623161872, 37.584198673065, 250], [55.738160701149, 37.678923042094, 1630], [55.792321548263, 37.601410266438, 500], [55.739724009193, 37.667371848206, 800], [55.772595706608, 37.67830160907, 1000], [55.713790986121, 37.757617353014, 1000], [55.770138552849, 37.686131916521, 700], [55.512357999158, 37.563424501442, 1000], [55.897702694186, 37.400965809506, 750], [55.770138552849, 37.686131916521, 250], [55.769540110519, 37.597353627979, 500], [55.776813497468, 37.649330953511, 350], [55.796451900069, 37.600637224176, 450], [55.608318110609, 38.090034815365, 250], [55.781623483079, 37.697015981889, 500], [55.780989817441, 37.633022191895, 155], [55.769516103495, 37.679425868006, 155], [55.769516103495, 37.679425868006, 200], [55.727374037218, 37.61259977421, 155], [55.720595879302, 37.61032969355, 700], [55.760081782631, 37.581421888604, 200], [55.774529139078, 37.580409890024, 200], [55.721262573816, 37.621726307026, 350], [55.774878371284, 37.581423934123, 150], [55.609974069375, 37.603543188871, 600], [55.76124150426, 37.683777072462, 250], [55.609974069375, 37.603543188871, 350], [55.609974069375, 37.603543188871, 600], [55.749455970574, 37.536879473823, 140], [55.791924251878, 37.603092563654, 300], [55.772216381812, 37.647887942335, 140], [55.746271604333, 37.546149768019, 150], [55.763358500503, 37.551320520453, 150], [55.699766690067, 37.623987477951, 150], [55.751897620839, 37.532588210911, 150], [55.722082449129, 37.651474937714, 140], [55.669789264547, 37.552200036195, 150], [55.775675887908, 37.584798098563, 600], [55.721945260777, 37.632814172339, 1000], [55.7243628171, 37.62153939307, 300], [55.794014880239, 37.495126152377, 1090], [55.720596780743, 37.632394645731, 300], [55.730358560152, 37.645524052789, 820], [55.705634444116, 37.611711751926, 250], [55.763023862447, 37.596697596541, 500], [55.764942376338, 37.632065912836, 1750], [55.794355911, 37.588159202283, 240], [55.770048977123, 37.584551015679, 200], [55.797390159361, 37.720514903925, 250], [55.767811516391, 37.738287162982, 250], [55.729484869367, 37.644696930368, 250], [55.794722220375, 37.713133673097, 480], [55.712116349378, 37.896429220249, 250], [55.73218465933, 37.680081855303, 700], [55.604466866594, 38.081169269331, 450], [55.685348646798, 37.673471372949, 1000], [55.733924211589, 37.663186565054, 180], [55.813789295272, 37.345845328744, 180], [55.719815736955, 37.648105457336, 600], [55.850485649969, 37.445292589026, 400], [55.850485649969, 37.445292589026, 550], [55.69871374278, 37.580255900273, 400], [55.601685185822, 38.115601924642, 1000], [55.726714033837, 37.450122921716, 200], [55.829028951017, 37.617316018847, 1000], [55.753932022284, 37.637593382543, 620], [55.721346106551, 37.733868615244, 710], [55.743121865542, 37.507063106199, 260], [55.60143891149, 37.479014438803, 200], [55.60143891149, 37.479014438803, 300], [55.74921871948, 37.540006244891, 300], [55.601758348205, 37.482797814467, 300], [55.743508742793, 37.505474871086, 500], [55.78610052622, 37.65796210722, 1000], [55.70081281838, 37.622323148633, 1100], [55.774514404695, 37.520613781467, 220], [55.726560800403, 37.607305266028, 450], [55.818974625447, 37.347260594916, 310], [55.705151965275, 37.588692164074, 200], [55.70493923325, 37.588901152513, 270], [55.818974625447, 37.347260594916, 260], [55.760549947998, 37.614613864099, 330], [55.761309508657, 37.614330655452, 400], [55.653812483275, 37.844300890172, 330], [55.761893153159, 37.624604718077, 1630], [55.759885908886, 37.647074939658, 1630], [55.730733384616, 37.628130183266, 570], [55.733758649151, 37.627296557622, 250], [55.730733384616, 37.628130183266, 1750], [55.733787233035, 37.627876386212, 750], [55.742157998642, 37.504094715255, 300], [55.742157998642, 37.504094715255, 400], [55.761413348926, 37.623787675258, 650], [55.742157998642, 37.504094715255, 155], [55.761879765483, 37.623268887996, 400], [55.76092998167, 37.622881449579, 450], [55.76092998167, 37.622881449579, 500], [55.764770452144, 37.640170010447, 820], [55.739708279854, 37.633576095301, 210], [55.744394954512, 37.649872565909, 450], [55.758729851921, 37.657203504171, 300], [55.755774841204, 37.614638938872, 500], [55.755774841204, 37.614638938872, 200], [55.770562352642, 37.620022952897, 260], [55.791584825291, 37.541433035095, 600], [55.771598041317, 37.632750009772, 200], [55.754681776367, 37.621529186085, 250], [55.729755823778, 37.732120239726, 600], [55.602699541508, 37.470098552412, 250], [55.754681776367, 37.621529186085, 1920], [55.714069847505, 37.718422186741, 500], [55.604659717756, 37.488789304422, 200], [55.604659717756, 37.488789304422, 600], [55.604659717756, 37.488789304422, 300], [55.604659717756, 37.488789304422, 250], [55.735431702794, 37.701599127011, 240], [55.729755823778, 37.732120239726, 700], [55.604659717756, 37.488789304422, 280], [55.90939512968, 37.540400571198, 300], [55.809498052431, 37.83123041226, 330], [55.809498052431, 37.83123041226, 180], [55.819313994767, 37.387350527868, 1500], [55.76607849585, 37.532574057922, 450], [55.76607849585, 37.532574057922, 400], [55.758136419075, 37.657147403599, 1500], [55.758729851921, 37.657203504171, 700], [55.848673680045, 37.590642632377, 800], [55.74233554254, 37.652898324682, 250], [55.737043072128, 37.594641065453, 210], [55.659059066666, 37.754425047486, 260], [55.88808433141, 37.662537478276, 400], [55.991379842205, 37.216038528927, 1000], [55.739708279854, 37.633576095301, 500], [55.740387893501, 37.609395547864, 1000], [55.841993841254, 37.677377827759, 750], [55.57830266146, 38.110552469054, 570], [55.809206088907, 37.126825074252, 600], [55.785019706783, 37.464210616547, 1500], [55.757218779194, 37.659133619148, 300], [55.811290084901, 37.128513205851, 250], [55.757218779194, 37.659133619148, 800], [55.901649290741, 37.58588637071, 300], [55.850485649969, 37.445292589026, 310], [55.757347846495, 37.622505314555, 350], [55.797641840103, 37.939114597037, 350], [55.70163368328, 37.731865292137, 720], [55.565063267224, 37.556737951728, 200], [55.765849770901, 37.602770219898, 820], [55.856758773873, 37.494838639351, 500], [55.722523433054, 37.561673768371, 1000], [55.837369011823, 37.636389809616, 400], [55.807789234938, 37.578367864454, 240], [55.750613866777, 37.653180087813, 300], [55.796228652104, 37.713512052336, 240], [55.802950097168, 37.773111096453, 270], [55.734508950496, 37.595467939714, 1250], [55.796820525924, 37.798946426867, 800], [55.803000946059, 37.778598219821, 500], [55.790212557145, 37.789741667087, 500], [55.818607021668, 37.647578706931, 200], [55.818682015359, 37.4481300282, 560], [55.82052241103, 37.648019680325, 600], [55.802382168392, 37.825832165808, 500], [55.820748810993, 37.642198714123, 450], [55.681871258225, 37.62274276643, 350], [55.758269666594, 37.700688982672, 700], [55.775986435224, 37.692044179138, 30], [55.774664554428, 37.687245824154, 200], [55.779565483396, 37.690723801507, 250], [55.780843602198, 37.689486156566, 300], [55.783949528608, 37.709889354538, 600], [55.778861327481, 37.67634152128, 200], [55.792641412347, 37.752150893819, 150], [55.792271129268, 37.752047734992, 500], [55.793869970526, 37.593564518961, 500], [55.78837068235, 37.662793153251, 90], [55.727481128826, 37.62148126863, 1900], [55.79190315935, 37.68128995252, 1250], [55.767320951152, 37.606771142864, 440], [55.963654726041, 37.41507067194, 330], [55.747550639477, 37.539572899774, 440], [55.789999429602, 37.680827477937, 400], [55.439883353296, 37.570688030922, 230], [55.794207310756, 37.674455957195, 500], [55.758481373819, 37.74104100438, 450], [55.802418017737, 37.74397668627, 450], [55.78197454795, 37.704461943222, 260], [55.79552599627, 37.678293086127, 300], [55.795454618903, 37.669317768366, 200], [55.782890489435, 37.728030515369, 500], [55.782648375224, 37.72341566127, 820], [55.622606755434, 37.605940442688, 280], [55.852795867392, 37.585806826996, 200], [55.796243756223, 37.719551853916, 200], [55.764295373272, 37.844969324677, 200], [55.656254780847, 37.744666492629, 300], [55.803445148279, 37.647799039668, 270], [55.772629438819, 37.712758552426, 300], [55.802418017737, 37.74397668627, 155], [55.785452148986, 37.71948676962, 500], [55.787716297398, 37.72970090693, 450], [55.721907458389, 37.638601501647, 450], [55.787876973753, 37.732661867452, 900], [55.779126806818, 37.628626070308, 540], [55.775680139623, 37.6845113773, 540], [55.701338710577, 37.511397320523, 540], [55.595176875532, 37.037985829957, 350], [55.614971383096, 36.99023615384, 350], [55.684364586762, 37.296269791629, 400], [55.799462367996, 37.794727768993, 450], [55.821939226742, 37.82378426975, 450], [55.718618215516, 37.681123888796, 670], [55.735823244468, 37.520387413717, 700], [55.790276236475, 37.544519055553, 250], [55.880320033877, 37.489866697676, 450], [55.7987161746, 37.53219669463, 1000], [55.788100359625, 37.491193327314, 1250], [55.868899962053, 37.498906605099, 600], [55.805260411904, 37.510972950312, 370], [55.748793667399, 37.755874683303, 630], [55.792551169204, 37.528390876333, 2250], [55.875219480982, 37.490501560085, 550], [55.786165457089, 37.499611636332, 500], [55.921391131679, 37.870553722262, 700], [55.921873082192, 37.748554170631, 750], [55.925871325652, 37.755444498916, 750], [55.897621696757, 37.578914683776, 300], [55.757300318822, 37.601529830808, 820], [55.760748787781, 37.632156161768, 820], [55.855075241058, 37.355131967948, 820], [55.845547451118, 37.66106710805, 250], [55.854847003676, 37.653708412566, 530], [55.855202610184, 37.478390976664, 820], [55.788693881889, 37.560129021868, 155], [55.966667740795, 37.415818949959, 820], [55.677523436644, 37.665029163514, 260], [55.964207436938, 37.413049888408, 820], [55.919735480926, 37.708558747358, 820], [55.686271698538, 37.738696268986, 300], [55.694347446539, 37.331585712376, 720], [55.685803249606, 37.71853008273, 500], [55.780697384393, 37.633796216016, 530], [55.770780734965, 37.610683616619, 600], [55.850485649969, 37.445292589026, 530], [55.719960391091, 37.419988342848, 530], [55.414880148191, 37.902941276023, 530], [55.737021569802, 37.525670742788, 530], [55.678428977136, 37.688764758992, 500], [55.910945654336, 37.39610778156, 245], [55.749455970574, 37.536879473823, 400], [55.770536685627, 37.421384977121, 400], [55.654304260256, 37.765682695757, 150], [55.710835583089, 37.880385487704, 660], [55.746971106233, 37.556821513795, 1920], [55.672811661283, 37.738954143291, 250], [55.645979407771, 37.747105142918, 50], [55.807887065744, 37.579088411808, 700], [55.636373161271, 37.758824899134, 550], [55.643767938944, 37.724398968363, 400], [55.64449410212, 37.711616478778, 600], [55.679302797806, 37.575722220926, 1200], [55.963460131204, 37.405384739265, 350], [55.874912260593, 37.563105946751, 1000], [55.703582585697, 37.744131188851, 190], [55.656332673804, 37.729835639472, 170], [55.714505677001, 37.646344920307, 1000], [55.611433833058, 37.600279607, 1200], [55.847723722339, 37.564314234061, 500], [55.605509727357, 37.59146303635, 550], [55.741061975149, 37.629268671355, 350], [55.647521957884, 37.595610529319, 260], [55.659785297175, 37.537659944676, 600], [55.807390084098, 37.580594297689, 530], [55.690884335766, 37.75453459798, 155], [55.679982567675, 37.640589311237, 1500], [55.470504988765, 37.546165280894, 300], [55.745109771106, 37.515868833429, 300], [55.363626355554, 37.522849648753, 600], [55.764130028303, 37.602553279099, 500], [55.609565133889, 37.605260259075, 300], [55.643757300822, 37.480958957997, 300], [55.610731086203, 37.743868131012, 530], [55.707259409807, 37.387145982422, 240], [55.891630860967, 37.748865263889, 360], [55.64199303185, 37.541575352543, 300], [55.755128370552, 37.667150804956, 300], [55.706926865011, 37.592152658726, 300], [55.771432844196, 37.594282072908, 500], [55.894155045779, 37.449790922215, 240], [55.850485649969, 37.445292589026, 240], [55.659900022524, 37.562890025347, 400], [55.613932719534, 37.494103766928, 480], [55.675914133468, 37.472921790863, 830], [55.658808348219, 37.51447839794, 300], [55.757127211504, 37.613541778783, 500], [55.644429793169, 37.49502020029, 300], [55.919735480926, 37.708558747358, 260], [55.919735480926, 37.708558747358, 1000], [55.919735480926, 37.708558747358, 280], [55.919735480926, 37.708558747358, 260], [55.919735480926, 37.708558747358, 350], [55.618623934709, 37.507234271998, 250], [55.747550639477, 37.539572899774, 200], [55.780171840788, 37.632621586572, 700], [55.69657184619, 37.561549311014, 300], [55.676968807749, 37.578238495299, 1000], [55.763221489411, 37.593405599683, 600], [55.919039625417, 37.746226780103, 650], [55.762970581352, 37.591741114648, 500], [55.772216473045, 37.647888019506, 400], [55.774631006913, 37.608572576516, 200], [55.753713404971, 37.577173862107, 200], [55.752035092271, 37.591170852141, 350], [55.919039625417, 37.746226780103, 550], [55.66162098435, 37.879765165878, 550], [55.749883180703, 37.593551043636, 650], [55.759966576854, 37.614153092168, 1000], [55.770269682977, 37.621433407686, 200], [55.751897620839, 37.532588210911, 700], [55.747337412323, 37.58352683396, 820], [55.749187635785, 37.58345150087, 70], [55.746927236311, 37.626365469754, 640], [55.765787334664, 37.611366651941, 1500], [55.759885908886, 37.647074939658, 1000], [55.938330492381, 37.31356770293, 310], [55.938330492381, 37.31356770293, 250], [55.752109288221, 37.596287720657, 400], [55.761137397742, 37.632723476035, 1000], [55.774113493174, 37.654910373055, 240], [55.677332462645, 37.271351496596, 600], [55.748182545284, 37.626077755149, 3500], [55.730156716643, 37.734483987246, 350], [55.757998890879, 37.623222199901, 500], [55.730156716643, 37.734483987246, 350], [55.730156716643, 37.734483987246, 155], [55.752019549508, 37.639838343923, 200], [55.758621749959, 37.641635323392, 400], [55.774994582086, 37.583240905132, 500], [55.748704958067, 37.423037340388, 1500], [55.736984324936, 37.630892868, 150], [55.757360114139, 37.657132169931, 530], [55.75552751839, 37.654770620679, 250], [55.737521693932, 37.631714723868, 500], [55.90939512968, 37.540400571198, 260], [55.781363590913, 37.705546101493, 260], [55.797121394264, 37.776210363585, 450], [55.707685033293, 37.584490760738, 250], [55.741061975149, 37.629268671355, 950], [55.743541151711, 37.866307756445, 1000], [55.73464481893, 37.632222141509, 500], [55.832117400619, 37.624763045494, 1000], [55.760334730342, 37.86354465714, 400], [55.758047577613, 37.581821158829, 600], [55.741044412598, 37.626609740111, 530], [55.751179447589, 37.888812488822, 400], [55.683024926091, 37.896621462308, 600], [55.80813188385, 37.635928394623, 210], [55.624939724838, 37.708420676376, 750], [55.624675026211, 37.716162868717, 500], [55.606563947945, 37.708687175788, 500], [55.591221305971, 37.66467067158, 700], [55.654218171194, 37.533662678501, 1000], [55.613053840144, 37.743830706636, 300], [55.813063888948, 37.479656262149, 1000], [56.008591646091, 37.851756110238, 1000], [55.565063267224, 37.556737951728, 600], [55.612628778523, 37.720152956239, 250], [55.602429717927, 37.723167893475, 400], [55.958508351024, 38.029107816108, 790], [55.565063267224, 37.556737951728, 300], [55.622148866229, 37.751197358167, 500], [55.565063267224, 37.556737951728, 350], [55.658885766722, 37.430131534756, 500], [55.609943593426, 37.722326659044, 550], [55.751861802562, 37.812765006912, 450], [55.5511081831, 37.557025295755, 600], [55.64014322193, 37.621916300111, 650], [55.625490879674, 37.618682769504, 800], [55.718247596014, 37.793441494097, 600], [55.653116219065, 37.623032641845, 155], [55.625490879674, 37.618682769504, 660], [55.569232592308, 37.473486475146, 700], [55.78340074708, 37.600638022603, 500], [55.76819239992, 37.623026473995, 500], [55.712898015757, 37.79595230272, 600], [55.505766406482, 37.572697360477, 500], [55.733119493397, 37.764566439985, 500], [55.738849198673, 37.780965539778, 500], [55.803342876099, 37.618196783226, 260], [55.14106091605, 37.452021297587, 280], [55.14106091605, 37.452021297587, 310], [55.547852275153, 37.542813047416, 200], [55.749374294199, 37.765125157062, 500], [55.754389007899, 37.751813675803, 500], [55.751153192636, 37.754424716338, 300], [55.740635659611, 37.609301515324, 1500], [55.728087592545, 37.755446315398, 500], [55.546104220824, 37.555558749935, 1140], [55.731854060855, 37.736487251723, 300], [55.716108907156, 37.815897225726, 150], [55.713609355437, 37.821363670092, 250], [55.508358486638, 37.563616729974, 500], [55.863596777613, 37.682818984249, 250], [55.764982880352, 37.638627214075, 300], [55.768121982514, 37.684024713476, 400], [55.78343168586, 37.601248306483, 700], [55.71548202787, 37.815840100863, 350], [55.844319363393, 37.382891486395, 300], [55.841415726534, 37.382391729687, 750], [55.845547451118, 37.66106710805, 300], [55.867844351228, 37.708945671945, 500], [55.891447059701, 37.621980941688, 500], [55.852608033371, 37.350329136419, 300], [55.873407139428, 37.62628129402, 700], [55.703322823136, 37.326172305591, 400], [55.548417419996, 37.773781331602, 500], [55.877875387584, 37.721048010143, 400], [55.862642199751, 37.687251862792, 500], [55.8520068472, 37.647642669787, 450], [55.862642199751, 37.687251862792, 150], [55.874270705206, 37.549458416568, 700], [55.789202146881, 37.583396665229, 800], [55.73983306116, 37.656772698652, 640], [55.885326417872, 37.406258017517, 400], [55.885326417872, 37.406258017517, 350], [55.80275275746, 37.525970540755, 520], [55.852786021152, 37.56859596833, 300], [55.881460032635, 37.683899568812, 450], [55.8352228366, 37.573779843111, 550], [55.872765289704, 37.712552444371, 700], [55.983433624301, 37.143851214916, 350], [55.66458802383, 37.634781438517, 200], [55.846945320907, 37.573956413173, 800], [55.997643364007, 37.236536689772, 550], [55.792404629837, 37.632659061917, 450], [55.984105902525, 37.213995912005, 480], [56.004768203651, 37.206275092709, 510], [55.765340656281, 37.595717789751, 2000], [55.759806718974, 37.647587342083, 1000], [55.865631549664, 37.570609913446, 500], [55.973470579668, 37.160304006415, 400], [55.740222657039, 37.610421992545, 1000], [55.867234033497, 37.704183860692, 250], [55.845835448217, 37.574306434686, 250], [55.866637086455, 37.706703397644, 300], [55.640037908026, 37.687615301667, 155], [55.361697655128, 37.522209164514, 400], [56.008471579005, 37.44289704663, 300], [55.901387743807, 37.402537384222, 700], [55.383141811971, 37.538237005797, 500], [55.897781911176, 37.403136619675, 300], [55.905809034738, 37.707207767531, 500], [55.895476633123, 37.697758674557, 350], [55.601342820756, 37.044056285358, 400], [55.621825231931, 37.713755930761, 400], [55.919735480926, 37.708558747358, 400], [55.601342820756, 37.044056285358, 200], [55.601342820756, 37.044056285358, 200], [55.601342820756, 37.044056285358, 400], [55.891493475605, 37.420458570948, 500], [55.601342820756, 37.044056285358, 250], [55.810614805076, 37.338607996392, 550], [55.814075698019, 37.342154913083, 400], [55.901939111885, 37.743508020719, 300], [55.818974625447, 37.347260594916, 350], [55.91516282691, 37.751239200045, 900], [55.432414538625, 37.55226835609, 500], [55.744896886797, 37.600668179384, 350], [55.803342876099, 37.618196783226, 300], [55.82513555154, 37.636502230945, 350], [55.891388151847, 37.71224351293, 400], [55.817423987039, 37.368798898845, 800], [55.810505065685, 37.383088859638, 230], [55.906596040024, 37.400921862105, 300], [55.727500441092, 37.608854478778, 1000], [55.83164381525, 37.301765002139, 700], [55.891630860967, 37.748865263889, 400], [55.891630860967, 37.748865263889, 400], [55.935400316626, 37.494171308696, 600], [55.822172203448, 37.364487942795, 1000], [55.734552993131, 37.606191376431, 200], [55.65514567529, 37.951521089906, 550], [55.919149065825, 37.742189475439, 600], [55.850485649969, 37.445292589026, 350], [55.92457781588, 37.71761648284, 400], [55.915146640006, 36.857601981877, 600], [55.920172632588, 37.722291586885, 400], [55.856012988477, 37.125905612081, 450], [55.600558595481, 37.141817381282, 500], [55.636610892267, 37.521356786017, 280], [55.631372433959, 37.849035786177, 250], [55.83997107895, 37.297251201293, 600], [55.865747386378, 37.125046197912, 450], [55.911804424161, 36.826320574114, 800], [55.432215622121, 37.543233224857, 500], [55.917856139572, 37.746575249332, 600], [55.90939512968, 37.540400571198, 260], [55.894916455183, 37.451940524961, 300], [55.919613956063, 37.752425868314, 1000], [55.884241779762, 37.427227317816, 800], [55.755267990072, 37.560181339283, 1000], [55.471785906453, 37.562153297405, 450], [55.906457168358, 37.409961580478, 450], [55.466340304984, 37.560081717645, 500], [55.608263669127, 37.621941652928, 500], [55.501898601238, 37.610505313811, 500], [55.893387873463, 37.43754181482, 500], [55.741728574999, 37.628157474854, 500], [55.946631679539, 37.499457985036, 700], [55.433139331608, 37.54921165836, 400], [55.90239613217, 37.463542640197, 500], [55.884960971679, 37.439330433817, 1000], [55.729957431769, 37.674149289658, 500], [55.92680231904, 37.772023751233, 500], [55.756639841466, 37.627136699102, 1000], [55.930418057765, 37.775058994833, 450], [55.792793973206, 37.957963482414, 500], [55.419229460586, 37.546699004106, 155], [55.893822131127, 37.476319480159, 800], [55.893978609714, 37.476880912225, 600], [55.835593182445, 37.322125150669, 400], [55.750930835607, 38.004830955144, 1000], [55.728356897141, 38.030585666547, 500], [55.761480334883, 37.631540701104, 400], [55.750902015242, 37.958261590207, 450], [55.80814287713, 37.943107270525, 500], [55.820768793354, 37.953744029341, 200], [55.996591635364, 37.725645004757, 2000], [55.586504227086, 37.900824449142, 400], [55.759045946292, 37.580816130841, 800], [55.751378109151, 37.956711391408, 450], [55.750960966795, 37.954214258216, 500], [55.751285320316, 37.98666524875, 700], [55.420267963107, 37.547847923453, 260], [55.817950927719, 37.967052350914, 150], [55.918708155399, 37.984506228776, 510], [55.432053567982, 37.545848085306, 500], [55.712292870799, 37.605873407471, 500], [55.58215866813, 37.912458708418, 220], [55.420267963107, 37.547847923453, 800], [55.918835112885, 37.806272108742, 300], [55.918241936001, 37.80643643202, 250], [55.724332306041, 37.584427824708, 700], [55.921266895498, 37.991872727603, 300], [55.805981817839, 37.842531596582, 550], [55.805981817839, 37.842531596582, 700], [55.925914796363, 38.010456512725, 500], [55.752836637557, 37.667914757938, 1500], [55.831083215099, 37.625155587137, 350], [55.924391412333, 37.821458071199, 450], [56.01789574584, 37.434182057121, 1000], [55.922378604893, 37.813147921375, 450], [55.949275744221, 37.835448130283, 600], [55.957008229402, 37.821685925017, 500], [55.916069804088, 37.846537869517, 600], [55.966999708455, 37.903449553185, 500], [55.933022579517, 37.856207096725, 250], [55.916069804088, 37.846537869517, 300], [55.954573238022, 38.058464109533, 155], [55.924530666905, 37.822225877819, 350], [55.967603096743, 37.913444543606, 500], [55.960859532885, 37.922558362337, 300], [55.786983955028, 37.882625248957, 560], [55.786582925327, 37.882082720271, 260], [55.451996870038, 37.763467231162, 300], [55.924325840777, 37.826750793402, 400], [55.754516810927, 37.609074652932, 750], [55.767953854851, 37.605630198614, 1500], [55.732174681522, 37.634605952339, 750], [55.451996870038, 37.763467231162, 280], [55.995825051877, 37.867690703115, 200], [55.818350784963, 37.965330037526, 800], [55.926538820136, 37.860693605588, 400], [55.926994587132, 37.862065619693, 750], [55.920286384718, 37.998322782756, 150], [55.962537346714, 37.932059507308, 500], [55.894672847763, 37.480077007222, 300], [55.951379338704, 38.051081691992, 250], [55.695880124576, 37.860665917402, 550], [55.619727938741, 37.963633589654, 420], [55.926337346316, 37.859652972063, 350], [55.671249034827, 37.944550896405, 400], [55.677040911668, 37.895237818019, 700], [55.92537045078, 37.860037781194, 450], [55.668870469254, 37.953052958042, 450], [55.666449345431, 37.9509338189, 450], [55.925734612195, 37.858579011146, 300], [55.976949242835, 37.819144628916, 600], [55.762320447248, 37.595685458155, 500], [55.689894195182, 37.852169701422, 700], [55.914335332345, 37.866597824258, 300], [55.682950055775, 37.899312474553, 350], [55.433216731508, 37.727805675492, 720], [55.82713323243, 37.436410055493, 500], [55.747157061715, 37.962374886345, 450], [55.913293314608, 37.814440974537, 200], [55.826696559345, 37.445291194739, 350], [55.826281810729, 37.437488297864, 350], [55.161520058217, 37.468115341248, 400], [55.928195927196, 37.858069228596, 250], [55.926781218062, 37.859466123967, 600], [55.85716597964, 37.431903054724, 500], [55.85716597964, 37.431903054724, 600], [55.838191345038, 37.417292477116, 650], [55.84428181972, 37.398467105769, 400], [55.857734334214, 37.419097036467, 600], [55.41668985897, 37.835648742283, 650], [55.41668985897, 37.835648742283, 790], [55.692224602818, 37.896429179837, 200], [55.68184253845, 37.896440676451, 500], [55.850485649969, 37.445292589026, 400], [55.673397134339, 37.479694608641, 300], [55.676722730076, 37.496190915265, 250], [55.678115890095, 37.495888243389, 1000], [55.759713386836, 37.645257104415, 500], [55.165236614497, 37.467918361429, 800], [55.165236614497, 37.467918361429, 500], [55.759140488621, 37.64576016478, 400], [55.697925191209, 37.560497951256, 450], [55.712578612946, 37.559693103545, 500], [55.759632877365, 37.584496803588, 500], [55.770695936989, 37.403167141935, 500], [55.646485894804, 37.715523264108, 300], [55.585271705518, 37.724892853133, 650], [55.773223979616, 37.6194702402, 600], [55.741147285786, 37.417811506365, 500], [55.740961920922, 37.415484818858, 300], [55.740591108036, 37.415238919402, 350], [55.771587318732, 37.592805723463, 990], [55.771503912235, 37.518669238544, 400], [55.791412922048, 37.556011700741, 155], [55.77678893708, 37.471977144943, 800], [55.778312448317, 37.521371710389, 400], [55.757965468479, 37.597688186773, 1000], [55.793405473446, 37.4925115247, 120], [55.794766035505, 37.491839244548, 560], [55.731760272658, 37.487374248036, 1000], [55.734751896361, 37.64228006419, 500], [55.777187632791, 37.525591701141, 300], [55.731760272658, 37.487374248036, 1500], [55.809478478002, 37.464487921938, 300], [55.799747520203, 37.482983405183, 200], [55.799747520203, 37.482983405183, 280], [55.77870729152, 37.665312027913, 300], [55.610192063561, 37.332581794591, 370], [55.74921871948, 37.540006244891, 300], [55.766241810007, 37.604151388796, 300], [55.810955203751, 37.476596787721, 500], [55.741789294471, 37.525489530308, 350], [55.776308751874, 37.541627430683, 500], [55.804365396734, 37.4990306643, 300], [55.799130554802, 37.506601528906, 350], [55.801941696941, 37.5319459416, 500], [55.800799960648, 37.554875987195, 750], [55.807887065744, 37.579088411808, 450], [55.807789234938, 37.578367864454, 350], [55.807789234938, 37.578367864454, 450], [55.784850210641, 37.595427942141, 400], [55.799901035104, 37.526495315734, 1000], [55.855202610184, 37.478390976664, 250], [55.820389149745, 37.499310809296, 350], [55.820389149745, 37.499310809296, 155], [55.820389149745, 37.499310809296, 300], [55.854091791457, 37.476152877935, 400], [55.741293372243, 37.656275875394, 155], [55.800424281262, 37.574765752338, 1000], [55.871072837418, 37.460530144413, 155], [55.884695220148, 37.51752743134, 350], [55.805741219184, 37.571779531018, 400], [55.856066430943, 37.521273118933, 400], [55.64230034322, 37.507017843783, 450], [55.83966392147, 37.486699505729, 155], [55.83966392147, 37.486699505729, 260], [55.823807140129, 36.919118421769, 500], [55.76400202845, 37.533373131279, 500], [55.705947814732, 37.586295155722, 200], [55.838993165982, 37.486785928378, 700], [55.707685033293, 37.584490760738, 155], [55.856217395105, 37.475476298298, 300], [55.862718993221, 37.435034387733, 300], [55.855528850475, 37.475794512897, 350], [55.693517357062, 37.557413016924, 300], [55.67550546198, 37.883102049231, 570], [55.662659383374, 37.554890680575, 155], [55.663800021752, 37.511090277307, 300], [55.669789264547, 37.552200036195, 400], [55.766242517472, 37.526559559091, 450], [55.915946641992, 37.868522056702, 510], [55.850151562995, 37.644953856562, 510], [55.963654726041, 37.41507067194, 510], [55.679058160616, 37.564833248907, 250], [55.640257402165, 37.608378602853, 260], [55.626077675408, 37.487040288618, 600], [55.669940572625, 37.632682723129, 350], [55.651978964893, 37.580762846811, 500], [55.675926760058, 37.625105680619, 250], [55.638940061155, 37.603892035272, 500], [55.681490890471, 37.675873819049, 350], [55.684894608128, 37.687512745263, 700], [55.683065629678, 37.680989273979, 500], [55.678184827071, 37.697357811705, 280], [55.845547451118, 37.66106710805, 250], [55.61108363007, 37.606861806172, 500], [55.622456120938, 37.705202136185, 1000], [55.622456120938, 37.705202136185, 700], [55.70394548422, 37.686556592204, 350], [55.710345840551, 37.668100278729, 400], [55.710345840551, 37.668100278729, 300], [55.71002158486, 37.655578311927, 1000], [55.709128651589, 37.620768031907, 260], [55.727263100653, 37.613272184226, 350], [55.722808586534, 37.62050238939, 350], [55.722276563705, 37.621571973485, 500], [55.721919784413, 37.646278064598, 300], [55.716904792516, 37.644222986057, 250], [55.728616384209, 37.639968247197, 280], [55.728349829364, 37.614946139595, 1600], [55.728065700121, 37.649440149402, 350], [55.728705602684, 37.647911789765, 350], [55.78340074708, 37.600638022603, 350], [55.757218779194, 37.659133619148, 300], [55.823284333356, 37.497703115267, 300], [55.663800021752, 37.511090277307, 300], [55.708714114812, 37.622081072261, 350], [55.663800021752, 37.511090277307, 250], [55.663800021752, 37.511090277307, 350], [55.663800021752, 37.511090277307, 200], [55.663800021752, 37.511090277307, 400], [55.748723363253, 37.581695358653, 180], [55.758664117365, 37.55713278786, 700], [55.761405569209, 37.55158578183, 1000], [55.623970431943, 37.608859544897, 155], [55.761189621438, 37.579477602474, 200], [55.771187776843, 37.59076540257, 350], [55.70574559625, 37.686118707641, 200], [55.778382383447, 37.584767606898, 300], [55.778382383447, 37.584767606898, 250], [55.787557248695, 37.635898429207, 750], [55.784496839544, 37.597503089423, 1000], [55.77436262071, 37.618574015397, 400], [55.791100238288, 37.59058332085, 450], [55.778648584135, 37.581916134574, 500], [55.789951756213, 37.634380906915, 450], [55.788141620243, 37.61259450942, 155], [55.772346547143, 37.679583320006, 350], [55.775035980311, 37.657208514699, 280], [55.774113493174, 37.654910373055, 700], [55.776135509391, 37.670375409014, 400], [55.774113493174, 37.654910373055, 700], [55.774113493174, 37.654910373055, 500], [55.774113493174, 37.654910373055, 500], [55.774113493174, 37.654910373055, 450], [55.774113493174, 37.654910373055, 350], [55.774113493174, 37.654910373055, 400], [55.774113493174, 37.654910373055, 400], [55.732196712473, 37.617174084858, 500], [55.744564606341, 37.565535153144, 300], [55.774113493174, 37.654910373055, 350], [55.772216381812, 37.647887942335, 300], [55.762513394649, 37.657688193211, 1000], [55.709632243079, 37.895886802729, 160], [55.772125227177, 37.650697824023, 500], [55.771473237591, 37.649376790792, 350], [55.747427678453, 37.660699415765, 600], [55.850984575599, 37.597454450948, 155], [55.73846046984, 37.696090203529, 500], [55.746922031329, 37.679505282834, 820], [55.754200648923, 37.716525402701, 480], [55.759130484912, 37.409291665616, 350], [55.75492120862, 37.661798354647, 450], [55.73735631587, 37.693035156298, 350], [55.757070679828, 37.660871867922, 300], [55.58215866813, 37.912458708418, 350], [55.758435465199, 37.638963224895, 1000], [55.736684047129, 37.661204671307, 200], [55.723472614699, 37.610150138193, 250], [55.747550639477, 37.539572899774, 750], [55.762268444695, 37.62220456437, 820], [55.56976701251, 37.579063933693, 350], [55.724094382807, 37.687084477676, 160], [55.761274066204, 37.605857445309, 700], [55.722874775555, 37.688986011837, 250], [55.723879034997, 37.690111013872, 320], [55.373480770945, 37.206470554492, 750], [55.751861802562, 37.812765006912, 400], [55.750205803552, 37.594777593066, 400], [55.750410765042, 37.595342064879, 400], [55.740346894316, 37.705578519429, 830], [55.744428405237, 37.629848403627, 300], [55.744428405237, 37.629848403627, 400], [55.744428405237, 37.629848403627, 250], [55.718618215516, 37.681123888796, 250], [55.718618215516, 37.681123888796, 155], [55.744428405237, 37.629848403627, 450], [55.718618215516, 37.681123888796, 280], [55.718618215516, 37.681123888796, 320], [55.718618215516, 37.681123888796, 380], [55.718618215516, 37.681123888796, 430], [55.736359803101, 37.619100464793, 300], [55.755992137795, 37.621103383716, 320], [55.343452545681, 37.172841910575, 1000], [55.736359803101, 37.619100464793, 300], [55.632574817048, 37.658739309629, 350], [55.753108860751, 37.588977514969, 500], [55.645640969932, 37.719440384698, 700], [55.771269830904, 37.625459542819, 1000], [55.7987161746, 37.53219669463, 350], [55.79482858045, 37.808966933759, 500], [55.606809530369, 37.734103809013, 155], [55.620504403381, 37.668853544165, 400], [55.647738073255, 37.741858807157, 600], [55.658676826865, 37.739755151927, 260], [55.845547451118, 37.66106710805, 300], [55.654205886053, 37.646022809904, 280], [55.672237732727, 37.74469855763, 1500], [55.759130484912, 37.409291665616, 1000], [55.704023956991, 37.771489859607, 250], [55.654321851713, 37.702225984546, 400], [55.736359803101, 37.619100464793, 300], [55.819153755053, 37.338379287122, 250], [55.757399237771, 37.634036720783, 450], [55.679346966349, 37.739294624309, 250], [55.684298731217, 37.750334655688, 350], [55.684298731217, 37.750334655688, 800], [55.67113368663, 37.765725946729, 300], [55.668182020771, 37.767427715888, 300], [55.671573701049, 37.77304500887, 650], [55.681034145838, 37.760368601449, 200], [55.64014322193, 37.621916300111, 260], [55.74962485052, 37.731238133519, 400], [55.826078367599, 37.388443912365, 820], [55.975487934254, 37.161136187551, 450], [55.896879485875, 37.396794779325, 750], [55.574883239969, 37.580102603322, 300], [55.846908047849, 37.346399508381, 700], [55.574883239969, 37.580102603322, 350], [55.57736638886, 37.571083527941, 600], [56.001960234227, 37.21080721711, 990], [55.566406691482, 37.57364299128, 155], [55.717710940881, 37.79248074899, 450], [55.717497163489, 37.793678903103, 350], [55.715008075748, 37.791445400515, 250], [55.756895376974, 37.707852917883, 400], [55.716985150491, 37.79338760589, 250], [55.716955107866, 37.792232649043, 250], [55.716985150491, 37.79338760589, 250], [55.758877768901, 37.708917886962, 550], [55.756265668158, 37.704178510564, 400], [55.755770627386, 37.704895112377, 400], [55.716899707347, 37.794176003778, 450], [55.754826978783, 37.716774606908, 300], [55.731175974348, 37.753579431456, 750], [55.718125731791, 37.783927431799, 600], [55.750488112993, 37.816258225156, 300], [55.75371709463, 37.817634322769, 250], [55.747796278759, 37.854323533305, 400], [55.583012620125, 37.595247645357, 260], [55.779375371004, 37.733946487528, 300], [55.789340440357, 37.81903142961, 450], [55.791793311542, 37.787145657861, 260], [55.810625155156, 37.794936208434, 155], [55.69543658443, 37.906930354379, 340], [55.829423683688, 37.816010818039, 650], [55.800949148129, 37.711518790145, 155], [55.635171968883, 37.436937176274, 350], [55.797273660266, 37.799698165609, 200], [55.862278808748, 37.563302016335, 155], [55.881202678402, 37.569990230025, 500], [55.683412055672, 37.660688138718, 400], [55.898705973135, 37.593653097914, 450], [55.896043426847, 37.619766299278, 500], [55.743955997119, 37.580875522255, 300], [55.864929216638, 37.605094712719, 155], [55.856217395105, 37.475476298298, 155], [55.839191256911, 37.488484438843, 155], [55.88982053857, 37.539316268799, 350], [55.809504583146, 37.569067154172, 1000], [55.85929430303, 37.552695071951, 155], [55.70930999737, 37.657109223867, 500], [55.70930999737, 37.657109223867, 1000], [55.792622136208, 37.58383333551, 155], [55.778531279046, 37.585821093819, 260], [55.792473672368, 37.605000170935, 350], [55.779438987737, 37.600496677494, 350], [55.805244992958, 37.515666125545, 155], [55.774153078814, 37.615372943813, 300], [55.783191803845, 37.585881418946, 200], [55.769154599563, 37.583687553398, 900], [55.725606207831, 37.596310166168, 1200], [55.781375700761, 37.629117931551, 750], [55.634012295335, 37.44198577815, 260], [55.743158282926, 37.56736393202, 155], [55.414880148191, 37.902941276023, 260], [55.71393208007, 37.62396197387, 450], [55.744564606341, 37.565535153144, 300], [55.744564606341, 37.565535153144, 155], [55.752224779655, 37.668537746369, 500], [55.747763928467, 37.6806663163, 350], [55.744462295868, 37.817511503718, 155], [55.959252508754, 37.414845796288, 155], [55.677873618069, 37.507188499027, 260], [55.706402896195, 37.586522544735, 155], [55.798848939608, 37.487927148745, 1250], [55.741695740279, 37.615632443909, 1500], [55.691757584657, 37.529735958373, 500], [55.776711335883, 37.536048090751, 1200], [55.667705554074, 37.524961374471, 1000], [55.774577812557, 37.581948537192, 260], [55.752005820697, 37.88756405639, 350], [55.668653749042, 37.559303633894, 1000], [55.645887856887, 37.673204369121, 800], [55.750846535719, 37.820394840248, 260], [55.766814824029, 37.372206179444, 260], [55.939904611046, 37.364688802758, 260], [55.161520058217, 37.468115341248, 260], [55.691571327892, 37.662706457963, 500], [55.747471451943, 37.706847364924, 155], [55.747550639477, 37.539572899774, 500], [55.761568389824, 37.658246280325, 500], [55.785556322214, 37.241026820662, 500], [55.653812483275, 37.844300890172, 350], [55.642346786058, 37.542229400827, 450], [55.662636699264, 37.580116756577, 155], [55.647955092655, 37.57828613412, 155], [55.585271705518, 37.724892853133, 260], [55.68846654697, 37.569934559234, 200], [55.572711225402, 37.673959274923, 260], [55.683834999499, 37.549313628544, 250], [55.678120709875, 37.535632005111, 500], [55.849457769993, 36.806746422903, 400], [55.683525729322, 37.552629081775, 350], [55.758120228054, 37.676303966302, 1500], [55.740195749355, 37.634615623457, 700], [55.677873618069, 37.507188499027, 155], [55.744131431479, 37.656944268763, 800], [55.653500185342, 37.646633641737, 350], [55.733770862174, 37.634245718852, 450], [59.807127085367, 30.377379010852, 260], [55.737239880549, 37.594743894301, 500], [56.260372776542, 43.859266516676, 500], [50.566049718226, 36.551508513573, 350], [50.05245089272, 14.472776915317, 300], [54.789978568329, 56.036813004485, 1000], [53.224438420449, 50.167941164174, 1000], [47.276799552109, 39.809404463427, 155], [55.912257589724, 36.861869661134, 350], [25.269998956288, 55.299678052015, 350], [50.092948743859, 14.443615365882, 155], [25.185662023643, 55.240854526065, 1000], [55.670582740187, 37.760900382001, 500], [55.723768241983, 37.592541541333, 1750], [55.806217411436, 37.828966197839, 300]];


},{}],3:[function(require,module,exports){
"use strict";
var theme = require('./theme');
module.exports = function(map) {
  theme(map, 'dark');
  return map;
};


},{"./theme":18}],4:[function(require,module,exports){
"use strict";
module.exports = function(app) {
  var device = app.base.control.$('.device'),
      display = device.children(),
      map = new DG.Map('mobile-map', {
        'center': new DG.LatLng(54.980156831455, 82.897440725094),
        'zoom': 13,
        'geoclicker': false,
        'worldCopyJump': true,
        'locationControl': false,
        'zoomControl': true,
        'fullscreenControl': false
      });
  return {
    enable: function() {
      device.addClass('device_is-visible_true');
      return this;
    },
    disable: function() {
      device.removeClass('device_is-visible_true');
      return this;
    },
    clean: function() {
      device.removeClass('tablet smartphone notepad');
      display.removeClass();
      return this;
    },
    setType: function(type) {
      this.clean();
      device.addClass(type);
      display.addClass(type + '__display');
      map.invalidateSize();
      return this;
    },
    map: map
  };
};


},{}],5:[function(require,module,exports){
"use strict";
module.exports = [{
  entrance: ['LINESTRING(30.438000494497626 59.994491404967391,30.437971300025943 59.994307749284225,30.438630242018608 59.994281728092794,30.438785108642286 59.994053221833617,30.438842610143436 59.993968273206889)'],
  description: {
    address: 'Пискарёвский проспект, 63',
    company: 'Балтик, ООО, группа компаний',
    text: 'С Пискаревского проспекта сверните направо, затем по дороге сразу налево. Зайдите внутрь и идите влево по коридорам, пока не найдете нужный офис.'
  }
}, {
  entrance: ['LINESTRING(82.89755344390868 54.982320605449296, 82.89714574813843 54.982566865457464, 82.89677560329437 54.9823329184856, 82.89664685726164 54.98240679662398, 82.89677023887634 54.98247451813142)'],
  description: {
    address: 'Боткинская, 1',
    company: 'АНТ НЕДВИЖИМОСТЬ, ООО, агентство недвижимости',
    text: 'Входите со стороны станции метро «Площадь Ленина», увидите здание сложной формы. Вам нужно в левое крыло. Ищите 141 офис.'
  }
}, {
  entrance: ['LINESTRING(30.324549033601716 59.854343806634077,30.325078843000412 59.854351520900806,30.325074340650939 59.854407581362537,30.324939898779725 59.854404848890709)'],
  description: {
    address: 'Авиационная, 18',
    company: 'Дента-Мед, стоматологический центр',
    text: 'С Пискаревского проспекта сверните направо, затем по дороге сразу налево. Зайдите внутрь и идите влево по коридорам, пока не найдете нужный офис.'
  }
}, {
  entrance: ['LINESTRING(30.378849478242262 59.926403368290842,30.378349166046458 59.926567439016566,30.378399909895517 59.926607079685738,30.378545244323146 59.926554898038752)'],
  description: {
    address: 'Невский проспект, 170',
    company: 'Центр реабилитации речи Татьяны Соловьёвой',
    text: 'С Невского проспекта сверните на Исполкомскую, но далеко не уезжайте вам в угловое здание. Пройдите во двор, вход будет по правую руку.'
  }
}, {
  entrance: ['LINESTRING(30.322164094455246 59.933053955454568,30.321405732371108 59.933227486478827,30.320738194958359 59.932492844975677,30.320493984085964 59.932548704483153,30.320338777568114 59.932377903442955,30.320181227088419 59.932420250768061)'],
  description: {
    address: 'Казанская, 7',
    company: 'ОбликМедиа, ООО, рекламное агентство',
    text: 'От Невского проспекта двигайтесь по улице Казанской до дома №5. Проходите во вторую арку и поверните налево в следующую арку. Дойдите до здания, пройдите насквозь, увидите вход справа.'
  }
}, {
  entrance: ['LINESTRING(30.378849478242262 59.926403368290842,30.378349166046458 59.926567439016566,30.378399909895517 59.926607079685738,30.378545244323146 59.926554898038752)'],
  description: {
    address: 'Невский проспект, 170',
    company: 'Центр реабилитации речи Татьяны Соловьёвой',
    text: 'С Невского проспекта сверните на Исполкомскую, но далеко не уезжайте вам в угловое здание. Пройдите во двор, вход будет по правую руку.'
  }
}];


},{}],6:[function(require,module,exports){
"use strict";
module.exports = {
  'page1': require('./page1'),
  'page4': require('./page4'),
  'page5': require('./page5'),
  'two-markers': require('./two-markers'),
  'sun': require('./sun'),
  'marker': require('./marker'),
  'dark-theme': require('./dark-theme'),
  'light-theme': require('./light-theme'),
  'smartphone': require('./smartphone'),
  'notepad': require('./notepad'),
  'tablet': require('./tablet'),
  'setup': require('./setup'),
  'reset': require('./reset')
};


},{"./dark-theme":3,"./light-theme":7,"./marker":8,"./notepad":9,"./page1":10,"./page4":11,"./page5":12,"./reset":13,"./setup":14,"./smartphone":15,"./sun":16,"./tablet":17,"./two-markers":19}],7:[function(require,module,exports){
"use strict";
var theme = require('./theme');
module.exports = function(map) {
  theme(map, 'light');
  return map;
};


},{"./theme":18}],8:[function(require,module,exports){
"use strict";
module.exports = function(map, app) {
  if (map.marker) {
    return map.addLayer(map.marker);
  }
  app.plugins.marker.then(function() {
    map.marker = new L.Marker([55.755616894047215, 37.60070800781251], {bounceOnAdd: true}).addTo(map);
    map.marker.on('click', function() {
      map.marker.bounce({
        duration: 500,
        height: 400
      });
    });
  });
  return map;
};


},{}],9:[function(require,module,exports){
"use strict";
module.exports = function(map, app) {
  app.device.enable().setType('notepad');
  return map;
};


},{}],10:[function(require,module,exports){
"use strict";
module.exports = function(map, app) {
  var loader = app.base.footer.$('[data-footer-state=page1]'),
      timeEl = loader.find('.lightness-panel__counter'),
      newBar = loader.find('.lightness-panel__version_of_new-api .lightness-panel__progress-bar-fill'),
      oldBar = loader.find('.lightness-panel__version_of_old-api .lightness-panel__progress-bar-fill'),
      loaded = 'lightness-panel__progress-bar-fill-is_loaded',
      timer,
      time = 0,
      ms,
      s;
  newBar.add(oldBar).width(0).stop().removeClass(loaded);
  newBar.animate({width: '60%'}, {
    duration: 2000,
    complete: function() {
      newBar.addClass(loaded);
      app.base.$('.map').removeClass('map_has-overlay_dark');
    }
  });
  oldBar.animate({width: '100%'}, {
    duration: 4000,
    start: startTimer,
    always: function() {
      oldBar.addClass(loaded);
      clearInterval(timer);
    }
  });
  function startTimer() {
    timer = setInterval(function() {
      time += 1;
      s = Math.floor(time / 60);
      ms = Math.floor(time % 60);
      if (s < 10) {
        s = '0' + s;
      }
      if (ms < 10) {
        ms = '0' + ms;
      }
      timeEl.text(['00', s, ms].join(' : '));
    }, 20);
  }
  ;
  return map;
};


},{}],11:[function(require,module,exports){
"use strict";
var data = require('./entrances'),
    $ = require('jquery');
module.exports = function(map, app) {
  var entrances = {},
      titleNode = $('.pseudocard__header'),
      addressNode = $('.pseudocard__address'),
      textNode = $('.pseudocard__route-instructions');
  function showEntrance(id) {
    if (!entrances[id]) {
      entrances[id] = new DG.Entrance({'vectors': data[id].entrance});
    }
    entrances[id].addTo(map).show();
  }
  function updateDescription(id) {
    var description = data[id].description;
    titleNode.html(description.company);
    addressNode.html(description.address);
    textNode.html(description.text);
  }
  app.vent.on('showEntrance changeEntrance', function(data) {
    showEntrance(data.id);
  });
  app.vent.on('changeEntrance', function(data) {
    updateDescription(data.id);
  });
  showEntrance(0);
  app.base.control._currEl = $('.entrances-examples__example-link_is-shown_true');
  return map;
};


},{"./entrances":5,"jquery":29}],12:[function(require,module,exports){
"use strict";
var $ = require('jquery');
module.exports = function(map, app) {
  var Commits_JSAPI = {
    "2010": [{
      "date": "2010-06-18T15:42:50Z",
      "author": {
        "login": "Gaidamak",
        "location": "Kiev, Ukraine"
      },
      "latlng": {
        "lat": 50.4501,
        "lng": 30.5234
      }
    }, {
      "date": "2010-06-23T08:10:16Z",
      "author": {
        "login": "porqz",
        "location": "Novosibirsk"
      },
      "latlng": {
        "lat": 55.00835259999999,
        "lng": 82.9357327
      }
    }],
    "2011": [{
      "date": "2011-06-18T15:42:50Z",
      "author": {
        "login": "Gaidamak",
        "location": "Kiev, Ukraine"
      },
      "latlng": {
        "lat": 50.4501,
        "lng": 30.5234
      }
    }, {
      "date": "2011-06-23T08:10:16Z",
      "author": {
        "login": "porqz",
        "location": "Novosibirsk"
      },
      "latlng": {
        "lat": 55.00835259999999,
        "lng": 82.9357327
      }
    }],
    "2012": [{
      "date": "2012-06-18T15:42:50Z",
      "author": {
        "login": "Gaidamak",
        "location": "Kiev, Ukraine"
      },
      "latlng": {
        "lat": 50.4501,
        "lng": 30.5234
      }
    }, {
      "date": "2012-06-23T08:10:16Z",
      "author": {
        "login": "porqz",
        "location": "Novosibirsk"
      },
      "latlng": {
        "lat": 55.00835259999999,
        "lng": 82.9357327
      }
    }],
    "2013": [{
      "date": "2013-06-18T15:42:50Z",
      "author": {
        "login": "Gaidamak",
        "location": "Kiev, Ukraine"
      },
      "latlng": {
        "lat": 50.4501,
        "lng": 30.5234
      }
    }, {
      "date": "2013-06-23T08:10:16Z",
      "author": {
        "login": "porqz",
        "location": "Novosibirsk"
      },
      "latlng": {
        "lat": 55.00835259999999,
        "lng": 82.9357327
      }
    }],
    "2014": [{
      "date": "2014-06-18T15:42:50Z",
      "author": {
        "login": "Gaidamak",
        "location": "Kiev, Ukraine"
      },
      "latlng": {
        "lat": 50.4501,
        "lng": 30.5234
      }
    }, {
      "date": "2014-06-23T08:10:16Z",
      "author": {
        "login": "porqz",
        "location": "Novosibirsk"
      },
      "latlng": {
        "lat": 55.00835259999999,
        "lng": 82.9357327
      }
    }]
  };
  var GitHubIcon = DG.icon({
    iconUrl: '/img/github-mark.png',
    iconRetinaUrl: '/img/github-mark.png',
    iconSize: [32, 32],
    iconAnchor: [16, 16]
  });
  var cLayers = [];
  Object.keys(Commits_JSAPI).forEach(function(year) {
    var commitMark = [];
    addMarkersToGroup(year, commitMark);
  });
  map.setZoom(4);
  map.setView([32.657875736955305, 44.25292968750001]);
  function addMarkersToGroup(year, aMarkers) {
    if (Commits_JSAPI[year]) {
      Commits_JSAPI[year].forEach(function(commit) {
        aMarkers.push(DG.marker([commit.latlng.lat, commit.latlng.lng], {icon: GitHubIcon}));
      });
    }
  }
  function showCommits(year) {
    if (cLayers[year] || !Commits_JSAPI[year]) {
      return;
    }
    var commits = [];
    addMarkersToGroup(year, commits);
    cLayers[year] = DG.layerGroup(commits).addTo(map);
  }
  function hideCommits(year) {
    if (!cLayers[year] || !Commits_JSAPI[year]) {
      return;
    }
    map.removeLayer(cLayers[year]);
  }
  app.vent.on('changeOpennes', function(data) {
    console.log(data.id);
  });
  app.base.control._currEl = $('.openness-examples__example-link_is-shown_true');
  return map;
};


},{"jquery":29}],13:[function(require,module,exports){
"use strict";
module.exports = function(map, app) {
  if (map.clusters && map.hasLayer(map.clusters)) {
    map.removeLayer(map.clusters);
  }
  if (map.heat && map.hasLayer(map.heat)) {
    map.removeLayer(map.heat);
  }
  if (map.marker && map.hasLayer(map.marker)) {
    map.removeLayer(map.marker);
  }
  !map.geoclicker.enabled() && map.geoclicker.disable();
  if (map.controls.ruler) {
    map.removeControl(map.controls.ruler);
    map.controls.ruler = null;
  }
  map.geoclicker._map._popup && map.closePopup(map.geoclicker._map._popup);
  app.device.clean().disable();
  return map;
};


},{}],14:[function(require,module,exports){
"use strict";
var setup = require('./device');
module.exports = function(map, app) {
  app.banks = DG.ajax('http://catalog.api.2gis.ru/2.0/catalog/branch/search', {data: {
      q: 'банкоматы',
      page_size: 1,
      page: 1,
      region_id: 32,
      fields: 'markers',
      key: 'rudcgu3317',
      output: 'json'
    }});
  app.plugins.markers = DG.plugin(['./vendors/Leaflet.markerCluster/leaflet.markercluster-src.js', './vendors/Leaflet.markerCluster/MarkerCluster.Default.css']);
  app.plugins.heat = DG.plugin('./vendors/HeatLayer/heatLayer.js');
  app.plugins.marker = DG.plugin('./vendors/Leaflet.bounceMarker/leaflet.bouncemarker.js');
  app.device = setup(app);
  return map;
};


},{"./device":4}],15:[function(require,module,exports){
"use strict";
module.exports = function(map, app) {
  app.device.enable().setType('smartphone');
  return map;
};


},{}],16:[function(require,module,exports){
"use strict";
var data = require('./cafeHeat');
module.exports = function(map, app) {
  if (map.heat) {
    return map.addLayer(map.heat);
  }
  app.plugins.heat.then(function() {
    map.heat = L.heatLayer(data, {radius: 25}).addTo(map);
  });
  return map;
};


},{"./cafeHeat":2}],17:[function(require,module,exports){
"use strict";
module.exports = function(map, app) {
  var map2 = app.device.map;
  app.device.enable().setType('tablet');
  map.on('move', function(e) {
    console.log(e.target.getCenter());
    map2.setView(e.target.getCenter(), map.getZoom(), {animate: false});
  });
  return map;
};


},{}],18:[function(require,module,exports){
"use strict";
var $ = require('jquery');
require('../../polyfill/indexOf');
module.exports = function(map, skin) {
  map.setView([54.980496831455, 82.897140725094], 18);
  var css = $('head [rel=stylesheet]').filter(function() {
    return $(this).attr('href').indexOf('maps.api') > -1;
  }),
      url = css.attr('href'),
      regex = /skin=(\w*)/,
      test = url.match(regex);
  map.geoclicker.enable();
  if (!map.controls.ruler) {
    map.controls.ruler = DG.control.ruler().addTo(map);
  }
  map.fire('click', {latlng: new DG.LatLng(54.98018731490755, 82.89802551269531)});
  css.attr('href', test ? url.replace(regex, '&skin=' + skin) : (url + '&skin=' + skin));
  return map;
};


},{"../../polyfill/indexOf":35,"jquery":29}],19:[function(require,module,exports){
"use strict";
module.exports = function(map, app) {
  map.setView([55.755616894047215, 37.60070800781251], 10);
  if (map.clusters) {
    return map.addLayer(map.clusters).fitBounds(map.clusters.getBounds());
  }
  app.plugins.markers.then(function() {
    return app.banks;
  }).then(function(data) {
    var result = data.result.markers;
    var markers = map.clusters = L.markerClusterGroup({showCoverageOnHover: false});
    function populate() {
      for (var i = 0; i < result.length; i++) {
        var m = L.marker([result[i].lat, result[i].lon]);
        m.bindLabel(result[i].name_ex.primary);
        markers.addLayer(m);
      }
    }
    populate();
    map.addLayer(markers).fitBounds(markers.getBounds());
  });
  return map;
};


},{}],20:[function(require,module,exports){
"use strict";
var Backbone = require('backbone');
Backbone.$ = require('jquery');
module.exports = function(app) {
  var BaseView = require('./view/base')(app);
  return Backbone.Router.extend({
    routes: {
      '': 'index',
      ':page': 'renderPage'
    },
    initialize: function() {
      app.base = new BaseView({
        el: 'body',
        model: app.state
      });
      app.state.on('change:page', this.update, this);
    },
    update: function() {
      this.navigate('/' + app.state.getPageName());
    },
    index: function() {
      app.state.setPage(0);
    },
    renderPage: function(page) {
      app.state.setPageName(page);
    }
  });
};


},{"./view/base":22,"backbone":26,"jquery":29}],21:[function(require,module,exports){
"use strict";
var Backbone = require('backbone');
Backbone.$ = require('jquery');
module.exports = function() {
  return Backbone.Model.extend({
    defaults: {
      max: 7,
      pages: ['index', 'lightness', 'modularity', 'themes', 'entrances', 'openness', 'mobile', 'start']
    },
    validate: function(attrs, options) {
      if (attrs.page > attrs.max) {
        return 'error';
      }
      if (attrs.page < 0) {
        return 'error';
      }
    },
    getPageName: function() {
      return this.get('pages')[this.get('page')];
    },
    setPageName: function(page, silent) {
      var pageNum = this.get('pages').indexOf(page);
      if (pageNum === -1) {
        pageNum = 0;
      }
      this.set('page', pageNum, {
        validate: true,
        silent: silent
      });
    },
    setPage: function(page, silent) {
      this.set('page', page, {
        validate: true,
        silent: silent
      });
    },
    upPage: function() {
      this.set('page', +this.get('page') + 1, {validate: true});
    },
    downPage: function() {
      this.set('page', +this.get('page') - 1, {validate: true});
    }
  });
};


},{"backbone":26,"jquery":29}],22:[function(require,module,exports){
"use strict";
var Backbone = require('backbone');
Backbone.$ = require('jquery');
require('../../polyfill/indexOf');
module.exports = function(app) {
  var MapView = require('./map')(app),
      ControlView = require('./control')(app),
      FooterView = require('./footer')(app);
  return Backbone.View.extend({
    events: {
      'click .intro': 'start',
      'scroll .intro': 'start'
    },
    template: {
      intro: require('../../pages/index'),
      map: require('../../partials/map'),
      outro: require('../../pages/start')
    },
    initialize: function() {
      this.model.on('change:page', this.update, this);
      this.map = new MapView({model: this.model});
      this.control = new ControlView({model: this.model});
      this.footer = new FooterView({model: this.model});
      this.render();
    },
    update: function() {
      this.$('.map')[([0, 1, '0', '1', this.model.get('max')].indexOf(this.model.get('page')) !== -1 ? 'add' : 'remove') + 'Class']('map_has-overlay_dark');
      this.$('.intro')[(this.model.get('page') != 0 ? 'add' : 'remove') + 'Class']('intro_is-started_true');
      this.$('.start')[(this.model.get('page') != this.model.get('max') ? 'add' : 'remove') + 'Class']('start_is-started_true');
      return this;
    },
    start: function() {
      this.model.upPage();
    },
    render: function() {
      this.$el.html([this.template.map.render(), this.template.intro.render({layout: true}), this.template.outro.render({layout: true})].join(''));
      this.$el.append(this.map.$el);
      this.$el.append(this.control.$el);
      this.$el.append(this.footer.$el);
      this.update();
      return this;
    }
  });
};


},{"../../pages/index":30,"../../pages/start":31,"../../partials/map":34,"../../polyfill/indexOf":35,"./control":23,"./footer":24,"./map":25,"backbone":26,"jquery":29}],23:[function(require,module,exports){
"use strict";
var Backbone = require('backbone');
Backbone.$ = require('jquery');
module.exports = function(app) {
  return Backbone.View.extend({
    events: {
      'click .features__arrow-link_to_right': 'next',
      'click .features__arrow-link_to_left': 'prev',
      'click .features__table-of-contents-item': 'goPage',
      'click .features__round-link': 'setState',
      'click .openness-examples__list': 'handleSlider',
      'click .entrances-examples__list': 'handleSlider',
      'click .openness-examples__play-pause-button': 'handleSlider',
      'click .entrances-examples__play-pause-button': 'handleSlider',
      'click .pseudocard__find-entrance-link': '_showEntrance'
    },
    template: require('../../partials/header'),
    initialize: function() {
      this.model.on('change:page', this.update, this);
      this._currId = 0;
      this.render().toggle();
    },
    toggle: function() {
      var action = ((this.model.get('page') == 0 || this.model.get('page') == this.model.get('max')) ? 'remove' : 'add') + 'Class';
      this.$('.features')[action]('features_is-visible_true');
      return this;
    },
    setPage: function() {
      var pins = 'features__table-of-contents-item',
          tabs = 'features__list-item',
          active = '_is-active_true',
          item = ':eq(' + (this.model.get('page') - 1) + ')';
      this.$('.' + pins + active).removeClass(pins + active);
      this.$('.' + tabs + active).removeClass(tabs + active);
      this.$('.' + pins + item).addClass(pins + active);
      this.$('.' + tabs + item).addClass(tabs + active);
      return this;
    },
    update: function() {
      this.toggle().setPage().setState();
      return this;
    },
    next: function(e) {
      e.preventDefault();
      this.model.upPage();
      return this;
    },
    prev: function(e) {
      e.preventDefault();
      this.model.downPage();
      return this;
    },
    goPage: function(e) {
      this.model.setPage(this.$(e.target).index() + 1);
      return this;
    },
    setState: function(e) {
      var $el,
          state,
          activeClass = 'features__round-link-is-active_true';
      if (e) {
        e.preventDefault();
        $el = this.$(e.target);
      } else {
        $el = this.$('.features__list-item_is-active_true .features__round-link:eq(0)');
      }
      this.$('.' + activeClass).removeClass(activeClass);
      $el.addClass(activeClass);
      state = $el.data('state') ? $el.data('state') : 'page' + this.model.get('page');
      this.model.set('state', state);
      return this;
    },
    handleSlider: function(e) {
      var type = e.currentTarget.className.split('-')[0],
          $el = this.$(e.target);
      e.preventDefault();
      if ($el.hasClass(type + '-examples__example-link')) {
        var id = $el.data('id');
        this._currId !== id && this._handleSliderPos(id, $el, type);
      } else if ($el.hasClass(type + '-examples__play-pause-button')) {
        this._handleSliderStart(type);
      }
    },
    _handleSliderPos: function(id, el, type) {
      var activeClass = type + '-examples__example-link_is-shown_true',
          l = type.length - 1,
          eventName = type.charAt(0).toUpperCase() + type.slice(1, l);
      this._currEl.removeClass(activeClass);
      el.addClass(activeClass);
      this._currId = id;
      this._currEl = el;
      app.vent.trigger('change' + eventName, {id: this._currId});
    },
    _handleSliderStart: function(type) {
      if (!this._interval) {
        console.log('start auto slide');
        this._interval = window.setInterval(this._startSlider.bind(this), 1500, type);
      } else {
        window.clearInterval(this._interval);
        this._interval = undefined;
      }
    },
    _startSlider: function(type) {
      var id = this._currId + 1,
          el = this._currEl.parent().next().children();
      this._handleSliderPos(id, el, type);
    },
    _showEntrance: function(e) {
      e.preventDefault();
      app.vent.trigger('showEntrance', {id: this._currId});
    },
    render: function() {
      this.$el.html(this.template.render());
      return this;
    }
  });
};


},{"../../partials/header":33,"backbone":26,"jquery":29}],24:[function(require,module,exports){
"use strict";
var Backbone = require('backbone');
Backbone.$ = require('jquery');
module.exports = function(app) {
  return Backbone.View.extend({
    template: require('../../partials/footer'),
    initialize: function() {
      this.model.on('change:state', this.setState, this);
      this.render().setState();
    },
    setState: function() {
      var tabs = 'footer__panel',
          active = '_is-active_true',
          item = '[data-footer-state=' + this.model.get('state') + ']';
      this.$('.' + tabs + active).removeClass(tabs + active);
      this.$(item).addClass(tabs + active);
      return this;
    },
    render: function() {
      this.$el.html(this.template.render());
      return this;
    }
  });
};


},{"../../partials/footer":32,"backbone":26,"jquery":29}],25:[function(require,module,exports){
"use strict";
var Backbone = require('backbone'),
    _ = require('underscore'),
    maps = require('../maps');
Backbone.$ = require('jquery');
module.exports = function(app) {
  return Backbone.View.extend({
    mapOpts: function() {
      return {
        'center': new DG.LatLng(54.980156831455, 82.897440725094),
        'zoom': 13,
        'geoclicker': false,
        'worldCopyJump': true,
        'locationControl': false,
        'zoomControl': true,
        'fullscreenControl': false
      };
    },
    initialize: function() {
      this.model.on('change:state', this.update, this);
      DG.then(_.bind(this.render, this));
    },
    update: function() {
      DG.then(_.bind(function() {
        var map = this.model.get('map'),
            scene = maps[this.model.get('state')];
        maps.reset(map, app);
        scene && scene(map, app);
        return this;
      }, this));
    },
    render: function() {
      var map = new DG.Map('map', this.mapOpts());
      maps.setup(map, app);
      map.controls = {fullscreen: DG.control.fullscreen()};
      map.zoomControl.setPosition('topright');
      map.controls.fullscreen.addTo(map);
      this.model.set('map', map);
      return this;
    }
  });
};


},{"../maps":6,"backbone":26,"jquery":29,"underscore":27}],26:[function(require,module,exports){
//     Backbone.js 1.1.2

//     (c) 2010-2014 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
//     Backbone may be freely distributed under the MIT license.
//     For all details and documentation:
//     http://backbonejs.org

(function(root, factory) {

  // Set up Backbone appropriately for the environment. Start with AMD.
  if (typeof define === 'function' && define.amd) {
    define(['underscore', 'jquery', 'exports'], function(_, $, exports) {
      // Export global even in AMD case in case this script is loaded with
      // others that may still expect a global Backbone.
      root.Backbone = factory(root, exports, _, $);
    });

  // Next for Node.js or CommonJS. jQuery may not be needed as a module.
  } else if (typeof exports !== 'undefined') {
    var _ = require('underscore');
    factory(root, exports, _);

  // Finally, as a browser global.
  } else {
    root.Backbone = factory(root, {}, root._, (root.jQuery || root.Zepto || root.ender || root.$));
  }

}(this, function(root, Backbone, _, $) {

  // Initial Setup
  // -------------

  // Save the previous value of the `Backbone` variable, so that it can be
  // restored later on, if `noConflict` is used.
  var previousBackbone = root.Backbone;

  // Create local references to array methods we'll want to use later.
  var array = [];
  var push = array.push;
  var slice = array.slice;
  var splice = array.splice;

  // Current version of the library. Keep in sync with `package.json`.
  Backbone.VERSION = '1.1.2';

  // For Backbone's purposes, jQuery, Zepto, Ender, or My Library (kidding) owns
  // the `$` variable.
  Backbone.$ = $;

  // Runs Backbone.js in *noConflict* mode, returning the `Backbone` variable
  // to its previous owner. Returns a reference to this Backbone object.
  Backbone.noConflict = function() {
    root.Backbone = previousBackbone;
    return this;
  };

  // Turn on `emulateHTTP` to support legacy HTTP servers. Setting this option
  // will fake `"PATCH"`, `"PUT"` and `"DELETE"` requests via the `_method` parameter and
  // set a `X-Http-Method-Override` header.
  Backbone.emulateHTTP = false;

  // Turn on `emulateJSON` to support legacy servers that can't deal with direct
  // `application/json` requests ... will encode the body as
  // `application/x-www-form-urlencoded` instead and will send the model in a
  // form param named `model`.
  Backbone.emulateJSON = false;

  // Backbone.Events
  // ---------------

  // A module that can be mixed in to *any object* in order to provide it with
  // custom events. You may bind with `on` or remove with `off` callback
  // functions to an event; `trigger`-ing an event fires all callbacks in
  // succession.
  //
  //     var object = {};
  //     _.extend(object, Backbone.Events);
  //     object.on('expand', function(){ alert('expanded'); });
  //     object.trigger('expand');
  //
  var Events = Backbone.Events = {

    // Bind an event to a `callback` function. Passing `"all"` will bind
    // the callback to all events fired.
    on: function(name, callback, context) {
      if (!eventsApi(this, 'on', name, [callback, context]) || !callback) return this;
      this._events || (this._events = {});
      var events = this._events[name] || (this._events[name] = []);
      events.push({callback: callback, context: context, ctx: context || this});
      return this;
    },

    // Bind an event to only be triggered a single time. After the first time
    // the callback is invoked, it will be removed.
    once: function(name, callback, context) {
      if (!eventsApi(this, 'once', name, [callback, context]) || !callback) return this;
      var self = this;
      var once = _.once(function() {
        self.off(name, once);
        callback.apply(this, arguments);
      });
      once._callback = callback;
      return this.on(name, once, context);
    },

    // Remove one or many callbacks. If `context` is null, removes all
    // callbacks with that function. If `callback` is null, removes all
    // callbacks for the event. If `name` is null, removes all bound
    // callbacks for all events.
    off: function(name, callback, context) {
      var retain, ev, events, names, i, l, j, k;
      if (!this._events || !eventsApi(this, 'off', name, [callback, context])) return this;
      if (!name && !callback && !context) {
        this._events = void 0;
        return this;
      }
      names = name ? [name] : _.keys(this._events);
      for (i = 0, l = names.length; i < l; i++) {
        name = names[i];
        if (events = this._events[name]) {
          this._events[name] = retain = [];
          if (callback || context) {
            for (j = 0, k = events.length; j < k; j++) {
              ev = events[j];
              if ((callback && callback !== ev.callback && callback !== ev.callback._callback) ||
                  (context && context !== ev.context)) {
                retain.push(ev);
              }
            }
          }
          if (!retain.length) delete this._events[name];
        }
      }

      return this;
    },

    // Trigger one or many events, firing all bound callbacks. Callbacks are
    // passed the same arguments as `trigger` is, apart from the event name
    // (unless you're listening on `"all"`, which will cause your callback to
    // receive the true name of the event as the first argument).
    trigger: function(name) {
      if (!this._events) return this;
      var args = slice.call(arguments, 1);
      if (!eventsApi(this, 'trigger', name, args)) return this;
      var events = this._events[name];
      var allEvents = this._events.all;
      if (events) triggerEvents(events, args);
      if (allEvents) triggerEvents(allEvents, arguments);
      return this;
    },

    // Tell this object to stop listening to either specific events ... or
    // to every object it's currently listening to.
    stopListening: function(obj, name, callback) {
      var listeningTo = this._listeningTo;
      if (!listeningTo) return this;
      var remove = !name && !callback;
      if (!callback && typeof name === 'object') callback = this;
      if (obj) (listeningTo = {})[obj._listenId] = obj;
      for (var id in listeningTo) {
        obj = listeningTo[id];
        obj.off(name, callback, this);
        if (remove || _.isEmpty(obj._events)) delete this._listeningTo[id];
      }
      return this;
    }

  };

  // Regular expression used to split event strings.
  var eventSplitter = /\s+/;

  // Implement fancy features of the Events API such as multiple event
  // names `"change blur"` and jQuery-style event maps `{change: action}`
  // in terms of the existing API.
  var eventsApi = function(obj, action, name, rest) {
    if (!name) return true;

    // Handle event maps.
    if (typeof name === 'object') {
      for (var key in name) {
        obj[action].apply(obj, [key, name[key]].concat(rest));
      }
      return false;
    }

    // Handle space separated event names.
    if (eventSplitter.test(name)) {
      var names = name.split(eventSplitter);
      for (var i = 0, l = names.length; i < l; i++) {
        obj[action].apply(obj, [names[i]].concat(rest));
      }
      return false;
    }

    return true;
  };

  // A difficult-to-believe, but optimized internal dispatch function for
  // triggering events. Tries to keep the usual cases speedy (most internal
  // Backbone events have 3 arguments).
  var triggerEvents = function(events, args) {
    var ev, i = -1, l = events.length, a1 = args[0], a2 = args[1], a3 = args[2];
    switch (args.length) {
      case 0: while (++i < l) (ev = events[i]).callback.call(ev.ctx); return;
      case 1: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1); return;
      case 2: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1, a2); return;
      case 3: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1, a2, a3); return;
      default: while (++i < l) (ev = events[i]).callback.apply(ev.ctx, args); return;
    }
  };

  var listenMethods = {listenTo: 'on', listenToOnce: 'once'};

  // Inversion-of-control versions of `on` and `once`. Tell *this* object to
  // listen to an event in another object ... keeping track of what it's
  // listening to.
  _.each(listenMethods, function(implementation, method) {
    Events[method] = function(obj, name, callback) {
      var listeningTo = this._listeningTo || (this._listeningTo = {});
      var id = obj._listenId || (obj._listenId = _.uniqueId('l'));
      listeningTo[id] = obj;
      if (!callback && typeof name === 'object') callback = this;
      obj[implementation](name, callback, this);
      return this;
    };
  });

  // Aliases for backwards compatibility.
  Events.bind   = Events.on;
  Events.unbind = Events.off;

  // Allow the `Backbone` object to serve as a global event bus, for folks who
  // want global "pubsub" in a convenient place.
  _.extend(Backbone, Events);

  // Backbone.Model
  // --------------

  // Backbone **Models** are the basic data object in the framework --
  // frequently representing a row in a table in a database on your server.
  // A discrete chunk of data and a bunch of useful, related methods for
  // performing computations and transformations on that data.

  // Create a new model with the specified attributes. A client id (`cid`)
  // is automatically generated and assigned for you.
  var Model = Backbone.Model = function(attributes, options) {
    var attrs = attributes || {};
    options || (options = {});
    this.cid = _.uniqueId('c');
    this.attributes = {};
    if (options.collection) this.collection = options.collection;
    if (options.parse) attrs = this.parse(attrs, options) || {};
    attrs = _.defaults({}, attrs, _.result(this, 'defaults'));
    this.set(attrs, options);
    this.changed = {};
    this.initialize.apply(this, arguments);
  };

  // Attach all inheritable methods to the Model prototype.
  _.extend(Model.prototype, Events, {

    // A hash of attributes whose current and previous value differ.
    changed: null,

    // The value returned during the last failed validation.
    validationError: null,

    // The default name for the JSON `id` attribute is `"id"`. MongoDB and
    // CouchDB users may want to set this to `"_id"`.
    idAttribute: 'id',

    // Initialize is an empty function by default. Override it with your own
    // initialization logic.
    initialize: function(){},

    // Return a copy of the model's `attributes` object.
    toJSON: function(options) {
      return _.clone(this.attributes);
    },

    // Proxy `Backbone.sync` by default -- but override this if you need
    // custom syncing semantics for *this* particular model.
    sync: function() {
      return Backbone.sync.apply(this, arguments);
    },

    // Get the value of an attribute.
    get: function(attr) {
      return this.attributes[attr];
    },

    // Get the HTML-escaped value of an attribute.
    escape: function(attr) {
      return _.escape(this.get(attr));
    },

    // Returns `true` if the attribute contains a value that is not null
    // or undefined.
    has: function(attr) {
      return this.get(attr) != null;
    },

    // Set a hash of model attributes on the object, firing `"change"`. This is
    // the core primitive operation of a model, updating the data and notifying
    // anyone who needs to know about the change in state. The heart of the beast.
    set: function(key, val, options) {
      var attr, attrs, unset, changes, silent, changing, prev, current;
      if (key == null) return this;

      // Handle both `"key", value` and `{key: value}` -style arguments.
      if (typeof key === 'object') {
        attrs = key;
        options = val;
      } else {
        (attrs = {})[key] = val;
      }

      options || (options = {});

      // Run validation.
      if (!this._validate(attrs, options)) return false;

      // Extract attributes and options.
      unset           = options.unset;
      silent          = options.silent;
      changes         = [];
      changing        = this._changing;
      this._changing  = true;

      if (!changing) {
        this._previousAttributes = _.clone(this.attributes);
        this.changed = {};
      }
      current = this.attributes, prev = this._previousAttributes;

      // Check for changes of `id`.
      if (this.idAttribute in attrs) this.id = attrs[this.idAttribute];

      // For each `set` attribute, update or delete the current value.
      for (attr in attrs) {
        val = attrs[attr];
        if (!_.isEqual(current[attr], val)) changes.push(attr);
        if (!_.isEqual(prev[attr], val)) {
          this.changed[attr] = val;
        } else {
          delete this.changed[attr];
        }
        unset ? delete current[attr] : current[attr] = val;
      }

      // Trigger all relevant attribute changes.
      if (!silent) {
        if (changes.length) this._pending = options;
        for (var i = 0, l = changes.length; i < l; i++) {
          this.trigger('change:' + changes[i], this, current[changes[i]], options);
        }
      }

      // You might be wondering why there's a `while` loop here. Changes can
      // be recursively nested within `"change"` events.
      if (changing) return this;
      if (!silent) {
        while (this._pending) {
          options = this._pending;
          this._pending = false;
          this.trigger('change', this, options);
        }
      }
      this._pending = false;
      this._changing = false;
      return this;
    },

    // Remove an attribute from the model, firing `"change"`. `unset` is a noop
    // if the attribute doesn't exist.
    unset: function(attr, options) {
      return this.set(attr, void 0, _.extend({}, options, {unset: true}));
    },

    // Clear all attributes on the model, firing `"change"`.
    clear: function(options) {
      var attrs = {};
      for (var key in this.attributes) attrs[key] = void 0;
      return this.set(attrs, _.extend({}, options, {unset: true}));
    },

    // Determine if the model has changed since the last `"change"` event.
    // If you specify an attribute name, determine if that attribute has changed.
    hasChanged: function(attr) {
      if (attr == null) return !_.isEmpty(this.changed);
      return _.has(this.changed, attr);
    },

    // Return an object containing all the attributes that have changed, or
    // false if there are no changed attributes. Useful for determining what
    // parts of a view need to be updated and/or what attributes need to be
    // persisted to the server. Unset attributes will be set to undefined.
    // You can also pass an attributes object to diff against the model,
    // determining if there *would be* a change.
    changedAttributes: function(diff) {
      if (!diff) return this.hasChanged() ? _.clone(this.changed) : false;
      var val, changed = false;
      var old = this._changing ? this._previousAttributes : this.attributes;
      for (var attr in diff) {
        if (_.isEqual(old[attr], (val = diff[attr]))) continue;
        (changed || (changed = {}))[attr] = val;
      }
      return changed;
    },

    // Get the previous value of an attribute, recorded at the time the last
    // `"change"` event was fired.
    previous: function(attr) {
      if (attr == null || !this._previousAttributes) return null;
      return this._previousAttributes[attr];
    },

    // Get all of the attributes of the model at the time of the previous
    // `"change"` event.
    previousAttributes: function() {
      return _.clone(this._previousAttributes);
    },

    // Fetch the model from the server. If the server's representation of the
    // model differs from its current attributes, they will be overridden,
    // triggering a `"change"` event.
    fetch: function(options) {
      options = options ? _.clone(options) : {};
      if (options.parse === void 0) options.parse = true;
      var model = this;
      var success = options.success;
      options.success = function(resp) {
        if (!model.set(model.parse(resp, options), options)) return false;
        if (success) success(model, resp, options);
        model.trigger('sync', model, resp, options);
      };
      wrapError(this, options);
      return this.sync('read', this, options);
    },

    // Set a hash of model attributes, and sync the model to the server.
    // If the server returns an attributes hash that differs, the model's
    // state will be `set` again.
    save: function(key, val, options) {
      var attrs, method, xhr, attributes = this.attributes;

      // Handle both `"key", value` and `{key: value}` -style arguments.
      if (key == null || typeof key === 'object') {
        attrs = key;
        options = val;
      } else {
        (attrs = {})[key] = val;
      }

      options = _.extend({validate: true}, options);

      // If we're not waiting and attributes exist, save acts as
      // `set(attr).save(null, opts)` with validation. Otherwise, check if
      // the model will be valid when the attributes, if any, are set.
      if (attrs && !options.wait) {
        if (!this.set(attrs, options)) return false;
      } else {
        if (!this._validate(attrs, options)) return false;
      }

      // Set temporary attributes if `{wait: true}`.
      if (attrs && options.wait) {
        this.attributes = _.extend({}, attributes, attrs);
      }

      // After a successful server-side save, the client is (optionally)
      // updated with the server-side state.
      if (options.parse === void 0) options.parse = true;
      var model = this;
      var success = options.success;
      options.success = function(resp) {
        // Ensure attributes are restored during synchronous saves.
        model.attributes = attributes;
        var serverAttrs = model.parse(resp, options);
        if (options.wait) serverAttrs = _.extend(attrs || {}, serverAttrs);
        if (_.isObject(serverAttrs) && !model.set(serverAttrs, options)) {
          return false;
        }
        if (success) success(model, resp, options);
        model.trigger('sync', model, resp, options);
      };
      wrapError(this, options);

      method = this.isNew() ? 'create' : (options.patch ? 'patch' : 'update');
      if (method === 'patch') options.attrs = attrs;
      xhr = this.sync(method, this, options);

      // Restore attributes.
      if (attrs && options.wait) this.attributes = attributes;

      return xhr;
    },

    // Destroy this model on the server if it was already persisted.
    // Optimistically removes the model from its collection, if it has one.
    // If `wait: true` is passed, waits for the server to respond before removal.
    destroy: function(options) {
      options = options ? _.clone(options) : {};
      var model = this;
      var success = options.success;

      var destroy = function() {
        model.trigger('destroy', model, model.collection, options);
      };

      options.success = function(resp) {
        if (options.wait || model.isNew()) destroy();
        if (success) success(model, resp, options);
        if (!model.isNew()) model.trigger('sync', model, resp, options);
      };

      if (this.isNew()) {
        options.success();
        return false;
      }
      wrapError(this, options);

      var xhr = this.sync('delete', this, options);
      if (!options.wait) destroy();
      return xhr;
    },

    // Default URL for the model's representation on the server -- if you're
    // using Backbone's restful methods, override this to change the endpoint
    // that will be called.
    url: function() {
      var base =
        _.result(this, 'urlRoot') ||
        _.result(this.collection, 'url') ||
        urlError();
      if (this.isNew()) return base;
      return base.replace(/([^\/])$/, '$1/') + encodeURIComponent(this.id);
    },

    // **parse** converts a response into the hash of attributes to be `set` on
    // the model. The default implementation is just to pass the response along.
    parse: function(resp, options) {
      return resp;
    },

    // Create a new model with identical attributes to this one.
    clone: function() {
      return new this.constructor(this.attributes);
    },

    // A model is new if it has never been saved to the server, and lacks an id.
    isNew: function() {
      return !this.has(this.idAttribute);
    },

    // Check if the model is currently in a valid state.
    isValid: function(options) {
      return this._validate({}, _.extend(options || {}, { validate: true }));
    },

    // Run validation against the next complete set of model attributes,
    // returning `true` if all is well. Otherwise, fire an `"invalid"` event.
    _validate: function(attrs, options) {
      if (!options.validate || !this.validate) return true;
      attrs = _.extend({}, this.attributes, attrs);
      var error = this.validationError = this.validate(attrs, options) || null;
      if (!error) return true;
      this.trigger('invalid', this, error, _.extend(options, {validationError: error}));
      return false;
    }

  });

  // Underscore methods that we want to implement on the Model.
  var modelMethods = ['keys', 'values', 'pairs', 'invert', 'pick', 'omit'];

  // Mix in each Underscore method as a proxy to `Model#attributes`.
  _.each(modelMethods, function(method) {
    Model.prototype[method] = function() {
      var args = slice.call(arguments);
      args.unshift(this.attributes);
      return _[method].apply(_, args);
    };
  });

  // Backbone.Collection
  // -------------------

  // If models tend to represent a single row of data, a Backbone Collection is
  // more analagous to a table full of data ... or a small slice or page of that
  // table, or a collection of rows that belong together for a particular reason
  // -- all of the messages in this particular folder, all of the documents
  // belonging to this particular author, and so on. Collections maintain
  // indexes of their models, both in order, and for lookup by `id`.

  // Create a new **Collection**, perhaps to contain a specific type of `model`.
  // If a `comparator` is specified, the Collection will maintain
  // its models in sort order, as they're added and removed.
  var Collection = Backbone.Collection = function(models, options) {
    options || (options = {});
    if (options.model) this.model = options.model;
    if (options.comparator !== void 0) this.comparator = options.comparator;
    this._reset();
    this.initialize.apply(this, arguments);
    if (models) this.reset(models, _.extend({silent: true}, options));
  };

  // Default options for `Collection#set`.
  var setOptions = {add: true, remove: true, merge: true};
  var addOptions = {add: true, remove: false};

  // Define the Collection's inheritable methods.
  _.extend(Collection.prototype, Events, {

    // The default model for a collection is just a **Backbone.Model**.
    // This should be overridden in most cases.
    model: Model,

    // Initialize is an empty function by default. Override it with your own
    // initialization logic.
    initialize: function(){},

    // The JSON representation of a Collection is an array of the
    // models' attributes.
    toJSON: function(options) {
      return this.map(function(model){ return model.toJSON(options); });
    },

    // Proxy `Backbone.sync` by default.
    sync: function() {
      return Backbone.sync.apply(this, arguments);
    },

    // Add a model, or list of models to the set.
    add: function(models, options) {
      return this.set(models, _.extend({merge: false}, options, addOptions));
    },

    // Remove a model, or a list of models from the set.
    remove: function(models, options) {
      var singular = !_.isArray(models);
      models = singular ? [models] : _.clone(models);
      options || (options = {});
      var i, l, index, model;
      for (i = 0, l = models.length; i < l; i++) {
        model = models[i] = this.get(models[i]);
        if (!model) continue;
        delete this._byId[model.id];
        delete this._byId[model.cid];
        index = this.indexOf(model);
        this.models.splice(index, 1);
        this.length--;
        if (!options.silent) {
          options.index = index;
          model.trigger('remove', model, this, options);
        }
        this._removeReference(model, options);
      }
      return singular ? models[0] : models;
    },

    // Update a collection by `set`-ing a new list of models, adding new ones,
    // removing models that are no longer present, and merging models that
    // already exist in the collection, as necessary. Similar to **Model#set**,
    // the core operation for updating the data contained by the collection.
    set: function(models, options) {
      options = _.defaults({}, options, setOptions);
      if (options.parse) models = this.parse(models, options);
      var singular = !_.isArray(models);
      models = singular ? (models ? [models] : []) : _.clone(models);
      var i, l, id, model, attrs, existing, sort;
      var at = options.at;
      var targetModel = this.model;
      var sortable = this.comparator && (at == null) && options.sort !== false;
      var sortAttr = _.isString(this.comparator) ? this.comparator : null;
      var toAdd = [], toRemove = [], modelMap = {};
      var add = options.add, merge = options.merge, remove = options.remove;
      var order = !sortable && add && remove ? [] : false;

      // Turn bare objects into model references, and prevent invalid models
      // from being added.
      for (i = 0, l = models.length; i < l; i++) {
        attrs = models[i] || {};
        if (attrs instanceof Model) {
          id = model = attrs;
        } else {
          id = attrs[targetModel.prototype.idAttribute || 'id'];
        }

        // If a duplicate is found, prevent it from being added and
        // optionally merge it into the existing model.
        if (existing = this.get(id)) {
          if (remove) modelMap[existing.cid] = true;
          if (merge) {
            attrs = attrs === model ? model.attributes : attrs;
            if (options.parse) attrs = existing.parse(attrs, options);
            existing.set(attrs, options);
            if (sortable && !sort && existing.hasChanged(sortAttr)) sort = true;
          }
          models[i] = existing;

        // If this is a new, valid model, push it to the `toAdd` list.
        } else if (add) {
          model = models[i] = this._prepareModel(attrs, options);
          if (!model) continue;
          toAdd.push(model);
          this._addReference(model, options);
        }

        // Do not add multiple models with the same `id`.
        model = existing || model;
        if (order && (model.isNew() || !modelMap[model.id])) order.push(model);
        modelMap[model.id] = true;
      }

      // Remove nonexistent models if appropriate.
      if (remove) {
        for (i = 0, l = this.length; i < l; ++i) {
          if (!modelMap[(model = this.models[i]).cid]) toRemove.push(model);
        }
        if (toRemove.length) this.remove(toRemove, options);
      }

      // See if sorting is needed, update `length` and splice in new models.
      if (toAdd.length || (order && order.length)) {
        if (sortable) sort = true;
        this.length += toAdd.length;
        if (at != null) {
          for (i = 0, l = toAdd.length; i < l; i++) {
            this.models.splice(at + i, 0, toAdd[i]);
          }
        } else {
          if (order) this.models.length = 0;
          var orderedModels = order || toAdd;
          for (i = 0, l = orderedModels.length; i < l; i++) {
            this.models.push(orderedModels[i]);
          }
        }
      }

      // Silently sort the collection if appropriate.
      if (sort) this.sort({silent: true});

      // Unless silenced, it's time to fire all appropriate add/sort events.
      if (!options.silent) {
        for (i = 0, l = toAdd.length; i < l; i++) {
          (model = toAdd[i]).trigger('add', model, this, options);
        }
        if (sort || (order && order.length)) this.trigger('sort', this, options);
      }

      // Return the added (or merged) model (or models).
      return singular ? models[0] : models;
    },

    // When you have more items than you want to add or remove individually,
    // you can reset the entire set with a new list of models, without firing
    // any granular `add` or `remove` events. Fires `reset` when finished.
    // Useful for bulk operations and optimizations.
    reset: function(models, options) {
      options || (options = {});
      for (var i = 0, l = this.models.length; i < l; i++) {
        this._removeReference(this.models[i], options);
      }
      options.previousModels = this.models;
      this._reset();
      models = this.add(models, _.extend({silent: true}, options));
      if (!options.silent) this.trigger('reset', this, options);
      return models;
    },

    // Add a model to the end of the collection.
    push: function(model, options) {
      return this.add(model, _.extend({at: this.length}, options));
    },

    // Remove a model from the end of the collection.
    pop: function(options) {
      var model = this.at(this.length - 1);
      this.remove(model, options);
      return model;
    },

    // Add a model to the beginning of the collection.
    unshift: function(model, options) {
      return this.add(model, _.extend({at: 0}, options));
    },

    // Remove a model from the beginning of the collection.
    shift: function(options) {
      var model = this.at(0);
      this.remove(model, options);
      return model;
    },

    // Slice out a sub-array of models from the collection.
    slice: function() {
      return slice.apply(this.models, arguments);
    },

    // Get a model from the set by id.
    get: function(obj) {
      if (obj == null) return void 0;
      return this._byId[obj] || this._byId[obj.id] || this._byId[obj.cid];
    },

    // Get the model at the given index.
    at: function(index) {
      return this.models[index];
    },

    // Return models with matching attributes. Useful for simple cases of
    // `filter`.
    where: function(attrs, first) {
      if (_.isEmpty(attrs)) return first ? void 0 : [];
      return this[first ? 'find' : 'filter'](function(model) {
        for (var key in attrs) {
          if (attrs[key] !== model.get(key)) return false;
        }
        return true;
      });
    },

    // Return the first model with matching attributes. Useful for simple cases
    // of `find`.
    findWhere: function(attrs) {
      return this.where(attrs, true);
    },

    // Force the collection to re-sort itself. You don't need to call this under
    // normal circumstances, as the set will maintain sort order as each item
    // is added.
    sort: function(options) {
      if (!this.comparator) throw new Error('Cannot sort a set without a comparator');
      options || (options = {});

      // Run sort based on type of `comparator`.
      if (_.isString(this.comparator) || this.comparator.length === 1) {
        this.models = this.sortBy(this.comparator, this);
      } else {
        this.models.sort(_.bind(this.comparator, this));
      }

      if (!options.silent) this.trigger('sort', this, options);
      return this;
    },

    // Pluck an attribute from each model in the collection.
    pluck: function(attr) {
      return _.invoke(this.models, 'get', attr);
    },

    // Fetch the default set of models for this collection, resetting the
    // collection when they arrive. If `reset: true` is passed, the response
    // data will be passed through the `reset` method instead of `set`.
    fetch: function(options) {
      options = options ? _.clone(options) : {};
      if (options.parse === void 0) options.parse = true;
      var success = options.success;
      var collection = this;
      options.success = function(resp) {
        var method = options.reset ? 'reset' : 'set';
        collection[method](resp, options);
        if (success) success(collection, resp, options);
        collection.trigger('sync', collection, resp, options);
      };
      wrapError(this, options);
      return this.sync('read', this, options);
    },

    // Create a new instance of a model in this collection. Add the model to the
    // collection immediately, unless `wait: true` is passed, in which case we
    // wait for the server to agree.
    create: function(model, options) {
      options = options ? _.clone(options) : {};
      if (!(model = this._prepareModel(model, options))) return false;
      if (!options.wait) this.add(model, options);
      var collection = this;
      var success = options.success;
      options.success = function(model, resp) {
        if (options.wait) collection.add(model, options);
        if (success) success(model, resp, options);
      };
      model.save(null, options);
      return model;
    },

    // **parse** converts a response into a list of models to be added to the
    // collection. The default implementation is just to pass it through.
    parse: function(resp, options) {
      return resp;
    },

    // Create a new collection with an identical list of models as this one.
    clone: function() {
      return new this.constructor(this.models);
    },

    // Private method to reset all internal state. Called when the collection
    // is first initialized or reset.
    _reset: function() {
      this.length = 0;
      this.models = [];
      this._byId  = {};
    },

    // Prepare a hash of attributes (or other model) to be added to this
    // collection.
    _prepareModel: function(attrs, options) {
      if (attrs instanceof Model) return attrs;
      options = options ? _.clone(options) : {};
      options.collection = this;
      var model = new this.model(attrs, options);
      if (!model.validationError) return model;
      this.trigger('invalid', this, model.validationError, options);
      return false;
    },

    // Internal method to create a model's ties to a collection.
    _addReference: function(model, options) {
      this._byId[model.cid] = model;
      if (model.id != null) this._byId[model.id] = model;
      if (!model.collection) model.collection = this;
      model.on('all', this._onModelEvent, this);
    },

    // Internal method to sever a model's ties to a collection.
    _removeReference: function(model, options) {
      if (this === model.collection) delete model.collection;
      model.off('all', this._onModelEvent, this);
    },

    // Internal method called every time a model in the set fires an event.
    // Sets need to update their indexes when models change ids. All other
    // events simply proxy through. "add" and "remove" events that originate
    // in other collections are ignored.
    _onModelEvent: function(event, model, collection, options) {
      if ((event === 'add' || event === 'remove') && collection !== this) return;
      if (event === 'destroy') this.remove(model, options);
      if (model && event === 'change:' + model.idAttribute) {
        delete this._byId[model.previous(model.idAttribute)];
        if (model.id != null) this._byId[model.id] = model;
      }
      this.trigger.apply(this, arguments);
    }

  });

  // Underscore methods that we want to implement on the Collection.
  // 90% of the core usefulness of Backbone Collections is actually implemented
  // right here:
  var methods = ['forEach', 'each', 'map', 'collect', 'reduce', 'foldl',
    'inject', 'reduceRight', 'foldr', 'find', 'detect', 'filter', 'select',
    'reject', 'every', 'all', 'some', 'any', 'include', 'contains', 'invoke',
    'max', 'min', 'toArray', 'size', 'first', 'head', 'take', 'initial', 'rest',
    'tail', 'drop', 'last', 'without', 'difference', 'indexOf', 'shuffle',
    'lastIndexOf', 'isEmpty', 'chain', 'sample'];

  // Mix in each Underscore method as a proxy to `Collection#models`.
  _.each(methods, function(method) {
    Collection.prototype[method] = function() {
      var args = slice.call(arguments);
      args.unshift(this.models);
      return _[method].apply(_, args);
    };
  });

  // Underscore methods that take a property name as an argument.
  var attributeMethods = ['groupBy', 'countBy', 'sortBy', 'indexBy'];

  // Use attributes instead of properties.
  _.each(attributeMethods, function(method) {
    Collection.prototype[method] = function(value, context) {
      var iterator = _.isFunction(value) ? value : function(model) {
        return model.get(value);
      };
      return _[method](this.models, iterator, context);
    };
  });

  // Backbone.View
  // -------------

  // Backbone Views are almost more convention than they are actual code. A View
  // is simply a JavaScript object that represents a logical chunk of UI in the
  // DOM. This might be a single item, an entire list, a sidebar or panel, or
  // even the surrounding frame which wraps your whole app. Defining a chunk of
  // UI as a **View** allows you to define your DOM events declaratively, without
  // having to worry about render order ... and makes it easy for the view to
  // react to specific changes in the state of your models.

  // Creating a Backbone.View creates its initial element outside of the DOM,
  // if an existing element is not provided...
  var View = Backbone.View = function(options) {
    this.cid = _.uniqueId('view');
    options || (options = {});
    _.extend(this, _.pick(options, viewOptions));
    this._ensureElement();
    this.initialize.apply(this, arguments);
    this.delegateEvents();
  };

  // Cached regex to split keys for `delegate`.
  var delegateEventSplitter = /^(\S+)\s*(.*)$/;

  // List of view options to be merged as properties.
  var viewOptions = ['model', 'collection', 'el', 'id', 'attributes', 'className', 'tagName', 'events'];

  // Set up all inheritable **Backbone.View** properties and methods.
  _.extend(View.prototype, Events, {

    // The default `tagName` of a View's element is `"div"`.
    tagName: 'div',

    // jQuery delegate for element lookup, scoped to DOM elements within the
    // current view. This should be preferred to global lookups where possible.
    $: function(selector) {
      return this.$el.find(selector);
    },

    // Initialize is an empty function by default. Override it with your own
    // initialization logic.
    initialize: function(){},

    // **render** is the core function that your view should override, in order
    // to populate its element (`this.el`), with the appropriate HTML. The
    // convention is for **render** to always return `this`.
    render: function() {
      return this;
    },

    // Remove this view by taking the element out of the DOM, and removing any
    // applicable Backbone.Events listeners.
    remove: function() {
      this.$el.remove();
      this.stopListening();
      return this;
    },

    // Change the view's element (`this.el` property), including event
    // re-delegation.
    setElement: function(element, delegate) {
      if (this.$el) this.undelegateEvents();
      this.$el = element instanceof Backbone.$ ? element : Backbone.$(element);
      this.el = this.$el[0];
      if (delegate !== false) this.delegateEvents();
      return this;
    },

    // Set callbacks, where `this.events` is a hash of
    //
    // *{"event selector": "callback"}*
    //
    //     {
    //       'mousedown .title':  'edit',
    //       'click .button':     'save',
    //       'click .open':       function(e) { ... }
    //     }
    //
    // pairs. Callbacks will be bound to the view, with `this` set properly.
    // Uses event delegation for efficiency.
    // Omitting the selector binds the event to `this.el`.
    // This only works for delegate-able events: not `focus`, `blur`, and
    // not `change`, `submit`, and `reset` in Internet Explorer.
    delegateEvents: function(events) {
      if (!(events || (events = _.result(this, 'events')))) return this;
      this.undelegateEvents();
      for (var key in events) {
        var method = events[key];
        if (!_.isFunction(method)) method = this[events[key]];
        if (!method) continue;

        var match = key.match(delegateEventSplitter);
        var eventName = match[1], selector = match[2];
        method = _.bind(method, this);
        eventName += '.delegateEvents' + this.cid;
        if (selector === '') {
          this.$el.on(eventName, method);
        } else {
          this.$el.on(eventName, selector, method);
        }
      }
      return this;
    },

    // Clears all callbacks previously bound to the view with `delegateEvents`.
    // You usually don't need to use this, but may wish to if you have multiple
    // Backbone views attached to the same DOM element.
    undelegateEvents: function() {
      this.$el.off('.delegateEvents' + this.cid);
      return this;
    },

    // Ensure that the View has a DOM element to render into.
    // If `this.el` is a string, pass it through `$()`, take the first
    // matching element, and re-assign it to `el`. Otherwise, create
    // an element from the `id`, `className` and `tagName` properties.
    _ensureElement: function() {
      if (!this.el) {
        var attrs = _.extend({}, _.result(this, 'attributes'));
        if (this.id) attrs.id = _.result(this, 'id');
        if (this.className) attrs['class'] = _.result(this, 'className');
        var $el = Backbone.$('<' + _.result(this, 'tagName') + '>').attr(attrs);
        this.setElement($el, false);
      } else {
        this.setElement(_.result(this, 'el'), false);
      }
    }

  });

  // Backbone.sync
  // -------------

  // Override this function to change the manner in which Backbone persists
  // models to the server. You will be passed the type of request, and the
  // model in question. By default, makes a RESTful Ajax request
  // to the model's `url()`. Some possible customizations could be:
  //
  // * Use `setTimeout` to batch rapid-fire updates into a single request.
  // * Send up the models as XML instead of JSON.
  // * Persist models via WebSockets instead of Ajax.
  //
  // Turn on `Backbone.emulateHTTP` in order to send `PUT` and `DELETE` requests
  // as `POST`, with a `_method` parameter containing the true HTTP method,
  // as well as all requests with the body as `application/x-www-form-urlencoded`
  // instead of `application/json` with the model in a param named `model`.
  // Useful when interfacing with server-side languages like **PHP** that make
  // it difficult to read the body of `PUT` requests.
  Backbone.sync = function(method, model, options) {
    var type = methodMap[method];

    // Default options, unless specified.
    _.defaults(options || (options = {}), {
      emulateHTTP: Backbone.emulateHTTP,
      emulateJSON: Backbone.emulateJSON
    });

    // Default JSON-request options.
    var params = {type: type, dataType: 'json'};

    // Ensure that we have a URL.
    if (!options.url) {
      params.url = _.result(model, 'url') || urlError();
    }

    // Ensure that we have the appropriate request data.
    if (options.data == null && model && (method === 'create' || method === 'update' || method === 'patch')) {
      params.contentType = 'application/json';
      params.data = JSON.stringify(options.attrs || model.toJSON(options));
    }

    // For older servers, emulate JSON by encoding the request into an HTML-form.
    if (options.emulateJSON) {
      params.contentType = 'application/x-www-form-urlencoded';
      params.data = params.data ? {model: params.data} : {};
    }

    // For older servers, emulate HTTP by mimicking the HTTP method with `_method`
    // And an `X-HTTP-Method-Override` header.
    if (options.emulateHTTP && (type === 'PUT' || type === 'DELETE' || type === 'PATCH')) {
      params.type = 'POST';
      if (options.emulateJSON) params.data._method = type;
      var beforeSend = options.beforeSend;
      options.beforeSend = function(xhr) {
        xhr.setRequestHeader('X-HTTP-Method-Override', type);
        if (beforeSend) return beforeSend.apply(this, arguments);
      };
    }

    // Don't process data on a non-GET request.
    if (params.type !== 'GET' && !options.emulateJSON) {
      params.processData = false;
    }

    // If we're sending a `PATCH` request, and we're in an old Internet Explorer
    // that still has ActiveX enabled by default, override jQuery to use that
    // for XHR instead. Remove this line when jQuery supports `PATCH` on IE8.
    if (params.type === 'PATCH' && noXhrPatch) {
      params.xhr = function() {
        return new ActiveXObject("Microsoft.XMLHTTP");
      };
    }

    // Make the request, allowing the user to override any Ajax options.
    var xhr = options.xhr = Backbone.ajax(_.extend(params, options));
    model.trigger('request', model, xhr, options);
    return xhr;
  };

  var noXhrPatch =
    typeof window !== 'undefined' && !!window.ActiveXObject &&
      !(window.XMLHttpRequest && (new XMLHttpRequest).dispatchEvent);

  // Map from CRUD to HTTP for our default `Backbone.sync` implementation.
  var methodMap = {
    'create': 'POST',
    'update': 'PUT',
    'patch':  'PATCH',
    'delete': 'DELETE',
    'read':   'GET'
  };

  // Set the default implementation of `Backbone.ajax` to proxy through to `$`.
  // Override this if you'd like to use a different library.
  Backbone.ajax = function() {
    return Backbone.$.ajax.apply(Backbone.$, arguments);
  };

  // Backbone.Router
  // ---------------

  // Routers map faux-URLs to actions, and fire events when routes are
  // matched. Creating a new one sets its `routes` hash, if not set statically.
  var Router = Backbone.Router = function(options) {
    options || (options = {});
    if (options.routes) this.routes = options.routes;
    this._bindRoutes();
    this.initialize.apply(this, arguments);
  };

  // Cached regular expressions for matching named param parts and splatted
  // parts of route strings.
  var optionalParam = /\((.*?)\)/g;
  var namedParam    = /(\(\?)?:\w+/g;
  var splatParam    = /\*\w+/g;
  var escapeRegExp  = /[\-{}\[\]+?.,\\\^$|#\s]/g;

  // Set up all inheritable **Backbone.Router** properties and methods.
  _.extend(Router.prototype, Events, {

    // Initialize is an empty function by default. Override it with your own
    // initialization logic.
    initialize: function(){},

    // Manually bind a single named route to a callback. For example:
    //
    //     this.route('search/:query/p:num', 'search', function(query, num) {
    //       ...
    //     });
    //
    route: function(route, name, callback) {
      if (!_.isRegExp(route)) route = this._routeToRegExp(route);
      if (_.isFunction(name)) {
        callback = name;
        name = '';
      }
      if (!callback) callback = this[name];
      var router = this;
      Backbone.history.route(route, function(fragment) {
        var args = router._extractParameters(route, fragment);
        router.execute(callback, args);
        router.trigger.apply(router, ['route:' + name].concat(args));
        router.trigger('route', name, args);
        Backbone.history.trigger('route', router, name, args);
      });
      return this;
    },

    // Execute a route handler with the provided parameters.  This is an
    // excellent place to do pre-route setup or post-route cleanup.
    execute: function(callback, args) {
      if (callback) callback.apply(this, args);
    },

    // Simple proxy to `Backbone.history` to save a fragment into the history.
    navigate: function(fragment, options) {
      Backbone.history.navigate(fragment, options);
      return this;
    },

    // Bind all defined routes to `Backbone.history`. We have to reverse the
    // order of the routes here to support behavior where the most general
    // routes can be defined at the bottom of the route map.
    _bindRoutes: function() {
      if (!this.routes) return;
      this.routes = _.result(this, 'routes');
      var route, routes = _.keys(this.routes);
      while ((route = routes.pop()) != null) {
        this.route(route, this.routes[route]);
      }
    },

    // Convert a route string into a regular expression, suitable for matching
    // against the current location hash.
    _routeToRegExp: function(route) {
      route = route.replace(escapeRegExp, '\\$&')
                   .replace(optionalParam, '(?:$1)?')
                   .replace(namedParam, function(match, optional) {
                     return optional ? match : '([^/?]+)';
                   })
                   .replace(splatParam, '([^?]*?)');
      return new RegExp('^' + route + '(?:\\?([\\s\\S]*))?$');
    },

    // Given a route, and a URL fragment that it matches, return the array of
    // extracted decoded parameters. Empty or unmatched parameters will be
    // treated as `null` to normalize cross-browser behavior.
    _extractParameters: function(route, fragment) {
      var params = route.exec(fragment).slice(1);
      return _.map(params, function(param, i) {
        // Don't decode the search params.
        if (i === params.length - 1) return param || null;
        return param ? decodeURIComponent(param) : null;
      });
    }

  });

  // Backbone.History
  // ----------------

  // Handles cross-browser history management, based on either
  // [pushState](http://diveintohtml5.info/history.html) and real URLs, or
  // [onhashchange](https://developer.mozilla.org/en-US/docs/DOM/window.onhashchange)
  // and URL fragments. If the browser supports neither (old IE, natch),
  // falls back to polling.
  var History = Backbone.History = function() {
    this.handlers = [];
    _.bindAll(this, 'checkUrl');

    // Ensure that `History` can be used outside of the browser.
    if (typeof window !== 'undefined') {
      this.location = window.location;
      this.history = window.history;
    }
  };

  // Cached regex for stripping a leading hash/slash and trailing space.
  var routeStripper = /^[#\/]|\s+$/g;

  // Cached regex for stripping leading and trailing slashes.
  var rootStripper = /^\/+|\/+$/g;

  // Cached regex for detecting MSIE.
  var isExplorer = /msie [\w.]+/;

  // Cached regex for removing a trailing slash.
  var trailingSlash = /\/$/;

  // Cached regex for stripping urls of hash.
  var pathStripper = /#.*$/;

  // Has the history handling already been started?
  History.started = false;

  // Set up all inheritable **Backbone.History** properties and methods.
  _.extend(History.prototype, Events, {

    // The default interval to poll for hash changes, if necessary, is
    // twenty times a second.
    interval: 50,

    // Are we at the app root?
    atRoot: function() {
      return this.location.pathname.replace(/[^\/]$/, '$&/') === this.root;
    },

    // Gets the true hash value. Cannot use location.hash directly due to bug
    // in Firefox where location.hash will always be decoded.
    getHash: function(window) {
      var match = (window || this).location.href.match(/#(.*)$/);
      return match ? match[1] : '';
    },

    // Get the cross-browser normalized URL fragment, either from the URL,
    // the hash, or the override.
    getFragment: function(fragment, forcePushState) {
      if (fragment == null) {
        if (this._hasPushState || !this._wantsHashChange || forcePushState) {
          fragment = decodeURI(this.location.pathname + this.location.search);
          var root = this.root.replace(trailingSlash, '');
          if (!fragment.indexOf(root)) fragment = fragment.slice(root.length);
        } else {
          fragment = this.getHash();
        }
      }
      return fragment.replace(routeStripper, '');
    },

    // Start the hash change handling, returning `true` if the current URL matches
    // an existing route, and `false` otherwise.
    start: function(options) {
      if (History.started) throw new Error("Backbone.history has already been started");
      History.started = true;

      // Figure out the initial configuration. Do we need an iframe?
      // Is pushState desired ... is it available?
      this.options          = _.extend({root: '/'}, this.options, options);
      this.root             = this.options.root;
      this._wantsHashChange = this.options.hashChange !== false;
      this._wantsPushState  = !!this.options.pushState;
      this._hasPushState    = !!(this.options.pushState && this.history && this.history.pushState);
      var fragment          = this.getFragment();
      var docMode           = document.documentMode;
      var oldIE             = (isExplorer.exec(navigator.userAgent.toLowerCase()) && (!docMode || docMode <= 7));

      // Normalize root to always include a leading and trailing slash.
      this.root = ('/' + this.root + '/').replace(rootStripper, '/');

      if (oldIE && this._wantsHashChange) {
        var frame = Backbone.$('<iframe src="javascript:0" tabindex="-1">');
        this.iframe = frame.hide().appendTo('body')[0].contentWindow;
        this.navigate(fragment);
      }

      // Depending on whether we're using pushState or hashes, and whether
      // 'onhashchange' is supported, determine how we check the URL state.
      if (this._hasPushState) {
        Backbone.$(window).on('popstate', this.checkUrl);
      } else if (this._wantsHashChange && ('onhashchange' in window) && !oldIE) {
        Backbone.$(window).on('hashchange', this.checkUrl);
      } else if (this._wantsHashChange) {
        this._checkUrlInterval = setInterval(this.checkUrl, this.interval);
      }

      // Determine if we need to change the base url, for a pushState link
      // opened by a non-pushState browser.
      this.fragment = fragment;
      var loc = this.location;

      // Transition from hashChange to pushState or vice versa if both are
      // requested.
      if (this._wantsHashChange && this._wantsPushState) {

        // If we've started off with a route from a `pushState`-enabled
        // browser, but we're currently in a browser that doesn't support it...
        if (!this._hasPushState && !this.atRoot()) {
          this.fragment = this.getFragment(null, true);
          this.location.replace(this.root + '#' + this.fragment);
          // Return immediately as browser will do redirect to new url
          return true;

        // Or if we've started out with a hash-based route, but we're currently
        // in a browser where it could be `pushState`-based instead...
        } else if (this._hasPushState && this.atRoot() && loc.hash) {
          this.fragment = this.getHash().replace(routeStripper, '');
          this.history.replaceState({}, document.title, this.root + this.fragment);
        }

      }

      if (!this.options.silent) return this.loadUrl();
    },

    // Disable Backbone.history, perhaps temporarily. Not useful in a real app,
    // but possibly useful for unit testing Routers.
    stop: function() {
      Backbone.$(window).off('popstate', this.checkUrl).off('hashchange', this.checkUrl);
      if (this._checkUrlInterval) clearInterval(this._checkUrlInterval);
      History.started = false;
    },

    // Add a route to be tested when the fragment changes. Routes added later
    // may override previous routes.
    route: function(route, callback) {
      this.handlers.unshift({route: route, callback: callback});
    },

    // Checks the current URL to see if it has changed, and if it has,
    // calls `loadUrl`, normalizing across the hidden iframe.
    checkUrl: function(e) {
      var current = this.getFragment();
      if (current === this.fragment && this.iframe) {
        current = this.getFragment(this.getHash(this.iframe));
      }
      if (current === this.fragment) return false;
      if (this.iframe) this.navigate(current);
      this.loadUrl();
    },

    // Attempt to load the current URL fragment. If a route succeeds with a
    // match, returns `true`. If no defined routes matches the fragment,
    // returns `false`.
    loadUrl: function(fragment) {
      fragment = this.fragment = this.getFragment(fragment);
      return _.any(this.handlers, function(handler) {
        if (handler.route.test(fragment)) {
          handler.callback(fragment);
          return true;
        }
      });
    },

    // Save a fragment into the hash history, or replace the URL state if the
    // 'replace' option is passed. You are responsible for properly URL-encoding
    // the fragment in advance.
    //
    // The options object can contain `trigger: true` if you wish to have the
    // route callback be fired (not usually desirable), or `replace: true`, if
    // you wish to modify the current URL without adding an entry to the history.
    navigate: function(fragment, options) {
      if (!History.started) return false;
      if (!options || options === true) options = {trigger: !!options};

      var url = this.root + (fragment = this.getFragment(fragment || ''));

      // Strip the hash for matching.
      fragment = fragment.replace(pathStripper, '');

      if (this.fragment === fragment) return;
      this.fragment = fragment;

      // Don't include a trailing slash on the root.
      if (fragment === '' && url !== '/') url = url.slice(0, -1);

      // If pushState is available, we use it to set the fragment as a real URL.
      if (this._hasPushState) {
        this.history[options.replace ? 'replaceState' : 'pushState']({}, document.title, url);

      // If hash changes haven't been explicitly disabled, update the hash
      // fragment to store history.
      } else if (this._wantsHashChange) {
        this._updateHash(this.location, fragment, options.replace);
        if (this.iframe && (fragment !== this.getFragment(this.getHash(this.iframe)))) {
          // Opening and closing the iframe tricks IE7 and earlier to push a
          // history entry on hash-tag change.  When replace is true, we don't
          // want this.
          if(!options.replace) this.iframe.document.open().close();
          this._updateHash(this.iframe.location, fragment, options.replace);
        }

      // If you've told us that you explicitly don't want fallback hashchange-
      // based history, then `navigate` becomes a page refresh.
      } else {
        return this.location.assign(url);
      }
      if (options.trigger) return this.loadUrl(fragment);
    },

    // Update the hash location, either replacing the current entry, or adding
    // a new one to the browser history.
    _updateHash: function(location, fragment, replace) {
      if (replace) {
        var href = location.href.replace(/(javascript:|#).*$/, '');
        location.replace(href + '#' + fragment);
      } else {
        // Some browsers require that `hash` contains a leading #.
        location.hash = '#' + fragment;
      }
    }

  });

  // Create the default Backbone.history.
  Backbone.history = new History;

  // Helpers
  // -------

  // Helper function to correctly set up the prototype chain, for subclasses.
  // Similar to `goog.inherits`, but uses a hash of prototype properties and
  // class properties to be extended.
  var extend = function(protoProps, staticProps) {
    var parent = this;
    var child;

    // The constructor function for the new subclass is either defined by you
    // (the "constructor" property in your `extend` definition), or defaulted
    // by us to simply call the parent's constructor.
    if (protoProps && _.has(protoProps, 'constructor')) {
      child = protoProps.constructor;
    } else {
      child = function(){ return parent.apply(this, arguments); };
    }

    // Add static properties to the constructor function, if supplied.
    _.extend(child, parent, staticProps);

    // Set the prototype chain to inherit from `parent`, without calling
    // `parent`'s constructor function.
    var Surrogate = function(){ this.constructor = child; };
    Surrogate.prototype = parent.prototype;
    child.prototype = new Surrogate;

    // Add prototype properties (instance properties) to the subclass,
    // if supplied.
    if (protoProps) _.extend(child.prototype, protoProps);

    // Set a convenience property in case the parent's prototype is needed
    // later.
    child.__super__ = parent.prototype;

    return child;
  };

  // Set up inheritance for the model, collection, router, view and history.
  Model.extend = Collection.extend = Router.extend = View.extend = History.extend = extend;

  // Throw an error when a URL is needed, and none is supplied.
  var urlError = function() {
    throw new Error('A "url" property or function must be specified');
  };

  // Wrap an optional error callback with a fallback error event.
  var wrapError = function(model, options) {
    var error = options.error;
    options.error = function(resp) {
      if (error) error(model, resp, options);
      model.trigger('error', model, resp, options);
    };
  };

  return Backbone;

}));

},{"underscore":27}],27:[function(require,module,exports){
//     Underscore.js 1.6.0
//     http://underscorejs.org
//     (c) 2009-2014 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
//     Underscore may be freely distributed under the MIT license.

(function() {

  // Baseline setup
  // --------------

  // Establish the root object, `window` in the browser, or `exports` on the server.
  var root = this;

  // Save the previous value of the `_` variable.
  var previousUnderscore = root._;

  // Establish the object that gets returned to break out of a loop iteration.
  var breaker = {};

  // Save bytes in the minified (but not gzipped) version:
  var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;

  // Create quick reference variables for speed access to core prototypes.
  var
    push             = ArrayProto.push,
    slice            = ArrayProto.slice,
    concat           = ArrayProto.concat,
    toString         = ObjProto.toString,
    hasOwnProperty   = ObjProto.hasOwnProperty;

  // All **ECMAScript 5** native function implementations that we hope to use
  // are declared here.
  var
    nativeForEach      = ArrayProto.forEach,
    nativeMap          = ArrayProto.map,
    nativeReduce       = ArrayProto.reduce,
    nativeReduceRight  = ArrayProto.reduceRight,
    nativeFilter       = ArrayProto.filter,
    nativeEvery        = ArrayProto.every,
    nativeSome         = ArrayProto.some,
    nativeIndexOf      = ArrayProto.indexOf,
    nativeLastIndexOf  = ArrayProto.lastIndexOf,
    nativeIsArray      = Array.isArray,
    nativeKeys         = Object.keys,
    nativeBind         = FuncProto.bind;

  // Create a safe reference to the Underscore object for use below.
  var _ = function(obj) {
    if (obj instanceof _) return obj;
    if (!(this instanceof _)) return new _(obj);
    this._wrapped = obj;
  };

  // Export the Underscore object for **Node.js**, with
  // backwards-compatibility for the old `require()` API. If we're in
  // the browser, add `_` as a global object via a string identifier,
  // for Closure Compiler "advanced" mode.
  if (typeof exports !== 'undefined') {
    if (typeof module !== 'undefined' && module.exports) {
      exports = module.exports = _;
    }
    exports._ = _;
  } else {
    root._ = _;
  }

  // Current version.
  _.VERSION = '1.6.0';

  // Collection Functions
  // --------------------

  // The cornerstone, an `each` implementation, aka `forEach`.
  // Handles objects with the built-in `forEach`, arrays, and raw objects.
  // Delegates to **ECMAScript 5**'s native `forEach` if available.
  var each = _.each = _.forEach = function(obj, iterator, context) {
    if (obj == null) return obj;
    if (nativeForEach && obj.forEach === nativeForEach) {
      obj.forEach(iterator, context);
    } else if (obj.length === +obj.length) {
      for (var i = 0, length = obj.length; i < length; i++) {
        if (iterator.call(context, obj[i], i, obj) === breaker) return;
      }
    } else {
      var keys = _.keys(obj);
      for (var i = 0, length = keys.length; i < length; i++) {
        if (iterator.call(context, obj[keys[i]], keys[i], obj) === breaker) return;
      }
    }
    return obj;
  };

  // Return the results of applying the iterator to each element.
  // Delegates to **ECMAScript 5**'s native `map` if available.
  _.map = _.collect = function(obj, iterator, context) {
    var results = [];
    if (obj == null) return results;
    if (nativeMap && obj.map === nativeMap) return obj.map(iterator, context);
    each(obj, function(value, index, list) {
      results.push(iterator.call(context, value, index, list));
    });
    return results;
  };

  var reduceError = 'Reduce of empty array with no initial value';

  // **Reduce** builds up a single result from a list of values, aka `inject`,
  // or `foldl`. Delegates to **ECMAScript 5**'s native `reduce` if available.
  _.reduce = _.foldl = _.inject = function(obj, iterator, memo, context) {
    var initial = arguments.length > 2;
    if (obj == null) obj = [];
    if (nativeReduce && obj.reduce === nativeReduce) {
      if (context) iterator = _.bind(iterator, context);
      return initial ? obj.reduce(iterator, memo) : obj.reduce(iterator);
    }
    each(obj, function(value, index, list) {
      if (!initial) {
        memo = value;
        initial = true;
      } else {
        memo = iterator.call(context, memo, value, index, list);
      }
    });
    if (!initial) throw new TypeError(reduceError);
    return memo;
  };

  // The right-associative version of reduce, also known as `foldr`.
  // Delegates to **ECMAScript 5**'s native `reduceRight` if available.
  _.reduceRight = _.foldr = function(obj, iterator, memo, context) {
    var initial = arguments.length > 2;
    if (obj == null) obj = [];
    if (nativeReduceRight && obj.reduceRight === nativeReduceRight) {
      if (context) iterator = _.bind(iterator, context);
      return initial ? obj.reduceRight(iterator, memo) : obj.reduceRight(iterator);
    }
    var length = obj.length;
    if (length !== +length) {
      var keys = _.keys(obj);
      length = keys.length;
    }
    each(obj, function(value, index, list) {
      index = keys ? keys[--length] : --length;
      if (!initial) {
        memo = obj[index];
        initial = true;
      } else {
        memo = iterator.call(context, memo, obj[index], index, list);
      }
    });
    if (!initial) throw new TypeError(reduceError);
    return memo;
  };

  // Return the first value which passes a truth test. Aliased as `detect`.
  _.find = _.detect = function(obj, predicate, context) {
    var result;
    any(obj, function(value, index, list) {
      if (predicate.call(context, value, index, list)) {
        result = value;
        return true;
      }
    });
    return result;
  };

  // Return all the elements that pass a truth test.
  // Delegates to **ECMAScript 5**'s native `filter` if available.
  // Aliased as `select`.
  _.filter = _.select = function(obj, predicate, context) {
    var results = [];
    if (obj == null) return results;
    if (nativeFilter && obj.filter === nativeFilter) return obj.filter(predicate, context);
    each(obj, function(value, index, list) {
      if (predicate.call(context, value, index, list)) results.push(value);
    });
    return results;
  };

  // Return all the elements for which a truth test fails.
  _.reject = function(obj, predicate, context) {
    return _.filter(obj, function(value, index, list) {
      return !predicate.call(context, value, index, list);
    }, context);
  };

  // Determine whether all of the elements match a truth test.
  // Delegates to **ECMAScript 5**'s native `every` if available.
  // Aliased as `all`.
  _.every = _.all = function(obj, predicate, context) {
    predicate || (predicate = _.identity);
    var result = true;
    if (obj == null) return result;
    if (nativeEvery && obj.every === nativeEvery) return obj.every(predicate, context);
    each(obj, function(value, index, list) {
      if (!(result = result && predicate.call(context, value, index, list))) return breaker;
    });
    return !!result;
  };

  // Determine if at least one element in the object matches a truth test.
  // Delegates to **ECMAScript 5**'s native `some` if available.
  // Aliased as `any`.
  var any = _.some = _.any = function(obj, predicate, context) {
    predicate || (predicate = _.identity);
    var result = false;
    if (obj == null) return result;
    if (nativeSome && obj.some === nativeSome) return obj.some(predicate, context);
    each(obj, function(value, index, list) {
      if (result || (result = predicate.call(context, value, index, list))) return breaker;
    });
    return !!result;
  };

  // Determine if the array or object contains a given value (using `===`).
  // Aliased as `include`.
  _.contains = _.include = function(obj, target) {
    if (obj == null) return false;
    if (nativeIndexOf && obj.indexOf === nativeIndexOf) return obj.indexOf(target) != -1;
    return any(obj, function(value) {
      return value === target;
    });
  };

  // Invoke a method (with arguments) on every item in a collection.
  _.invoke = function(obj, method) {
    var args = slice.call(arguments, 2);
    var isFunc = _.isFunction(method);
    return _.map(obj, function(value) {
      return (isFunc ? method : value[method]).apply(value, args);
    });
  };

  // Convenience version of a common use case of `map`: fetching a property.
  _.pluck = function(obj, key) {
    return _.map(obj, _.property(key));
  };

  // Convenience version of a common use case of `filter`: selecting only objects
  // containing specific `key:value` pairs.
  _.where = function(obj, attrs) {
    return _.filter(obj, _.matches(attrs));
  };

  // Convenience version of a common use case of `find`: getting the first object
  // containing specific `key:value` pairs.
  _.findWhere = function(obj, attrs) {
    return _.find(obj, _.matches(attrs));
  };

  // Return the maximum element or (element-based computation).
  // Can't optimize arrays of integers longer than 65,535 elements.
  // See [WebKit Bug 80797](https://bugs.webkit.org/show_bug.cgi?id=80797)
  _.max = function(obj, iterator, context) {
    if (!iterator && _.isArray(obj) && obj[0] === +obj[0] && obj.length < 65535) {
      return Math.max.apply(Math, obj);
    }
    var result = -Infinity, lastComputed = -Infinity;
    each(obj, function(value, index, list) {
      var computed = iterator ? iterator.call(context, value, index, list) : value;
      if (computed > lastComputed) {
        result = value;
        lastComputed = computed;
      }
    });
    return result;
  };

  // Return the minimum element (or element-based computation).
  _.min = function(obj, iterator, context) {
    if (!iterator && _.isArray(obj) && obj[0] === +obj[0] && obj.length < 65535) {
      return Math.min.apply(Math, obj);
    }
    var result = Infinity, lastComputed = Infinity;
    each(obj, function(value, index, list) {
      var computed = iterator ? iterator.call(context, value, index, list) : value;
      if (computed < lastComputed) {
        result = value;
        lastComputed = computed;
      }
    });
    return result;
  };

  // Shuffle an array, using the modern version of the
  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).
  _.shuffle = function(obj) {
    var rand;
    var index = 0;
    var shuffled = [];
    each(obj, function(value) {
      rand = _.random(index++);
      shuffled[index - 1] = shuffled[rand];
      shuffled[rand] = value;
    });
    return shuffled;
  };

  // Sample **n** random values from a collection.
  // If **n** is not specified, returns a single random element.
  // The internal `guard` argument allows it to work with `map`.
  _.sample = function(obj, n, guard) {
    if (n == null || guard) {
      if (obj.length !== +obj.length) obj = _.values(obj);
      return obj[_.random(obj.length - 1)];
    }
    return _.shuffle(obj).slice(0, Math.max(0, n));
  };

  // An internal function to generate lookup iterators.
  var lookupIterator = function(value) {
    if (value == null) return _.identity;
    if (_.isFunction(value)) return value;
    return _.property(value);
  };

  // Sort the object's values by a criterion produced by an iterator.
  _.sortBy = function(obj, iterator, context) {
    iterator = lookupIterator(iterator);
    return _.pluck(_.map(obj, function(value, index, list) {
      return {
        value: value,
        index: index,
        criteria: iterator.call(context, value, index, list)
      };
    }).sort(function(left, right) {
      var a = left.criteria;
      var b = right.criteria;
      if (a !== b) {
        if (a > b || a === void 0) return 1;
        if (a < b || b === void 0) return -1;
      }
      return left.index - right.index;
    }), 'value');
  };

  // An internal function used for aggregate "group by" operations.
  var group = function(behavior) {
    return function(obj, iterator, context) {
      var result = {};
      iterator = lookupIterator(iterator);
      each(obj, function(value, index) {
        var key = iterator.call(context, value, index, obj);
        behavior(result, key, value);
      });
      return result;
    };
  };

  // Groups the object's values by a criterion. Pass either a string attribute
  // to group by, or a function that returns the criterion.
  _.groupBy = group(function(result, key, value) {
    _.has(result, key) ? result[key].push(value) : result[key] = [value];
  });

  // Indexes the object's values by a criterion, similar to `groupBy`, but for
  // when you know that your index values will be unique.
  _.indexBy = group(function(result, key, value) {
    result[key] = value;
  });

  // Counts instances of an object that group by a certain criterion. Pass
  // either a string attribute to count by, or a function that returns the
  // criterion.
  _.countBy = group(function(result, key) {
    _.has(result, key) ? result[key]++ : result[key] = 1;
  });

  // Use a comparator function to figure out the smallest index at which
  // an object should be inserted so as to maintain order. Uses binary search.
  _.sortedIndex = function(array, obj, iterator, context) {
    iterator = lookupIterator(iterator);
    var value = iterator.call(context, obj);
    var low = 0, high = array.length;
    while (low < high) {
      var mid = (low + high) >>> 1;
      iterator.call(context, array[mid]) < value ? low = mid + 1 : high = mid;
    }
    return low;
  };

  // Safely create a real, live array from anything iterable.
  _.toArray = function(obj) {
    if (!obj) return [];
    if (_.isArray(obj)) return slice.call(obj);
    if (obj.length === +obj.length) return _.map(obj, _.identity);
    return _.values(obj);
  };

  // Return the number of elements in an object.
  _.size = function(obj) {
    if (obj == null) return 0;
    return (obj.length === +obj.length) ? obj.length : _.keys(obj).length;
  };

  // Array Functions
  // ---------------

  // Get the first element of an array. Passing **n** will return the first N
  // values in the array. Aliased as `head` and `take`. The **guard** check
  // allows it to work with `_.map`.
  _.first = _.head = _.take = function(array, n, guard) {
    if (array == null) return void 0;
    if ((n == null) || guard) return array[0];
    if (n < 0) return [];
    return slice.call(array, 0, n);
  };

  // Returns everything but the last entry of the array. Especially useful on
  // the arguments object. Passing **n** will return all the values in
  // the array, excluding the last N. The **guard** check allows it to work with
  // `_.map`.
  _.initial = function(array, n, guard) {
    return slice.call(array, 0, array.length - ((n == null) || guard ? 1 : n));
  };

  // Get the last element of an array. Passing **n** will return the last N
  // values in the array. The **guard** check allows it to work with `_.map`.
  _.last = function(array, n, guard) {
    if (array == null) return void 0;
    if ((n == null) || guard) return array[array.length - 1];
    return slice.call(array, Math.max(array.length - n, 0));
  };

  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.
  // Especially useful on the arguments object. Passing an **n** will return
  // the rest N values in the array. The **guard**
  // check allows it to work with `_.map`.
  _.rest = _.tail = _.drop = function(array, n, guard) {
    return slice.call(array, (n == null) || guard ? 1 : n);
  };

  // Trim out all falsy values from an array.
  _.compact = function(array) {
    return _.filter(array, _.identity);
  };

  // Internal implementation of a recursive `flatten` function.
  var flatten = function(input, shallow, output) {
    if (shallow && _.every(input, _.isArray)) {
      return concat.apply(output, input);
    }
    each(input, function(value) {
      if (_.isArray(value) || _.isArguments(value)) {
        shallow ? push.apply(output, value) : flatten(value, shallow, output);
      } else {
        output.push(value);
      }
    });
    return output;
  };

  // Flatten out an array, either recursively (by default), or just one level.
  _.flatten = function(array, shallow) {
    return flatten(array, shallow, []);
  };

  // Return a version of the array that does not contain the specified value(s).
  _.without = function(array) {
    return _.difference(array, slice.call(arguments, 1));
  };

  // Split an array into two arrays: one whose elements all satisfy the given
  // predicate, and one whose elements all do not satisfy the predicate.
  _.partition = function(array, predicate) {
    var pass = [], fail = [];
    each(array, function(elem) {
      (predicate(elem) ? pass : fail).push(elem);
    });
    return [pass, fail];
  };

  // Produce a duplicate-free version of the array. If the array has already
  // been sorted, you have the option of using a faster algorithm.
  // Aliased as `unique`.
  _.uniq = _.unique = function(array, isSorted, iterator, context) {
    if (_.isFunction(isSorted)) {
      context = iterator;
      iterator = isSorted;
      isSorted = false;
    }
    var initial = iterator ? _.map(array, iterator, context) : array;
    var results = [];
    var seen = [];
    each(initial, function(value, index) {
      if (isSorted ? (!index || seen[seen.length - 1] !== value) : !_.contains(seen, value)) {
        seen.push(value);
        results.push(array[index]);
      }
    });
    return results;
  };

  // Produce an array that contains the union: each distinct element from all of
  // the passed-in arrays.
  _.union = function() {
    return _.uniq(_.flatten(arguments, true));
  };

  // Produce an array that contains every item shared between all the
  // passed-in arrays.
  _.intersection = function(array) {
    var rest = slice.call(arguments, 1);
    return _.filter(_.uniq(array), function(item) {
      return _.every(rest, function(other) {
        return _.contains(other, item);
      });
    });
  };

  // Take the difference between one array and a number of other arrays.
  // Only the elements present in just the first array will remain.
  _.difference = function(array) {
    var rest = concat.apply(ArrayProto, slice.call(arguments, 1));
    return _.filter(array, function(value){ return !_.contains(rest, value); });
  };

  // Zip together multiple lists into a single array -- elements that share
  // an index go together.
  _.zip = function() {
    var length = _.max(_.pluck(arguments, 'length').concat(0));
    var results = new Array(length);
    for (var i = 0; i < length; i++) {
      results[i] = _.pluck(arguments, '' + i);
    }
    return results;
  };

  // Converts lists into objects. Pass either a single array of `[key, value]`
  // pairs, or two parallel arrays of the same length -- one of keys, and one of
  // the corresponding values.
  _.object = function(list, values) {
    if (list == null) return {};
    var result = {};
    for (var i = 0, length = list.length; i < length; i++) {
      if (values) {
        result[list[i]] = values[i];
      } else {
        result[list[i][0]] = list[i][1];
      }
    }
    return result;
  };

  // If the browser doesn't supply us with indexOf (I'm looking at you, **MSIE**),
  // we need this function. Return the position of the first occurrence of an
  // item in an array, or -1 if the item is not included in the array.
  // Delegates to **ECMAScript 5**'s native `indexOf` if available.
  // If the array is large and already in sort order, pass `true`
  // for **isSorted** to use binary search.
  _.indexOf = function(array, item, isSorted) {
    if (array == null) return -1;
    var i = 0, length = array.length;
    if (isSorted) {
      if (typeof isSorted == 'number') {
        i = (isSorted < 0 ? Math.max(0, length + isSorted) : isSorted);
      } else {
        i = _.sortedIndex(array, item);
        return array[i] === item ? i : -1;
      }
    }
    if (nativeIndexOf && array.indexOf === nativeIndexOf) return array.indexOf(item, isSorted);
    for (; i < length; i++) if (array[i] === item) return i;
    return -1;
  };

  // Delegates to **ECMAScript 5**'s native `lastIndexOf` if available.
  _.lastIndexOf = function(array, item, from) {
    if (array == null) return -1;
    var hasIndex = from != null;
    if (nativeLastIndexOf && array.lastIndexOf === nativeLastIndexOf) {
      return hasIndex ? array.lastIndexOf(item, from) : array.lastIndexOf(item);
    }
    var i = (hasIndex ? from : array.length);
    while (i--) if (array[i] === item) return i;
    return -1;
  };

  // Generate an integer Array containing an arithmetic progression. A port of
  // the native Python `range()` function. See
  // [the Python documentation](http://docs.python.org/library/functions.html#range).
  _.range = function(start, stop, step) {
    if (arguments.length <= 1) {
      stop = start || 0;
      start = 0;
    }
    step = arguments[2] || 1;

    var length = Math.max(Math.ceil((stop - start) / step), 0);
    var idx = 0;
    var range = new Array(length);

    while(idx < length) {
      range[idx++] = start;
      start += step;
    }

    return range;
  };

  // Function (ahem) Functions
  // ------------------

  // Reusable constructor function for prototype setting.
  var ctor = function(){};

  // Create a function bound to a given object (assigning `this`, and arguments,
  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if
  // available.
  _.bind = function(func, context) {
    var args, bound;
    if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));
    if (!_.isFunction(func)) throw new TypeError;
    args = slice.call(arguments, 2);
    return bound = function() {
      if (!(this instanceof bound)) return func.apply(context, args.concat(slice.call(arguments)));
      ctor.prototype = func.prototype;
      var self = new ctor;
      ctor.prototype = null;
      var result = func.apply(self, args.concat(slice.call(arguments)));
      if (Object(result) === result) return result;
      return self;
    };
  };

  // Partially apply a function by creating a version that has had some of its
  // arguments pre-filled, without changing its dynamic `this` context. _ acts
  // as a placeholder, allowing any combination of arguments to be pre-filled.
  _.partial = function(func) {
    var boundArgs = slice.call(arguments, 1);
    return function() {
      var position = 0;
      var args = boundArgs.slice();
      for (var i = 0, length = args.length; i < length; i++) {
        if (args[i] === _) args[i] = arguments[position++];
      }
      while (position < arguments.length) args.push(arguments[position++]);
      return func.apply(this, args);
    };
  };

  // Bind a number of an object's methods to that object. Remaining arguments
  // are the method names to be bound. Useful for ensuring that all callbacks
  // defined on an object belong to it.
  _.bindAll = function(obj) {
    var funcs = slice.call(arguments, 1);
    if (funcs.length === 0) throw new Error('bindAll must be passed function names');
    each(funcs, function(f) { obj[f] = _.bind(obj[f], obj); });
    return obj;
  };

  // Memoize an expensive function by storing its results.
  _.memoize = function(func, hasher) {
    var memo = {};
    hasher || (hasher = _.identity);
    return function() {
      var key = hasher.apply(this, arguments);
      return _.has(memo, key) ? memo[key] : (memo[key] = func.apply(this, arguments));
    };
  };

  // Delays a function for the given number of milliseconds, and then calls
  // it with the arguments supplied.
  _.delay = function(func, wait) {
    var args = slice.call(arguments, 2);
    return setTimeout(function(){ return func.apply(null, args); }, wait);
  };

  // Defers a function, scheduling it to run after the current call stack has
  // cleared.
  _.defer = function(func) {
    return _.delay.apply(_, [func, 1].concat(slice.call(arguments, 1)));
  };

  // Returns a function, that, when invoked, will only be triggered at most once
  // during a given window of time. Normally, the throttled function will run
  // as much as it can, without ever going more than once per `wait` duration;
  // but if you'd like to disable the execution on the leading edge, pass
  // `{leading: false}`. To disable execution on the trailing edge, ditto.
  _.throttle = function(func, wait, options) {
    var context, args, result;
    var timeout = null;
    var previous = 0;
    options || (options = {});
    var later = function() {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      context = args = null;
    };
    return function() {
      var now = _.now();
      if (!previous && options.leading === false) previous = now;
      var remaining = wait - (now - previous);
      context = this;
      args = arguments;
      if (remaining <= 0) {
        clearTimeout(timeout);
        timeout = null;
        previous = now;
        result = func.apply(context, args);
        context = args = null;
      } else if (!timeout && options.trailing !== false) {
        timeout = setTimeout(later, remaining);
      }
      return result;
    };
  };

  // Returns a function, that, as long as it continues to be invoked, will not
  // be triggered. The function will be called after it stops being called for
  // N milliseconds. If `immediate` is passed, trigger the function on the
  // leading edge, instead of the trailing.
  _.debounce = function(func, wait, immediate) {
    var timeout, args, context, timestamp, result;

    var later = function() {
      var last = _.now() - timestamp;
      if (last < wait) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          context = args = null;
        }
      }
    };

    return function() {
      context = this;
      args = arguments;
      timestamp = _.now();
      var callNow = immediate && !timeout;
      if (!timeout) {
        timeout = setTimeout(later, wait);
      }
      if (callNow) {
        result = func.apply(context, args);
        context = args = null;
      }

      return result;
    };
  };

  // Returns a function that will be executed at most one time, no matter how
  // often you call it. Useful for lazy initialization.
  _.once = function(func) {
    var ran = false, memo;
    return function() {
      if (ran) return memo;
      ran = true;
      memo = func.apply(this, arguments);
      func = null;
      return memo;
    };
  };

  // Returns the first function passed as an argument to the second,
  // allowing you to adjust arguments, run code before and after, and
  // conditionally execute the original function.
  _.wrap = function(func, wrapper) {
    return _.partial(wrapper, func);
  };

  // Returns a function that is the composition of a list of functions, each
  // consuming the return value of the function that follows.
  _.compose = function() {
    var funcs = arguments;
    return function() {
      var args = arguments;
      for (var i = funcs.length - 1; i >= 0; i--) {
        args = [funcs[i].apply(this, args)];
      }
      return args[0];
    };
  };

  // Returns a function that will only be executed after being called N times.
  _.after = function(times, func) {
    return function() {
      if (--times < 1) {
        return func.apply(this, arguments);
      }
    };
  };

  // Object Functions
  // ----------------

  // Retrieve the names of an object's properties.
  // Delegates to **ECMAScript 5**'s native `Object.keys`
  _.keys = function(obj) {
    if (!_.isObject(obj)) return [];
    if (nativeKeys) return nativeKeys(obj);
    var keys = [];
    for (var key in obj) if (_.has(obj, key)) keys.push(key);
    return keys;
  };

  // Retrieve the values of an object's properties.
  _.values = function(obj) {
    var keys = _.keys(obj);
    var length = keys.length;
    var values = new Array(length);
    for (var i = 0; i < length; i++) {
      values[i] = obj[keys[i]];
    }
    return values;
  };

  // Convert an object into a list of `[key, value]` pairs.
  _.pairs = function(obj) {
    var keys = _.keys(obj);
    var length = keys.length;
    var pairs = new Array(length);
    for (var i = 0; i < length; i++) {
      pairs[i] = [keys[i], obj[keys[i]]];
    }
    return pairs;
  };

  // Invert the keys and values of an object. The values must be serializable.
  _.invert = function(obj) {
    var result = {};
    var keys = _.keys(obj);
    for (var i = 0, length = keys.length; i < length; i++) {
      result[obj[keys[i]]] = keys[i];
    }
    return result;
  };

  // Return a sorted list of the function names available on the object.
  // Aliased as `methods`
  _.functions = _.methods = function(obj) {
    var names = [];
    for (var key in obj) {
      if (_.isFunction(obj[key])) names.push(key);
    }
    return names.sort();
  };

  // Extend a given object with all the properties in passed-in object(s).
  _.extend = function(obj) {
    each(slice.call(arguments, 1), function(source) {
      if (source) {
        for (var prop in source) {
          obj[prop] = source[prop];
        }
      }
    });
    return obj;
  };

  // Return a copy of the object only containing the whitelisted properties.
  _.pick = function(obj) {
    var copy = {};
    var keys = concat.apply(ArrayProto, slice.call(arguments, 1));
    each(keys, function(key) {
      if (key in obj) copy[key] = obj[key];
    });
    return copy;
  };

   // Return a copy of the object without the blacklisted properties.
  _.omit = function(obj) {
    var copy = {};
    var keys = concat.apply(ArrayProto, slice.call(arguments, 1));
    for (var key in obj) {
      if (!_.contains(keys, key)) copy[key] = obj[key];
    }
    return copy;
  };

  // Fill in a given object with default properties.
  _.defaults = function(obj) {
    each(slice.call(arguments, 1), function(source) {
      if (source) {
        for (var prop in source) {
          if (obj[prop] === void 0) obj[prop] = source[prop];
        }
      }
    });
    return obj;
  };

  // Create a (shallow-cloned) duplicate of an object.
  _.clone = function(obj) {
    if (!_.isObject(obj)) return obj;
    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
  };

  // Invokes interceptor with the obj, and then returns obj.
  // The primary purpose of this method is to "tap into" a method chain, in
  // order to perform operations on intermediate results within the chain.
  _.tap = function(obj, interceptor) {
    interceptor(obj);
    return obj;
  };

  // Internal recursive comparison function for `isEqual`.
  var eq = function(a, b, aStack, bStack) {
    // Identical objects are equal. `0 === -0`, but they aren't identical.
    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).
    if (a === b) return a !== 0 || 1 / a == 1 / b;
    // A strict comparison is necessary because `null == undefined`.
    if (a == null || b == null) return a === b;
    // Unwrap any wrapped objects.
    if (a instanceof _) a = a._wrapped;
    if (b instanceof _) b = b._wrapped;
    // Compare `[[Class]]` names.
    var className = toString.call(a);
    if (className != toString.call(b)) return false;
    switch (className) {
      // Strings, numbers, dates, and booleans are compared by value.
      case '[object String]':
        // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
        // equivalent to `new String("5")`.
        return a == String(b);
      case '[object Number]':
        // `NaN`s are equivalent, but non-reflexive. An `egal` comparison is performed for
        // other numeric values.
        return a != +a ? b != +b : (a == 0 ? 1 / a == 1 / b : a == +b);
      case '[object Date]':
      case '[object Boolean]':
        // Coerce dates and booleans to numeric primitive values. Dates are compared by their
        // millisecond representations. Note that invalid dates with millisecond representations
        // of `NaN` are not equivalent.
        return +a == +b;
      // RegExps are compared by their source patterns and flags.
      case '[object RegExp]':
        return a.source == b.source &&
               a.global == b.global &&
               a.multiline == b.multiline &&
               a.ignoreCase == b.ignoreCase;
    }
    if (typeof a != 'object' || typeof b != 'object') return false;
    // Assume equality for cyclic structures. The algorithm for detecting cyclic
    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.
    var length = aStack.length;
    while (length--) {
      // Linear search. Performance is inversely proportional to the number of
      // unique nested structures.
      if (aStack[length] == a) return bStack[length] == b;
    }
    // Objects with different constructors are not equivalent, but `Object`s
    // from different frames are.
    var aCtor = a.constructor, bCtor = b.constructor;
    if (aCtor !== bCtor && !(_.isFunction(aCtor) && (aCtor instanceof aCtor) &&
                             _.isFunction(bCtor) && (bCtor instanceof bCtor))
                        && ('constructor' in a && 'constructor' in b)) {
      return false;
    }
    // Add the first object to the stack of traversed objects.
    aStack.push(a);
    bStack.push(b);
    var size = 0, result = true;
    // Recursively compare objects and arrays.
    if (className == '[object Array]') {
      // Compare array lengths to determine if a deep comparison is necessary.
      size = a.length;
      result = size == b.length;
      if (result) {
        // Deep compare the contents, ignoring non-numeric properties.
        while (size--) {
          if (!(result = eq(a[size], b[size], aStack, bStack))) break;
        }
      }
    } else {
      // Deep compare objects.
      for (var key in a) {
        if (_.has(a, key)) {
          // Count the expected number of properties.
          size++;
          // Deep compare each member.
          if (!(result = _.has(b, key) && eq(a[key], b[key], aStack, bStack))) break;
        }
      }
      // Ensure that both objects contain the same number of properties.
      if (result) {
        for (key in b) {
          if (_.has(b, key) && !(size--)) break;
        }
        result = !size;
      }
    }
    // Remove the first object from the stack of traversed objects.
    aStack.pop();
    bStack.pop();
    return result;
  };

  // Perform a deep comparison to check if two objects are equal.
  _.isEqual = function(a, b) {
    return eq(a, b, [], []);
  };

  // Is a given array, string, or object empty?
  // An "empty" object has no enumerable own-properties.
  _.isEmpty = function(obj) {
    if (obj == null) return true;
    if (_.isArray(obj) || _.isString(obj)) return obj.length === 0;
    for (var key in obj) if (_.has(obj, key)) return false;
    return true;
  };

  // Is a given value a DOM element?
  _.isElement = function(obj) {
    return !!(obj && obj.nodeType === 1);
  };

  // Is a given value an array?
  // Delegates to ECMA5's native Array.isArray
  _.isArray = nativeIsArray || function(obj) {
    return toString.call(obj) == '[object Array]';
  };

  // Is a given variable an object?
  _.isObject = function(obj) {
    return obj === Object(obj);
  };

  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp.
  each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp'], function(name) {
    _['is' + name] = function(obj) {
      return toString.call(obj) == '[object ' + name + ']';
    };
  });

  // Define a fallback version of the method in browsers (ahem, IE), where
  // there isn't any inspectable "Arguments" type.
  if (!_.isArguments(arguments)) {
    _.isArguments = function(obj) {
      return !!(obj && _.has(obj, 'callee'));
    };
  }

  // Optimize `isFunction` if appropriate.
  if (typeof (/./) !== 'function') {
    _.isFunction = function(obj) {
      return typeof obj === 'function';
    };
  }

  // Is a given object a finite number?
  _.isFinite = function(obj) {
    return isFinite(obj) && !isNaN(parseFloat(obj));
  };

  // Is the given value `NaN`? (NaN is the only number which does not equal itself).
  _.isNaN = function(obj) {
    return _.isNumber(obj) && obj != +obj;
  };

  // Is a given value a boolean?
  _.isBoolean = function(obj) {
    return obj === true || obj === false || toString.call(obj) == '[object Boolean]';
  };

  // Is a given value equal to null?
  _.isNull = function(obj) {
    return obj === null;
  };

  // Is a given variable undefined?
  _.isUndefined = function(obj) {
    return obj === void 0;
  };

  // Shortcut function for checking if an object has a given property directly
  // on itself (in other words, not on a prototype).
  _.has = function(obj, key) {
    return hasOwnProperty.call(obj, key);
  };

  // Utility Functions
  // -----------------

  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its
  // previous owner. Returns a reference to the Underscore object.
  _.noConflict = function() {
    root._ = previousUnderscore;
    return this;
  };

  // Keep the identity function around for default iterators.
  _.identity = function(value) {
    return value;
  };

  _.constant = function(value) {
    return function () {
      return value;
    };
  };

  _.property = function(key) {
    return function(obj) {
      return obj[key];
    };
  };

  // Returns a predicate for checking whether an object has a given set of `key:value` pairs.
  _.matches = function(attrs) {
    return function(obj) {
      if (obj === attrs) return true; //avoid comparing an object to itself.
      for (var key in attrs) {
        if (attrs[key] !== obj[key])
          return false;
      }
      return true;
    }
  };

  // Run a function **n** times.
  _.times = function(n, iterator, context) {
    var accum = Array(Math.max(0, n));
    for (var i = 0; i < n; i++) accum[i] = iterator.call(context, i);
    return accum;
  };

  // Return a random integer between min and max (inclusive).
  _.random = function(min, max) {
    if (max == null) {
      max = min;
      min = 0;
    }
    return min + Math.floor(Math.random() * (max - min + 1));
  };

  // A (possibly faster) way to get the current timestamp as an integer.
  _.now = Date.now || function() { return new Date().getTime(); };

  // List of HTML entities for escaping.
  var entityMap = {
    escape: {
      '&': '&amp;',
      '<': '&lt;',
      '>': '&gt;',
      '"': '&quot;',
      "'": '&#x27;'
    }
  };
  entityMap.unescape = _.invert(entityMap.escape);

  // Regexes containing the keys and values listed immediately above.
  var entityRegexes = {
    escape:   new RegExp('[' + _.keys(entityMap.escape).join('') + ']', 'g'),
    unescape: new RegExp('(' + _.keys(entityMap.unescape).join('|') + ')', 'g')
  };

  // Functions for escaping and unescaping strings to/from HTML interpolation.
  _.each(['escape', 'unescape'], function(method) {
    _[method] = function(string) {
      if (string == null) return '';
      return ('' + string).replace(entityRegexes[method], function(match) {
        return entityMap[method][match];
      });
    };
  });

  // If the value of the named `property` is a function then invoke it with the
  // `object` as context; otherwise, return it.
  _.result = function(object, property) {
    if (object == null) return void 0;
    var value = object[property];
    return _.isFunction(value) ? value.call(object) : value;
  };

  // Add your own custom functions to the Underscore object.
  _.mixin = function(obj) {
    each(_.functions(obj), function(name) {
      var func = _[name] = obj[name];
      _.prototype[name] = function() {
        var args = [this._wrapped];
        push.apply(args, arguments);
        return result.call(this, func.apply(_, args));
      };
    });
  };

  // Generate a unique integer id (unique within the entire client session).
  // Useful for temporary DOM ids.
  var idCounter = 0;
  _.uniqueId = function(prefix) {
    var id = ++idCounter + '';
    return prefix ? prefix + id : id;
  };

  // By default, Underscore uses ERB-style template delimiters, change the
  // following template settings to use alternative delimiters.
  _.templateSettings = {
    evaluate    : /<%([\s\S]+?)%>/g,
    interpolate : /<%=([\s\S]+?)%>/g,
    escape      : /<%-([\s\S]+?)%>/g
  };

  // When customizing `templateSettings`, if you don't want to define an
  // interpolation, evaluation or escaping regex, we need one that is
  // guaranteed not to match.
  var noMatch = /(.)^/;

  // Certain characters need to be escaped so that they can be put into a
  // string literal.
  var escapes = {
    "'":      "'",
    '\\':     '\\',
    '\r':     'r',
    '\n':     'n',
    '\t':     't',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  var escaper = /\\|'|\r|\n|\t|\u2028|\u2029/g;

  // JavaScript micro-templating, similar to John Resig's implementation.
  // Underscore templating handles arbitrary delimiters, preserves whitespace,
  // and correctly escapes quotes within interpolated code.
  _.template = function(text, data, settings) {
    var render;
    settings = _.defaults({}, settings, _.templateSettings);

    // Combine delimiters into one regular expression via alternation.
    var matcher = new RegExp([
      (settings.escape || noMatch).source,
      (settings.interpolate || noMatch).source,
      (settings.evaluate || noMatch).source
    ].join('|') + '|$', 'g');

    // Compile the template source, escaping string literals appropriately.
    var index = 0;
    var source = "__p+='";
    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
      source += text.slice(index, offset)
        .replace(escaper, function(match) { return '\\' + escapes[match]; });

      if (escape) {
        source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
      }
      if (interpolate) {
        source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
      }
      if (evaluate) {
        source += "';\n" + evaluate + "\n__p+='";
      }
      index = offset + match.length;
      return match;
    });
    source += "';\n";

    // If a variable is not specified, place data values in local scope.
    if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';

    source = "var __t,__p='',__j=Array.prototype.join," +
      "print=function(){__p+=__j.call(arguments,'');};\n" +
      source + "return __p;\n";

    try {
      render = new Function(settings.variable || 'obj', '_', source);
    } catch (e) {
      e.source = source;
      throw e;
    }

    if (data) return render(data, _);
    var template = function(data) {
      return render.call(this, data, _);
    };

    // Provide the compiled function source as a convenience for precompilation.
    template.source = 'function(' + (settings.variable || 'obj') + '){\n' + source + '}';

    return template;
  };

  // Add a "chain" function, which will delegate to the wrapper.
  _.chain = function(obj) {
    return _(obj).chain();
  };

  // OOP
  // ---------------
  // If Underscore is called as a function, it returns a wrapped object that
  // can be used OO-style. This wrapper holds altered versions of all the
  // underscore functions. Wrapped objects may be chained.

  // Helper function to continue chaining intermediate results.
  var result = function(obj) {
    return this._chain ? _(obj).chain() : obj;
  };

  // Add all of the Underscore functions to the wrapper object.
  _.mixin(_);

  // Add all mutator Array functions to the wrapper.
  each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      var obj = this._wrapped;
      method.apply(obj, arguments);
      if ((name == 'shift' || name == 'splice') && obj.length === 0) delete obj[0];
      return result.call(this, obj);
    };
  });

  // Add all accessor Array functions to the wrapper.
  each(['concat', 'join', 'slice'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      return result.call(this, method.apply(this._wrapped, arguments));
    };
  });

  _.extend(_.prototype, {

    // Start chaining a wrapped Underscore object.
    chain: function() {
      this._chain = true;
      return this;
    },

    // Extracts the result from a wrapped and chained object.
    value: function() {
      return this._wrapped;
    }

  });

  // AMD registration happens at the end for compatibility with AMD loaders
  // that may not enforce next-turn semantics on modules. Even though general
  // practice for AMD registration is to be anonymous, underscore registers
  // as a named module because, like jQuery, it is a base library that is
  // popular enough to be bundled in a third party lib, but not be part of
  // an AMD load request. Those cases could generate an error when an
  // anonymous define() is called outside of a loader request.
  if (typeof define === 'function' && define.amd) {
    define('underscore', [], function() {
      return _;
    });
  }
}).call(this);

},{}],28:[function(require,module,exports){
/*
 *  Copyright 2011 Twitter, Inc.
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

var Hogan = {};

(function (Hogan, useArrayBuffer) {
  Hogan.Template = function (renderFunc, text, compiler, options) {
    this.r = renderFunc || this.r;
    this.c = compiler;
    this.options = options;
    this.text = text || '';
    this.buf = (useArrayBuffer) ? [] : '';
  }

  Hogan.Template.prototype = {
    // render: replaced by generated code.
    r: function (context, partials, indent) { return ''; },

    // variable escaping
    v: hoganEscape,

    // triple stache
    t: coerceToString,

    render: function render(context, partials, indent) {
      return this.ri([context], partials || {}, indent);
    },

    // render internal -- a hook for overrides that catches partials too
    ri: function (context, partials, indent) {
      return this.r(context, partials, indent);
    },

    // tries to find a partial in the curent scope and render it
    rp: function(name, context, partials, indent) {
      var partial = partials[name];

      if (!partial) {
        return '';
      }

      if (this.c && typeof partial == 'string') {
        partial = this.c.compile(partial, this.options);
      }

      return partial.ri(context, partials, indent);
    },

    // render a section
    rs: function(context, partials, section) {
      var tail = context[context.length - 1];

      if (!isArray(tail)) {
        section(context, partials, this);
        return;
      }

      for (var i = 0; i < tail.length; i++) {
        context.push(tail[i]);
        section(context, partials, this);
        context.pop();
      }
    },

    // maybe start a section
    s: function(val, ctx, partials, inverted, start, end, tags) {
      var pass;

      if (isArray(val) && val.length === 0) {
        return false;
      }

      if (typeof val == 'function') {
        val = this.ls(val, ctx, partials, inverted, start, end, tags);
      }

      pass = (val === '') || !!val;

      if (!inverted && pass && ctx) {
        ctx.push((typeof val == 'object') ? val : ctx[ctx.length - 1]);
      }

      return pass;
    },

    // find values with dotted names
    d: function(key, ctx, partials, returnFound) {
      var names = key.split('.'),
          val = this.f(names[0], ctx, partials, returnFound),
          cx = null;

      if (key === '.' && isArray(ctx[ctx.length - 2])) {
        return ctx[ctx.length - 1];
      }

      for (var i = 1; i < names.length; i++) {
        if (val && typeof val == 'object' && names[i] in val) {
          cx = val;
          val = val[names[i]];
        } else {
          val = '';
        }
      }

      if (returnFound && !val) {
        return false;
      }

      if (!returnFound && typeof val == 'function') {
        ctx.push(cx);
        val = this.lv(val, ctx, partials);
        ctx.pop();
      }

      return val;
    },

    // find values with normal names
    f: function(key, ctx, partials, returnFound) {
      var val = false,
          v = null,
          found = false;

      for (var i = ctx.length - 1; i >= 0; i--) {
        v = ctx[i];
        if (v && typeof v == 'object' && key in v) {
          val = v[key];
          found = true;
          break;
        }
      }

      if (!found) {
        return (returnFound) ? false : "";
      }

      if (!returnFound && typeof val == 'function') {
        val = this.lv(val, ctx, partials);
      }

      return val;
    },

    // higher order templates
    ho: function(val, cx, partials, text, tags) {
      var compiler = this.c;
      var options = this.options;
      options.delimiters = tags;
      var text = val.call(cx, text);
      text = (text == null) ? String(text) : text.toString();
      this.b(compiler.compile(text, options).render(cx, partials));
      return false;
    },

    // template result buffering
    b: (useArrayBuffer) ? function(s) { this.buf.push(s); } :
                          function(s) { this.buf += s; },
    fl: (useArrayBuffer) ? function() { var r = this.buf.join(''); this.buf = []; return r; } :
                           function() { var r = this.buf; this.buf = ''; return r; },

    // lambda replace section
    ls: function(val, ctx, partials, inverted, start, end, tags) {
      var cx = ctx[ctx.length - 1],
          t = null;

      if (!inverted && this.c && val.length > 0) {
        return this.ho(val, cx, partials, this.text.substring(start, end), tags);
      }

      t = val.call(cx);

      if (typeof t == 'function') {
        if (inverted) {
          return true;
        } else if (this.c) {
          return this.ho(t, cx, partials, this.text.substring(start, end), tags);
        }
      }

      return t;
    },

    // lambda replace variable
    lv: function(val, ctx, partials) {
      var cx = ctx[ctx.length - 1];
      var result = val.call(cx);

      if (typeof result == 'function') {
        result = coerceToString(result.call(cx));
        if (this.c && ~result.indexOf("{\u007B")) {
          return this.c.compile(result, this.options).render(cx, partials);
        }
      }

      return coerceToString(result);
    }

  };

  var rAmp = /&/g,
      rLt = /</g,
      rGt = />/g,
      rApos =/\'/g,
      rQuot = /\"/g,
      hChars =/[&<>\"\']/;


  function coerceToString(val) {
    return String((val === null || val === undefined) ? '' : val);
  }

  function hoganEscape(str) {
    str = coerceToString(str);
    return hChars.test(str) ?
      str
        .replace(rAmp,'&amp;')
        .replace(rLt,'&lt;')
        .replace(rGt,'&gt;')
        .replace(rApos,'&#39;')
        .replace(rQuot, '&quot;') :
      str;
  }

  var isArray = Array.isArray || function(a) {
    return Object.prototype.toString.call(a) === '[object Array]';
  };

})(typeof exports !== 'undefined' ? exports : Hogan);


},{}],29:[function(require,module,exports){
/*!
 * jQuery JavaScript Library v1.11.1
 * http://jquery.com/
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 *
 * Copyright 2005, 2014 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2014-05-01T17:42Z
 */

(function( global, factory ) {

	if ( typeof module === "object" && typeof module.exports === "object" ) {
		// For CommonJS and CommonJS-like environments where a proper window is present,
		// execute the factory and get jQuery
		// For environments that do not inherently posses a window with a document
		// (such as Node.js), expose a jQuery-making factory as module.exports
		// This accentuates the need for the creation of a real window
		// e.g. var jQuery = require("jquery")(window);
		// See ticket #14549 for more info
		module.exports = global.document ?
			factory( global, true ) :
			function( w ) {
				if ( !w.document ) {
					throw new Error( "jQuery requires a window with a document" );
				}
				return factory( w );
			};
	} else {
		factory( global );
	}

// Pass this if window is not defined yet
}(typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

// Can't do this because several apps including ASP.NET trace
// the stack via arguments.caller.callee and Firefox dies if
// you try to trace through "use strict" call chains. (#13335)
// Support: Firefox 18+
//

var deletedIds = [];

var slice = deletedIds.slice;

var concat = deletedIds.concat;

var push = deletedIds.push;

var indexOf = deletedIds.indexOf;

var class2type = {};

var toString = class2type.toString;

var hasOwn = class2type.hasOwnProperty;

var support = {};



var
	version = "1.11.1",

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {
		// The jQuery object is actually just the init constructor 'enhanced'
		// Need init if jQuery is called (just allow error to be thrown if not included)
		return new jQuery.fn.init( selector, context );
	},

	// Support: Android<4.1, IE<9
	// Make sure we trim BOM and NBSP
	rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,

	// Matches dashed string for camelizing
	rmsPrefix = /^-ms-/,
	rdashAlpha = /-([\da-z])/gi,

	// Used by jQuery.camelCase as callback to replace()
	fcamelCase = function( all, letter ) {
		return letter.toUpperCase();
	};

jQuery.fn = jQuery.prototype = {
	// The current version of jQuery being used
	jquery: version,

	constructor: jQuery,

	// Start with an empty selector
	selector: "",

	// The default length of a jQuery object is 0
	length: 0,

	toArray: function() {
		return slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {
		return num != null ?

			// Return just the one element from the set
			( num < 0 ? this[ num + this.length ] : this[ num ] ) :

			// Return all the elements in a clean array
			slice.call( this );
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;
		ret.context = this.context;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	// (You can seed the arguments with an array of args, but this is
	// only used internally.)
	each: function( callback, args ) {
		return jQuery.each( this, callback, args );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map(this, function( elem, i ) {
			return callback.call( elem, i, elem );
		}));
	},

	slice: function() {
		return this.pushStack( slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[j] ] : [] );
	},

	end: function() {
		return this.prevObject || this.constructor(null);
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: push,
	sort: deletedIds.sort,
	splice: deletedIds.splice
};

jQuery.extend = jQuery.fn.extend = function() {
	var src, copyIsArray, copy, name, options, clone,
		target = arguments[0] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;

		// skip the boolean and the target
		target = arguments[ i ] || {};
		i++;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !jQuery.isFunction(target) ) {
		target = {};
	}

	// extend jQuery itself if only one argument is passed
	if ( i === length ) {
		target = this;
		i--;
	}

	for ( ; i < length; i++ ) {
		// Only deal with non-null/undefined values
		if ( (options = arguments[ i ]) != null ) {
			// Extend the base object
			for ( name in options ) {
				src = target[ name ];
				copy = options[ name ];

				// Prevent never-ending loop
				if ( target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)) ) ) {
					if ( copyIsArray ) {
						copyIsArray = false;
						clone = src && jQuery.isArray(src) ? src : [];

					} else {
						clone = src && jQuery.isPlainObject(src) ? src : {};
					}

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend({
	// Unique for each copy of jQuery on the page
	expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

	// Assume jQuery is ready without the ready module
	isReady: true,

	error: function( msg ) {
		throw new Error( msg );
	},

	noop: function() {},

	// See test/unit/core.js for details concerning isFunction.
	// Since version 1.3, DOM methods and functions like alert
	// aren't supported. They return false on IE (#2968).
	isFunction: function( obj ) {
		return jQuery.type(obj) === "function";
	},

	isArray: Array.isArray || function( obj ) {
		return jQuery.type(obj) === "array";
	},

	isWindow: function( obj ) {
		/* jshint eqeqeq: false */
		return obj != null && obj == obj.window;
	},

	isNumeric: function( obj ) {
		// parseFloat NaNs numeric-cast false positives (null|true|false|"")
		// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
		// subtraction forces infinities to NaN
		return !jQuery.isArray( obj ) && obj - parseFloat( obj ) >= 0;
	},

	isEmptyObject: function( obj ) {
		var name;
		for ( name in obj ) {
			return false;
		}
		return true;
	},

	isPlainObject: function( obj ) {
		var key;

		// Must be an Object.
		// Because of IE, we also have to check the presence of the constructor property.
		// Make sure that DOM nodes and window objects don't pass through, as well
		if ( !obj || jQuery.type(obj) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {
			return false;
		}

		try {
			// Not own constructor property must be Object
			if ( obj.constructor &&
				!hasOwn.call(obj, "constructor") &&
				!hasOwn.call(obj.constructor.prototype, "isPrototypeOf") ) {
				return false;
			}
		} catch ( e ) {
			// IE8,9 Will throw exceptions on certain host objects #9897
			return false;
		}

		// Support: IE<9
		// Handle iteration over inherited properties before own properties.
		if ( support.ownLast ) {
			for ( key in obj ) {
				return hasOwn.call( obj, key );
			}
		}

		// Own properties are enumerated firstly, so to speed up,
		// if last one is own, then all properties are own.
		for ( key in obj ) {}

		return key === undefined || hasOwn.call( obj, key );
	},

	type: function( obj ) {
		if ( obj == null ) {
			return obj + "";
		}
		return typeof obj === "object" || typeof obj === "function" ?
			class2type[ toString.call(obj) ] || "object" :
			typeof obj;
	},

	// Evaluates a script in a global context
	// Workarounds based on findings by Jim Driscoll
	// http://weblogs.java.net/blog/driscoll/archive/2009/09/08/eval-javascript-global-context
	globalEval: function( data ) {
		if ( data && jQuery.trim( data ) ) {
			// We use execScript on Internet Explorer
			// We use an anonymous function so that context is window
			// rather than jQuery in Firefox
			( window.execScript || function( data ) {
				window[ "eval" ].call( window, data );
			} )( data );
		}
	},

	// Convert dashed to camelCase; used by the css and data modules
	// Microsoft forgot to hump their vendor prefix (#9572)
	camelCase: function( string ) {
		return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
	},

	nodeName: function( elem, name ) {
		return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
	},

	// args is for internal usage only
	each: function( obj, callback, args ) {
		var value,
			i = 0,
			length = obj.length,
			isArray = isArraylike( obj );

		if ( args ) {
			if ( isArray ) {
				for ( ; i < length; i++ ) {
					value = callback.apply( obj[ i ], args );

					if ( value === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					value = callback.apply( obj[ i ], args );

					if ( value === false ) {
						break;
					}
				}
			}

		// A special, fast, case for the most common use of each
		} else {
			if ( isArray ) {
				for ( ; i < length; i++ ) {
					value = callback.call( obj[ i ], i, obj[ i ] );

					if ( value === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					value = callback.call( obj[ i ], i, obj[ i ] );

					if ( value === false ) {
						break;
					}
				}
			}
		}

		return obj;
	},

	// Support: Android<4.1, IE<9
	trim: function( text ) {
		return text == null ?
			"" :
			( text + "" ).replace( rtrim, "" );
	},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArraylike( Object(arr) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
					[ arr ] : arr
				);
			} else {
				push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		var len;

		if ( arr ) {
			if ( indexOf ) {
				return indexOf.call( arr, elem, i );
			}

			len = arr.length;
			i = i ? i < 0 ? Math.max( 0, len + i ) : i : 0;

			for ( ; i < len; i++ ) {
				// Skip accessing in sparse arrays
				if ( i in arr && arr[ i ] === elem ) {
					return i;
				}
			}
		}

		return -1;
	},

	merge: function( first, second ) {
		var len = +second.length,
			j = 0,
			i = first.length;

		while ( j < len ) {
			first[ i++ ] = second[ j++ ];
		}

		// Support: IE<9
		// Workaround casting of .length to NaN on otherwise arraylike objects (e.g., NodeLists)
		if ( len !== len ) {
			while ( second[j] !== undefined ) {
				first[ i++ ] = second[ j++ ];
			}
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, invert ) {
		var callbackInverse,
			matches = [],
			i = 0,
			length = elems.length,
			callbackExpect = !invert;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			callbackInverse = !callback( elems[ i ], i );
			if ( callbackInverse !== callbackExpect ) {
				matches.push( elems[ i ] );
			}
		}

		return matches;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var value,
			i = 0,
			length = elems.length,
			isArray = isArraylike( elems ),
			ret = [];

		// Go through the array, translating each of the items to their new values
		if ( isArray ) {
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}
		}

		// Flatten any nested arrays
		return concat.apply( [], ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// Bind a function to a context, optionally partially applying any
	// arguments.
	proxy: function( fn, context ) {
		var args, proxy, tmp;

		if ( typeof context === "string" ) {
			tmp = fn[ context ];
			context = fn;
			fn = tmp;
		}

		// Quick check to determine if target is callable, in the spec
		// this throws a TypeError, but we will just return undefined.
		if ( !jQuery.isFunction( fn ) ) {
			return undefined;
		}

		// Simulated bind
		args = slice.call( arguments, 2 );
		proxy = function() {
			return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
		};

		// Set the guid of unique handler to the same of original handler, so it can be removed
		proxy.guid = fn.guid = fn.guid || jQuery.guid++;

		return proxy;
	},

	now: function() {
		return +( new Date() );
	},

	// jQuery.support is not used in Core but other projects attach their
	// properties to it so it needs to exist.
	support: support
});

// Populate the class2type map
jQuery.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function(i, name) {
	class2type[ "[object " + name + "]" ] = name.toLowerCase();
});

function isArraylike( obj ) {
	var length = obj.length,
		type = jQuery.type( obj );

	if ( type === "function" || jQuery.isWindow( obj ) ) {
		return false;
	}

	if ( obj.nodeType === 1 && length ) {
		return true;
	}

	return type === "array" || length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj;
}
var Sizzle =
/*!
 * Sizzle CSS Selector Engine v1.10.19
 * http://sizzlejs.com/
 *
 * Copyright 2013 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2014-04-18
 */
(function( window ) {

var i,
	support,
	Expr,
	getText,
	isXML,
	tokenize,
	compile,
	select,
	outermostContext,
	sortInput,
	hasDuplicate,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsHTML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,

	// Instance-specific data
	expando = "sizzle" + -(new Date()),
	preferredDoc = window.document,
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
		}
		return 0;
	},

	// General-purpose constants
	strundefined = typeof undefined,
	MAX_NEGATIVE = 1 << 31,

	// Instance methods
	hasOwn = ({}).hasOwnProperty,
	arr = [],
	pop = arr.pop,
	push_native = arr.push,
	push = arr.push,
	slice = arr.slice,
	// Use a stripped-down indexOf if we can't use a native one
	indexOf = arr.indexOf || function( elem ) {
		var i = 0,
			len = this.length;
		for ( ; i < len; i++ ) {
			if ( this[i] === elem ) {
				return i;
			}
		}
		return -1;
	},

	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

	// Regular expressions

	// Whitespace characters http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",
	// http://www.w3.org/TR/css3-syntax/#characters
	characterEncoding = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",

	// Loosely modeled on CSS identifier characters
	// An unquoted value should be a CSS identifier http://www.w3.org/TR/css3-selectors/#attribute-selectors
	// Proper syntax: http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
	identifier = characterEncoding.replace( "w", "w#" ),

	// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
	attributes = "\\[" + whitespace + "*(" + characterEncoding + ")(?:" + whitespace +
		// Operator (capture 2)
		"*([*^$|!~]?=)" + whitespace +
		// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
		"*\\]",

	pseudos = ":(" + characterEncoding + ")(?:\\((" +
		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
		// 1. quoted (capture 3; capture 4 or capture 5)
		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
		// 2. simple (capture 6)
		"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
		// 3. anything else (capture 2)
		".*" +
		")\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),

	rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),

	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + characterEncoding + ")" ),
		"CLASS": new RegExp( "^\\.(" + characterEncoding + ")" ),
		"TAG": new RegExp( "^(" + characterEncoding.replace( "w", "w*" ) + ")" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
			"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
			"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
			whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rnative = /^[^{]+\{\s*\[native \w/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rsibling = /[+~]/,
	rescape = /'|\\/g,

	// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
	funescape = function( _, escaped, escapedWhitespace ) {
		var high = "0x" + escaped - 0x10000;
		// NaN means non-codepoint
		// Support: Firefox<24
		// Workaround erroneous numeric interpretation of +"0x"
		return high !== high || escapedWhitespace ?
			escaped :
			high < 0 ?
				// BMP codepoint
				String.fromCharCode( high + 0x10000 ) :
				// Supplemental Plane codepoint (surrogate pair)
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	};

// Optimize for push.apply( _, NodeList )
try {
	push.apply(
		(arr = slice.call( preferredDoc.childNodes )),
		preferredDoc.childNodes
	);
	// Support: Android<4.0
	// Detect silently failing push.apply
	arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
	push = { apply: arr.length ?

		// Leverage slice if possible
		function( target, els ) {
			push_native.apply( target, slice.call(els) );
		} :

		// Support: IE<9
		// Otherwise append directly
		function( target, els ) {
			var j = target.length,
				i = 0;
			// Can't trust NodeList.length
			while ( (target[j++] = els[i++]) ) {}
			target.length = j - 1;
		}
	};
}

function Sizzle( selector, context, results, seed ) {
	var match, elem, m, nodeType,
		// QSA vars
		i, groups, old, nid, newContext, newSelector;

	if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
		setDocument( context );
	}

	context = context || document;
	results = results || [];

	if ( !selector || typeof selector !== "string" ) {
		return results;
	}

	if ( (nodeType = context.nodeType) !== 1 && nodeType !== 9 ) {
		return [];
	}

	if ( documentIsHTML && !seed ) {

		// Shortcuts
		if ( (match = rquickExpr.exec( selector )) ) {
			// Speed-up: Sizzle("#ID")
			if ( (m = match[1]) ) {
				if ( nodeType === 9 ) {
					elem = context.getElementById( m );
					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document (jQuery #6963)
					if ( elem && elem.parentNode ) {
						// Handle the case where IE, Opera, and Webkit return items
						// by name instead of ID
						if ( elem.id === m ) {
							results.push( elem );
							return results;
						}
					} else {
						return results;
					}
				} else {
					// Context is not a document
					if ( context.ownerDocument && (elem = context.ownerDocument.getElementById( m )) &&
						contains( context, elem ) && elem.id === m ) {
						results.push( elem );
						return results;
					}
				}

			// Speed-up: Sizzle("TAG")
			} else if ( match[2] ) {
				push.apply( results, context.getElementsByTagName( selector ) );
				return results;

			// Speed-up: Sizzle(".CLASS")
			} else if ( (m = match[3]) && support.getElementsByClassName && context.getElementsByClassName ) {
				push.apply( results, context.getElementsByClassName( m ) );
				return results;
			}
		}

		// QSA path
		if ( support.qsa && (!rbuggyQSA || !rbuggyQSA.test( selector )) ) {
			nid = old = expando;
			newContext = context;
			newSelector = nodeType === 9 && selector;

			// qSA works strangely on Element-rooted queries
			// We can work around this by specifying an extra ID on the root
			// and working up from there (Thanks to Andrew Dupont for the technique)
			// IE 8 doesn't work on object elements
			if ( nodeType === 1 && context.nodeName.toLowerCase() !== "object" ) {
				groups = tokenize( selector );

				if ( (old = context.getAttribute("id")) ) {
					nid = old.replace( rescape, "\\$&" );
				} else {
					context.setAttribute( "id", nid );
				}
				nid = "[id='" + nid + "'] ";

				i = groups.length;
				while ( i-- ) {
					groups[i] = nid + toSelector( groups[i] );
				}
				newContext = rsibling.test( selector ) && testContext( context.parentNode ) || context;
				newSelector = groups.join(",");
			}

			if ( newSelector ) {
				try {
					push.apply( results,
						newContext.querySelectorAll( newSelector )
					);
					return results;
				} catch(qsaError) {
				} finally {
					if ( !old ) {
						context.removeAttribute("id");
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Create key-value caches of limited size
 * @returns {Function(string, Object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var keys = [];

	function cache( key, value ) {
		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key + " " ) > Expr.cacheLength ) {
			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return (cache[ key + " " ] = value);
	}
	return cache;
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created div and expects a boolean result
 */
function assert( fn ) {
	var div = document.createElement("div");

	try {
		return !!fn( div );
	} catch (e) {
		return false;
	} finally {
		// Remove from its parent by default
		if ( div.parentNode ) {
			div.parentNode.removeChild( div );
		}
		// release memory in IE
		div = null;
	}
}

/**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
function addHandle( attrs, handler ) {
	var arr = attrs.split("|"),
		i = attrs.length;

	while ( i-- ) {
		Expr.attrHandle[ arr[i] ] = handler;
	}
}

/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
			( ~b.sourceIndex || MAX_NEGATIVE ) -
			( ~a.sourceIndex || MAX_NEGATIVE );

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( (cur = cur.nextSibling) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return (name === "input" || name === "button") && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
function createPositionalPseudo( fn ) {
	return markFunction(function( argument ) {
		argument = +argument;
		return markFunction(function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ (j = matchIndexes[i]) ] ) {
					seed[j] = !(matches[j] = seed[j]);
				}
			}
		});
	});
}

/**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */
function testContext( context ) {
	return context && typeof context.getElementsByTagName !== strundefined && context;
}

// Expose support vars for convenience
support = Sizzle.support = {};

/**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */
isXML = Sizzle.isXML = function( elem ) {
	// documentElement is verified for cases where it doesn't yet exist
	// (such as loading iframes in IE - #4833)
	var documentElement = elem && (elem.ownerDocument || elem).documentElement;
	return documentElement ? documentElement.nodeName !== "HTML" : false;
};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var hasCompare,
		doc = node ? node.ownerDocument || node : preferredDoc,
		parent = doc.defaultView;

	// If no document and documentElement is available, return
	if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Set our document
	document = doc;
	docElem = doc.documentElement;

	// Support tests
	documentIsHTML = !isXML( doc );

	// Support: IE>8
	// If iframe document is assigned to "document" variable and if iframe has been reloaded,
	// IE will throw "permission denied" error when accessing "document" variable, see jQuery #13936
	// IE6-8 do not support the defaultView property so parent will be undefined
	if ( parent && parent !== parent.top ) {
		// IE11 does not have attachEvent, so all must suffer
		if ( parent.addEventListener ) {
			parent.addEventListener( "unload", function() {
				setDocument();
			}, false );
		} else if ( parent.attachEvent ) {
			parent.attachEvent( "onunload", function() {
				setDocument();
			});
		}
	}

	/* Attributes
	---------------------------------------------------------------------- */

	// Support: IE<8
	// Verify that getAttribute really returns attributes and not properties (excepting IE8 booleans)
	support.attributes = assert(function( div ) {
		div.className = "i";
		return !div.getAttribute("className");
	});

	/* getElement(s)By*
	---------------------------------------------------------------------- */

	// Check if getElementsByTagName("*") returns only elements
	support.getElementsByTagName = assert(function( div ) {
		div.appendChild( doc.createComment("") );
		return !div.getElementsByTagName("*").length;
	});

	// Check if getElementsByClassName can be trusted
	support.getElementsByClassName = rnative.test( doc.getElementsByClassName ) && assert(function( div ) {
		div.innerHTML = "<div class='a'></div><div class='a i'></div>";

		// Support: Safari<4
		// Catch class over-caching
		div.firstChild.className = "i";
		// Support: Opera<10
		// Catch gEBCN failure to find non-leading classes
		return div.getElementsByClassName("i").length === 2;
	});

	// Support: IE<10
	// Check if getElementById returns elements by name
	// The broken getElementById methods don't pick up programatically-set names,
	// so use a roundabout getElementsByName test
	support.getById = assert(function( div ) {
		docElem.appendChild( div ).id = expando;
		return !doc.getElementsByName || !doc.getElementsByName( expando ).length;
	});

	// ID find and filter
	if ( support.getById ) {
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== strundefined && documentIsHTML ) {
				var m = context.getElementById( id );
				// Check parentNode to catch when Blackberry 4.6 returns
				// nodes that are no longer in the document #6963
				return m && m.parentNode ? [ m ] : [];
			}
		};
		Expr.filter["ID"] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute("id") === attrId;
			};
		};
	} else {
		// Support: IE6/7
		// getElementById is not reliable as a find shortcut
		delete Expr.find["ID"];

		Expr.filter["ID"] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== strundefined && elem.getAttributeNode("id");
				return node && node.value === attrId;
			};
		};
	}

	// Tag
	Expr.find["TAG"] = support.getElementsByTagName ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== strundefined ) {
				return context.getElementsByTagName( tag );
			}
		} :
		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( (elem = results[i++]) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Class
	Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
		if ( typeof context.getElementsByClassName !== strundefined && documentIsHTML ) {
			return context.getElementsByClassName( className );
		}
	};

	/* QSA/matchesSelector
	---------------------------------------------------------------------- */

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21)
	// We allow this because of a bug in IE8/9 that throws an error
	// whenever `document.activeElement` is accessed on an iframe
	// So, we allow :focus to pass through QSA all the time to avoid the IE error
	// See http://bugs.jquery.com/ticket/13378
	rbuggyQSA = [];

	if ( (support.qsa = rnative.test( doc.querySelectorAll )) ) {
		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert(function( div ) {
			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explicitly
			// setting a boolean content attribute,
			// since its presence should be enough
			// http://bugs.jquery.com/ticket/12359
			div.innerHTML = "<select msallowclip=''><option selected=''></option></select>";

			// Support: IE8, Opera 11-12.16
			// Nothing should be selected when empty strings follow ^= or $= or *=
			// The test attribute must be unknown in Opera but "safe" for WinRT
			// http://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
			if ( div.querySelectorAll("[msallowclip^='']").length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
			}

			// Support: IE8
			// Boolean attributes and "value" are not treated correctly
			if ( !div.querySelectorAll("[selected]").length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":checked").length ) {
				rbuggyQSA.push(":checked");
			}
		});

		assert(function( div ) {
			// Support: Windows 8 Native Apps
			// The type and name attributes are restricted during .innerHTML assignment
			var input = doc.createElement("input");
			input.setAttribute( "type", "hidden" );
			div.appendChild( input ).setAttribute( "name", "D" );

			// Support: IE8
			// Enforce case-sensitivity of name attribute
			if ( div.querySelectorAll("[name=d]").length ) {
				rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":enabled").length ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Opera 10-11 does not throw on post-comma invalid pseudos
			div.querySelectorAll("*,:x");
			rbuggyQSA.push(",.*:");
		});
	}

	if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
		docElem.webkitMatchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector) )) ) {

		assert(function( div ) {
			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( div, "div" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( div, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		});
	}

	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

	/* Contains
	---------------------------------------------------------------------- */
	hasCompare = rnative.test( docElem.compareDocumentPosition );

	// Element contains another
	// Purposefully does not implement inclusive descendent
	// As in, an element does not contain itself
	contains = hasCompare || rnative.test( docElem.contains ) ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			));
		} :
		function( a, b ) {
			if ( b ) {
				while ( (b = b.parentNode) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	/* Sorting
	---------------------------------------------------------------------- */

	// Document order sorting
	sortOrder = hasCompare ?
	function( a, b ) {

		// Flag for duplicate removal
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		// Sort on method existence if only one input has compareDocumentPosition
		var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
		if ( compare ) {
			return compare;
		}

		// Calculate position if both inputs belong to the same document
		compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
			a.compareDocumentPosition( b ) :

			// Otherwise we know they are disconnected
			1;

		// Disconnected nodes
		if ( compare & 1 ||
			(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

			// Choose the first element that is related to our preferred document
			if ( a === doc || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
				return -1;
			}
			if ( b === doc || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
				return 1;
			}

			// Maintain original order
			return sortInput ?
				( indexOf.call( sortInput, a ) - indexOf.call( sortInput, b ) ) :
				0;
		}

		return compare & 4 ? -1 : 1;
	} :
	function( a, b ) {
		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Parentless nodes are either documents or disconnected
		if ( !aup || !bup ) {
			return a === doc ? -1 :
				b === doc ? 1 :
				aup ? -1 :
				bup ? 1 :
				sortInput ?
				( indexOf.call( sortInput, a ) - indexOf.call( sortInput, b ) ) :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( (cur = cur.parentNode) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( (cur = cur.parentNode) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[i] === bp[i] ) {
			i++;
		}

		return i ?
			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[i], bp[i] ) :

			// Otherwise nodes in our document sort first
			ap[i] === preferredDoc ? -1 :
			bp[i] === preferredDoc ? 1 :
			0;
	};

	return doc;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	// Make sure that attribute selectors are quoted
	expr = expr.replace( rattributeQuotes, "='$1']" );

	if ( support.matchesSelector && documentIsHTML &&
		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||
					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch(e) {}
	}

	return Sizzle( expr, document, null, [ elem ] ).length > 0;
};

Sizzle.contains = function( context, elem ) {
	// Set document vars if needed
	if ( ( context.ownerDocument || context ) !== document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	var fn = Expr.attrHandle[ name.toLowerCase() ],
		// Don't get fooled by Object.prototype properties (jQuery #13807)
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
			fn( elem, name, !documentIsHTML ) :
			undefined;

	return val !== undefined ?
		val :
		support.attributes || !documentIsHTML ?
			elem.getAttribute( name ) :
			(val = elem.getAttributeNode(name)) && val.specified ?
				val.value :
				null;
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		j = 0,
		i = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	sortInput = !support.sortStable && results.slice( 0 );
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		while ( (elem = results[i++]) ) {
			if ( elem === results[ i ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	// Clear input after sorting to release objects
	// See https://github.com/jquery/sizzle/pull/225
	sortInput = null;

	return results;
};

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {
		// If no nodeType, this is expected to be an array
		while ( (node = elem[i++]) ) {
			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
		// Use textContent for elements
		// innerText usage removed for consistency of new lines (jQuery #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {
			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}
	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	attrHandle: {},

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[1] = match[1].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );

			if ( match[2] === "~=" ) {
				match[3] = " " + match[3] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {
			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[1] = match[1].toLowerCase();

			if ( match[1].slice( 0, 3 ) === "nth" ) {
				// nth-* requires argument
				if ( !match[3] ) {
					Sizzle.error( match[0] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
				match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

			// other types prohibit arguments
			} else if ( match[3] ) {
				Sizzle.error( match[0] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[6] && match[2];

			if ( matchExpr["CHILD"].test( match[0] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[3] ) {
				match[2] = match[4] || match[5] || "";

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&
				// Get excess from tokenize (recursively)
				(excess = tokenize( unquoted, true )) &&
				// advance to the next closing parenthesis
				(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

				// excess is a negative index
				match[0] = match[0].slice( 0, excess );
				match[2] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeNameSelector ) {
			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
			return nodeNameSelector === "*" ?
				function() { return true; } :
				function( elem ) {
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
				};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
				classCache( className, function( elem ) {
					return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== strundefined && elem.getAttribute("class") || "" );
				});
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
			};
		},

		"CHILD": function( type, what, argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, context, xml ) {
					var cache, outerCache, node, diff, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( (node = node[ dir ]) ) {
									if ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) {
										return false;
									}
								}
								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {
							// Seek `elem` from a previously-cached index
							outerCache = parent[ expando ] || (parent[ expando ] = {});
							cache = outerCache[ type ] || [];
							nodeIndex = cache[0] === dirruns && cache[1];
							diff = cache[0] === dirruns && cache[2];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( (node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								(diff = nodeIndex = 0) || start.pop()) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									outerCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						// Use previously-cached element index if available
						} else if ( useCache && (cache = (elem[ expando ] || (elem[ expando ] = {}))[ type ]) && cache[0] === dirruns ) {
							diff = cache[1];

						// xml :nth-child(...) or :nth-last-child(...) or :nth(-last)?-of-type(...)
						} else {
							// Use the same loop as above to seek `elem` from the start
							while ( (node = ++nodeIndex && node && node[ dir ] ||
								(diff = nodeIndex = 0) || start.pop()) ) {

								if ( ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) && ++diff ) {
									// Cache the index of each encountered element
									if ( useCache ) {
										(node[ expando ] || (node[ expando ] = {}))[ type ] = [ dirruns, diff ];
									}

									if ( node === elem ) {
										break;
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {
			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction(function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf.call( seed, matched[i] );
							seed[ idx ] = !( matches[ idx ] = matched[i] );
						}
					}) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {
		// Potentially complex pseudos
		"not": markFunction(function( selector ) {
			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction(function( seed, matches, context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( (elem = unmatched[i]) ) {
							seed[i] = !(matches[i] = elem);
						}
					}
				}) :
				function( elem, context, xml ) {
					input[0] = elem;
					matcher( input, null, xml, results );
					return !results.pop();
				};
		}),

		"has": markFunction(function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		}),

		"contains": markFunction(function( text ) {
			return function( elem ) {
				return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
			};
		}),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {
			// lang value must be a valid identifier
			if ( !ridentifier.test(lang || "") ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( (elemLang = documentIsHTML ?
						elem.lang :
						elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
				return false;
			};
		}),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
		},

		// Boolean properties
		"enabled": function( elem ) {
			return elem.disabled === false;
		},

		"disabled": function( elem ) {
			return elem.disabled === true;
		},

		"checked": function( elem ) {
			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
		},

		"selected": function( elem ) {
			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {
			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
			//   but not by others (comment: 8; processing instruction: 7; etc.)
			// nodeType < 6 works because attributes (2) do not appear as children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeType < 6 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos["empty"]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&

				// Support: IE<8
				// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
				( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
		},

		// Position-in-collection
		"first": createPositionalPseudo(function() {
			return [ 0 ];
		}),

		"last": createPositionalPseudo(function( matchIndexes, length ) {
			return [ length - 1 ];
		}),

		"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		}),

		"even": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"odd": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		})
	}
};

Expr.pseudos["nth"] = Expr.pseudos["eq"];

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

// Easy API for creating new setFilters
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();

tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || (match = rcomma.exec( soFar )) ) {
			if ( match ) {
				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[0].length ) || soFar;
			}
			groups.push( (tokens = []) );
		}

		matched = false;

		// Combinators
		if ( (match = rcombinators.exec( soFar )) ) {
			matched = match.shift();
			tokens.push({
				value: matched,
				// Cast descendant combinators to space
				type: match[0].replace( rtrim, " " )
			});
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
				(match = preFilters[ type ]( match ))) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					type: type,
					matches: match
				});
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :
			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
};

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[i].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		checkNonElements = base && dir === "parentNode",
		doneName = done++;

	return combinator.first ?
		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( (elem = elem[ dir ]) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var oldCache, outerCache,
				newCache = [ dirruns, doneName ];

			// We can't set arbitrary data on XML nodes, so they don't benefit from dir caching
			if ( xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || (elem[ expando ] = {});
						if ( (oldCache = outerCache[ dir ]) &&
							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

							// Assign to newCache so results back-propagate to previous elements
							return (newCache[ 2 ] = oldCache[ 2 ]);
						} else {
							// Reuse newcache so results back-propagate to previous elements
							outerCache[ dir ] = newCache;

							// A match means we're done; a fail means we have to keep checking
							if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
								return true;
							}
						}
					}
				}
			}
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[i]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[0];
}

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[i], results );
	}
	return results;
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( (elem = unmatched[i]) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction(function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( (elem = temp[i]) ) {
					matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {
					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) ) {
							// Restore matcherIn since elem is not yet a final match
							temp.push( (matcherIn[i] = elem) );
						}
					}
					postFinder( null, (matcherOut = []), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( (elem = matcherOut[i]) &&
						(temp = postFinder ? indexOf.call( seed, elem ) : preMap[i]) > -1 ) {

						seed[temp] = !(results[temp] = elem);
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	});
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[0].type ],
		implicitRelative = leadingRelative || Expr.relative[" "],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf.call( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			return ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				(checkContext = context).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );
		} ];

	for ( ; i < len; i++ ) {
		if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
			matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
		} else {
			matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {
				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[j].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector(
						// If the preceding token was a descendant combinator, insert an implicit any-element `*`
						tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
					).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	var bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, outermost ) {
			var elem, j, matcher,
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				setMatched = [],
				contextBackup = outermostContext,
				// We must always have either seed elements or outermost context
				elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
				len = elems.length;

			if ( outermost ) {
				outermostContext = context !== document && context;
			}

			// Add elements passing elementMatchers directly to results
			// Keep `i` a string if there are no elements so `matchedCount` will be "00" below
			// Support: IE<9, Safari
			// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
			for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;
					while ( (matcher = elementMatchers[j++]) ) {
						if ( matcher( elem, context, xml ) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {
					// They will have gone through all possible matchers
					if ( (elem = !matcher && elem) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// Apply set filters to unmatched elements
			matchedCount += i;
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( (matcher = setMatchers[j++]) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {
					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !(unmatched[i] || setMatched[i]) ) {
								setMatched[i] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {
		// Generate a function of recursive functions that can be used to check each element
		if ( !match ) {
			match = tokenize( selector );
		}
		i = match.length;
		while ( i-- ) {
			cached = matcherFromTokens( match[i] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );

		// Save selector and tokenization
		cached.selector = selector;
	}
	return cached;
};

/**
 * A low-level selection function that works with Sizzle's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with Sizzle.compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */
select = Sizzle.select = function( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		compiled = typeof selector === "function" && selector,
		match = !seed && tokenize( (selector = compiled.selector || selector) );

	results = results || [];

	// Try to minimize operations if there is no seed and only one group
	if ( match.length === 1 ) {

		// Take a shortcut and set the context if the root selector is an ID
		tokens = match[0] = match[0].slice( 0 );
		if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
				support.getById && context.nodeType === 9 && documentIsHTML &&
				Expr.relative[ tokens[1].type ] ) {

			context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
			if ( !context ) {
				return results;

			// Precompiled matchers will still verify ancestry, so step up a level
			} else if ( compiled ) {
				context = context.parentNode;
			}

			selector = selector.slice( tokens.shift().value.length );
		}

		// Fetch a seed set for right-to-left matching
		i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
		while ( i-- ) {
			token = tokens[i];

			// Abort if we hit a combinator
			if ( Expr.relative[ (type = token.type) ] ) {
				break;
			}
			if ( (find = Expr.find[ type ]) ) {
				// Search, expanding context for leading sibling combinators
				if ( (seed = find(
					token.matches[0].replace( runescape, funescape ),
					rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
				)) ) {

					// If seed is empty or no tokens remain, we can return early
					tokens.splice( i, 1 );
					selector = seed.length && toSelector( tokens );
					if ( !selector ) {
						push.apply( results, seed );
						return results;
					}

					break;
				}
			}
		}
	}

	// Compile and execute a filtering function if one is not provided
	// Provide `match` to avoid retokenization if we modified the selector above
	( compiled || compile( selector, match ) )(
		seed,
		context,
		!documentIsHTML,
		results,
		rsibling.test( selector ) && testContext( context.parentNode ) || context
	);
	return results;
};

// One-time assignments

// Sort stability
support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

// Support: Chrome<14
// Always assume duplicates if they aren't passed to the comparison function
support.detectDuplicates = !!hasDuplicate;

// Initialize against the default document
setDocument();

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
support.sortDetached = assert(function( div1 ) {
	// Should return 1, but returns 4 (following)
	return div1.compareDocumentPosition( document.createElement("div") ) & 1;
});

// Support: IE<8
// Prevent attribute/property "interpolation"
// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !assert(function( div ) {
	div.innerHTML = "<a href='#'></a>";
	return div.firstChild.getAttribute("href") === "#" ;
}) ) {
	addHandle( "type|href|height|width", function( elem, name, isXML ) {
		if ( !isXML ) {
			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
		}
	});
}

// Support: IE<9
// Use defaultValue in place of getAttribute("value")
if ( !support.attributes || !assert(function( div ) {
	div.innerHTML = "<input/>";
	div.firstChild.setAttribute( "value", "" );
	return div.firstChild.getAttribute( "value" ) === "";
}) ) {
	addHandle( "value", function( elem, name, isXML ) {
		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
			return elem.defaultValue;
		}
	});
}

// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
if ( !assert(function( div ) {
	return div.getAttribute("disabled") == null;
}) ) {
	addHandle( booleans, function( elem, name, isXML ) {
		var val;
		if ( !isXML ) {
			return elem[ name ] === true ? name.toLowerCase() :
					(val = elem.getAttributeNode( name )) && val.specified ?
					val.value :
				null;
		}
	});
}

return Sizzle;

})( window );



jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;
jQuery.expr[":"] = jQuery.expr.pseudos;
jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;



var rneedsContext = jQuery.expr.match.needsContext;

var rsingleTag = (/^<(\w+)\s*\/?>(?:<\/\1>|)$/);



var risSimple = /^.[^:#\[\.,]*$/;

// Implement the identical functionality for filter and not
function winnow( elements, qualifier, not ) {
	if ( jQuery.isFunction( qualifier ) ) {
		return jQuery.grep( elements, function( elem, i ) {
			/* jshint -W018 */
			return !!qualifier.call( elem, i, elem ) !== not;
		});

	}

	if ( qualifier.nodeType ) {
		return jQuery.grep( elements, function( elem ) {
			return ( elem === qualifier ) !== not;
		});

	}

	if ( typeof qualifier === "string" ) {
		if ( risSimple.test( qualifier ) ) {
			return jQuery.filter( qualifier, elements, not );
		}

		qualifier = jQuery.filter( qualifier, elements );
	}

	return jQuery.grep( elements, function( elem ) {
		return ( jQuery.inArray( elem, qualifier ) >= 0 ) !== not;
	});
}

jQuery.filter = function( expr, elems, not ) {
	var elem = elems[ 0 ];

	if ( not ) {
		expr = ":not(" + expr + ")";
	}

	return elems.length === 1 && elem.nodeType === 1 ?
		jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [] :
		jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
			return elem.nodeType === 1;
		}));
};

jQuery.fn.extend({
	find: function( selector ) {
		var i,
			ret = [],
			self = this,
			len = self.length;

		if ( typeof selector !== "string" ) {
			return this.pushStack( jQuery( selector ).filter(function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			}) );
		}

		for ( i = 0; i < len; i++ ) {
			jQuery.find( selector, self[ i ], ret );
		}

		// Needed because $( selector, context ) becomes $( context ).find( selector )
		ret = this.pushStack( len > 1 ? jQuery.unique( ret ) : ret );
		ret.selector = this.selector ? this.selector + " " + selector : selector;
		return ret;
	},
	filter: function( selector ) {
		return this.pushStack( winnow(this, selector || [], false) );
	},
	not: function( selector ) {
		return this.pushStack( winnow(this, selector || [], true) );
	},
	is: function( selector ) {
		return !!winnow(
			this,

			// If this is a positional/relative selector, check membership in the returned set
			// so $("p:first").is("p:last") won't return true for a doc with two "p".
			typeof selector === "string" && rneedsContext.test( selector ) ?
				jQuery( selector ) :
				selector || [],
			false
		).length;
	}
});


// Initialize a jQuery object


// A central reference to the root jQuery(document)
var rootjQuery,

	// Use the correct document accordingly with window argument (sandbox)
	document = window.document,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,

	init = jQuery.fn.init = function( selector, context ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector.charAt(0) === "<" && selector.charAt( selector.length - 1 ) === ">" && selector.length >= 3 ) {
				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && (match[1] || !context) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[1] ) {
					context = context instanceof jQuery ? context[0] : context;

					// scripts is true for back-compat
					// Intentionally let the error be thrown if parseHTML is not present
					jQuery.merge( this, jQuery.parseHTML(
						match[1],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[1] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {
							// Properties of context are called as methods if possible
							if ( jQuery.isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[2] );

					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document #6963
					if ( elem && elem.parentNode ) {
						// Handle the case where IE and Opera return items
						// by name instead of ID
						if ( elem.id !== match[2] ) {
							return rootjQuery.find( selector );
						}

						// Otherwise, we inject the element directly into the jQuery object
						this.length = 1;
						this[0] = elem;
					}

					this.context = document;
					this.selector = selector;
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || rootjQuery ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this.context = this[0] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( jQuery.isFunction( selector ) ) {
			return typeof rootjQuery.ready !== "undefined" ?
				rootjQuery.ready( selector ) :
				// Execute immediately if ready is not present
				selector( jQuery );
		}

		if ( selector.selector !== undefined ) {
			this.selector = selector.selector;
			this.context = selector.context;
		}

		return jQuery.makeArray( selector, this );
	};

// Give the init function the jQuery prototype for later instantiation
init.prototype = jQuery.fn;

// Initialize central reference
rootjQuery = jQuery( document );


var rparentsprev = /^(?:parents|prev(?:Until|All))/,
	// methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.extend({
	dir: function( elem, dir, until ) {
		var matched = [],
			cur = elem[ dir ];

		while ( cur && cur.nodeType !== 9 && (until === undefined || cur.nodeType !== 1 || !jQuery( cur ).is( until )) ) {
			if ( cur.nodeType === 1 ) {
				matched.push( cur );
			}
			cur = cur[dir];
		}
		return matched;
	},

	sibling: function( n, elem ) {
		var r = [];

		for ( ; n; n = n.nextSibling ) {
			if ( n.nodeType === 1 && n !== elem ) {
				r.push( n );
			}
		}

		return r;
	}
});

jQuery.fn.extend({
	has: function( target ) {
		var i,
			targets = jQuery( target, this ),
			len = targets.length;

		return this.filter(function() {
			for ( i = 0; i < len; i++ ) {
				if ( jQuery.contains( this, targets[i] ) ) {
					return true;
				}
			}
		});
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			matched = [],
			pos = rneedsContext.test( selectors ) || typeof selectors !== "string" ?
				jQuery( selectors, context || this.context ) :
				0;

		for ( ; i < l; i++ ) {
			for ( cur = this[i]; cur && cur !== context; cur = cur.parentNode ) {
				// Always skip document fragments
				if ( cur.nodeType < 11 && (pos ?
					pos.index(cur) > -1 :

					// Don't pass non-elements to Sizzle
					cur.nodeType === 1 &&
						jQuery.find.matchesSelector(cur, selectors)) ) {

					matched.push( cur );
					break;
				}
			}
		}

		return this.pushStack( matched.length > 1 ? jQuery.unique( matched ) : matched );
	},

	// Determine the position of an element within
	// the matched set of elements
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[0] && this[0].parentNode ) ? this.first().prevAll().length : -1;
		}

		// index in selector
		if ( typeof elem === "string" ) {
			return jQuery.inArray( this[0], jQuery( elem ) );
		}

		// Locate the position of the desired element
		return jQuery.inArray(
			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[0] : elem, this );
	},

	add: function( selector, context ) {
		return this.pushStack(
			jQuery.unique(
				jQuery.merge( this.get(), jQuery( selector, context ) )
			)
		);
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter(selector)
		);
	}
});

function sibling( cur, dir ) {
	do {
		cur = cur[ dir ];
	} while ( cur && cur.nodeType !== 1 );

	return cur;
}

jQuery.each({
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return jQuery.dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return jQuery.dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return jQuery.dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return jQuery.sibling( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return jQuery.sibling( elem.firstChild );
	},
	contents: function( elem ) {
		return jQuery.nodeName( elem, "iframe" ) ?
			elem.contentDocument || elem.contentWindow.document :
			jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var ret = jQuery.map( this, fn, until );

		if ( name.slice( -5 ) !== "Until" ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			ret = jQuery.filter( selector, ret );
		}

		if ( this.length > 1 ) {
			// Remove duplicates
			if ( !guaranteedUnique[ name ] ) {
				ret = jQuery.unique( ret );
			}

			// Reverse order for parents* and prev-derivatives
			if ( rparentsprev.test( name ) ) {
				ret = ret.reverse();
			}
		}

		return this.pushStack( ret );
	};
});
var rnotwhite = (/\S+/g);



// String to Object options format cache
var optionsCache = {};

// Convert String-formatted options into Object-formatted ones and store in cache
function createOptions( options ) {
	var object = optionsCache[ options ] = {};
	jQuery.each( options.match( rnotwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	});
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		( optionsCache[ options ] || createOptions( options ) ) :
		jQuery.extend( {}, options );

	var // Flag to know if list is currently firing
		firing,
		// Last fire value (for non-forgettable lists)
		memory,
		// Flag to know if list was already fired
		fired,
		// End of the loop when firing
		firingLength,
		// Index of currently firing callback (modified by remove if needed)
		firingIndex,
		// First callback to fire (used internally by add and fireWith)
		firingStart,
		// Actual callback list
		list = [],
		// Stack of fire calls for repeatable lists
		stack = !options.once && [],
		// Fire callbacks
		fire = function( data ) {
			memory = options.memory && data;
			fired = true;
			firingIndex = firingStart || 0;
			firingStart = 0;
			firingLength = list.length;
			firing = true;
			for ( ; list && firingIndex < firingLength; firingIndex++ ) {
				if ( list[ firingIndex ].apply( data[ 0 ], data[ 1 ] ) === false && options.stopOnFalse ) {
					memory = false; // To prevent further calls using add
					break;
				}
			}
			firing = false;
			if ( list ) {
				if ( stack ) {
					if ( stack.length ) {
						fire( stack.shift() );
					}
				} else if ( memory ) {
					list = [];
				} else {
					self.disable();
				}
			}
		},
		// Actual Callbacks object
		self = {
			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {
					// First, we save the current length
					var start = list.length;
					(function add( args ) {
						jQuery.each( args, function( _, arg ) {
							var type = jQuery.type( arg );
							if ( type === "function" ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && type !== "string" ) {
								// Inspect recursively
								add( arg );
							}
						});
					})( arguments );
					// Do we need to add the callbacks to the
					// current firing batch?
					if ( firing ) {
						firingLength = list.length;
					// With memory, if we're not firing then
					// we should call right away
					} else if ( memory ) {
						firingStart = start;
						fire( memory );
					}
				}
				return this;
			},
			// Remove a callback from the list
			remove: function() {
				if ( list ) {
					jQuery.each( arguments, function( _, arg ) {
						var index;
						while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
							list.splice( index, 1 );
							// Handle firing indexes
							if ( firing ) {
								if ( index <= firingLength ) {
									firingLength--;
								}
								if ( index <= firingIndex ) {
									firingIndex--;
								}
							}
						}
					});
				}
				return this;
			},
			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ? jQuery.inArray( fn, list ) > -1 : !!( list && list.length );
			},
			// Remove all callbacks from the list
			empty: function() {
				list = [];
				firingLength = 0;
				return this;
			},
			// Have the list do nothing anymore
			disable: function() {
				list = stack = memory = undefined;
				return this;
			},
			// Is it disabled?
			disabled: function() {
				return !list;
			},
			// Lock the list in its current state
			lock: function() {
				stack = undefined;
				if ( !memory ) {
					self.disable();
				}
				return this;
			},
			// Is it locked?
			locked: function() {
				return !stack;
			},
			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				if ( list && ( !fired || stack ) ) {
					args = args || [];
					args = [ context, args.slice ? args.slice() : args ];
					if ( firing ) {
						stack.push( args );
					} else {
						fire( args );
					}
				}
				return this;
			},
			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},
			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};


jQuery.extend({

	Deferred: function( func ) {
		var tuples = [
				// action, add listener, listener list, final state
				[ "resolve", "done", jQuery.Callbacks("once memory"), "resolved" ],
				[ "reject", "fail", jQuery.Callbacks("once memory"), "rejected" ],
				[ "notify", "progress", jQuery.Callbacks("memory") ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				then: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;
					return jQuery.Deferred(function( newDefer ) {
						jQuery.each( tuples, function( i, tuple ) {
							var fn = jQuery.isFunction( fns[ i ] ) && fns[ i ];
							// deferred[ done | fail | progress ] for forwarding actions to newDefer
							deferred[ tuple[1] ](function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && jQuery.isFunction( returned.promise ) ) {
									returned.promise()
										.done( newDefer.resolve )
										.fail( newDefer.reject )
										.progress( newDefer.notify );
								} else {
									newDefer[ tuple[ 0 ] + "With" ]( this === promise ? newDefer.promise() : this, fn ? [ returned ] : arguments );
								}
							});
						});
						fns = null;
					}).promise();
				},
				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Keep pipe for back-compat
		promise.pipe = promise.then;

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 3 ];

			// promise[ done | fail | progress ] = list.add
			promise[ tuple[1] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add(function() {
					// state = [ resolved | rejected ]
					state = stateString;

				// [ reject_list | resolve_list ].disable; progress_list.lock
				}, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );
			}

			// deferred[ resolve | reject | notify ]
			deferred[ tuple[0] ] = function() {
				deferred[ tuple[0] + "With" ]( this === deferred ? promise : this, arguments );
				return this;
			};
			deferred[ tuple[0] + "With" ] = list.fireWith;
		});

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( subordinate /* , ..., subordinateN */ ) {
		var i = 0,
			resolveValues = slice.call( arguments ),
			length = resolveValues.length,

			// the count of uncompleted subordinates
			remaining = length !== 1 || ( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,

			// the master Deferred. If resolveValues consist of only a single Deferred, just use that.
			deferred = remaining === 1 ? subordinate : jQuery.Deferred(),

			// Update function for both resolve and progress values
			updateFunc = function( i, contexts, values ) {
				return function( value ) {
					contexts[ i ] = this;
					values[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
					if ( values === progressValues ) {
						deferred.notifyWith( contexts, values );

					} else if ( !(--remaining) ) {
						deferred.resolveWith( contexts, values );
					}
				};
			},

			progressValues, progressContexts, resolveContexts;

		// add listeners to Deferred subordinates; treat others as resolved
		if ( length > 1 ) {
			progressValues = new Array( length );
			progressContexts = new Array( length );
			resolveContexts = new Array( length );
			for ( ; i < length; i++ ) {
				if ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {
					resolveValues[ i ].promise()
						.done( updateFunc( i, resolveContexts, resolveValues ) )
						.fail( deferred.reject )
						.progress( updateFunc( i, progressContexts, progressValues ) );
				} else {
					--remaining;
				}
			}
		}

		// if we're not waiting on anything, resolve the master
		if ( !remaining ) {
			deferred.resolveWith( resolveContexts, resolveValues );
		}

		return deferred.promise();
	}
});


// The deferred used on DOM ready
var readyList;

jQuery.fn.ready = function( fn ) {
	// Add the callback
	jQuery.ready.promise().done( fn );

	return this;
};

jQuery.extend({
	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Hold (or release) the ready event
	holdReady: function( hold ) {
		if ( hold ) {
			jQuery.readyWait++;
		} else {
			jQuery.ready( true );
		}
	},

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Make sure body exists, at least, in case IE gets a little overzealous (ticket #5443).
		if ( !document.body ) {
			return setTimeout( jQuery.ready );
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );

		// Trigger any bound ready events
		if ( jQuery.fn.triggerHandler ) {
			jQuery( document ).triggerHandler( "ready" );
			jQuery( document ).off( "ready" );
		}
	}
});

/**
 * Clean-up method for dom ready events
 */
function detach() {
	if ( document.addEventListener ) {
		document.removeEventListener( "DOMContentLoaded", completed, false );
		window.removeEventListener( "load", completed, false );

	} else {
		document.detachEvent( "onreadystatechange", completed );
		window.detachEvent( "onload", completed );
	}
}

/**
 * The ready event handler and self cleanup method
 */
function completed() {
	// readyState === "complete" is good enough for us to call the dom ready in oldIE
	if ( document.addEventListener || event.type === "load" || document.readyState === "complete" ) {
		detach();
		jQuery.ready();
	}
}

jQuery.ready.promise = function( obj ) {
	if ( !readyList ) {

		readyList = jQuery.Deferred();

		// Catch cases where $(document).ready() is called after the browser event has already occurred.
		// we once tried to use readyState "interactive" here, but it caused issues like the one
		// discovered by ChrisS here: http://bugs.jquery.com/ticket/12282#comment:15
		if ( document.readyState === "complete" ) {
			// Handle it asynchronously to allow scripts the opportunity to delay ready
			setTimeout( jQuery.ready );

		// Standards-based browsers support DOMContentLoaded
		} else if ( document.addEventListener ) {
			// Use the handy event callback
			document.addEventListener( "DOMContentLoaded", completed, false );

			// A fallback to window.onload, that will always work
			window.addEventListener( "load", completed, false );

		// If IE event model is used
		} else {
			// Ensure firing before onload, maybe late but safe also for iframes
			document.attachEvent( "onreadystatechange", completed );

			// A fallback to window.onload, that will always work
			window.attachEvent( "onload", completed );

			// If IE and not a frame
			// continually check to see if the document is ready
			var top = false;

			try {
				top = window.frameElement == null && document.documentElement;
			} catch(e) {}

			if ( top && top.doScroll ) {
				(function doScrollCheck() {
					if ( !jQuery.isReady ) {

						try {
							// Use the trick by Diego Perini
							// http://javascript.nwbox.com/IEContentLoaded/
							top.doScroll("left");
						} catch(e) {
							return setTimeout( doScrollCheck, 50 );
						}

						// detach all dom ready events
						detach();

						// and execute any waiting functions
						jQuery.ready();
					}
				})();
			}
		}
	}
	return readyList.promise( obj );
};


var strundefined = typeof undefined;



// Support: IE<9
// Iteration over object's inherited properties before its own
var i;
for ( i in jQuery( support ) ) {
	break;
}
support.ownLast = i !== "0";

// Note: most support tests are defined in their respective modules.
// false until the test is run
support.inlineBlockNeedsLayout = false;

// Execute ASAP in case we need to set body.style.zoom
jQuery(function() {
	// Minified: var a,b,c,d
	var val, div, body, container;

	body = document.getElementsByTagName( "body" )[ 0 ];
	if ( !body || !body.style ) {
		// Return for frameset docs that don't have a body
		return;
	}

	// Setup
	div = document.createElement( "div" );
	container = document.createElement( "div" );
	container.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px";
	body.appendChild( container ).appendChild( div );

	if ( typeof div.style.zoom !== strundefined ) {
		// Support: IE<8
		// Check if natively block-level elements act like inline-block
		// elements when setting their display to 'inline' and giving
		// them layout
		div.style.cssText = "display:inline;margin:0;border:0;padding:1px;width:1px;zoom:1";

		support.inlineBlockNeedsLayout = val = div.offsetWidth === 3;
		if ( val ) {
			// Prevent IE 6 from affecting layout for positioned elements #11048
			// Prevent IE from shrinking the body in IE 7 mode #12869
			// Support: IE<8
			body.style.zoom = 1;
		}
	}

	body.removeChild( container );
});




(function() {
	var div = document.createElement( "div" );

	// Execute the test only if not already executed in another module.
	if (support.deleteExpando == null) {
		// Support: IE<9
		support.deleteExpando = true;
		try {
			delete div.test;
		} catch( e ) {
			support.deleteExpando = false;
		}
	}

	// Null elements to avoid leaks in IE.
	div = null;
})();


/**
 * Determines whether an object can have data
 */
jQuery.acceptData = function( elem ) {
	var noData = jQuery.noData[ (elem.nodeName + " ").toLowerCase() ],
		nodeType = +elem.nodeType || 1;

	// Do not set data on non-element DOM nodes because it will not be cleared (#8335).
	return nodeType !== 1 && nodeType !== 9 ?
		false :

		// Nodes accept data unless otherwise specified; rejection can be conditional
		!noData || noData !== true && elem.getAttribute("classid") === noData;
};


var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	rmultiDash = /([A-Z])/g;

function dataAttr( elem, key, data ) {
	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {

		var name = "data-" + key.replace( rmultiDash, "-$1" ).toLowerCase();

		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = data === "true" ? true :
					data === "false" ? false :
					data === "null" ? null :
					// Only convert to a number if it doesn't change the string
					+data + "" === data ? +data :
					rbrace.test( data ) ? jQuery.parseJSON( data ) :
					data;
			} catch( e ) {}

			// Make sure we set the data so it isn't changed later
			jQuery.data( elem, key, data );

		} else {
			data = undefined;
		}
	}

	return data;
}

// checks a cache object for emptiness
function isEmptyDataObject( obj ) {
	var name;
	for ( name in obj ) {

		// if the public data object is empty, the private is still empty
		if ( name === "data" && jQuery.isEmptyObject( obj[name] ) ) {
			continue;
		}
		if ( name !== "toJSON" ) {
			return false;
		}
	}

	return true;
}

function internalData( elem, name, data, pvt /* Internal Use Only */ ) {
	if ( !jQuery.acceptData( elem ) ) {
		return;
	}

	var ret, thisCache,
		internalKey = jQuery.expando,

		// We have to handle DOM nodes and JS objects differently because IE6-7
		// can't GC object references properly across the DOM-JS boundary
		isNode = elem.nodeType,

		// Only DOM nodes need the global jQuery cache; JS object data is
		// attached directly to the object so GC can occur automatically
		cache = isNode ? jQuery.cache : elem,

		// Only defining an ID for JS objects if its cache already exists allows
		// the code to shortcut on the same path as a DOM node with no cache
		id = isNode ? elem[ internalKey ] : elem[ internalKey ] && internalKey;

	// Avoid doing any more work than we need to when trying to get data on an
	// object that has no data at all
	if ( (!id || !cache[id] || (!pvt && !cache[id].data)) && data === undefined && typeof name === "string" ) {
		return;
	}

	if ( !id ) {
		// Only DOM nodes need a new unique ID for each element since their data
		// ends up in the global cache
		if ( isNode ) {
			id = elem[ internalKey ] = deletedIds.pop() || jQuery.guid++;
		} else {
			id = internalKey;
		}
	}

	if ( !cache[ id ] ) {
		// Avoid exposing jQuery metadata on plain JS objects when the object
		// is serialized using JSON.stringify
		cache[ id ] = isNode ? {} : { toJSON: jQuery.noop };
	}

	// An object can be passed to jQuery.data instead of a key/value pair; this gets
	// shallow copied over onto the existing cache
	if ( typeof name === "object" || typeof name === "function" ) {
		if ( pvt ) {
			cache[ id ] = jQuery.extend( cache[ id ], name );
		} else {
			cache[ id ].data = jQuery.extend( cache[ id ].data, name );
		}
	}

	thisCache = cache[ id ];

	// jQuery data() is stored in a separate object inside the object's internal data
	// cache in order to avoid key collisions between internal data and user-defined
	// data.
	if ( !pvt ) {
		if ( !thisCache.data ) {
			thisCache.data = {};
		}

		thisCache = thisCache.data;
	}

	if ( data !== undefined ) {
		thisCache[ jQuery.camelCase( name ) ] = data;
	}

	// Check for both converted-to-camel and non-converted data property names
	// If a data property was specified
	if ( typeof name === "string" ) {

		// First Try to find as-is property data
		ret = thisCache[ name ];

		// Test for null|undefined property data
		if ( ret == null ) {

			// Try to find the camelCased property
			ret = thisCache[ jQuery.camelCase( name ) ];
		}
	} else {
		ret = thisCache;
	}

	return ret;
}

function internalRemoveData( elem, name, pvt ) {
	if ( !jQuery.acceptData( elem ) ) {
		return;
	}

	var thisCache, i,
		isNode = elem.nodeType,

		// See jQuery.data for more information
		cache = isNode ? jQuery.cache : elem,
		id = isNode ? elem[ jQuery.expando ] : jQuery.expando;

	// If there is already no cache entry for this object, there is no
	// purpose in continuing
	if ( !cache[ id ] ) {
		return;
	}

	if ( name ) {

		thisCache = pvt ? cache[ id ] : cache[ id ].data;

		if ( thisCache ) {

			// Support array or space separated string names for data keys
			if ( !jQuery.isArray( name ) ) {

				// try the string as a key before any manipulation
				if ( name in thisCache ) {
					name = [ name ];
				} else {

					// split the camel cased version by spaces unless a key with the spaces exists
					name = jQuery.camelCase( name );
					if ( name in thisCache ) {
						name = [ name ];
					} else {
						name = name.split(" ");
					}
				}
			} else {
				// If "name" is an array of keys...
				// When data is initially created, via ("key", "val") signature,
				// keys will be converted to camelCase.
				// Since there is no way to tell _how_ a key was added, remove
				// both plain key and camelCase key. #12786
				// This will only penalize the array argument path.
				name = name.concat( jQuery.map( name, jQuery.camelCase ) );
			}

			i = name.length;
			while ( i-- ) {
				delete thisCache[ name[i] ];
			}

			// If there is no data left in the cache, we want to continue
			// and let the cache object itself get destroyed
			if ( pvt ? !isEmptyDataObject(thisCache) : !jQuery.isEmptyObject(thisCache) ) {
				return;
			}
		}
	}

	// See jQuery.data for more information
	if ( !pvt ) {
		delete cache[ id ].data;

		// Don't destroy the parent cache unless the internal data object
		// had been the only thing left in it
		if ( !isEmptyDataObject( cache[ id ] ) ) {
			return;
		}
	}

	// Destroy the cache
	if ( isNode ) {
		jQuery.cleanData( [ elem ], true );

	// Use delete when supported for expandos or `cache` is not a window per isWindow (#10080)
	/* jshint eqeqeq: false */
	} else if ( support.deleteExpando || cache != cache.window ) {
		/* jshint eqeqeq: true */
		delete cache[ id ];

	// When all else fails, null
	} else {
		cache[ id ] = null;
	}
}

jQuery.extend({
	cache: {},

	// The following elements (space-suffixed to avoid Object.prototype collisions)
	// throw uncatchable exceptions if you attempt to set expando properties
	noData: {
		"applet ": true,
		"embed ": true,
		// ...but Flash objects (which have this classid) *can* handle expandos
		"object ": "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"
	},

	hasData: function( elem ) {
		elem = elem.nodeType ? jQuery.cache[ elem[jQuery.expando] ] : elem[ jQuery.expando ];
		return !!elem && !isEmptyDataObject( elem );
	},

	data: function( elem, name, data ) {
		return internalData( elem, name, data );
	},

	removeData: function( elem, name ) {
		return internalRemoveData( elem, name );
	},

	// For internal use only.
	_data: function( elem, name, data ) {
		return internalData( elem, name, data, true );
	},

	_removeData: function( elem, name ) {
		return internalRemoveData( elem, name, true );
	}
});

jQuery.fn.extend({
	data: function( key, value ) {
		var i, name, data,
			elem = this[0],
			attrs = elem && elem.attributes;

		// Special expections of .data basically thwart jQuery.access,
		// so implement the relevant behavior ourselves

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = jQuery.data( elem );

				if ( elem.nodeType === 1 && !jQuery._data( elem, "parsedAttrs" ) ) {
					i = attrs.length;
					while ( i-- ) {

						// Support: IE11+
						// The attrs elements can be null (#14894)
						if ( attrs[ i ] ) {
							name = attrs[ i ].name;
							if ( name.indexOf( "data-" ) === 0 ) {
								name = jQuery.camelCase( name.slice(5) );
								dataAttr( elem, name, data[ name ] );
							}
						}
					}
					jQuery._data( elem, "parsedAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each(function() {
				jQuery.data( this, key );
			});
		}

		return arguments.length > 1 ?

			// Sets one value
			this.each(function() {
				jQuery.data( this, key, value );
			}) :

			// Gets one value
			// Try to fetch any internally stored data first
			elem ? dataAttr( elem, key, jQuery.data( elem, key ) ) : undefined;
	},

	removeData: function( key ) {
		return this.each(function() {
			jQuery.removeData( this, key );
		});
	}
});


jQuery.extend({
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = jQuery._data( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || jQuery.isArray(data) ) {
					queue = jQuery._data( elem, type, jQuery.makeArray(data) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// not intended for public consumption - generates a queueHooks object, or returns the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return jQuery._data( elem, key ) || jQuery._data( elem, key, {
			empty: jQuery.Callbacks("once memory").add(function() {
				jQuery._removeData( elem, type + "queue" );
				jQuery._removeData( elem, key );
			})
		});
	}
});

jQuery.fn.extend({
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[0], type );
		}

		return data === undefined ?
			this :
			this.each(function() {
				var queue = jQuery.queue( this, type, data );

				// ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[0] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			});
	},
	dequeue: function( type ) {
		return this.each(function() {
			jQuery.dequeue( this, type );
		});
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},
	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while ( i-- ) {
			tmp = jQuery._data( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
});
var pnum = (/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/).source;

var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

var isHidden = function( elem, el ) {
		// isHidden might be called from jQuery#filter function;
		// in that case, element will be second argument
		elem = el || elem;
		return jQuery.css( elem, "display" ) === "none" || !jQuery.contains( elem.ownerDocument, elem );
	};



// Multifunctional method to get and set values of a collection
// The value/s can optionally be executed if it's a function
var access = jQuery.access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
	var i = 0,
		length = elems.length,
		bulk = key == null;

	// Sets many values
	if ( jQuery.type( key ) === "object" ) {
		chainable = true;
		for ( i in key ) {
			jQuery.access( elems, fn, i, key[i], true, emptyGet, raw );
		}

	// Sets one value
	} else if ( value !== undefined ) {
		chainable = true;

		if ( !jQuery.isFunction( value ) ) {
			raw = true;
		}

		if ( bulk ) {
			// Bulk operations run against the entire set
			if ( raw ) {
				fn.call( elems, value );
				fn = null;

			// ...except when executing function values
			} else {
				bulk = fn;
				fn = function( elem, key, value ) {
					return bulk.call( jQuery( elem ), value );
				};
			}
		}

		if ( fn ) {
			for ( ; i < length; i++ ) {
				fn( elems[i], key, raw ? value : value.call( elems[i], i, fn( elems[i], key ) ) );
			}
		}
	}

	return chainable ?
		elems :

		// Gets
		bulk ?
			fn.call( elems ) :
			length ? fn( elems[0], key ) : emptyGet;
};
var rcheckableType = (/^(?:checkbox|radio)$/i);



(function() {
	// Minified: var a,b,c
	var input = document.createElement( "input" ),
		div = document.createElement( "div" ),
		fragment = document.createDocumentFragment();

	// Setup
	div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";

	// IE strips leading whitespace when .innerHTML is used
	support.leadingWhitespace = div.firstChild.nodeType === 3;

	// Make sure that tbody elements aren't automatically inserted
	// IE will insert them into empty tables
	support.tbody = !div.getElementsByTagName( "tbody" ).length;

	// Make sure that link elements get serialized correctly by innerHTML
	// This requires a wrapper element in IE
	support.htmlSerialize = !!div.getElementsByTagName( "link" ).length;

	// Makes sure cloning an html5 element does not cause problems
	// Where outerHTML is undefined, this still works
	support.html5Clone =
		document.createElement( "nav" ).cloneNode( true ).outerHTML !== "<:nav></:nav>";

	// Check if a disconnected checkbox will retain its checked
	// value of true after appended to the DOM (IE6/7)
	input.type = "checkbox";
	input.checked = true;
	fragment.appendChild( input );
	support.appendChecked = input.checked;

	// Make sure textarea (and checkbox) defaultValue is properly cloned
	// Support: IE6-IE11+
	div.innerHTML = "<textarea>x</textarea>";
	support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;

	// #11217 - WebKit loses check when the name is after the checked attribute
	fragment.appendChild( div );
	div.innerHTML = "<input type='radio' checked='checked' name='t'/>";

	// Support: Safari 5.1, iOS 5.1, Android 4.x, Android 2.3
	// old WebKit doesn't clone checked state correctly in fragments
	support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Support: IE<9
	// Opera does not clone events (and typeof div.attachEvent === undefined).
	// IE9-10 clones events bound via attachEvent, but they don't trigger with .click()
	support.noCloneEvent = true;
	if ( div.attachEvent ) {
		div.attachEvent( "onclick", function() {
			support.noCloneEvent = false;
		});

		div.cloneNode( true ).click();
	}

	// Execute the test only if not already executed in another module.
	if (support.deleteExpando == null) {
		// Support: IE<9
		support.deleteExpando = true;
		try {
			delete div.test;
		} catch( e ) {
			support.deleteExpando = false;
		}
	}
})();


(function() {
	var i, eventName,
		div = document.createElement( "div" );

	// Support: IE<9 (lack submit/change bubble), Firefox 23+ (lack focusin event)
	for ( i in { submit: true, change: true, focusin: true }) {
		eventName = "on" + i;

		if ( !(support[ i + "Bubbles" ] = eventName in window) ) {
			// Beware of CSP restrictions (https://developer.mozilla.org/en/Security/CSP)
			div.setAttribute( eventName, "t" );
			support[ i + "Bubbles" ] = div.attributes[ eventName ].expando === false;
		}
	}

	// Null elements to avoid leaks in IE.
	div = null;
})();


var rformElems = /^(?:input|select|textarea)$/i,
	rkeyEvent = /^key/,
	rmouseEvent = /^(?:mouse|pointer|contextmenu)|click/,
	rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	rtypenamespace = /^([^.]*)(?:\.(.+)|)$/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

function safeActiveElement() {
	try {
		return document.activeElement;
	} catch ( err ) { }
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {
		var tmp, events, t, handleObjIn,
			special, eventHandle, handleObj,
			handlers, type, namespaces, origType,
			elemData = jQuery._data( elem );

		// Don't attach events to noData or text/comment nodes (but allow plain objects)
		if ( !elemData ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !(events = elemData.events) ) {
			events = elemData.events = {};
		}
		if ( !(eventHandle = elemData.handle) ) {
			eventHandle = elemData.handle = function( e ) {
				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== strundefined && (!e || jQuery.event.triggered !== e.type) ?
					jQuery.event.dispatch.apply( eventHandle.elem, arguments ) :
					undefined;
			};
			// Add elem as a property of the handle fn to prevent a memory leak with IE non-native events
			eventHandle.elem = elem;
		}

		// Handle multiple events separated by a space
		types = ( types || "" ).match( rnotwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[t] ) || [];
			type = origType = tmp[1];
			namespaces = ( tmp[2] || "" ).split( "." ).sort();

			// There *must* be a type, no attaching namespace-only handlers
			if ( !type ) {
				continue;
			}

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend({
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join(".")
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !(handlers = events[ type ]) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener/attachEvent if the special events handler returns false
				if ( !special.setup || special.setup.call( elem, data, namespaces, eventHandle ) === false ) {
					// Bind the global event handler to the element
					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle, false );

					} else if ( elem.attachEvent ) {
						elem.attachEvent( "on" + type, eventHandle );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

		// Nullify elem to prevent memory leaks in IE
		elem = null;
	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {
		var j, handleObj, tmp,
			origCount, t, events,
			special, handlers, type,
			namespaces, origType,
			elemData = jQuery.hasData( elem ) && jQuery._data( elem );

		if ( !elemData || !(events = elemData.events) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( rnotwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[t] ) || [];
			type = origType = tmp[1];
			namespaces = ( tmp[2] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[2] && new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector || selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown || special.teardown.call( elem, namespaces, elemData.handle ) === false ) {
					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			delete elemData.handle;

			// removeData also checks for emptiness and clears the expando if empty
			// so use it instead of delete
			jQuery._removeData( elem, "events" );
		}
	},

	trigger: function( event, data, elem, onlyHandlers ) {
		var handle, ontype, cur,
			bubbleType, special, tmp, i,
			eventPath = [ elem || document ],
			type = hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split(".") : [];

		cur = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf(".") >= 0 ) {
			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split(".");
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf(":") < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
		event.isTrigger = onlyHandlers ? 2 : 3;
		event.namespace = namespaces.join(".");
		event.namespace_re = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === (elem.ownerDocument || document) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( (cur = eventPath[i++]) && !event.isPropagationStopped() ) {

			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = ( jQuery._data( cur, "events" ) || {} )[ event.type ] && jQuery._data( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && handle.apply && jQuery.acceptData( cur ) ) {
				event.result = handle.apply( cur, data );
				if ( event.result === false ) {
					event.preventDefault();
				}
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( (!special._default || special._default.apply( eventPath.pop(), data ) === false) &&
				jQuery.acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name name as the event.
				// Can't use an .isFunction() check here because IE6/7 fails that test.
				// Don't do default actions on window, that's where global variables be (#6170)
				if ( ontype && elem[ type ] && !jQuery.isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;
					try {
						elem[ type ]();
					} catch ( e ) {
						// IE<9 dies on focus/blur to hidden element (#1486,#12518)
						// only reproducible on winXP IE8 native, not IE9 in IE8 mode
					}
					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	dispatch: function( event ) {

		// Make a writable jQuery.Event from the native event object
		event = jQuery.event.fix( event );

		var i, ret, handleObj, matched, j,
			handlerQueue = [],
			args = slice.call( arguments ),
			handlers = ( jQuery._data( this, "events" ) || {} )[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[0] = event;
		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( (matched = handlerQueue[ i++ ]) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( (handleObj = matched.handlers[ j++ ]) && !event.isImmediatePropagationStopped() ) {

				// Triggered event must either 1) have no namespace, or
				// 2) have namespace(s) a subset or equal to those in the bound event (both can have no namespace).
				if ( !event.namespace_re || event.namespace_re.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( (jQuery.event.special[ handleObj.origType ] || {}).handle || handleObj.handler )
							.apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( (event.result = ret) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var sel, handleObj, matches, i,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Find delegate handlers
		// Black-hole SVG <use> instance trees (#13180)
		// Avoid non-left-click bubbling in Firefox (#3861)
		if ( delegateCount && cur.nodeType && (!event.button || event.type !== "click") ) {

			/* jshint eqeqeq: false */
			for ( ; cur != this; cur = cur.parentNode || this ) {
				/* jshint eqeqeq: true */

				// Don't check non-elements (#13208)
				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
				if ( cur.nodeType === 1 && (cur.disabled !== true || event.type !== "click") ) {
					matches = [];
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (#13203)
						sel = handleObj.selector + " ";

						if ( matches[ sel ] === undefined ) {
							matches[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) >= 0 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matches[ sel ] ) {
							matches.push( handleObj );
						}
					}
					if ( matches.length ) {
						handlerQueue.push({ elem: cur, handlers: matches });
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		if ( delegateCount < handlers.length ) {
			handlerQueue.push({ elem: this, handlers: handlers.slice( delegateCount ) });
		}

		return handlerQueue;
	},

	fix: function( event ) {
		if ( event[ jQuery.expando ] ) {
			return event;
		}

		// Create a writable copy of the event object and normalize some properties
		var i, prop, copy,
			type = event.type,
			originalEvent = event,
			fixHook = this.fixHooks[ type ];

		if ( !fixHook ) {
			this.fixHooks[ type ] = fixHook =
				rmouseEvent.test( type ) ? this.mouseHooks :
				rkeyEvent.test( type ) ? this.keyHooks :
				{};
		}
		copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;

		event = new jQuery.Event( originalEvent );

		i = copy.length;
		while ( i-- ) {
			prop = copy[ i ];
			event[ prop ] = originalEvent[ prop ];
		}

		// Support: IE<9
		// Fix target property (#1925)
		if ( !event.target ) {
			event.target = originalEvent.srcElement || document;
		}

		// Support: Chrome 23+, Safari?
		// Target should not be a text node (#504, #13143)
		if ( event.target.nodeType === 3 ) {
			event.target = event.target.parentNode;
		}

		// Support: IE<9
		// For mouse/key events, metaKey==false if it's undefined (#3368, #11328)
		event.metaKey = !!event.metaKey;

		return fixHook.filter ? fixHook.filter( event, originalEvent ) : event;
	},

	// Includes some event props shared by KeyEvent and MouseEvent
	props: "altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),

	fixHooks: {},

	keyHooks: {
		props: "char charCode key keyCode".split(" "),
		filter: function( event, original ) {

			// Add which for key events
			if ( event.which == null ) {
				event.which = original.charCode != null ? original.charCode : original.keyCode;
			}

			return event;
		}
	},

	mouseHooks: {
		props: "button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
		filter: function( event, original ) {
			var body, eventDoc, doc,
				button = original.button,
				fromElement = original.fromElement;

			// Calculate pageX/Y if missing and clientX/Y available
			if ( event.pageX == null && original.clientX != null ) {
				eventDoc = event.target.ownerDocument || document;
				doc = eventDoc.documentElement;
				body = eventDoc.body;

				event.pageX = original.clientX + ( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) - ( doc && doc.clientLeft || body && body.clientLeft || 0 );
				event.pageY = original.clientY + ( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) - ( doc && doc.clientTop  || body && body.clientTop  || 0 );
			}

			// Add relatedTarget, if necessary
			if ( !event.relatedTarget && fromElement ) {
				event.relatedTarget = fromElement === event.target ? original.toElement : fromElement;
			}

			// Add which for click: 1 === left; 2 === middle; 3 === right
			// Note: button is not normalized, so don't use it
			if ( !event.which && button !== undefined ) {
				event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
			}

			return event;
		}
	},

	special: {
		load: {
			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		focus: {
			// Fire native event if possible so blur/focus sequence is correct
			trigger: function() {
				if ( this !== safeActiveElement() && this.focus ) {
					try {
						this.focus();
						return false;
					} catch ( e ) {
						// Support: IE<9
						// If we error on focus to hidden element (#1486, #12518),
						// let .trigger() run the handlers
					}
				}
			},
			delegateType: "focusin"
		},
		blur: {
			trigger: function() {
				if ( this === safeActiveElement() && this.blur ) {
					this.blur();
					return false;
				}
			},
			delegateType: "focusout"
		},
		click: {
			// For checkbox, fire native event so checked state will be right
			trigger: function() {
				if ( jQuery.nodeName( this, "input" ) && this.type === "checkbox" && this.click ) {
					this.click();
					return false;
				}
			},

			// For cross-browser consistency, don't fire native .click() on links
			_default: function( event ) {
				return jQuery.nodeName( event.target, "a" );
			}
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Support: Firefox 20+
				// Firefox doesn't alert if the returnValue field is not set.
				if ( event.result !== undefined && event.originalEvent ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	},

	simulate: function( type, elem, event, bubble ) {
		// Piggyback on a donor event to simulate a different one.
		// Fake originalEvent to avoid donor's stopPropagation, but if the
		// simulated event prevents default then we do the same on the donor.
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{
				type: type,
				isSimulated: true,
				originalEvent: {}
			}
		);
		if ( bubble ) {
			jQuery.event.trigger( e, null, elem );
		} else {
			jQuery.event.dispatch.call( elem, e );
		}
		if ( e.isDefaultPrevented() ) {
			event.preventDefault();
		}
	}
};

jQuery.removeEvent = document.removeEventListener ?
	function( elem, type, handle ) {
		if ( elem.removeEventListener ) {
			elem.removeEventListener( type, handle, false );
		}
	} :
	function( elem, type, handle ) {
		var name = "on" + type;

		if ( elem.detachEvent ) {

			// #8545, #7054, preventing memory leaks for custom events in IE6-8
			// detachEvent needed property on element, by name of that event, to properly expose it to GC
			if ( typeof elem[ name ] === strundefined ) {
				elem[ name ] = null;
			}

			elem.detachEvent( name, handle );
		}
	};

jQuery.Event = function( src, props ) {
	// Allow instantiation without the 'new' keyword
	if ( !(this instanceof jQuery.Event) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = src.defaultPrevented ||
				src.defaultPrevented === undefined &&
				// Support: IE < 9, Android < 4.0
				src.returnValue === false ?
			returnTrue :
			returnFalse;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || jQuery.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;
		if ( !e ) {
			return;
		}

		// If preventDefault exists, run it on the original event
		if ( e.preventDefault ) {
			e.preventDefault();

		// Support: IE
		// Otherwise set the returnValue property of the original event to false
		} else {
			e.returnValue = false;
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;
		if ( !e ) {
			return;
		}
		// If stopPropagation exists, run it on the original event
		if ( e.stopPropagation ) {
			e.stopPropagation();
		}

		// Support: IE
		// Set the cancelBubble property of the original event to true
		e.cancelBubble = true;
	},
	stopImmediatePropagation: function() {
		var e = this.originalEvent;

		this.isImmediatePropagationStopped = returnTrue;

		if ( e && e.stopImmediatePropagation ) {
			e.stopImmediatePropagation();
		}

		this.stopPropagation();
	}
};

// Create mouseenter/leave events using mouseover/out and event-time checks
jQuery.each({
	mouseenter: "mouseover",
	mouseleave: "mouseout",
	pointerenter: "pointerover",
	pointerleave: "pointerout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mousenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || (related !== target && !jQuery.contains( target, related )) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
});

// IE submit delegation
if ( !support.submitBubbles ) {

	jQuery.event.special.submit = {
		setup: function() {
			// Only need this for delegated form submit events
			if ( jQuery.nodeName( this, "form" ) ) {
				return false;
			}

			// Lazy-add a submit handler when a descendant form may potentially be submitted
			jQuery.event.add( this, "click._submit keypress._submit", function( e ) {
				// Node name check avoids a VML-related crash in IE (#9807)
				var elem = e.target,
					form = jQuery.nodeName( elem, "input" ) || jQuery.nodeName( elem, "button" ) ? elem.form : undefined;
				if ( form && !jQuery._data( form, "submitBubbles" ) ) {
					jQuery.event.add( form, "submit._submit", function( event ) {
						event._submit_bubble = true;
					});
					jQuery._data( form, "submitBubbles", true );
				}
			});
			// return undefined since we don't need an event listener
		},

		postDispatch: function( event ) {
			// If form was submitted by the user, bubble the event up the tree
			if ( event._submit_bubble ) {
				delete event._submit_bubble;
				if ( this.parentNode && !event.isTrigger ) {
					jQuery.event.simulate( "submit", this.parentNode, event, true );
				}
			}
		},

		teardown: function() {
			// Only need this for delegated form submit events
			if ( jQuery.nodeName( this, "form" ) ) {
				return false;
			}

			// Remove delegated handlers; cleanData eventually reaps submit handlers attached above
			jQuery.event.remove( this, "._submit" );
		}
	};
}

// IE change delegation and checkbox/radio fix
if ( !support.changeBubbles ) {

	jQuery.event.special.change = {

		setup: function() {

			if ( rformElems.test( this.nodeName ) ) {
				// IE doesn't fire change on a check/radio until blur; trigger it on click
				// after a propertychange. Eat the blur-change in special.change.handle.
				// This still fires onchange a second time for check/radio after blur.
				if ( this.type === "checkbox" || this.type === "radio" ) {
					jQuery.event.add( this, "propertychange._change", function( event ) {
						if ( event.originalEvent.propertyName === "checked" ) {
							this._just_changed = true;
						}
					});
					jQuery.event.add( this, "click._change", function( event ) {
						if ( this._just_changed && !event.isTrigger ) {
							this._just_changed = false;
						}
						// Allow triggered, simulated change events (#11500)
						jQuery.event.simulate( "change", this, event, true );
					});
				}
				return false;
			}
			// Delegated event; lazy-add a change handler on descendant inputs
			jQuery.event.add( this, "beforeactivate._change", function( e ) {
				var elem = e.target;

				if ( rformElems.test( elem.nodeName ) && !jQuery._data( elem, "changeBubbles" ) ) {
					jQuery.event.add( elem, "change._change", function( event ) {
						if ( this.parentNode && !event.isSimulated && !event.isTrigger ) {
							jQuery.event.simulate( "change", this.parentNode, event, true );
						}
					});
					jQuery._data( elem, "changeBubbles", true );
				}
			});
		},

		handle: function( event ) {
			var elem = event.target;

			// Swallow native change events from checkbox/radio, we already triggered them above
			if ( this !== elem || event.isSimulated || event.isTrigger || (elem.type !== "radio" && elem.type !== "checkbox") ) {
				return event.handleObj.handler.apply( this, arguments );
			}
		},

		teardown: function() {
			jQuery.event.remove( this, "._change" );

			return !rformElems.test( this.nodeName );
		}
	};
}

// Create "bubbling" focus and blur events
if ( !support.focusinBubbles ) {
	jQuery.each({ focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler on the document while someone wants focusin/focusout
		var handler = function( event ) {
				jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ), true );
			};

		jQuery.event.special[ fix ] = {
			setup: function() {
				var doc = this.ownerDocument || this,
					attaches = jQuery._data( doc, fix );

				if ( !attaches ) {
					doc.addEventListener( orig, handler, true );
				}
				jQuery._data( doc, fix, ( attaches || 0 ) + 1 );
			},
			teardown: function() {
				var doc = this.ownerDocument || this,
					attaches = jQuery._data( doc, fix ) - 1;

				if ( !attaches ) {
					doc.removeEventListener( orig, handler, true );
					jQuery._removeData( doc, fix );
				} else {
					jQuery._data( doc, fix, attaches );
				}
			}
		};
	});
}

jQuery.fn.extend({

	on: function( types, selector, data, fn, /*INTERNAL*/ one ) {
		var type, origFn;

		// Types can be a map of types/handlers
		if ( typeof types === "object" ) {
			// ( types-Object, selector, data )
			if ( typeof selector !== "string" ) {
				// ( types-Object, data )
				data = data || selector;
				selector = undefined;
			}
			for ( type in types ) {
				this.on( type, selector, data, types[ type ], one );
			}
			return this;
		}

		if ( data == null && fn == null ) {
			// ( types, fn )
			fn = selector;
			data = selector = undefined;
		} else if ( fn == null ) {
			if ( typeof selector === "string" ) {
				// ( types, selector, fn )
				fn = data;
				data = undefined;
			} else {
				// ( types, data, fn )
				fn = data;
				data = selector;
				selector = undefined;
			}
		}
		if ( fn === false ) {
			fn = returnFalse;
		} else if ( !fn ) {
			return this;
		}

		if ( one === 1 ) {
			origFn = fn;
			fn = function( event ) {
				// Can use an empty set, since event contains the info
				jQuery().off( event );
				return origFn.apply( this, arguments );
			};
			// Use same guid so caller can remove using origFn
			fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
		}
		return this.each( function() {
			jQuery.event.add( this, types, fn, data, selector );
		});
	},
	one: function( types, selector, data, fn ) {
		return this.on( types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {
			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {
			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {
			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each(function() {
			jQuery.event.remove( this, types, fn, selector );
		});
	},

	trigger: function( type, data ) {
		return this.each(function() {
			jQuery.event.trigger( type, data, this );
		});
	},
	triggerHandler: function( type, data ) {
		var elem = this[0];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
});


function createSafeFragment( document ) {
	var list = nodeNames.split( "|" ),
		safeFrag = document.createDocumentFragment();

	if ( safeFrag.createElement ) {
		while ( list.length ) {
			safeFrag.createElement(
				list.pop()
			);
		}
	}
	return safeFrag;
}

var nodeNames = "abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|" +
		"header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",
	rinlinejQuery = / jQuery\d+="(?:null|\d+)"/g,
	rnoshimcache = new RegExp("<(?:" + nodeNames + ")[\\s/>]", "i"),
	rleadingWhitespace = /^\s+/,
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,
	rtagName = /<([\w:]+)/,
	rtbody = /<tbody/i,
	rhtml = /<|&#?\w+;/,
	rnoInnerhtml = /<(?:script|style|link)/i,
	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rscriptType = /^$|\/(?:java|ecma)script/i,
	rscriptTypeMasked = /^true\/(.*)/,
	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,

	// We have to close these tags to support XHTML (#13200)
	wrapMap = {
		option: [ 1, "<select multiple='multiple'>", "</select>" ],
		legend: [ 1, "<fieldset>", "</fieldset>" ],
		area: [ 1, "<map>", "</map>" ],
		param: [ 1, "<object>", "</object>" ],
		thead: [ 1, "<table>", "</table>" ],
		tr: [ 2, "<table><tbody>", "</tbody></table>" ],
		col: [ 2, "<table><tbody></tbody><colgroup>", "</colgroup></table>" ],
		td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

		// IE6-8 can't serialize link, script, style, or any html5 (NoScope) tags,
		// unless wrapped in a div with non-breaking characters in front of it.
		_default: support.htmlSerialize ? [ 0, "", "" ] : [ 1, "X<div>", "</div>"  ]
	},
	safeFragment = createSafeFragment( document ),
	fragmentDiv = safeFragment.appendChild( document.createElement("div") );

wrapMap.optgroup = wrapMap.option;
wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;

function getAll( context, tag ) {
	var elems, elem,
		i = 0,
		found = typeof context.getElementsByTagName !== strundefined ? context.getElementsByTagName( tag || "*" ) :
			typeof context.querySelectorAll !== strundefined ? context.querySelectorAll( tag || "*" ) :
			undefined;

	if ( !found ) {
		for ( found = [], elems = context.childNodes || context; (elem = elems[i]) != null; i++ ) {
			if ( !tag || jQuery.nodeName( elem, tag ) ) {
				found.push( elem );
			} else {
				jQuery.merge( found, getAll( elem, tag ) );
			}
		}
	}

	return tag === undefined || tag && jQuery.nodeName( context, tag ) ?
		jQuery.merge( [ context ], found ) :
		found;
}

// Used in buildFragment, fixes the defaultChecked property
function fixDefaultChecked( elem ) {
	if ( rcheckableType.test( elem.type ) ) {
		elem.defaultChecked = elem.checked;
	}
}

// Support: IE<8
// Manipulating tables requires a tbody
function manipulationTarget( elem, content ) {
	return jQuery.nodeName( elem, "table" ) &&
		jQuery.nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ?

		elem.getElementsByTagName("tbody")[0] ||
			elem.appendChild( elem.ownerDocument.createElement("tbody") ) :
		elem;
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	elem.type = (jQuery.find.attr( elem, "type" ) !== null) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	var match = rscriptTypeMasked.exec( elem.type );
	if ( match ) {
		elem.type = match[1];
	} else {
		elem.removeAttribute("type");
	}
	return elem;
}

// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var elem,
		i = 0;
	for ( ; (elem = elems[i]) != null; i++ ) {
		jQuery._data( elem, "globalEval", !refElements || jQuery._data( refElements[i], "globalEval" ) );
	}
}

function cloneCopyEvent( src, dest ) {

	if ( dest.nodeType !== 1 || !jQuery.hasData( src ) ) {
		return;
	}

	var type, i, l,
		oldData = jQuery._data( src ),
		curData = jQuery._data( dest, oldData ),
		events = oldData.events;

	if ( events ) {
		delete curData.handle;
		curData.events = {};

		for ( type in events ) {
			for ( i = 0, l = events[ type ].length; i < l; i++ ) {
				jQuery.event.add( dest, type, events[ type ][ i ] );
			}
		}
	}

	// make the cloned public data object a copy from the original
	if ( curData.data ) {
		curData.data = jQuery.extend( {}, curData.data );
	}
}

function fixCloneNodeIssues( src, dest ) {
	var nodeName, e, data;

	// We do not need to do anything for non-Elements
	if ( dest.nodeType !== 1 ) {
		return;
	}

	nodeName = dest.nodeName.toLowerCase();

	// IE6-8 copies events bound via attachEvent when using cloneNode.
	if ( !support.noCloneEvent && dest[ jQuery.expando ] ) {
		data = jQuery._data( dest );

		for ( e in data.events ) {
			jQuery.removeEvent( dest, e, data.handle );
		}

		// Event data gets referenced instead of copied if the expando gets copied too
		dest.removeAttribute( jQuery.expando );
	}

	// IE blanks contents when cloning scripts, and tries to evaluate newly-set text
	if ( nodeName === "script" && dest.text !== src.text ) {
		disableScript( dest ).text = src.text;
		restoreScript( dest );

	// IE6-10 improperly clones children of object elements using classid.
	// IE10 throws NoModificationAllowedError if parent is null, #12132.
	} else if ( nodeName === "object" ) {
		if ( dest.parentNode ) {
			dest.outerHTML = src.outerHTML;
		}

		// This path appears unavoidable for IE9. When cloning an object
		// element in IE9, the outerHTML strategy above is not sufficient.
		// If the src has innerHTML and the destination does not,
		// copy the src.innerHTML into the dest.innerHTML. #10324
		if ( support.html5Clone && ( src.innerHTML && !jQuery.trim(dest.innerHTML) ) ) {
			dest.innerHTML = src.innerHTML;
		}

	} else if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
		// IE6-8 fails to persist the checked state of a cloned checkbox
		// or radio button. Worse, IE6-7 fail to give the cloned element
		// a checked appearance if the defaultChecked value isn't also set

		dest.defaultChecked = dest.checked = src.checked;

		// IE6-7 get confused and end up setting the value of a cloned
		// checkbox/radio button to an empty string instead of "on"
		if ( dest.value !== src.value ) {
			dest.value = src.value;
		}

	// IE6-8 fails to return the selected option to the default selected
	// state when cloning options
	} else if ( nodeName === "option" ) {
		dest.defaultSelected = dest.selected = src.defaultSelected;

	// IE6-8 fails to set the defaultValue to the correct value when
	// cloning other types of input fields
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}

jQuery.extend({
	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var destElements, node, clone, i, srcElements,
			inPage = jQuery.contains( elem.ownerDocument, elem );

		if ( support.html5Clone || jQuery.isXMLDoc(elem) || !rnoshimcache.test( "<" + elem.nodeName + ">" ) ) {
			clone = elem.cloneNode( true );

		// IE<=8 does not properly clone detached, unknown element nodes
		} else {
			fragmentDiv.innerHTML = elem.outerHTML;
			fragmentDiv.removeChild( clone = fragmentDiv.firstChild );
		}

		if ( (!support.noCloneEvent || !support.noCloneChecked) &&
				(elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem) ) {

			// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			// Fix all IE cloning issues
			for ( i = 0; (node = srcElements[i]) != null; ++i ) {
				// Ensure that the destination node is not null; Fixes #9587
				if ( destElements[i] ) {
					fixCloneNodeIssues( node, destElements[i] );
				}
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0; (node = srcElements[i]) != null; i++ ) {
					cloneCopyEvent( node, destElements[i] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		destElements = srcElements = node = null;

		// Return the cloned set
		return clone;
	},

	buildFragment: function( elems, context, scripts, selection ) {
		var j, elem, contains,
			tmp, tag, tbody, wrap,
			l = elems.length,

			// Ensure a safe fragment
			safe = createSafeFragment( context ),

			nodes = [],
			i = 0;

		for ( ; i < l; i++ ) {
			elem = elems[ i ];

			if ( elem || elem === 0 ) {

				// Add nodes directly
				if ( jQuery.type( elem ) === "object" ) {
					jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

				// Convert non-html into a text node
				} else if ( !rhtml.test( elem ) ) {
					nodes.push( context.createTextNode( elem ) );

				// Convert html into DOM nodes
				} else {
					tmp = tmp || safe.appendChild( context.createElement("div") );

					// Deserialize a standard representation
					tag = (rtagName.exec( elem ) || [ "", "" ])[ 1 ].toLowerCase();
					wrap = wrapMap[ tag ] || wrapMap._default;

					tmp.innerHTML = wrap[1] + elem.replace( rxhtmlTag, "<$1></$2>" ) + wrap[2];

					// Descend through wrappers to the right content
					j = wrap[0];
					while ( j-- ) {
						tmp = tmp.lastChild;
					}

					// Manually add leading whitespace removed by IE
					if ( !support.leadingWhitespace && rleadingWhitespace.test( elem ) ) {
						nodes.push( context.createTextNode( rleadingWhitespace.exec( elem )[0] ) );
					}

					// Remove IE's autoinserted <tbody> from table fragments
					if ( !support.tbody ) {

						// String was a <table>, *may* have spurious <tbody>
						elem = tag === "table" && !rtbody.test( elem ) ?
							tmp.firstChild :

							// String was a bare <thead> or <tfoot>
							wrap[1] === "<table>" && !rtbody.test( elem ) ?
								tmp :
								0;

						j = elem && elem.childNodes.length;
						while ( j-- ) {
							if ( jQuery.nodeName( (tbody = elem.childNodes[j]), "tbody" ) && !tbody.childNodes.length ) {
								elem.removeChild( tbody );
							}
						}
					}

					jQuery.merge( nodes, tmp.childNodes );

					// Fix #12392 for WebKit and IE > 9
					tmp.textContent = "";

					// Fix #12392 for oldIE
					while ( tmp.firstChild ) {
						tmp.removeChild( tmp.firstChild );
					}

					// Remember the top-level container for proper cleanup
					tmp = safe.lastChild;
				}
			}
		}

		// Fix #11356: Clear elements from fragment
		if ( tmp ) {
			safe.removeChild( tmp );
		}

		// Reset defaultChecked for any radios and checkboxes
		// about to be appended to the DOM in IE 6/7 (#8060)
		if ( !support.appendChecked ) {
			jQuery.grep( getAll( nodes, "input" ), fixDefaultChecked );
		}

		i = 0;
		while ( (elem = nodes[ i++ ]) ) {

			// #4087 - If origin and destination elements are the same, and this is
			// that element, do not do anything
			if ( selection && jQuery.inArray( elem, selection ) !== -1 ) {
				continue;
			}

			contains = jQuery.contains( elem.ownerDocument, elem );

			// Append to fragment
			tmp = getAll( safe.appendChild( elem ), "script" );

			// Preserve script evaluation history
			if ( contains ) {
				setGlobalEval( tmp );
			}

			// Capture executables
			if ( scripts ) {
				j = 0;
				while ( (elem = tmp[ j++ ]) ) {
					if ( rscriptType.test( elem.type || "" ) ) {
						scripts.push( elem );
					}
				}
			}
		}

		tmp = null;

		return safe;
	},

	cleanData: function( elems, /* internal */ acceptData ) {
		var elem, type, id, data,
			i = 0,
			internalKey = jQuery.expando,
			cache = jQuery.cache,
			deleteExpando = support.deleteExpando,
			special = jQuery.event.special;

		for ( ; (elem = elems[i]) != null; i++ ) {
			if ( acceptData || jQuery.acceptData( elem ) ) {

				id = elem[ internalKey ];
				data = id && cache[ id ];

				if ( data ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}

					// Remove cache only if it was not already removed by jQuery.event.remove
					if ( cache[ id ] ) {

						delete cache[ id ];

						// IE does not allow us to delete expando properties from nodes,
						// nor does it have a removeAttribute function on Document nodes;
						// we must handle all of these cases
						if ( deleteExpando ) {
							delete elem[ internalKey ];

						} else if ( typeof elem.removeAttribute !== strundefined ) {
							elem.removeAttribute( internalKey );

						} else {
							elem[ internalKey ] = null;
						}

						deletedIds.push( id );
					}
				}
			}
		}
	}
});

jQuery.fn.extend({
	text: function( value ) {
		return access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().append( ( this[0] && this[0].ownerDocument || document ).createTextNode( value ) );
		}, null, value, arguments.length );
	},

	append: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.appendChild( elem );
			}
		});
	},

	prepend: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.insertBefore( elem, target.firstChild );
			}
		});
	},

	before: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		});
	},

	after: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		});
	},

	remove: function( selector, keepData /* Internal Use Only */ ) {
		var elem,
			elems = selector ? jQuery.filter( selector, this ) : this,
			i = 0;

		for ( ; (elem = elems[i]) != null; i++ ) {

			if ( !keepData && elem.nodeType === 1 ) {
				jQuery.cleanData( getAll( elem ) );
			}

			if ( elem.parentNode ) {
				if ( keepData && jQuery.contains( elem.ownerDocument, elem ) ) {
					setGlobalEval( getAll( elem, "script" ) );
				}
				elem.parentNode.removeChild( elem );
			}
		}

		return this;
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; (elem = this[i]) != null; i++ ) {
			// Remove element nodes and prevent memory leaks
			if ( elem.nodeType === 1 ) {
				jQuery.cleanData( getAll( elem, false ) );
			}

			// Remove any remaining nodes
			while ( elem.firstChild ) {
				elem.removeChild( elem.firstChild );
			}

			// If this is a select, ensure that it displays empty (#12336)
			// Support: IE<9
			if ( elem.options && jQuery.nodeName( elem, "select" ) ) {
				elem.options.length = 0;
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map(function() {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		});
	},

	html: function( value ) {
		return access( this, function( value ) {
			var elem = this[ 0 ] || {},
				i = 0,
				l = this.length;

			if ( value === undefined ) {
				return elem.nodeType === 1 ?
					elem.innerHTML.replace( rinlinejQuery, "" ) :
					undefined;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				( support.htmlSerialize || !rnoshimcache.test( value )  ) &&
				( support.leadingWhitespace || !rleadingWhitespace.test( value ) ) &&
				!wrapMap[ (rtagName.exec( value ) || [ "", "" ])[ 1 ].toLowerCase() ] ) {

				value = value.replace( rxhtmlTag, "<$1></$2>" );

				try {
					for (; i < l; i++ ) {
						// Remove element nodes and prevent memory leaks
						elem = this[i] || {};
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch(e) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function() {
		var arg = arguments[ 0 ];

		// Make the changes, replacing each context element with the new content
		this.domManip( arguments, function( elem ) {
			arg = this.parentNode;

			jQuery.cleanData( getAll( this ) );

			if ( arg ) {
				arg.replaceChild( elem, this );
			}
		});

		// Force removal if there was no new content (e.g., from empty arguments)
		return arg && (arg.length || arg.nodeType) ? this : this.remove();
	},

	detach: function( selector ) {
		return this.remove( selector, true );
	},

	domManip: function( args, callback ) {

		// Flatten any nested arrays
		args = concat.apply( [], args );

		var first, node, hasScripts,
			scripts, doc, fragment,
			i = 0,
			l = this.length,
			set = this,
			iNoClone = l - 1,
			value = args[0],
			isFunction = jQuery.isFunction( value );

		// We can't cloneNode fragments that contain checked, in WebKit
		if ( isFunction ||
				( l > 1 && typeof value === "string" &&
					!support.checkClone && rchecked.test( value ) ) ) {
			return this.each(function( index ) {
				var self = set.eq( index );
				if ( isFunction ) {
					args[0] = value.call( this, index, self.html() );
				}
				self.domManip( args, callback );
			});
		}

		if ( l ) {
			fragment = jQuery.buildFragment( args, this[ 0 ].ownerDocument, false, this );
			first = fragment.firstChild;

			if ( fragment.childNodes.length === 1 ) {
				fragment = first;
			}

			if ( first ) {
				scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
				hasScripts = scripts.length;

				// Use the original fragment for the last item instead of the first because it can end up
				// being emptied incorrectly in certain situations (#8070).
				for ( ; i < l; i++ ) {
					node = fragment;

					if ( i !== iNoClone ) {
						node = jQuery.clone( node, true, true );

						// Keep references to cloned scripts for later restoration
						if ( hasScripts ) {
							jQuery.merge( scripts, getAll( node, "script" ) );
						}
					}

					callback.call( this[i], node, i );
				}

				if ( hasScripts ) {
					doc = scripts[ scripts.length - 1 ].ownerDocument;

					// Reenable scripts
					jQuery.map( scripts, restoreScript );

					// Evaluate executable scripts on first document insertion
					for ( i = 0; i < hasScripts; i++ ) {
						node = scripts[ i ];
						if ( rscriptType.test( node.type || "" ) &&
							!jQuery._data( node, "globalEval" ) && jQuery.contains( doc, node ) ) {

							if ( node.src ) {
								// Optional AJAX dependency, but won't run scripts if not present
								if ( jQuery._evalUrl ) {
									jQuery._evalUrl( node.src );
								}
							} else {
								jQuery.globalEval( ( node.text || node.textContent || node.innerHTML || "" ).replace( rcleanScript, "" ) );
							}
						}
					}
				}

				// Fix #11809: Avoid leaking memory
				fragment = first = null;
			}
		}

		return this;
	}
});

jQuery.each({
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			i = 0,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone(true);
			jQuery( insert[i] )[ original ]( elems );

			// Modern browsers can apply jQuery collections as arrays, but oldIE needs a .get()
			push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
});


var iframe,
	elemdisplay = {};

/**
 * Retrieve the actual display of a element
 * @param {String} name nodeName of the element
 * @param {Object} doc Document object
 */
// Called only from within defaultDisplay
function actualDisplay( name, doc ) {
	var style,
		elem = jQuery( doc.createElement( name ) ).appendTo( doc.body ),

		// getDefaultComputedStyle might be reliably used only on attached element
		display = window.getDefaultComputedStyle && ( style = window.getDefaultComputedStyle( elem[ 0 ] ) ) ?

			// Use of this method is a temporary fix (more like optmization) until something better comes along,
			// since it was removed from specification and supported only in FF
			style.display : jQuery.css( elem[ 0 ], "display" );

	// We don't have any data stored on the element,
	// so use "detach" method as fast way to get rid of the element
	elem.detach();

	return display;
}

/**
 * Try to determine the default display value of an element
 * @param {String} nodeName
 */
function defaultDisplay( nodeName ) {
	var doc = document,
		display = elemdisplay[ nodeName ];

	if ( !display ) {
		display = actualDisplay( nodeName, doc );

		// If the simple way fails, read from inside an iframe
		if ( display === "none" || !display ) {

			// Use the already-created iframe if possible
			iframe = (iframe || jQuery( "<iframe frameborder='0' width='0' height='0'/>" )).appendTo( doc.documentElement );

			// Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
			doc = ( iframe[ 0 ].contentWindow || iframe[ 0 ].contentDocument ).document;

			// Support: IE
			doc.write();
			doc.close();

			display = actualDisplay( nodeName, doc );
			iframe.detach();
		}

		// Store the correct default display
		elemdisplay[ nodeName ] = display;
	}

	return display;
}


(function() {
	var shrinkWrapBlocksVal;

	support.shrinkWrapBlocks = function() {
		if ( shrinkWrapBlocksVal != null ) {
			return shrinkWrapBlocksVal;
		}

		// Will be changed later if needed.
		shrinkWrapBlocksVal = false;

		// Minified: var b,c,d
		var div, body, container;

		body = document.getElementsByTagName( "body" )[ 0 ];
		if ( !body || !body.style ) {
			// Test fired too early or in an unsupported environment, exit.
			return;
		}

		// Setup
		div = document.createElement( "div" );
		container = document.createElement( "div" );
		container.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px";
		body.appendChild( container ).appendChild( div );

		// Support: IE6
		// Check if elements with layout shrink-wrap their children
		if ( typeof div.style.zoom !== strundefined ) {
			// Reset CSS: box-sizing; display; margin; border
			div.style.cssText =
				// Support: Firefox<29, Android 2.3
				// Vendor-prefix box-sizing
				"-webkit-box-sizing:content-box;-moz-box-sizing:content-box;" +
				"box-sizing:content-box;display:block;margin:0;border:0;" +
				"padding:1px;width:1px;zoom:1";
			div.appendChild( document.createElement( "div" ) ).style.width = "5px";
			shrinkWrapBlocksVal = div.offsetWidth !== 3;
		}

		body.removeChild( container );

		return shrinkWrapBlocksVal;
	};

})();
var rmargin = (/^margin/);

var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );



var getStyles, curCSS,
	rposition = /^(top|right|bottom|left)$/;

if ( window.getComputedStyle ) {
	getStyles = function( elem ) {
		return elem.ownerDocument.defaultView.getComputedStyle( elem, null );
	};

	curCSS = function( elem, name, computed ) {
		var width, minWidth, maxWidth, ret,
			style = elem.style;

		computed = computed || getStyles( elem );

		// getPropertyValue is only needed for .css('filter') in IE9, see #12537
		ret = computed ? computed.getPropertyValue( name ) || computed[ name ] : undefined;

		if ( computed ) {

			if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
				ret = jQuery.style( elem, name );
			}

			// A tribute to the "awesome hack by Dean Edwards"
			// Chrome < 17 and Safari 5.0 uses "computed value" instead of "used value" for margin-right
			// Safari 5.1.7 (at least) returns percentage for a larger set of values, but width seems to be reliably pixels
			// this is against the CSSOM draft spec: http://dev.w3.org/csswg/cssom/#resolved-values
			if ( rnumnonpx.test( ret ) && rmargin.test( name ) ) {

				// Remember the original values
				width = style.width;
				minWidth = style.minWidth;
				maxWidth = style.maxWidth;

				// Put in the new values to get a computed value out
				style.minWidth = style.maxWidth = style.width = ret;
				ret = computed.width;

				// Revert the changed values
				style.width = width;
				style.minWidth = minWidth;
				style.maxWidth = maxWidth;
			}
		}

		// Support: IE
		// IE returns zIndex value as an integer.
		return ret === undefined ?
			ret :
			ret + "";
	};
} else if ( document.documentElement.currentStyle ) {
	getStyles = function( elem ) {
		return elem.currentStyle;
	};

	curCSS = function( elem, name, computed ) {
		var left, rs, rsLeft, ret,
			style = elem.style;

		computed = computed || getStyles( elem );
		ret = computed ? computed[ name ] : undefined;

		// Avoid setting ret to empty string here
		// so we don't default to auto
		if ( ret == null && style && style[ name ] ) {
			ret = style[ name ];
		}

		// From the awesome hack by Dean Edwards
		// http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291

		// If we're not dealing with a regular pixel number
		// but a number that has a weird ending, we need to convert it to pixels
		// but not position css attributes, as those are proportional to the parent element instead
		// and we can't measure the parent instead because it might trigger a "stacking dolls" problem
		if ( rnumnonpx.test( ret ) && !rposition.test( name ) ) {

			// Remember the original values
			left = style.left;
			rs = elem.runtimeStyle;
			rsLeft = rs && rs.left;

			// Put in the new values to get a computed value out
			if ( rsLeft ) {
				rs.left = elem.currentStyle.left;
			}
			style.left = name === "fontSize" ? "1em" : ret;
			ret = style.pixelLeft + "px";

			// Revert the changed values
			style.left = left;
			if ( rsLeft ) {
				rs.left = rsLeft;
			}
		}

		// Support: IE
		// IE returns zIndex value as an integer.
		return ret === undefined ?
			ret :
			ret + "" || "auto";
	};
}




function addGetHookIf( conditionFn, hookFn ) {
	// Define the hook, we'll check on the first run if it's really needed.
	return {
		get: function() {
			var condition = conditionFn();

			if ( condition == null ) {
				// The test was not ready at this point; screw the hook this time
				// but check again when needed next time.
				return;
			}

			if ( condition ) {
				// Hook not needed (or it's not possible to use it due to missing dependency),
				// remove it.
				// Since there are no other hooks for marginRight, remove the whole object.
				delete this.get;
				return;
			}

			// Hook needed; redefine it so that the support test is not executed again.

			return (this.get = hookFn).apply( this, arguments );
		}
	};
}


(function() {
	// Minified: var b,c,d,e,f,g, h,i
	var div, style, a, pixelPositionVal, boxSizingReliableVal,
		reliableHiddenOffsetsVal, reliableMarginRightVal;

	// Setup
	div = document.createElement( "div" );
	div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";
	a = div.getElementsByTagName( "a" )[ 0 ];
	style = a && a.style;

	// Finish early in limited (non-browser) environments
	if ( !style ) {
		return;
	}

	style.cssText = "float:left;opacity:.5";

	// Support: IE<9
	// Make sure that element opacity exists (as opposed to filter)
	support.opacity = style.opacity === "0.5";

	// Verify style float existence
	// (IE uses styleFloat instead of cssFloat)
	support.cssFloat = !!style.cssFloat;

	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	// Support: Firefox<29, Android 2.3
	// Vendor-prefix box-sizing
	support.boxSizing = style.boxSizing === "" || style.MozBoxSizing === "" ||
		style.WebkitBoxSizing === "";

	jQuery.extend(support, {
		reliableHiddenOffsets: function() {
			if ( reliableHiddenOffsetsVal == null ) {
				computeStyleTests();
			}
			return reliableHiddenOffsetsVal;
		},

		boxSizingReliable: function() {
			if ( boxSizingReliableVal == null ) {
				computeStyleTests();
			}
			return boxSizingReliableVal;
		},

		pixelPosition: function() {
			if ( pixelPositionVal == null ) {
				computeStyleTests();
			}
			return pixelPositionVal;
		},

		// Support: Android 2.3
		reliableMarginRight: function() {
			if ( reliableMarginRightVal == null ) {
				computeStyleTests();
			}
			return reliableMarginRightVal;
		}
	});

	function computeStyleTests() {
		// Minified: var b,c,d,j
		var div, body, container, contents;

		body = document.getElementsByTagName( "body" )[ 0 ];
		if ( !body || !body.style ) {
			// Test fired too early or in an unsupported environment, exit.
			return;
		}

		// Setup
		div = document.createElement( "div" );
		container = document.createElement( "div" );
		container.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px";
		body.appendChild( container ).appendChild( div );

		div.style.cssText =
			// Support: Firefox<29, Android 2.3
			// Vendor-prefix box-sizing
			"-webkit-box-sizing:border-box;-moz-box-sizing:border-box;" +
			"box-sizing:border-box;display:block;margin-top:1%;top:1%;" +
			"border:1px;padding:1px;width:4px;position:absolute";

		// Support: IE<9
		// Assume reasonable values in the absence of getComputedStyle
		pixelPositionVal = boxSizingReliableVal = false;
		reliableMarginRightVal = true;

		// Check for getComputedStyle so that this code is not run in IE<9.
		if ( window.getComputedStyle ) {
			pixelPositionVal = ( window.getComputedStyle( div, null ) || {} ).top !== "1%";
			boxSizingReliableVal =
				( window.getComputedStyle( div, null ) || { width: "4px" } ).width === "4px";

			// Support: Android 2.3
			// Div with explicit width and no margin-right incorrectly
			// gets computed margin-right based on width of container (#3333)
			// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
			contents = div.appendChild( document.createElement( "div" ) );

			// Reset CSS: box-sizing; display; margin; border; padding
			contents.style.cssText = div.style.cssText =
				// Support: Firefox<29, Android 2.3
				// Vendor-prefix box-sizing
				"-webkit-box-sizing:content-box;-moz-box-sizing:content-box;" +
				"box-sizing:content-box;display:block;margin:0;border:0;padding:0";
			contents.style.marginRight = contents.style.width = "0";
			div.style.width = "1px";

			reliableMarginRightVal =
				!parseFloat( ( window.getComputedStyle( contents, null ) || {} ).marginRight );
		}

		// Support: IE8
		// Check if table cells still have offsetWidth/Height when they are set
		// to display:none and there are still other visible table cells in a
		// table row; if so, offsetWidth/Height are not reliable for use when
		// determining if an element has been hidden directly using
		// display:none (it is still safe to use offsets if a parent element is
		// hidden; don safety goggles and see bug #4512 for more information).
		div.innerHTML = "<table><tr><td></td><td>t</td></tr></table>";
		contents = div.getElementsByTagName( "td" );
		contents[ 0 ].style.cssText = "margin:0;border:0;padding:0;display:none";
		reliableHiddenOffsetsVal = contents[ 0 ].offsetHeight === 0;
		if ( reliableHiddenOffsetsVal ) {
			contents[ 0 ].style.display = "";
			contents[ 1 ].style.display = "none";
			reliableHiddenOffsetsVal = contents[ 0 ].offsetHeight === 0;
		}

		body.removeChild( container );
	}

})();


// A method for quickly swapping in/out CSS properties to get correct calculations.
jQuery.swap = function( elem, options, callback, args ) {
	var ret, name,
		old = {};

	// Remember the old values, and insert the new ones
	for ( name in options ) {
		old[ name ] = elem.style[ name ];
		elem.style[ name ] = options[ name ];
	}

	ret = callback.apply( elem, args || [] );

	// Revert the old values
	for ( name in options ) {
		elem.style[ name ] = old[ name ];
	}

	return ret;
};


var
		ralpha = /alpha\([^)]*\)/i,
	ropacity = /opacity\s*=\s*([^)]*)/,

	// swappable if display is none or starts with table except "table", "table-cell", or "table-caption"
	// see here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	rnumsplit = new RegExp( "^(" + pnum + ")(.*)$", "i" ),
	rrelNum = new RegExp( "^([+-])=(" + pnum + ")", "i" ),

	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: "0",
		fontWeight: "400"
	},

	cssPrefixes = [ "Webkit", "O", "Moz", "ms" ];


// return a css property mapped to a potentially vendor prefixed property
function vendorPropName( style, name ) {

	// shortcut for names that are not vendor prefixed
	if ( name in style ) {
		return name;
	}

	// check for vendor prefixed names
	var capName = name.charAt(0).toUpperCase() + name.slice(1),
		origName = name,
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in style ) {
			return name;
		}
	}

	return origName;
}

function showHide( elements, show ) {
	var display, elem, hidden,
		values = [],
		index = 0,
		length = elements.length;

	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		values[ index ] = jQuery._data( elem, "olddisplay" );
		display = elem.style.display;
		if ( show ) {
			// Reset the inline display of this element to learn if it is
			// being hidden by cascaded rules or not
			if ( !values[ index ] && display === "none" ) {
				elem.style.display = "";
			}

			// Set elements which have been overridden with display: none
			// in a stylesheet to whatever the default browser style is
			// for such an element
			if ( elem.style.display === "" && isHidden( elem ) ) {
				values[ index ] = jQuery._data( elem, "olddisplay", defaultDisplay(elem.nodeName) );
			}
		} else {
			hidden = isHidden( elem );

			if ( display && display !== "none" || !hidden ) {
				jQuery._data( elem, "olddisplay", hidden ? display : jQuery.css( elem, "display" ) );
			}
		}
	}

	// Set the display of most of the elements in a second loop
	// to avoid the constant reflow
	for ( index = 0; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}
		if ( !show || elem.style.display === "none" || elem.style.display === "" ) {
			elem.style.display = show ? values[ index ] || "" : "none";
		}
	}

	return elements;
}

function setPositiveNumber( elem, value, subtract ) {
	var matches = rnumsplit.exec( value );
	return matches ?
		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 1 ] - ( subtract || 0 ) ) + ( matches[ 2 ] || "px" ) :
		value;
}

function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
	var i = extra === ( isBorderBox ? "border" : "content" ) ?
		// If we already have the right measurement, avoid augmentation
		4 :
		// Otherwise initialize for horizontal or vertical properties
		name === "width" ? 1 : 0,

		val = 0;

	for ( ; i < 4; i += 2 ) {
		// both box models exclude margin, so add it if we want it
		if ( extra === "margin" ) {
			val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
		}

		if ( isBorderBox ) {
			// border-box includes padding, so remove it if we want content
			if ( extra === "content" ) {
				val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// at this point, extra isn't border nor margin, so remove border
			if ( extra !== "margin" ) {
				val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		} else {
			// at this point, extra isn't content, so add padding
			val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// at this point, extra isn't content nor padding, so add border
			if ( extra !== "padding" ) {
				val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	return val;
}

function getWidthOrHeight( elem, name, extra ) {

	// Start with offset property, which is equivalent to the border-box value
	var valueIsBorderBox = true,
		val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
		styles = getStyles( elem ),
		isBorderBox = support.boxSizing && jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

	// some non-html elements return undefined for offsetWidth, so check for null/undefined
	// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
	// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
	if ( val <= 0 || val == null ) {
		// Fall back to computed then uncomputed css if necessary
		val = curCSS( elem, name, styles );
		if ( val < 0 || val == null ) {
			val = elem.style[ name ];
		}

		// Computed unit is not pixels. Stop here and return.
		if ( rnumnonpx.test(val) ) {
			return val;
		}

		// we need the check for style in case a browser which returns unreliable values
		// for getComputedStyle silently falls back to the reliable elem.style
		valueIsBorderBox = isBorderBox && ( support.boxSizingReliable() || val === elem.style[ name ] );

		// Normalize "", auto, and prepare for extra
		val = parseFloat( val ) || 0;
	}

	// use the active box-sizing model to add/subtract irrelevant styles
	return ( val +
		augmentWidthOrHeight(
			elem,
			name,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles
		)
	) + "px";
}

jQuery.extend({
	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {
					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Don't automatically add "px" to these possibly-unitless properties
	cssNumber: {
		"columnCount": true,
		"fillOpacity": true,
		"flexGrow": true,
		"flexShrink": true,
		"fontWeight": true,
		"lineHeight": true,
		"opacity": true,
		"order": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {
		// normalize float css property
		"float": support.cssFloat ? "cssFloat" : "styleFloat"
	},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {
		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = jQuery.camelCase( name ),
			style = elem.style;

		name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( style, origName ) );

		// gets hook for the prefixed version
		// followed by the unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// convert relative number strings (+= or -=) to relative numbers. #7345
			if ( type === "string" && (ret = rrelNum.exec( value )) ) {
				value = ( ret[1] + 1 ) * ret[2] + parseFloat( jQuery.css( elem, name ) );
				// Fixes bug #9237
				type = "number";
			}

			// Make sure that null and NaN values aren't set. See: #7116
			if ( value == null || value !== value ) {
				return;
			}

			// If a number was passed in, add 'px' to the (except for certain CSS properties)
			if ( type === "number" && !jQuery.cssNumber[ origName ] ) {
				value += "px";
			}

			// Fixes #8908, it can be done more correctly by specifing setters in cssHooks,
			// but it would mean to define eight (for every problematic property) identical functions
			if ( !support.clearCloneStyle && value === "" && name.indexOf("background") === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !("set" in hooks) || (value = hooks.set( elem, value, extra )) !== undefined ) {

				// Support: IE
				// Swallow errors from 'invalid' CSS values (#5509)
				try {
					style[ name ] = value;
				} catch(e) {}
			}

		} else {
			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks && (ret = hooks.get( elem, false, extra )) !== undefined ) {
				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var num, val, hooks,
			origName = jQuery.camelCase( name );

		// Make sure that we're working with the right name
		name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( elem.style, origName ) );

		// gets hook for the prefixed version
		// followed by the unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		//convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Return, converting to number if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || jQuery.isNumeric( num ) ? num || 0 : val;
		}
		return val;
	}
});

jQuery.each([ "height", "width" ], function( i, name ) {
	jQuery.cssHooks[ name ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {
				// certain elements can have dimension info if we invisibly show them
				// however, it must have a current display style that would benefit from this
				return rdisplayswap.test( jQuery.css( elem, "display" ) ) && elem.offsetWidth === 0 ?
					jQuery.swap( elem, cssShow, function() {
						return getWidthOrHeight( elem, name, extra );
					}) :
					getWidthOrHeight( elem, name, extra );
			}
		},

		set: function( elem, value, extra ) {
			var styles = extra && getStyles( elem );
			return setPositiveNumber( elem, value, extra ?
				augmentWidthOrHeight(
					elem,
					name,
					extra,
					support.boxSizing && jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
					styles
				) : 0
			);
		}
	};
});

if ( !support.opacity ) {
	jQuery.cssHooks.opacity = {
		get: function( elem, computed ) {
			// IE uses filters for opacity
			return ropacity.test( (computed && elem.currentStyle ? elem.currentStyle.filter : elem.style.filter) || "" ) ?
				( 0.01 * parseFloat( RegExp.$1 ) ) + "" :
				computed ? "1" : "";
		},

		set: function( elem, value ) {
			var style = elem.style,
				currentStyle = elem.currentStyle,
				opacity = jQuery.isNumeric( value ) ? "alpha(opacity=" + value * 100 + ")" : "",
				filter = currentStyle && currentStyle.filter || style.filter || "";

			// IE has trouble with opacity if it does not have layout
			// Force it by setting the zoom level
			style.zoom = 1;

			// if setting opacity to 1, and no other filters exist - attempt to remove filter attribute #6652
			// if value === "", then remove inline opacity #12685
			if ( ( value >= 1 || value === "" ) &&
					jQuery.trim( filter.replace( ralpha, "" ) ) === "" &&
					style.removeAttribute ) {

				// Setting style.filter to null, "" & " " still leave "filter:" in the cssText
				// if "filter:" is present at all, clearType is disabled, we want to avoid this
				// style.removeAttribute is IE Only, but so apparently is this code path...
				style.removeAttribute( "filter" );

				// if there is no filter style applied in a css rule or unset inline opacity, we are done
				if ( value === "" || currentStyle && !currentStyle.filter ) {
					return;
				}
			}

			// otherwise, set new filter values
			style.filter = ralpha.test( filter ) ?
				filter.replace( ralpha, opacity ) :
				filter + " " + opacity;
		}
	};
}

jQuery.cssHooks.marginRight = addGetHookIf( support.reliableMarginRight,
	function( elem, computed ) {
		if ( computed ) {
			// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
			// Work around by temporarily setting element display to inline-block
			return jQuery.swap( elem, { "display": "inline-block" },
				curCSS, [ elem, "marginRight" ] );
		}
	}
);

// These hooks are used by animate to expand properties
jQuery.each({
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// assumes a single number if not a string
				parts = typeof value === "string" ? value.split(" ") : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( !rmargin.test( prefix ) ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
});

jQuery.fn.extend({
	css: function( name, value ) {
		return access( this, function( elem, name, value ) {
			var styles, len,
				map = {},
				i = 0;

			if ( jQuery.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	},
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		if ( typeof state === "boolean" ) {
			return state ? this.show() : this.hide();
		}

		return this.each(function() {
			if ( isHidden( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		});
	}
});


function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || "swing";
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			if ( tween.elem[ tween.prop ] != null &&
				(!tween.elem.style || tween.elem.style[ tween.prop ] == null) ) {
				return tween.elem[ tween.prop ];
			}

			// passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails
			// so, simple values such as "10px" are parsed to Float.
			// complex values such as "rotate(1rad)" are returned as is.
			result = jQuery.css( tween.elem, tween.prop, "" );
			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {
			// use step hook for back compat - use cssHook if its there - use .style if its
			// available and use plain properties where available
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.style && ( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null || jQuery.cssHooks[ tween.prop ] ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Support: IE <=9
// Panic based approach to setting things on disconnected nodes

Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p * Math.PI ) / 2;
	}
};

jQuery.fx = Tween.prototype.init;

// Back Compat <1.8 extension point
jQuery.fx.step = {};




var
	fxNow, timerId,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rfxnum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" ),
	rrun = /queueHooks$/,
	animationPrefilters = [ defaultPrefilter ],
	tweeners = {
		"*": [ function( prop, value ) {
			var tween = this.createTween( prop, value ),
				target = tween.cur(),
				parts = rfxnum.exec( value ),
				unit = parts && parts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

				// Starting value computation is required for potential unit mismatches
				start = ( jQuery.cssNumber[ prop ] || unit !== "px" && +target ) &&
					rfxnum.exec( jQuery.css( tween.elem, prop ) ),
				scale = 1,
				maxIterations = 20;

			if ( start && start[ 3 ] !== unit ) {
				// Trust units reported by jQuery.css
				unit = unit || start[ 3 ];

				// Make sure we update the tween properties later on
				parts = parts || [];

				// Iteratively approximate from a nonzero starting point
				start = +target || 1;

				do {
					// If previous iteration zeroed out, double until we get *something*
					// Use a string for doubling factor so we don't accidentally see scale as unchanged below
					scale = scale || ".5";

					// Adjust and apply
					start = start / scale;
					jQuery.style( tween.elem, prop, start + unit );

				// Update scale, tolerating zero or NaN from tween.cur()
				// And breaking the loop if scale is unchanged or perfect, or if we've just had enough
				} while ( scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations );
			}

			// Update tween properties
			if ( parts ) {
				start = tween.start = +start || +target || 0;
				tween.unit = unit;
				// If a +=/-= token was provided, we're doing a relative animation
				tween.end = parts[ 1 ] ?
					start + ( parts[ 1 ] + 1 ) * parts[ 2 ] :
					+parts[ 2 ];
			}

			return tween;
		} ]
	};

// Animations created synchronously will run synchronously
function createFxNow() {
	setTimeout(function() {
		fxNow = undefined;
	});
	return ( fxNow = jQuery.now() );
}

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		attrs = { height: type },
		i = 0;

	// if we include width, step value is 1 to do all cssExpand values,
	// if we don't include width, step value is 2 to skip over Left and Right
	includeWidth = includeWidth ? 1 : 0;
	for ( ; i < 4 ; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

function createTween( value, prop, animation ) {
	var tween,
		collection = ( tweeners[ prop ] || [] ).concat( tweeners[ "*" ] ),
		index = 0,
		length = collection.length;
	for ( ; index < length; index++ ) {
		if ( (tween = collection[ index ].call( animation, prop, value )) ) {

			// we're done with this property
			return tween;
		}
	}
}

function defaultPrefilter( elem, props, opts ) {
	/* jshint validthis: true */
	var prop, value, toggle, tween, hooks, oldfire, display, checkDisplay,
		anim = this,
		orig = {},
		style = elem.style,
		hidden = elem.nodeType && isHidden( elem ),
		dataShow = jQuery._data( elem, "fxshow" );

	// handle queue: false promises
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always(function() {
			// doing this makes sure that the complete handler will be called
			// before this completes
			anim.always(function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			});
		});
	}

	// height/width overflow pass
	if ( elem.nodeType === 1 && ( "height" in props || "width" in props ) ) {
		// Make sure that nothing sneaks out
		// Record all 3 overflow attributes because IE does not
		// change the overflow attribute when overflowX and
		// overflowY are set to the same value
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Set display property to inline-block for height/width
		// animations on inline elements that are having width/height animated
		display = jQuery.css( elem, "display" );

		// Test default display if display is currently "none"
		checkDisplay = display === "none" ?
			jQuery._data( elem, "olddisplay" ) || defaultDisplay( elem.nodeName ) : display;

		if ( checkDisplay === "inline" && jQuery.css( elem, "float" ) === "none" ) {

			// inline-level elements accept inline-block;
			// block-level elements need to be inline with layout
			if ( !support.inlineBlockNeedsLayout || defaultDisplay( elem.nodeName ) === "inline" ) {
				style.display = "inline-block";
			} else {
				style.zoom = 1;
			}
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		if ( !support.shrinkWrapBlocks() ) {
			anim.always(function() {
				style.overflow = opts.overflow[ 0 ];
				style.overflowX = opts.overflow[ 1 ];
				style.overflowY = opts.overflow[ 2 ];
			});
		}
	}

	// show/hide pass
	for ( prop in props ) {
		value = props[ prop ];
		if ( rfxtypes.exec( value ) ) {
			delete props[ prop ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {

				// If there is dataShow left over from a stopped hide or show and we are going to proceed with show, we should pretend to be hidden
				if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
					hidden = true;
				} else {
					continue;
				}
			}
			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );

		// Any non-fx value stops us from restoring the original display value
		} else {
			display = undefined;
		}
	}

	if ( !jQuery.isEmptyObject( orig ) ) {
		if ( dataShow ) {
			if ( "hidden" in dataShow ) {
				hidden = dataShow.hidden;
			}
		} else {
			dataShow = jQuery._data( elem, "fxshow", {} );
		}

		// store state if its toggle - enables .stop().toggle() to "reverse"
		if ( toggle ) {
			dataShow.hidden = !hidden;
		}
		if ( hidden ) {
			jQuery( elem ).show();
		} else {
			anim.done(function() {
				jQuery( elem ).hide();
			});
		}
		anim.done(function() {
			var prop;
			jQuery._removeData( elem, "fxshow" );
			for ( prop in orig ) {
				jQuery.style( elem, prop, orig[ prop ] );
			}
		});
		for ( prop in orig ) {
			tween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );

			if ( !( prop in dataShow ) ) {
				dataShow[ prop ] = tween.start;
				if ( hidden ) {
					tween.end = tween.start;
					tween.start = prop === "width" || prop === "height" ? 1 : 0;
				}
			}
		}

	// If this is a noop like .hide().hide(), restore an overwritten display value
	} else if ( (display === "none" ? defaultDisplay( elem.nodeName ) : display) === "inline" ) {
		style.display = display;
	}
}

function propFilter( props, specialEasing ) {
	var index, name, easing, value, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = jQuery.camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( jQuery.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// not quite $.extend, this wont overwrite keys already present.
			// also - reusing 'index' from above because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = animationPrefilters.length,
		deferred = jQuery.Deferred().always( function() {
			// don't match elem in the :animated selector
			delete tick.elem;
		}),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),
				// archaic crash bug won't allow us to use 1 - ( 0.5 || 0 ) (#12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length ; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ]);

			if ( percent < 1 && length ) {
				return remaining;
			} else {
				deferred.resolveWith( elem, [ animation ] );
				return false;
			}
		},
		animation = deferred.promise({
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, { specialEasing: {} }, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
						animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,
					// if we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length ; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// resolve when we played the last frame
				// otherwise, reject
				if ( gotoEnd ) {
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		}),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length ; index++ ) {
		result = animationPrefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			return result;
		}
	}

	jQuery.map( props, createTween, animation );

	if ( jQuery.isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		})
	);

	// attach callbacks from options
	return animation.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );
}

jQuery.Animation = jQuery.extend( Animation, {
	tweener: function( props, callback ) {
		if ( jQuery.isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.split(" ");
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length ; index++ ) {
			prop = props[ index ];
			tweeners[ prop ] = tweeners[ prop ] || [];
			tweeners[ prop ].unshift( callback );
		}
	},

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			animationPrefilters.unshift( callback );
		} else {
			animationPrefilters.push( callback );
		}
	}
});

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			jQuery.isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
	};

	opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration :
		opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;

	// normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( jQuery.isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.fn.extend({
	fadeTo: function( speed, to, easing, callback ) {

		// show any hidden elements after setting opacity to 0
		return this.filter( isHidden ).css( "opacity", 0 ).show()

			// animate to the value specified
			.end().animate({ opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {
				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );

				// Empty animations, or finishing resolves immediately
				if ( empty || jQuery._data( this, "finish" ) ) {
					anim.stop( true );
				}
			};
			doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue && type !== false ) {
			this.queue( type || "fx", [] );
		}

		return this.each(function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = jQuery._data( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && (type == null || timers[ index ].queue === type) ) {
					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// start the next in the queue if the last step wasn't forced
			// timers currently will call their complete callbacks, which will dequeue
			// but only if they were gotoEnd
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		});
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each(function() {
			var index,
				data = jQuery._data( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// enable finishing flag on private data
			data.finish = true;

			// empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.stop ) {
				hooks.stop.call( this, true );
			}

			// look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// turn off finishing flag
			delete data.finish;
		});
	}
});

jQuery.each([ "toggle", "show", "hide" ], function( i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
});

// Generate shortcuts for custom animations
jQuery.each({
	slideDown: genFx("show"),
	slideUp: genFx("hide"),
	slideToggle: genFx("toggle"),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
});

jQuery.timers = [];
jQuery.fx.tick = function() {
	var timer,
		timers = jQuery.timers,
		i = 0;

	fxNow = jQuery.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];
		// Checks the timer has not already been removed
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	jQuery.timers.push( timer );
	if ( timer() ) {
		jQuery.fx.start();
	} else {
		jQuery.timers.pop();
	}
};

jQuery.fx.interval = 13;

jQuery.fx.start = function() {
	if ( !timerId ) {
		timerId = setInterval( jQuery.fx.tick, jQuery.fx.interval );
	}
};

jQuery.fx.stop = function() {
	clearInterval( timerId );
	timerId = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,
	// Default speed
	_default: 400
};


// Based off of the plugin by Clint Helfers, with permission.
// http://blindsignals.com/index.php/2009/07/jquery-delay/
jQuery.fn.delay = function( time, type ) {
	time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
	type = type || "fx";

	return this.queue( type, function( next, hooks ) {
		var timeout = setTimeout( next, time );
		hooks.stop = function() {
			clearTimeout( timeout );
		};
	});
};


(function() {
	// Minified: var a,b,c,d,e
	var input, div, select, a, opt;

	// Setup
	div = document.createElement( "div" );
	div.setAttribute( "className", "t" );
	div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";
	a = div.getElementsByTagName("a")[ 0 ];

	// First batch of tests.
	select = document.createElement("select");
	opt = select.appendChild( document.createElement("option") );
	input = div.getElementsByTagName("input")[ 0 ];

	a.style.cssText = "top:1px";

	// Test setAttribute on camelCase class. If it works, we need attrFixes when doing get/setAttribute (ie6/7)
	support.getSetAttribute = div.className !== "t";

	// Get the style information from getAttribute
	// (IE uses .cssText instead)
	support.style = /top/.test( a.getAttribute("style") );

	// Make sure that URLs aren't manipulated
	// (IE normalizes it by default)
	support.hrefNormalized = a.getAttribute("href") === "/a";

	// Check the default checkbox/radio value ("" on WebKit; "on" elsewhere)
	support.checkOn = !!input.value;

	// Make sure that a selected-by-default option has a working selected property.
	// (WebKit defaults to false instead of true, IE too, if it's in an optgroup)
	support.optSelected = opt.selected;

	// Tests for enctype support on a form (#6743)
	support.enctype = !!document.createElement("form").enctype;

	// Make sure that the options inside disabled selects aren't marked as disabled
	// (WebKit marks them as disabled)
	select.disabled = true;
	support.optDisabled = !opt.disabled;

	// Support: IE8 only
	// Check if we can trust getAttribute("value")
	input = document.createElement( "input" );
	input.setAttribute( "value", "" );
	support.input = input.getAttribute( "value" ) === "";

	// Check if an input maintains its value after becoming a radio
	input.value = "t";
	input.setAttribute( "type", "radio" );
	support.radioValue = input.value === "t";
})();


var rreturn = /\r/g;

jQuery.fn.extend({
	val: function( value ) {
		var hooks, ret, isFunction,
			elem = this[0];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] || jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks && "get" in hooks && (ret = hooks.get( elem, "value" )) !== undefined ) {
					return ret;
				}

				ret = elem.value;

				return typeof ret === "string" ?
					// handle most common string cases
					ret.replace(rreturn, "") :
					// handle cases where value is null/undef or number
					ret == null ? "" : ret;
			}

			return;
		}

		isFunction = jQuery.isFunction( value );

		return this.each(function( i ) {
			var val;

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( isFunction ) {
				val = value.call( this, i, jQuery( this ).val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";
			} else if ( typeof val === "number" ) {
				val += "";
			} else if ( jQuery.isArray( val ) ) {
				val = jQuery.map( val, function( value ) {
					return value == null ? "" : value + "";
				});
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !("set" in hooks) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		});
	}
});

jQuery.extend({
	valHooks: {
		option: {
			get: function( elem ) {
				var val = jQuery.find.attr( elem, "value" );
				return val != null ?
					val :
					// Support: IE10-11+
					// option.text throws exceptions (#14686, #14858)
					jQuery.trim( jQuery.text( elem ) );
			}
		},
		select: {
			get: function( elem ) {
				var value, option,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one" || index < 0,
					values = one ? null : [],
					max = one ? index + 1 : options.length,
					i = index < 0 ?
						max :
						one ? index : 0;

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// oldIE doesn't update selected after form reset (#2551)
					if ( ( option.selected || i === index ) &&
							// Don't return options that are disabled or in a disabled optgroup
							( support.optDisabled ? !option.disabled : option.getAttribute("disabled") === null ) &&
							( !option.parentNode.disabled || !jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var optionSet, option,
					options = elem.options,
					values = jQuery.makeArray( value ),
					i = options.length;

				while ( i-- ) {
					option = options[ i ];

					if ( jQuery.inArray( jQuery.valHooks.option.get( option ), values ) >= 0 ) {

						// Support: IE6
						// When new option element is added to select box we need to
						// force reflow of newly added node in order to workaround delay
						// of initialization properties
						try {
							option.selected = optionSet = true;

						} catch ( _ ) {

							// Will be executed only in IE6
							option.scrollHeight;
						}

					} else {
						option.selected = false;
					}
				}

				// Force browsers to behave consistently when non-matching value is set
				if ( !optionSet ) {
					elem.selectedIndex = -1;
				}

				return options;
			}
		}
	}
});

// Radios and checkboxes getter/setter
jQuery.each([ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = {
		set: function( elem, value ) {
			if ( jQuery.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery(elem).val(), value ) >= 0 );
			}
		}
	};
	if ( !support.checkOn ) {
		jQuery.valHooks[ this ].get = function( elem ) {
			// Support: Webkit
			// "" is returned instead of "on" if a value isn't specified
			return elem.getAttribute("value") === null ? "on" : elem.value;
		};
	}
});




var nodeHook, boolHook,
	attrHandle = jQuery.expr.attrHandle,
	ruseDefault = /^(?:checked|selected)$/i,
	getSetAttribute = support.getSetAttribute,
	getSetInput = support.input;

jQuery.fn.extend({
	attr: function( name, value ) {
		return access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each(function() {
			jQuery.removeAttr( this, name );
		});
	}
});

jQuery.extend({
	attr: function( elem, name, value ) {
		var hooks, ret,
			nType = elem.nodeType;

		// don't get/set attributes on text, comment and attribute nodes
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === strundefined ) {
			return jQuery.prop( elem, name, value );
		}

		// All attributes are lowercase
		// Grab necessary hook if one is defined
		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
			name = name.toLowerCase();
			hooks = jQuery.attrHooks[ name ] ||
				( jQuery.expr.match.bool.test( name ) ? boolHook : nodeHook );
		}

		if ( value !== undefined ) {

			if ( value === null ) {
				jQuery.removeAttr( elem, name );

			} else if ( hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ) {
				return ret;

			} else {
				elem.setAttribute( name, value + "" );
				return value;
			}

		} else if ( hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ) {
			return ret;

		} else {
			ret = jQuery.find.attr( elem, name );

			// Non-existent attributes return null, we normalize to undefined
			return ret == null ?
				undefined :
				ret;
		}
	},

	removeAttr: function( elem, value ) {
		var name, propName,
			i = 0,
			attrNames = value && value.match( rnotwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( (name = attrNames[i++]) ) {
				propName = jQuery.propFix[ name ] || name;

				// Boolean attributes get special treatment (#10870)
				if ( jQuery.expr.match.bool.test( name ) ) {
					// Set corresponding property to false
					if ( getSetInput && getSetAttribute || !ruseDefault.test( name ) ) {
						elem[ propName ] = false;
					// Support: IE<9
					// Also clear defaultChecked/defaultSelected (if appropriate)
					} else {
						elem[ jQuery.camelCase( "default-" + name ) ] =
							elem[ propName ] = false;
					}

				// See #9699 for explanation of this approach (setting first, then removal)
				} else {
					jQuery.attr( elem, name, "" );
				}

				elem.removeAttribute( getSetAttribute ? name : propName );
			}
		}
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !support.radioValue && value === "radio" && jQuery.nodeName(elem, "input") ) {
					// Setting the type on a radio button after the value resets the value in IE6-9
					// Reset value to default in case type is set after value during creation
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	}
});

// Hook for boolean attributes
boolHook = {
	set: function( elem, value, name ) {
		if ( value === false ) {
			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else if ( getSetInput && getSetAttribute || !ruseDefault.test( name ) ) {
			// IE<8 needs the *property* name
			elem.setAttribute( !getSetAttribute && jQuery.propFix[ name ] || name, name );

		// Use defaultChecked and defaultSelected for oldIE
		} else {
			elem[ jQuery.camelCase( "default-" + name ) ] = elem[ name ] = true;
		}

		return name;
	}
};

// Retrieve booleans specially
jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {

	var getter = attrHandle[ name ] || jQuery.find.attr;

	attrHandle[ name ] = getSetInput && getSetAttribute || !ruseDefault.test( name ) ?
		function( elem, name, isXML ) {
			var ret, handle;
			if ( !isXML ) {
				// Avoid an infinite loop by temporarily removing this function from the getter
				handle = attrHandle[ name ];
				attrHandle[ name ] = ret;
				ret = getter( elem, name, isXML ) != null ?
					name.toLowerCase() :
					null;
				attrHandle[ name ] = handle;
			}
			return ret;
		} :
		function( elem, name, isXML ) {
			if ( !isXML ) {
				return elem[ jQuery.camelCase( "default-" + name ) ] ?
					name.toLowerCase() :
					null;
			}
		};
});

// fix oldIE attroperties
if ( !getSetInput || !getSetAttribute ) {
	jQuery.attrHooks.value = {
		set: function( elem, value, name ) {
			if ( jQuery.nodeName( elem, "input" ) ) {
				// Does not return so that setAttribute is also used
				elem.defaultValue = value;
			} else {
				// Use nodeHook if defined (#1954); otherwise setAttribute is fine
				return nodeHook && nodeHook.set( elem, value, name );
			}
		}
	};
}

// IE6/7 do not support getting/setting some attributes with get/setAttribute
if ( !getSetAttribute ) {

	// Use this for any attribute in IE6/7
	// This fixes almost every IE6/7 issue
	nodeHook = {
		set: function( elem, value, name ) {
			// Set the existing or create a new attribute node
			var ret = elem.getAttributeNode( name );
			if ( !ret ) {
				elem.setAttributeNode(
					(ret = elem.ownerDocument.createAttribute( name ))
				);
			}

			ret.value = value += "";

			// Break association with cloned elements by also using setAttribute (#9646)
			if ( name === "value" || value === elem.getAttribute( name ) ) {
				return value;
			}
		}
	};

	// Some attributes are constructed with empty-string values when not defined
	attrHandle.id = attrHandle.name = attrHandle.coords =
		function( elem, name, isXML ) {
			var ret;
			if ( !isXML ) {
				return (ret = elem.getAttributeNode( name )) && ret.value !== "" ?
					ret.value :
					null;
			}
		};

	// Fixing value retrieval on a button requires this module
	jQuery.valHooks.button = {
		get: function( elem, name ) {
			var ret = elem.getAttributeNode( name );
			if ( ret && ret.specified ) {
				return ret.value;
			}
		},
		set: nodeHook.set
	};

	// Set contenteditable to false on removals(#10429)
	// Setting to empty string throws an error as an invalid value
	jQuery.attrHooks.contenteditable = {
		set: function( elem, value, name ) {
			nodeHook.set( elem, value === "" ? false : value, name );
		}
	};

	// Set width and height to auto instead of 0 on empty string( Bug #8150 )
	// This is for removals
	jQuery.each([ "width", "height" ], function( i, name ) {
		jQuery.attrHooks[ name ] = {
			set: function( elem, value ) {
				if ( value === "" ) {
					elem.setAttribute( name, "auto" );
					return value;
				}
			}
		};
	});
}

if ( !support.style ) {
	jQuery.attrHooks.style = {
		get: function( elem ) {
			// Return undefined in the case of empty string
			// Note: IE uppercases css property names, but if we were to .toLowerCase()
			// .cssText, that would destroy case senstitivity in URL's, like in "background"
			return elem.style.cssText || undefined;
		},
		set: function( elem, value ) {
			return ( elem.style.cssText = value + "" );
		}
	};
}




var rfocusable = /^(?:input|select|textarea|button|object)$/i,
	rclickable = /^(?:a|area)$/i;

jQuery.fn.extend({
	prop: function( name, value ) {
		return access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		name = jQuery.propFix[ name ] || name;
		return this.each(function() {
			// try/catch handles cases where IE balks (such as removing a property on window)
			try {
				this[ name ] = undefined;
				delete this[ name ];
			} catch( e ) {}
		});
	}
});

jQuery.extend({
	propFix: {
		"for": "htmlFor",
		"class": "className"
	},

	prop: function( elem, name, value ) {
		var ret, hooks, notxml,
			nType = elem.nodeType;

		// don't get/set properties on text, comment and attribute nodes
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		notxml = nType !== 1 || !jQuery.isXMLDoc( elem );

		if ( notxml ) {
			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			return hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ?
				ret :
				( elem[ name ] = value );

		} else {
			return hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ?
				ret :
				elem[ name ];
		}
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {
				// elem.tabIndex doesn't always return the correct value when it hasn't been explicitly set
				// http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
				// Use proper attribute retrieval(#12072)
				var tabindex = jQuery.find.attr( elem, "tabindex" );

				return tabindex ?
					parseInt( tabindex, 10 ) :
					rfocusable.test( elem.nodeName ) || rclickable.test( elem.nodeName ) && elem.href ?
						0 :
						-1;
			}
		}
	}
});

// Some attributes require a special call on IE
// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !support.hrefNormalized ) {
	// href/src property should get the full normalized URL (#10299/#12915)
	jQuery.each([ "href", "src" ], function( i, name ) {
		jQuery.propHooks[ name ] = {
			get: function( elem ) {
				return elem.getAttribute( name, 4 );
			}
		};
	});
}

// Support: Safari, IE9+
// mis-reports the default selected property of an option
// Accessing the parent's selectedIndex property fixes it
if ( !support.optSelected ) {
	jQuery.propHooks.selected = {
		get: function( elem ) {
			var parent = elem.parentNode;

			if ( parent ) {
				parent.selectedIndex;

				// Make sure that it also works with optgroups, see #5701
				if ( parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
			}
			return null;
		}
	};
}

jQuery.each([
	"tabIndex",
	"readOnly",
	"maxLength",
	"cellSpacing",
	"cellPadding",
	"rowSpan",
	"colSpan",
	"useMap",
	"frameBorder",
	"contentEditable"
], function() {
	jQuery.propFix[ this.toLowerCase() ] = this;
});

// IE6/7 call enctype encoding
if ( !support.enctype ) {
	jQuery.propFix.enctype = "encoding";
}




var rclass = /[\t\r\n\f]/g;

jQuery.fn.extend({
	addClass: function( value ) {
		var classes, elem, cur, clazz, j, finalValue,
			i = 0,
			len = this.length,
			proceed = typeof value === "string" && value;

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( j ) {
				jQuery( this ).addClass( value.call( this, j, this.className ) );
			});
		}

		if ( proceed ) {
			// The disjunction here is for better compressibility (see removeClass)
			classes = ( value || "" ).match( rnotwhite ) || [];

			for ( ; i < len; i++ ) {
				elem = this[ i ];
				cur = elem.nodeType === 1 && ( elem.className ?
					( " " + elem.className + " " ).replace( rclass, " " ) :
					" "
				);

				if ( cur ) {
					j = 0;
					while ( (clazz = classes[j++]) ) {
						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
							cur += clazz + " ";
						}
					}

					// only assign if different to avoid unneeded rendering.
					finalValue = jQuery.trim( cur );
					if ( elem.className !== finalValue ) {
						elem.className = finalValue;
					}
				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classes, elem, cur, clazz, j, finalValue,
			i = 0,
			len = this.length,
			proceed = arguments.length === 0 || typeof value === "string" && value;

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( j ) {
				jQuery( this ).removeClass( value.call( this, j, this.className ) );
			});
		}
		if ( proceed ) {
			classes = ( value || "" ).match( rnotwhite ) || [];

			for ( ; i < len; i++ ) {
				elem = this[ i ];
				// This expression is here for better compressibility (see addClass)
				cur = elem.nodeType === 1 && ( elem.className ?
					( " " + elem.className + " " ).replace( rclass, " " ) :
					""
				);

				if ( cur ) {
					j = 0;
					while ( (clazz = classes[j++]) ) {
						// Remove *all* instances
						while ( cur.indexOf( " " + clazz + " " ) >= 0 ) {
							cur = cur.replace( " " + clazz + " ", " " );
						}
					}

					// only assign if different to avoid unneeded rendering.
					finalValue = value ? jQuery.trim( cur ) : "";
					if ( elem.className !== finalValue ) {
						elem.className = finalValue;
					}
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value;

		if ( typeof stateVal === "boolean" && type === "string" ) {
			return stateVal ? this.addClass( value ) : this.removeClass( value );
		}

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( i ) {
				jQuery( this ).toggleClass( value.call(this, i, this.className, stateVal), stateVal );
			});
		}

		return this.each(function() {
			if ( type === "string" ) {
				// toggle individual class names
				var className,
					i = 0,
					self = jQuery( this ),
					classNames = value.match( rnotwhite ) || [];

				while ( (className = classNames[ i++ ]) ) {
					// check each className given, space separated list
					if ( self.hasClass( className ) ) {
						self.removeClass( className );
					} else {
						self.addClass( className );
					}
				}

			// Toggle whole class name
			} else if ( type === strundefined || type === "boolean" ) {
				if ( this.className ) {
					// store className if set
					jQuery._data( this, "__className__", this.className );
				}

				// If the element has a class name or if we're passed "false",
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				this.className = this.className || value === false ? "" : jQuery._data( this, "__className__" ) || "";
			}
		});
	},

	hasClass: function( selector ) {
		var className = " " + selector + " ",
			i = 0,
			l = this.length;
		for ( ; i < l; i++ ) {
			if ( this[i].nodeType === 1 && (" " + this[i].className + " ").replace(rclass, " ").indexOf( className ) >= 0 ) {
				return true;
			}
		}

		return false;
	}
});




// Return jQuery for attributes-only inclusion


jQuery.each( ("blur focus focusin focusout load resize scroll unload click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup error contextmenu").split(" "), function( i, name ) {

	// Handle event binding
	jQuery.fn[ name ] = function( data, fn ) {
		return arguments.length > 0 ?
			this.on( name, null, data, fn ) :
			this.trigger( name );
	};
});

jQuery.fn.extend({
	hover: function( fnOver, fnOut ) {
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	},

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {
		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ? this.off( selector, "**" ) : this.off( types, selector || "**", fn );
	}
});


var nonce = jQuery.now();

var rquery = (/\?/);



var rvalidtokens = /(,)|(\[|{)|(}|])|"(?:[^"\\\r\n]|\\["\\\/bfnrt]|\\u[\da-fA-F]{4})*"\s*:?|true|false|null|-?(?!0\d)\d+(?:\.\d+|)(?:[eE][+-]?\d+|)/g;

jQuery.parseJSON = function( data ) {
	// Attempt to parse using the native JSON parser first
	if ( window.JSON && window.JSON.parse ) {
		// Support: Android 2.3
		// Workaround failure to string-cast null input
		return window.JSON.parse( data + "" );
	}

	var requireNonComma,
		depth = null,
		str = jQuery.trim( data + "" );

	// Guard against invalid (and possibly dangerous) input by ensuring that nothing remains
	// after removing valid tokens
	return str && !jQuery.trim( str.replace( rvalidtokens, function( token, comma, open, close ) {

		// Force termination if we see a misplaced comma
		if ( requireNonComma && comma ) {
			depth = 0;
		}

		// Perform no more replacements after returning to outermost depth
		if ( depth === 0 ) {
			return token;
		}

		// Commas must not follow "[", "{", or ","
		requireNonComma = open || comma;

		// Determine new depth
		// array/object open ("[" or "{"): depth += true - false (increment)
		// array/object close ("]" or "}"): depth += false - true (decrement)
		// other cases ("," or primitive): depth += true - true (numeric cast)
		depth += !close - !open;

		// Remove this token
		return "";
	}) ) ?
		( Function( "return " + str ) )() :
		jQuery.error( "Invalid JSON: " + data );
};


// Cross-browser xml parsing
jQuery.parseXML = function( data ) {
	var xml, tmp;
	if ( !data || typeof data !== "string" ) {
		return null;
	}
	try {
		if ( window.DOMParser ) { // Standard
			tmp = new DOMParser();
			xml = tmp.parseFromString( data, "text/xml" );
		} else { // IE
			xml = new ActiveXObject( "Microsoft.XMLDOM" );
			xml.async = "false";
			xml.loadXML( data );
		}
	} catch( e ) {
		xml = undefined;
	}
	if ( !xml || !xml.documentElement || xml.getElementsByTagName( "parsererror" ).length ) {
		jQuery.error( "Invalid XML: " + data );
	}
	return xml;
};


var
	// Document location
	ajaxLocParts,
	ajaxLocation,

	rhash = /#.*$/,
	rts = /([?&])_=[^&]*/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)\r?$/mg, // IE leaves an \r character at EOL
	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,
	rurl = /^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat("*");

// #8138, IE may throw an exception when accessing
// a field from window.location if document.domain has been set
try {
	ajaxLocation = location.href;
} catch( e ) {
	// Use the href attribute of an A element
	// since IE will modify it given document.location
	ajaxLocation = document.createElement( "a" );
	ajaxLocation.href = "";
	ajaxLocation = ajaxLocation.href;
}

// Segment location into parts
ajaxLocParts = rurl.exec( ajaxLocation.toLowerCase() ) || [];

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( rnotwhite ) || [];

		if ( jQuery.isFunction( func ) ) {
			// For each dataType in the dataTypeExpression
			while ( (dataType = dataTypes[i++]) ) {
				// Prepend if requested
				if ( dataType.charAt( 0 ) === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					(structure[ dataType ] = structure[ dataType ] || []).unshift( func );

				// Otherwise append
				} else {
					(structure[ dataType ] = structure[ dataType ] || []).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if ( typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[ dataTypeOrTransport ] ) {
				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		});
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var deep, key,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || (deep = {}) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {
	var firstDataType, ct, finalDataType, type,
		contents = s.contents,
		dataTypes = s.dataTypes;

	// Remove auto dataType and get content-type in the process
	while ( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {
		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[0] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}
		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
function ajaxConvert( s, response, jqXHR, isSuccess ) {
	var conv2, current, conv, tmp, prev,
		converters = {},
		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	current = dataTypes.shift();

	// Convert to each sequential dataType
	while ( current ) {

		if ( s.responseFields[ current ] ) {
			jqXHR[ s.responseFields[ current ] ] = response;
		}

		// Apply the dataFilter if provided
		if ( !prev && isSuccess && s.dataFilter ) {
			response = s.dataFilter( response, s.dataType );
		}

		prev = current;
		current = dataTypes.shift();

		if ( current ) {

			// There's only work to do if current dataType is non-auto
			if ( current === "*" ) {

				current = prev;

			// Convert response if prev dataType is non-auto and differs from current
			} else if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split( " " );
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {
								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.unshift( tmp[ 1 ] );
								}
								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s[ "throws" ] ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return { state: "parsererror", error: conv ? e : "No conversion from " + prev + " to " + current };
						}
					}
				}
			}
		}
	}

	return { state: "success", data: response };
}

jQuery.extend({

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: ajaxLocation,
		type: "GET",
		isLocal: rlocalProtocol.test( ajaxLocParts[ 1 ] ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",
		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /xml/,
			html: /html/,
			json: /json/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText",
			json: "responseJSON"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": jQuery.parseJSON,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var // Cross-domain detection vars
			parts,
			// Loop variable
			i,
			// URL without anti-cache param
			cacheURL,
			// Response headers as string
			responseHeadersString,
			// timeout handle
			timeoutTimer,

			// To know if global events are to be dispatched
			fireGlobals,

			transport,
			// Response headers
			responseHeaders,
			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),
			// Callbacks context
			callbackContext = s.context || s,
			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context && ( callbackContext.nodeType || callbackContext.jquery ) ?
				jQuery( callbackContext ) :
				jQuery.event,
			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks("once memory"),
			// Status-dependent callbacks
			statusCode = s.statusCode || {},
			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},
			// The jqXHR state
			state = 0,
			// Default abort message
			strAbort = "canceled",
			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( state === 2 ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( (match = rheaders.exec( responseHeadersString )) ) {
								responseHeaders[ match[1].toLowerCase() ] = match[ 2 ];
							}
						}
						match = responseHeaders[ key.toLowerCase() ];
					}
					return match == null ? null : match;
				},

				// Raw string
				getAllResponseHeaders: function() {
					return state === 2 ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					var lname = name.toLowerCase();
					if ( !state ) {
						name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( !state ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( state < 2 ) {
							for ( code in map ) {
								// Lazy-add the new callback in a way that preserves old ones
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						} else {
							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR ).complete = completeDeferred.add;
		jqXHR.success = jqXHR.done;
		jqXHR.error = jqXHR.fail;

		// Remove hash character (#7531: and string promotion)
		// Add protocol if not provided (#5866: IE7 issue with protocol-less urls)
		// Handle falsy url in the settings object (#10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || ajaxLocation ) + "" ).replace( rhash, "" ).replace( rprotocol, ajaxLocParts[ 1 ] + "//" );

		// Alias method option to type as per ticket #12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = jQuery.trim( s.dataType || "*" ).toLowerCase().match( rnotwhite ) || [ "" ];

		// A cross-domain request is in order when we have a protocol:host:port mismatch
		if ( s.crossDomain == null ) {
			parts = rurl.exec( s.url.toLowerCase() );
			s.crossDomain = !!( parts &&
				( parts[ 1 ] !== ajaxLocParts[ 1 ] || parts[ 2 ] !== ajaxLocParts[ 2 ] ||
					( parts[ 3 ] || ( parts[ 1 ] === "http:" ? "80" : "443" ) ) !==
						( ajaxLocParts[ 3 ] || ( ajaxLocParts[ 1 ] === "http:" ? "80" : "443" ) ) )
			);
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( state === 2 ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		fireGlobals = s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger("ajaxStart");
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		cacheURL = s.url;

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// If data is available, append data to url
			if ( s.data ) {
				cacheURL = ( s.url += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data );
				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add anti-cache in url if needed
			if ( s.cache === false ) {
				s.url = rts.test( cacheURL ) ?

					// If there is already a '_' parameter, set its value
					cacheURL.replace( rts, "$1_=" + nonce++ ) :

					// Otherwise add one to the end
					cacheURL + ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + nonce++;
			}
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[0] ] ?
				s.accepts[ s.dataTypes[0] ] + ( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend && ( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {
			// Abort if not done already and return
			return jqXHR.abort();
		}

		// aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		for ( i in { success: 1, error: 1, complete: 1 } ) {
			jqXHR[ i ]( s[ i ] );
		}

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}
			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = setTimeout(function() {
					jqXHR.abort("timeout");
				}, s.timeout );
			}

			try {
				state = 1;
				transport.send( requestHeaders, done );
			} catch ( e ) {
				// Propagate exception as error if not done
				if ( state < 2 ) {
					done( -1, e );
				// Simply rethrow otherwise
				} else {
					throw e;
				}
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Called once
			if ( state === 2 ) {
				return;
			}

			// State is "done" now
			state = 2;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Determine if successful
			isSuccess = status >= 200 && status < 300 || status === 304;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// Convert no matter what (that way responseXXX fields are always set)
			response = ajaxConvert( s, response, jqXHR, isSuccess );

			// If successful, handle type chaining
			if ( isSuccess ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader("Last-Modified");
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader("etag");
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 || s.type === "HEAD" ) {
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					statusText = response.state;
					success = response.data;
					error = response.error;
					isSuccess = !error;
				}
			} else {
				// We extract error from statusText
				// then normalize statusText and status for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );
				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger("ajaxStop");
				}
			}
		}

		return jqXHR;
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	}
});

jQuery.each( [ "get", "post" ], function( i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {
		// shift arguments if data argument was omitted
		if ( jQuery.isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		return jQuery.ajax({
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		});
	};
});

// Attach a bunch of functions for handling common AJAX events
jQuery.each( [ "ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend" ], function( i, type ) {
	jQuery.fn[ type ] = function( fn ) {
		return this.on( type, fn );
	};
});


jQuery._evalUrl = function( url ) {
	return jQuery.ajax({
		url: url,
		type: "GET",
		dataType: "script",
		async: false,
		global: false,
		"throws": true
	});
};


jQuery.fn.extend({
	wrapAll: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each(function(i) {
				jQuery(this).wrapAll( html.call(this, i) );
			});
		}

		if ( this[0] ) {
			// The elements to wrap the target around
			var wrap = jQuery( html, this[0].ownerDocument ).eq(0).clone(true);

			if ( this[0].parentNode ) {
				wrap.insertBefore( this[0] );
			}

			wrap.map(function() {
				var elem = this;

				while ( elem.firstChild && elem.firstChild.nodeType === 1 ) {
					elem = elem.firstChild;
				}

				return elem;
			}).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each(function(i) {
				jQuery(this).wrapInner( html.call(this, i) );
			});
		}

		return this.each(function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		});
	},

	wrap: function( html ) {
		var isFunction = jQuery.isFunction( html );

		return this.each(function(i) {
			jQuery( this ).wrapAll( isFunction ? html.call(this, i) : html );
		});
	},

	unwrap: function() {
		return this.parent().each(function() {
			if ( !jQuery.nodeName( this, "body" ) ) {
				jQuery( this ).replaceWith( this.childNodes );
			}
		}).end();
	}
});


jQuery.expr.filters.hidden = function( elem ) {
	// Support: Opera <= 12.12
	// Opera reports offsetWidths and offsetHeights less than zero on some elements
	return elem.offsetWidth <= 0 && elem.offsetHeight <= 0 ||
		(!support.reliableHiddenOffsets() &&
			((elem.style && elem.style.display) || jQuery.css( elem, "display" )) === "none");
};

jQuery.expr.filters.visible = function( elem ) {
	return !jQuery.expr.filters.hidden( elem );
};




var r20 = /%20/g,
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( jQuery.isArray( obj ) ) {
		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {
				// Treat each array item as a scalar.
				add( prefix, v );

			} else {
				// Item is non-scalar (array or object), encode its numeric index.
				buildParams( prefix + "[" + ( typeof v === "object" ? i : "" ) + "]", v, traditional, add );
			}
		});

	} else if ( !traditional && jQuery.type( obj ) === "object" ) {
		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {
		// Serialize scalar item.
		add( prefix, obj );
	}
}

// Serialize an array of form elements or a set of
// key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, value ) {
			// If value is a function, invoke it and return its value
			value = jQuery.isFunction( value ) ? value() : ( value == null ? "" : value );
			s[ s.length ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );
		};

	// Set traditional to true for jQuery <= 1.3.2 behavior.
	if ( traditional === undefined ) {
		traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
	}

	// If an array was passed in, assume that it is an array of form elements.
	if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {
		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		});

	} else {
		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" ).replace( r20, "+" );
};

jQuery.fn.extend({
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map(function() {
			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		})
		.filter(function() {
			var type = this.type;
			// Use .is(":disabled") so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !rcheckableType.test( type ) );
		})
		.map(function( i, elem ) {
			var val = jQuery( this ).val();

			return val == null ?
				null :
				jQuery.isArray( val ) ?
					jQuery.map( val, function( val ) {
						return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
					}) :
					{ name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		}).get();
	}
});


// Create the request object
// (This is still attached to ajaxSettings for backward compatibility)
jQuery.ajaxSettings.xhr = window.ActiveXObject !== undefined ?
	// Support: IE6+
	function() {

		// XHR cannot access local files, always use ActiveX for that case
		return !this.isLocal &&

			// Support: IE7-8
			// oldIE XHR does not support non-RFC2616 methods (#13240)
			// See http://msdn.microsoft.com/en-us/library/ie/ms536648(v=vs.85).aspx
			// and http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9
			// Although this check for six methods instead of eight
			// since IE also does not support "trace" and "connect"
			/^(get|post|head|put|delete|options)$/i.test( this.type ) &&

			createStandardXHR() || createActiveXHR();
	} :
	// For all other browsers, use the standard XMLHttpRequest object
	createStandardXHR;

var xhrId = 0,
	xhrCallbacks = {},
	xhrSupported = jQuery.ajaxSettings.xhr();

// Support: IE<10
// Open requests must be manually aborted on unload (#5280)
if ( window.ActiveXObject ) {
	jQuery( window ).on( "unload", function() {
		for ( var key in xhrCallbacks ) {
			xhrCallbacks[ key ]( undefined, true );
		}
	});
}

// Determine support properties
support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
xhrSupported = support.ajax = !!xhrSupported;

// Create transport if the browser can provide an xhr
if ( xhrSupported ) {

	jQuery.ajaxTransport(function( options ) {
		// Cross domain only allowed if supported through XMLHttpRequest
		if ( !options.crossDomain || support.cors ) {

			var callback;

			return {
				send: function( headers, complete ) {
					var i,
						xhr = options.xhr(),
						id = ++xhrId;

					// Open the socket
					xhr.open( options.type, options.url, options.async, options.username, options.password );

					// Apply custom fields if provided
					if ( options.xhrFields ) {
						for ( i in options.xhrFields ) {
							xhr[ i ] = options.xhrFields[ i ];
						}
					}

					// Override mime type if needed
					if ( options.mimeType && xhr.overrideMimeType ) {
						xhr.overrideMimeType( options.mimeType );
					}

					// X-Requested-With header
					// For cross-domain requests, seeing as conditions for a preflight are
					// akin to a jigsaw puzzle, we simply never set it to be sure.
					// (it can always be set on a per-request basis or even using ajaxSetup)
					// For same-domain requests, won't change header if already provided.
					if ( !options.crossDomain && !headers["X-Requested-With"] ) {
						headers["X-Requested-With"] = "XMLHttpRequest";
					}

					// Set headers
					for ( i in headers ) {
						// Support: IE<9
						// IE's ActiveXObject throws a 'Type Mismatch' exception when setting
						// request header to a null-value.
						//
						// To keep consistent with other XHR implementations, cast the value
						// to string and ignore `undefined`.
						if ( headers[ i ] !== undefined ) {
							xhr.setRequestHeader( i, headers[ i ] + "" );
						}
					}

					// Do send the request
					// This may raise an exception which is actually
					// handled in jQuery.ajax (so no try/catch here)
					xhr.send( ( options.hasContent && options.data ) || null );

					// Listener
					callback = function( _, isAbort ) {
						var status, statusText, responses;

						// Was never called and is aborted or complete
						if ( callback && ( isAbort || xhr.readyState === 4 ) ) {
							// Clean up
							delete xhrCallbacks[ id ];
							callback = undefined;
							xhr.onreadystatechange = jQuery.noop;

							// Abort manually if needed
							if ( isAbort ) {
								if ( xhr.readyState !== 4 ) {
									xhr.abort();
								}
							} else {
								responses = {};
								status = xhr.status;

								// Support: IE<10
								// Accessing binary-data responseText throws an exception
								// (#11426)
								if ( typeof xhr.responseText === "string" ) {
									responses.text = xhr.responseText;
								}

								// Firefox throws an exception when accessing
								// statusText for faulty cross-domain requests
								try {
									statusText = xhr.statusText;
								} catch( e ) {
									// We normalize with Webkit giving an empty statusText
									statusText = "";
								}

								// Filter status for non standard behaviors

								// If the request is local and we have data: assume a success
								// (success with no data won't get notified, that's the best we
								// can do given current implementations)
								if ( !status && options.isLocal && !options.crossDomain ) {
									status = responses.text ? 200 : 404;
								// IE - #1450: sometimes returns 1223 when it should be 204
								} else if ( status === 1223 ) {
									status = 204;
								}
							}
						}

						// Call complete if needed
						if ( responses ) {
							complete( status, statusText, responses, xhr.getAllResponseHeaders() );
						}
					};

					if ( !options.async ) {
						// if we're in sync mode we fire the callback
						callback();
					} else if ( xhr.readyState === 4 ) {
						// (IE6 & IE7) if it's in cache and has been
						// retrieved directly we need to fire the callback
						setTimeout( callback );
					} else {
						// Add to the list of active xhr callbacks
						xhr.onreadystatechange = xhrCallbacks[ id ] = callback;
					}
				},

				abort: function() {
					if ( callback ) {
						callback( undefined, true );
					}
				}
			};
		}
	});
}

// Functions to create xhrs
function createStandardXHR() {
	try {
		return new window.XMLHttpRequest();
	} catch( e ) {}
}

function createActiveXHR() {
	try {
		return new window.ActiveXObject( "Microsoft.XMLHTTP" );
	} catch( e ) {}
}




// Install script dataType
jQuery.ajaxSetup({
	accepts: {
		script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /(?:java|ecma)script/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
});

// Handle cache's special case and global
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
		s.global = false;
	}
});

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function(s) {

	// This transport only deals with cross domain requests
	if ( s.crossDomain ) {

		var script,
			head = document.head || jQuery("head")[0] || document.documentElement;

		return {

			send: function( _, callback ) {

				script = document.createElement("script");

				script.async = true;

				if ( s.scriptCharset ) {
					script.charset = s.scriptCharset;
				}

				script.src = s.url;

				// Attach handlers for all browsers
				script.onload = script.onreadystatechange = function( _, isAbort ) {

					if ( isAbort || !script.readyState || /loaded|complete/.test( script.readyState ) ) {

						// Handle memory leak in IE
						script.onload = script.onreadystatechange = null;

						// Remove the script
						if ( script.parentNode ) {
							script.parentNode.removeChild( script );
						}

						// Dereference the script
						script = null;

						// Callback if not abort
						if ( !isAbort ) {
							callback( 200, "success" );
						}
					}
				};

				// Circumvent IE6 bugs with base elements (#2709 and #4378) by prepending
				// Use native DOM manipulation to avoid our domManip AJAX trickery
				head.insertBefore( script, head.firstChild );
			},

			abort: function() {
				if ( script ) {
					script.onload( undefined, true );
				}
			}
		};
	}
});




var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup({
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
		this[ callback ] = true;
		return callback;
	}
});

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" && !( s.contentType || "" ).indexOf("application/x-www-form-urlencoded") && rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters["script json"] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always(function() {
			// Restore preexisting value
			window[ callbackName ] = overwritten;

			// Save back as free
			if ( s[ callbackName ] ) {
				// make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && jQuery.isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		});

		// Delegate to script
		return "script";
	}
});




// data: string of html
// context (optional): If specified, the fragment will be created in this context, defaults to document
// keepScripts (optional): If true, will include scripts passed in the html string
jQuery.parseHTML = function( data, context, keepScripts ) {
	if ( !data || typeof data !== "string" ) {
		return null;
	}
	if ( typeof context === "boolean" ) {
		keepScripts = context;
		context = false;
	}
	context = context || document;

	var parsed = rsingleTag.exec( data ),
		scripts = !keepScripts && [];

	// Single tag
	if ( parsed ) {
		return [ context.createElement( parsed[1] ) ];
	}

	parsed = jQuery.buildFragment( [ data ], context, scripts );

	if ( scripts && scripts.length ) {
		jQuery( scripts ).remove();
	}

	return jQuery.merge( [], parsed.childNodes );
};


// Keep a copy of the old load method
var _load = jQuery.fn.load;

/**
 * Load a url into a page
 */
jQuery.fn.load = function( url, params, callback ) {
	if ( typeof url !== "string" && _load ) {
		return _load.apply( this, arguments );
	}

	var selector, response, type,
		self = this,
		off = url.indexOf(" ");

	if ( off >= 0 ) {
		selector = jQuery.trim( url.slice( off, url.length ) );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( jQuery.isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax({
			url: url,

			// if "type" variable is undefined, then "GET" method will be used
			type: type,
			dataType: "html",
			data: params
		}).done(function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery("<div>").append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		}).complete( callback && function( jqXHR, status ) {
			self.each( callback, response || [ jqXHR.responseText, status, jqXHR ] );
		});
	}

	return this;
};




jQuery.expr.filters.animated = function( elem ) {
	return jQuery.grep(jQuery.timers, function( fn ) {
		return elem === fn.elem;
	}).length;
};





var docElem = window.document.documentElement;

/**
 * Gets a window from an element
 */
function getWindow( elem ) {
	return jQuery.isWindow( elem ) ?
		elem :
		elem.nodeType === 9 ?
			elem.defaultView || elem.parentWindow :
			false;
}

jQuery.offset = {
	setOffset: function( elem, options, i ) {
		var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
			position = jQuery.css( elem, "position" ),
			curElem = jQuery( elem ),
			props = {};

		// set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		curOffset = curElem.offset();
		curCSSTop = jQuery.css( elem, "top" );
		curCSSLeft = jQuery.css( elem, "left" );
		calculatePosition = ( position === "absolute" || position === "fixed" ) &&
			jQuery.inArray("auto", [ curCSSTop, curCSSLeft ] ) > -1;

		// need to be able to calculate position if either top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;
		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( jQuery.isFunction( options ) ) {
			options = options.call( elem, i, curOffset );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );
		} else {
			curElem.css( props );
		}
	}
};

jQuery.fn.extend({
	offset: function( options ) {
		if ( arguments.length ) {
			return options === undefined ?
				this :
				this.each(function( i ) {
					jQuery.offset.setOffset( this, options, i );
				});
		}

		var docElem, win,
			box = { top: 0, left: 0 },
			elem = this[ 0 ],
			doc = elem && elem.ownerDocument;

		if ( !doc ) {
			return;
		}

		docElem = doc.documentElement;

		// Make sure it's not a disconnected DOM node
		if ( !jQuery.contains( docElem, elem ) ) {
			return box;
		}

		// If we don't have gBCR, just use 0,0 rather than error
		// BlackBerry 5, iOS 3 (original iPhone)
		if ( typeof elem.getBoundingClientRect !== strundefined ) {
			box = elem.getBoundingClientRect();
		}
		win = getWindow( doc );
		return {
			top: box.top  + ( win.pageYOffset || docElem.scrollTop )  - ( docElem.clientTop  || 0 ),
			left: box.left + ( win.pageXOffset || docElem.scrollLeft ) - ( docElem.clientLeft || 0 )
		};
	},

	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset,
			parentOffset = { top: 0, left: 0 },
			elem = this[ 0 ];

		// fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is its only offset parent
		if ( jQuery.css( elem, "position" ) === "fixed" ) {
			// we assume that getBoundingClientRect is available when computed position is fixed
			offset = elem.getBoundingClientRect();
		} else {
			// Get *real* offsetParent
			offsetParent = this.offsetParent();

			// Get correct offsets
			offset = this.offset();
			if ( !jQuery.nodeName( offsetParent[ 0 ], "html" ) ) {
				parentOffset = offsetParent.offset();
			}

			// Add offsetParent borders
			parentOffset.top  += jQuery.css( offsetParent[ 0 ], "borderTopWidth", true );
			parentOffset.left += jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true );
		}

		// Subtract parent offsets and element margins
		// note: when an element has margin: auto the offsetLeft and marginLeft
		// are the same in Safari causing offset.left to incorrectly be 0
		return {
			top:  offset.top  - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true)
		};
	},

	offsetParent: function() {
		return this.map(function() {
			var offsetParent = this.offsetParent || docElem;

			while ( offsetParent && ( !jQuery.nodeName( offsetParent, "html" ) && jQuery.css( offsetParent, "position" ) === "static" ) ) {
				offsetParent = offsetParent.offsetParent;
			}
			return offsetParent || docElem;
		});
	}
});

// Create scrollLeft and scrollTop methods
jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
	var top = /Y/.test( prop );

	jQuery.fn[ method ] = function( val ) {
		return access( this, function( elem, method, val ) {
			var win = getWindow( elem );

			if ( val === undefined ) {
				return win ? (prop in win) ? win[ prop ] :
					win.document.documentElement[ method ] :
					elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : jQuery( win ).scrollLeft(),
					top ? val : jQuery( win ).scrollTop()
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length, null );
	};
});

// Add the top/left cssHooks using jQuery.fn.position
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
// getComputedStyle returns percent when specified for top/left/bottom/right
// rather than make the css module depend on the offset module, we just check for it here
jQuery.each( [ "top", "left" ], function( i, prop ) {
	jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
		function( elem, computed ) {
			if ( computed ) {
				computed = curCSS( elem, prop );
				// if curCSS returns percentage, fallback to offset
				return rnumnonpx.test( computed ) ?
					jQuery( elem ).position()[ prop ] + "px" :
					computed;
			}
		}
	);
});


// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name }, function( defaultExtra, funcName ) {
		// margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return access( this, function( elem, type, value ) {
				var doc;

				if ( jQuery.isWindow( elem ) ) {
					// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
					// isn't a whole lot we can do. See pull request at this URL for discussion:
					// https://github.com/jquery/jquery/pull/764
					return elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height], whichever is greatest
					// unfortunately, this causes bug #3838 in IE6/8 only, but there is currently no good, small way to fix it.
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?
					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable, null );
		};
	});
});


// The number of elements contained in the matched element set
jQuery.fn.size = function() {
	return this.length;
};

jQuery.fn.andSelf = jQuery.fn.addBack;




// Register as a named AMD module, since jQuery can be concatenated with other
// files that may use define, but not via a proper concatenation script that
// understands anonymous AMD modules. A named AMD is safest and most robust
// way to register. Lowercase jquery is used because AMD module names are
// derived from file names, and jQuery is normally delivered in a lowercase
// file name. Do this after creating the global so that if an AMD module wants
// to call noConflict to hide this version of jQuery, it will work.

// Note that for maximum portability, libraries that are not jQuery should
// declare themselves as anonymous modules, and avoid setting a global if an
// AMD loader is present. jQuery is a special case. For more information, see
// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

if ( typeof define === "function" && define.amd ) {
	define( "jquery", [], function() {
		return jQuery;
	});
}




var
	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$;

jQuery.noConflict = function( deep ) {
	if ( window.$ === jQuery ) {
		window.$ = _$;
	}

	if ( deep && window.jQuery === jQuery ) {
		window.jQuery = _jQuery;
	}

	return jQuery;
};

// Expose jQuery and $ identifiers, even in
// AMD (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
// and CommonJS for browser emulators (#13566)
if ( typeof noGlobal === strundefined ) {
	window.jQuery = window.$ = jQuery;
}




return jQuery;

}));

},{}],30:[function(require,module,exports){
var t = new (require('hogan.js/lib/template')).Template(function(c,p,i){var _=this;_.b(i=i||"");if(_.s(_.f("layout",c,p,1),c,p,0,11,236,"{{ }}")){_.rs(c,p,function(c,p,_){_.b(_.rp("map",c,p,"    "));_.b("    <div class=\"intro\">");_.b("\n" + i);_.b("        <h1 class=\"intro__header\">");_.b("\n" + i);_.b("            API <span class=\"intro__api-version\">2.0</span>");_.b("\n" + i);_.b("            <span class=\"intro__subheader\">Карты по-новому</span>");_.b("\n" + i);_.b("        </h1>");_.b("\n" + i);_.b("    </div>");_.b("\n");});c.pop();}return _.fl();;});module.exports = {  render: function () { return t.render.apply(t, arguments); },  r: function () { return t.r.apply(t, arguments); },  ri: function () { return t.ri.apply(t, arguments); }};
},{"hogan.js/lib/template":28}],31:[function(require,module,exports){
var t = new (require('hogan.js/lib/template')).Template(function(c,p,i){var _=this;_.b(i=i||"");if(_.s(_.f("layout",c,p,1),c,p,0,11,687,"{{ }}")){_.rs(c,p,function(c,p,_){_.b(_.rp("map",c,p,"    "));_.b("    <div class=\"start\">");_.b("\n" + i);_.b("        <div class=\"start__content\">");_.b("\n" + i);_.b("            <a class=\"start__button\" href=\"#\" title=\"\">Быстрый старт</a>");_.b("\n" + i);_.b("            <div class=\"follow-us\">");_.b("\n" + i);_.b("                <a class=\"follow-us__link follow-us__link_name_twitter\" href=\"#\" title=\"Следи за нами в Твиттере\">Следи за нами в Твиттере</a>");_.b("\n" + i);_.b("                <a class=\"follow-us__link follow-us__link_name_facebook\" href=\"#\" title=\"Следи за нами в Фейсбуке\">Следи за нами в Фейсбуке</a>");_.b("\n" + i);_.b("                <a class=\"follow-us__link follow-us__link_name_vk\" href=\"#\" title=\"Следи за нами во Вконтакте\">Следи за нами во Вконтакте</a>");_.b("\n" + i);_.b("            </div>");_.b("\n" + i);_.b("        </div>");_.b("\n" + i);_.b("    </div>");_.b("\n" + i);_.b(_.rp("footer",c,p,"    "));});c.pop();}return _.fl();;});module.exports = {  render: function () { return t.render.apply(t, arguments); },  r: function () { return t.r.apply(t, arguments); },  ri: function () { return t.ri.apply(t, arguments); }};
},{"hogan.js/lib/template":28}],32:[function(require,module,exports){
var t = new (require('hogan.js/lib/template')).Template(function(c,p,i){var _=this;_.b(i=i||"");_.b("<div class=\"footer\">");_.b("\n" + i);_.b("    <div class=\"panel panel_type_white billing-dynamics footer__panel footer__panel_name_billing-dynamics\" data-footer-state=\"sun\">");_.b("\n" + i);_.b("        <div class=\"billing-dynamics__graph-wrapper\">");_.b("\n" + i);_.b("            <ul class=\"billing-dynamics__graph\">");_.b("\n" + i);_.b("                <li class=\"billing-dynamics__graph-point\">");_.b("\n" + i);_.b("                    <span class=\"billing-dynamics__graph-point-value\">");_.b("\n" + i);_.b("                        200");_.b("\n" + i);_.b("                    </span>");_.b("\n" + i);_.b("                </li>");_.b("\n" + i);_.b("                <li class=\"billing-dynamics__graph-point\">");_.b("\n" + i);_.b("                    <span class=\"billing-dynamics__graph-point-value\">");_.b("\n" + i);_.b("                        700");_.b("\n" + i);_.b("                    </span>");_.b("\n" + i);_.b("                </li>");_.b("\n" + i);_.b("                <li class=\"billing-dynamics__graph-point\">");_.b("\n" + i);_.b("                    <span class=\"billing-dynamics__graph-point-value\">");_.b("\n" + i);_.b("                        1300");_.b("\n" + i);_.b("                    </span>");_.b("\n" + i);_.b("                </li>");_.b("\n" + i);_.b("                <li class=\"billing-dynamics__graph-point\">");_.b("\n" + i);_.b("                    <span class=\"billing-dynamics__graph-point-value\">");_.b("\n" + i);_.b("                        1800");_.b("\n" + i);_.b("                    </span>");_.b("\n" + i);_.b("                </li>");_.b("\n" + i);_.b("            </ul>");_.b("\n" + i);_.b("        </div>");_.b("\n" + i);_.b("        <p class=\"billing-dynamics__description\">");_.b("\n" + i);_.b("            Динамика среднего чека (в рублях)");_.b("\n" + i);_.b("        </p>");_.b("\n" + i);_.b("    </div>");_.b("\n" + i);_.b("\n" + i);_.b("    <div class=\"panel panel_type_white lightness-panel footer__panel footer__panel_name_lightness\" data-footer-state=\"page1\">");_.b("\n" + i);_.b("        <div class=\"lightness-panel__counter\">00 : 02 : 25</div>");_.b("\n" + i);_.b("        <div class=\"lightness-panel__version lightness-panel__version_of_new-api\">");_.b("\n" + i);_.b("            <span class=\"lightness-panel__version-title\">Новый API</span>");_.b("\n" + i);_.b("            <span class=\"lightness-panel__progress-bar\">");_.b("\n" + i);_.b("                <span class=\"lightness-panel__progress-bar-fill\"></span>");_.b("\n" + i);_.b("            </span>");_.b("\n" + i);_.b("            <p class=\"lightness-panel__version-speed-level\">");_.b("\n" + i);_.b("                JS код: 358,8 KB  /  CSS код: 89,0 KB");_.b("\n" + i);_.b("            </p>");_.b("\n" + i);_.b("        </div>");_.b("\n" + i);_.b("        <div class=\"lightness-panel__version lightness-panel__version_of_old-api\">");_.b("\n" + i);_.b("            <span class=\"lightness-panel__version-title\">Старый API</span>");_.b("\n" + i);_.b("            <span class=\"lightness-panel__progress-bar\">");_.b("\n" + i);_.b("                <span class=\"lightness-panel__progress-bar-fill\"></span>");_.b("\n" + i);_.b("            </span>");_.b("\n" + i);_.b("            <p class=\"lightness-panel__version-speed-level\">");_.b("\n" + i);_.b("                JS код: 687,6 KB  /  CSS код: 60,4 KB");_.b("\n" + i);_.b("            </p>");_.b("\n" + i);_.b("        </div>");_.b("\n" + i);_.b("    </div>");_.b("\n" + i);_.b("\n" + i);_.b("    <div class=\"panel panel_type_white bankomats-panel footer__panel footer__panel_name_atm\" data-footer-state=\"two-markers\">");_.b("\n" + i);_.b("        <span class=\"bankomats-panel__title\">Банкоматы<br />Москвы</span>");_.b("\n" + i);_.b("    </div>");_.b("\n" + i);_.b("\n" + i);_.b("    <div class=\"footer__panel footer__panel_name_links\" data-footer-state=\"page7\">");_.b("\n" + i);_.b("        <a class=\"footer__link\" href=\"#\" title=\"\">Документация</a>");_.b("\n" + i);_.b("        <a class=\"footer__link\" href=\"#\" title=\"\">Примеры</a>");_.b("\n" + i);_.b("        <a class=\"footer__link\" href=\"#\" title=\"\">Идеи и вопросы</a>");_.b("\n" + i);_.b("    </div>");_.b("\n" + i);_.b("</div>");_.b("\n");return _.fl();;});module.exports = {  render: function () { return t.render.apply(t, arguments); },  r: function () { return t.r.apply(t, arguments); },  ri: function () { return t.ri.apply(t, arguments); }};
},{"hogan.js/lib/template":28}],33:[function(require,module,exports){
var t = new (require('hogan.js/lib/template')).Template(function(c,p,i){var _=this;_.b(i=i||"");_.b("<div class=\"header\">");_.b("\n" + i);_.b("    <div class=\"header__panel panel panel_type_black features\">");_.b("\n" + i);_.b("        <a class=\"features__arrow-link features__arrow-link_to_left\" href=\"#\" title=\"\">Назад</a>");_.b("\n" + i);_.b("        <a class=\"features__arrow-link features__arrow-link_to_right\" href=\"#\" title=\"\">Вперёд</a>");_.b("\n" + i);_.b("\n" + i);_.b("        <ul class=\"features__table-of-contents\">");_.b("\n" + i);_.b("            <li class=\"features__table-of-contents-item features__table-of-contents-item_is-active_true\">Легковесность</li>");_.b("\n" + i);_.b("            <li class=\"features__table-of-contents-item\">Модульность</li>");_.b("\n" + i);_.b("            <li class=\"features__table-of-contents-item\"></li>");_.b("\n" + i);_.b("            <li class=\"features__table-of-contents-item\"></li>");_.b("\n" + i);_.b("            <li class=\"features__table-of-contents-item\"></li>");_.b("\n" + i);_.b("            <li class=\"features__table-of-contents-item\"></li>");_.b("\n" + i);_.b("        </ul>");_.b("\n" + i);_.b("\n" + i);_.b("        <ul class=\"features__list\">");_.b("\n" + i);_.b("            <li class=\"features__list-item features__list-item_name_lightness\">");_.b("\n" + i);_.b("                <div class=\"features__list-item-section\">");_.b("\n" + i);_.b("                    <h1 class=\"features__header\">Легковесность</h1>");_.b("\n" + i);_.b("                    <p>");_.b("\n" + i);_.b("                        JS и CSS код новой версии API занимает всего 105 Кб. в базовой поставке, вместо прежних 255 Кб., что позволило увеличить скорость открытия страниц с картой.");_.b("\n" + i);_.b("                    </p>");_.b("\n" + i);_.b("                </div>");_.b("\n" + i);_.b("            </li>");_.b("\n" + i);_.b("            <li class=\"features__list-item features__list-item_name_modularity\">");_.b("\n" + i);_.b("                <div class=\"features__list-item-section\">");_.b("\n" + i);_.b("                    <h1 class=\"features__header\">Модульность</h1>");_.b("\n" + i);_.b("                    <p>");_.b("\n" + i);_.b("                        Новый API совместим с большинством модулей библиотеки Leaflet. Помимо готовых модулей, таких как кластеризация, тепловая карта или анимированные маркеры, вы можете добавить свои.");_.b("\n" + i);_.b("                    </p>");_.b("\n" + i);_.b("                </div>");_.b("\n" + i);_.b("                <div class=\"features__list-item-section features__list-item-section_is-bottom_true\">");_.b("\n" + i);_.b("                    <a class=\"features__round-link features__round-link_name_two-markers\" data-state=\"two-markers\" href=\"#\" title=\"\"></a>");_.b("\n" + i);_.b("                    <a class=\"features__round-link features__round-link_name_sun\" data-state=\"sun\" href=\"#\" title=\"\"></a>");_.b("\n" + i);_.b("                    <a class=\"features__round-link features__round-link_name_marker\" data-state=\"marker\" href=\"#\" title=\"\"></a>");_.b("\n" + i);_.b("                </div>");_.b("\n" + i);_.b("            </li>");_.b("\n" + i);_.b("            <li class=\"features__list-item features__list-item_name_themes\">");_.b("\n" + i);_.b("                <div class=\"features__list-item-section\">");_.b("\n" + i);_.b("                    <h1 class=\"features__header\">Новый дизайн и&nbsp;выбор темы</h1>");_.b("\n" + i);_.b("                    <p>");_.b("\n" + i);_.b("                        Используйте тему, которая будет лучше смотреться на вашем сайте — тёмную или&nbsp;светлую.");_.b("\n" + i);_.b("                    </p>");_.b("\n" + i);_.b("                </div>");_.b("\n" + i);_.b("                <div class=\"features__list-item-section themes-switcher features__list-item-section_is-bottom_true\">");_.b("\n" + i);_.b("                    <a class=\"themes-switcher__switcher-link features__round-link themes-switcher__switcher-link_theme_light\" data-state=\"light-theme\" href=\"#\" title=\"Включить светлую тему\">Включить светлую тему</a>");_.b("\n" + i);_.b("                    <a class=\"themes-switcher__switcher-link features__round-link themes-switcher__switcher-link_theme_dark\" data-state=\"dark-theme\" href=\"#\" title=\"Включить тёмную тему\">Включить тёмную тему</a>");_.b("\n" + i);_.b("                </div>");_.b("\n" + i);_.b("            </li>");_.b("\n" + i);_.b("            <li class=\"features__list-item features__list-item_name_entrances\">");_.b("\n" + i);_.b("                <div class=\"features__list-item-section\">");_.b("\n" + i);_.b("                    <h1 class=\"features__header\">Входы в здания</h1>");_.b("\n" + i);_.b("                    <div class=\"pseudocard\">");_.b("\n" + i);_.b("                        <h2 class=\"pseudocard__header\">Центр реабилитации речи Татьяны Соловьёвой</h2>");_.b("\n" + i);_.b("                        <p class=\"pseudocard__address\">Невский проспект, 170</p>");_.b("\n" + i);_.b("                        <p class=\"pseudocard__route-instructions\">");_.b("\n" + i);_.b("                            Поверните на Исполкомскую, но далеко не уезжайте&nbsp;— вам в угловое здание. Пройдите во двор, вход будет по правую руку.");_.b("\n" + i);_.b("                        </p>");_.b("\n" + i);_.b("                        <p class=\"pseudocard__try-it\">");_.b("\n" + i);_.b("                            Вместо тысячи слов: <a class=\"pseudocard__find-entrance-link\" href=\"#\">Найти вход</a>");_.b("\n" + i);_.b("                        </p>");_.b("\n" + i);_.b("                    </div>");_.b("\n" + i);_.b("                </div>");_.b("\n" + i);_.b("                <div class=\"features__list-item-section entrances-examples features__list-item-section_is-bottom_true\">");_.b("\n" + i);_.b("                    <a class=\"entrances-examples__play-pause-button\" href=\"#\" title=\"\"></a>");_.b("\n" + i);_.b("                    <ul class=\"entrances-examples__list\">");_.b("\n" + i);_.b("                        <li class=\"entrances-examples__item\">");_.b("\n" + i);_.b("                            <a class=\"entrances-examples__example-link entrances-examples__example-link_is-shown_true\" href=\"#\" data-id=\"0\" title=\"\">1</a>");_.b("\n" + i);_.b("                        </li>");_.b("\n" + i);_.b("                        <li class=\"entrances-examples__item\">");_.b("\n" + i);_.b("                            <a class=\"entrances-examples__example-link\" data-id=\"1\" href=\"#\" title=\"\">2</a>");_.b("\n" + i);_.b("                        </li>");_.b("\n" + i);_.b("                        <li class=\"entrances-examples__item\">");_.b("\n" + i);_.b("                            <a class=\"entrances-examples__example-link\"  data-id=\"2\" href=\"#\" title=\"\">3</a>");_.b("\n" + i);_.b("                        </li>");_.b("\n" + i);_.b("                        <li class=\"entrances-examples__item\">");_.b("\n" + i);_.b("                            <a class=\"entrances-examples__example-link\" data-id=\"3\" href=\"#\" title=\"\">4</a>");_.b("\n" + i);_.b("                        </li>");_.b("\n" + i);_.b("                        <li class=\"entrances-examples__item\">");_.b("\n" + i);_.b("                            <a class=\"entrances-examples__example-link\"  data-id=\"4\" href=\"#\" title=\"\">5</a>");_.b("\n" + i);_.b("                        </li>");_.b("\n" + i);_.b("                        <li class=\"entrances-examples__item\">");_.b("\n" + i);_.b("                            <a class=\"entrances-examples__example-link\"  data-id=\"5\" href=\"#\" title=\"\">6</a>");_.b("\n" + i);_.b("                        </li>");_.b("\n" + i);_.b("                    </ul>");_.b("\n" + i);_.b("                </div>");_.b("\n" + i);_.b("            </li>");_.b("\n" + i);_.b("            <li class=\"features__list-item features__list-item_name_openness\">");_.b("\n" + i);_.b("                <div class=\"features__list-item-section\">");_.b("\n" + i);_.b("                    <h1 class=\"features__header\">Открытость</h1>");_.b("\n" + i);_.b("                    <p class=\"features__discription\">");_.b("\n" + i);_.b("                        Хорошая базовая функциональность");_.b("\n" + i);_.b("                        API 2ГИС обеспечивается использованием open-source библиотеки Leaflet.");_.b("\n" + i);_.b("                    </p>");_.b("\n" + i);_.b("                    <p class=\"features__discription\">");_.b("\n" + i);_.b("                        Свободная лицензия обоих проектов позволяет вам изменять и улучшать их код под любые задачи.");_.b("\n" + i);_.b("                    </p>");_.b("\n" + i);_.b("                </div>");_.b("\n" + i);_.b("                <div class=\"features__list-item-section openness-examples features__list-item-section_is-bottom_true\">");_.b("\n" + i);_.b("                    <a class=\"openness-examples__play-pause-button\" href=\"#\" title=\"\"></a>");_.b("\n" + i);_.b("                    <ul class=\"openness-examples__list\">");_.b("\n" + i);_.b("                        <li class=\"openness-examples__item\">");_.b("\n" + i);_.b("                            <a class=\"openness-examples__example-link openness-examples__example-link_is-shown_true\" data-id=\"0\" href=\"#\" title=\"\">1</a>");_.b("\n" + i);_.b("                        </li>");_.b("\n" + i);_.b("                        <li class=\"openness-examples__item\">");_.b("\n" + i);_.b("                            <a class=\"openness-examples__example-link\" data-id=\"1\" href=\"#\" title=\"\">2</a>");_.b("\n" + i);_.b("                        </li>");_.b("\n" + i);_.b("                        <li class=\"openness-examples__item\">");_.b("\n" + i);_.b("                            <a class=\"openness-examples__example-link\" data-id=\"2\" href=\"#\" title=\"\">3</a>");_.b("\n" + i);_.b("                        </li>");_.b("\n" + i);_.b("                        <li class=\"openness-examples__item\">");_.b("\n" + i);_.b("                            <a class=\"openness-examples__example-link\" data-id=\"3\" href=\"#\" title=\"\">4</a>");_.b("\n" + i);_.b("                        </li>");_.b("\n" + i);_.b("                        <li class=\"openness-examples__item\">");_.b("\n" + i);_.b("                            <a class=\"openness-examples__example-link\" data-id=\"4\" href=\"#\" title=\"\">5</a>");_.b("\n" + i);_.b("                        </li>");_.b("\n" + i);_.b("                        <li class=\"openness-examples__item\">");_.b("\n" + i);_.b("                            <a class=\"openness-examples__example-link\" data-id=\"5\" href=\"#\" title=\"\">6</a>");_.b("\n" + i);_.b("                        </li>");_.b("\n" + i);_.b("                    </ul>");_.b("\n" + i);_.b("                </div>");_.b("\n" + i);_.b("            </li>");_.b("\n" + i);_.b("            <li class=\"features__list-item features__list-item_name_all-devices\">");_.b("\n" + i);_.b("                <div class=\"features__list-item-section\">");_.b("\n" + i);_.b("                    <h1 class=\"features__header\">На всех экранах</h1>");_.b("\n" + i);_.b("                    <p>");_.b("\n" + i);_.b("                        Наша карта адаптируется под размер экрана. Ей одинаково удобно пользоваться на компьютерах, планшетах и телефонах.");_.b("\n" + i);_.b("                    </p>");_.b("\n" + i);_.b("                </div>");_.b("\n" + i);_.b("                <div class=\"features__list-item-section features__list-item-section_is-bottom_true\">");_.b("\n" + i);_.b("                    <a class=\"features__round-link features__round-link_name_smartphone\" data-state=\"smartphone\" href=\"#\" title=\"\"></a>");_.b("\n" + i);_.b("                    <a class=\"features__round-link features__round-link_name_notebook\" data-state=\"notepad\" href=\"#\" title=\"\"></a>");_.b("\n" + i);_.b("                    <a class=\"features__round-link features__round-link_name_tablet\" data-state=\"tablet\" href=\"#\" title=\"\"></a>");_.b("\n" + i);_.b("                </div>");_.b("\n" + i);_.b("            </li>");_.b("\n" + i);_.b("        </ul>");_.b("\n" + i);_.b("    </div>");_.b("\n" + i);_.b("\n" + i);_.b("    <div class=\"device tablet\">");_.b("\n" + i);_.b("        <div class=\"tablet__display\">");_.b("\n" + i);_.b("            <div id=\"mobile-map\" class=\"device__map\"></div>");_.b("\n" + i);_.b("\n" + i);_.b("            <div class=\"loupe\">");_.b("\n" + i);_.b("                <div class=\"loupe__glass loupe__glass_type_usual\"></div>");_.b("\n" + i);_.b("                <div class=\"loupe__glass loupe__glass_type_retina\"></div>");_.b("\n" + i);_.b("            </div>");_.b("\n" + i);_.b("        </div>");_.b("\n" + i);_.b("    </div>");_.b("\n" + i);_.b("</div>");_.b("\n" + i);_.b("\n");return _.fl();;});module.exports = {  render: function () { return t.render.apply(t, arguments); },  r: function () { return t.r.apply(t, arguments); },  ri: function () { return t.ri.apply(t, arguments); }};
},{"hogan.js/lib/template":28}],34:[function(require,module,exports){
var t = new (require('hogan.js/lib/template')).Template(function(c,p,i){var _=this;_.b(i=i||"");_.b("<div class=\"map\" id=\"map\"></div>");_.b("\n");return _.fl();;});module.exports = {  render: function () { return t.render.apply(t, arguments); },  r: function () { return t.r.apply(t, arguments); },  ri: function () { return t.ri.apply(t, arguments); }};
},{"hogan.js/lib/template":28}],35:[function(require,module,exports){
"use strict";
if (!Array.prototype.indexOf) {
  Array.prototype.indexOf = function(elt) {
    var len = this.length >>> 0;
    var from = Number(arguments[1]) || 0;
    from = (from < 0) ? Math.ceil(from) : Math.floor(from);
    if (from < 0)
      from += len;
    for (; from < len; from++) {
      if (from in this && this[from] === elt)
        return from;
    }
    return -1;
  };
}


},{}]},{},[1])
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlcyI6WyIvaG9tZS9kbHV0c2lrL3Byb2plY3RzL21hcHMtYXBpLTIuMC1wcm9tby1zaXRlL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5L25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCIvaG9tZS9kbHV0c2lrL3Byb2plY3RzL21hcHMtYXBpLTIuMC1wcm9tby1zaXRlL2FwcC9pbmRleC5qcyIsIi9ob21lL2RsdXRzaWsvcHJvamVjdHMvbWFwcy1hcGktMi4wLXByb21vLXNpdGUvYXBwL21hcHMvY2FmZUhlYXQuanMiLCIvaG9tZS9kbHV0c2lrL3Byb2plY3RzL21hcHMtYXBpLTIuMC1wcm9tby1zaXRlL2FwcC9tYXBzL2RhcmstdGhlbWUuanMiLCIvaG9tZS9kbHV0c2lrL3Byb2plY3RzL21hcHMtYXBpLTIuMC1wcm9tby1zaXRlL2FwcC9tYXBzL2RldmljZS5qcyIsIi9ob21lL2RsdXRzaWsvcHJvamVjdHMvbWFwcy1hcGktMi4wLXByb21vLXNpdGUvYXBwL21hcHMvZW50cmFuY2VzLmpzIiwiL2hvbWUvZGx1dHNpay9wcm9qZWN0cy9tYXBzLWFwaS0yLjAtcHJvbW8tc2l0ZS9hcHAvbWFwcy9pbmRleC5qcyIsIi9ob21lL2RsdXRzaWsvcHJvamVjdHMvbWFwcy1hcGktMi4wLXByb21vLXNpdGUvYXBwL21hcHMvbGlnaHQtdGhlbWUuanMiLCIvaG9tZS9kbHV0c2lrL3Byb2plY3RzL21hcHMtYXBpLTIuMC1wcm9tby1zaXRlL2FwcC9tYXBzL21hcmtlci5qcyIsIi9ob21lL2RsdXRzaWsvcHJvamVjdHMvbWFwcy1hcGktMi4wLXByb21vLXNpdGUvYXBwL21hcHMvbm90ZXBhZC5qcyIsIi9ob21lL2RsdXRzaWsvcHJvamVjdHMvbWFwcy1hcGktMi4wLXByb21vLXNpdGUvYXBwL21hcHMvcGFnZTEuanMiLCIvaG9tZS9kbHV0c2lrL3Byb2plY3RzL21hcHMtYXBpLTIuMC1wcm9tby1zaXRlL2FwcC9tYXBzL3BhZ2U0LmpzIiwiL2hvbWUvZGx1dHNpay9wcm9qZWN0cy9tYXBzLWFwaS0yLjAtcHJvbW8tc2l0ZS9hcHAvbWFwcy9wYWdlNS5qcyIsIi9ob21lL2RsdXRzaWsvcHJvamVjdHMvbWFwcy1hcGktMi4wLXByb21vLXNpdGUvYXBwL21hcHMvcmVzZXQuanMiLCIvaG9tZS9kbHV0c2lrL3Byb2plY3RzL21hcHMtYXBpLTIuMC1wcm9tby1zaXRlL2FwcC9tYXBzL3NldHVwLmpzIiwiL2hvbWUvZGx1dHNpay9wcm9qZWN0cy9tYXBzLWFwaS0yLjAtcHJvbW8tc2l0ZS9hcHAvbWFwcy9zbWFydHBob25lLmpzIiwiL2hvbWUvZGx1dHNpay9wcm9qZWN0cy9tYXBzLWFwaS0yLjAtcHJvbW8tc2l0ZS9hcHAvbWFwcy9zdW4uanMiLCIvaG9tZS9kbHV0c2lrL3Byb2plY3RzL21hcHMtYXBpLTIuMC1wcm9tby1zaXRlL2FwcC9tYXBzL3RhYmxldC5qcyIsIi9ob21lL2RsdXRzaWsvcHJvamVjdHMvbWFwcy1hcGktMi4wLXByb21vLXNpdGUvYXBwL21hcHMvdGhlbWUuanMiLCIvaG9tZS9kbHV0c2lrL3Byb2plY3RzL21hcHMtYXBpLTIuMC1wcm9tby1zaXRlL2FwcC9tYXBzL3R3by1tYXJrZXJzLmpzIiwiL2hvbWUvZGx1dHNpay9wcm9qZWN0cy9tYXBzLWFwaS0yLjAtcHJvbW8tc2l0ZS9hcHAvcm91dGVyLmpzIiwiL2hvbWUvZGx1dHNpay9wcm9qZWN0cy9tYXBzLWFwaS0yLjAtcHJvbW8tc2l0ZS9hcHAvc3RhdGUuanMiLCIvaG9tZS9kbHV0c2lrL3Byb2plY3RzL21hcHMtYXBpLTIuMC1wcm9tby1zaXRlL2FwcC92aWV3L2Jhc2UuanMiLCIvaG9tZS9kbHV0c2lrL3Byb2plY3RzL21hcHMtYXBpLTIuMC1wcm9tby1zaXRlL2FwcC92aWV3L2NvbnRyb2wuanMiLCIvaG9tZS9kbHV0c2lrL3Byb2plY3RzL21hcHMtYXBpLTIuMC1wcm9tby1zaXRlL2FwcC92aWV3L2Zvb3Rlci5qcyIsIi9ob21lL2RsdXRzaWsvcHJvamVjdHMvbWFwcy1hcGktMi4wLXByb21vLXNpdGUvYXBwL3ZpZXcvbWFwLmpzIiwiL2hvbWUvZGx1dHNpay9wcm9qZWN0cy9tYXBzLWFwaS0yLjAtcHJvbW8tc2l0ZS9ub2RlX21vZHVsZXMvYmFja2JvbmUvYmFja2JvbmUuanMiLCIvaG9tZS9kbHV0c2lrL3Byb2plY3RzL21hcHMtYXBpLTIuMC1wcm9tby1zaXRlL25vZGVfbW9kdWxlcy9iYWNrYm9uZS9ub2RlX21vZHVsZXMvdW5kZXJzY29yZS91bmRlcnNjb3JlLmpzIiwiL2hvbWUvZGx1dHNpay9wcm9qZWN0cy9tYXBzLWFwaS0yLjAtcHJvbW8tc2l0ZS9ub2RlX21vZHVsZXMvaG9nYW4uanMvbGliL3RlbXBsYXRlLmpzIiwiL2hvbWUvZGx1dHNpay9wcm9qZWN0cy9tYXBzLWFwaS0yLjAtcHJvbW8tc2l0ZS9ub2RlX21vZHVsZXMvanF1ZXJ5L2Rpc3QvanF1ZXJ5LmpzIiwiL2hvbWUvZGx1dHNpay9wcm9qZWN0cy9tYXBzLWFwaS0yLjAtcHJvbW8tc2l0ZS9wYWdlcy9pbmRleC5tdXN0YWNoZSIsIi9ob21lL2RsdXRzaWsvcHJvamVjdHMvbWFwcy1hcGktMi4wLXByb21vLXNpdGUvcGFnZXMvc3RhcnQubXVzdGFjaGUiLCIvaG9tZS9kbHV0c2lrL3Byb2plY3RzL21hcHMtYXBpLTIuMC1wcm9tby1zaXRlL3BhcnRpYWxzL2Zvb3Rlci5tdXN0YWNoZSIsIi9ob21lL2RsdXRzaWsvcHJvamVjdHMvbWFwcy1hcGktMi4wLXByb21vLXNpdGUvcGFydGlhbHMvaGVhZGVyLm11c3RhY2hlIiwiL2hvbWUvZGx1dHNpay9wcm9qZWN0cy9tYXBzLWFwaS0yLjAtcHJvbW8tc2l0ZS9wYXJ0aWFscy9tYXAubXVzdGFjaGUiLCIvaG9tZS9kbHV0c2lrL3Byb2plY3RzL21hcHMtYXBpLTIuMC1wcm9tby1zaXRlL3BvbHlmaWxsL2luZGV4T2YuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUNBQTtBQUFJLENBQUosRUFBSSxDQUFBLEdBQUcsRUFBRyxFQUNSLE9BQU8sQ0FBRSxHQUFFLENBQ1g7QUFDRCxDQUFBLFFBQUssRUFBRyxDQUFBLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxHQUFHLENBQUM7QUFDL0IsQ0FBQSxTQUFNLEVBQUcsQ0FBQSxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUMsR0FBRyxDQUFDO0FBQ2pDLENBQUEsV0FBUSxFQUFHLENBQUEsT0FBTyxDQUFDLFVBQVUsQ0FBQztBQUMzQixDQUFBLElBQUMsRUFBRyxDQUFBLE9BQU8sQ0FBQyxZQUFZLENBQUM7QUFDNUIsQ0FBQSxJQUFDLEVBQUcsQ0FBQSxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7QUFFdkIsQ0FBQSxFQUFHLEtBQUssRUFBRyxJQUFHLENBQUM7QUFDZixDQUFBLEVBQUcsTUFBTSxFQUFHLElBQUksTUFBSyxFQUFFLENBQUM7QUFDeEIsQ0FBQSxFQUFHLEtBQUssRUFBRyxDQUFBLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBRSxDQUFBLFFBQVEsT0FBTyxDQUFDLENBQUM7QUFFekMsQ0FBQSxBQUFDLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxTQUFVLENBQUU7QUFDN0IsQ0FBQSxJQUFHLE9BQU8sRUFBRyxJQUFJLE9BQU0sRUFBRSxDQUFDO0FBQzFCLENBQUEsU0FBUSxRQUFRLE1BQU0sQ0FBQztBQUFFLENBQUEsWUFBUyxDQUFFLEtBQUk7QUFBRSxDQUFBLE9BQUksQ0FBRSxDQUFBLEdBQUcsS0FBSztDQUFBLEVBQUUsQ0FBQyxDQUFDO0NBQzVELENBQUMsQ0FBQztDQUVIOzs7QUNsQkE7QUFBQSxDQUFBLEtBQU0sUUFBUSxFQUFHLEVBQ2pCLENBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGVBQWMsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLEtBQUksQ0FBQyxDQUNyQyxFQUFDLGNBQWMsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxlQUFjLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGVBQWMsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsY0FBYSxDQUFDLElBQUcsQ0FBQyxDQUNuQyxFQUFDLGVBQWUsQ0FBQyxlQUFjLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsY0FBYyxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsY0FBYyxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGVBQWMsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsY0FBYSxDQUFDLElBQUcsQ0FBQyxDQUNuQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGNBQWMsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGNBQWMsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxjQUFhLENBQUMsSUFBRyxDQUFDLENBQ25DLEVBQUMsY0FBYyxDQUFDLGVBQWMsQ0FBQyxLQUFJLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLFlBQVksQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNsQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGNBQWMsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGNBQWMsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxlQUFjLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsY0FBYyxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsY0FBYyxDQUFDLGVBQWMsQ0FBQyxLQUFJLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxlQUFjLENBQUMsS0FBSSxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGVBQWMsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEdBQUUsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGNBQWMsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxlQUFjLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZ0JBQWdCLENBQUMsaUJBQWdCLENBQUMsS0FBSSxDQUFDLENBQ3hDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsY0FBYyxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGVBQWMsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGFBQWEsQ0FBQyxlQUFjLENBQUMsSUFBRyxDQUFDLENBQ2xDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGVBQWMsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxlQUFjLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsY0FBYyxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsY0FBYyxDQUFDLGVBQWMsQ0FBQyxJQUFHLENBQUMsQ0FDbkMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxlQUFjLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsY0FBYyxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGVBQWMsQ0FBQyxLQUFJLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLEtBQUksQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxlQUFjLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGVBQWMsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGNBQWMsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxlQUFjLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsY0FBYyxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGVBQWMsQ0FBQyxLQUFJLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDckMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxlQUFjLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsY0FBYyxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsY0FBYyxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsY0FBYyxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsY0FBYyxDQUFDLGVBQWMsQ0FBQyxJQUFHLENBQUMsQ0FDbkMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLEtBQUksQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGNBQWMsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGNBQWMsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxjQUFhLENBQUMsSUFBRyxDQUFDLENBQ25DLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGVBQWMsQ0FBQyxLQUFJLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxhQUFhLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDcEMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDckMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsY0FBYSxDQUFDLEtBQUksQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxlQUFjLENBQUMsS0FBSSxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGVBQWMsQ0FBQyxLQUFJLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxlQUFjLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsY0FBYyxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsY0FBYyxDQUFDLGVBQWMsQ0FBQyxJQUFHLENBQUMsQ0FDbkMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGNBQWMsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxlQUFjLENBQUMsS0FBSSxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsY0FBYyxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsY0FBYyxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGVBQWMsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGNBQWMsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGNBQWMsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxlQUFjLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGVBQWMsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxlQUFjLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsY0FBYyxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGVBQWMsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxjQUFjLENBQUMsZUFBYyxDQUFDLElBQUcsQ0FBQyxDQUNuQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGNBQWMsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGNBQWMsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGNBQWMsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGNBQWMsQ0FBQyxlQUFjLENBQUMsSUFBRyxDQUFDLENBQ25DLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGVBQWMsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxlQUFjLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGVBQWMsQ0FBQyxLQUFJLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsY0FBYSxDQUFDLElBQUcsQ0FBQyxDQUNuQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGNBQWMsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGFBQWEsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGNBQWMsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGNBQWMsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxlQUFjLENBQUMsS0FBSSxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsY0FBYyxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsY0FBYyxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGNBQWEsQ0FBQyxJQUFHLENBQUMsQ0FDbkMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxlQUFjLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGVBQWMsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxZQUFZLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDbkMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGdCQUFnQixDQUFDLGlCQUFnQixDQUFDLElBQUcsQ0FBQyxDQUN2QyxFQUFDLGNBQWMsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGdCQUFnQixDQUFDLGlCQUFnQixDQUFDLElBQUcsQ0FBQyxDQUN2QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxlQUFjLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsY0FBYyxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGVBQWMsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxjQUFjLENBQUMsZUFBYyxDQUFDLElBQUcsQ0FBQyxDQUNuQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxlQUFjLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGVBQWMsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGNBQWMsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGNBQWMsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGNBQWMsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxlQUFjLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGVBQWMsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsY0FBYSxDQUFDLElBQUcsQ0FBQyxDQUNuQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxlQUFjLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsY0FBYyxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsY0FBYyxDQUFDLGVBQWMsQ0FBQyxLQUFJLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGNBQWMsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxlQUFjLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsY0FBYyxDQUFDLGVBQWMsQ0FBQyxJQUFHLENBQUMsQ0FDbkMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxjQUFjLENBQUMsZUFBYyxDQUFDLElBQUcsQ0FBQyxDQUNuQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGNBQWMsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGNBQWMsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxlQUFjLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGVBQWMsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsY0FBYSxDQUFDLEtBQUksQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxlQUFjLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGVBQWMsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGdCQUFnQixDQUFDLGlCQUFnQixDQUFDLElBQUcsQ0FBQyxDQUN2QyxFQUFDLGNBQWMsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxlQUFjLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGNBQWEsQ0FBQyxJQUFHLENBQUMsQ0FDbkMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGdCQUFnQixDQUFDLGlCQUFnQixDQUFDLElBQUcsQ0FBQyxDQUN2QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGNBQWMsQ0FBQyxlQUFjLENBQUMsSUFBRyxDQUFDLENBQ25DLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGVBQWMsQ0FBQyxLQUFJLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxlQUFjLENBQUMsS0FBSSxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsY0FBYyxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGNBQWEsQ0FBQyxJQUFHLENBQUMsQ0FDbkMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGNBQWMsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxlQUFjLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGVBQWMsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxjQUFjLENBQUMsZUFBYyxDQUFDLEtBQUksQ0FBQyxDQUNwQyxFQUFDLGNBQWMsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxlQUFjLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGVBQWMsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxlQUFjLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGVBQWMsQ0FBQyxLQUFJLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxlQUFjLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGVBQWMsQ0FBQyxLQUFJLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLEtBQUksQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxjQUFhLENBQUMsSUFBRyxDQUFDLENBQ25DLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsY0FBYyxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsY0FBYyxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsY0FBYyxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGVBQWMsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLEtBQUksQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxlQUFjLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGVBQWMsQ0FBQyxLQUFJLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxhQUFhLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGNBQWMsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxlQUFjLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsY0FBYyxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGVBQWMsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGNBQWMsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxlQUFjLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsY0FBYyxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGVBQWMsQ0FBQyxLQUFJLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGNBQWMsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxjQUFhLENBQUMsSUFBRyxDQUFDLENBQ25DLEVBQUMsZUFBZSxDQUFDLGVBQWMsQ0FBQyxLQUFJLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxlQUFjLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsY0FBYyxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGVBQWMsQ0FBQyxLQUFJLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDckMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxlQUFjLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGVBQWMsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxlQUFjLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsY0FBYyxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsY0FBYyxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGVBQWMsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGNBQWMsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxlQUFjLENBQUMsS0FBSSxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGVBQWMsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGNBQWMsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGdCQUFnQixDQUFDLGlCQUFnQixDQUFDLElBQUcsQ0FBQyxDQUN2QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxjQUFhLENBQUMsS0FBSSxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGNBQWEsQ0FBQyxJQUFHLENBQUMsQ0FDbkMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLEtBQUksQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxlQUFjLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsYUFBYSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3BDLEVBQUMsY0FBYyxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGNBQWEsQ0FBQyxLQUFJLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxjQUFjLENBQUMsZUFBYyxDQUFDLElBQUcsQ0FBQyxDQUNuQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGNBQWMsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxlQUFjLENBQUMsS0FBSSxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsY0FBYyxDQUFDLGVBQWMsQ0FBQyxJQUFHLENBQUMsQ0FDbkMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxlQUFjLENBQUMsS0FBSSxDQUFDLENBQ3JDLEVBQUMsZ0JBQWdCLENBQUMsaUJBQWdCLENBQUMsSUFBRyxDQUFDLENBQ3ZDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsY0FBYyxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGNBQWEsQ0FBQyxJQUFHLENBQUMsQ0FDbkMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsY0FBYSxDQUFDLElBQUcsQ0FBQyxDQUNuQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGdCQUFnQixDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsY0FBYyxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsY0FBYyxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsY0FBYyxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsY0FBYyxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsY0FBYyxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsY0FBYyxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsY0FBYyxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsY0FBYyxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsY0FBYyxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsY0FBYyxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGVBQWMsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGNBQWMsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxlQUFjLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGVBQWMsQ0FBQyxLQUFJLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxlQUFjLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGVBQWMsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGNBQWMsQ0FBQyxlQUFjLENBQUMsSUFBRyxDQUFDLENBQ25DLEVBQUMsZUFBZSxDQUFDLGVBQWMsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLEtBQUksQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxlQUFjLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsY0FBYyxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsR0FBRSxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGVBQWMsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxlQUFjLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsY0FBYyxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3JDLEVBQUMsY0FBYyxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3JDLEVBQUMsY0FBYyxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsY0FBYyxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGNBQWEsQ0FBQyxJQUFHLENBQUMsQ0FDbkMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxlQUFjLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGVBQWMsQ0FBQyxLQUFJLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxlQUFjLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsY0FBYyxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGVBQWMsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGNBQWMsQ0FBQyxlQUFjLENBQUMsSUFBRyxDQUFDLENBQ25DLEVBQUMsY0FBYyxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGVBQWMsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGNBQWMsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGNBQWMsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGNBQWMsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxlQUFjLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsYUFBYSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ25DLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsYUFBYSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ25DLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGVBQWMsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGNBQWMsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGNBQWMsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGNBQWMsQ0FBQyxlQUFjLENBQUMsSUFBRyxDQUFDLENBQ25DLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGVBQWMsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxlQUFjLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsY0FBYyxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGVBQWMsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxlQUFjLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGVBQWMsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGdCQUFnQixDQUFDLGlCQUFnQixDQUFDLElBQUcsQ0FBQyxDQUN2QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGNBQWMsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxlQUFjLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGVBQWMsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGNBQWMsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxlQUFjLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGNBQWEsQ0FBQyxJQUFHLENBQUMsQ0FDbkMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGNBQWMsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxlQUFjLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsY0FBYyxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsY0FBYyxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsY0FBYyxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsY0FBYyxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsY0FBYyxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsY0FBYyxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGVBQWMsQ0FBQyxLQUFJLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGFBQWEsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNuQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxlQUFjLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGVBQWMsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxlQUFjLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsY0FBYyxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsY0FBYyxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsWUFBWSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ2xDLEVBQUMsY0FBYyxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGVBQWMsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxhQUFhLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDbkMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxlQUFjLENBQUMsS0FBSSxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGVBQWMsQ0FBQyxLQUFJLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxlQUFjLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGVBQWMsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLEtBQUksQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxlQUFjLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGVBQWMsQ0FBQyxLQUFJLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxnQkFBZ0IsQ0FBQyxpQkFBZ0IsQ0FBQyxJQUFHLENBQUMsQ0FDdkMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxjQUFjLENBQUMsZUFBYyxDQUFDLElBQUcsQ0FBQyxDQUNuQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGNBQWMsQ0FBQyxlQUFjLENBQUMsS0FBSSxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsY0FBYyxDQUFDLGVBQWMsQ0FBQyxJQUFHLENBQUMsQ0FDbkMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGNBQWMsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGNBQWMsQ0FBQyxlQUFjLENBQUMsSUFBRyxDQUFDLENBQ25DLEVBQUMsZUFBZSxDQUFDLGNBQWEsQ0FBQyxJQUFHLENBQUMsQ0FDbkMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGNBQWMsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxlQUFjLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGVBQWMsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLEtBQUksQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGNBQWMsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGFBQWEsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNuQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxlQUFjLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsY0FBYyxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGVBQWMsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGNBQWMsQ0FBQyxlQUFjLENBQUMsSUFBRyxDQUFDLENBQ25DLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGVBQWMsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLEtBQUksQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGNBQWMsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGNBQWMsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGNBQWMsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxlQUFjLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGVBQWMsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGNBQWMsQ0FBQyxlQUFjLENBQUMsSUFBRyxDQUFDLENBQ25DLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGVBQWMsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLEtBQUksQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxlQUFjLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGNBQWEsQ0FBQyxLQUFJLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxhQUFhLENBQUMsZUFBYyxDQUFDLElBQUcsQ0FBQyxDQUNsQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGdCQUFnQixDQUFDLGlCQUFnQixDQUFDLEtBQUksQ0FBQyxDQUN4QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxlQUFjLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsY0FBYyxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGVBQWMsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxjQUFjLENBQUMsZUFBYyxDQUFDLElBQUcsQ0FBQyxDQUNuQyxFQUFDLGFBQWEsQ0FBQyxlQUFjLENBQUMsSUFBRyxDQUFDLENBQ2xDLEVBQUMsZUFBZSxDQUFDLGVBQWMsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxlQUFjLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGNBQWEsQ0FBQyxJQUFHLENBQUMsQ0FDbkMsRUFBQyxlQUFlLENBQUMsY0FBYSxDQUFDLElBQUcsQ0FBQyxDQUNuQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxlQUFjLENBQUMsS0FBSSxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGVBQWMsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxhQUFhLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDbkMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxHQUFFLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxHQUFFLENBQUMsQ0FDcEMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxlQUFjLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGVBQWMsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxlQUFjLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsY0FBYyxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsY0FBYyxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGVBQWMsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGNBQWMsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxlQUFjLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGVBQWMsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLEtBQUksQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGNBQWMsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxlQUFjLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGVBQWMsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGNBQWMsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGNBQWMsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxlQUFjLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGVBQWMsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxlQUFjLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGVBQWMsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxlQUFjLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGVBQWMsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLEtBQUksQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGNBQWMsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGNBQWMsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGNBQWMsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGNBQWMsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGNBQWMsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxlQUFjLENBQUMsS0FBSSxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsY0FBYyxDQUFDLGVBQWMsQ0FBQyxLQUFJLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxlQUFjLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGVBQWMsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGNBQWMsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGNBQWMsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxlQUFjLENBQUMsS0FBSSxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGVBQWMsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxlQUFjLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGVBQWMsQ0FBQyxLQUFJLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxjQUFhLENBQUMsSUFBRyxDQUFDLENBQ25DLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsY0FBYyxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsY0FBYyxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGVBQWMsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLEtBQUksQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxlQUFjLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGVBQWMsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxlQUFjLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZ0JBQWdCLENBQUMsaUJBQWdCLENBQUMsSUFBRyxDQUFDLENBQ3ZDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsY0FBYyxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGVBQWMsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGNBQWMsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxlQUFjLENBQUMsS0FBSSxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsY0FBYyxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsY0FBYyxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGVBQWMsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGNBQWMsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxlQUFjLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsY0FBYyxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsY0FBYyxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsY0FBYyxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsY0FBYyxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsY0FBYyxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGNBQWEsQ0FBQyxJQUFHLENBQUMsQ0FDbkMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxlQUFjLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGVBQWMsQ0FBQyxLQUFJLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLEtBQUksQ0FBQyxDQUNyQyxFQUFDLGNBQWMsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGNBQWMsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGNBQWMsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxlQUFjLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsY0FBYyxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsY0FBYyxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsY0FBYyxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsY0FBYyxDQUFDLGVBQWMsQ0FBQyxJQUFHLENBQUMsQ0FDbkMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxjQUFjLENBQUMsZUFBYyxDQUFDLElBQUcsQ0FBQyxDQUNuQyxFQUFDLGNBQWMsQ0FBQyxlQUFjLENBQUMsSUFBRyxDQUFDLENBQ25DLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsY0FBYyxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZ0JBQWdCLENBQUMsaUJBQWdCLENBQUMsSUFBRyxDQUFDLENBQ3ZDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGVBQWMsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxlQUFjLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsY0FBYyxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGVBQWMsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGNBQWMsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGNBQWMsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxlQUFjLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGVBQWMsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxlQUFjLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGVBQWMsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLEtBQUksQ0FBQyxDQUNyQyxFQUFDLGNBQWMsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGNBQWMsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGNBQWMsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxlQUFjLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGVBQWMsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxlQUFjLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsY0FBYyxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsY0FBYyxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGNBQWEsQ0FBQyxJQUFHLENBQUMsQ0FDbkMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxlQUFjLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsY0FBYyxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGVBQWMsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxlQUFjLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGNBQWEsQ0FBQyxJQUFHLENBQUMsQ0FDbkMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsY0FBYSxDQUFDLElBQUcsQ0FBQyxDQUNuQyxFQUFDLGdCQUFnQixDQUFDLGlCQUFnQixDQUFDLEtBQUksQ0FBQyxDQUN4QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGNBQWMsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxlQUFjLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsY0FBYyxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGVBQWMsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGNBQWMsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGNBQWMsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGNBQWMsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGNBQWMsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGFBQWEsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNuQyxFQUFDLGVBQWUsQ0FBQyxlQUFjLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsYUFBYSxDQUFDLGVBQWMsQ0FBQyxJQUFHLENBQUMsQ0FDbEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxZQUFZLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDbEMsRUFBQyxlQUFlLENBQUMsY0FBYSxDQUFDLEtBQUksQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxlQUFjLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsY0FBYyxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGVBQWMsQ0FBQyxLQUFJLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsYUFBWSxDQUFDLElBQUcsQ0FBQyxDQUNsQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxlQUFjLENBQUMsS0FBSSxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsR0FBRSxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGVBQWMsQ0FBQyxLQUFJLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLEtBQUksQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxlQUFjLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZ0JBQWdCLENBQUMsaUJBQWdCLENBQUMsSUFBRyxDQUFDLENBQ3ZDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGVBQWMsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxlQUFjLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGVBQWMsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGNBQWMsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxlQUFjLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsY0FBYyxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsY0FBYyxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsY0FBYyxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGVBQWMsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGNBQWMsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUNyQyxFQUFDLGNBQWMsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxjQUFhLENBQUMsSUFBRyxDQUFDLENBQ25DLEVBQUMsY0FBYyxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGVBQWMsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxlQUFjLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsY0FBYyxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGVBQWMsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxlQUFjLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsYUFBYSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ25DLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsY0FBYyxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsY0FBYyxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsY0FBYyxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsY0FBYyxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsY0FBYyxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsY0FBYyxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGVBQWMsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGNBQWMsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxlQUFjLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGVBQWMsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxPQUFNLENBQUMsQ0FDeEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGFBQWEsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxlQUFjLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGVBQWMsQ0FBQyxLQUFJLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxlQUFjLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsY0FBYyxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsYUFBYSxDQUFDLGVBQWMsQ0FBQyxJQUFHLENBQUMsQ0FDbEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxZQUFZLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDbEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxjQUFjLENBQUMsZUFBYyxDQUFDLEtBQUksQ0FBQyxDQUNwQyxFQUFDLGNBQWMsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGNBQWMsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGNBQWMsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGNBQWMsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGNBQWMsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxlQUFjLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGVBQWMsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGNBQWMsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxjQUFhLENBQUMsSUFBRyxDQUFDLENBQ25DLEVBQUMsY0FBYyxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGVBQWMsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxHQUFFLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGNBQWMsQ0FBQyxnQkFBZSxDQUFDLEdBQUUsQ0FBQyxDQUNuQyxFQUFDLGVBQWUsQ0FBQyxlQUFjLENBQUMsS0FBSSxDQUFDLENBQ3JDLEVBQUMsY0FBYyxDQUFDLGVBQWMsQ0FBQyxLQUFJLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxlQUFjLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGVBQWMsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxlQUFjLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGVBQWMsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxjQUFhLENBQUMsSUFBRyxDQUFDLENBQ25DLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGVBQWMsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGFBQWEsQ0FBQyxlQUFjLENBQUMsS0FBSSxDQUFDLENBQ25DLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGVBQWMsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxlQUFjLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsR0FBRSxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsY0FBYyxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGFBQVksQ0FBQyxLQUFJLENBQUMsQ0FDbkMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxlQUFjLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsY0FBYyxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGVBQWMsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGNBQWMsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGNBQWMsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxlQUFjLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGVBQWMsQ0FBQyxHQUFFLENBQUMsQ0FDbkMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxlQUFjLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGFBQVksQ0FBQyxJQUFHLENBQUMsQ0FDbEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGNBQWMsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxlQUFjLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsYUFBYSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ25DLEVBQUMsY0FBYyxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsY0FBYyxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsY0FBYyxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGVBQWMsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxlQUFjLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsYUFBYSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ25DLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsY0FBYyxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsY0FBYyxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGVBQWMsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxhQUFhLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDbkMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGNBQWMsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxlQUFjLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsY0FBYyxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGVBQWMsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxjQUFjLENBQUMsZUFBYyxDQUFDLElBQUcsQ0FBQyxDQUNuQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGNBQWMsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGNBQWMsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxlQUFjLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGVBQWMsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGNBQWMsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxlQUFjLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsY0FBYyxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsY0FBYyxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGNBQWEsQ0FBQyxJQUFHLENBQUMsQ0FDbkMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxjQUFhLENBQUMsSUFBRyxDQUFDLENBQ25DLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsY0FBYyxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGNBQWEsQ0FBQyxJQUFHLENBQUMsQ0FDbkMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGNBQWMsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGNBQWMsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxjQUFhLENBQUMsSUFBRyxDQUFDLENBQ25DLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGNBQWEsQ0FBQyxJQUFHLENBQUMsQ0FDbkMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGNBQWMsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGNBQWMsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGNBQWMsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGNBQWMsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGNBQWMsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxlQUFjLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGVBQWMsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGNBQWMsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxlQUFjLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGVBQWMsQ0FBQyxLQUFJLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGNBQWMsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGNBQWMsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxlQUFjLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGVBQWMsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGNBQWMsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGFBQWEsQ0FBQyxlQUFjLENBQUMsSUFBRyxDQUFDLENBQ2xDLEVBQUMsY0FBYyxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGVBQWMsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLEtBQUksQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGNBQWMsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxlQUFjLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsY0FBYyxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsY0FBYyxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsY0FBYyxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGVBQWMsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxlQUFjLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGVBQWMsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGNBQWMsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxlQUFjLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsY0FBYyxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsY0FBYyxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsY0FBYyxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsY0FBYyxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsY0FBYyxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGVBQWMsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZUFBYyxDQUFDLElBQUcsQ0FBQyxDQUNwQyxFQUFDLGVBQWUsQ0FBQyxlQUFjLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsY0FBYyxDQUFDLGVBQWMsQ0FBQyxJQUFHLENBQUMsQ0FDbkMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsY0FBYSxDQUFDLElBQUcsQ0FBQyxDQUNuQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLEtBQUksQ0FBQyxDQUN0QyxFQUFDLGVBQWUsQ0FBQyxnQkFBZSxDQUFDLElBQUcsQ0FBQyxDQUNyQyxFQUFDLGVBQWUsQ0FBQyxlQUFjLENBQUMsSUFBRyxDQUFDLENBQ3BDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsS0FBSSxDQUFDLENBQ3RDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGdCQUFlLENBQUMsSUFBRyxDQUFDLENBQ3JDLEVBQUMsZUFBZSxDQUFDLGVBQWMsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxjQUFjLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDckMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxLQUFJLENBQUMsQ0FDdEMsRUFBQyxlQUFlLENBQUMsZ0JBQWUsQ0FBQyxJQUFHLENBQUMsQ0FDcEMsQ0FBQztDQUFBOzs7QUM3akpGO0FBQUksQ0FBSixFQUFJLENBQUEsS0FBSyxFQUFHLENBQUEsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBRS9CLENBQUEsS0FBTSxRQUFRLEVBQUcsVUFBUyxHQUFHLENBQUU7QUFDM0IsQ0FBQSxNQUFLLENBQUMsR0FBRyxDQUFFLE9BQU0sQ0FBQyxDQUFDO0NBRW5CLE9BQU8sSUFBRyxDQUFDO0NBQ2QsQ0FBQztDQUFBOzs7QUNORjtBQUFBLENBQUEsS0FBTSxRQUFRLEVBQUcsVUFBUyxHQUFHLENBQUU7QUFDdkIsQ0FBSixJQUFJLENBQUEsTUFBTSxFQUFHLENBQUEsR0FBRyxLQUFLLFFBQVEsRUFBRSxDQUFDLFNBQVMsQ0FBQztBQUN0QyxDQUFBLFlBQU8sRUFBRyxDQUFBLE1BQU0sU0FBUyxFQUFFO0FBQzNCLENBQUEsUUFBRyxFQUFHLElBQUksQ0FBQSxFQUFFLElBQUksQ0FBQyxZQUFZLENBQUU7QUFDM0IsQ0FBQSxlQUFRLENBQUUsSUFBSSxDQUFBLEVBQUUsT0FBTyxDQUFDLGVBQWUsQ0FBRSxnQkFBZSxDQUFDO0FBQ3pELENBQUEsYUFBTSxDQUFFLEdBQUU7QUFDVixDQUFBLG1CQUFZLENBQUUsTUFBSztBQUNuQixDQUFBLHNCQUFlLENBQUUsS0FBSTtBQUNyQixDQUFBLHdCQUFpQixDQUFFLE1BQUs7QUFDeEIsQ0FBQSxvQkFBYSxDQUFFLEtBQUk7QUFDbkIsQ0FBQSwwQkFBbUIsQ0FBRSxNQUFLO0NBQUEsTUFDN0IsQ0FBQyxDQUFDO0NBRVAsT0FBTztBQUNILENBQUEsU0FBTSxDQUFFLFVBQVMsQ0FBRTtBQUNmLENBQUEsV0FBTSxTQUFTLENBQUMsd0JBQXdCLENBQUMsQ0FBQztDQUMxQyxXQUFPLEtBQUksQ0FBQztLQUNmO0FBQ0QsQ0FBQSxVQUFPLENBQUUsVUFBUyxDQUFFO0FBQ2hCLENBQUEsV0FBTSxZQUFZLENBQUMsd0JBQXdCLENBQUMsQ0FBQztDQUM3QyxXQUFPLEtBQUksQ0FBQztLQUNmO0FBQ0QsQ0FBQSxRQUFLLENBQUUsVUFBUyxDQUFFO0FBQ2QsQ0FBQSxXQUFNLFlBQVksQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO0FBQ2hELENBQUEsWUFBTyxZQUFZLEVBQUUsQ0FBQztDQUN0QixXQUFPLEtBQUksQ0FBQztLQUNmO0FBQ0QsQ0FBQSxVQUFPLENBQUUsVUFBUyxJQUFJLENBQUU7QUFDcEIsQ0FBQSxTQUFJLE1BQU0sRUFBRSxDQUFDO0FBQ2IsQ0FBQSxXQUFNLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUN0QixDQUFBLFlBQU8sU0FBUyxDQUFDLElBQUksRUFBRyxZQUFXLENBQUMsQ0FBQztBQUNyQyxDQUFBLFFBQUcsZUFBZSxFQUFFLENBQUM7Q0FDckIsV0FBTyxLQUFJLENBQUM7S0FDZjtBQUNELENBQUEsTUFBRyxDQUFFLElBQUc7Q0FBQSxFQUNYLENBQUM7Q0FDTCxDQUFDO0NBQ0Y7OztBQ3JDQTtBQUFBLENBQUEsS0FBTSxRQUFRLEVBQUcsRUFDYjtBQUNJLENBQUEsU0FBUSxDQUFFLEVBQUMsMk1BQTJNLENBQUM7QUFDdk4sQ0FBQSxZQUFXLENBQUU7QUFDVCxDQUFBLFVBQU8sQ0FBRSw0QkFBMkI7QUFDcEMsQ0FBQSxVQUFPLENBQUUsK0JBQThCO0FBQ3ZDLENBQUEsT0FBSSxDQUFFLG9KQUFtSjtDQUFBLEVBQzVKO0NBQUEsQUFDSixDQUNEO0FBQ0ksQ0FBQSxTQUFRLENBQUUsRUFBQyxzTUFBc00sQ0FBQztBQUNsTixDQUFBLFlBQVcsQ0FBRTtBQUNULENBQUEsVUFBTyxDQUFFLGdCQUFlO0FBQ3hCLENBQUEsVUFBTyxDQUFFLGdEQUErQztBQUN4RCxDQUFBLE9BQUksQ0FBRSw0SEFBMkg7Q0FBQSxFQUNwSTtDQUFBLEFBQ0osQ0FDRDtBQUNJLENBQUEsU0FBUSxDQUFFLEVBQUMscUtBQXFLLENBQUM7QUFDakwsQ0FBQSxZQUFXLENBQUU7QUFDVCxDQUFBLFVBQU8sQ0FBRSxrQkFBaUI7QUFDMUIsQ0FBQSxVQUFPLENBQUUscUNBQW9DO0FBQzdDLENBQUEsT0FBSSxDQUFFLG9KQUFtSjtDQUFBLEVBQzVKO0NBQUEsQUFDSixDQUNEO0FBQ0ksQ0FBQSxTQUFRLENBQUUsRUFBQyxxS0FBcUssQ0FBQztBQUNqTCxDQUFBLFlBQVcsQ0FBRTtBQUNULENBQUEsVUFBTyxDQUFFLHdCQUF1QjtBQUNoQyxDQUFBLFVBQU8sQ0FBRSw2Q0FBNEM7QUFDckQsQ0FBQSxPQUFJLENBQUUsMElBQXlJO0NBQUEsRUFDbEo7Q0FBQSxBQUNKLENBQ0Q7QUFDSSxDQUFBLFNBQVEsQ0FBRSxFQUFDLGlQQUFpUCxDQUFDO0FBQzdQLENBQUEsWUFBVyxDQUFFO0FBQ1QsQ0FBQSxVQUFPLENBQUUsZUFBYztBQUN2QixDQUFBLFVBQU8sQ0FBRSx1Q0FBc0M7QUFDL0MsQ0FBQSxPQUFJLENBQUUsMkxBQTBMO0NBQUEsRUFDbk07Q0FBQSxBQUNKLENBQ0Q7QUFDSSxDQUFBLFNBQVEsQ0FBRSxFQUFDLHFLQUFxSyxDQUFDO0FBQ2pMLENBQUEsWUFBVyxDQUFFO0FBQ1QsQ0FBQSxVQUFPLENBQUUsd0JBQXVCO0FBQ2hDLENBQUEsVUFBTyxDQUFFLDZDQUE0QztBQUNyRCxDQUFBLE9BQUksQ0FBRSwwSUFBeUk7Q0FBQSxFQUNsSjtDQUFBLEFBQ0osQ0FDSixDQUFDO0NBQ0Y7OztBQ2xEQTtBQUFBLENBQUEsS0FBTSxRQUFRLEVBQUc7QUFDYixDQUFBLFFBQU8sQ0FBRSxDQUFBLE9BQU8sQ0FBQyxTQUFTLENBQUM7QUFDM0IsQ0FBQSxRQUFPLENBQUUsQ0FBQSxPQUFPLENBQUMsU0FBUyxDQUFDO0FBQzNCLENBQUEsUUFBTyxDQUFFLENBQUEsT0FBTyxDQUFDLFNBQVMsQ0FBQztBQUMzQixDQUFBLGNBQWEsQ0FBRSxDQUFBLE9BQU8sQ0FBQyxlQUFlLENBQUM7QUFDdkMsQ0FBQSxNQUFLLENBQUUsQ0FBQSxPQUFPLENBQUMsT0FBTyxDQUFDO0FBQ3ZCLENBQUEsU0FBUSxDQUFFLENBQUEsT0FBTyxDQUFDLFVBQVUsQ0FBQztBQUM3QixDQUFBLGFBQVksQ0FBRSxDQUFBLE9BQU8sQ0FBQyxjQUFjLENBQUM7QUFDckMsQ0FBQSxjQUFhLENBQUUsQ0FBQSxPQUFPLENBQUMsZUFBZSxDQUFDO0FBQ3ZDLENBQUEsYUFBWSxDQUFFLENBQUEsT0FBTyxDQUFDLGNBQWMsQ0FBQztBQUNyQyxDQUFBLFVBQVMsQ0FBRSxDQUFBLE9BQU8sQ0FBQyxXQUFXLENBQUM7QUFDL0IsQ0FBQSxTQUFRLENBQUUsQ0FBQSxPQUFPLENBQUMsVUFBVSxDQUFDO0FBQzdCLENBQUEsUUFBTyxDQUFFLENBQUEsT0FBTyxDQUFDLFNBQVMsQ0FBQztBQUMzQixDQUFBLFFBQU8sQ0FBRSxDQUFBLE9BQU8sQ0FBQyxTQUFTLENBQUM7Q0FBQSxBQUM5QixDQUFDO0NBQ0Y7OztBQ2ZBO0FBQUksQ0FBSixFQUFJLENBQUEsS0FBSyxFQUFHLENBQUEsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBRS9CLENBQUEsS0FBTSxRQUFRLEVBQUcsVUFBUyxHQUFHLENBQUU7QUFDM0IsQ0FBQSxNQUFLLENBQUMsR0FBRyxDQUFFLFFBQU8sQ0FBQyxDQUFDO0NBRXBCLE9BQU8sSUFBRyxDQUFDO0NBQ2QsQ0FBQztDQUFBOzs7QUNORjtBQUFBLENBQUEsS0FBTSxRQUFRLEVBQUcsVUFBUyxHQUFHLENBQUUsQ0FBQSxHQUFHLENBQUU7Q0FDaEMsS0FBSSxHQUFHLE9BQU8sQ0FBRTtDQUNaLFNBQU8sQ0FBQSxHQUFHLFNBQVMsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxDQUFDO0dBQ25DO0FBRUQsQ0FGQyxJQUVFLFFBQVEsT0FBTyxLQUFLLENBQUMsU0FBUyxDQUFFO0FBQy9CLENBQUEsTUFBRyxPQUFPLEVBQUcsQ0FBQSxHQUFJLENBQUEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxrQkFBa0IsQ0FBRSxrQkFBaUIsQ0FBQyxDQUFFLEVBQUMsV0FBVyxDQUFFLEtBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUNuRyxDQUFBLE1BQUcsT0FBTyxHQUFHLENBQUMsT0FBTyxDQUFFLFVBQVUsQ0FBRTtBQUMvQixDQUFBLFFBQUcsT0FBTyxPQUFPLENBQUM7QUFBQyxDQUFBLGVBQVEsQ0FBRSxJQUFHO0FBQUUsQ0FBQSxhQUFNLENBQUUsSUFBRztDQUFBLE1BQUMsQ0FBQyxDQUFDO0tBQ25ELENBQUMsQ0FBQztHQUNOLENBQUMsQ0FBQztDQUVILE9BQU8sSUFBRyxDQUFDO0NBQ2QsQ0FBQztDQUFBOzs7QUNiRjtBQUFBLENBQUEsS0FBTSxRQUFRLEVBQUcsVUFBUyxHQUFHLENBQUUsQ0FBQSxHQUFHLENBQUU7QUFDaEMsQ0FBQSxJQUFHLE9BQU8sT0FBTyxFQUFFLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQztDQUV2QyxPQUFPLElBQUcsQ0FBQztDQUNkLENBQUM7Q0FBQTs7O0FDSkY7QUFBQSxDQUFBLEtBQU0sUUFBUSxFQUFHLFVBQVMsR0FBRyxDQUFFLENBQUEsR0FBRyxDQUFFO0FBQzVCLENBQUosSUFBSSxDQUFBLE1BQU0sRUFBRyxDQUFBLEdBQUcsS0FBSyxPQUFPLEVBQUUsQ0FBQywyQkFBMkIsQ0FBQztBQUN2RCxDQUFBLFdBQU0sRUFBRyxDQUFBLE1BQU0sS0FBSyxDQUFDLDJCQUEyQixDQUFDO0FBQ2pELENBQUEsV0FBTSxFQUFHLENBQUEsTUFBTSxLQUFLLENBQUMsMEVBQTBFLENBQUM7QUFDaEcsQ0FBQSxXQUFNLEVBQUcsQ0FBQSxNQUFNLEtBQUssQ0FBQywwRUFBMEUsQ0FBQztBQUNoRyxDQUFBLFdBQU0sRUFBRywrQ0FBOEM7QUFDdkQsQ0FBQSxVQUFLO0FBQUUsQ0FBQSxTQUFJLEVBQUcsRUFBQztBQUFFLENBQUEsT0FBRTtBQUFFLENBQUEsTUFBQyxDQUFDO0FBRTNCLENBQUEsT0FBTSxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFFLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUV2RCxDQUFBLE9BQU0sUUFBUSxDQUFDLENBQUMsS0FBSyxDQUFFLE1BQUssQ0FBQyxDQUFFO0FBQzNCLENBQUEsV0FBUSxDQUFFLEtBQUk7QUFDZCxDQUFBLFdBQVEsQ0FBRSxVQUFTLENBQUU7QUFDakIsQ0FBQSxXQUFNLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUN4QixDQUFBLFFBQUcsS0FBSyxFQUFFLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO0tBQzFEO0NBQUEsRUFDSixDQUFDLENBQUM7QUFDSCxDQUFBLE9BQU0sUUFBUSxDQUFDLENBQUMsS0FBSyxDQUFFLE9BQU0sQ0FBQyxDQUFFO0FBQzVCLENBQUEsV0FBUSxDQUFFLEtBQUk7QUFDZCxDQUFBLFFBQUssQ0FBRSxXQUFVO0FBQ2pCLENBQUEsU0FBTSxDQUFFLFVBQVMsQ0FBRTtBQUNmLENBQUEsV0FBTSxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDeEIsQ0FBQSxrQkFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO0tBQ3hCO0NBQUEsRUFDSixDQUFDLENBQUM7Q0FFSCxTQUFTLFdBQVUsQ0FBQyxDQUFFO0FBQ2xCLENBQUEsUUFBSyxFQUFHLENBQUEsV0FBVyxDQUFDLFNBQVMsQ0FBRTtBQUMzQixDQUFBLFNBQUksR0FBSSxFQUFDLENBQUM7QUFDVixDQUFBLE1BQUMsRUFBSSxDQUFBLElBQUksTUFBTSxDQUFDLElBQUksRUFBRyxHQUFFLENBQUMsQ0FBQztBQUMzQixDQUFBLE9BQUUsRUFBRyxDQUFBLElBQUksTUFBTSxDQUFDLElBQUksRUFBRyxHQUFFLENBQUMsQ0FBQztDQUMzQixTQUFJLENBQUMsRUFBRyxHQUFFLENBQUU7QUFDUixDQUFBLFFBQUMsRUFBRyxDQUFBLEdBQUcsRUFBRyxFQUFDLENBQUM7T0FDZjtBQUNELENBREMsU0FDRyxFQUFFLEVBQUcsR0FBRSxDQUFFO0FBQ1QsQ0FBQSxTQUFFLEVBQUcsQ0FBQSxHQUFHLEVBQUcsR0FBRSxDQUFDO09BQ2pCO0FBQ0QsQ0FEQyxXQUNLLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBRSxFQUFDLENBQUUsR0FBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0tBQzFDLENBQUUsR0FBRSxDQUFDLENBQUM7R0FDVjtBQUFBLENBQUEsRUFBQztDQUVGLE9BQU8sSUFBRyxDQUFDO0NBQ2QsQ0FBQztDQUFBOzs7QUMxQ0Y7QUFBSSxDQUFKLEVBQUksQ0FBQSxJQUFJLEVBQUcsQ0FBQSxPQUFPLENBQUMsYUFBYSxDQUFDO0FBQzdCLENBQUEsSUFBQyxFQUFHLENBQUEsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBRTFCLENBQUEsS0FBTSxRQUFRLEVBQUcsVUFBUyxHQUFHLENBQUUsQ0FBQSxHQUFHLENBQUU7QUFDNUIsQ0FBSixJQUFJLENBQUEsU0FBUyxFQUFHLEdBQUU7QUFDZCxDQUFBLGNBQVMsRUFBRyxDQUFBLENBQUMsQ0FBQyxxQkFBcUIsQ0FBQztBQUNwQyxDQUFBLGdCQUFXLEVBQUcsQ0FBQSxDQUFDLENBQUMsc0JBQXNCLENBQUM7QUFDdkMsQ0FBQSxhQUFRLEVBQUcsQ0FBQSxDQUFDLENBQUMsaUNBQWlDLENBQUMsQ0FBQztDQUVwRCxTQUFTLGFBQVksQ0FBQyxFQUFFLENBQUU7Q0FDdEIsT0FBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBRTtBQUNoQixDQUFBLGNBQVMsQ0FBQyxFQUFFLENBQUMsRUFBRyxJQUFJLENBQUEsRUFBRSxTQUFTLENBQUMsQ0FDNUIsU0FBUyxDQUFFLENBQUEsSUFBSSxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQy9CLENBQUMsQ0FBQztLQUNOO0FBQ0QsQ0FEQyxZQUNRLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUM7R0FDbkM7QUFFRCxDQUZDLFNBRVEsa0JBQWlCLENBQUMsRUFBRSxDQUFFO0FBQ3ZCLENBQUosTUFBSSxDQUFBLFdBQVcsRUFBRyxDQUFBLElBQUksQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDO0FBRXZDLENBQUEsWUFBUyxLQUFLLENBQUMsV0FBVyxRQUFRLENBQUMsQ0FBQztBQUNwQyxDQUFBLGNBQVcsS0FBSyxDQUFDLFdBQVcsUUFBUSxDQUFDLENBQUM7QUFDdEMsQ0FBQSxXQUFRLEtBQUssQ0FBQyxXQUFXLEtBQUssQ0FBQyxDQUFDO0dBQ25DO0FBRUQsQ0FGQyxJQUVFLEtBQUssR0FBRyxDQUFDLDZCQUE2QixDQUFFLFVBQVUsSUFBSSxDQUFFO0FBQ3ZELENBQUEsZUFBWSxDQUFDLElBQUksR0FBRyxDQUFDLENBQUM7R0FDekIsQ0FBQyxDQUFDO0FBRUgsQ0FBQSxJQUFHLEtBQUssR0FBRyxDQUFDLGdCQUFnQixDQUFFLFVBQVUsSUFBSSxDQUFFO0FBQzFDLENBQUEsb0JBQWlCLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQztHQUM5QixDQUFDLENBQUM7QUFHSCxDQUFBLGFBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNoQixDQUFBLElBQUcsS0FBSyxRQUFRLFFBQVEsRUFBRyxDQUFBLENBQUMsQ0FBQyxpREFBaUQsQ0FBQyxDQUFDO0NBRWhGLE9BQU8sSUFBRyxDQUFDO0NBQ2QsQ0FBQztDQUNGOzs7QUN4Q0E7QUFBSSxDQUFKLEVBQUksQ0FBQSxDQUFDLEVBQUcsQ0FBQSxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDMUIsQ0FBQSxLQUFNLFFBQVEsRUFBRyxVQUFTLEdBQUcsQ0FBRSxDQUFBLEdBQUcsQ0FBRTtBQUsvQixDQUFKLElBQUksQ0FBQSxhQUFhLEVBQUc7QUFDbkIsQ0FBQSxTQUFNLENBQUcsRUFDUjtBQUFDLENBQUEsV0FBTSxDQUFDLHVCQUFzQjtBQUFDLENBQUEsYUFBUSxDQUFDO0FBQUMsQ0FBQSxjQUFPLENBQUMsV0FBVTtBQUFDLENBQUEsaUJBQVUsQ0FBQyxnQkFBZTtDQUFBLE1BQUM7QUFBQyxDQUFBLGFBQVEsQ0FBQztBQUFDLENBQUEsWUFBSyxDQUFDLFFBQU87QUFBQyxDQUFBLFlBQUssQ0FBQyxRQUFPO0NBQUEsTUFBQztDQUFBLElBQUMsQ0FDL0g7QUFBQyxDQUFBLFdBQU0sQ0FBQyx1QkFBc0I7QUFBQyxDQUFBLGFBQVEsQ0FBQztBQUFDLENBQUEsY0FBTyxDQUFDLFFBQU87QUFBQyxDQUFBLGlCQUFVLENBQUMsY0FBYTtDQUFBLE1BQUM7QUFBQyxDQUFBLGFBQVEsQ0FBQztBQUFDLENBQUEsWUFBSyxDQUFDLGtCQUFpQjtBQUFDLENBQUEsWUFBSyxDQUFDLFdBQVU7Q0FBQSxNQUFDO0NBQUEsSUFBQyxDQUN2STtBQUNELENBQUEsU0FBTSxDQUFHLEVBQ1I7QUFBQyxDQUFBLFdBQU0sQ0FBQyx1QkFBc0I7QUFBQyxDQUFBLGFBQVEsQ0FBQztBQUFDLENBQUEsY0FBTyxDQUFDLFdBQVU7QUFBQyxDQUFBLGlCQUFVLENBQUMsZ0JBQWU7Q0FBQSxNQUFDO0FBQUMsQ0FBQSxhQUFRLENBQUM7QUFBQyxDQUFBLFlBQUssQ0FBQyxRQUFPO0FBQUMsQ0FBQSxZQUFLLENBQUMsUUFBTztDQUFBLE1BQUM7Q0FBQSxJQUFDLENBQy9IO0FBQUMsQ0FBQSxXQUFNLENBQUMsdUJBQXNCO0FBQUMsQ0FBQSxhQUFRLENBQUM7QUFBQyxDQUFBLGNBQU8sQ0FBQyxRQUFPO0FBQUMsQ0FBQSxpQkFBVSxDQUFDLGNBQWE7Q0FBQSxNQUFDO0FBQUMsQ0FBQSxhQUFRLENBQUM7QUFBQyxDQUFBLFlBQUssQ0FBQyxrQkFBaUI7QUFBQyxDQUFBLFlBQUssQ0FBQyxXQUFVO0NBQUEsTUFBQztDQUFBLElBQUMsQ0FDdkk7QUFDRCxDQUFBLFNBQU0sQ0FBRyxFQUNSO0FBQUMsQ0FBQSxXQUFNLENBQUMsdUJBQXNCO0FBQUMsQ0FBQSxhQUFRLENBQUM7QUFBQyxDQUFBLGNBQU8sQ0FBQyxXQUFVO0FBQUMsQ0FBQSxpQkFBVSxDQUFDLGdCQUFlO0NBQUEsTUFBQztBQUFDLENBQUEsYUFBUSxDQUFDO0FBQUMsQ0FBQSxZQUFLLENBQUMsUUFBTztBQUFDLENBQUEsWUFBSyxDQUFDLFFBQU87Q0FBQSxNQUFDO0NBQUEsSUFBQyxDQUMvSDtBQUFDLENBQUEsV0FBTSxDQUFDLHVCQUFzQjtBQUFDLENBQUEsYUFBUSxDQUFDO0FBQUMsQ0FBQSxjQUFPLENBQUMsUUFBTztBQUFDLENBQUEsaUJBQVUsQ0FBQyxjQUFhO0NBQUEsTUFBQztBQUFDLENBQUEsYUFBUSxDQUFDO0FBQUMsQ0FBQSxZQUFLLENBQUMsa0JBQWlCO0FBQUMsQ0FBQSxZQUFLLENBQUMsV0FBVTtDQUFBLE1BQUM7Q0FBQSxJQUFDLENBQ3ZJO0FBQ0QsQ0FBQSxTQUFNLENBQUcsRUFDUjtBQUFDLENBQUEsV0FBTSxDQUFDLHVCQUFzQjtBQUFDLENBQUEsYUFBUSxDQUFDO0FBQUMsQ0FBQSxjQUFPLENBQUMsV0FBVTtBQUFDLENBQUEsaUJBQVUsQ0FBQyxnQkFBZTtDQUFBLE1BQUM7QUFBQyxDQUFBLGFBQVEsQ0FBQztBQUFDLENBQUEsWUFBSyxDQUFDLFFBQU87QUFBQyxDQUFBLFlBQUssQ0FBQyxRQUFPO0NBQUEsTUFBQztDQUFBLElBQUMsQ0FDL0g7QUFBQyxDQUFBLFdBQU0sQ0FBQyx1QkFBc0I7QUFBQyxDQUFBLGFBQVEsQ0FBQztBQUFDLENBQUEsY0FBTyxDQUFDLFFBQU87QUFBQyxDQUFBLGlCQUFVLENBQUMsY0FBYTtDQUFBLE1BQUM7QUFBQyxDQUFBLGFBQVEsQ0FBQztBQUFDLENBQUEsWUFBSyxDQUFDLGtCQUFpQjtBQUFDLENBQUEsWUFBSyxDQUFDLFdBQVU7Q0FBQSxNQUFDO0NBQUEsSUFBQyxDQUN2STtBQUNELENBQUEsU0FBTSxDQUFHLEVBQ1I7QUFBQyxDQUFBLFdBQU0sQ0FBQyx1QkFBc0I7QUFBQyxDQUFBLGFBQVEsQ0FBQztBQUFDLENBQUEsY0FBTyxDQUFDLFdBQVU7QUFBQyxDQUFBLGlCQUFVLENBQUMsZ0JBQWU7Q0FBQSxNQUFDO0FBQUMsQ0FBQSxhQUFRLENBQUM7QUFBQyxDQUFBLFlBQUssQ0FBQyxRQUFPO0FBQUMsQ0FBQSxZQUFLLENBQUMsUUFBTztDQUFBLE1BQUM7Q0FBQSxJQUFDLENBQy9IO0FBQUMsQ0FBQSxXQUFNLENBQUMsdUJBQXNCO0FBQUMsQ0FBQSxhQUFRLENBQUM7QUFBQyxDQUFBLGNBQU8sQ0FBQyxRQUFPO0FBQUMsQ0FBQSxpQkFBVSxDQUFDLGNBQWE7Q0FBQSxNQUFDO0FBQUMsQ0FBQSxhQUFRLENBQUM7QUFBQyxDQUFBLFlBQUssQ0FBQyxrQkFBaUI7QUFBQyxDQUFBLFlBQUssQ0FBQyxXQUFVO0NBQUEsTUFBQztDQUFBLElBQUMsQ0FDdkk7Q0FBQSxFQUNELENBQUM7QUFFRSxDQUFKLElBQUksQ0FBQSxVQUFVLEVBQUcsQ0FBQSxFQUFFLEtBQUssQ0FBQztBQUNyQixDQUFBLFVBQU8sQ0FBRSx1QkFBc0I7QUFDL0IsQ0FBQSxnQkFBYSxDQUFFLHVCQUFzQjtBQUNyQyxDQUFBLFdBQVEsQ0FBRSxFQUFDLEVBQUUsQ0FBRSxHQUFFLENBQUM7QUFDbEIsQ0FBQSxhQUFVLENBQUUsRUFBQyxFQUFFLENBQUUsR0FBRSxDQUFDO0NBQUEsRUFDdkIsQ0FBQyxDQUFDO0FBRUMsQ0FBSixJQUFJLENBQUEsT0FBTyxFQUFHLEdBQUUsQ0FBQztBQUVqQixDQUFBLE9BQU0sS0FBSyxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQ2pDLFNBQVMsSUFBSSxDQUFDO0FBRVQsQ0FBSixNQUFJLENBQUEsVUFBVSxFQUFHLEdBQUUsQ0FBQztBQUVwQixDQUFBLG9CQUFpQixDQUFDLElBQUksQ0FBRSxXQUFVLENBQUMsQ0FBQztHQUlwQyxDQUNELENBQUM7QUFFRixDQUFBLElBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2YsQ0FBQSxJQUFHLFFBQVEsQ0FBQyxDQUFDLGtCQUFrQixDQUFFLGtCQUFpQixDQUFDLENBQUMsQ0FBQztDQUdyRCxTQUFTLGtCQUFpQixDQUFDLElBQUksQ0FBRSxDQUFBLFFBQVEsQ0FBQztDQUN6QyxPQUFHLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUN0QixDQUFBLGtCQUFhLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FDMUIsU0FBUyxNQUFNLENBQUM7QUFDZixDQUFBLGVBQVEsS0FBSyxDQUFFLEVBQUUsT0FBTyxDQUFDLENBQUMsTUFBTSxPQUFPLElBQUksQ0FBQyxDQUFBLE1BQU0sT0FBTyxJQUFJLENBQUMsQ0FBRSxFQUFDLElBQUksQ0FBRSxXQUFVLENBQUMsQ0FBQyxDQUFFLENBQUM7T0FDdEYsQ0FDRCxDQUFDO0tBQ0Y7Q0FBQSxFQUNEO0FBRUQsQ0FGQyxTQUVRLFlBQVcsQ0FBQyxJQUFJLENBQUM7Q0FDekIsT0FBSSxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUksRUFBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUc7Q0FBRSxZQUFPO0tBQUU7QUFDbkQsQ0FEbUQsTUFDbkQsQ0FBQSxPQUFPLEVBQUcsR0FBRSxDQUFDO0FBQ2pCLENBQUEsb0JBQWlCLENBQUMsSUFBSSxDQUFFLFFBQU8sQ0FBQyxDQUFDO0FBQ2pDLENBQUEsVUFBTyxDQUFDLElBQUksQ0FBQyxFQUFHLENBQUEsRUFBRSxXQUFXLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztHQUNsRDtBQUVELENBRkMsU0FFUSxZQUFXLENBQUMsSUFBSSxDQUFDO0NBQ3pCLE9BQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUEsRUFBSSxFQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBRztDQUFFLFlBQU87S0FBRTtBQUN6RCxDQUR5RCxNQUN0RCxZQUFZLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7R0FDL0I7QUFFRSxDQUZGLElBRUssS0FBSyxHQUFHLENBQUMsZUFBZSxDQUFFLFVBQVUsSUFBSSxDQUFFO0FBQzVDLENBQUEsVUFBTyxJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQztHQUNyQixDQUFDLENBQUM7QUFFSCxDQUFBLElBQUcsS0FBSyxRQUFRLFFBQVEsRUFBRyxDQUFBLENBQUMsQ0FBQyxnREFBZ0QsQ0FBQyxDQUFDO0NBRWxGLE9BQU8sSUFBRyxDQUFDO0NBQ1gsQ0FBQztDQUNGOzs7QUNwRkE7QUFBQSxDQUFBLEtBQU0sUUFBUSxFQUFHLFVBQVMsR0FBRyxDQUFFLENBQUEsR0FBRyxDQUFFO0NBRWhDLEtBQUksR0FBRyxTQUFTLEdBQUksQ0FBQSxHQUFHLFNBQVMsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxDQUFFO0FBQzVDLENBQUEsTUFBRyxZQUFZLENBQUMsR0FBRyxTQUFTLENBQUMsQ0FBQztHQUNqQztBQUVELENBRkMsS0FFRyxHQUFHLEtBQUssR0FBSSxDQUFBLEdBQUcsU0FBUyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUU7QUFDcEMsQ0FBQSxNQUFHLFlBQVksQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDO0dBQzdCO0FBRUQsQ0FGQyxLQUVHLEdBQUcsT0FBTyxHQUFJLENBQUEsR0FBRyxTQUFTLENBQUMsR0FBRyxPQUFPLENBQUMsQ0FBRTtBQUN4QyxDQUFBLE1BQUcsWUFBWSxDQUFDLEdBQUcsT0FBTyxDQUFDLENBQUM7R0FDL0I7QUFFRCxDQUZDLEVBRUEsR0FBRyxXQUFXLFFBQVEsRUFBRSxDQUFBLEVBQUksQ0FBQSxHQUFHLFdBQVcsUUFBUSxFQUFFLENBQUM7Q0FFdEQsS0FBSSxHQUFHLFNBQVMsTUFBTSxDQUFFO0FBQ3BCLENBQUEsTUFBRyxjQUFjLENBQUMsR0FBRyxTQUFTLE1BQU0sQ0FBQyxDQUFDO0FBQ3RDLENBQUEsTUFBRyxTQUFTLE1BQU0sRUFBRyxLQUFJLENBQUM7R0FDN0I7QUFNRCxDQU5DLElBTUUsV0FBVyxLQUFLLE9BQU8sR0FBSSxDQUFBLEdBQUcsV0FBVyxDQUFDLEdBQUcsV0FBVyxLQUFLLE9BQU8sQ0FBQyxDQUFDO0FBRXpFLENBQUEsSUFBRyxPQUFPLE1BQU0sRUFBRSxRQUFRLEVBQUUsQ0FBQztDQUU3QixPQUFPLElBQUcsQ0FBQztDQUNkLENBQUM7Q0FDRjs7O0FDL0JBO0FBQUksQ0FBSixFQUFJLENBQUEsS0FBSyxFQUFHLENBQUEsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBRWhDLENBQUEsS0FBTSxRQUFRLEVBQUcsVUFBUyxHQUFHLENBQUUsQ0FBQSxHQUFHLENBQUU7QUFDaEMsQ0FBQSxJQUFHLE1BQU0sRUFBRyxDQUFBLEVBQUUsS0FBSyxDQUFDLHNEQUFzRCxDQUFFLEVBQ3hFLElBQUksQ0FBRTtBQUNGLENBQUEsTUFBQyxDQUFFLFlBQVc7QUFDZCxDQUFBLGNBQVMsQ0FBRSxFQUFDO0FBQ1osQ0FBQSxTQUFJLENBQUUsRUFBQztBQUNQLENBQUEsY0FBUyxDQUFFLEdBQUU7QUFDYixDQUFBLFdBQU0sQ0FBRSxVQUFTO0FBQ2pCLENBQUEsUUFBRyxDQUFFLGFBQVk7QUFDakIsQ0FBQSxXQUFNLENBQUUsT0FBTTtDQUFBLElBQ2pCLENBQ0osQ0FBQyxDQUFDO0FBRUgsQ0FBQSxJQUFHLFFBQVEsUUFBUSxFQUFHLENBQUEsRUFBRSxPQUFPLENBQUMsQ0FDNUIsOERBQThELENBQzlELDREQUEyRCxDQUM5RCxDQUFDLENBQUM7QUFFSCxDQUFBLElBQUcsUUFBUSxLQUFLLEVBQUcsQ0FBQSxFQUFFLE9BQU8sQ0FBQyxrQ0FBa0MsQ0FBQyxDQUFDO0FBRWpFLENBQUEsSUFBRyxRQUFRLE9BQU8sRUFBRyxDQUFBLEVBQUUsT0FBTyxDQUFDLHdEQUF3RCxDQUFDLENBQUM7QUFFekYsQ0FBQSxJQUFHLE9BQU8sRUFBRyxDQUFBLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztDQUV4QixPQUFPLElBQUcsQ0FBQztDQUNkLENBQUM7Q0FDRjs7O0FDNUJBO0FBQUEsQ0FBQSxLQUFNLFFBQVEsRUFBRyxVQUFTLEdBQUcsQ0FBRSxDQUFBLEdBQUcsQ0FBRTtBQUNoQyxDQUFBLElBQUcsT0FBTyxPQUFPLEVBQUUsUUFBUSxDQUFDLFlBQVksQ0FBQyxDQUFDO0NBRTFDLE9BQU8sSUFBRyxDQUFDO0NBQ2QsQ0FBQztDQUFBOzs7QUNKRjtBQUFJLENBQUosRUFBSSxDQUFBLElBQUksRUFBRyxDQUFBLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQztBQUVqQyxDQUFBLEtBQU0sUUFBUSxFQUFHLFVBQVMsR0FBRyxDQUFFLENBQUEsR0FBRyxDQUFFO0NBQ2hDLEtBQUksR0FBRyxLQUFLLENBQUU7Q0FDVixTQUFPLENBQUEsR0FBRyxTQUFTLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQztHQUNqQztBQUVELENBRkMsSUFFRSxRQUFRLEtBQUssS0FBSyxDQUFDLFNBQVMsQ0FBRTtBQUM3QixDQUFBLE1BQUcsS0FBSyxFQUFHLENBQUEsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFFLEVBQUMsTUFBTSxDQUFFLEdBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztHQUN6RCxDQUFDLENBQUM7Q0FFSCxPQUFPLElBQUcsQ0FBQztDQUNkLENBQUM7Q0FDRjs7O0FDYkE7QUFBQSxDQUFBLEtBQU0sUUFBUSxFQUFHLFVBQVMsR0FBRyxDQUFFLENBQUEsR0FBRyxDQUFFO0FBQzVCLENBQUosSUFBSSxDQUFBLElBQUksRUFBRyxDQUFBLEdBQUcsT0FBTyxJQUFJLENBQUM7QUFDMUIsQ0FBQSxJQUFHLE9BQU8sT0FBTyxFQUFFLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUV0QyxDQUFBLElBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBRSxVQUFTLENBQUMsQ0FBRTtBQUN2QixDQUFBLFVBQU8sSUFBSSxDQUFDLENBQUMsT0FBTyxVQUFVLEVBQUUsQ0FBQyxDQUFDO0FBQ2xDLENBQUEsT0FBSSxRQUFRLENBQUMsQ0FBQyxPQUFPLFVBQVUsRUFBRSxDQUFFLENBQUEsR0FBRyxRQUFRLEVBQUUsQ0FBRSxFQUFDLE9BQU8sQ0FBRSxNQUFLLENBQUMsQ0FBQyxDQUFDO0dBQ3ZFLENBQUMsQ0FBQztDQUVILE9BQU8sSUFBRyxDQUFDO0NBQ2QsQ0FBQztDQUFBOzs7QUNWRjtBQUFJLENBQUosRUFBSSxDQUFBLENBQUMsRUFBRyxDQUFBLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUMxQixDQUFBLE1BQU8sQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO0FBRWxDLENBQUEsS0FBTSxRQUFRLEVBQUcsVUFBUyxHQUFHLENBQUUsQ0FBQSxJQUFJLENBQUU7QUFDakMsQ0FBQSxJQUFHLFFBQVEsQ0FBQyxDQUFDLGVBQWUsQ0FBRSxnQkFBZSxDQUFDLENBQUUsR0FBRSxDQUFDLENBQUM7QUFDaEQsQ0FBSixJQUFJLENBQUEsR0FBRyxFQUFHLENBQUEsQ0FBQyxDQUFDLHVCQUF1QixDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUU7Q0FDL0MsU0FBTyxDQUFBLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLENBQUEsQ0FBRyxFQUFDLENBQUMsQ0FBQztHQUN4RCxDQUFDO0FBQ0YsQ0FBQSxRQUFHLEVBQUcsQ0FBQSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUM7QUFDdEIsQ0FBQSxVQUFLLEVBQUcsYUFBWTtBQUNwQixDQUFBLFNBQUksRUFBRyxDQUFBLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBRTVCLENBQUEsSUFBRyxXQUFXLE9BQU8sRUFBRSxDQUFDO0NBQ3hCLEtBQUksQ0FBQyxHQUFHLFNBQVMsTUFBTSxDQUFFO0FBQ3JCLENBQUEsTUFBRyxTQUFTLE1BQU0sRUFBRyxDQUFBLEVBQUUsUUFBUSxNQUFNLEVBQUUsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0dBQ3REO0FBRUQsQ0FGQyxJQUVFLEtBQUssQ0FBQyxPQUFPLENBQUUsRUFBQyxNQUFNLENBQUUsSUFBSSxDQUFBLEVBQUUsT0FBTyxDQUFDLGlCQUFpQixDQUFFLGtCQUFpQixDQUFDLENBQUMsQ0FBQyxDQUFDO0FBRWpGLENBQUEsSUFBRyxLQUFLLENBQUMsTUFBTSxDQUFFLENBQUEsSUFBSSxFQUFHLENBQUEsR0FBRyxRQUFRLENBQUMsS0FBSyxDQUFFLENBQUEsUUFBUSxFQUFHLEtBQUksQ0FBQyxDQUFBLENBQUcsRUFBQyxHQUFHLEVBQUcsU0FBUSxDQUFBLENBQUcsS0FBSSxDQUFDLENBQUMsQ0FBQztDQUV2RixPQUFPLElBQUcsQ0FBQztDQUNkLENBQUM7Q0FDRjs7O0FDdkJBO0FBQUEsQ0FBQSxLQUFNLFFBQVEsRUFBRyxVQUFTLEdBQUcsQ0FBRSxDQUFBLEdBQUcsQ0FBRTtBQUNoQyxDQUFBLElBQUcsUUFBUSxDQUFDLENBQUMsa0JBQWtCLENBQUUsa0JBQWlCLENBQUMsQ0FBRSxHQUFFLENBQUMsQ0FBQztDQUV6RCxLQUFJLEdBQUcsU0FBUyxDQUFFO0NBQ2QsU0FBTyxDQUFBLEdBQUcsU0FBUyxDQUFDLEdBQUcsU0FBUyxDQUFDLFVBQVUsQ0FBQyxHQUFHLFNBQVMsVUFBVSxFQUFFLENBQUMsQ0FBQztHQUN6RTtBQUVELENBRkMsSUFFRSxRQUFRLFFBQVEsS0FBSyxDQUFDLFNBQVMsQ0FBRTtDQUNoQyxTQUFPLENBQUEsR0FBRyxNQUFNLENBQUM7R0FDcEIsQ0FBQyxLQUFLLENBQUMsU0FBUyxJQUFJLENBQUU7QUFDZixDQUFKLE1BQUksQ0FBQSxNQUFNLEVBQUcsQ0FBQSxJQUFJLE9BQU8sUUFBUSxDQUFDO0FBRTdCLENBQUosTUFBSSxDQUFBLE9BQU8sRUFBRyxDQUFBLEdBQUcsU0FBUyxFQUFHLENBQUEsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLG1CQUFtQixDQUFFLE1BQUssQ0FBMkIsQ0FBQyxDQUFDO0NBRTFHLFdBQVMsU0FBUSxDQUFDLENBQUU7Q0FDaEIsVUFBUyxHQUFBLENBQUEsQ0FBQyxFQUFHLEVBQUMsQ0FBRSxDQUFBLENBQUMsRUFBRyxDQUFBLE1BQU0sT0FBTyxDQUFFLENBQUEsQ0FBQyxFQUFFLENBQUU7QUFDaEMsQ0FBSixVQUFJLENBQUEsQ0FBQyxFQUFHLENBQUEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBRSxDQUFBLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztBQUNqRCxDQUFBLFFBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsUUFBUSxRQUFRLENBQUMsQ0FBQztBQUN2QyxDQUFBLGNBQU8sU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO09BQ3ZCO0NBQUEsSUFDSjtBQUVELENBRkMsV0FFTyxFQUFFLENBQUM7QUFFWCxDQUFBLE1BQUcsU0FBUyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsT0FBTyxVQUFVLEVBQUUsQ0FBQyxDQUFDO0dBRXhELENBQUMsQ0FBQztDQUVILE9BQU8sSUFBRyxDQUFDO0NBQ2QsQ0FBQztDQUNGOzs7QUM5QkE7QUFBSSxDQUFKLEVBQUksQ0FBQSxRQUFRLEVBQUcsQ0FBQSxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDbkMsQ0FBQSxPQUFRLEVBQUUsRUFBRyxDQUFBLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUUvQixDQUFBLEtBQU0sUUFBUSxFQUFHLFVBQVUsR0FBRyxDQUFFO0FBQzNCLENBQUosSUFBSSxDQUFBLFFBQVEsRUFBRyxDQUFBLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztDQUMzQyxPQUFPLENBQUEsUUFBUSxPQUFPLE9BQU8sQ0FBQztBQUM3QixDQUFBLFNBQU0sQ0FBRTtBQUNQLENBQUEsT0FBRSxDQUFFLFFBQU87QUFDWCxDQUFBLFlBQU8sQ0FBRSxhQUFZO0NBQUEsSUFDckI7QUFFRCxDQUFBLGFBQVUsQ0FBRSxVQUFTLENBQUU7QUFDdEIsQ0FBQSxRQUFHLEtBQUssRUFBRyxJQUFJLFNBQVEsQ0FBQztBQUFDLENBQUEsU0FBRSxDQUFFLE9BQU07QUFBRSxDQUFBLFlBQUssQ0FBRSxDQUFBLEdBQUcsTUFBTTtDQUFBLE1BQUMsQ0FBQyxDQUFDO0FBRXhELENBQUEsUUFBRyxNQUFNLEdBQUcsQ0FBQyxhQUFhLENBQUUsQ0FBQSxJQUFJLE9BQU8sQ0FBRSxLQUFJLENBQUMsQ0FBQztLQUMvQztBQUVELENBQUEsU0FBTSxDQUFFLFVBQVMsQ0FBRTtBQUNsQixDQUFBLFNBQUksU0FBUyxDQUFDLEdBQUcsRUFBRyxDQUFBLEdBQUcsTUFBTSxZQUFZLEVBQUUsQ0FBQyxDQUFDO0tBQzdDO0FBRUQsQ0FBQSxRQUFLLENBQUUsVUFBVSxDQUFFO0FBQ2xCLENBQUEsUUFBRyxNQUFNLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUNyQjtBQUVELENBQUEsYUFBVSxDQUFFLFVBQVMsSUFBSSxDQUFFO0FBQzFCLENBQUEsUUFBRyxNQUFNLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUM1QjtDQUFBLEVBQ0QsQ0FBQyxDQUFDO0NBQ0gsQ0FBQTtDQUFBOzs7QUM3QkQ7QUFBSSxDQUFKLEVBQUksQ0FBQSxRQUFRLEVBQUcsQ0FBQSxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDbkMsQ0FBQSxPQUFRLEVBQUUsRUFBRyxDQUFBLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUUvQixDQUFBLEtBQU0sUUFBUSxFQUFHLFVBQVMsQ0FBRTtDQUMzQixPQUFPLENBQUEsUUFBUSxNQUFNLE9BQU8sQ0FBQztBQUM1QixDQUFBLFdBQVEsQ0FBRTtBQUNULENBQUEsUUFBRyxDQUFFLEVBQUM7QUFDTixDQUFBLFVBQUssQ0FBRSxFQUNOLE9BQU8sQ0FDUCxZQUFXLENBQ1gsYUFBWSxDQUNaLFNBQVEsQ0FDUixZQUFXLENBQ1gsV0FBVSxDQUNWLFNBQVEsQ0FDUixRQUFPLENBQ1A7Q0FBQSxJQUNEO0FBRUQsQ0FBQSxXQUFRLENBQUUsVUFBUyxLQUFLLENBQUUsQ0FBQSxPQUFPLENBQUU7Q0FDbEMsU0FBSSxLQUFLLEtBQUssRUFBRyxDQUFBLEtBQUssSUFBSSxDQUFFO0NBQzNCLGFBQU8sUUFBTyxDQUFDO09BQ2Y7QUFFRCxDQUZDLFNBRUcsS0FBSyxLQUFLLEVBQUcsRUFBQyxDQUFFO0NBQ25CLGFBQU8sUUFBTyxDQUFDO09BQ2Y7Q0FBQSxJQUNEO0FBRUQsQ0FBQSxjQUFXLENBQUUsVUFBUyxDQUFFO0NBQ3ZCLFdBQU8sQ0FBQSxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0tBQzNDO0FBRUQsQ0FBQSxjQUFXLENBQUUsVUFBUyxJQUFJLENBQUUsQ0FBQSxNQUFNLENBQUU7QUFDL0IsQ0FBSixRQUFJLENBQUEsT0FBTyxFQUFHLENBQUEsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztDQUM5QyxTQUFJLE9BQU8sSUFBSyxFQUFDLENBQUMsQ0FBRTtBQUFFLENBQUEsY0FBTyxFQUFHLEVBQUMsQ0FBQztPQUFFO0FBQ3BDLENBRG9DLFNBQ2hDLElBQUksQ0FBQyxNQUFNLENBQUUsUUFBTyxDQUFFO0FBQUMsQ0FBQSxlQUFRLENBQUMsS0FBSTtBQUFFLENBQUEsYUFBTSxDQUFFLE9BQU07Q0FBQSxNQUFDLENBQUMsQ0FBQztLQUMzRDtBQUVELENBQUEsVUFBTyxDQUFFLFVBQVMsSUFBSSxDQUFFLENBQUEsTUFBTSxDQUFFO0FBQy9CLENBQUEsU0FBSSxJQUFJLENBQUMsTUFBTSxDQUFFLEtBQUksQ0FBRTtBQUFDLENBQUEsZUFBUSxDQUFDLEtBQUk7QUFBRSxDQUFBLGFBQU0sQ0FBRSxPQUFNO0NBQUEsTUFBQyxDQUFDLENBQUM7S0FDeEQ7QUFFRCxDQUFBLFNBQU0sQ0FBRSxVQUFTLENBQUU7QUFDbEIsQ0FBQSxTQUFJLElBQUksQ0FBQyxNQUFNLENBQUUsQ0FBQSxDQUFDLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBLENBQUcsRUFBQyxDQUFFLEVBQUMsUUFBUSxDQUFDLEtBQUksQ0FBQyxDQUFDLENBQUM7S0FDekQ7QUFFRCxDQUFBLFdBQVEsQ0FBRSxVQUFTLENBQUU7QUFDcEIsQ0FBQSxTQUFJLElBQUksQ0FBQyxNQUFNLENBQUUsQ0FBQSxDQUFDLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBLENBQUcsRUFBQyxDQUFFLEVBQUMsUUFBUSxDQUFDLEtBQUksQ0FBQyxDQUFDLENBQUM7S0FDekQ7Q0FBQSxFQUNELENBQUMsQ0FBQztDQUNILENBQUM7Q0FBQTs7O0FDbkRGO0FBQUksQ0FBSixFQUFJLENBQUEsUUFBUSxFQUFHLENBQUEsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQ25DLENBQUEsT0FBUSxFQUFFLEVBQUcsQ0FBQSxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDL0IsQ0FBQSxNQUFPLENBQUMsd0JBQXdCLENBQUMsQ0FBQztBQUVsQyxDQUFBLEtBQU0sUUFBUSxFQUFHLFVBQVMsR0FBRyxDQUFFO0FBQzFCLENBQUosSUFBSSxDQUFBLE9BQU8sRUFBRyxDQUFBLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxHQUFHLENBQUM7QUFDbEMsQ0FBQSxnQkFBVyxFQUFHLENBQUEsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDLEdBQUcsQ0FBQztBQUN2QyxDQUFBLGVBQVUsRUFBRyxDQUFBLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztDQUN2QyxPQUFPLENBQUEsUUFBUSxLQUFLLE9BQU8sQ0FBQztBQUMzQixDQUFBLFNBQU0sQ0FBRTtBQUNQLENBQUEsbUJBQWMsQ0FBRSxRQUFPO0FBQ3ZCLENBQUEsb0JBQWUsQ0FBRSxRQUFPO0NBQUEsSUFDeEI7QUFFRCxDQUFBLFdBQVEsQ0FBRTtBQUNULENBQUEsVUFBSyxDQUFFLENBQUEsT0FBTyxDQUFDLG1CQUFtQixDQUFDO0FBQ25DLENBQUEsUUFBRyxDQUFFLENBQUEsT0FBTyxDQUFDLG9CQUFvQixDQUFDO0FBQ2xDLENBQUEsVUFBSyxDQUFFLENBQUEsT0FBTyxDQUFDLG1CQUFtQixDQUFDO0NBQUEsSUFDbkM7QUFFRCxDQUFBLGFBQVUsQ0FBRSxVQUFTLENBQUU7QUFDdEIsQ0FBQSxTQUFJLE1BQU0sR0FBRyxDQUFDLGFBQWEsQ0FBRSxDQUFBLElBQUksT0FBTyxDQUFFLEtBQUksQ0FBQyxDQUFDO0FBRWhELENBQUEsU0FBSSxJQUFJLEVBQUcsSUFBSSxRQUFPLENBQUMsQ0FBQyxLQUFLLENBQUUsQ0FBQSxJQUFJLE1BQU0sQ0FBQyxDQUFDLENBQUM7QUFDNUMsQ0FBQSxTQUFJLFFBQVEsRUFBRyxJQUFJLFlBQVcsQ0FBQyxDQUFDLEtBQUssQ0FBRSxDQUFBLElBQUksTUFBTSxDQUFDLENBQUMsQ0FBQztBQUNwRCxDQUFBLFNBQUksT0FBTyxFQUFHLElBQUksV0FBVSxDQUFDLENBQUMsS0FBSyxDQUFFLENBQUEsSUFBSSxNQUFNLENBQUMsQ0FBQyxDQUFDO0FBRWxELENBQUEsU0FBSSxPQUFPLEVBQUUsQ0FBQztLQUNkO0FBRUQsQ0FBQSxTQUFNLENBQUUsVUFBUyxDQUFFO0FBQ2xCLENBQUEsU0FBSSxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBRSxFQUFDLENBQUUsSUFBRyxDQUFFLElBQUcsQ0FBRSxDQUFBLElBQUksTUFBTSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsUUFBUSxDQUFDLElBQUksTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQSxHQUFLLEVBQUMsQ0FBQyxDQUFBLENBQUcsTUFBSyxFQUFHLFNBQVEsQ0FBQyxFQUFHLFFBQU8sQ0FBQyxDQUFDLHNCQUFzQixDQUFDLENBQUM7QUFDdEosQ0FBQSxTQUFJLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLElBQUksTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUEsRUFBSSxFQUFDLENBQUEsQ0FBRyxNQUFLLEVBQUcsU0FBUSxDQUFDLEVBQUcsUUFBTyxDQUFDLENBQUMsdUJBQXVCLENBQUMsQ0FBQztBQUN0RyxDQUFBLFNBQUksRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsSUFBSSxNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQSxFQUFJLENBQUEsSUFBSSxNQUFNLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQSxDQUFHLE1BQUssRUFBRyxTQUFRLENBQUMsRUFBRyxRQUFPLENBQUMsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO0NBQzFILFdBQU8sS0FBSSxDQUFDO0tBQ1o7QUFFRCxDQUFBLFFBQUssQ0FBRSxVQUFTLENBQUU7QUFDakIsQ0FBQSxTQUFJLE1BQU0sT0FBTyxFQUFFLENBQUM7S0FDcEI7QUFFRCxDQUFBLFNBQU0sQ0FBRSxVQUFTLENBQUU7QUFDbEIsQ0FBQSxTQUFJLElBQUksS0FBSyxDQUFDLENBQ2IsSUFBSSxTQUFTLElBQUksT0FBTyxFQUFFLENBQzFCLENBQUEsSUFBSSxTQUFTLE1BQU0sT0FBTyxDQUFDLENBQUMsTUFBTSxDQUFFLEtBQUksQ0FBQyxDQUFDLENBQzFDLENBQUEsSUFBSSxTQUFTLE1BQU0sT0FBTyxDQUFDLENBQUMsTUFBTSxDQUFFLEtBQUksQ0FBQyxDQUFDLENBQ3pDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBRWIsQ0FBQSxTQUFJLElBQUksT0FBTyxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsQ0FBQztBQUM5QixDQUFBLFNBQUksSUFBSSxPQUFPLENBQUMsSUFBSSxRQUFRLElBQUksQ0FBQyxDQUFDO0FBQ2xDLENBQUEsU0FBSSxJQUFJLE9BQU8sQ0FBQyxJQUFJLE9BQU8sSUFBSSxDQUFDLENBQUM7QUFFakMsQ0FBQSxTQUFJLE9BQU8sRUFBRSxDQUFDO0NBQ2QsV0FBTyxLQUFJLENBQUM7S0FDWjtDQUFBLEVBQ0QsQ0FBQyxDQUFDO0NBQ0gsQ0FBQztDQUNGOzs7QUN6REE7QUFBSSxDQUFKLEVBQUksQ0FBQSxRQUFRLEVBQUcsQ0FBQSxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDbkMsQ0FBQSxPQUFRLEVBQUUsRUFBRyxDQUFBLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUUvQixDQUFBLEtBQU0sUUFBUSxFQUFHLFVBQVUsR0FBRyxDQUFFO0NBQzVCLE9BQU8sQ0FBQSxRQUFRLEtBQUssT0FBTyxDQUFDO0FBQ3hCLENBQUEsU0FBTSxDQUFFO0FBQ0osQ0FBQSwyQ0FBc0MsQ0FBRSxPQUFNO0FBQzlDLENBQUEsMENBQXFDLENBQUUsT0FBTTtBQUM3QyxDQUFBLDhDQUF5QyxDQUFFLFNBQVE7QUFDbkQsQ0FBQSxrQ0FBNkIsQ0FBRSxXQUFVO0FBQ3pDLENBQUEscUNBQWdDLENBQUUsZUFBYztBQUNoRCxDQUFBLHNDQUFpQyxDQUFFLGVBQWM7QUFDakQsQ0FBQSxrREFBNkMsQ0FBRSxlQUFjO0FBQzdELENBQUEsbURBQThDLENBQUUsZUFBYztBQUM5RCxDQUFBLDRDQUF1QyxDQUFFLGdCQUFlO0NBQUEsSUFDM0Q7QUFFRCxDQUFBLFdBQVEsQ0FBRSxDQUFBLE9BQU8sQ0FBQyx1QkFBdUIsQ0FBQztBQUUxQyxDQUFBLGFBQVUsQ0FBRSxVQUFVLENBQUU7QUFDcEIsQ0FBQSxTQUFJLE1BQU0sR0FBRyxDQUFDLGFBQWEsQ0FBRSxDQUFBLElBQUksT0FBTyxDQUFFLEtBQUksQ0FBQyxDQUFDO0FBQ2hELENBQUEsU0FBSSxRQUFRLEVBQUcsRUFBQyxDQUFDO0FBRWpCLENBQUEsU0FBSSxPQUFPLEVBQUUsT0FBTyxFQUFFLENBQUM7S0FDMUI7QUFFRCxDQUFBLFNBQU0sQ0FBRSxVQUFVLENBQUU7QUFDWixDQUFKLFFBQUksQ0FBQSxNQUFNLEVBQUcsQ0FBQSxDQUFDLENBQUMsSUFBSSxNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQSxFQUFJLEVBQUMsQ0FBQSxFQUN0QyxDQUFBLElBQUksTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUEsRUFBSSxDQUFBLElBQUksTUFBTSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRyxTQUFRLEVBQUcsTUFBSyxDQUFDLEVBQUcsUUFBTyxDQUFDO0FBRW5GLENBQUEsU0FBSSxFQUFFLENBQUMsV0FBVyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsMEJBQTBCLENBQUMsQ0FBQztDQUN4RCxXQUFPLEtBQUksQ0FBQztLQUNmO0FBRUQsQ0FBQSxVQUFPLENBQUUsVUFBVSxDQUFFO0FBQ2IsQ0FBSixRQUFJLENBQUEsSUFBSSxFQUFHLG1DQUFrQztBQUN6QyxDQUFBLGFBQUksRUFBRyxzQkFBcUI7QUFDNUIsQ0FBQSxlQUFNLEVBQUcsa0JBQWlCO0FBQzFCLENBQUEsYUFBSSxFQUFHLENBQUEsTUFBTSxFQUFHLEVBQUMsSUFBSSxNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQSxDQUFHLEVBQUMsQ0FBQyxDQUFBLENBQUcsSUFBRyxDQUFDO0FBRXZELENBQUEsU0FBSSxFQUFFLENBQUMsR0FBRyxFQUFHLEtBQUksQ0FBQSxDQUFHLE9BQU0sQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFHLE9BQU0sQ0FBQyxDQUFDO0FBQ3ZELENBQUEsU0FBSSxFQUFFLENBQUMsR0FBRyxFQUFHLEtBQUksQ0FBQSxDQUFHLE9BQU0sQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFHLE9BQU0sQ0FBQyxDQUFDO0FBRXZELENBQUEsU0FBSSxFQUFFLENBQUMsR0FBRyxFQUFHLEtBQUksQ0FBQSxDQUFHLEtBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFHLE9BQU0sQ0FBQyxDQUFDO0FBQ2xELENBQUEsU0FBSSxFQUFFLENBQUMsR0FBRyxFQUFHLEtBQUksQ0FBQSxDQUFHLEtBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFHLE9BQU0sQ0FBQyxDQUFDO0NBQ2xELFdBQU8sS0FBSSxDQUFDO0tBQ2Y7QUFFRCxDQUFBLFNBQU0sQ0FBRSxVQUFVLENBQUU7QUFDaEIsQ0FBQSxTQUFJLE9BQU8sRUFBRSxRQUFRLEVBQUUsU0FBUyxFQUFFLENBQUM7Q0FDbkMsV0FBTyxLQUFJLENBQUM7S0FDZjtBQUVELENBQUEsT0FBSSxDQUFFLFVBQVUsQ0FBQyxDQUFFO0FBQ2YsQ0FBQSxNQUFDLGVBQWUsRUFBRSxDQUFDO0FBQ25CLENBQUEsU0FBSSxNQUFNLE9BQU8sRUFBRSxDQUFDO0NBQ3BCLFdBQU8sS0FBSSxDQUFDO0tBQ2Y7QUFFRCxDQUFBLE9BQUksQ0FBRSxVQUFVLENBQUMsQ0FBRTtBQUNmLENBQUEsTUFBQyxlQUFlLEVBQUUsQ0FBQztBQUNuQixDQUFBLFNBQUksTUFBTSxTQUFTLEVBQUUsQ0FBQztDQUN0QixXQUFPLEtBQUksQ0FBQztLQUNmO0FBRUQsQ0FBQSxTQUFNLENBQUUsVUFBVSxDQUFDLENBQUU7QUFDakIsQ0FBQSxTQUFJLE1BQU0sUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFBLENBQUcsRUFBQyxDQUFDLENBQUM7Q0FDakQsV0FBTyxLQUFJLENBQUM7S0FDZjtBQUVELENBQUEsV0FBUSxDQUFFLFVBQVUsQ0FBQyxDQUFFO0FBQ2YsQ0FBSixRQUFJLENBQUEsR0FBRztBQUNILENBQUEsY0FBSztBQUNMLENBQUEsb0JBQVcsRUFBRyxzQ0FBcUMsQ0FBQztDQUN4RCxTQUFJLENBQUMsQ0FBRTtBQUNILENBQUEsUUFBQyxlQUFlLEVBQUUsQ0FBQztBQUNuQixDQUFBLFVBQUcsRUFBRyxDQUFBLElBQUksRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUM7T0FDMUIsS0FBTTtBQUNILENBQUEsVUFBRyxFQUFHLENBQUEsSUFBSSxFQUFFLENBQUMsaUVBQWlFLENBQUMsQ0FBQztPQUNuRjtBQUNELENBREMsU0FDRyxFQUFFLENBQUMsR0FBRyxFQUFHLFlBQVcsQ0FBQyxZQUFZLENBQUMsV0FBVyxDQUFDLENBQUM7QUFDbkQsQ0FBQSxRQUFHLFNBQVMsQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUMxQixDQUFBLFVBQUssRUFBRyxDQUFBLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFBLENBQUcsQ0FBQSxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQSxDQUFHLENBQUEsTUFBTSxFQUFHLENBQUEsSUFBSSxNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUVoRixDQUFBLFNBQUksTUFBTSxJQUFJLENBQUMsT0FBTyxDQUFFLE1BQUssQ0FBQyxDQUFDO0NBQy9CLFdBQU8sS0FBSSxDQUFDO0tBQ2Y7QUFHRCxDQUFBLGVBQVksQ0FBRSxVQUFVLENBQUMsQ0FBRTtBQUNuQixDQUFKLFFBQUksQ0FBQSxJQUFJLEVBQUcsQ0FBQSxDQUFDLGNBQWMsVUFBVSxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzlDLENBQUEsWUFBRyxFQUFHLENBQUEsSUFBSSxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUUzQixDQUFBLE1BQUMsZUFBZSxFQUFFLENBQUM7Q0FFbkIsU0FBSSxHQUFHLFNBQVMsQ0FBQyxJQUFJLEVBQUcsMEJBQXlCLENBQUMsQ0FBRTtBQUM1QyxDQUFKLFVBQUksQ0FBQSxFQUFFLEVBQUcsQ0FBQSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUN4QixDQUFBLFdBQUksUUFBUSxJQUFLLEdBQUUsQ0FBQSxFQUFJLENBQUEsSUFBSSxpQkFBaUIsQ0FBQyxFQUFFLENBQUUsSUFBRyxDQUFFLEtBQUksQ0FBQyxDQUFDO09BRS9ELEtBQU0sS0FBSSxHQUFHLFNBQVMsQ0FBQyxJQUFJLEVBQUcsK0JBQThCLENBQUMsQ0FBRTtBQUM1RCxDQUFBLFdBQUksbUJBQW1CLENBQUMsSUFBSSxDQUFDLENBQUM7T0FDakM7Q0FBQSxJQUNKO0FBRUQsQ0FBQSxtQkFBZ0IsQ0FBRSxVQUFVLEVBQUUsQ0FBRSxDQUFBLEVBQUUsQ0FBRSxDQUFBLElBQUksQ0FBRTtBQUVsQyxDQUFKLFFBQUksQ0FBQSxXQUFXLEVBQUcsQ0FBQSxJQUFJLEVBQUcsd0NBQXVDO0FBQzVELENBQUEsVUFBQyxFQUFHLENBQUEsSUFBSSxPQUFPLEVBQUcsRUFBQztBQUNuQixDQUFBLGtCQUFTLEVBQUcsQ0FBQSxJQUFJLE9BQU8sQ0FBQyxDQUFDLENBQUMsWUFBWSxFQUFFLENBQUEsQ0FBRyxDQUFBLElBQUksTUFBTSxDQUFDLENBQUMsQ0FBRSxFQUFDLENBQUMsQ0FBQztBQUVoRSxDQUFBLFNBQUksUUFBUSxZQUFZLENBQUMsV0FBVyxDQUFDLENBQUM7QUFDdEMsQ0FBQSxPQUFFLFNBQVMsQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUV6QixDQUFBLFNBQUksUUFBUSxFQUFHLEdBQUUsQ0FBQztBQUNsQixDQUFBLFNBQUksUUFBUSxFQUFHLEdBQUUsQ0FBQztBQUVsQixDQUFBLFFBQUcsS0FBSyxRQUFRLENBQUMsUUFBUSxFQUFHLFVBQVMsQ0FBRSxFQUFDLEVBQUUsQ0FBRSxDQUFBLElBQUksUUFBUSxDQUFDLENBQUMsQ0FBQztLQUM5RDtBQUVELENBQUEscUJBQWtCLENBQUUsVUFBVSxJQUFJLENBQUU7Q0FFaEMsU0FBSSxDQUFDLElBQUksVUFBVSxDQUFFO0FBQ2pCLENBQUEsY0FBTyxJQUFJLENBQUMsa0JBQWtCLENBQUMsQ0FBQztBQUVoQyxDQUFBLFdBQUksVUFBVSxFQUFHLENBQUEsTUFBTSxZQUFZLENBQUMsSUFBSSxhQUFhLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FDcEMsS0FBSSxDQUNKLEtBQUksQ0FBQyxDQUFDO09BQ3JDLEtBQU07QUFDSCxDQUFBLGFBQU0sY0FBYyxDQUFDLElBQUksVUFBVSxDQUFDLENBQUM7QUFDckMsQ0FBQSxXQUFJLFVBQVUsRUFBRyxVQUFTLENBQUM7T0FDOUI7Q0FBQSxJQUNKO0FBRUQsQ0FBQSxlQUFZLENBQUUsVUFBVSxJQUFJLENBQUU7QUFDdEIsQ0FBSixRQUFJLENBQUEsRUFBRSxFQUFHLENBQUEsSUFBSSxRQUFRLEVBQUcsRUFBQztBQUNyQixDQUFBLFdBQUUsRUFBRyxDQUFBLElBQUksUUFBUSxPQUFPLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxDQUFDO0FBQ2pELENBQUEsU0FBSSxpQkFBaUIsQ0FBQyxFQUFFLENBQUUsR0FBRSxDQUFFLEtBQUksQ0FBQyxDQUFDO0tBQ3ZDO0FBRUQsQ0FBQSxnQkFBYSxDQUFFLFVBQVUsQ0FBQyxDQUFFO0FBQ3hCLENBQUEsTUFBQyxlQUFlLEVBQUUsQ0FBQztBQUNuQixDQUFBLFFBQUcsS0FBSyxRQUFRLENBQUMsY0FBYyxDQUFFLEVBQUMsRUFBRSxDQUFFLENBQUEsSUFBSSxRQUFRLENBQUMsQ0FBQyxDQUFDO0tBQ3hEO0FBRUQsQ0FBQSxTQUFNLENBQUUsVUFBVSxDQUFFO0FBQ2hCLENBQUEsU0FBSSxJQUFJLEtBQUssQ0FBQyxJQUFJLFNBQVMsT0FBTyxFQUFFLENBQUMsQ0FBQztDQUN0QyxXQUFPLEtBQUksQ0FBQztLQUNmO0NBQUEsRUFDSixDQUFDLENBQUM7Q0FDTixDQUFDO0NBQ0Y7OztBQ3RKQTtBQUFJLENBQUosRUFBSSxDQUFBLFFBQVEsRUFBRyxDQUFBLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUNuQyxDQUFBLE9BQVEsRUFBRSxFQUFHLENBQUEsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBRS9CLENBQUEsS0FBTSxRQUFRLEVBQUcsVUFBUyxHQUFHLENBQUU7Q0FDOUIsT0FBTyxDQUFBLFFBQVEsS0FBSyxPQUFPLENBQUM7QUFDM0IsQ0FBQSxXQUFRLENBQUUsQ0FBQSxPQUFPLENBQUMsdUJBQXVCLENBQUM7QUFFMUMsQ0FBQSxhQUFVLENBQUUsVUFBUyxDQUFFO0FBQ3RCLENBQUEsU0FBSSxNQUFNLEdBQUcsQ0FBQyxjQUFjLENBQUUsQ0FBQSxJQUFJLFNBQVMsQ0FBRSxLQUFJLENBQUMsQ0FBQztBQUNuRCxDQUFBLFNBQUksT0FBTyxFQUFFLFNBQVMsRUFBRSxDQUFDO0tBQ3pCO0FBRUQsQ0FBQSxXQUFRLENBQUUsVUFBUyxDQUFFO0FBQ2hCLENBQUosUUFBSSxDQUFBLElBQUksRUFBRyxnQkFBZTtBQUN6QixDQUFBLGVBQU0sRUFBRyxrQkFBaUI7QUFDMUIsQ0FBQSxhQUFJLEVBQUcsQ0FBQSxxQkFBcUIsRUFBRyxDQUFBLElBQUksTUFBTSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUEsQ0FBRyxJQUFHLENBQUM7QUFFOUQsQ0FBQSxTQUFJLEVBQUUsQ0FBQyxHQUFHLEVBQUcsS0FBSSxDQUFBLENBQUcsT0FBTSxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUcsT0FBTSxDQUFDLENBQUM7QUFDdkQsQ0FBQSxTQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRyxPQUFNLENBQUMsQ0FBQztDQUNyQyxXQUFPLEtBQUksQ0FBQztLQUNaO0FBRUQsQ0FBQSxTQUFNLENBQUUsVUFBUyxDQUFFO0FBQ2xCLENBQUEsU0FBSSxJQUFJLEtBQUssQ0FBQyxJQUFJLFNBQVMsT0FBTyxFQUFFLENBQUMsQ0FBQztDQUN0QyxXQUFPLEtBQUksQ0FBQztLQUNaO0NBQUEsRUFDRCxDQUFDLENBQUM7Q0FDSCxDQUFDO0NBQ0Y7OztBQzVCQTtBQUFJLENBQUosRUFBSSxDQUFBLFFBQVEsRUFBRyxDQUFBLE9BQU8sQ0FBQyxVQUFVLENBQUM7QUFDakMsQ0FBQSxJQUFDLEVBQUcsQ0FBQSxPQUFPLENBQUMsWUFBWSxDQUFDO0FBQ3pCLENBQUEsT0FBSSxFQUFHLENBQUEsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQzNCLENBQUEsT0FBUSxFQUFFLEVBQUcsQ0FBQSxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7QUFFL0IsQ0FBQSxLQUFNLFFBQVEsRUFBRyxVQUFTLEdBQUcsQ0FBRTtDQUM5QixPQUFPLENBQUEsUUFBUSxLQUFLLE9BQU8sQ0FBQztBQUUzQixDQUFBLFVBQU8sQ0FBRSxVQUFVLENBQUU7Q0FDcEIsV0FBTztBQUNHLENBQUEsZUFBUSxDQUFFLElBQUksQ0FBQSxFQUFFLE9BQU8sQ0FBQyxlQUFlLENBQUUsZ0JBQWUsQ0FBQztBQUN6RCxDQUFBLGFBQU0sQ0FBRSxHQUFFO0FBQ1YsQ0FBQSxtQkFBWSxDQUFFLE1BQUs7QUFDbkIsQ0FBQSxzQkFBZSxDQUFFLEtBQUk7QUFDckIsQ0FBQSx3QkFBaUIsQ0FBRSxNQUFLO0FBQ3hCLENBQUEsb0JBQWEsQ0FBRSxLQUFJO0FBQ25CLENBQUEsMEJBQW1CLENBQUUsTUFBSztDQUFBLE1BQ25DLENBQUM7S0FDSTtBQUVQLENBQUEsYUFBVSxDQUFFLFVBQVMsQ0FBRTtBQUN0QixDQUFBLFNBQUksTUFBTSxHQUFHLENBQUMsY0FBYyxDQUFFLENBQUEsSUFBSSxPQUFPLENBQUUsS0FBSSxDQUFDLENBQUM7QUFDakQsQ0FBQSxPQUFFLEtBQUssQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLE9BQU8sQ0FBRSxLQUFJLENBQUMsQ0FBQyxDQUFDO0tBQ25DO0FBRUQsQ0FBQSxTQUFNLENBQUUsVUFBUyxDQUFFO0FBQ2xCLENBQUEsT0FBRSxLQUFLLENBQUMsQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFFO0FBQ3JCLENBQUosVUFBSSxDQUFBLEdBQUcsRUFBRyxDQUFBLElBQUksTUFBTSxJQUFJLENBQUMsS0FBSyxDQUFDO0FBQzlCLENBQUEsZ0JBQUssRUFBRyxDQUFBLElBQUksQ0FBQyxJQUFJLE1BQU0sSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7QUFFdkMsQ0FBQSxXQUFJLE1BQU0sQ0FBQyxHQUFHLENBQUUsSUFBRyxDQUFDLENBQUM7QUFDckIsQ0FBQSxZQUFLLEdBQUksQ0FBQSxLQUFLLENBQUMsR0FBRyxDQUFFLElBQUcsQ0FBQyxDQUFDO0NBRXpCLGFBQU8sS0FBSSxDQUFDO09BQ1osQ0FBRSxLQUFJLENBQUMsQ0FBQyxDQUFDO0tBQ1Y7QUFFRCxDQUFBLFNBQU0sQ0FBRSxVQUFTLENBQUU7QUFDZCxDQUFKLFFBQUksQ0FBQSxHQUFHLEVBQUcsSUFBSSxDQUFBLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBRSxDQUFBLElBQUksUUFBUSxFQUFFLENBQUMsQ0FBQztBQUM1QyxDQUFBLFNBQUksTUFBTSxDQUFDLEdBQUcsQ0FBRSxJQUFHLENBQUMsQ0FBQztBQUNyQixDQUFBLFFBQUcsU0FBUyxFQUFHLEVBQ2QsVUFBVSxDQUFFLENBQUEsRUFBRSxRQUFRLFdBQVcsRUFBRSxDQUNuQyxDQUFDO0FBQ0YsQ0FBQSxRQUFHLFlBQVksWUFBWSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQ3hDLENBQUEsUUFBRyxTQUFTLFdBQVcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ25DLENBQUEsU0FBSSxNQUFNLElBQUksQ0FBQyxLQUFLLENBQUUsSUFBRyxDQUFDLENBQUM7Q0FDM0IsV0FBTyxLQUFJLENBQUM7S0FDWjtDQUFBLEVBQ0QsQ0FBQyxDQUFDO0NBQ0gsQ0FBQztDQUNGOzs7QUNsREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDeGtEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDL3pDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pQQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwa1VBOztBQ0FBOztBQ0FBOztBQ0FBOztBQ0FBOztBQ0FBO0NBQUEsR0FBSSxDQUFDLEtBQUssVUFBVSxRQUFRLENBQzVCO0FBQ0UsQ0FBQSxNQUFLLFVBQVUsUUFBUSxFQUFHLFVBQVMsR0FBRyxDQUN0QztBQUNNLENBQUosTUFBSSxDQUFBLEdBQUcsRUFBRyxDQUFBLElBQUksT0FBTyxJQUFLLEVBQUMsQ0FBQztBQUV4QixDQUFKLE1BQUksQ0FBQSxJQUFJLEVBQUcsQ0FBQSxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUEsRUFBSSxFQUFDLENBQUM7QUFDckMsQ0FBQSxPQUFJLEVBQUcsQ0FBQSxDQUFDLElBQUksRUFBRyxFQUFDLENBQUMsRUFDVixDQUFBLElBQUksS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFBLENBQ2YsQ0FBQSxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztDQUN4QixPQUFJLElBQUksRUFBRyxFQUFDO0FBQ1YsQ0FBQSxTQUFJLEdBQUksSUFBRyxDQUFDO0FBRWQsQ0FGYyxTQUVQLENBQUEsSUFBSSxFQUFHLElBQUcsQ0FBRSxDQUFBLElBQUksRUFBRSxDQUN6QjtDQUNFLFNBQUksSUFBSSxHQUFJLEtBQUksQ0FBQSxFQUNaLENBQUEsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFLLElBQUc7Q0FDcEIsYUFBTyxLQUFJLENBQUM7Q0FBQSxJQUNmO0FBQ0QsQ0FEQyxTQUNNLEVBQUMsQ0FBQyxDQUFDO0dBQ1gsQ0FBQztDQUNIO0NBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3Rocm93IG5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIil9dmFyIGY9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGYuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sZixmLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsInZhciBhcHAgPSB7XG5cdFx0cGx1Z2luczoge31cblx0fSxcblx0U3RhdGUgPSByZXF1aXJlKCcuL3N0YXRlJykoYXBwKSxcblx0Um91dGVyID0gcmVxdWlyZSgnLi9yb3V0ZXInKShhcHApLFxuXHRCYWNrYm9uZSA9IHJlcXVpcmUoJ2JhY2tib25lJyksXG4gICAgXyA9IHJlcXVpcmUoJ3VuZGVyc2NvcmUnKSxcblx0JCA9IHJlcXVpcmUoJ2pxdWVyeScpO1xuXG5hcHAucm9vdCA9ICcvJztcbmFwcC5zdGF0ZSA9IG5ldyBTdGF0ZSgpO1xuYXBwLnZlbnQgPSBfLmV4dGVuZCh7fSwgQmFja2JvbmUuRXZlbnRzKTtcblxuJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24gKCkge1xuXHRhcHAucm91dGVyID0gbmV3IFJvdXRlcigpO1xuXHRCYWNrYm9uZS5oaXN0b3J5LnN0YXJ0KHsgcHVzaFN0YXRlOiB0cnVlLCByb290OiBhcHAucm9vdCB9KTtcbn0pO1xuXG4iLCJtb2R1bGUuZXhwb3J0cyA9IFtcbls1NS43NDY5ODYyNTUxMzIsMzcuNTk4NDczMTkyNDY5LDE1MDBdLFxuWzU1Ljc4NTAzNDY4MjAwMSwzNy42MjQ0OTAwOTI5MDksMjAwMF0sXG5bNTUuNjgwMDM3NDg5Mzg5LDM3LjUxMzU4NzI1MDM5MSw2MDBdLFxuWzU1LjgyNzc5ODkzNDU1NSwzNy41MTQzMzkxMjE1MjksNzAwXSxcbls1NS43MTA4NDk3ODk5MjIsMzcuNTk0MDgzOTcwNDgsNjAwXSxcbls1NS43NjIxNDkxMjg5NjgsMzcuNjEyNjQ1MDg5NTk2LDEwMDBdLFxuWzU1LjQ0MTE0NTA4NjExMiwzNy43NjU1MDEzNDY2NjksNTAwXSxcbls1NS43NzE2NjYxODA2MDcsMzcuNjM3NDU3ODQ0MDcsMTAwMF0sXG5bNTUuNzM5MDc5OTI2MjgsMzcuNjE4MDM1MzE4OTI4LDgwMF0sXG5bNTUuNzk2NTEyNjI1MTE2LDM3LjU0Mjc0OTQ0MzM0NSwxNzUwXSxcbls1NS43NzI0NDI0ODEyODIsMzcuNjc2NjcxOTQ5MjksODcwXSxcbls1NS43NzkyOTQ2NzQ4NTEsMzcuNjAxMzgxNTMxNDEyLDEwMDBdLFxuWzU1Ljc2OTkxNjA4MTYyOCwzNy42MjAyMzI3NzUyNTksMTAwMF0sXG5bNTUuNzQ1MzExNzAwNTI1LDM3LjcwNjA3NzMzOTg1Myw0MDBdLFxuWzU1Ljc2NjM3MTk4MjczNiwzNy42MDU0NjIwNzU2NjMsNDEwXSxcbls1NS42MDE5NDAyOTc5NTgsMzcuNDk4MTY5MTg0NTU2LDM1MF0sXG5bNTUuNzYyNDkyNDA4NDE1LDM3LjYxODk2NDQzNzc3NiwxMzAwXSxcbls1NS43NjEzMDk1MDg2NTcsMzcuNjE0MzMwNjU1NDUyLDE1MDBdLFxuWzU1Ljc5OTE1MjczMzI4NiwzNy42MTMxNzg5NzI3MDYsODAwXSxcbls1NS43MzQzNjk4MjExMzksMzcuNjU1ODMwNjczMzg4LDE1MDBdLFxuWzU1LjczOTIwOTMyMjg3NCwzNy41ODQ4NDgzNjIwMTQsNTAwXSxcbls1NS43NDQ0Mjg0MDUyMzcsMzcuNjI5ODQ4NDAzNjI3LDc1MF0sXG5bNTUuNzEzMzgyNzE0MTQxLDM3LjUwMTcxMzY3Njc5NiwxMDAwXSxcbls1NS43NTA2NzA1NDIwOTUsMzcuNTk2MjY4NDg4NzczLDQ1MF0sXG5bNTUuNjkyNjI0NzEyMzE4LDM3LjQ5NDkyNTQ1NzY1MiwxMDAwXSxcbls1NS42NjIzNTEwMTcwNDcsMzcuNDg1ODY2Njk3ODg3LDE1MDBdLFxuWzU1Ljc3NzY4NzY5NzY2MiwzNy42MzM1MzUxMjcxNTksMTIwMF0sXG5bNTUuNzgxODk4NTgyMDk0LDM3LjU5NjM3OTU5NDAyOSw3MDBdLFxuWzU1Ljc3MDU2OTM3NTA5MSwzNy42MjQ4NTY3NDU1ODUsNTMwXSxcbls1NS42NzAyMTY2MjAyMTgsMzcuNDc2NzAyNTAyODg5LDgwMF0sXG5bNTUuNjczMjg4OTIwNTcyLDM3LjUwMjA1ODgzMDEzMSwxMDAwXSxcbls1NS42NTc3MjYzNjM2MjQsMzcuNTI5NTcyNTYwMjgzLDEwMDBdLFxuWzU1Ljc5MDUxMTQ4NTkwMywzNy43MDM2NzQ4MTkzNTQsMTAwMF0sXG5bNTUuNzUxNTgyMDM1ODc3LDM4LjAxMjIwMzgyMjQyMSw4NzBdLFxuWzU1LjY5NTkyNDI2ODA2NiwzNy42MTk4MjAwMDcwOCw5MDBdLFxuWzU1LjgyNjg1MTU1Njg2NCwzNy41MjE0MTMyMjM5MTYsMTAwMF0sXG5bNTUuNzU0NTg4ODE4ODE4LDM3LjYzNDc5OTI3Mzc2MywyMDBdLFxuWzU1LjY1MTAwOTQxNzczOSwzNy43NTAyNjUwNzU0OTEsOTAwXSxcbls1NS43NjAwNDUyNTQzMDksMzcuNTk3NTA3MDgzNjIxLDIwMDBdLFxuWzU1Ljc0NTQ0NzAwNjI3NiwzNy42MDQ4NzAyMzAyODIsMTYyMF0sXG5bNTUuNzUwNzY4MTY5NTM2LDM3LjU5OTYxODc3OTM3NCwxNjIwXSxcbls1NS43NTkzNTc4NDM2MjgsMzcuNjEzMDIxNjU5MDg3LDE2MjBdLFxuWzU1Ljc0NDU2NDYwNjM0MSwzNy41NjU1MzUxNTMxNDQsMTYyMF0sXG5bNTUuODMyODUzOTg4NzEyLDM3LjY1NzU5NjkwMTk2NCw1MDBdLFxuWzU1LjU2NzQ1MDk5Mzk5OSwzNy41NjIwOTYzOTIzODUsMTAwMF0sXG5bNTUuODExNzM3MjI5ODQsMzcuNTczMTIwODExNzE5LDEyMDBdLFxuWzU1LjgwNjA2MzM2MTg0MSwzNy41MTMyNjk0OTIwNDUsNDAwXSxcbls1NS41OTU0Mzc1ODU0ODksMzcuNTk1MTQ3MzExNDA1LDEwMDBdLFxuWzU1LjYwOTcwNTAwODAwNSwzNy43MDg3NTI4NzMzNTksNjUwXSxcbls1NS42ODE1NzcyNTUzNzEsMzcuNzIzNDg1NjkzODg0LDEwMDBdLFxuWzU1Ljg4MDgyNTM3ODU0NCwzNy42NTA3MDg3NDQxMTcsMTAwMF0sXG5bNTUuNzQwNzAzMDAxMDQ4LDM3LjYyMjg4MjY5MDg5OCwxMDAwXSxcbls1NS43NTA5OTM4NjU2OTcsMzcuNTkxMjM0OTkyMjA4LDUwMF0sXG5bNTUuODUyMzQxNDMyODI4LDM3LjQ0NjM4MTQ4MzMxMywxMjAwXSxcbls1NS44NjYwMTg2MDg0NDUsMzcuNjgxMzE3NjUyMTIxLDQ1MF0sXG5bNTUuNTk2ODM2MTgxMDk4LDM3LjUxMjQxNDA0MTQ5NywyMDAwXSxcbls1NS45MjYwNDA0NDQyNDMsMzcuNzUyMjIwNjc5Mjk5LDcwMF0sXG5bNTUuNzY0NDI5OTAxMDEyLDM3LjY1NTExNzI1NTM5NSw2MDBdLFxuWzU1LjgxMjEzNDUyNTg0NiwzNy42Mzg4ODMwMTA4LDQ1MF0sXG5bNTUuNzQ3MzY4NDkwMDM4LDM3LjY1NjE5MTk2MTc5LDcwMF0sXG5bNTUuNzE0OTcwOTEzNjIxLDM3LjQwMTI3OTg0NDQ3NCw3MDBdLFxuWzU1LjcyOTQxOTQwNDM3OSwzNy41ODcwNDc3NDI3NjcsMTMwMF0sXG5bNTUuNjgzODMyMDIyNTc2LDM3LjYyNDI2MDMxMzI5NSw4MDBdLFxuWzU1LjU3OTQxNTc2NTgzOSwzNy44OTk2NjIwODM1NjgsODAwXSxcbls1NS43NjgxMzQ2NjQ0OSwzNy42NDY4NTg1ODU2MzIsNTAwXSxcbls1NS43ODQxMjY2MDE0NjksMzcuNjM0Mzc3ODYzNTA1LDEwMDBdLFxuWzU1LjQzMjIyMTc3Mjk4LDM3Ljc2Njk0Nzc3NTc3MiwzMDBdLFxuWzU1LjkxMDk0NTY1NDMzNiwzNy4zOTYxMDc3ODE1NiwzMDBdLFxuWzU1Ljc0MTI2MjA1MzY4OCwzNy42NTI2Njk0NDk3MzcsNjAwXSxcbls1NS43NDAwMDYzODc4ODcsMzcuNDgxODY5MTg4OCw5NTBdLFxuWzU1LjczMjE0MTg3NDI4OCwzNy42MTE0MjgyOTYyMDUsNzUwXSxcbls1NS43MzE3NjAyNzI2NTgsMzcuNDg3Mzc0MjQ4MDM2LDIwMDBdLFxuWzU1LjU3ODk2MzYxNjgwNSwzNy42NTEwMTE1OTMyMjEsNDAwXSxcbls1NS42NDk5NDc5NDAyMywzNy43NDU5NDY3MTQ1MjMsMTUwMF0sXG5bNTUuNzU3MjE4Nzc5MTk0LDM3LjY1OTEzMzYxOTE0OCwxNTAwXSxcbls1NS44MDk0Nzg0NzgwMDIsMzcuNDY0NDg3OTIxOTM4LDE1MDBdLFxuWzU1Ljc4NTM0NDk1MDQ2LDM3LjU3MjcxMjMyMDM2OSwxMjAwXSxcbls1NS43NjYyNzkxODQ3NzMsMzcuNjMwNTUwNDMyMDYyLDUwMF0sXG5bNTUuNDM5ODQwNjgwNzI3LDM3LjU2NTU1MTg3NDUxOCw3MDBdLFxuWzU1LjYzMzI2NTkzMjQ0NCwzNy42NTgwMDQ1ODg3NjYsMTAwMF0sXG5bNTUuODYwNzQyMjQwODg0LDM3LjQ4MDk4MTM4MTYwMSw3MDBdLFxuWzU1Ljc1NDY4MTc3NjM2NywzNy42MjE1MjkxODYwODUsMjAwMF0sXG5bNTUuNzMzMTQ3NDQ0MDkzLDM3LjY4Mzk5MzczMjMyMywxMDAwXSxcbls1NS42ODAyNjA1Nzc1MTUsMzcuNTcwNjU4Njc2MDY2LDgwMF0sXG5bNTUuNzU5NjQ1OTQyNDI2LDM3LjY1MjUyNzI1MTY3OSwxMzAwXSxcbls1NS43ODk2MDY0MTI0MjIsMzcuNzQ3NzUyNzY1NjQ2LDUwMF0sXG5bNTUuODQxMDI3MzMwOTY5LDM3LjQ4NzAyMTIwNDMsMjUwXSxcbls1NS43MDkzMTQyOTU3MywzNy41OTEzMzk3Mzc1OCwxMjAwXSxcbls1NS43MzQzNTcyODEwMTEsMzcuNjYxNTg3NTU5NjkxLDIwMDBdLFxuWzU1Ljc3MTE4MTczMTI4NiwzNy42Njk5MjkxOTc3NzYsNTAwXSxcbls1NS44NjAwNjIxNjI2MDQsMzcuNDQ4MzA0MDcwNDEzLDM1MF0sXG5bNTUuNzc2OTk4ODg0MjA3LDM3LjU4NTMzOTkxODA1Miw3MDBdLFxuWzU1LjgyMjk3MDg4NjI2MSwzNy43NTc2NDM5OTc1MjMsMTUwMF0sXG5bNTUuNzA1NTQwNDY4MDY1LDM3Ljc2ODc1NDMyMzY3OSwxMjUwXSxcbls1Ni4wMDY2NTUxODk3NjgsMzcuODQ1ODY4MzA1Mzc4LDc1MF0sXG5bNTUuNzIyODQyMTQzODY5LDM3LjU2Njk2MDA5NTAxNSw2NTBdLFxuWzU1LjkwMTc2NTY4NDU0NiwzOC4wNjMwMDcxNjE2NTQsNDUwXSxcbls1NS41ODIzODAyNzEzNTQsMzcuODk5Mzc4NjM2MDY1LDEyMDBdLFxuWzU1LjY2MTE2OTI5OTU2MywzNy43NjAzMDkzNTQ1MzIsMTUwMF0sXG5bNTUuNzc4NDYzMDE5OTE5LDM3LjY2MjgyODkwMjE1Miw3MDBdLFxuWzU1Ljc3MDk5NDg0ODUxNCwzNy41ODcyOTgyMjAyMjIsMTAwMF0sXG5bNTUuNzkwMjc2MjM2NDc1LDM3LjU0NDUxOTA1NTU1MywzMDBdLFxuWzU1Ljg0MjU2NjcyMTk2NiwzNy40OTUzNzcyMTkxNDMsODAwXSxcbls1NS43NzIzMDMxOTU4OSwzNy42MjI2MjkzMzY2OTYsMTAwMF0sXG5bNTUuNzYzNTgxNjA0NjE3LDM3LjYxNTk4MjQxOTQyNywxMDAwXSxcbls1NS42MTg4ODA4OTc4ODYsMzcuNzMwMTI4MTM2MzAyLDEwMDBdLFxuWzU1Ljg2MzQxNDMzMzgxLDM3LjQyMjY1MTMwMjk5OCwyMDBdLFxuWzU1Ljc1NDUyNTEzNjc2NCwzNy41Njk2MjY3MTE2MTksNzAwXSxcbls1NS44NzkyOTM1MDYyMzgsMzcuNTI0NTM1NDAyOTQ3LDE1MDBdLFxuWzU1Ljg1Njc3MDUyODExNSwzNy40ODY0ODUxMjY3MTIsMTUwMF0sXG5bNTUuODAzNTg5NDcxMzMzLDM3LjY0MzkxNTI4MDUwOSwyMDBdLFxuWzU1Ljc2MTA3MTg4NDY2NywzNy42ODAxNzc3NzMyNTgsMjAwXSxcbls1NS44NjM3MTI2ODM2MDEsMzcuNTQ1ODE1MDExODI3LDE1MDBdLFxuWzU1LjYyOTk3NzEwNzQyOCwzNy42NzMzNzM1NTY3NjIsNzUwXSxcbls1NS43OTk3NDc1MjAyMDMsMzcuNDgyOTgzNDA1MTgzLDgwMF0sXG5bNTUuODEyODA3NjczMTQ1LDM3LjU4MzIwOTgxNzI2LDUwMF0sXG5bNTUuODM5MDc1NTczLDM3LjQwNjc0MjQ1NTM4MiwzMDBdLFxuWzU1Ljc4MTM0MjE3NDU0OSwzNy42MzQxMjIzODQxNjksMTQ2MF0sXG5bNTUuNjUyODA2OTc2MjIsMzcuMzkzMzEyNDkzODY1LDEyNTBdLFxuWzU1Ljc3MDQxMzQ2Mzc5NiwzNy41OTkyNTA2ODIxMTUsMTI1MF0sXG5bNTUuNzQ0MTgxODA2NTQ5LDM3LjU4Mjg5ODMyMjY4MSwxMjUwXSxcbls1NS44MDYzODU4NjQ3OTksMzcuNTgyNjg5NDkxNDM1LDY1MF0sXG5bNTUuODc2NTUxMzc5MDY4LDM3LjY4NTU2ODM0ODMyNSwxMDAwXSxcbls1NS44MjcxNDIxNzcwMDQsMzcuMzE5NDEzNjQyNjQzLDEwMDBdLFxuWzU1Ljg3NDE0OTI3NTYwMywzNy4xMjI0MDA5MTEyMzgsMTAwMF0sXG5bNTUuNzc2MDA5MjIyNTQ2LDM3LjY2MDUzMTMwMDEzMiw1NTBdLFxuWzU1Ljg0NjE3MDQ3MDI0NiwzNy4zNTc4ODg4ODAwMzcsNTgwXSxcbls1NS43Nzg2MDM5NjY4MiwzNy42MDA3MjU4MzY2NTEsODAwXSxcbls1NS43OTQ5NzA3MTY3NTEsMzcuNzAwMTg5OTU3OTExLDExMDBdLFxuWzU1Ljg4Nzk4NjAxOTIxMywzNy42MTEzNjM1MDE1NDYsMTAwMF0sXG5bNTUuNjU1MTM1Nzg5MDg1LDM3LjQ5ODg1MDYzNzMyLDcwMF0sXG5bNTUuNzA0MDM4NTI5MTYsMzcuNDc5MjQ3MjgzNDE1LDMwMF0sXG5bNTUuNzUwOTc5OTYwMzc0LDM3LjgxNzc1NjE1NTYwMSw0MjBdLFxuWzU1Ljc2MjY1Nzk5NDMzOCwzNy41OTQ4NjE5MTQyNjgsMTEwMF0sXG5bNTUuNzEyMzI2MTc1NDkxLDM3LjYyNjM2NTYzMjk4MiwxMDAwXSxcbls1NS43ODM2MjA1ODY4OSwzNy43MzQzNzU3MDkyNywxNTAwXSxcbls1NS43NjgxMzQyNTkyOTMsMzcuNjE0MTgzNzIwMTA3LDE0NjBdLFxuWzU1LjcyOTYwMDY1NzEzMiwzNy42ODA1NDg2ODU4MzYsNzAwXSxcbls1NS44MjY2OTY1NTkzNDUsMzcuNDQ1MjkxMTk0NzM5LDgwMF0sXG5bNTUuNjMyNTM3Njg5OTg5LDM3LjUxNzI2NTkyNjQzMiw0MDBdLFxuWzU1LjgxMzc2Mjg2MTU0NiwzNy41NzU1MDQyMjY0MDUsNzAwXSxcbls1NS43MTk1NjM3MjU2NywzNy42MjY0NjgzNjQ5MDYsMTUwMF0sXG5bNTUuNjY1NjA2OTM4ODQ4LDM3Ljc0NzA1OTgxMDMwMyw1MDBdLFxuWzU1LjcxODc4NjIyNjg1OSwzNy43ODcxMDA5MDE1NDMsODUwXSxcbls1NS43OTA4ODkwMDczNDEsMzcuNjgwMzAzNzczNTk0LDEyMDBdLFxuWzU1LjcyMDA5NzAwOTQ1OSwzNy42MjYxNTgyOTcxMDEsNzAwXSxcbls1NS42MzMyMjc1NjkzNDQsMzcuNjA4MDkyNDYwNDUxLDY1MF0sXG5bNTUuNzg5NzIyMzUzMzI4LDM3LjQ2MTYyNjQzMjY3LDQ1MF0sXG5bNTUuOTEyNTg5NTY5NzIxLDM3LjczMjAxNjU3MzY2Niw3MDBdLFxuWzU1Ljg2NjI1NTg5MTg1NiwzNy43MDc1NjY1MzU5MzEsNzAwXSxcbls1NS42NTk1NzU1ODY3MzUsMzcuNjIwMzQ3NjkwMjI5LDUxMF0sXG5bNTUuNzc0NDE0NDM1MTE3LDM3LjU5ODg0MjE5OTg1MywxMDAwXSxcbls1NS42ODE4ODIxNTQ1NDYsMzcuODQ4MTEzNzcwMjgsMTAwMF0sXG5bNTUuNzY4NTYyNzIxMDIzLDM3LjYwMzY4NzE1MTQ0OSwxMDAwXSxcbls1NS43OTQ2Mjk5NzI5NTgsMzcuNTYyOTAzMDg2MDUsMzAwXSxcbls1NS43NDI2NTM0MDY5NTMsMzcuNjI5NjQ0MTAwMzI5LDYwMF0sXG5bNTUuNTM5OTc5NzA1ODc2LDM3LjUzNjM2ODE5ODQzOSw3NTBdLFxuWzU1Ljg5MDgxNjE0OTM5NiwzNy40NDY3MjI5NzIxNzQsODAwXSxcbls1NS44MjM2ODkzMjg0MzIsMzcuMzE5Njc2MTkzNDg3LDEyNTBdLFxuWzU1Ljc1NTUyOTAyNDYxOCwzNy42MDA1NzQwMDI1NzIsMTAwMF0sXG5bNTUuNzU4MjI4MjMwNzMzLDM3LjU4Njk0ODgxOTE4LDkwMF0sXG5bNTUuNzE3ODA0Mzc3NDM0LDM3Ljg1NzcwMjU4MzQ0NywyMDBdLFxuWzU1Ljg0OTk2NzI1MzQzOSwzNy40NTIwMDE1NDczMDEsNjgwXSxcbls1NS43NzQzNzM0NzE0NzMsMzcuODI0OTYzMzE0Njc2LDEwMDBdLFxuWzU1LjkxOTU0NDY2NTEwNSwzNy45OTM3NzQ0MTQ0MTUsNTAwXSxcbls1NS43NzY5OTg4ODQyMDcsMzcuNTg1MzM5OTE4MDUyLDgwMF0sXG5bNTUuNzIwNzYxNjQyMTU2LDM3LjYwMDQ0MTYxNTc0OCwxMDAwXSxcbls1NS43NjY5NzcxMjYwNzYsMzcuNjE0Mjg5NjQ3NjQxLDEwMDBdLFxuWzU1Ljk1MDM3MzcxNjMyMSwzNy4yOTgzODQ1Mjk4MjQsNTBdLFxuWzU1LjY1MzYwNDExNzI2NSwzNy41MDE0OTc0MzY1NzksNjAwXSxcbls1NS45NzkyNzY2NzI0MjIsMzcuMTgwNzQ2OTQ2NDg5LDEyMDBdLFxuWzU1Ljc1OTY3MjgyMDU2NiwzNy41NzQ4MTI4NTU5MDgsMTAwMF0sXG5bNTUuNzYwMTY3MTc3MzIxLDM3LjYxNTM5MjU3NTcwNywxMDAwXSxcbls1NS44MDkyMjQ4NTg1MywzNy41Mjg1OTQ0MTgzODUsNjAwXSxcbls1NS43NzY2MTQ0NDk2NTEsMzcuNjk5Nzc1MDc4MzE5LDEwMDBdLFxuWzU1LjgxNTQ0NTg3MjgzMiwzNy43MzgwNzAwNzI2OTEsMTAwMF0sXG5bNTUuNzI3MTc0ODc4Mjg4LDM3Ljc3MjA4MjA2MTUzNCwxMDAwXSxcbls1NS43OTg3NjU3OTY1MzUsMzcuNTM3NzQ5MDM5NjIzLDM5MF0sXG5bNTUuNzU5ODg1OTA4ODg2LDM3LjY0NzA3NDkzOTY1OCwzOTBdLFxuWzU1Ljc0NTA3NjY2NTg3NCwzNy42MjczNzU5OTEzMywzNTBdLFxuWzU1LjgzNzM2OTAxMTgyMywzNy42MzYzODk4MDk2MTYsMzkwXSxcbls1NS43Njk0ODc5MDYwOTksMzcuNjMyNTIwNjAyMDA4LDM5MF0sXG5bNTUuODYwNDU2MjUxNDMzLDM3LjYwMjk2MTE4NzkwNCwzOTBdLFxuWzU1LjcyNjY3MDQyMjQwNzMsMzcuNTg2NTQyNzM0ODk5OSwxMDAwXSxcbls1NS43NTMxMDg4NjA3NTEsMzcuNTg4OTc3NTE0OTY5LDU2MF0sXG5bNTUuNzUxNDk2OTE2NDU2LDM3LjU5OTEwMjcxMTM1NSw1NjBdLFxuWzU1Ljc1MjUzMTkzODIwNywzNy42MzI3OTMwMjEyMzEsNTMwXSxcbls1NS43NzQ0NDM2NTQyMDQsMzcuNTg0MDkyNzk3NTQ2LDUzMF0sXG5bNTUuNjQwMTQzMjIxOTMsMzcuNjIxOTE2MzAwMTExLDUzMF0sXG5bNTUuNjkxNzU3NTg0NjU3LDM3LjUyOTczNTk1ODM3Myw1MzBdLFxuWzU1LjY3NjQwNjUwNzA2OSwzNy41MDYzMDQ0OTUyODEsNTMwXSxcbls1NS43NzE0Njc3MDQ2NjQsMzcuNTgyMzQyMDM5NTM5LDUzMF0sXG5bNTUuODYzMTEwNDAwOTQ4LDM3LjYwMTk2NDUzMTEzNyw1MzBdLFxuWzU1LjgxOTYwNzI5Nzc3NSwzNy41NzMyODQxNTk3NjcsNTYwXSxcbls1NS42MjMxNTAwMTQ2MjgsMzcuNjAzODcyNzcwNzgyLDU2MF0sXG5bNTUuNzc4NTk3MzEzNTQ5LDM3LjYwMDczMTU3NTM0Niw1NjBdLFxuWzU1Ljg2NTI1NjUzMDQ2OSwzNy42NjE0NzUyODAxMiw1MzBdLFxuWzU1Ljc1NzIxODc3OTE5NCwzNy42NTkxMzM2MTkxNDgsNTYwXSxcbls1NS43Mjc2MjM1NDczMzEsMzcuNDQ5NDQ1Mjk4NzQ0LDUzMF0sXG5bNTUuNzg5NTY2MTkzMjMyLDM3Ljc1MjUyMDk4MTM1NSw1NjBdLFxuWzU1Ljc1NTgxNjY4MzE2MywzNy42Mjc4NjcyNDc0MjEsNTMwXSxcbls1NS42MjE4MjUyMzE5MzEsMzcuNzEzNzU1OTMwNzYxLDUzMF0sXG5bNTUuNzQ0NTY0NjA2MzQxLDM3LjU2NTUzNTE1MzE0NCw1MzBdLFxuWzU1LjcyNjU1MzE4MzgxMSwzNy41ODIyNDEyNjg3NzUsNTMwXSxcbls1NS43MzAxNjc1NzI1MTgsMzcuNjQzOTQ5MzM1OTEyLDUzMF0sXG5bNTUuNzU0NjgxNzc2MzY3LDM3LjYyMTUyOTE4NjA4NSw1MzBdLFxuWzU1Ljc2MTI2NjczMzI1OCwzNy42MTY1Mzk5OTc0MzgsNTMwXSxcbls1NS43NDE1ODA2OTI5NjUsMzcuNTM3NjU5ODg4MzUyLDUzMF0sXG5bNTUuNzgwMTM1NDM1NjQ3LDM3LjU3ODkzNDI1MTc1NSw1MzBdLFxuWzU1LjgwMDY3OTg1OTYzOSwzNy41MzQxNDcxOTM4NTYsNTYwXSxcbls1NS44MjMyODQzMzMzNTYsMzcuNDk3NzAzMTE1MjY3LDUzMF0sXG5bNTUuNjg3NTM0NjAwODc4LDM3LjU0MzQ0MDMzMzEzMiw1NjBdLFxuWzU1Ljc1NTc3NDg0MTIwNCwzNy42MTQ2Mzg5Mzg4NzIsNTMwXSxcbls1NS42ODcwOTcyNjQ4ODMsMzcuNTQ1MjIwNTc1MzIxLDU2MF0sXG5bNTUuNzU3MTAxODc2NjE2LDM3LjYzNDkwMTQzMjMxLDUzMF0sXG5bNTUuNjQwOTI5MzA5Njk4LDM3LjUzMDgwNTcyMzk2OSw1MzBdLFxuWzU1LjgwNjgwMDE2NTA0NywzNy42Mzc1OTI5MTQ4NzMsNTMwXSxcbls1NS44MDg5NTk4ODk3NjIsMzcuNjM3OTczMzYwMzQyLDUzMF0sXG5bNTUuNjU3MzE0MjU5ODIxLDM3Ljg0NTIzNDA1NzE5OSw1MzBdLFxuWzU1LjcxODQ3MjY5ODAyNSwzNy40MjA0NTk0ODI0OTIsNTYwXSxcbls1NS45MTMxNjQ3ODgwNjUsMzcuNTcxMjQ4OTEyMDI2LDU2MF0sXG5bNTUuNjEyMDgxNzA4NTY4LDM3LjczMjgzMzIyNTE1NCw1NjBdLFxuWzU1LjczOTE3OTgxNzQ2MiwzNy41OTYzMjEzNTE0NDEsNTYwXSxcbls1NS43MzAzNjAzNDQzOTQsMzcuNjM0Njg2MDA1ODEzLDU2MF0sXG5bNTUuNzU5MTAzOTM3NywzNy42MjQ4MTE5ODU3Niw4MDBdLFxuWzU1Ljc2NTIxMjk2MzU2NiwzNy42MDI2NDgxMDk4NjQsNjAwXSxcbls1NS43MzQxNjY2MzIzMDUsMzcuNjE4ODc4NjQzNjIsNTMwXSxcbls1NS42ODQxNzc2MTI3OTMsMzcuNTY4ODc5NTE1NjgsNTYwXSxcbls1NS42NTU4NTM4MTIxMDgsMzcuNTQxODkxMDE2OTUyLDU2MF0sXG5bNTUuNzQxOTM5Njg1OTc5LDM3LjY1MzM5NzE3NzQxOSw1NjBdLFxuWzU1Ljc2Njk5NTY2NTk3NSwzNy4zODAyNDExMDM1NTcsNTYwXSxcbls1NS43NjcwMTE3NTcyNzIsMzcuNTkzOTk3NTcxMzExLDUzMF0sXG5bNTUuNzkwODc4MzU2Njg2LDM3LjY4MDMwOTQzNzU0LDUzMF0sXG5bNTUuNzcxNTk3OTk1NTE3LDM3LjYzMjc0OTkzMTY2Nyw1NjBdLFxuWzU1LjgwNTc1NDMzNDYzLDM3LjM5Njg3MDY5MTcxMiw1NjBdLFxuWzU1Ljc5NTA2NzgxMzAxOCwzNy42OTkxOTE2OTI0NDgsNTYwXSxcbls1NS43NDI0MDY3MjQyNjQsMzcuNjMxNDQ5MTQ5MjkyLDUzMF0sXG5bNTUuNzY0NjM5MDcyODkxLDM3LjYwNjQ0NDU2OTEwOSw1NjBdLFxuWzU1Ljc2NjY1MDE2NjI5LDM3LjYwMjY5ODA3NDk5LDU2MF0sXG5bNTUuNzYzODM4MzA2ODg2LDM3LjYwNjE1OTMwMjc0NCw1NjBdLFxuWzU1Ljc3MTg4NDQyNjA2OSwzNy41OTM0ODI3NTIyODIsNTYwXSxcbls1NS43NzU4MTUyMzMxNDMsMzcuNTg1NTk5NDcyNDU1LDU2MF0sXG5bNTUuNzQwNzAzMDAxMDQ4LDM3LjYyMjg4MjY5MDg5OCw1MzBdLFxuWzU1Ljc3NTk3NTQ1NzYwMSwzNy41OTU4MTIwNzM0MTcsNTYwXSxcbls1NS43NzIxNTQ0NDY5MDcsMzcuNjIwNjMxNjM2MTM3LDU2MF0sXG5bNTUuNzE5MDUzNDY1NzAyLDM3LjYwODYxNTA4MTk4Miw1NjBdLFxuWzU1LjgwMzM0Mjg3NjA5OSwzNy42MTgxOTY3ODMyMjYsNTYwXSxcbls1NS43ODE5MzIyNjEzNDIsMzcuNzIzNjU2NzM2MDAyLDU2MF0sXG5bNTUuODA5NDc4NDc4MDAyLDM3LjQ2NDQ4NzkyMTkzOCw1MzBdLFxuWzU1LjczNDY3Nzc5OTE5NywzNy42MTIyOTQzMzk0OTcsNTYwXSxcbls1NS43OTQzNDIzNDk4ODMsMzcuOTI2MjQ3OTk2NDM5LDUzMF0sXG5bNTUuNzA3NjM2ODI1NTc4LDM3LjY1NzI3MTk3NzY4Nyw1MzBdLFxuWzU1Ljc1MjAzNTA5MjI3MSwzNy41OTExNzA4NTIxNDEsNTYwXSxcbls1NS44MDA1MTk4NjEwNSwzNy41MzMzMzczMzAyMTIsNTYwXSxcbls1NS43NDU5OTA5Nzk4NjgsMzcuNTQ5MzkwMzA4NzEzLDUzMF0sXG5bNTUuNzU3MTQ4OTA0NTA5LDM3LjYyMTg2OTM5NTk5Nyw1NjBdLFxuWzU1Ljc4MDM5NDUzMTU2NSwzNy42MDAzNDk4NTA5NzMsNTYwXSxcbls1NS43NjM1MjcwNTc1MzEsMzcuNjM1NDcwMTg0NzE0LDU2MF0sXG5bNTUuNjE4NjIzOTM0NzA5LDM3LjUwNzIzNDI3MTk5OCw1NjBdLFxuWzU1Ljg0NTU0NzQ1MTExOCwzNy42NjEwNjcxMDgwNSw1NjBdLFxuWzU1LjcyNjg3MzEzOTUyNSwzNy41Nzk2NzAxMTU0Miw5MDBdLFxuWzU1LjY3Mjk1MjI2ODExNCwzNy42NjQ1OTAxMjE5NzEsMTAwMF0sXG5bNTUuODE3MjUxNTUzODI5LDM3LjM4NzcyNDg5NjcwNiwzMDBdLFxuWzU1LjcyNDIzMDgzOTQ3LDM3LjU2NDEzODcwNjExNSw2MDBdLFxuWzU1Ljc0MjE3OTI2NjY5MywzNy41MDE2MjkyMDc3MTMsMTYyMF0sXG5bNTUuNzI3ODMzMTQzNjM2LDM3LjU4Mzk1ODE0MjY4MiwxNjIwXSxcbls1NS43NTYyNTI1MzM1NTYsMzcuNjA0ODE5OTI0NDIsMTYyMF0sXG5bNTUuNzYxMzY5MzQ5NjcxLDM3LjYyMzg3OTExMjgzMSwxNjIwXSxcbls1NS43NjYxNDI2Nzg1MDYsMzcuNjIxNDk4ODgwMDU4LDE2MjBdLFxuWzU1LjczNDc1MTg5NjM2MSwzNy42NDIyODAwNjQxOSwxNjIwXSxcbls1NS43Nzc3NjUyMDA4MzYsMzcuNTg2OTE1MTk2ODQ4LDE2MjBdLFxuWzU1LjY0MjQ2OTM1NzU1NSwzNy42NjU3NDU3NjMzNzEsMjAwXSxcbls1NS45NzE4ODE3MDkxOTMsMzcuMTQ5ODUxMzk0NzAyLDUwMF0sXG5bNTUuNzQ0NzM0ODM4NjY3LDM3LjYyNDkyNTczNTU1Myw1MDBdLFxuWzU1LjgyOTI0MTEwMDAwMiwzNy42NDQxMDAxNDIxNTYsMjM1MF0sXG5bNTUuNjg1NDQ0OTY3MjE3LDM3LjU3MDIxMzYxNTMwMSw3ODBdLFxuWzU1Ljc4NzM3OTQ3OTg4NCwzNy42Nzc2OTUwMDEwMSw3ODBdLFxuWzU1Ljc1ODc1NDg0NDE1NSwzNy42NDU5NDM1NzIwOTksMTAwMF0sXG5bNTUuNjYzNzQxMTA2MzI2LDM3LjYwNTU3MTI5MjMzMyw1NTBdLFxuWzU1Ljc2MDYwMjUwODM5NCwzNy43NzI2OTk1NjI4OSw2MDBdLFxuWzU1LjcwMTM2ODE2NzcyOSwzNy43NTE1OTEwMDcyNTYsNTAwXSxcbls1NS43NDk0NDM4MTkzODMsMzcuNjQ1MTE2NzU0OTMzLDEwMDBdLFxuWzU1Ljc3MjcxNDE0NjE2OSwzNy42MzAxMzI1MzE0MTUsMTUwMF0sXG5bNTUuODI4NjI5MTAyOTU4LDM3LjYxNDQzNjIxODM1MSwxMDAwXSxcbls1NS44MzY4MTgzNjAxNzQsMzcuMzU0MzkyMDgxMzA2LDE1MDBdLFxuWzU1Ljc4MDUxODMwNzkxOCwzNy42MDExNTAzMzgyODYsNzAwXSxcbls1NS43OTM0ODM3NDE2MjEsMzcuNzg3OTQ2MTQyNDI3LDEwMDBdLFxuWzU1LjgwMDA2NjgzMjI4MSwzNy45Njg5NDcyNTEyNDIsMTQwMF0sXG5bNTUuNjYwMzQ2NTMyODIxLDM3Ljc0NDA5MTg2Nzg3OCw2MDBdLFxuWzU1Ljg2MDA2MjE2MjYwNCwzNy40NDgzMDQwNzA0MTMsODAwXSxcbls1NS43MzU0Njk0Mzk3MzIsMzcuNDg1OTU4ODI2MTU1LDE1MDBdLFxuWzU1Ljk4ODA3ODAwMzU5OCwzNy4yMzM3MDY1MzAxNzYsMTAwMF0sXG5bNTUuODg5NjczODEyMzUxLDM3LjM5MTQ2ODQ2NDMyLDUwMF0sXG5bNTUuNTkxMzkyMjk4MTUyLDM4LjIwMjExODUxMjAzNyw2MDBdLFxuWzU1LjYxMDMyNzI3MjM0MSwzOC4wNzYwNDM3NTI3MjMsNjAwXSxcbls1NS43MDIwMTI2NDYwNTQsMzcuNzQ3NDE2MTkyMzkxLDUwMF0sXG5bNTUuOTE0NjU1MjI5NDMxLDM3Ljc0MzI3MTk1MDg5Miw1MDBdLFxuWzU1LjkzOTc0NTE2NDg0NSwzNy41MDQ5OTAxNDc1NTksODAwXSxcbls1NS43ODg4Mzk2MzE3OTUsMzcuNjEwNDAzMDUzODM4LDcwMF0sXG5bNTUuNzcyOTQxMjQzNjk1LDM3LjU0MjU4NDkwODIyNCw4MDBdLFxuWzU1Ljc5Njc1MTY3Mjc4OCwzNy45ODI4MDY4Mjk4OTcsMTAwMF0sXG5bNTUuNzkzNDczMzYzNDgsMzcuNDk0MzQxMDMyNzE2LDYwMF0sXG5bNTUuNzg0MDg0MDkwNDMzLDM3LjY5MDczNDQzNDQ3NSwxNTAwXSxcbls1NS42NzQ5Nzc0OTc2ODgsMzcuNzM5ODYyMTMwNTA1LDgwMF0sXG5bNTUuNzY1NDMwODQ4NTM5LDM3LjYzODk1MjIyMjY1Nyw2MDBdLFxuWzU1Ljc1MzgxMjY4NzcxMiwzNy42MzYwNzA3MDU2MSw1MDBdLFxuWzU1Ljk4MzYxMDQ2OTc2LDM3LjE1NTkxNDQ4MzA2OCw1MDBdLFxuWzU1LjY5NTgyMjAwNTAxMiwzNy40MjQ5NTY4NTMwOTYsMTUwXSxcbls1NS43MjYyMzQyOTQ4NjUsMzcuNDUwNzk2NzA5Nzk4LDEwMDBdLFxuWzU1LjcxNzcxMDk0MDg4MSwzNy43OTI0ODA3NDg5OSwxMDAwXSxcbls1NS43NDEzNDAzMzM0MTcsMzcuNTk1MzQ4NzEzOTY5LDgwMF0sXG5bNTUuNzI1NDQzNTM1NzY4LDM3LjQwMzc0MzQzNzc3OSw5MDBdLFxuWzU1Ljc2MDkyOTk4MTY3LDM3LjYyMjg4MTQ0OTU3OSwxMDAwXSxcbls1NS43OTE2MDA1MjA5MzEsMzcuODIwMjk3NTMxMjA3LDQwMF0sXG5bNTUuNzYxNDEzMzQ4OTI2LDM3LjYyMzc4NzY3NTI1OCw3NTBdLFxuWzU1LjYzNjUyNjE4NTE0LDM3LjY1NDU5MTk0ODcwNywxMDAwXSxcbls1NS45ODE5NjI4OTY2NiwzNy4yNTQxMTY4MDM2NzksMTAwMF0sXG5bNTUuNjg5MDk3NjEwODg3LDM3LjU0NDY3ODkwNzU5NiwxMDAwXSxcbls1NS44OTY4Nzk0ODU4NzUsMzcuMzk2Nzk0Nzc5MzI1LDEyNTBdLFxuWzU1LjY4MTExODY4ODQ3OCwzNy4yNzAxMTA2NjI4NSwyMDBdLFxuWzU1LjU5NTc0OTU0NjgzNSwzNy42MDI3MzIyMDU3OTIsMTIwMF0sXG5bNTUuNzY4MzgyMzQ4Mjc3LDM3LjYyNDkwMjgxNzgxLDgwMF0sXG5bNTUuNzI3ODgxNTU5ODY0LDM3LjYxMjE3NjAzMzA0OSwxMDAwXSxcbls1NS43Mzc0NDY3MjY1ODksMzcuNTg0NTgxNjQ0NjI1LDEwMDBdLFxuWzU1Ljc0MDQwODgyNzczNSwzNy42NTQxOTYwMDk0NTIsMTUwMF0sXG5bNTUuNzQ2MjY4ODcyNDIxLDM3LjYwMzM5NzE5MzA4MSw1MDBdLFxuWzU1Ljc2ODgzOTcyNDc5NiwzNy42Njg3NzI2MDU0MTcsNjAwXSxcbls1NS43NzQyNjYyMzE2MzcsMzcuNTg0Mzk0MTc0Mjg3LDUwMF0sXG5bNTUuODcxNjAxMzU3NzgsMzcuNjg0MzE2MDA3NDA4LDc1MF0sXG5bNTUuNzQ2ODQxOTY2MDMxLDM3LjU4MTgyNTkxMzE1NywxMzAwXSxcbls1NS43NjQ5NTA5MTgyODgsMzcuNTcyMzM0MTUyMjUxLDMwMF0sXG5bNTUuNzU2Mzc1NDc2MDg4LDM3LjYxMjcxODYwODI3NCw0MDBdLFxuWzU1Ljc1NzIyMzg5ODcyMywzNy42MjgzMDUyMzMxNjgsMTAwMF0sXG5bNTUuODA4ODAzMDU1NTkzLDM3LjQ5MzUyMDEwMDEyMSw4MDBdLFxuWzU1Ljc5NDE0NjM5NTQ1LDM3Ljk2OTYyNTI0NTg4NSw2MDBdLFxuWzU1Ljk5NDc4NjU0MjE3MywzNy4yMDc1MjQzMTM4ODEsNjAwXSxcbls1NS43MzkxMjA5NzU5NjgsMzcuNzY4MzE5Mzc1MTA3LDcwMF0sXG5bNTUuNzY5NzExODM3MzQ4LDM3LjY3ODc3NTA4MTkxNCw4NTBdLFxuWzU1Ljc1ODEzNTY2NDIxLDM3Ljc5NTEwMzAxNDk2Niw4MDBdLFxuWzU1LjY5MDQxMjU0MjQzOCwzNy41NTA2OTgzMjkwMDcsMjAwMF0sXG5bNTUuNjEyMTE3Mjc4NDI4LDM3LjU1NTAxNDcxOTI0OCw0MDBdLFxuWzU1Ljc2MjYwMzM2MDc1OSwzNy41NjY3NDY5MDQwNTYsMjUwMF0sXG5bNTUuNjg2MzAwNDY0Mjc5LDM3LjYyMTYzODg2MjI2NCwxODBdLFxuWzU1Ljc2MTQxMzM0ODkyNiwzNy42MjM3ODc2NzUyNTgsMTIwMF0sXG5bNTUuNzU3Mjc5MTg4NzY3LDM3LjcxMjc4NjMzOTc0OSw1MDBdLFxuWzU1LjgxNzA3MTYxMzM0NSwzNy44MjYxODgzMTU0ODEsMTAwMF0sXG5bNTUuNzM0Mzk4MDE3MTQsMzcuODUzMDE1NjAzNjgsNzAwXSxcbls1NS42Nzg2MjUxNjk4NTYsMzcuNjUwODg0MTc5MTEyLDEwMDBdLFxuWzU1Ljc3OTQ4NjYyODM3OCwzNy41NzcyNjQxODMxMTEsMTAwMF0sXG5bNTUuOTIwNjk1NTEwMTMzLDM3LjgzMjIzNTgyODYyMSw4MDBdLFxuWzU1Ljg4MzQ4MDc3NjkwNCwzNy41Mzg5Mzc0MjY0NSwxMDAwXSxcbls1NS43MTEwMjMzNDY4MzIsMzcuNjE4NTMxMTQ0MDcxLDQwMF0sXG5bNTUuNzMyMjAzODUyMzg4LDM3LjY2NTEwMDUzMTc2MiwzNTBdLFxuWzU1Ljg1NTM5OTMyODIxLDM3LjQ4NDgxNDc0MzkxNCw5MDBdLFxuWzU1Ljc1NjYxNzU1OTQ5MywzNy42MjMwOTcwMTAxMTMsMzUwXSxcbls1NS44OTc3MjczNDIyNDcsMzcuNTkzMjYzNzE4NzIxLDEwMDBdLFxuWzU1LjcwNjUwODg5MTQ5MiwzNy44MTg4NjI2ODc2MjEsMTI1MF0sXG5bNTUuOTEzMTY0Nzg4MDY1LDM3LjU3MTI0ODkxMjAyNiwzNDBdLFxuWzU1LjcyMDkyMDkyMDc0LDM3LjY5NzE2Mjg1MjQ0NywzMDBdLFxuWzU1LjgyMDgwNjE5NjQ5MywzNy42NDQzMjk4NDkxLDYwMF0sXG5bNTUuNTk2NDU2MzM2OTA2LDM3Ljg4NjAwMjQ2Mjk5OSwyMDBdLFxuWzU1Ljc0NzQwODQwNzM4OSwzNy43NzU5MTk4MzgwNCwxMDAwXSxcbls1NS43ODE3NDY5NTU3MzMsMzcuNTkyNDAwNDc1MTU4LDE1MDBdLFxuWzU1Ljc2MTY5OTczODYxNSwzNy43NTE4NDE2NjY0NDYsMjUwXSxcbls1NS43MDk4OTI4NTM0MDUsMzcuNjYyNTc3NzEyMzM3LDEyMDBdLFxuWzU1LjY4OTU5NzAwMDEsMzcuNTMyOTY5MDEwNjc0LDEwMDBdLFxuWzU1LjgwOTE2MzMyOTUzLDM3LjMzODgyMzk4NzU4MiwyMDAwXSxcbls1NS43NTQ3NTc5MDUzMSwzNy41NTc1MjA4MjAyMDcsNjAwXSxcbls1NS42NTg3ODg2ODE3MjcsMzcuNzU3ODMwNjY1OTM2LDkwMF0sXG5bNTUuNzk1NzExODgzNjUsMzcuNjc0NjE2NjgxNzMzLDUwMF0sXG5bNTUuNjQ1NzUyMTA5NjkxLDM3LjY2MDExNjgyMzQzMywxMDMwXSxcbls1NS43OTM1ODcyNzI0MjgsMzcuNTE4MDY0NzExMTAxLDExMDBdLFxuWzU1Ljg2NjAwNjE4OTAxNywzNy42Nzc3OTgxMDU0MDksMzgwXSxcbls1NS43OTkxNDI4MTA2MjksMzcuOTY4MjcwNTY4MDYyLDMwMF0sXG5bNTUuOTk5NDExODc5OTkzLDM3LjIxODE4MzMwMzEsMTAwMF0sXG5bNTUuNjAzODU3MzUxMjg0LDM3LjUyMzE2NTM5MDU5OCwxMDAwXSxcbls1NS41NDc2NDIyMDE1OTUsMzcuNjgzOTMzMDA5MzUyLDcwMF0sXG5bNTUuNzg1NTAzNjMyNzk2LDM3LjU5NjA1MjIxNjM4Niw3MDBdLFxuWzU1LjY4MzEyNjM2OTEwMywzNy42MjUxMTQ1Njk4ODYsMjEwXSxcbls1NS43Njc0NjM4OTY2MDgsMzcuNjUyMTgxNzgxNTIsMTAwMF0sXG5bNTUuOTc2NTQ5NTE3ODgyLDM3LjE0NzE4NDAzNjM2Nyw1MDBdLFxuWzU1Ljc5NjAzNDI5MTQ0OSwzNy41NjA0NzgzNjU2ODIsMTAwMF0sXG5bNTUuNzUwOTA1MTEyOTYzLDM3LjU5NTUwODE2OTc4LDE3NTBdLFxuWzU1Ljc2MjU4ODIxNzQ3OCwzNy42MjcxNzA4OTYwMiw1MDBdLFxuWzU1Ljc2MDM2MDE0NTEyOCwzNy41Nzc5NTg5Nzg2ODYsOTAwXSxcbls1NS43NTcwNzUwOTQ4MDEsMzcuNTk5MjIzNTI3NzY2LDcwMF0sXG5bNTUuNjQ2NDk3NTI0MTU0LDM3LjUxNjExNDg4OTU4MSwxMDAwXSxcbls1NS44NTk4MzMxOTM4MjMsMzcuNjE5NzEyMDYxOTE2LDY1MF0sXG5bNTUuODU3ODc3MjE5OTMyLDM3LjUwNzM1OTE4NzA5LDcwMF0sXG5bNTUuNzQxNzc0NTUwOTU4LDM3LjY1NjA2NzM4ODY5NywxMDAwXSxcbls1NS44NDEyNDEwNTA1MTgsMzcuMTgxNjg4ODcwNjA2LDgwMF0sXG5bNTUuNzA5ODkyODUzNDA1LDM3LjY2MjU3NzcxMjMzNywxMDAwXSxcbls1NS44OTc2MDI2NzEzNTksMzcuNjA0NTQ1NTE2NTMzLDEwMDBdLFxuWzU1Ljc2Njc5NDQ4MTI3LDM3LjYyMDkxNjg3MDY2OSwxMDAwXSxcbls1NS44MzY4ODA2ODA2MjYsMzcuNjQ1Njg1ODA5Mjk3LDMwMF0sXG5bNTUuNzcwMzMyMTc3MTI5LDM3LjY0NjY2NTEyNzEyMiwxNTAwXSxcbls1NS43MzcwMzE1ODk0NjUsMzcuNjU5MzcxMTQxMzcyLDcwMF0sXG5bNTUuODA0NTEwODc1MTMsMzcuNTY0NjQ1MzMwMDQsNDAwXSxcbls1NS43NjkzMDA0MDMyMDcsMzcuNjIwNzU4NDEyODE3LDUwMF0sXG5bNTUuNzg5NTkzODMyMTk5LDM3LjYxMzkxMjQzNDk2NCw2MDBdLFxuWzU1Ljc2OTIxMjQ0MzcyOSwzNy42NzA1ODgyOTMwMDYsMTUwMF0sXG5bNTUuNzM4ODU5MjcyOTY4LDM3LjU0NDE4MTU5NzYxNCw3NTBdLFxuWzU1Ljc4NzU1NzI0ODY5NSwzNy42MzU4OTg0MjkyMDcsMTAwMF0sXG5bNTUuNzU4MTQ0NDc1MjkxLDM3LjYwNjQ4ODQ3MDM1Myw1MDBdLFxuWzU1Ljc2ODc5MzY4MTkxMiwzNy42NzkyMTQ1MzMyNTEsNDgwXSxcbls1NS42MjUzMjE3MTE3NDUsMzcuNzE0Mzg5MDYyOTY5LDQ4MF0sXG5bNTUuNzM0OTExOTgyOTI2LDM3LjU5MzQwMTkzMDQ4Nyw5MDBdLFxuWzU1Ljc2MDI0NjczNzAyOSwzNy42MTQ4Mjc4MTMzMDMsODUwXSxcbls1NS43NDQ1NjQ2MDYzNDEsMzcuNTY1NTM1MTUzMTQ0LDkwMF0sXG5bNTUuNzUxOTk4NzUxNTUyLDM3LjU4MjYzNDY2NTg4Miw4NTBdLFxuWzU1Ljc0NDQ1NTE2MzcwOCwzNy42MjY5NDA2MDI4ODQsOTAwXSxcbls1NS43NDE5Mzk2ODU5NzksMzcuNjUzMzk3MTc3NDE5LDkwMF0sXG5bNTUuNzEzMTQ0MjUyMzgyLDM3Ljg5MTU0OTI4MzQxOSw1MDBdLFxuWzU1LjczOTYxNDA4MDMyNywzNy42MTM0NTgxMjY2Miw4MDBdLFxuWzU1Ljc3NDM2MjYyMDcxLDM3LjYxODU3NDAxNTM5Nyw2MDBdLFxuWzU1LjczNTY1OTM4NjgwMywzNy42NTc1NTIwMTYzNjEsNzAwXSxcbls1NS43NzY1NTAzMTQ3NDIsMzcuNjA3NzI1NjUwMTYsMTIwMF0sXG5bNTUuODEwNDIxNzI1OTIxLDM3LjYzNjY0ODU3MzkxNywyMDAwXSxcbls1NS43ODEwOTY0NTQ5NywzNy41OTkwMzMwODg0NTYsODUwXSxcbls1NS43Nzc3NjUyMDA4MzYsMzcuNTg2OTE1MTk2ODQ4LDg1MF0sXG5bNTUuODIyMjc1NTAyMzA5LDM3LjQ5OTA5MjI4NjgxMiw5MDBdLFxuWzU1Ljc0NjQzODg5NDQ0NywzNy41MzY0MTI4MDU1MzgsODUwXSxcbls1NS41ODg1NDE4MTU5NjgsMzcuNjYzMDQ1NjA2ODkyLDQ4MF0sXG5bNTUuNTUxMDA3ODkyMjk3LDM3LjU1NDE4MTU1MzIzOSw0NDBdLFxuWzU1Ljc2NDkyMzkxNDk2OSwzNy40MTEwNzQ4MTcyODIsNDgwXSxcbls1NS42OTA3NjM5NzU5NjYsMzcuODU4Nzg0OTcyNzQ4LDQ4MF0sXG5bNTUuODQ2MTEwMDU4ODQ1LDM3LjM2MzQ1MTI4MjI2OCw0NDBdLFxuWzU1LjY3ODM5MDUzOTEyOSwzNy43MDM1MzA0NzYwNzIsNDgwXSxcbls1NS43Njk1OTIxNjkxNywzNy41Njk1Mjg4MTYzMjgsNDQwXSxcbls1NS43MDI0NjEwMzc3MzUsMzcuNTA1MjI4Mjk5MTgyLDQ4MF0sXG5bNTUuNzk0MTc5MTYwNTE4LDM3LjU3NjU1NTMwODk1OSw0ODBdLFxuWzU1LjY2MDI2OTc2MzMwMiwzNy40MDc2NTUyMTk2MzgsNDgwXSxcbls1NS43NzA4MDkzNDY4MTYsMzcuNjc4Njk0Mjc2NDU2LDcwMF0sXG5bNTUuNzUzNDgxNjM4OTE5LDM3LjcxNjU2NTU4NjQxLDgyMF0sXG5bNTUuNjg5NDAxOTMxMDMyLDM3LjYwMTcwODk4NDAyMyw4MjBdLFxuWzU1LjgwOTEyMzk2MjY3NywzNy42MzYzMzQxMDk4NjMsODAwXSxcbls1NS42ODcxODA4ODI3NTUsMzcuNTczNjY3NTY3NDkxLDgwMF0sXG5bNTUuOTA5Mzk1MTI5NjgsMzcuNTQwNDAwNTcxMTk4LDgwMF0sXG5bNTUuNzU2MjQ3MDg5NzMzLDM3LjU5ODU5NzM4MzExOSw4MDBdLFxuWzU1Ljc1MTQ5NjkxNjQ1NiwzNy41OTkxMDI3MTEzNTUsODAwXSxcbls1NS43NDI2Mzc5MjAyMDEsMzcuNDk5NjI1MTMxNDQ5LDgyMF0sXG5bNTUuNzUyMTk2NDU3NDU2LDM3LjU5NDA3OTE4MjYwMyw4MDBdLFxuWzU1Ljc2MTE4OTYyMTQzOCwzNy41Nzk0Nzc2MDI0NzQsODAwXSxcbls1NS43NjAxMzc1ODM4NzgsMzcuNTg0NTM4OTIwNzE4LDgyMF0sXG5bNTUuNzcyODAwNzcxOTM4LDM3LjY3ODg5NTIwNzE1Myw4MDBdLFxuWzU1Ljc3MTMxMjg3NzQwNCwzNy42ODIxOTY0Nzk1NzQsODIwXSxcbls1NS43ODAxMzU0MzU2NDcsMzcuNTc4OTM0MjUxNzU1LDgwMF0sXG5bNTUuNjQzNzU0NzIxMDA1LDM3LjUyNjM5NTY2OTQ0OCw4MDBdLFxuWzU1LjY1ODI1MDYxMzcyNywzNy43NDI0MDk4NTYzODMsODAwXSxcbls1NS42NTk0OTE1Mjc4OTIsMzcuNzQ5NjA0NDE5MDQxLDgyMF0sXG5bNTUuNjUzNjIyNzE4Mjk5LDM3LjYyMDcwNjQ1NjkyMiw4MDBdLFxuWzU1LjgwMzM0Mjg3NjA5OSwzNy42MTgxOTY3ODMyMjYsODIwXSxcbls1NS44MjMyODQzMzMzNTYsMzcuNDk3NzAzMTE1MjY3LDgyMF0sXG5bNTUuNzI3NzgxMjI2ODc2LDM3LjYyMzU2MDg1OTE2Myw4MDBdLFxuWzU1LjYwOTc3MjIzOTY0NiwzNy43MjAwNTI5NDc0ODIsODAwXSxcbls1NS42MjE4MjUyMzE5MzEsMzcuNzEzNzU1OTMwNzYxLDgyMF0sXG5bNTUuNzQ0NTY0NjA2MzQxLDM3LjU2NTUzNTE1MzE0NCw4MDBdLFxuWzU1LjYzNzc1MTgyMTM2LDM3LjY1NjI0Njg1NDYyOCw4MDBdLFxuWzU1Ljc1NzQ4ODYzODgzOSwzNy42MzU0MjY4NzQzMDgsODIwXSxcbls1NS43NTc0NTA3NzIyMTQsMzcuNjMxODQzNDExMjczLDgyMF0sXG5bNTUuNzYxMzcxMzkwOTAxLDM3LjU3MDI4NTAwMTAzNiw4MjBdLFxuWzU1Ljc1MzkyNjY0MzY5NiwzNy42Mzc2MDAxODI4NTIsODIwXSxcbls1NS43Nzc2NDk0MTUzMTEsMzcuNjYxMDU0Mjg0MzM0LDgwMF0sXG5bNTUuNzYyNTAyNzAxMzcsMzcuNTY3NjAxMzc1MTU1LDgwMF0sXG5bNTUuNzg1NTM5Nzk5NjQ1LDM3LjY2NTM1MDgwMTQyMyw4MjBdLFxuWzU1Ljc2ODIyNjg3NTkzNywzNy42NDQ3NzE4MzYxNjIsODIwXSxcbls1NS43NjY5NTI4OTE1ODIsMzcuNjUyOTQ1MTU0NjksODAwXSxcbls1NS43NDI0OTk3MTU1NDgsMzcuNjAxODUzNDU4NjU4LDgyMF0sXG5bNTUuNzU5Njc2MzYwODMyLDM3LjY1NzA3MTIxMjI1OSw4MDBdLFxuWzU1Ljc1OTU0MjI3NTcyNiwzNy42NTgzMTI1MDk4NDMsODIwXSxcbls1NS43NjE2NzQwOTczMTksMzcuNjYyNzUwNTk0MzE0LDgyMF0sXG5bNTUuNzU3MjE4Nzc5MTk0LDM3LjY1OTEzMzYxOTE0OCw4MDBdLFxuWzU1Ljc0ODU1OTA0MzI5MiwzNy41NTgyODc2MjUxMzksODIwXSxcbls1NS43NDE3NzQ1NTA5NTgsMzcuNjU2MDY3Mzg4Njk3LDgyMF0sXG5bNTUuNzY1NDIxNTQwNTI1LDM3LjU5MDk1MjcwNTc1Niw4MjBdLFxuWzU1LjY0OTk0Nzk0MDIzLDM3Ljc0NTk0NjcxNDUyMyw4MjBdLFxuWzU1Ljc0MzE0NjQxODczNCwzNy40Mjc4OTczNzYxNzMsODAwXSxcbls1NS43NjcwNzUzNjM1ODksMzcuODI5NDc3NTY0NTA1LDgyMF0sXG5bNTUuNzg0NDk2ODM5NTQ0LDM3LjU5NzUwMzA4OTQyMyw4MjBdLFxuWzU1Ljc5OTc0NzUyMDIwMywzNy40ODI5ODM0MDUxODMsODIwXSxcbls1NS43OTQ2MzM3OTc1NjMsMzcuNDk0NDgyMjQ5NTM3LDgwMF0sXG5bNTUuNzMxMTI1ODEyNjk4LDM3LjYzNDEzNzg5NjM5Nyw4MjBdLFxuWzU1LjY3MTQ1MjAzNjgyOSwzNy41NTQwNTI5NjU0MjEsODAwXSxcbls1NS43MzAwMjYzODg5OTUsMzcuNjMwNjcxMjQ5MTc2LDgwMF0sXG5bNTUuNzMxNjI5ODQ3MDMsMzcuNjQwODk0NjM3MTY1LDgyMF0sXG5bNTUuNzMyNDUyOTI0MDQ2LDM3LjY0NTA1Mzg2MTYxNiw4MDBdLFxuWzU1LjczOTM1Njg0MjU4OSwzNy41ODc2MTc0Nzc0MTMsODIwXSxcbls1NS43MzU4MjMyNDQ0NjgsMzcuNTIwMzg3NDEzNzE3LDgwMF0sXG5bNTUuNzUwMDg5NzI4Nzc5LDM3Ljc4OTAwMzY2OTQyMSw4MjBdLFxuWzU1Ljg2MzcxMjY4MzYwMSwzNy41NDU4MTUwMTE4MjcsODAwXSxcbls1NS43Nzk4NjQ5MTU4MzcsMzcuNjMyNTg1MTM4MzUxLDgyMF0sXG5bNTUuNjc4NDc3Nzc0MzAyLDM3LjU2NDMzMDE0ODcxLDgyMF0sXG5bNTUuODA0MjMwMDgwNDc0LDM3LjU4MzQ3ODQ2NTIxOCw4MDBdLFxuWzU1Ljg0NTU0NzQ1MTExOCwzNy42NjEwNjcxMDgwNSw4MjBdLFxuWzU1Ljc4OTk3Njk2MjAxNiwzNy42Nzg1ODQ2Nzg3MjMsODIwXSxcbls1NS43ODIzODE1NzcxNDksMzcuNzA4NTgzMDU0OTg3LDgyMF0sXG5bNTUuODA1NTQwMTE2NTczLDM3LjQxNDQ3NjU5ODM2Nyw4MDBdLFxuWzU1Ljc2ODM3MDYzNDM5NiwzNy42MzI0NTQ2NzAzOTksODIwXSxcbls1NS43NzMxMDA4NzE1NzMsMzcuNjMyODI0NTM2MTU2LDgwMF0sXG5bNTUuODQ1NDk5NjAwNDc4LDM3LjQzODY1NDMyMTAyNSw4MDBdLFxuWzU1LjczODgxNzkxODM1LDM3LjY1MjcyOTYxMjQ5OSw4MjBdLFxuWzU1Ljc0MTI2MjA1MzY4OCwzNy42NTI2Njk0NDk3MzcsODIwXSxcbls1NS43NDY4Mzc2MzIyNTgsMzcuNjU0ODAwMjY4OTk3LDgwMF0sXG5bNTUuNzI4MjQzNDY5OTcxLDM3LjU2NjU4ODM0MDU0MSw0NDBdLFxuWzU1Ljc3MjE5MTMwMTY1MSwzNy41NzE0MTYwMTU1ODQsNDQwXSxcbls1NS43ODMwNTA5NjUyMDYsMzcuNzAyNjYxMjk2MDU5LDQ0MF0sXG5bNTUuNzY2NzY3NzczMjQ2LDM3LjU5Mjc1NzM4OTIzLDQ0MF0sXG5bNTUuNzYwNTQ5OTQ3OTk4LDM3LjYxNDYxMzg2NDA5OSw4MDBdLFxuWzU1Ljc0MTAyNTk2ODg1OSwzNy42Mjc4Nzg1MTQ3NjQsODIwXSxcbls1NS43MDkxMjg2NTE1ODksMzcuNjIwNzY4MDMxOTA3LDgwMF0sXG5bNTUuNjkzMzY4MDA0NTQ2LDM3LjUzNDA2ODQ0NDk0Nyw4MDBdLFxuWzU1LjY4OTA5NzYxMDg4NywzNy41NDQ2Nzg5MDc1OTYsODIwXSxcbls1NS42OTE5NDkwNDUzMTYsMzcuNTM3MzMxMjkwMDQsODIwXSxcbls1NS43NDMxMjE4NjU1NDIsMzcuNTA3MDYzMTA2MTk5LDgyMF0sXG5bNTUuNzY1MDgzOTA1MDEyLDM3LjYxMTMwNDMxMDYzNSw4MjBdLFxuWzU1Ljc2NTc0ODA3NTkxMSwzNy42MDg2OTc4ODUyNjgsODAwXSxcbls1NS43NjMzOTQ0MDM2NjMsMzcuNjM1OTc4NjI4OTI4LDgyMF0sXG5bNTUuNzU5ODA2NzE4OTc0LDM3LjY0NzU4NzM0MjA4Myw4MDBdLFxuWzU1Ljc0MDQ1Mzk0MzE2MiwzNi44NTc5MzkyMTczNzYsODAwXSxcbls1NS43MTkwNTM0NjU3MDIsMzcuNjA4NjE1MDgxOTgyLDgyMF0sXG5bNTUuNzIzNDcyNjE0Njk5LDM3LjYxMDE1MDEzODE5Myw4MjBdLFxuWzU1LjYzOTEwNDIzMTc1NywzNy4zNTI5MTUxMzE5OTgsODIwXSxcbls1NS42NTg4ODU3NjY3MjIsMzcuNDMwMTMxNTM0NzU2LDgyMF0sXG5bNTUuNjc3OTM4NTIxNDQ1LDM3LjQ2NzEzNzk5MjgwMSw4MjBdLFxuWzU1LjY2NDEyNTE1ODE1LDM3LjQ4MjIwODE4NjE5MSw4MDBdLFxuWzU1LjY0Njk5NjcyMzc5NCwzNy40MTE3MTYzMDQ4ODMsODAwXSxcbls1NS42ODc0MzgwMjMyOTIsMzcuNjA0Mzc2MTM1MTY0LDgyMF0sXG5bNTUuNzY2OTk1NjY1OTc1LDM3LjM4MDI0MTEwMzU1Nyw4MDBdLFxuWzU1Ljc5MzYzMjExMzMxOCwzNy45Mzc5NjA1MTcyMDIsODIwXSxcbls1NS45NjM0NjAxMzEyMDQsMzcuNDA1Mzg0NzM5MjY1LDgwMF0sXG5bNTUuOTgwNjgyMTAxMDIxLDM3LjQxMDM4MjA4NDQ1OSw4MjBdLFxuWzU1LjkzNzY3NDQ2MTM3MiwzNy41MTgzNDc0NjY4NTgsODAwXSxcbls1NS42MDgxNDkzNzY1NDEsMzguMDkxMjAxMjA0NTc1LDgwMF0sXG5bNTUuOTgyNzY1ODQ1MDU4LDM3LjE3NDYzMjY3MTA4MSw2MDBdLFxuWzU1Ljg5MTYzMDg2MDk2NywzNy43NDg4NjUyNjM4ODksODAwXSxcbls1NS44OTE3NjQzMzA1NDQsMzcuNzI3MjMwODQwNzg2LDgwMF0sXG5bNTUuOTEwOTQ1NjU0MzM2LDM3LjM5NjEwNzc4MTU2LDgyMF0sXG5bNTUuNjU3MzE0MjU5ODIxLDM3Ljg0NTIzNDA1NzE5OSw4MDBdLFxuWzU1LjYwNDY1OTcxNzc1NiwzNy40ODg3ODkzMDQ0MjIsODIwXSxcbls1NS42MDM3MjcxNDE0MzcsMzcuMjkwNDIxMzQyNzU2LDgyMF0sXG5bNTUuNjY4OTQ1MTk5NDQ0LDM3LjQ1MzU5MjQwNjI2NSw4MjBdLFxuWzU1Ljg4NjkzOTc2NTYzNiwzNy42NTY0OTQ4MzA1MTQsNjMwXSxcbls1NS44NzA2NDI0MTg5MzUsMzcuNDYxMjU4MDg1NjQzLDgyMF0sXG5bNTUuNjI0NDc0Mzc2MTEsMzcuNzA5MjAyNTkxNzc5LDgyMF0sXG5bNTUuNjg5ODk0MTk1MTgyLDM3Ljg1MjE2OTcwMTQyMiw4MjBdLFxuWzU1LjU4NjI0ODg0MzA3MSwzNy42NzU3MDYwNzI1OTYsMTUwMF0sXG5bNTUuNzg5OTc2OTYyMDE2LDM3LjY3ODU4NDY3ODcyMywxMDAwXSxcbls1NS44MjMxNTM5ODQwMzksMzcuNTI2OTU3MTQyNDUxLDk1MF0sXG5bNTUuODQ2MTcyMTkxODkxLDM3LjU3NTk3NzQzNDA2MSw5NTBdLFxuWzU1Ljc3MjE1NDQ0NjkwNywzNy42MjA2MzE2MzYxMzcsMjAwMF0sXG5bNTUuNjM4MzY1MzIxNTMxLDM3LjY2NjY0MTUxNDMwNCw1NDBdLFxuWzU1LjY3NjM1MjM2Mzg0NywzNy41MTk2OTAzOTg3MjcsNTcwXSxcbls1NS43Nzk3MDg0MDM0MjEsMzcuNTc5OTgzNjc3NjI3LDU3MF0sXG5bNTUuNzIxNjk0NzI0NTMsMzcuNjIyODQ3ODcxNDg5LDU0MF0sXG5bNTUuODEzNDU5ODYyMjg0LDM3LjY1MDEwNjk5OTM0Myw1NzBdLFxuWzU1LjYyNjQwNzA1NTI0OSwzNy43NDM3MDM0NjI1NjMsNTcwXSxcbls1NS42MzI1Mzg1NzI4ODgsMzcuNTE5NzIwMTk2NDQyLDU3MF0sXG5bNTUuNzY1MjIwMTg0OTUzLDM3LjczMTkwMzE4ODk2Myw0MDBdLFxuWzU1Ljc1NzAxODU3MzA1LDM3Ljc3NTA2NTU1MTAzLDY2MF0sXG5bNTUuNjA0NzYzNjkyMTc4LDM3LjcxMjQ1NDI3ODE3NSw1NDBdLFxuWzU1LjcyMzk1ODc1NjI0OSwzNy42NzI3MDg3NjY5OTcsNjYwXSxcbls1NS42OTg2NDQ1ODE2MDMsMzcuODQzMTQ0MTE0NDMyLDY2MF0sXG5bNTUuODE2OTMzMzA3OTgzLDM3LjQwMzM0NDU4ODc0OSw2NjBdLFxuWzU1LjYzNzc1MTgyMTM2LDM3LjY1NjI0Njg1NDYyOCw2NjBdLFxuWzU1LjczNTU4OTMxNzk5NSwzNy40NzU2MTEwODk5MjIsNjYwXSxcbls1NS44OTI3MzIxNjIyNzYsMzcuNjE2NjYwNjM3MDk4LDY2MF0sXG5bNTUuNjEyMzA3ODM1MDQsMzcuNTM1OTc2NjU1NzUxLDU0MF0sXG5bNTUuODQ0NTk1Nzg2ODgxLDM3LjUwMTA3OTA2NjY5Miw2NjBdLFxuWzU1LjY1NzYwNDYzMDQxLDM3Ljc0MDM0NTYxMDc0Myw2NjBdLFxuWzU1Ljc5MjQ4OTEzMTk2OCwzNy41NjU2MDA4MjIyNTgsNjYwXSxcbls1NS44NDc2Nzk3OTkyMTEsMzcuMzQ5NjMxMTAxNzQ2LDY2MF0sXG5bNTUuNjU0OTIzNzMzMjcyLDM3LjU0NDQxMzcwODg1Miw2NjBdLFxuWzU1Ljc5ODUwNTMyNDkzLDM3Ljc3NTQ4ODAyNDE3LDU0MF0sXG5bNTUuNjc1MzI3MTM5MzUyLDM3LjQ3MDYyNzI4Njc2Myw2NjBdLFxuWzU1LjU0OTE0MjM1ODUxNCwzNy41NTQzNDkyNzM3NSw2NjBdLFxuWzU1Ljg1MjI5OTg5MDYxNywzNy42NDU3ODg1MzMwNyw2NjBdLFxuWzU1LjYwNzQ0MDUxNDE1OCwzNy41ODk5MjU2OTkwMzIsNTQwXSxcbls1NS43NzE2NDAwNTE2MjUsMzcuNjIwMzQxMzMxMDk4LDYzMF0sXG5bNTUuODcyMTczMjQyODQxLDM3LjU1ODc5MTQ2MjI4NSw1NTBdLFxuWzU1Ljc0NzU1NDY1NjY0MywzNy41ODE5MDI1MDAwMjMsODAwXSxcbls1NS44Njk0NTM5MTkyODEsMzcuNjc1ODg5NzMyMjMzLDQwMF0sXG5bNTUuODAzMzQyODc2MDk5LDM3LjYxODE5Njc4MzIyNiwzNTBdLFxuWzU1LjYzOTUzMTc1NjAxOCwzNy44NDMzNzg1ODA2MzIsMTAwMF0sXG5bNTUuNjczNDU0MDk5MTU5LDM3LjY2NDc0MjA2MTI1MywzNTBdLFxuWzU1LjQyMDI2Nzk2MzEwNywzNy41NDc4NDc5MjM0NTMsMzUwXSxcbls1NS43ODI0ODc4Mzc2NzMsMzcuNTA5OTY3MzM3NDY1LDYwMF0sXG5bNTUuNzIyODc0Nzc1NTU1LDM3LjY4ODk4NjAxMTgzNyw1MDBdLFxuWzU1LjczMDU1ODk4NDAyNiwzNy42NDQ4NDIzNzMyNCw2MDBdLFxuWzU1Ljc4MjM5MzA0MzM4NCwzNy41OTc5MjYyOTcwNywxMDAwXSxcbls1NS44Mjg4Mjc3MDc2NjEsMzcuNjUwNzQ5NzY2MzIyLDEwMDBdLFxuWzU1Ljc3MTQ3NTUwOTk1NSwzNy42NTUxNjUxMDY3MDQsMTAwMF0sXG5bNTUuNzU3MzE3NTc4MzUsMzcuNjAyNjc1ODA0MjgyLDEwMDBdLFxuWzU1Ljg4NjA0ODg1Nzk2MywzNy42MTE0ODAzMjMzNDgsMTUwMF0sXG5bNTUuODk2NTY0OTAyMjg2LDM3LjQ1MDMxMTY3ODk4NCw1MDBdLFxuWzU1LjcyNjc3NTI2OTExMywzNy42Njk2MTQ4NDg5NTksMjcwXSxcbls1NS44NTA2OTMyNDY5MzgsMzcuNDMwNzgxNzc3MTcxLDEwMDBdLFxuWzU1LjY5NjQ2MjY3OTE1NywzNy43NDM5ODM1MjA5NjMsMTUwMF0sXG5bNTUuNzM3MjY2OTE4MDc3LDM3LjYxNzMyMjI3NTgzMSwxMzUwXSxcbls1NS43OTIwMTAxMjE5ODgsMzcuNzQ5MTY4NTM2OCw4MDBdLFxuWzU1Ljc3NjM5NTM4MDU2MywzNy42NDM3MDA3MzYyOTMsMTUwMF0sXG5bNTUuODc2OTc0MzY0NDYxLDM3LjY4Mzk1NDk0MzM0OCwxMDAwXSxcbls1NS43NjM5Mzg3NTU2NjMsMzcuNjA5MzM4NjYzNTA0LDEyNTBdLFxuWzU1LjY0Mzc1NDcyMTAwNSwzNy41MjYzOTU2Njk0NDgsMTgwMF0sXG5bNTUuOTYwMTQ1NDIxMjEsMzguMDUwMzYzNDQ0NDM1LDcwMF0sXG5bNTUuNjU1ODUzODEyMTA4LDM3LjU0MTg5MTAxNjk1MiwzMDBdLFxuWzU1Ljc0MzEyODAwMjA1NiwzNy42Mjk3MzU0NzE4NTYsODUwXSxcbls1NS43NTQxMTI3MTE4NTIsMzcuNzk4NjgzMDA4NzMxLDEwMDBdLFxuWzU1Ljc1NjY3OTQ5NzYxNSwzNy42MDU3ODAyNjI0ODUsMTI1MF0sXG5bNTUuNzMzOTkwMTE1OTMxLDM3LjcxMDczNTEwNDAzNCwxMDAwXSxcbls1NS43NjI0ODg3ODcxLDM3LjY1NjU3OTI4MTMzOSwxMDAwXSxcbls1NS43NDU3NTIyOTM3NTEsMzcuNjY3ODUwMTI1MDQ4LDE1MDBdLFxuWzU1LjY3NTMyNzEzOTM1MiwzNy40NzA2MjcyODY3NjMsNzUwXSxcbls1NS44MTYxODMzMDcwNCwzNy42Mzk2OTM1MjI1MTcsMTAwMF0sXG5bNTUuNjM2MTkyNTcxMjA3LDM3Ljc2MzQ5MTUwNzcwNiw4MDBdLFxuWzU1Ljc1NzE2MzMxNDIwMSwzNy42MzM5NjA4MjY3MDUsMTAwMF0sXG5bNTUuNzU2Nzg5MTQ5MzQyLDM3LjYyMTEzNzI0OTgwOCwxMDAwXSxcbls1NS44MDY0NjM5ODg4NzMsMzcuNzE4MDEwNDMyNDU3LDEwMDBdLFxuWzU1Ljc4MDc4NDQ3MDY3LDM3LjU1ODUxNjUxNDg0MiwxMDAwXSxcbls1NS43NDU2NDcxODY3MTIsMzcuNTU3NjUxNTAwNjU3LDEwMDBdLFxuWzU1Ljc0NTAzNTI0MjM3MywzNy41OTgxNDI2MzMzNDIsMTUwMF0sXG5bNTUuNzM4Mjk0MDM1MTI1LDM3Ljc0NjE5NDU5MzczOSwyMDBdLFxuWzU1Ljc2NTgzODEyOTEzMywzNy41OTEzNTExNDgzOTEsNTAwXSxcbls1NS43NDUxNzY0OTM5MTIsMzcuODEwNTAwMDczNjc0LDY1MF0sXG5bNTUuODAwOTQ3MTYzMTM5LDM3LjU4NjU2NTM5ODA0OSw1MDBdLFxuWzU1Ljc2Mjg0NjYwOTEwNCwzNy42MDY2MzcxMjgyMDQsODUwXSxcbls1NS43ODEyOTQ2NjU3NTcsMzcuNjAxMzkwNDA5NDc5LDEzMDBdLFxuWzU1Ljc3MTA2NTI4NzgxNiwzNy42MjI0NDgwNTkwOSwxMDAwXSxcbls1NS43Nzc2NDk0MTUzMTEsMzcuNjYxMDU0Mjg0MzM0LDYwMF0sXG5bNTUuNzg5OTk5NDI5NjAyLDM3LjY4MDgyNzQ3NzkzNywzNjBdLFxuWzU1Ljc0MTMzMTI1MzE3NywzNy42NTg2NjUyNDE2ODksMzYwXSxcbls1NS43NDM3NTk3NTM2NjgsMzcuNTY4OTMwNDgxMTU2LDM2MF0sXG5bNTUuODA4MTc5Mjg0OTg3LDM3LjYzODM3MzA0ODc3OSwzNjBdLFxuWzU1LjcyOTIxODgzOTI0NSwzNy42MjI1NjU0NzY5NTcsMzYwXSxcbls1NS43NzE3ODk3ODYzNzksMzcuNjc5MDU4NzcyNDE4LDM2MF0sXG5bNTUuNzYwNzQ4Nzg3NzgxLDM3LjYzMjE1NjE2MTc2OCwzNjBdLFxuWzU1Ljc2Mjg0NjYwOTEwNCwzNy42MDY2MzcxMjgyMDQsMzYwXSxcbls1NS43Mjc1NzMzODE3MjEsMzcuNTgxMjI3NTI0OTE2LDM2MF0sXG5bNTUuNjQwNjg3MDExMTQxLDM3LjYwMzMzMDE5OTQzOCw0MDBdLFxuWzU1Ljc2MDgzODM1NzY5NiwzNy41ODA2MzczOTA5MTEsMzYwXSxcbls1NS42MTg2MjM5MzQ3MDksMzcuNTA3MjM0MjcxOTk4LDQwMF0sXG5bNTUuODA5MDkyNTc3MzQsMzcuNzk4NDA1MzA0NTQxLDM2MF0sXG5bNTUuNTcwMzA0ODI2NzUsMzcuNTc1NzI0MDI4MjU3LDM2MF0sXG5bNTUuODAxOTQxNjk2OTQxLDM3LjUzMTk0NTk0MTYsMzYwXSxcbls1NS43NjA5Mjk5ODE2NywzNy42MjI4ODE0NDk1NzksMzYwXSxcbls1NS42NzgzMjMwMTM5OTgsMzcuNTYxMTIwODQ0MjE1LDQwMF0sXG5bNTUuODg4ODExNjQ0NTQ3LDM3LjQzMzUzMDUxNjY5NCwzNjBdLFxuWzU1Ljc4Mzk3MzAyODE5OCwzNy41OTczNTMxOTExOTgsMzYwXSxcbls1NS43NTA3MDczMzc0NDYsMzguMDM0NzI2NDAwNzE3LDU1MF0sXG5bNTUuNzQzMzM3MjQ3NjgsMzcuNjUyNTIyMjY5MTI4LDEwMjBdLFxuWzU1Ljc1NTUyOTAyNDYxOCwzNy42MDA1NzQwMDI1NzIsMTAwMF0sXG5bNTUuNzM1MDM4MzMzNjE2LDM3LjU4NTU2NzcyNDkxMywxMDIwXSxcbls1NS42NTE0NzI2OTUxMTMsMzcuNDgzMDUzNTg0OTgxLDgwMF0sXG5bNTUuODkyNzg0ODQ5NDU1LDM3LjU3MzA4MTg4NTIyLDUwMF0sXG5bNTUuNjIyNjA2NzU1NDM0LDM3LjYwNTk0MDQ0MjY4OCwxMDAwXSxcbls1NS43NDg0Nzc2MzQ2NTcsMzcuNjA4NTcxMzI2MjY0LDEwMDBdLFxuWzU1LjkxMDUyMzQ5NDcyOSwzNy43MjY3MjYxMjc2MjUsMjAwXSxcbls1NS43NDMzOTI3ODE5MTYsMzcuNTgyMTQwNjAxNzY1LDEwMDBdLFxuWzU1Ljc1MjE1ODI0ODY4MSwzNy44MTg1ODI4MjgzNDgsMTAwMF0sXG5bNTUuNjg4NzY3OTc4NDg2LDM3LjUyODk5NDUyMzY2OCwxMDAwXSxcbls1NS44MDk0Nzg0NzgwMDIsMzcuNDY0NDg3OTIxOTM4LDEwMDBdLFxuWzU1LjY2Njg3ODk4ODgyNSwzNy41NTE5NDA1NDYxMzksMTAwMF0sXG5bNTUuODU5OTkwODQ0ODM2LDM3LjY1OTE3NjkxNjY4Niw4NzBdLFxuWzU1LjU1MTY3MTc0NDI4NCwzNy43MDI1NDE1Nzk1NDQsODcwXSxcbls1NS42ODY2NDQwMjcwMTMsMzcuMzA1OTI2NzIzMjksODMwXSxcbls1NS44ODgwNDc3Njc1MjQsMzcuNTA5NzkxMzg1MzAxLDgwMF0sXG5bNTUuNzcwODUyMzM5OTU5LDM3LjY0Njk2Mjc0MjExNywxMjUwXSxcbls1NS41Njg0Nzk2NTQ2MzQsMzcuNTg1MzkyOTY4MjksODcwXSxcbls1NS44Mzk4NDUzNTMwNywzNy40ODg4MjY2ODcxOTIsODcwXSxcbls1NS43NTM5NjgxNTAxMTgsMzcuNjM2ODE1Nzk0NjYzLDg3MF0sXG5bNTUuNjc1OTM0MzkxNzg0LDM3LjY3ODcyNTM4NjMyMSw4NzBdLFxuWzU1Ljc0MTMzMTI1MzE3NywzNy42NTg2NjUyNDE2ODksODcwXSxcbls1NS43NDEwNDA1NzY0NzUsMzcuNjI3Mzg0MTk1NTQ0LDg3MF0sXG5bNTUuNjQwMTM2ODk4OTM5LDM3LjYwNjUzNDI3MDU5NSw4NzBdLFxuWzU1Ljk3Nzk4NjY4MTA5OCwzNy4xNTUwMzIxNDQ2NTgsODcwXSxcbls1NS45MTc2MTI5MDM4MTQsMzcuODY3MDg5NDI5NDMyLDg3MF0sXG5bNTUuNzQ3NTEzMjgxMDM0LDM3Ljg2MTkyMDg5MzY4OCw4NzBdLFxuWzU1Ljg3ODc2MTgzNjk4NywzNy40MjM0MTU5MjU3MDEsODcwXSxcbls1NS43NjQyOTEzNDUzMjQsMzcuNTkwNDk5MDQ4NTY1LDExMDBdLFxuWzU1LjY2MDMxMDczODU4LDM3LjUxNTM3ODYzMTIyMSw4MDBdLFxuWzU1Ljc1NTc3NDg0MTIwNCwzNy42MTQ2Mzg5Mzg4NzIsMzUwXSxcbls1NS42NTE3MzY4NTU3MjksMzcuNjE4ODQ3MDA3OTI5LDU1MF0sXG5bNTUuNjM5NDIxNzQxMzA3LDM3LjYwNzI4NDYzMTA4NCw1MDBdLFxuWzU1Ljc4MjE3NDQ3MjE0NywzNy42MzM1MTU1NDA4OTUsMTUwMF0sXG5bNTUuODIwMzU2Nzg4OTE4LDM3LjY2NDk5MDgyMjQ3Nyw2NTBdLFxuWzU1LjgxNzE1MzIyMzA5MywzNy41MDAzMTczNTU0NzYsMTUwMF0sXG5bNTUuNzc0NzIwODc3LDM3LjY0MjMzOTk3Mjc5OSwxMDAwXSxcbls1NS42ODE3NTgwMjY2MDQsMzcuMjU2Mjc4MTM5MzE3LDkwMF0sXG5bNTUuNjMzNzk5NjE5NDI4LDM3LjUxODI1ODAwMDU3NCw2MDAwXSxcbls1NS44MTU3NDU5ODI2NDgsMzcuNjE5NTUwMzM2MDM4LDIwMDBdLFxuWzU1Ljc3Njg4MjE2MTU1NSwzNy42ODY4MTc0ODA2MDUsMTYyMF0sXG5bNTUuNzM3Nzk2MjM2NzQ5LDM3LjYwMjAyMzA2NDUwNiwxNjIwXSxcbls1NS41NjU1MzgxNzYwNjgsMzcuNTYyMzc4MTQyMzAzLDMwMF0sXG5bNTUuODAzMTgwMjk5OTkyLDM3LjU2MTU3MTE0Mjk3LDYwMF0sXG5bNTUuNzUyMDMyMTA4MjY5LDM3LjU5MjYxOTk4MDczNCwxNTAwXSxcbls1NS44NTc4NjgwMDMzNTEsMzcuNjcxODE2MjExMDk3LDEwMDBdLFxuWzU1LjY3NzkzODUyMTQ0NSwzNy40NjcxMzc5OTI4MDEsMzgwXSxcbls1NS45ODI3NjU4NDUwNTgsMzcuMTc0NjMyNjcxMDgxLDM4MF0sXG5bNTUuNzEyMzI2MTc1NDkxLDM3LjYyNjM2NTYzMjk4MiwxMDcwXSxcbls1NS44NjcxMTQwODk5NzMsMzcuNDkzODczMTkwNTYyLDUwMF0sXG5bNTUuNjY5NDg1ODIwMTM4LDM3LjQ1MTY0NTM1ODk4OCw1ODBdLFxuWzU1Ljc0NDM0NDY0MzY3MywzNy42MjczNTk3OTQ5ODksMTAwMF0sXG5bNTUuNzYyNzQ4NjY4MzAzOSwzNy42MzUyNTE1NjY5OTYzLDk1MF0sXG5bNTUuODkxMTAzNzg4ODcsMzcuNjA4ODc2MjQ2NzE3LDUwMF0sXG5bNTUuNzk0NjQ1NDM4NTUyLDM3LjQ5MDUyMTIwOTM5MiwxMjAwXSxcbls1NS43NjMwMTAzOTcxOTMsMzcuNjM1Njg3Njk2NTQxLDUzMF0sXG5bNTUuNjAwMjc2NDcwNTg3LDM3LjYwODQ5MDk4NTEyMSw1MDBdLFxuWzU1LjgyMzI4NDMzMzM1NiwzNy40OTc3MDMxMTUyNjcsNDQwXSxcbls1NS43NjAyNDY3Mzg0NTY0LDM3LjYxNDgyNzg5MzU3MjQsNDgwXSxcbls1NS43NjM1ODE2MDQ2MTcsMzcuNjE1OTgyNDE5NDI3LDE1MDBdLFxuWzU1Ljg2Mjk2OTE2MjM3OCwzNy41ODU0MzY1NjEzMTUsMjUwXSxcbls1NS43NDMxMjE4NjU1NDIsMzcuNTA3MDYzMTA2MTk5LDI2MF0sXG5bNTUuNjM4NDEzMDMzNDQ5LDM3LjM1MTY0ODkyNTI4NiwyODBdLFxuWzU1LjY1MzYyMjcxODI5OSwzNy42MjA3MDY0NTY5MjIsMjgwXSxcbls1NS42MzMxNTgxODAzNDgsMzcuNjI0Mjg3NDUwNTkxLDI4MF0sXG5bNTUuODI0OTAzMTIzNTQ4LDM3LjQzNjQwNzI1MjE0MywyODBdLFxuWzU1LjcyNzA2MTkxMzczNSwzNy42Nzk3NDEzMjU4MTcsMjgwXSxcbls1NS45ODI3NjU4NDUwNTgsMzcuMTc0NjMyNjcxMDgxLDI4MF0sXG5bNTUuNzU4OTU0MzY2MTMzLDM3LjYxMDY5MTIzMTAyLDI1MF0sXG5bNTUuODc0NjMzOTQxOTgyLDM3LjU4Nzg1MDI1Mjg3OSwzMDBdLFxuWzU1Ljg2MzcxMjY4MzYwMSwzNy41NDU4MTUwMTE4MjcsMjUwXSxcbls1NS45MDE4MzExODU0ODcsMzcuNTQ4NDQxNTkwNjE3LDI2MF0sXG5bNTUuNjIxODI1MjMxOTMxLDM3LjcxMzc1NTkzMDc2MSwyODBdLFxuWzU1LjkwOTM5NTEyOTY4LDM3LjU0MDQwMDU3MTE5OCwyODBdLFxuWzU1LjYxMjIyMzUzODEyOCwzNy43MTgyNzI1MzU1NTIsMjgwXSxcbls1NS42MjI2MDY3NTU0MzQsMzcuNjA1OTQwNDQyNjg4LDI4MF0sXG5bNTUuNjY3NTMwMTY2NzAxLDM3LjY1ODUxNDI5Nzc4MywyODBdLFxuWzU1Ljg2NTU5MjQ5NTE3NiwzNy40NjIyMjQ1MTk3OSwyODBdLFxuWzU1LjY2MjE0NTAyMDkyMywzNy41MDg3MTEyNjI1MzYsMjUwXSxcbls1NS43MDAxNDM1NTEwNzQsMzcuODU1NjMxMjU3NTM2LDI1MF0sXG5bNTUuNzcyMzE0NzQxNDg5LDM3LjYzMTU5NTY2ODEyNiwyODBdLFxuWzU1Ljc1NTc3NDg0MTIwNCwzNy42MTQ2Mzg5Mzg4NzIsMjgwXSxcbls1NS42Nzc5Mzg1MjE0NDUsMzcuNDY3MTM3OTkyODAxLDI4MF0sXG5bNTUuNzE2NjcyOTMwNTM3LDM3LjQwOTI1NTI3OTAyNCwyODBdLFxuWzU1Ljc2Njk5NTY2NTk3NSwzNy4zODAyNDExMDM1NTcsMjgwXSxcbls1NS42MTIwODE3MDg1NjgsMzcuNzMyODMzMjI1MTU0LDI4MF0sXG5bNTUuNzc1MDYzNzc5MzI0LDM3LjQ3OTA2MDc1NzI4MSwyNTBdLFxuWzU1LjY5NTg2MTI2OTA5LDM3LjY2NDkyNTc2MjU0LDI4MF0sXG5bNTUuNzYyMzQwNDA5NzU1LDM3LjU2MzQwNTcyNzM4MywyODBdLFxuWzU1LjgyNzUzNTYwMTY1MiwzNy42NDI0Mjc5NjMwMDUsMjgwXSxcbls1NS43ODEwNjA4MzM1NTcsMzcuNjMyNDEwNDI1NTEzLDI1MF0sXG5bNTUuODA5MTIzOTYyNjc3LDM3LjYzNjMzNDEwOTg2MywyODBdLFxuWzU1LjY5MTc1NzU4NDY1NywzNy41Mjk3MzU5NTgzNzMsMjUwXSxcbls1NS43MTgwMDY3Mzk5MjUsMzcuNzg1MjQyNTc4MjUsMjgwXSxcbls1NS43Mjk3NTU4MjM3NzgsMzcuNzMyMTIwMjM5NzI2LDI4MF0sXG5bNTUuNzUwMjEzMzgyMjU2LDM3LjgxNzI5MTE2NzU1MywyODBdLFxuWzU1LjY4NzQzODAyMzI5MiwzNy42MDQzNzYxMzUxNjQsMjgwXSxcbls1NS43NDc0Mzk3NzE0MTQsMzcuNTg0MzA2OTc3NDAyLDI4MF0sXG5bNTUuNzY0NzAwMTEzMjA5LDM3LjYwMzA1MDkwMjAxMSwyODBdLFxuWzU1Ljc0NTg4NjQwMDgyMiwzNy41NjYyNTgyMDc4MywyNjBdLFxuWzU1Ljc4MTk2MTc5Mjg5NywzNy43MDY1OTU5MDg1ODcsMjgwXSxcbls1NS43MjkwMTUyNTEyNTcsMzcuNjIzNzg3ODMzNTQ5LDI4MF0sXG5bNTUuNzA5MTI4NjUxNTg5LDM3LjYyMDc2ODAzMTkwNywyODBdLFxuWzU1Ljc0MTA1NjE3NDY1LDM3LjYyNTI0MjkxNTQwOCwyODBdLFxuWzU1LjcwODcxNDExNDgxMiwzNy42MjIwODEwNzIyNjEsMjUwXSxcbls1NS42ODk0MDE5MzEwMzIsMzcuNjAxNzA4OTg0MDIzLDI4MF0sXG5bNTUuNjU4Nzg4NjgxNzI3LDM3Ljc1NzgzMDY2NTkzNiwyODBdLFxuWzU1LjgwNDM5NzkyNTYwOCwzNy41ODIxMzU4MDA3NjksMjUwXSxcbls1NS42ODMxMzg4MDM4MDUsMzcuNTQ5MjM2MzMyOTE4LDI4MF0sXG5bNTUuNTQ4NTcyNDU3MTY2LDM3LjU0MjQxOTQzODI0MiwyODBdLFxuWzU1LjU2NjQwODI2MTQ3OSwzNy41NzMwMjEyNzY4MTEsMjgwXSxcbls1NS44NjMxMTA0MDA5NDgsMzcuNjAxOTY0NTMxMTM3LDI4MF0sXG5bNTUuNzA2MDQ5Nzc4NjM5LDM3Ljc2Njk3ODYyMTI3NywyODBdLFxuWzU1LjY2NTc2MDc2MzI0LDM3LjYyODc2MTYwODA4NCwyNTBdLFxuWzU1LjYxMTA4MzYzMDA3LDM3LjYwNjg2MTgwNjE3MiwyODBdLFxuWzU1Ljg5ODIyOTkxOTY1OCwzNy41ODg0NjQ4NTA4NzgsMjgwXSxcbls1NS42NDk3MDQ1MTgzNzIsMzcuNzQ0NjIxMTY3Mjg5LDI4MF0sXG5bNTUuODA4ODU3MDA5NzgxLDM3LjQ2MjkxNTIxODc4NSwyODBdLFxuWzU1Ljc1Nzc2NTQxNDQ5MywzNy42MzQ0MTU2Mjg0OTMsMjgwXSxcbls1NS43MDM3NTIwOTQzMTEsMzcuNDU4OTgyNzI5NTEzLDI4MF0sXG5bNTUuODA3MTM1NzgzNjMsMzcuNDA5MzI5NDg2ODE3LDI4MF0sXG5bNTUuNjQwOTI5MzA5Njk4LDM3LjUzMDgwNTcyMzk2OSwyNTBdLFxuWzU1LjgyMjkxMDg0OTA5NCwzNy41ODg1NjA4MTExNzYsMjgwXSxcbls1NS44NDc2ODU0OTQ0MzgsMzcuMzYxMTE2MDI3MzI5LDI4MF0sXG5bNTUuNzY1MTkyNzIyMzQ0LDM3LjYzODkzNjc2OTk0NCwyODBdLFxuWzU1Ljc4MDAwMzQzMjI4NSwzNy42MDExNzcyMzY2MzYsMjUwXSxcbls1NS42NTk0OTE1Mjc4OTIsMzcuNzQ5NjA0NDE5MDQxLDI4MF0sXG5bNTUuNjY1MDc0NDY3MjQxLDM3LjQ4MTU4Nzk1NjA5LDI4MF0sXG5bNTUuNjY0MTkyODM5MTg2LDM3LjQ4MTEwNTA4MDU4MywyODBdLFxuWzU1Ljg4MTAxNzcxNTAxNSwzNy40NTA0NTg4MDI1ODMsMjgwXSxcbls1NS44ODU1NzQ3NzM0NDksMzcuNjAyMTk5NjQxNzQ0LDI4MF0sXG5bNTUuNjU1ODUzODEyMTA4LDM3LjU0MTg5MTAxNjk1MiwyODBdLFxuWzU1LjY2OTc4OTI2NDU0NywzNy41NTIyMDAwMzYxOTUsMjgwXSxcbls1NS43ODg3NDQxNzA5NywzNy42ODEzODk5ODcyMDksMjgwXSxcbls1NS44MjI1MDY3NDIwNTUsMzcuODIzMjM1NzY4NjQzLDI4MF0sXG5bNTUuODAzMzQyODc2MDk5LDM3LjYxODE5Njc4MzIyNiwyODBdLFxuWzU1Ljg4ODA4NDMzMTQxLDM3LjY2MjUzNzQ3ODI3NiwyODBdLFxuWzU1Ljc3NTgyOTI2ODMxLDM3LjgzNTcwODI4MjUyMiwyODBdLFxuWzU1LjgwOTQ3ODQ3ODAwMiwzNy40NjQ0ODc5MjE5MzgsMjgwXSxcbls1NS43NDE3NzQ1NTA5NTgsMzcuNjU2MDY3Mzg4Njk3LDI4MF0sXG5bNTUuODAyNzU3NTE2NjYzLDM3Ljc1NTY4ODg2ODk2NCwyODBdLFxuWzU1Ljc3NzMwNzk2MzU4NywzNy41MjA4MTk5Njk1MywyODBdLFxuWzU1Ljg1MTUwMzg5MDcwOSwzNy42NzYxOTMwMDU4MTYsMjgwXSxcbls1NS44NjU1NzE4Mjg3OTYsMzcuNzA0OTcxNTY5NDEyLDI4MF0sXG5bNTUuNzY0MTIyODYxMjkyLDM3LjcwNjEwNDUwNjEzNyw1MDBdLFxuWzU1LjY1ODk4NDIxMjAyMywzNy40MDI1OTM1MTkxMywyNDBdLFxuWzU1Ljg4NDMwODcyMTE0OSwzNy42MDE4OTEwMTQ0MDIsMzQwXSxcbls1NS42ODUyMTc5ODkwNTEsMzcuNjIxODA4ODA3MjUzLDM0MF0sXG5bNTUuNjUzNjIyNzE4Mjk5LDM3LjYyMDcwNjQ1NjkyMiwyNDBdLFxuWzU1LjcwNjI0ODIyMDM5MiwzNy43NjU0NDI5NjI5NTgsMzQwXSxcbls1NS43NzQ5OTQ1ODIwODYsMzcuNTgzMjQwOTA1MTMyLDI2MF0sXG5bNTUuODYzMTEwNDAwOTQ4LDM3LjYwMTk2NDUzMTEzNywzNDBdLFxuWzU1Ljg0NjE3MDQ3MDI0NiwzNy4zNTc4ODg4ODAwMzcsMzQwXSxcbls1NS42OTE3NTc1ODQ2NTcsMzcuNTI5NzM1OTU4MzczLDM0MF0sXG5bNTUuNzU3MjE4Nzc5MTk0LDM3LjY1OTEzMzYxOTE0OCwzNDBdLFxuWzU1Ljc0NzM1NTY0NTYyNywzNy42Nzk5MDExOTUzNDEsMzQwXSxcbls1NS43NDQ1NjQ2MDYzNDEsMzcuNTY1NTM1MTUzMTQ0LDM0MF0sXG5bNTUuNjIyNjA2NzU1NDM0LDM3LjYwNTk0MDQ0MjY4OCwzNDBdLFxuWzU1Ljg0MTAyNzMzMDk2OSwzNy40ODcwMjEyMDQzLDM0MF0sXG5bNTUuNzMxNzQyMDk5Njk0LDM3LjY2Mzc0MTI5NDE3NywzNDBdLFxuWzU1LjgyMzI4NDMzMzM1NiwzNy40OTc3MDMxMTUyNjcsMjQwXSxcbls1NS44NTkwMjM3NTEwODUsMzcuMzk1MTU2NjI3ODcsMjQwXSxcbls1NS42NTgyNTA2MTM3MjcsMzcuNzQyNDA5ODU2MzgzLDI0MF0sXG5bNTUuNjU3MzE0MjU5ODIxLDM3Ljg0NTIzNDA1NzE5OSwyOTBdLFxuWzU1LjkxMzE2NDc4ODA2NSwzNy41NzEyNDg5MTIwMjYsMjkwXSxcbls1NS43MTczMTU4MjAwODUsMzcuNDE0MDU1NjU3OTg0LDI0MF0sXG5bNTUuNjE4NjIzOTM0NzA5LDM3LjUwNzIzNDI3MTk5OCwyNDBdLFxuWzU1LjgxNTQ0NTg3MjgzMiwzNy43MzgwNzAwNzI2OTEsMjkwXSxcbls1NS42MTI2Mjg3Nzg1MjMsMzcuNzIwMTUyOTU2MjM5LDI0MF0sXG5bNTUuNjU5NDkxNTI3ODkyLDM3Ljc0OTYwNDQxOTA0MSwyNDBdLFxuWzU1LjY1NTg1MzgxMjEwOCwzNy41NDE4OTEwMTY5NTIsMjkwXSxcbls1NS43Mjk3NTU4MjM3NzgsMzcuNzMyMTIwMjM5NzI2LDI0MF0sXG5bNTUuNzE3NDk2NzYwODAxLDM3Ljc5NDE1OTUxODU2NywyNDBdLFxuWzU1Ljc2NjM3MTk4MjczNiwzNy42MDU0NjIwNzU2NjMsMjkwXSxcbls1NS43NDE3NzQ1NTA5NTgsMzcuNjU2MDY3Mzg4Njk3LDI0MF0sXG5bNTUuNzcwMjY2MDE4NDQ2LDM3LjU5NzIzNTI1ODkwMSwyNjBdLFxuWzU1LjY3ODYzNTA3NDg3NSwzNy44OTI1OTk1MzU4MjYsMjQwXSxcbls1NS44OTE2MzA4NjA5NjcsMzcuNzQ4ODY1MjYzODg5LDI0MF0sXG5bNTUuNjczODIyNzg1NjIsMzcuMjc2MTU1MDIwNjM3LDI2MF0sXG5bNTUuOTE2NTQ2MzY0NzkyLDM3Ljc1OTE4NjM0ODc3NiwyNDBdLFxuWzU1Ljg4ODgxMTY0NDU0NywzNy40MzM1MzA1MTY2OTQsMjQwXSxcbls1NS42NDg3NzQ4OTEwNjEsMzcuNjU2MjgyODY4MjgxLDI0MF0sXG5bNTUuNzYxNjk3MDY1MzY1LDM3LjYzNjA4MjkxMTkyMiw3MDBdLFxuWzU1Ljc1ODYyMTY0MTE2NywzNy42MzI4NTc0MDQ0MzUsODAwXSxcbls1NS43MzMxNDg2ODQxMiwzNy40ODQ4MDc1MjQ4NywyMDAwXSxcbls1NS45MDE4MzExODU0ODcsMzcuNTQ4NDQxNTkwNjE3LDI2MF0sXG5bNTUuNzU3MjE4Nzc5MTk0LDM3LjY1OTEzMzYxOTE0OCwyNjBdLFxuWzU1LjgxMDUwNTA2NTY4NSwzNy4zODMwODg4NTk2MzgsMjYwXSxcbls1NS44OTc1MzAyNzk4NzQsMzcuNjY2MTkzOTk4MzIxLDI2MF0sXG5bNTUuNzA3MjU5NDA5ODA3LDM3LjM4NzE0NTk4MjQyMiwyNjBdLFxuWzU1LjY1OTQ5MTUyNzg5MiwzNy43NDk2MDQ0MTkwNDEsMjYwXSxcbls1NS42MjI2MDY3NTU0MzQsMzcuNjA1OTQwNDQyNjg4LDI2MF0sXG5bNTUuNzY2OTk1NjY1OTc1LDM3LjM4MDI0MTEwMzU1NywyNjBdLFxuWzU1LjYwNDY1OTcxNzc1NiwzNy40ODg3ODkzMDQ0MjIsMjYwXSxcbls1NS42NTM2MjI3MTgyOTksMzcuNjIwNzA2NDU2OTIyLDI2MF0sXG5bNTUuNjU4MjUwNjEzNzI3LDM3Ljc0MjQwOTg1NjM4MywyNjBdLFxuWzU1LjkxMDk0NTY1NDMzNiwzNy4zOTYxMDc3ODE1NiwyNjBdLFxuWzU1Ljg4MTAxNzcxNTAxNSwzNy40NTA0NTg4MDI1ODMsMjYwXSxcbls1NS44NjU1NzE4Mjg3OTYsMzcuNzA0OTcxNTY5NDEyLDI2MF0sXG5bNTUuNjg3NDM4MDIzMjkyLDM3LjYwNDM3NjEzNTE2NCwyNjBdLFxuWzU1Ljg2MzcxMjY4MzYwMSwzNy41NDU4MTUwMTE4MjcsMjYwXSxcbls1NS44OTE2MzA4NjA5NjcsMzcuNzQ4ODY1MjYzODg5LDI2MF0sXG5bNTUuNzQwOTYxOTIwOTIyLDM3LjQxNTQ4NDgxODg1OCwyNjBdLFxuWzU1LjY3NzkzODUyMTQ0NSwzNy40NjcxMzc5OTI4MDEsMjYwXSxcbls1NS42MDY3MDgwMDA5NzEsMzcuNTM2NzE5Nzk1ODcxLDI2MF0sXG5bNTUuNzk5NzQ3NTIwMjAzLDM3LjQ4Mjk4MzQwNTE4MywyNjBdLFxuWzU1LjY1NTg1MzgxMjEwOCwzNy41NDE4OTEwMTY5NTIsMjYwXSxcbls1NS44OTg2MDY5NDE4MjksMzcuNjI5Mzg0OTMyMTkzLDI2MF0sXG5bNTUuNzg2NzQ3NTExNTA1LDM3LjQ4MjYyNjIyNzgwNSwyNjBdLFxuWzU1LjcyOTc1NTgyMzc3OCwzNy43MzIxMjAyMzk3MjYsMjYwXSxcbls1NS42NTg4ODU3NjY3MjIsMzcuNDMwMTMxNTM0NzU2LDI2MF0sXG5bNTUuNjExMDgzNjMwMDcsMzcuNjA2ODYxODA2MTcyLDI2MF0sXG5bNTUuNzQ2OTYyOTcyODgzLDM3LjY0NjUwMTMyNTk0LDUwMF0sXG5bNTUuNzU4NTQ4NjQzMDQyLDM3LjY0MTEzNTA3Mjk5NiwyMDAwXSxcbls1NS44MDk0Nzg0NzgwMDIsMzcuNDY0NDg3OTIxOTM4LDI2MF0sXG5bNTUuNzUzNTU4MjkzODYyLDM3LjU5ODI0NDg0Nzc1MiwxMzUwXSxcbls1NS42NzA1NTc1OTY1MTksMzcuMjYwNTg5OTI3NzI2LDU1MF0sXG5bNTUuODIzMjg0MzMzMzU2LDM3LjQ5NzcwMzExNTI2NywyNjBdLFxuWzU1LjgxODI2NjQyMDg3NiwzNy43Njk4OTgxNzEwMzcsMjAwXSxcbls1NS42MjUxNDI1NzU1MTcsMzcuNzYwOTExOTM2ODA5LDI2MF0sXG5bNTUuODUwOTg0NTc1NTk5LDM3LjU5NzQ1NDQ1MDk0OCwyNjBdLFxuWzU1LjYxMjA4MTcwODU2OCwzNy43MzI4MzMyMjUxNTQsMjYwXSxcbls1NS43ODU1Mzk3OTk2NDUsMzcuNjY1MzUwODAxNDIzLDI2MF0sXG5bNTUuNjk1ODYxMjY5MDksMzcuNjY0OTI1NzYyNTQsMjYwXSxcbls1NS42MDk3NzIyMzk2NDYsMzcuNzIwMDUyOTQ3NDgyLDI2MF0sXG5bNTUuODIzMjg0MzMzMzU2LDM3LjQ5NzcwMzExNTI2NywyNjBdLFxuWzU1LjkxNjU0NjM2NDc5MiwzNy43NTkxODYzNDg3NzYsMjYwXSxcbls1NS44NTk5OTA4NDQ4MzYsMzcuNjU5MTc2OTE2Njg2LDUwMF0sXG5bNTUuNzUyNDQ3NzAwMjQ0LDM3LjYwNzI1OTk1OTk5Miw1MDBdLFxuWzU1LjgxNTcwNzkxNDkxNSwzNy41MjM1NzU4MTEwOTcsMTAwMF0sXG5bNTUuNzg4NDU4NTA3ODQ3LDM3LjU5MzExMzc2MjkxMiwxMDAwXSxcbls1NS43NTEyMDcxMTU0NzQsMzcuNjA2ODczMDA3MjI2LDE1MDBdLFxuWzU1LjcwNzc4MjMzNzcyLDM3LjY1NzI4MjQyNTE2OSwzNTBdLFxuWzU1LjY4NzQzODAyMzI5MiwzNy42MDQzNzYxMzUxNjQsMzUwXSxcbls1NS42ODk0MDE5MzEwMzIsMzcuNjAxNzA4OTg0MDIzLDM1MF0sXG5bNTUuOTEzMTY0Nzg4MDY1LDM3LjU3MTI0ODkxMjAyNiwzNTBdLFxuWzU1Ljc0NzQ3MTQ1MTk0MywzNy43MDY4NDczNjQ5MjQsMzUwXSxcbls1NS42NDA5MjkzMDk2OTgsMzcuNTMwODA1NzIzOTY5LDM1MF0sXG5bNTUuNjU4MjUwNjEzNzI3LDM3Ljc0MjQwOTg1NjM4MywzNTBdLFxuWzU1LjY1MzYyMjcxODI5OSwzNy42MjA3MDY0NTY5MjIsMzUwXSxcbls1NS44NTI3OTU4NjczOTIsMzcuNTg1ODA2ODI2OTk2LDM1MF0sXG5bNTUuODkxNjMwODYwOTY3LDM3Ljc0ODg2NTI2Mzg4OSwzNTBdLFxuWzU1LjgyMzI4NDMzMzM1NiwzNy40OTc3MDMxMTUyNjcsMzUwXSxcbls1NS42OTIyMjQ2MDI4MTgsMzcuODk2NDI5MTc5ODM3LDM1MF0sXG5bNTUuNjIxODI1MjMxOTMxLDM3LjcxMzc1NTkzMDc2MSwzNTBdLFxuWzU1LjYwOTc3MjIzOTY0NiwzNy43MjAwNTI5NDc0ODIsMzUwXSxcbls1NS41ODUyNzE3MDU1MTgsMzcuNzI0ODkyODUzMTMzLDM1MF0sXG5bNTUuNjU1ODUzODEyMTA4LDM3LjU0MTg5MTAxNjk1MiwzNTBdLFxuWzU1Ljc1ODU0ODY0MzA0MiwzNy42NDExMzUwNzI5OTYsMzUwXSxcbls1NS43NTc0NTQwNTI2MjQsMzcuNjM0NTEzNjc5MDY1LDM1MF0sXG5bNTUuNjk1ODYxMjY5MDksMzcuNjY0OTI1NzYyNTQsMzUwXSxcbls1NS45MTY1NDYzNjQ3OTIsMzcuNzU5MTg2MzQ4Nzc2LDM1MF0sXG5bNTUuOTgyNzY1ODQ1MDU4LDM3LjE3NDYzMjY3MTA4MSwzNTBdLFxuWzU1LjYxMjA4MTcwODU2OCwzNy43MzI4MzMyMjUxNTQsMzUwXSxcbls1NS43ODU1Mzk3OTk2NDUsMzcuNjY1MzUwODAxNDIzLDM1MF0sXG5bNTUuNzA3MjU5NDA5ODA3LDM3LjM4NzE0NTk4MjQyMiwzNTBdLFxuWzU1Ljc2Njk5NTY2NTk3NSwzNy4zODAyNDExMDM1NTcsMzUwXSxcbls1NS43NTcwNzA2Nzk4MjgsMzcuNjYwODcxODY3OTIyLDM1MF0sXG5bNTUuNzU3MjE4Nzc5MTk0LDM3LjY1OTEzMzYxOTE0OCwzNTBdLFxuWzU1Ljc1MTU4MjAzNTg3NywzOC4wMTIyMDM4MjI0MjEsMzUwXSxcbls1NS43MDY5MjY4NjUwMTEsMzcuNTkyMTUyNjU4NzI2LDM1MF0sXG5bNTUuNzQxNzc0NTUwOTU4LDM3LjY1NjA2NzM4ODY5NywzNTBdLFxuWzU1Ljg0NjE3MDQ3MDI0NiwzNy4zNTc4ODg4ODAwMzcsMzUwXSxcbls1NS43OTQzNDIzNDk4ODMsMzcuOTI2MjQ3OTk2NDM5LDM1MF0sXG5bNTUuODE3MjUxNTUzODI5LDM3LjM4NzcyNDg5NjcwNiwzNTBdLFxuWzU1LjY2OTc4OTI2NDU0NywzNy41NTIyMDAwMzYxOTUsMzUwXSxcbls1NS43OTk3NDc1MjAyMDMsMzcuNDgyOTgzNDA1MTgzLDM1MF0sXG5bNTUuODYzNzEyNjgzNjAxLDM3LjU0NTgxNTAxMTgyNywzNTBdLFxuWzU1Ljc1NTc3NDg0MTIwNCwzNy42MTQ2Mzg5Mzg4NzIsMzUwXSxcbls1NS42MTEwODM2MzAwNywzNy42MDY4NjE4MDYxNzIsMzUwXSxcbls1NS44ODEwMTc3MTUwMTUsMzcuNDUwNDU4ODAyNTgzLDM1MF0sXG5bNTUuODU1MjAyNjEwMTg0LDM3LjQ3ODM5MDk3NjY2NCwzNTBdLFxuWzU1LjcyOTc1NTgyMzc3OCwzNy43MzIxMjAyMzk3MjYsMzUwXSxcbls1NS44MDMzNDI4NzYwOTksMzcuNjE4MTk2NzgzMjI2LDM1MF0sXG5bNTUuNzgyOTA3NDQ2MTA3LDM3LjcyMDc4Nzg4MjczNCwzNTBdLFxuWzU1Ljc0OTE5NDI0MTY2MiwzNy41ODk3Njc3Njg1MDMsMzUwXSxcbls1NS43MDg3MTQxMTQ4MTIsMzcuNjIyMDgxMDcyMjYxLDM1MF0sXG5bNTUuNjE4NjIzOTM0NzA5LDM3LjUwNzIzNDI3MTk5OCwzNTBdLFxuWzU1Ljc0MzEyMTg2NTU0MiwzNy41MDcwNjMxMDYxOTksMzUwXSxcbls1NS43ODE5NzQ1NDc5NSwzNy43MDQ0NjE5NDMyMjIsMzUwXSxcbls1NS42OTE3NTc1ODQ2NTcsMzcuNTI5NzM1OTU4MzczLDM1MF0sXG5bNTUuNzc0NTI5MTM5MDc4LDM3LjU4MDQwOTg5MDAyNCwzNTBdLFxuWzU1LjYyMjYwNjc1NTQzNCwzNy42MDU5NDA0NDI2ODgsMzUwXSxcbls1NS43MDg0OTg4NjIwMjEsMzcuNTQ1MTY4NzI0MzAyLDM1MF0sXG5bNTUuNzY5MjY1MDU3NzAyLDM3LjU5NjgxOTc2Mzc4NiwzNTBdLFxuWzU1LjY3MTY5MjM4NDA5MiwzNy41ODQ4Njc5MjgyODMsMzUwXSxcbls1NS43NzkyOTQ2NzQ4NTEsMzcuNjAxMzgxNTMxNDEyLDM1MF0sXG5bNTUuODI2Njk2NTU5MzQ1LDM3LjQ0NTI5MTE5NDczOSwzNTBdLFxuWzU1Ljg1NTgwMzk3OTQzOCwzNy40NzcxMTI4MzE4ODcsMzUwXSxcbls1NS44MDk0OTgwNTI0MzEsMzcuODMxMjMwNDEyMjYsMzUwXSxcbls1NS44MDk0Nzg0NzgwMDIsMzcuNDY0NDg3OTIxOTM4LDM1MF0sXG5bNTUuNzYxMDcyMTQyODE1LDM3LjY2MjU4ODIzNjMzOCwyNjBdLFxuWzU1Ljc4MzkwMzk1NzI5NiwzNy41OTYzNDA0OTkwNDcsMjYwXSxcbls1NS44MDU5MzgzMzExMjIsMzcuNTgyNTA4NTM5MjMsMjEwXSxcbls1NS43NDc1NTQ2NTY2NDMsMzcuNTgxOTAyNTAwMDIzLDE1MDBdLFxuWzU1LjgwNDAzNDk5OTc1NiwzNy4zOTgxMzY5MDk1OTcsOTAwXSxcbls1NS43NzI2MDAxNjcwNzEsMzcuODIxMDM5MjE5MzM5LDI2MF0sXG5bNTUuODg4MDg0MzMxNDEsMzcuNjYyNTM3NDc4Mjc2LDIxMF0sXG5bNTUuNzUyOTU3Njc0NTY4LDM3LjY1Njc2MTU5OTI1OSwyNjBdLFxuWzU1Ljc3MTI0ODAzMDgyMiwzNy42ODA3NTAzODgwNTcsMjYwXSxcbls1NS43NTM2MjIyMjA4MTIsMzcuNjM4NDI0MzIzMjY4LDI2MF0sXG5bNTUuNzA3NTk4NzgwMjk2LDM3LjcyOTk2NzcwMzAxNiwyNjBdLFxuWzU1Ljc3MzEwMDg3MTU3MywzNy42MzI4MjQ1MzYxNTYsMjYwXSxcbls1NS43NzMyMDUzODIzOTEsMzcuNjIxMjU1OTY2MTg1LDI2MF0sXG5bNTUuNzA4MDUxODU5Nzk5LDM3LjY1NzMwMTAzMzgwNiwyNjBdLFxuWzU1Ljc3MTk0OTM0NzYxMSwzNy42ODAwNjc1MDgwNzgsMjYwXSxcbls1NS43NTg0MzU0NjUxOTksMzcuNjM4OTYzMjI0ODk1LDI2MF0sXG5bNTUuNjYzNzQ1MDQzNzQ5LDM3LjYwODcwNTQxODY5OCwyNjBdLFxuWzU1Ljc1NjY3OTQ5NzYxNSwzNy42MDU3ODAyNjI0ODUsMjYwXSxcbls1NS43NTYxNTM0NTY4NTMsMzcuNjIxNDI1MTY0MzcxLDI2MF0sXG5bNTUuNzc3NjQ5NDE1MzExLDM3LjY2MTA1NDI4NDMzNCwyNjBdLFxuWzU1Ljc2NDk4Mjg4MDM1MiwzNy42Mzg2MjcyMTQwNzUsMjYwXSxcbls1NS43MjcwMzEwNDU3MzgsMzcuNTYxMDYzNjExMzU3LDI2MF0sXG5bNTUuNzM3NjEwNTIwMjkyLDM3LjI0NzIzOTUxMTU2OSwxNTAwXSxcbls1NS43Mjk0NjY5OTY3MzIsMzcuNjQ2OTA2OTEyOTY1LDE1MDBdLFxuWzU1Ljc3NDUwMTY2OTMzMywzNy41ODcxMzUzMjg0MDMsMjI1MF0sXG5bNTUuNzU0MTU4Mjc0MDY4LDM3LjY1NjIxNDczMjEsMTAwMF0sXG5bNTUuNzczOTY2OTQyOTU5LDM3LjU4NjM1MDA0MjY5NywxNTAwXSxcbls1NS43OTkxNTkxNjk1NzYsMzcuNTE0MjU5NzU3OTc3LDk1MF0sXG5bNTUuNzQ0NTY0NjA2MzQxLDM3LjU2NTUzNTE1MzE0NCwyNTBdLFxuWzU1Ljg0NTU0NzQ1MTExOCwzNy42NjEwNjcxMDgwNSwyNjBdLFxuWzU1Ljc1NDg1MjIyNzk0MywzNy42MzQ1ODI5MTg4MjgsNTUwXSxcbls1NS44MjQ0NDEyNzg4MjQsMzcuNjMyMzA5MTczMDk4LDYwMF0sXG5bNTUuNjA0NjU5NzE3NzU2LDM3LjQ4ODc4OTMwNDQyMiwyNTBdLFxuWzU1LjkxMDk0NTY1NDMzNiwzNy4zOTYxMDc3ODE1NiwyNTBdLFxuWzU1Ljc2Njk5NTY2NTk3NSwzNy4zODAyNDExMDM1NTcsMjUwXSxcbls1NS42NTM4MTI0ODMyNzUsMzcuODQ0MzAwODkwMTcyLDI1MF0sXG5bNTUuNjExMDgzNjMwMDcsMzcuNjA2ODYxODA2MTcyLDI1MF0sXG5bNTUuODA5NDk4MDUyNDMxLDM3LjgzMTIzMDQxMjI2LDI1MF0sXG5bNTUuNzgyOTA3NDQ2MTA3LDM3LjcyMDc4Nzg4MjczNCwyNTBdLFxuWzU1LjgyMzI4NDMzMzM1NiwzNy40OTc3MDMxMTUyNjcsMjUwXSxcbls1NS45NjQyMDc0MzY5MzgsMzcuNDEzMDQ5ODg4NDA4LDI1MF0sXG5bNTUuNzU3MDcwNjc5ODI4LDM3LjY2MDg3MTg2NzkyMiwyNTBdLFxuWzU1Ljc0MTc3NDU1MDk1OCwzNy42NTYwNjczODg2OTcsMjUwXSxcbls1NS45MTMxNjQ3ODgwNjUsMzcuNTcxMjQ4OTEyMDI2LDI1MF0sXG5bNTUuNjc3OTM4NTIxNDQ1LDM3LjQ2NzEzNzk5MjgwMSwyNTBdLFxuWzU1Ljg2MzExMDQwMDk0OCwzNy42MDE5NjQ1MzExMzcsMjUwXSxcbls1NS43NjE2MDUwNjcwNDY3LDM3LjYyMjE2MDM4MzM3OTYsNDEwXSxcbls1NS43NTQ3NTc5MDUzMSwzNy41NTc1MjA4MjAyMDcsNDEwXSxcbls1NS43MzQxNjY2MzIzMDUsMzcuNjE4ODc4NjQzNjIsNDEwXSxcbls1NS44NzE1MzcyMDY4MDcsMzcuNTQzNTAxMzkwNzY2LDc1MF0sXG5bNTUuNzg5NTY2MTkzMjMyLDM3Ljc1MjUyMDk4MTM1NSwzNDBdLFxuWzU1Ljc1NzkzNTUwMDY0MSwzNy42MjcxODY5NTQzNDgsMTUwMF0sXG5bNTUuNjEyNjI4Nzc4NTIzLDM3LjcyMDE1Mjk1NjIzOSwxNjAwXSxcbls1NS43ODA0MjM0MDY0MDcsMzcuNjA4MjI3NDIzMTU2LDUwMF0sXG5bNTUuODgxMDE3NzE1MDE1LDM3LjQ1MDQ1ODgwMjU4MywxMDAwXSxcbls1NS43NTMxMTAwNjE3MjksMzcuNTAyNzkwNjg5NjIzLDMwMF0sXG5bNTUuNzk1NzEwNjkyODY0LDM3LjU0MDc5NTE1MTkwNiw1NzBdLFxuWzU1LjYzNTE3MTk2ODg4MywzNy40MzY5MzcxNzYyNzQsNTcwXSxcbls1NS44OTI1MzUwODEyNzMsMzcuNjE1MDg0NTEwOSw0MjBdLFxuWzU1Ljc1MjU0NTc3NDYxNSwzNy42MDI5MDUyMTAzMzUsNDIwXSxcbls1NS44NDY4OTc1NDE4MzMsMzcuNjUxMzUxOTI3MzkxLDQyMF0sXG5bNTUuNjU5NDkxNTI3ODkyLDM3Ljc0OTYwNDQxOTA0MSwzNTBdLFxuWzU1Ljc2MDk2NDYyOTE3NSwzNy42MjQzNTQyNzY1MTcsNDgwXSxcbls1NS43ODMzMDcxMDYxNjEsMzcuNTk3ODcwMTQ2NzUyLDM4MF0sXG5bNTUuNzUwNjcwNjAwOTM2LDM3LjU5NjI2ODU2Njk2OSw0MjBdLFxuWzU1Ljc3MTU5Nzk5NTUxNywzNy42MzI3NDk5MzE2NjcsNDIwXSxcbls1NS43NjU3NDgxMjIyNTYsMzcuNjA4Njk3OTYzOTUyLDU3MF0sXG5bNTUuNjMzOTI0MDA0ODY5LDM3LjQ0MDA3MzI0NDU4MSw0ODBdLFxuWzU1LjcxODQwOTMxOTIzMywzNy43NzcwNTY2MDA5NzQsMjUwXSxcbls1NS40Mzg0MzQ3ODIwODMsMzcuNzYzNDAzODIwMDY1LDIwMF0sXG5bNTUuNzQyOTA5MTEzMjc2LDM3LjYzOTQ5NzA3NjA0MywzMDBdLFxuWzU1Ljc4MDY4MDE1NTI1NiwzNy42MTk1MTMwNzEzOTYsNjAwXSxcbls1NS43NjQyMjg2MTIwMDUsMzcuNjIzOTkxOTc1MTg1LDYwMF0sXG5bNTUuNzE3MjU2ODU0NTk2LDM3Ljc5MTk2NzAzODI1Nyw5MDBdLFxuWzU1LjY0MjEzNTgxODE4MiwzNy41NDMwODczMTM4OTIsMTAwMF0sXG5bNTUuNzEwNzY0ODMxMTA1LDM3Ljc3MDY2NTY5Mjk4LDE1MF0sXG5bNTUuNzQ3MzA0MTQ1NzQ5NSwzNy42NTY1NzU1Nzk4OTM1LDYwMF0sXG5bNTUuNzAwMTMxOTIxMTA1LDM3Ljc2Nzc0NDk1NTM2NCw1MDBdLFxuWzU1LjcxMDQyMjk3NDQyNSwzNy41OTAyNjE3NDI3NzIsMTAwMF0sXG5bNTUuNzkxNTQ3NDcyNjYyLDM3LjgxNjIxNzk5NjI0OCwxMDAwXSxcbls1NS41ODU5NzQwNDgyOSwzNy44OTU2MDQ5ODQ0OCwzMDBdLFxuWzU1Ljc1ODA3MTUzNjg2MSwzNy42MDg3OTkxMTY4MjcsMTAwMF0sXG5bNTUuNzY5MjEyNDQzNzI5LDM3LjY3MDU4ODI5MzAwNiw5NTBdLFxuWzU1Ljc2NTYyNDg5ODk4MSwzNy42MDkzOTA4NTA4MDEsMTAwMF0sXG5bNTUuNzY4OTgwODM5MDYzLDM3LjYyNjgwMDM2MzY4LDEwMDBdLFxuWzU1Ljc4NDQ5NjgzOTU0NCwzNy41OTc1MDMwODk0MjMsMTUwMF0sXG5bNTUuNzY4ODY1MjUxNDQ2LDM3LjU3MTU1MTg1NjQ4NywxMzAwXSxcbls1NS43NjA3NDk5NTcwMDUsMzcuNjQzMDQyNTQyMzEyLDEyMDBdLFxuWzU1Ljc1MjQ5NDE2MDIyMiwzNy41OTc2MTY4MTQyMjksMzUwXSxcbls1NS44ODY0OTA2OTkzNzYsMzcuNjU2ODYyMjU2OTExLDEwMDBdLFxuWzU1LjczNTc3NDI0NzE2MywzNy41ODY3MDk2ODc1MzIsMTUwMF0sXG5bNTUuODIwODc4NzY2MTA1LDM3LjYzMjc3Mzk5MTczNSw2NTBdLFxuWzU1LjY5MTE0NTM0NzA0OCwzNy41NjAzNDkzNzQ4MzgsNDAwXSxcbls1NS43OTMwOTYxODMxNDcsMzcuODA4NzYzNDg4MTA3LDgwMF0sXG5bNTUuNjUxMTk2MzI2MTI2LDM3LjUwODQ3MzMyMzE2OCw4MDBdLFxuWzU1Ljg2NDk0ODk4NDk0NywzNy42MDQwODgwNjM4NDYsMTYwMF0sXG5bNTUuNzYxMjExNjU2Njg2LDM3LjYxOTU4NTUzMDcwMiwxNTAwXSxcbls1NS44OTc2OTEzNzAyNDIsMzcuMzkwOTk4NDg1MDIzLDQ1MF0sXG5bNTUuNzk0NzE3MDMyNjQzLDM3LjUzODI2NDc3NzQyOCw1MDBdLFxuWzU1LjcyMjI3NjU2MzcwNSwzNy42MjE1NzE5NzM0ODUsMTIwMF0sXG5bNTUuODY5MTQwNTgzNTA3LDM3LjY3NzI1MjU5MjAzLDUwMF0sXG5bNTUuODUwNjkzMjQ2OTM4LDM3LjQzMDc4MTc3NzE3MSwxNTAwXSxcbls1NS43NjYyNzI4ODIxNjMsMzcuNjA3NjgwNjU4ODMsMTgwMF0sXG5bNTUuNzk1NzI4OTgyNzc5LDM3LjgwMzgzMDI5NTY4OSwxNTAwXSxcbls1NS43MTY3NDI1MDIyNDIsMzcuNzg1MjYyMzk2ODg3LDExMDBdLFxuWzU1LjgxMDEwNDM2MTAyNSwzNy42NTYyMjEwNDk5NTgsNTAwXSxcbls1NS44MDQ1NTY2ODE0MzYsMzcuNjQ1OTg5MzI4OTk0LDMwMF0sXG5bNTUuNzQ0NzgxMzM5Nzk0LDM3LjQ5ODY2NjQ5OTgyMiwxMTAwXSxcbls1NS42ODE4ODA4Mzk5NTYsMzcuMjkwNTg0NDcyMzA0LDU0MF0sXG5bNTUuNjc0MjU1Njc4Nzc1LDM3LjYwNDE4MzAzNTM3OSwxMDAwXSxcbls1NS43MTIxNzYyMTUxNTQsMzcuNjA4MzQ0MzA0MzA5LDEwMDBdLFxuWzU1Ljc1NjI0MTUxNDI4MiwzNy42MjcwNzUzMTgyOTYsMzAwMF0sXG5bNTUuNjAyNjc1MTIzMjY5LDM3Ljc0MDgwODk2NjY5MSwzNTBdLFxuWzU1Ljg0NTQxNTMxMDk1NiwzNy40ODA2NjU5NTE1MjQsNjAwXSxcbls1NS43MTEwOTM5NzQ5NjUsMzcuNjMyODMyNTE2ODk2LDYwMF0sXG5bNTUuNzQwOTYxOTIwOTIyLDM3LjQxNTQ4NDgxODg1OCwxMDAwXSxcbls1NS43NDU2MDg0MTUxMjUsMzcuNjgwNTE2MDI2OTc0LDE1MDBdLFxuWzU1Ljg2MjEyNjM0ODAzNSwzNy40MzY2NjgxMzAzMDMsNjAwXSxcbls1NS42ODM0ODkwNjI2ODMsMzcuODQzMzc1MDk0MDAzLDM1MF0sXG5bNTUuNzM0MjI0OTMwMDY0LDM3LjQxODEwNTI3MzUzMiwxMDAwXSxcbls1NS43Njc0NTE2MDkzMDEsMzcuODU4MjcxNTcwMDgxLDM1MF0sXG5bNTUuNzQ2MDQyMjM3MzQ3LDM3Ljg1MjM5OTgzNzczNywzNTBdLFxuWzU1LjcxMjI4MTA1OTkwMiwzNy44OTEzNTAyNTE5NDMsMzUwXSxcbls1NS43NzM1MjIxODMxNjgsMzcuODI1NTMxOTEzNjcyLDM1MF0sXG5bNTUuNzAzODA1OTI3NDUzLDM3LjU4Mzk3MjMxMjA0Nyw5MDBdLFxuWzU1Ljk5NDc2OTEwNTI2MywzNy4xNzM2NTg0NzQ1MTQsMTUwMF0sXG5bNTUuNzU0ODUyMjI3OTQzLDM3LjYzNDU4MjkxODgyOCwxMDAwXSxcbls1NS43NTE4OTc2MjA4MzksMzcuNTMyNTg4MjEwOTExLDE4MDBdLFxuWzU1Ljc0ODI1MTI1NjE0MiwzNy42Mjc0NjU3NDE5ODksODUwXSxcbls1NS42OTk3NjY2OTAwNjcsMzcuNjIzOTg3NDc3OTUxLDkwMF0sXG5bNTUuNzEwNjY2MjIwNDMsMzcuNjE5MDgxNTc5NjM2LDQ4MF0sXG5bNTUuNzUyMTA5Mjg4MjIxLDM3LjU5NjI4NzcyMDY1NywxMDAwXSxcbls1NS43NTQ2ODE3NzYzNjcsMzcuNjIxNTI5MTg2MDg1LDQwMF0sXG5bNTUuNzk1NTI1MTQyNzQyLDM3LjU4NTE5OTAzMjQ1MywyNDBdLFxuWzU1Ljc1NDY4MTc3NjM2NywzNy42MjE1MjkxODYwODUsMjAwXSxcbls1NS43MjgyMDYwODExNjksMzcuNjEyNjcxNTQxOTQzLDI0MF0sXG5bNTUuNjIxODI1MjMxOTMxLDM3LjcxMzc1NTkzMDc2MSwyNDBdLFxuWzU1Ljc3NjkxMjcyNjA2MSwzNy42NTkzOTY4MzY3NzksMjQwXSxcbls1NS44MDE5NDE2OTY5NDEsMzcuNTMxOTQ1OTQxNiwyNDBdLFxuWzU1Ljc1NTc3NDg0MTIwNCwzNy42MTQ2Mzg5Mzg4NzIsMzUwXSxcbls1NS42NTIwOTg1ODg4NjksMzcuNDk5MjI0NjUxMDgyLDIwMF0sXG5bNTUuODE3MjUxNTUzODI5LDM3LjM4NzcyNDg5NjcwNiwzNTBdLFxuWzU1Ljg5NzUzMDI3OTg3NCwzNy42NjYxOTM5OTgzMjEsMzUwXSxcbls1NS44NTkwMjM3NTEwODUsMzcuMzk1MTU2NjI3ODcsMzUwXSxcbls1NS42NTk0OTE1Mjc4OTIsMzcuNzQ5NjA0NDE5MDQxLDI0MF0sXG5bNTUuNjU1ODUzODEyMTA4LDM3LjU0MTg5MTAxNjk1MiwyNDBdLFxuWzU1LjY4NzQzODAyMzI5MiwzNy42MDQzNzYxMzUxNjQsMjQwXSxcbls1NS42MDk3NzIyMzk2NDYsMzcuNzIwMDUyOTQ3NDgyLDI1MF0sXG5bNTUuODQ2MTcwNDcwMjQ2LDM3LjM1Nzg4ODg4MDAzNywyNDBdLFxuWzU1LjgyMzI4NDMzMzM1NiwzNy40OTc3MDMxMTUyNjcsMjQwXSxcbls1NS42OTE3NTc1ODQ2NTcsMzcuNTI5NzM1OTU4MzczLDM1MF0sXG5bNTUuNjA2NzA4MDAwOTcxLDM3LjUzNjcxOTc5NTg3MSwyNDBdLFxuWzU1LjY3NzkzODUyMTQ0NSwzNy40NjcxMzc5OTI4MDEsMjQwXSxcbls1NS43Mjk3NTU4MjM3NzgsMzcuNzMyMTIwMjM5NzI2LDM1MF0sXG5bNTUuNzgyOTA3NDQ2MTA3LDM3LjcyMDc4Nzg4MjczNCwyNDBdLFxuWzU1Ljc0NDU2NDYwNjM0MSwzNy41NjU1MzUxNTMxNDQsMjQwXSxcbls1NS43MDg3MTQxMTQ4MTIsMzcuNjIyMDgxMDcyMjYxLDI0MF0sXG5bNTUuNjUzNjIyNzE4Mjk5LDM3LjYyMDcwNjQ1NjkyMiwyNDBdLFxuWzU1LjYxMTA4MzYzMDA3LDM3LjYwNjg2MTgwNjE3MiwyNDBdLFxuWzU1Ljc0NDQyODQwNTIzNywzNy42Mjk4NDg0MDM2MjcsMjQwXSxcbls1NS42MTIwODE3MDg1NjgsMzcuNzMyODMzMjI1MTU0LDI0MF0sXG5bNTUuNzU3MDcwNjc5ODI4LDM3LjY2MDg3MTg2NzkyMiwzNTBdLFxuWzU1Ljc2Njk5NTY2NTk3NSwzNy4zODAyNDExMDM1NTcsMjQwXSxcbls1NS44MDk0OTgwNTI0MzEsMzcuODMxMjMwNDEyMjYsMzUwXSxcbls1NS45MTA5NDU2NTQzMzYsMzcuMzk2MTA3NzgxNTYsMzUwXSxcbls1NS45MjA1OTk0OTE4ODYsMzcuODM5MDM2NjczMjk1LDM1MF0sXG5bNTUuNjUzODEyNDgzMjc1LDM3Ljg0NDMwMDg5MDE3MiwyNDBdLFxuWzU1LjYwNDY1OTcxNzc1NiwzNy40ODg3ODkzMDQ0MjIsMzUwXSxcbls1NS41ODU4OTE3MjgxMzEsMzcuNzE5OTkxMDY0NzM2LDM1MF0sXG5bNTUuNzk0MzQyMzQ5ODgzLDM3LjkyNjI0Nzk5NjQzOSwyNDBdLFxuWzU1Ljk4MzQyNzU5MzkzNywzNy40MDg5OTY3MDU3MjIsMTAwMF0sXG5bNTUuNjQxOTQyMzU4MjY1LDM3LjUyNDE2MzkxMjQ1Miw5NTBdLFxuWzU1LjU5NTE2ODYzMTAzLDM3LjU0MTY1NjE3MDI1Niw1NTBdLFxuWzU1LjY1Mzg5MDc3MjIzNCwzNy43NTc1NTgyMjA4NTEsNTUwXSxcbls1NS43ODQ0NTU2NTc2OTksMzcuNDczNzE1NTkzODEzLDU1MF0sXG5bNTUuODU0ODk3NDYzMzgxLDM3LjQ5ODU3NzEyNjc3OCw1NTBdLFxuWzU1LjgwMjgzMzM4NDMzNiwzNy43OTk1MjUxOTQ0OTEsNTUwXSxcbls1NS43ODYzOTEzNDAzOTksMzcuNzM1NDc1MDc5NDUyLDU1MF0sXG5bNTUuNjY3MDM5MjE0NzQ1LDM3Ljc4NTkyNTUxMTA4Nyw1MDBdLFxuWzU1Ljc1NjcyMjE1NzIxOCwzNy42MjE2Mzc5MjE1NTQsODAwXSxcbls1NS44Mjc1MzU2MDE2NTIsMzcuNjQyNDI3OTYzMDA1LDEwMDBdLFxuWzU1Ljc0NDk3NjgwNzcyLDM3LjU0OTk0ODU2NzQyLDE1MDBdLFxuWzU1LjczOTY4NTI3MjU0LDM3LjYwNDE4Mjg0NTkyNiwxMDAwXSxcbls1NS45MTA5NDU2NTQzMzYsMzcuMzk2MTA3NzgxNTYsNDAwXSxcbls1NS42NTM4MTI0ODMyNzUsMzcuODQ0MzAwODkwMTcyLDQ5MF0sXG5bNTUuNzQ2NzQyNDExNTgyLDM3LjUzNzE2Mzc3ODIwNSw0OTBdLFxuWzU1Ljc0ODYwNzQzNDI3NCwzNy41ODgwNDMwNjQ3NjgsNDkwXSxcbls1NS43NjgzNTM0OTAxOTEsMzcuNTkwNTgzOTIyMDU0LDQwMF0sXG5bNTUuNzEwMDU2MTg0OTMyLDM3LjYyMzU3NjMxNDIzOCw0OTBdLFxuWzU1LjgwMTkzNzI3MTI5OCwzNy41MzE5NDE0ODEzOSw0MDBdLFxuWzU1LjgyMTM1MzE2OTM4MiwzNy40OTc2NzM3ODY1OTMsNDkwXSxcbls1NS44MjMyODQzMzMzNTYsMzcuNDk3NzAzMTE1MjY3LDQwMF0sXG5bNTUuNzYyNTEzMzk0NjQ5LDM3LjY1NzY4ODE5MzIxMSw0OTBdLFxuWzU1Ljc1ODg4NjQ2MzMyLDM3LjY0MDk4NzIyNzgwOCw0MDBdLFxuWzU1Ljc3NDUyMTM3MjI3MSwzNy41ODcxNzE1MjM1OTUsNDkwXSxcbls1NS43NDc2MTI2MjkyMDcsMzcuNjI2MDIwODM0OTI1LDQ5MF0sXG5bNTUuNjc3OTM4NTIxNDQ1LDM3LjQ2NzEzNzk5MjgwMSw0OTBdLFxuWzU1Ljc3ODUzMTI3OTA0NiwzNy41ODU4MjEwOTM4MTksNDAwXSxcbls1NS43MjY4NzMxMzk1MjUsMzcuNTc5NjcwMTE1NDIsNDkwXSxcbls1NS43OTk3NDc1MjAyMDMsMzcuNDgyOTgzNDA1MTgzLDQ5MF0sXG5bNTUuODA5NDc4NDc4MDAyLDM3LjQ2NDQ4NzkyMTkzOCw0OTBdLFxuWzU1LjcyNzI1MDk0MjUzMSwzNy42MjY0OTA4MzUyOTQsNDkwXSxcbls1NS42NjUwNzQ0NjcyNDEsMzcuNDgxNTg3OTU2MDksNDAwXSxcbls1NS43NzAwOTAxMDU2MDMsMzcuNjAyMjk0NzY1NzYsMTI1MF0sXG5bNTUuNzgwMDAzNDMyMjg1LDM3LjYwMTE3NzIzNjYzNiw0MDBdLFxuWzU1Ljc4ODU4NTE4MDIzOCwzNy42NzkyOTQ2MTkzNzksNDkwXSxcbls1NS43OTA0Mzc3NzQzMDUsMzcuNTg0ODEwMzk3ODQ4LDQ5MF0sXG5bNTUuNjA0NjU5NzE3NzU2LDM3LjQ4ODc4OTMwNDQyMiw0OTBdLFxuWzU1Ljc1NzIxODc3OTE5NCwzNy42NTkxMzM2MTkxNDgsNDAwXSxcbls1NS43NDQ1NjQ2MDYzNDEsMzcuNTY1NTM1MTUzMTQ0LDQ5MF0sXG5bNTUuNzQ3NDcxNDUxOTQzLDM3LjcwNjg0NzM2NDkyNCw0OTBdLFxuWzU1LjU4NTI3MTcwNTUxOCwzNy43MjQ4OTI4NTMxMzMsNDkwXSxcbls1NS42OTE3NTc1ODQ2NTcsMzcuNTI5NzM1OTU4MzczLDQ5MF0sXG5bNTUuNzMwMTQ2NDg0NDI1LDM3LjYzNTgwMzQyODE4OCw0OTBdLFxuWzU1Ljc3NDAyNDA1MzE0NywzNy42MDM1MTUxNjA3MDEsNDAwXSxcbls1NS43NDc1NTA2Mzk0NzcsMzcuNTM5NTcyODk5Nzc0LDMyMF0sXG5bNTUuNjIxODI1MjMxOTMxLDM3LjcxMzc1NTkzMDc2MSw0OTBdLFxuWzU1Ljc2Njk5NTY2NTk3NSwzNy4zODAyNDExMDM1NTcsNDkwXSxcbls1NS42NDUzMjI2ODY5MjcsMzcuMzk4MDQ0NTk5NDUsNTUwXSxcbls1NS43NDI5MDQzODI3NjcsMzcuNjAwMzA3Nzg5MTUzLDgwMF0sXG5bNTUuODI1NDY1OTQ3NzE3LDM3LjMzMjIxMTU5Nzk1LDYwMF0sXG5bNTUuNzc3NTg0NTY3MzI2LDM3LjYxNzYzMjg0NDMxNywxMDAwXSxcbls1NS43MDQ4MjI0Mzk0NjUsMzcuNTc2MzMwMTEwMDU3LDYwMF0sXG5bNTUuODAyNzM2NjQ3OTU0LDM3LjUyODM2MTgwMDA4Miw1MDBdLFxuWzU1Ljc0MTgzNzg1Njc0NCwzNy41NTgyNjMwNzM3MjUsMjUwXSxcbls1Ni4wMDE4MDE1MjExNDYsMzcuMTIzMjk1NzAyMjk2LDUwMF0sXG5bNTUuNzI3ODg4NzU2OTU5LDM3LjU4NTQyMzM2NjQ1NCwyNTAwXSxcbls1NS43OTMyNzM0MTYyMjgsMzcuNTQyODcwNTY5NjU0LDIwMDBdLFxuWzU1Ljc2MTE3MzY1OTM4NiwzNy41NzY1OTE0MDk0NCwxMDAwXSxcbls1NS43MDk3OTQ3MjM0NTYsMzcuNjU3MDkzMzkxNjExLDgwMF0sXG5bNTUuNzYyMjMyNzMzNTA4LDM3LjU2ODcwMjcwOTgzNCw3NTBdLFxuWzU1LjY3MDY0ODAwMTUxMiwzNy40MTczMjk2NjczOTIsNTAwXSxcbls1NS43NDcxMjI5MzQ4MDEsMzcuNjA1MTQ1OTQxNTk1LDI1MF0sXG5bNTUuNzQ3OTUwNjY4MzkxLDM3LjYwNzg4ODExNTI3OCw0NTBdLFxuWzU1LjY4MjgyMzY2NDE2OCwzNy41NjE0MDE4OTk5MzYsMTUwMF0sXG5bNTUuNTg4NTQxODE1OTY4LDM3LjY2MzA0NTYwNjg5MiwxMDAwXSxcbls1NS42NzkzMzc0NDAzMTcsMzcuNTcxMzE4MTc4NDkyLDEwMDBdLFxuWzU1LjgyMDE2NTQxOTA1LDM3Ljc5NzI3MTg5NDI0NCw3NTBdLFxuWzU1Ljc2NDE4MDIyNTk1OCwzNy42MjA0MjI0NTUwMzYsMTAwMF0sXG5bNTUuNjcxNzI5NTE2Nzc0LDM3LjU3MDAwNTgxMzkwNyw3MDBdLFxuWzU1Ljc2MzY4NTY0OTM2NSwzNy41NjU2MDQ4ODE3ODksMTUwMF0sXG5bNTUuNzY5ODE5Njg1OTIsMzcuNjU1NjMwNjg1NDY2LDEwMDBdLFxuWzU1LjcxMzU1MTY5MDcxNiwzNy43Nzc3MzI4NjM1MywxMDAwXSxcbls1NS43NjQ2NDQyMTE4NzUsMzcuNjQ2MTc4NTYyODgxLDE1MDBdLFxuWzU1LjcxNTIwMjIzOTAyNywzNy44OTIzMzgxNjY3LDUwMF0sXG5bNTUuNzM0ODA2MTY0MjY0LDM3LjYyODAwMzA5MDQzNCw0MDBdLFxuWzU1LjY0MDkyOTMwOTY5OCwzNy41MzA4MDU3MjM5NjksNDkwXSxcbls1NS43ODU1Mzk3OTk2NDUsMzcuNjY1MzUwODAxNDIzLDQwMF0sXG5bNTUuNjcyNzg5MDA2NjMsMzcuMjc3OTk3NjIyMTM3LDgwMF0sXG5bNTUuODQyNDA5Mzc5NjYxLDM3LjQ4NjQxODExNTg2MiwyMDBdLFxuWzU1Ljc5MDI3NjIzNjQ3NSwzNy41NDQ1MTkwNTU1NTMsMzAwXSxcbls1NS43MDQ1MzA1ODg0ODIsMzcuNjIxMTAxNDA1MzcxLDEwMF0sXG5bNTUuNzE4NDIyNTM1MjA5LDM3LjgyNTI3Mjk1OTg3MiwxMDAwXSxcbls1NS44MDMwODI3ODI2ODcsMzcuNzg0MjM1OTUyNTQ4LDEwMDBdLFxuWzU1LjkyMjc5MDYyMjc4OSwzNy44NTYwMjE5Njk3MDcsMTAwMF0sXG5bNTUuNzM5OTUwNDI3NTg2LDM3Ljg2MTA1ODY4NDQ0NCw2MDBdLFxuWzU1LjY1Njk2NTIxMzAxNCwzNy40OTYyNzY2MTc4NjcsMTUwMF0sXG5bNTUuODA1ODAzMDk4MDc2LDM3LjUxNDg1MTg3NDMzOSw2MDBdLFxuWzU1LjgzOTg0NTM1MzA3LDM3LjQ4ODgyNjY4NzE5Miw4MDBdLFxuWzU1LjgzNTY1ODkxNTc4LDM3LjUyNjQ4OTQwOTU1OSw5MDBdLFxuWzU1LjgxMDcyOTIwNTI5MiwzNy40NzY1NzU3NzQ4NDIsMTAwMF0sXG5bNTUuNjA2NzA4MDAwOTcxLDM3LjUzNjcxOTc5NTg3MSw5MzBdLFxuWzU1LjYwNjcwODAwMDk3MSwzNy41MzY3MTk3OTU4NzEsMzUwXSxcbls1NS45MzA0MTgwNTc3NjUsMzcuNzc1MDU4OTk0ODMzLDEwMDBdLFxuWzU1LjgzMjM0MzYyNTgzMywzNy40NTQ0NjIxNTA5NjUsMzAwXSxcbls1NS43NDMwMDI2ODM4MDgsMzguMDI1MDg5NDA0NTAyLDE1MDBdLFxuWzU1Ljc1MDEyNTY4MzQxMiwzNy45NjQxNzA4MzI4Nyw1MDBdLFxuWzU1Ljc0OTg4Mzc5MTkyNSwzNy45NzIyNzMzMDk4MDIsNjAwXSxcbls1NS43NTA3NDY0MjkyMzQsMzcuOTU1NjQ1OTU2NTM3LDQwMF0sXG5bNTUuNzUxNDY2OTg0NDQ3LDM4LjAxMDA2NjgxMDE5LDEwMDBdLFxuWzU1LjczNDc4Mzg5NTAxMiwzNy45Njg4MDA4OTcyNCw4MDBdLFxuWzU1Ljc3MzIyNDA2MDU0OSwzNy42MTk0NzA4NzUwMzUsMTEzMF0sXG5bNTUuNzUwNTc2MDg3ODE5LDM4LjAwNTM0Mjk3MDQzNCwxNDAwXSxcbls1NS43Nzc4OTU0MjQ3MTksMzcuNTk4NzM4MTc0MjA4LDExMzBdLFxuWzU1Ljc0MzQ5MDIwOTk1OSwzNy42MjUyNzYzMjc1MjcsMTUwMF0sXG5bNTUuNzY3MTI5OTQ3NTg1LDM3LjYwMjQ5Mjk4MDQ2OCwxMTMwXSxcbls1NS43NTE5MDkxMzgyMTMsMzcuNTg1OTk0Njg1Njk3LDExMzBdLFxuWzU1Ljc1OTE0MDQ4ODYyMSwzNy42NDU3NjAxNjQ3OCwxMTMwXSxcbls1NS43NzE1ODczMTg3MzIsMzcuNTkyODA1NzIzNDYzLDExMzBdLFxuWzU1Ljg2OTEzMzM3ODYzMywzNy42Njk0MTQ1MzEwNDEsMTAwMF0sXG5bNTUuNjY4OTgzMjM2ODAxLDM3LjUzOTgwMjQwMDE4OSwxNTAwXSxcbls1NS41NDc5NTIzNDU0LDM3LjU1MDUzNzkzNjA5OCwxMDAwXSxcbls1NS43NTcyMTg3NzkxOTQsMzcuNjU5MTMzNjE5MTQ4LDcwMF0sXG5bNTUuNzQ3NDcxNDUxOTQzLDM3LjcwNjg0NzM2NDkyNCw4MDBdLFxuWzU1LjUzNTAzNzUyNjAwMiwzNy41MjcxNjM2MTA0OTUsNDAwXSxcbls1NS44MTA5MTc1ODY4MTEsMzcuNjM4NDc0MDQwNDc3LDgwMF0sXG5bNTUuNzUyMTA5Mjg4MjIxLDM3LjU5NjI4NzcyMDY1Nyw4MDBdLFxuWzU1Ljc5NDI3OTg4Nzc3MSwzNy41NDM1NTM1MDEyNjUsODAwXSxcbls1NS43NjkyMTI0NDM3MjksMzcuNjcwNTg4MjkzMDA2LDgwMF0sXG5bNTUuNzc1MTI5NzUzNjkyLDM3LjU4MzkxMzExMTIyOSw5MjBdLFxuWzU1LjY1MzYyMjcxODI5OSwzNy42MjA3MDY0NTY5MjIsODAwXSxcbls1NS45ODI3NjU4NDUwNTgsMzcuMTc0NjMyNjcxMDgxLDgwMF0sXG5bNTUuNjM3NzUxODIxMzYsMzcuNjU2MjQ2ODU0NjI4LDgwMF0sXG5bNTUuNzQ2NTM1NjgxMzA3LDM3LjU2MTE0NzU3OTg1Miw4MDBdLFxuWzU1Ljc2MTE3MzY1OTM4NiwzNy41NzY1OTE0MDk0NCw4MDBdLFxuWzU1Ljc2MTM4MDM1NTI0NiwzNy42MjA3MTYzOTYyNDEsOTIwXSxcbls1NS43NTcyMTg3NzkxOTQsMzcuNjU5MTMzNjE5MTQ4LDgwMF0sXG5bNTUuNzQwODAxNjI4NDI3LDM3LjY1NzY1NTM0Nzc0NCw5MjBdLFxuWzU1LjY0OTk0Nzk0MDIzLDM3Ljc0NTk0NjcxNDUyMyw4MDBdLFxuWzU1Ljg0Nzc4MDI5MjM0MSwzNy4zNjAxMzA2MTkwOTUsODAwXSxcbls1NS43NTA2NTgyNjM5NTEsMzcuODE3NTc4OTk0NTY4LDgwMF0sXG5bNTUuNzgwMDAzNDMyMjg1LDM3LjYwMTE3NzIzNjYzNiw4MDBdLFxuWzU1Ljc1NzQ5NTIwOTA2MiwzNy42MTIxODEzMzM5MDYsOTIwXSxcbls1NS43NDc1MDgxNTg2OTUsMzcuNjgxNTQzMjI5MTA4LDgwMF0sXG5bNTUuNjc2MzI4NTQ1MjY2LDM3LjUwNDYzOTg1MjY5Niw5MjBdLFxuWzU1Ljc4MTE0NDk3NDQ0NSwzNy42MzE4OTYyNjIzMSw5MjBdLFxuWzU1LjYxMTA4MzYzMDA3LDM3LjYwNjg2MTgwNjE3Miw4MDBdLFxuWzU1LjgyMjUwNjc0MjA1NSwzNy44MjMyMzU3Njg2NDMsODAwXSxcbls1NS42NDAyNTc0MDIxNjUsMzcuNjA4Mzc4NjAyODUzLDgwMF0sXG5bNTUuODA5NDc4NDc4MDAyLDM3LjQ2NDQ4NzkyMTkzOCw4MDBdLFxuWzU1Ljc3ODgwODEzMTQyMywzNy42MzMyMTQ4MTEyMjYsMjMwXSxcbls1NS43MDkyMjUyNTc3NDIsMzcuNjE4NTA1Nzg0OTY3LDQwMF0sXG5bNTUuODQ1NTQ3NDUxMTE4LDM3LjY2MTA2NzEwODA1LDIzMF0sXG5bNTUuNzIzNDE2NzMwMzUxLDM3LjY1MTc2MTU2MTgwMiw2MDBdLFxuWzU1LjcyNzY0OTg3MjE5NywzNy42MjU4ODI3MTIwNDUsNDkwXSxcbls1NS42NDg4NTM5MjQxODksMzcuNTA1ODYxNTEwNjAzLDIwMF0sXG5bNTUuODQ1NTQ3NDUxMTE4LDM3LjY2MTA2NzEwODA1LDUwMF0sXG5bNTUuNzU2MTY4MDUzNDExLDM3LjYyNzU2MjE3NjM5MSwxMDAwXSxcbls1NS44NjY2NjgzMjMzNCwzNy40OTQ2MjU4ODgzMjksNTAwXSxcbls1NS43MzkwNTE2NDM2MDcsMzcuNTc1MTYzNjE0NzczLDI1MDBdLFxuWzU1LjczNTU4NDc5MDM3NiwzNy42OTYzMzQ2NzkwMzMsMzUwXSxcbls1NS43NTIwMzUwOTIyNzEsMzcuNTkxMTcwODUyMTQxLDc1MF0sXG5bNTUuNzg3MzY1MDkyMjAyLDM3LjYyMjc4MTg5NTExNCwxMjAwXSxcbls1NS43NTM4ODMzNDY1NDEsMzcuNDA2MzUzNDYyNDMxLDExMDBdLFxuWzU1LjczNDQ0MzA0NzE5NSwzNy42NzEwMDI0MjEwODQsODAwXSxcbls1NS42MTQ5NjMzNDUxMjksMzcuNzIxMzY4NzI3MjQxLDEwMDBdLFxuWzU1Ljc3MjE5NDE2NDIxMiwzNy41ODQ0NDAxMDgzMzcsODAwXSxcbls1NS44MTQzNjAyNDU0MDgsMzcuNjAxNjk0NTczODkyLDUwMF0sXG5bNTUuNzgyMzc1OTQ4MTg3LDM3LjYwMDkyMTYwMzYwNSwzMDBdLFxuWzU1LjY5MDUzNjg5NzU3NywzNy43ODY5MTQyNDczMDIsNzAwXSxcbls1NS43MTExODMxMTY5MjksMzcuNTA2ODk1NDIxNDY3LDEyNTBdLFxuWzU1Ljg4ODI5MDc4NTUyMiwzNy41MTQ5MTAxNjc0NzksNTAwXSxcbls1NS43Njc5ODg4MTQzNjEsMzcuNTk4NjQ5MjUyMDQ5LDEwMDBdLFxuWzU1LjgwOTQ3ODQ3ODAwMiwzNy40NjQ0ODc5MjE5MzgsNjAwXSxcbls1NS40MzMxMzkzMzE2MDgsMzcuNTQ5MjExNjU4MzYsNjAwXSxcbls1NS43MDM5NTA3MjEyNywzNy43NDI2Nzk0OTM1NDYsNjAwXSxcbls1NS42NDQ4NjM0NzYxNjksMzcuNDk0MzUyODUwOTM2LDk5MF0sXG5bNTUuNzgzOTQ5NTI4NjA4LDM3LjcwOTg4OTM1NDUzOCwxMDAwXSxcbls1NS43NjEzMzQ1NTM2MzYsMzcuNjgyMjA0NTgzMjk5LDk5MF0sXG5bNTUuNzY0OTgzNTI1Mjk2LDM3LjYwODMyNDg4NTMyMSw5OTBdLFxuWzU1LjQyODIxNjYzMDEzMSwzNy43Njc4NzI1Mzc4MywxMDAwXSxcbls1NS43NDc0NTYwOTkyNzYsMzcuNjA4MDE4MjA3NDExLDUwMF0sXG5bNTUuODU3NDI2NzU1NzAyLDM3LjQ5NTkyMTQ2ODU1Miw4MDBdLFxuWzU1LjY3OTU3NTExNjExMSwzNy41NzAxOTAwMDQwMzksMjUwXSxcbls1NS44MjcwMTYxMTE5NDksMzcuNjIyMjk0ODgzNzk4LDIwMF0sXG5bNTUuNzM1NTA0MDc1ODI2LDM3LjYzNzU1ODY4MzMyMyw3NTBdLFxuWzU1Ljg3NzI0NjM2ODk2LDM3LjUyMzM2MDEyOTA4NiwxMDAwXSxcbls1NS44NjAyNzM1MzkyMzgsMzcuNDk5MDgwMTU2NDg3LDY1MF0sXG5bNTUuNjc5NjM0MjY0ODA3LDM3LjU2NTUxNjA4MTU1Niw1NTBdLFxuWzU1Ljc2OTE5Njc0MDIxLDM3LjY3MTYyOTI3MTk4OCw2NTBdLFxuWzU1Ljg2NzU0OTc3MzkyOSwzNy40OTM0MDU2NTM0MzYsNzAwXSxcbls1NS43NDA4MTA0Nzk3MTQsMzcuNjIzNjQ0Nzc5NjMzLDcwMF0sXG5bNTUuOTIxMDQ2NjY2MzA2LDM3LjUyNTY1ODMzNDQ2NiwxNzBdLFxuWzU1Ljg2NDkyOTIxNjYzOCwzNy42MDUwOTQ3MTI3MTksODAwXSxcbls1NS43NDc3NTQ4Mjc3MjIsMzcuNjgwNjQzMDQ0OTEyLDU1MF0sXG5bNTUuNzQyODg1NTEzNDkzLDM3LjYyOTcyMzg5ODY0Nyw3MjBdLFxuWzU1LjgxOTMzMzI3NDc3MiwzNy45NjQxNjQ4NjM2NjYsNDUwXSxcbls1NS43OTI5MDQzMjgxNDksMzcuODk0ODk3NDE1ODI0LDgwMF0sXG5bNTUuNzk3NTIzMTk2MjIzLDM3Ljk2OTA1MDUxNDIyOSw3MDBdLFxuWzU1LjM4MjU0Mjc4OTgxNSwzNy41Mzc3MDcwOTkzMSw1MDBdLFxuWzU1LjgwMTA3ODMxNDE5OCwzNy45MzUxNzgwNTc5ODMsNTAwXSxcbls1NS43MDg3NzkzMjg3NDIsMzcuNjU4NTI4OTkzOTM2LDkwMF0sXG5bNTUuNzUwOTA1MDkxNTE2LDM3LjcxNzIwNjg5MTA5MywxMDAwXSxcbls1NS43NzgxNjU2Mzc2NTUsMzcuNTc0MDUyOTM5MzQ4LDgzMF0sXG5bNTUuNzAwMzc1ODQ3MTE5LDM3Ljc1MjE0MTIyNjYwOCw4MDBdLFxuWzU1Ljc2MDEzNzU4Mzg3OCwzNy41ODQ1Mzg5MjA3MTgsODAwXSxcbls1NS4zNzg2MTIyOTM5NzMsMzcuNTQxMTYwODAwOTU1LDMwMF0sXG5bNTUuODM5ODQ1MzUzMDcsMzcuNDg4ODI2Njg3MTkyLDEwMDBdLFxuWzU1Ljc2MzI2NDUzNTczMSwzNy42MDU1NjUzNDk5NTIsMTAwMF0sXG5bNTUuNzQ3NzYzMTkyODg1LDM3LjU2NjkyNzgyNTcyMywxMDAwXSxcbls1NS43NzcxNDYzMTU4NDEsMzcuNjYxNzU5MDM2Mzc0LDUwMF0sXG5bNTUuNzczODA3MzIwMTI3LDM3LjYzOTUzNDI3Mjk0MSw3MDBdLFxuWzU1Ljc2NDYyNzQyNTA0NiwzNy42NTczODYzNTU4NDgsODAwXSxcbls1NS45NzcyMTMxNTQzNDUsMzcuOTA4Mjc0NjgwMDg4LDcwMF0sXG5bNTUuNzkxNzY3ODg4Njk1LDM3LjY2MTA4MzIwMTIsNTAwXSxcbls1NS43NDQ0NTA4Mzc2NDUsMzcuNjc3NzQzMDQxNTQsMTUwMF0sXG5bNTUuNjc5NTE0NDI1NTMyLDM3LjUzNDAyMDk3MzA5Niw2ODBdLFxuWzU1Ljg1MTk3OTM2MDM0NywzNy40NDMwNjA0OTIwOTYsMTUwMF0sXG5bNTUuOTIzMzc3NzQ5MDM1LDM3Ljk4NTkxOTk1NzM5Nyw1MDBdLFxuWzU1LjkyMzE2MTExNjY5MywzNy45OTIwNDExOTk0NjksNTAwXSxcbls1NS45MjY0NDQwNDc2MjUsMzcuOTg0NTUyODA0MDUxLDUwMF0sXG5bNTUuOTI0NjU5NDg3MTU5LDM3Ljk3OTI1NTAyMTMzNywxMDAwXSxcbls1NS45MTk4MzQwNTI4MzcsMzcuOTk4NTg4MjM1MTQxLDgwMF0sXG5bNTUuOTIxMDc5NzI2NzU1LDM3Ljk5MzEyMTQzOTc2NiwxMDAwXSxcbls1NS43NjI5NTgwNzgyMDIsMzcuNjE5NjY4NTQyNzI1LDkwMF0sXG5bNTUuNzcxMzkxMjA1Njg1LDM3LjU4MzA1Njc3NDI4MSwxNTAwXSxcbls1NS45NzA3MzY1MDU0MDMsMzcuOTMwNTI1NzAxMjI3LDE4MF0sXG5bNTUuNjI1Njc4NzExMjcyLDM3LjcyMTk1NDg1MjgxNiw1NTBdLFxuWzU1LjU3OTU3NDQwOTA3LDM3LjY3NzE4NDE1NzQ4OCw2MDBdLFxuWzU1LjY3OTA4NjEyMTc0NywzNy42MjQwNTc0NjI0NTUsMTgwXSxcbls1NS43NjQyNTg3Njg0NzEsMzcuNjU3NzQ0NDE1OTk3LDEwMDBdLFxuWzU1Ljg2OTM1OTk3OTgzMywzNy42NzYwNjE4NTQ2MDIsNzAwXSxcbls1NS44OTg3MjgxMjEyMTQsMzcuNDEyMjQ4Nzg0NTI2LDE1MDBdLFxuWzU1LjYzMzUyMDc5NzkwNCwzNy43NDEyNDI5OTU2NDcsNDAwXSxcbls1NS44MzE2NDM4MTUyNSwzNy4zMDE3NjUwMDIxMzksMTc1MF0sXG5bNTUuNzM5MzM5MzY3MDU4LDM3LjY2NjM5OTk0MDkxNiw2MDBdLFxuWzU1LjczOTE5NzQ4MjAyMywzNy42NTU4Nzg2NDY5MDQsMjAwXSxcbls1NS43Mjg2ODU0OTc1ODEsMzcuNjEwODc0MjA4MTU0LDQ1MF0sXG5bNTUuNjU2NDQwMDk4MzIxLDM3LjU1NDQ5MzA4MTIxNCwyMDBdLFxuWzU1Ljc3Njg0MDgzMzk3MSwzNy42OTY0MTc0NTM5MzIsNTAwXSxcbls1NS43Njc0MTY1MjE1MzMsMzcuNTg3Nzk5NjgwNTg3LDIwMF0sXG5bNTUuNzQ4MjMyMjA3NzcsMzcuNzc2MTQxMTQ0OTA0LDEyMDBdLFxuWzU1LjY2MTE2OTI5OTU2MywzNy43NjAzMDkzNTQ1MzIsMTEwMF0sXG5bNTUuNzIzMzE4NzAwMTk0LDM3LjgyNTA4ODA3NjIxNyw5NjBdLFxuWzU1LjcwMjU3Njc4NDkyNCwzNy43NjYyODY1ODkxOTUsMTEwMF0sXG5bNTUuNzYxNDEzMzQ4OTI2LDM3LjYyMzc4NzY3NTI1OCwxMDAwXSxcbls1NS45MTY5MTU3Mzk0ODYsMzcuOTk3MTU1MTAwMjA1LDUwMF0sXG5bNTUuOTQ4ODM1NzM2MjY3LDM4LjA1OTQ2Mjc5MzQyNSw1ODBdLFxuWzU1Ljk2MDYyMzM1NDc3OSwzOC4wNDEzOTA2OTYzMDYsNTgwXSxcbls1NS43NjM3MjU4MTUzMTYsMzcuNTk0MTkyMzM5Njc3LDEyMDBdLFxuWzU1Ljc1NTI2Nzk5MDA3MiwzNy41NjAxODEzMzkyODMsMzAwMF0sXG5bNTUuOTQ4NzExMDkxMzQ3LDM3LjMwMTAwNjMwMzcxNSwxNTAwXSxcbls1NS44ODEzODMwMzc0MDIsMzcuNDMyODU3MDc0NTY4LDY1MF0sXG5bNTUuNTAwMDI3ODkxMTE2LDM3LjU3MDk3MjY3NDM2Niw4MDBdLFxuWzU1LjY3NjIyNjMwMDc0NiwzNy44ODk2ODcwMTY5OTMsMTIwMF0sXG5bNTUuOTE0MTIyMTczNjU1LDM3LjgxNDM5NTM2MDAzNSwxMjAwXSxcbls1NS44NTI3ODY1MzU0MDgsMzcuMTc5MTQyODgzNzQ1LDUwMF0sXG5bNTUuODE2NjE1ODA0NjExLDM3LjMzOTk5MzA1MDgwOSw0OTBdLFxuWzU1Ljc1NDM1OTA5MDg3NywzNy42MzY5NjUxNjk3MDYsMTAwMF0sXG5bNTUuOTQ1MTk1NTk1MDkzLDM3LjI4Mzk5Mzk4ODUzMSw1MDBdLFxuWzU1LjgzODg2NjI3Mjk2MywzNy4zMjI5Njc5MjI2NSw1MDBdLFxuWzU1LjgyOTIxMzM5OTQxOCwzNy4zMDU5MTc4Njg3OTgsMjgwXSxcbls1NS42MjE2NTUxMjEyOTEsMzcuNTA1MDEzNzA4MTUsNjAwXSxcbls1NS40NDcxNTI2MzMzNywzNy43NTkyMTcxNTkwOTQsNjAwXSxcbls1NS43ODI5MDc0NDYxMDcsMzcuNzIwNzg3ODgyNzM0LDYwMF0sXG5bNTUuODkzOTI3ODMzMDIyLDM3LjQwOTY0OTA1OTE1Niw2MDBdLFxuWzU1LjgyOTU0NDM1MjI1NywzNy4zMDgxNDg5Nzk0OTUsODAwXSxcbls1NS44MzkxMzY4NDAxODMsMzcuMzA0MDYxNzY2ODksMTAwMF0sXG5bNTUuODkzNTMyOTQ4NDM0LDM3LjcyNTUwMjk1MzcwOCw2MDBdLFxuWzU1LjkxMTg3MzU0NzA5OSwzNy43MzgzNzUwNTY4ODksNTAwXSxcbls1NS44OTI3NDk4OTMwMDIsMzcuNzI1OTM0OTU4MDQ2LDM1MF0sXG5bNTUuOTEzMjI5MDYzNjE4LDM3Ljc2NDA1NzQyNjg5NCw1NTBdLFxuWzU1LjkxNjQ0NDI1NjQ0NywzNy43NzI2NjI3NTM5MTcsMzgwXSxcbls1NS45MjY1MTgwMDQ0MjMsMzcuNzcxMzIwNTIzNDEyLDEwMDBdLFxuWzU1LjkwNDY3MzEyODQ0OCwzNy43MjUxMzYzNDIyNTYsMTAwMF0sXG5bNTUuNzg5NTY2MTkzMjMyLDM3Ljc1MjUyMDk4MTM1NSwzNTBdLFxuWzU1Ljc4OTU2NjE5MzIzMiwzNy43NTI1MjA5ODEzNTUsNDAwXSxcbls1NS42NTM4MTI0ODMyNzUsMzcuODQ0MzAwODkwMTcyLDI2MF0sXG5bNTUuNzgyOTA3NDQ2MTA3LDM3LjcyMDc4Nzg4MjczNCw3MDBdLFxuWzU1LjY1MzgxMjQ4MzI3NSwzNy44NDQzMDA4OTAxNzIsMzAwXSxcbls1NS43ODA3OTA1NzIxMDYsMzcuNjEyNjMwNDQxODUzLDUwMF0sXG5bNTUuOTAyNjMxODIwNjgyLDM3LjcxODE2MTczNzMyNSw4MDBdLFxuWzU1LjkyMTI1NDkzMzk1LDM3Ljg0ODYxMjI0MDM3Miw2MDBdLFxuWzU1LjkyNDUzMDY2NjkwNSwzNy44MjIyMjU4Nzc4MTksMjAwXSxcbls1NS45MjM0OTI0NDgwNDMsMzcuODEzOTY1NDMxMzI2LDYwMF0sXG5bNTUuODkxNzY0MzMwNTQ0LDM3LjcyNzIzMDg0MDc4Niw4MDBdLFxuWzU1LjkyMDgxMzEyODQyOCwzNy44NjM5NDM3ODkwODcsODUwXSxcbls1NS45MTI3ODMzODI0MTYsMzcuODU2ODUyOTQ2ODc4LDc1MF0sXG5bNTUuOTIwMjU3NzAyODcsMzcuODI4NDIwMTQxMTAzLDE1MDBdLFxuWzU1LjkxNDMxNDk3NjUyLDM3Ljg2NDEwNTM0NTI2Miw1MDBdLFxuWzU2LjAxMDM1OTI2OTQyMiwzNy44NDA0NTg5MTkyOTEsMzAwXSxcbls1NS45MTkxODAzMTkzNzQsMzcuODU1ODA3MTUxMDIxLDYwMF0sXG5bNTYuMDAwNzAzNzIwMDk2LDM3LjgxNTQxOTkxMTY3Miw1MDBdLFxuWzU1LjkxMTY1NzMzNDIyNCwzNy44MTIyODM3MTQ2MjQsMjcwXSxcbls1NS45ODU3Njc4MjEzNywzNy44Njc1NzQxNDIxNzMsNTAwXSxcbls1NS45OTYyNTczNDgwNDgsMzcuODY3NzE5OTExNTMyLDEwMDBdLFxuWzU2LjAwODczNzg3OTI3OCwzNy44Mzg0NTA5OTc5NzQsMTAwMF0sXG5bNTUuOTE0NDc5Mjc4Mjg0LDM3LjgxMTk4MTEyMDIyOSw2MDBdLFxuWzU1LjkxOTg2OTk1NDgzOSwzNy44NjkzMjExNTk3NTIsNjAwXSxcbls1NS43NjM0MDc1MzY0MDcsMzcuNjU1MTQxNDUyNTEsMzAwXSxcbls1NS43MjA4NDIzOTAxNjcsMzcuNjA5MzU0NTMwMjk5LDM1MF0sXG5bNTUuNzU4NzM4NzY1MDMxLDM3LjYxMjk4MDUyNTUzLDUwMF0sXG5bNTUuODQzMDUzMDE1NjI2LDM3LjQwMjgzNjM0MjMzNCwxMTAwXSxcbls1NS42ODc0MzgwMjMyOTIsMzcuNjA0Mzc2MTM1MTY0LDQ5MF0sXG5bNTUuNzU5OTY2NTc2ODU0LDM3LjYxNDE1MzA5MjE2OCw0MDBdLFxuWzU1LjcwNzEwOTEwOTMxNSwzNy42NTg4Mzg4MDAzODcsODAwXSxcbls1NS43NDk4ODMxODA3MDMsMzcuNTkzNTUxMDQzNjM2LDgwMF0sXG5bNTUuODA2ODAwMTY1MDQ3LDM3LjYzNzU5MjkxNDg3Myw4MjBdLFxuWzU1Ljc1NzcwODM2ODI2NywzNy41ODUzMDgxODgwNDEsODIwXSxcbls1NS43NzQ1Nzc4MTI1NTcsMzcuNTgxOTQ4NTM3MTkyLDgwMF0sXG5bNTUuNzczMTQ3MTQ3ODQzLDM3LjU5MDEzMDk3NDA4MSw4MjBdLFxuWzU1LjYzMzE1ODE4MDM0OCwzNy42MjQyODc0NTA1OTEsODIwXSxcbls1NS43NDY2MDY1NDc4NjgsMzcuNTU5NjAyOTQzOTcxLDgwMF0sXG5bNTUuNzU3Njg3OTU5MDU0LDM3LjQwNzE0MDk0MTA2NCw4MjBdLFxuWzU1Ljc0NDYwNjM0MTIzNSwzNy41NDU0Mjg2OTMzMSw4MjBdLFxuWzU1LjczMDU5OTA0MTc0MywzNy42MTE0NzgyODg2OTUsODAwXSxcbls1NS43Njg3MjY4ODYxMzUsMzcuNTk3NDc0NjQ5NTQ1LDgyMF0sXG5bNTUuNzU4NDU1MDUxOTQ3LDM3LjYxMTc2MTQyMzI3NCw4MDBdLFxuWzU1Ljc1NTc3NDg0MTIwNCwzNy42MTQ2Mzg5Mzg4NzIsODIwXSxcbls1NS43OTEyMzU2Mjc2MSwzNy42MzM1NzM0MjYwOTIsODIwXSxcbls1NS43OTQ0MDczOTc3NDMsMzcuNTgzOTYyNjcwNjE4LDgyMF0sXG5bNTUuNjc2OTQ5MDcyNTAyLDM3LjUwNDgzOTYyMTU1Nyw4MDBdLFxuWzU1Ljc5MjA5NjAxMjUzNywzNy41NzU5Nzc0OTQ3MTMsODAwXSxcbls1NS43MjgyMjA2NjE0NTIsMzcuNjI0MTg2OTc2NjAzLDgwMF0sXG5bNTUuODE4ODg1MTc4MTQ4LDM3LjU3Mzc5Njc2NDI1OSw4MjBdLFxuWzU1LjgwNTA1MjE1MDI4MiwzNy41MTcwODkwNTA3NjgsODIwXSxcbls1NS43MDg3MTQxMTQ4MTIsMzcuNjIyMDgxMDcyMjYxLDgyMF0sXG5bNTUuODQ2NzA0NTA3NTk4LDM3LjM2MjAzOTE5MTE2OCw4MjBdLFxuWzU1LjY5MTc1NzU4NDY1NywzNy41Mjk3MzU5NTgzNzMsODIwXSxcbls1NS43MzkyMTAyMTg3MzIsMzcuNDg0NTI4NTIzNTA0LDgyMF0sXG5bNTUuNzI0OTcxNDE3MTA1LDM3LjU4MDA5NTAzMTA4NSw4MDBdLFxuWzU1Ljc3MjkxMzA5Nzk2NCwzNy42MTAyMTYwNTY4NzIsODAwXSxcbls1NS43NzA1NjIzNTI2NDIsMzcuNjIwMDIyOTUyODk3LDgyMF0sXG5bNTUuODAzMTAzOTgxMjM2LDM3Ljc1Nzc1NjE4MjEyOCw4MjBdLFxuWzU1LjY0MDI1NzQwMjE2NSwzNy42MDgzNzg2MDI4NTMsODIwXSxcbls1NS43NjczMjA5NTExNTIsMzcuNjA2NzcxMTQyODY0LDgyMF0sXG5bNTUuODA5NDc4NDc4MDAyLDM3LjQ2NDQ4NzkyMTkzOCw4MjBdLFxuWzU1Ljc1ODYyMTc0OTk1OSwzNy42NDE2MzUzMjMzOTIsODIwXSxcbls1NS42NjUwNzQ0NjcyNDEsMzcuNDgxNTg3OTU2MDksODAwXSxcbls1NS45NDYzNzQ5NDkyNzEsMzcuNTA3MzAwMDk0OTY5LDYwMF0sXG5bNTUuODE0MTk1MTM2MjQ2LDM3LjM0MzMwOTAwMTY5MSw1MDBdLFxuWzU1LjkzMTkyOTQ0NDc3MywzNy41MjAwOTc4OTYxMzYsNDAwXSxcbls1NS42MTg2MjM5MzQ3MDksMzcuNTA3MjM0MjcxOTk4LDEwMDBdLFxuWzU1Ljc1NTc3NDg0MTIwNCwzNy42MTQ2Mzg5Mzg4NzIsMjYwXSxcbls1NS43NTU3NzQ4NDEyMDQsMzcuNjE0NjM4OTM4ODcyLDU1MF0sXG5bNTUuNzQ2NTM1NjgxMzA3LDM3LjU2MTE0NzU3OTg1MiwxNTAwXSxcbls1NS43NzE1ODczMTg3MzIsMzcuNTkyODA1NzIzNDYzLDI1MDBdLFxuWzU2LjAwNDI2ODc0MzY4NCwzNy44NzYxNzkzNTk0NDgsMjcwXSxcbls1NS45ODU5ODk0ODAxNjMsMzcuODcxODc1MjExMzQ2LDEwMDBdLFxuWzU1LjY4MjUyNDQ3ODU2OCwzNy44OTg3ODE0MzU4NjksNzAwXSxcbls1NS43ODQyOTE0OTcyODEsMzcuNzEwODQ0NzQxOTI3LDIwMF0sXG5bNTUuNzUzOTk4MDc0NzI3LDM3LjYzNTMyNjE0OTI1OSw1NjBdLFxuWzU1LjcwODcxNDExNDgxMiwzNy42MjIwODEwNzIyNjEsNTYwXSxcbls1NS43NjY3MjAxNjQwOTYsMzcuNjExMjM2NDE3Njk0LDU2MF0sXG5bNTUuODM0MjA4MTYyNzI2LDM3LjQxMDg1NjY3ODI4NCw1NjBdLFxuWzU1Ljc0NTE0ODA1MzM5NCwzNy41OTcxMDYyNTk3MzIsMTI1MF0sXG5bNTUuNzI2OTg2MTM5MjQ2LDM3LjU2MTM5NTY3OTYyNCw3MDBdLFxuWzU1LjY4MDM3MjA1NjgyNSwzNy44NzQ3ODk2NTI4NSw0MDBdLFxuWzU1Ljc1MDEyMDgzNjkyOSwzNy44ODc0NzQxNTA1MDksMjgwXSxcbls1NS43OTc2NDE4NDAxMDMsMzcuOTM5MTE0NTk3MDM3LDI4MF0sXG5bNTUuNzk0MzQyMzQ5ODgzLDM3LjkyNjI0Nzk5NjQzOSwyODBdLFxuWzU1LjY2ODE3MTY1OTUwNSwzNy44NzExMDYzNTU0NDgsMjgwXSxcbls1NS43OTM3MTMwOTIxODcsMzcuOTM2NjEwODUxNTQzLDI1MF0sXG5bNTUuNjU5MjM1ODAyNDE2LDM3LjkxNzIwOTc1NDg2MSwyODBdLFxuWzU2LjAwODM2NzkzOTQ4MywzNy40NDAwNDM2MDEwOTcsMjgwXSxcbls1NS42OTIyMjQ2MDI4MTgsMzcuODk2NDI5MTc5ODM3LDI2MF0sXG5bNTUuODkxNzY0MzMwNTQ0LDM3LjcyNzIzMDg0MDc4NiwyODBdLFxuWzU1LjkxNjU0NjM2NDc5MiwzNy43NTkxODYzNDg3NzYsMjgwXSxcbls1NS45MTE0MjExMjI4NjksMzcuNzc4MTcwMjg1ODE5LDI4MF0sXG5bNTUuNDIwMjY3OTYzMTA3LDM3LjU0Nzg0NzkyMzQ1MywyODBdLFxuWzU1LjY4NDA1Mzg0OTc0LDM3LjI5NTMyMDI5NjExOCwyNTBdLFxuWzU1LjQzNTE5NDc5Nzc3OSwzNy41NDk4NTYzODMzNDksMjgwXSxcbls1NS45OTUyNDc0MDcxNDksMzcuODY3MzIzMjc3NDg5LDI4MF0sXG5bNTUuNzQ2MTUyNDEyODMsMzcuODYyNzMyNTE2NDQzLDI1MF0sXG5bNTUuOTEwOTQ1NjU0MzM2LDM3LjM5NjEwNzc4MTU2LDI4MF0sXG5bNTUuOTA0OTc5MDkyOTE1LDM3LjQxNjc2MTQyNTgwMywyODBdLFxuWzU1Ljg1OTAyMzc1MTA4NSwzNy4zOTUxNTY2Mjc4NywyODBdLFxuWzU1LjU4NTI3MTcwNTUxOCwzNy43MjQ4OTI4NTMxMzMsMjgwXSxcbls1NS44OTE4MDA1MjMwNSwzNy42MTg2ODg4MjIxMDksNzAwXSxcbls1NS43Mzk4NTE5Njg1MTQsMzcuNjMyODY1MTEyMDE0LDc1MF0sXG5bNTUuNjA0NjU5NzE3NzU2LDM3LjQ4ODc4OTMwNDQyMiwyODBdLFxuWzU1LjY1ODg4NTc2NjcyMiwzNy40MzAxMzE1MzQ3NTYsMjgwXSxcbls1NS42NTM4MTI0ODMyNzUsMzcuODQ0MzAwODkwMTcyLDI4MF0sXG5bNTUuNzY0Mjk1MzczMjcyLDM3Ljg0NDk2OTMyNDY3NywyODBdLFxuWzU1LjY4OTUxOTcxNDIyMiwzNy44NzE0NzU5OTk3MDYsNTUwXSxcbls1NS42ODAzNzIwNTY4MjUsMzcuODc0Nzg5NjUyODUsMTAwMF0sXG5bNTUuNzA0MTY4MzU4MDM5LDM3Ljg5ODg3Mzk3OTU0NCw1MDBdLFxuWzU1Ljc4NTk0NDk2MDk0MiwzNy42MTIwMzkzMDc4MzQsMjAwXSxcbls1NS43NjE3MzA1NTU4MjQsMzcuNjE5MTAwNTQxMDg4LDI1MDBdLFxuWzU1LjY2NTA3NDQ2NzI0MSwzNy40ODE1ODc5NTYwOSwzNjBdLFxuWzU1LjgxODg4MTA2OTg1OCwzNy41NzczNjA0MDU2MjYsMzYwXSxcbls1NS43NDgwNTgwNjA5MzksMzcuNTg4MjE0NzQyMDYyLDM2MF0sXG5bNTUuNzIyMjU4MTIzOTg0LDM3LjUzMjE4MzI5NDIyOCwzMDBdLFxuWzU2LjAwMDM2NDA3NjUyOSwzNy4yMDU4Mzc5OTAwMzksMzYwXSxcbls1NS43NDEwMjU5Njg4NTksMzcuNjI3ODc4NTE0NzY0LDM2MF0sXG5bNTUuODUyNzk1ODY3MzkyLDM3LjU4NTgwNjgyNjk5NiwzMTBdLFxuWzU1Ljc1MjAzNTA5MjI3MSwzNy41OTExNzA4NTIxNDEsMzMwXSxcbls1NS44MDk0Nzg0NzgwMDIsMzcuNDY0NDg3OTIxOTM4LDMxMF0sXG5bNTUuNjU3MzE0MjU5ODIxLDM3Ljg0NTIzNDA1NzE5OSwzODBdLFxuWzU1LjcyNTUyODkwOTU4NCwzNy42NDU2MjMyNzI4NTUsMzEwXSxcbls1NS42MDQ2NTk3MTc3NTYsMzcuNDg4Nzg5MzA0NDIyLDI2MF0sXG5bNTUuNjkxNzU3NTg0NjU3LDM3LjUyOTczNTk1ODM3MywyNjBdLFxuWzU1LjkxMDk0NTY1NDMzNiwzNy4zOTYxMDc3ODE1NiwyNjBdLFxuWzU1Ljc0Mjc1MTczOTYxMiwzNy45ODUxNDAwOTc2MDMsNTAwXSxcbls1NS43NTEzNTA4MDU4NDQsMzguMDE4NzA1ODc5Mjc1LDUwMF0sXG5bNTUuNzI3OTk2OTYwOTk3LDM3Ljk2MTc5MjA1NjkyMyw1MDBdLFxuWzU1Ljc5NzM4NDU0OTMxMywzNy45NDA4OTM5NzA3MjgsMTgwXSxcbls1NS43NDQ0MTMzNjc4NjgsMzguMDIxODIyMjM0MjYyLDUwMF0sXG5bNTUuOTgyODA3MDQwMjM4LDM3LjE3MzMwMDU3NDAwNiwzNTBdLFxuWzU1Ljk5NzY0MzM2NDAwNywzNy4yMzY1MzY2ODk3NzIsNDAwXSxcbls1NS45OTEyNjA0MDcwNjksMzcuMjE2OTgyNDUzNjQ0LDI1MF0sXG5bNTUuOTc2MDk4NTQ5ODE1LDM3LjE1Njg3NDYxMDYyNyw1NTBdLFxuWzU1Ljc1MDg4OTM1Mzc5OSwzNy45ODUyOTc4MzA0MTQsMTUwMF0sXG5bNTUuOTc4NDg3NjEwNTYyLDM3LjE1NTY1NzI3MDI4MSw3MDBdLFxuWzU2LjAwMDE4MjczNjU1MiwzNy4yMDkxNzY0NjEwMzUsNjAwXSxcbls1NS45OTk3ODU4MTkzOTIsMzcuMjE2NTkyNzMwMDM0LDE1MDBdLFxuWzU1Ljk5NjczODIzMDU3MSwzNy4yMTYyMTU3OTY5MDQsNTAwXSxcbls1NS43NTczOTkyMzc3NzEsMzcuNjM0MDM2NzIwNzgzLDU3MF0sXG5bNTUuNzQyOTAwNTAzNTQsMzcuNTAzNTU5NzIxMzUzLDI1MF0sXG5bNTUuNzYyMTk0MTYwMjIxLDM3LjY4MTE1MjI2NzAwNywxODBdLFxuWzU1Ljc2MzQ4NTUyMDUzNywzNy40MTgwNzQ4OTg5NTksMzAwXSxcbls1NS43OTk4OTc4MjU0NzcsMzcuNDExNDY2ODE2MTI3LDUwMF0sXG5bNTUuNzUzMjc3MzQ0NjU3LDM3LjYwNjQwMjc2NzMwMiwyMDBdLFxuWzU1LjcyNzI1MDk0MjUzMSwzNy42MjY0OTA4MzUyOTQsMTAwMF0sXG5bNTUuNzQ0MDgwMzQ5NzYzLDM3LjYyNTE2NDkzMjA0NCw4NTBdLFxuWzU1Ljc0NDU2NDYwNjM0MSwzNy41NjU1MzUxNTMxNDQsMjMwXSxcbls1NS45MDk0MDE3Mjk1NDIsMzcuNTQwNDE4NTYxNDcyLDIzMF0sXG5bNTUuODIzMjg0MzMzMzU2LDM3LjQ5NzcwMzExNTI2NywyMzBdLFxuWzU1LjY4OTQwMTkzMTAzMiwzNy42MDE3MDg5ODQwMjMsMjMwXSxcbls1NS42NzE0NTIwMzY4MjksMzcuNTU0MDUyOTY1NDIxLDM0MF0sXG5bNTUuNjA5NzcyMjM5NjQ2LDM3LjcyMDA1Mjk0NzQ4Miw3MDBdLFxuWzU1LjY3MTQ1MjAzNjgyOSwzNy41NTQwNTI5NjU0MjEsNzAwXSxcbls1NS43NjI2NTc5OTQzMzgsMzcuNTk0ODYxOTE0MjY4LDUyMF0sXG5bNTUuNzYyNjk0MzQyMTU3LDM3LjQwODMyNDI3ODI3MSw1MjBdLFxuWzU1Ljc2MTc0MzQzNDM2OCwzNy42NDI4NTk5NzY4NDcsMTAwMF0sXG5bNTUuNzQzNzEzNTMwNzg4LDM3LjYwMTk1MTM1MzM0OSw1MjBdLFxuWzU1Ljc0MjQxNDQ2Mjk4OCwzNy41NDYzOTIxMjYwNjYsNTIwXSxcbls1NS44ODgwNjgxNDEzMjQsMzcuNDAwNjU3MjE4MjU0LDcwMF0sXG5bNTUuNzY2MzQwMzM3MjI5LDM3LjU5MDY2NjEyMzEwOCw1MjBdLFxuWzU1LjcxNTY5MDM4Njk1NCwzNy41OTE2MjE4ODk0ODYsNTIwXSxcbls1NS43MDg3MTQxMTQ4MTIsMzcuNjIyMDgxMDcyMjYxLDcwMF0sXG5bNTUuNzQ0NTY0NjA2MzQxLDM3LjU2NTUzNTE1MzE0NCwzMDBdLFxuWzU1LjgyMzI4NDMzMzM1NiwzNy40OTc3MDMxMTUyNjcsMzAwXSxcbls1NS42MDQ2NTk3MTc3NTYsMzcuNDg4Nzg5MzA0NDIyLDMwMF0sXG5bNTUuNzY1ODQ5NzgyODA1MSwzNy42MDI3NzAyMjAxMTIxLDI3MF0sXG5bNTUuNzQ5NTQ3NzA3NDI3LDM3LjU5MDkxNTI4MjUxNSwzMDBdLFxuWzU1Ljc3MjY2MzEyODQ0MSwzNy41OTI0MTA5Njk1MTksMTAwMF0sXG5bNTUuNzczNDYwNDU3ODU3LDM3LjU4NjgwMTY5NjA5Nyw4MDBdLFxuWzU1Ljc5MjAxMDEyMTk4OCwzNy43NDkxNjg1MzY4LDEwNzBdLFxuWzU1LjczMjE5NjcxMjQ3MywzNy42MTcxNzQwODQ4NTgsMjgwXSxcbls1NS42MTg2MjM5MzQ3MDksMzcuNTA3MjM0MjcxOTk4LDI2MF0sXG5bNTUuODM3MTcyMTYwMzQzLDM3LjY1NzY4Njg0NTIsOTAwXSxcbls1NS43NjYzMTM2NDkyNDQsMzcuNjYzNzIzOTU0NTA4LDkwMF0sXG5bNTUuODYzMTEwNDAwOTQ4LDM3LjYwMTk2NDUzMTEzNywyNjBdLFxuWzU1LjQzMTk3MzIzMjEzNiwzNy40OTE0ODY2NDg1NDksNzUwXSxcbls1NS41ODM5NTQzMzcwODQsMzcuNTk5Mjc4MzA5MjcyLDI4MF0sXG5bNTUuNzgyOTA3NDQ2MTA3LDM3LjcyMDc4Nzg4MjczNCwyNjBdLFxuWzU1LjY4NzQzODAyMzI5MiwzNy42MDQzNzYxMzUxNjQsMTA4MF0sXG5bNTUuNzgyNTc0MzM4Mjc2LDM3LjYyOTk0NTIyNzE3OSwxNTAwXSxcbls1NS43ODI2NzQwMzA2MSwzNy43MDUwNTkzNTExOTMsNTAwXSxcbls1NS44NTUyMDI2MTAxODQsMzcuNDc4MzkwOTc2NjY0LDkxMF0sXG5bNTUuODU5MDIzNzUxMDg1LDM3LjM5NTE1NjYyNzg3LDI1NzBdLFxuWzU1Ljc4MjUzNDgxNDE3NiwzNy43MTE2NzcwODcwNjYsNDAwXSxcbls1NS43NTcyMTg3NzkxOTQsMzcuNjU5MTMzNjE5MTQ4LDI2MF0sXG5bNTUuODIzMjg0MzMzMzU2LDM3LjQ5NzcwMzExNTI2NywyMDBdLFxuWzU1Ljg5NzUzMDI3OTg3NCwzNy42NjYxOTM5OTgzMjEsMjAwXSxcbls1NS43ODE2NDY4OTA2MDEsMzcuNzA1NDQ5MTY2OTUxLDIwMF0sXG5bNTUuNzA0NDQ0NjgzOTY1LDM3LjY1Mzg0NTkzMDk4OCwzNTBdLFxuWzU1Ljc4MjkwNzQ0NjEwNywzNy43MjA3ODc4ODI3MzQsMjQwXSxcbls1NS42MzM5MjQwMDQ4NjksMzcuNDQwMDczMjQ0NTgxLDIwMF0sXG5bNTUuNzYyMDY1NTk5OTgzLDM3LjY2MjgwNjA0NTI5NCw2MDBdLFxuWzU1Ljg1NTIwMjYxMDE4NCwzNy40NzgzOTA5NzY2NjQsMjkwXSxcbls1NS44NTUyMDI2MTAxODQsMzcuNDc4MzkwOTc2NjY0LDI2MF0sXG5bNTUuNTM0NzAxMzIyNTExLDM3LjUyNjEyNDAwNTMyLDkwMF0sXG5bNTUuNzY2MDU3MzAwMzkzLDM3LjU1NjU5MjI0OTQ5Niw4MDBdLFxuWzU1LjY0NzUyMTk1Nzg4NCwzNy41OTU2MTA1MjkzMTksMTM1MF0sXG5bNTUuNzc4NzA3MjQ1ODM2LDM3LjU5NjU1NjUwNjUyMiwxMDBdLFxuWzU1Ljc2MzA3OTYwNDQ1OCwzNy41NjAwMTc3NzUyMDEsMzUwXSxcbls1NS42NDc1MjE5NTc4ODQsMzcuNTk1NjEwNTI5MzE5LDcwMF0sXG5bNTUuNzY4ODQ0OTkxODI4LDM3LjU5NjIzMzI1Mzk1NiwxMDAwXSxcbls1NS42NTY3MDUzODAxLDM3LjU5NzI5MjMwNjgyNiwxMDAwXSxcbls1NS43NTczMTc1NzgzNSwzNy42MDI2NzU4MDQyODIsNDAwXSxcbls1NS43NDE4MzY2ODM2ODQsMzcuNTk5MTYxMzI0NiwxMjAwXSxcbls1NS43NjQ5ODM1MjUyOTYsMzcuNjA4MzI0ODg1MzIxLDEwMDBdLFxuWzU1LjY1MzM4ODQxNjc3LDM3LjU5NDEyMTM5MzA5MSw0MDBdLFxuWzU1Ljc2MDIzNzU1MDQ5LDM3LjYxMzA0OTIzOTIzOSwyMDAwXSxcbls1NS44NjMwMTkwOTEyNDEsMzcuNjA2OTQwMjE3NTg5LDUwMF0sXG5bNTUuNzg4NjkyMDc5NjYyLDM3Ljc4NzMzODM1MzQ5Nyw4ODBdLFxuWzU1LjgyMjQ0NzAxODM2LDM3LjY0NTkwODI5ODg1Myw4ODBdLFxuWzU1Ljg4OTg2MjgxNDA2NywzNy41OTEyNjE1MDUzOTQsOTAwXSxcbls1NS44ODgwNjgxNDEzMjQsMzcuNDAwNjU3MjE4MjU0LDU3MF0sXG5bNTUuODk0ODY2Mzc4NDQsMzcuNTg1NTQ4NDQyMjYsNTEwXSxcbls1NS44NTcxNzEzODM0MjIsMzcuMzUwMzA4MTQ3Mzg4LDU3MF0sXG5bNTUuNzc3Mjk2NjgxMTI1LDM3LjQ1NzE1ODQyNTgxNyw1NzBdLFxuWzU1Ljc1MTE3MjA2OTI3MSwzNy43ODk1OTM1OTQ5NTEsNTcwXSxcbls1NS43Mjc5ODI4NTc0NTUsMzcuNTgwNTQ4MDA0NDg4LDU3MF0sXG5bNTUuNjc3NjM4NTczNzM0LDM3LjU3NDQxOTI4NDU5Nyw1NDBdLFxuWzU1LjczOTk4NDgyMjIxLDM3LjUwMjQ1ODQ2NzMzOSw1NDBdLFxuWzU1Ljc5MDA2MDk2NjAzNSwzNy42MDU0NjgwNzc4ODgsNzAwXSxcbls1NS43NDQ1NjQ2MDYzNDEsMzcuNTY1NTM1MTUzMTQ0LDEwMDBdLFxuWzU1Ljc0NDU2NDYwNjM0MSwzNy41NjU1MzUxNTMxNDQsNTUwXSxcbls1NS43OTEyMTI5NDM1NDMsMzcuNjM1MTc5ODc3MTAxLDgwMF0sXG5bNTUuNzgxMjM4NTI2MzM5LDM3LjYwNzE1NDQwMDQzMSwxMTAwXSxcbls1NS43NDY3MDY0Mzc0ODksMzcuNTM3NTQ2MzcxOTQyLDMwMF0sXG5bNTUuNjQ3NTIxOTU3ODg0LDM3LjU5NTYxMDUyOTMxOSwyMzBdLFxuWzU1Ljc3NjkxMjcyNjA2MSwzNy42NTkzOTY4MzY3NzksMjMwXSxcbls1NS45MjQyMDY1NzE0MDQsMzguMDAxMDYyNDU0NTQ5LDEwMDBdLFxuWzU1Ljc5OTc0NzUyMDIwMywzNy40ODI5ODM0MDUxODMsMjQwXSxcbls1NS45MjY4NzEwMjk1NDUsMzcuNzk5NTYxMTMyMDQxLDMwMF0sXG5bNTUuNjQwOTI5MzA5Njk4LDM3LjUzMDgwNTcyMzk2OSwyNDBdLFxuWzU1LjY0MDkyOTMwOTY5OCwzNy41MzA4MDU3MjM5NjksNDAwXSxcbls1NS43NTIwOTgwMTM1MDIsMzcuNTk4OTYxMTg0MzExLDQwMF0sXG5bNTUuNzMwMTQ2NDg0NDI1LDM3LjYzNTgwMzQyODE4OCwyMDBdLFxuWzU1LjQyMDI2Nzk2MzEwNywzNy41NDc4NDc5MjM0NTMsMjYwXSxcbls1NS43NzA1MzY2ODU2MjcsMzcuNDIxMzg0OTc3MTIxLDIwMF0sXG5bNTUuNzI3NjIzNTQ3MzMxLDM3LjQ0OTQ0NTI5ODc0NCwyMDBdLFxuWzU1LjcyMjA4MjQ0OTEyOSwzNy42NTE0NzQ5Mzc3MTQsNDAwXSxcbls1NS43Mzc5ODU1OTEzNzMsMzcuNjM3OTY4MzgzMzI2LDIwMF0sXG5bNTUuNzc5MjM4NTgyMzc2LDM3LjQ4MDMwODQ4MTIwNiwxMDAwXSxcbls1NS43NzcwNzI5MDkwODUsMzcuNDgwNTk2NTQwODAxLDE1MDBdLFxuWzU1Ljg4NDY3NTcwMTY5OCwzNy42MDM3OTgxNTE3NTksMTAwMF0sXG5bNTUuNzQwODAxNTAwNzg5LDM3LjY1NzY1NjE0OTE5NSwyMDBdLFxuWzU1Ljc2Mzk1NzY3NDUxNywzNy42NjAwNjE1NDIxNjMsNTUwXSxcbls1NS43NTUyMTUzNjMzNDIsMzcuNzE1NDU5MDIzNjY4LDQzMF0sXG5bNTUuNzE3NzMzMTAwMzQzLDM3Ljc4NjY0MTMxMjQwNSw5NDBdLFxuWzU1Ljc3NjYyNjE2NTMxNiwzNy41NzUwODA5MzkyNjksNjUwXSxcbls1NS43NzQxMTM0OTMxNzQsMzcuNjU0OTEwMzczMDU1LDUwMF0sXG5bNTUuNzAxMzE3NzQ2ODA2LDM3Ljc5MTAxNjEzNDE2OCw3MDBdLFxuWzU1LjcwMTgyNTQ0MTgxMywzNy43ODg2NDMyNzk3NzgsNjAwXSxcbls1NS43MzM5ODIxMDk2NzYsMzcuNTY0NTQ0MjQyMDU0LDcwMF0sXG5bNTUuNzU5NjcyODIwNTY2LDM3LjU3NDgxMjg1NTkwOCwxNTAwXSxcbls1NS43MzU1NzA0MDY3OTgsMzcuNjY5NTg2MjczOTUsMTYyMF0sXG5bNTUuNjEyMjU2NzA5NTM3LDM3LjUzNjk3MTM2MjcyNiw1MDBdLFxuWzU1LjczOTQ0OTA3NDcxLDM3LjY2NDc1MjIxODI5LDI1MF0sXG5bNTUuNzc2MDA5MjIyNTQ2LDM3LjY2MDUzMTMwMDEzMiwzNTBdLFxuWzU1LjczOTA0NTk4NDMzMywzNy42NjgxNzQzMjg0NjksODAwXSxcbls1NS43NjExMzQ0OTQ4OTIsMzcuNTcxMDk0ODUyMDczLDEwMDBdLFxuWzU1LjYzMzkyNDAwNDg2OSwzNy40NDAwNzMyNDQ1ODEsMTAwMF0sXG5bNTUuNzcwNDMyNDkxODU4LDM3LjY1MDc5NTUxODM4OCwzMDBdLFxuWzU1LjYzNTE3MTk2ODg4MywzNy40MzY5MzcxNzYyNzQsMjUwXSxcbls1NS43ODAyMTQ3NTc5NDQsMzcuNjkyMDUxNjIwMDA5LDMwMF0sXG5bNTUuNjc4NjM1MDc0ODc1LDM3Ljg5MjU5OTUzNTgyNiwyMDBdLFxuWzU1Ljc0NzQ3MTQ1MTk0MywzNy43MDY4NDczNjQ5MjQsMjAwXSxcbls1NS44NDU1NDc0NTExMTgsMzcuNjYxMDY3MTA4MDUsMzAwXSxcbls1NS43ODU1Mzk3OTk2NDUsMzcuNjY1MzUwODAxNDIzLDIwMF0sXG5bNTUuNzM5MzYxODkwODQyLDM3LjU3NTQwNzE2ODgxMiwxMDAwXSxcbls1NS43NTMwNDk1Mjc4ODYsMzcuNjY3MDUzNTk2NDYsMTUwMF0sXG5bNTUuNzMyMTk0NDY2NDg2NiwzNy41ODg4OTU4NTA5MTE2LDc1MF0sXG5bNTUuNzYyNTA2NDgxNzAxLDM3LjU5Mzc0NTk2MDI3NSwyMzAwXSxcbls1NS43NTA0OTU4MTM4NjEsMzcuNTk0MzU1MjkzODkzLDc1MF0sXG5bNTUuNzUyMTA5Mjg4MjIxLDM3LjU5NjI4NzcyMDY1Nyw1MDBdLFxuWzU1LjczMDQ2NjEwNzY0NCwzNy41NzkyMzg4MjgzMjMsNTAwXSxcbls1NS44MDE4NDA0MTU3NjgsMzcuNTg0ODg3MzYwOTQ2LDQwMF0sXG5bNTUuODU5OTA4NTA5MzkyLDM3LjQ2Nzc0NzMyNzE3NCwxMjUwXSxcbls1NS43NjkwMTMyNzIwODMsMzcuNjI3NzQ5MTI3MDE1LDcwMF0sXG5bNTUuNzE0MTEyMTY3MDM0LDM3LjU3NDQwNTc5MTY2OCw3MDBdLFxuWzU1Ljc3NzgwNzQ4MzAwOCwzNy42MjgzMzkwMTM2MTcsNTAwXSxcbls1NS43NDM0NDY3MDY2MSwzNy42NTIyMjc5MzA0MDEsNjAwXSxcbls1NS43MzAzMjg1MzUyMDQsMzcuNjIzNTMzNjQ5NzUxLDcwMF0sXG5bNTUuODAxOTQxNjk2OTQxLDM3LjUzMTk0NTk0MTYsMjYwXSxcbls1NS43Mzc5NDE1MDg1OTUsMzcuNjM0MzA1MDUzOTU4LDEzMDBdLFxuWzU1LjgwMTk0MTY5Njk0MSwzNy41MzE5NDU5NDE2LDM1MF0sXG5bNTUuNzczNDYwNDU3ODU3LDM3LjU4NjgwMTY5NjA5Nyw3MDBdLFxuWzU1Ljc3MTU5ODA4Njc1OTEsMzcuNjMyNzUwMDA4ODA4LDEwMF0sXG5bNTUuNzY2OTMyOTE0OTg0LDM3LjYzMjg0MTE3NDcxNywxMDAwXSxcbls1NS44MDk0Nzg0NzgwMDIsMzcuNDY0NDg3OTIxOTM4LDE2MjBdLFxuWzU1Ljc3MDU3MDkyNDIzNSwzNy42MzcwMzQ4NzI2NTQsMzAwXSxcbls1NS43MzkyMjE2OTE4NDIsMzcuNjc1MDE2NzU5MTIzLDcwMF0sXG5bNTUuNzQ5NDQzODE5MzgzLDM3LjY0NTExNjc1NDkzMywxMDAwXSxcbls1NS43NTA2MTM4NjY3NzcsMzcuNjUzMTgwMDg3ODEzLDcwMF0sXG5bNTUuNzQ4MDU4MTIwODgxLDM3LjU4ODIxNDczOTg5NywzODBdLFxuWzU1LjU4NTI3MTcwNTUxOCwzNy43MjQ4OTI4NTMxMzMsMzgwXSxcbls1NS43MDY5MjY4NjUwMTEsMzcuNTkyMTUyNjU4NzI2LDMxMF0sXG5bNTUuODQzOTI5OTY1MTAxLDM3LjU2OTk0MjgzMTA2Nyw1MDBdLFxuWzU1Ljc3MDM2MDk2MDU5NiwzNy44MzI3NTI5NjIyNDYsMTEwMF0sXG5bNTUuNzc0OTk0NTgyMDg2LDM3LjU4MzI0MDkwNTEzMiwxMDAwXSxcbls1NS43NzQ1Nzc4MTI1NTcsMzcuNTgxOTQ4NTM3MTkyLDEwMDBdLFxuWzU1LjczNzU4Mjk0NzA0MiwzNy44MjAwMzQyNTI5NzUsMTQwMF0sXG5bNTUuODYzNzEyNjgzNjAxLDM3LjU0NTgxNTAxMTgyNywzNDBdLFxuWzU1LjYzMzE1ODE4MDM0OCwzNy42MjQyODc0NTA1OTEsMjYwXSxcbls1NS44MTAxNTQzNjU5NzMsMzcuNDkyNTI1MjcwNTkzLDcwMF0sXG5bNTUuODg2NDkwNjk5Mzc2LDM3LjY1Njg2MjI1NjkxMSw0MDBdLFxuWzU1Ljc4MTk3NDU0Nzk1LDM3LjcwNDQ2MTk0MzIyMiw1MDBdLFxuWzU1LjgxMDUwNTA2NTY4NSwzNy4zODMwODg4NTk2MzgsMjkwXSxcbls1NS44MTA1MDUwNjU2ODUsMzcuMzgzMDg4ODU5NjM4LDIwMF0sXG5bNTUuODEwNTA1MDY1Njg1LDM3LjM4MzA4ODg1OTYzOCw1MDBdLFxuWzU1Ljc0OTIxODcxOTQ4LDM3LjU0MDAwNjI0NDg5MSw1MDBdLFxuWzU1Ljc0OTIxODcxOTQ4LDM3LjU0MDAwNjI0NDg5MSw0OTBdLFxuWzU1LjcwODcxNDM2MTMxNywzNy42MjIwNzQ2MTgxOTQsMjYwXSxcbls1NS43Mjk3NTU4MjM3NzgsMzcuNzMyMTIwMjM5NzI2LDEwMDBdLFxuWzU1Ljc0OTIxODcxOTQ4LDM3LjU0MDAwNjI0NDg5MSwzMDBdLFxuWzU1LjY5Mzg1NTc3MjY5MSwzNy44MjQ0MjQ4OTA3NTgsNjAwXSxcbls1NS43NDkyMTg3MTk0OCwzNy41NDAwMDYyNDQ4OTEsMjAwXSxcbls1NS42NTk0OTE1Mjc4OTIsMzcuNzQ5NjA0NDE5MDQxLDM1MF0sXG5bNTUuNzQ5MjE4NzE5NDgsMzcuNTQwMDA2MjQ0ODkxLDY1MF0sXG5bNTUuNzQ5MjE4NzE5NDgsMzcuNTQwMDA2MjQ0ODkxLDgwMF0sXG5bNTUuNzQ5MjE4NzE5NDgsMzcuNTQwMDA2MjQ0ODkxLDEwMDBdLFxuWzU1LjcyOTc1NTgyMzc3OCwzNy43MzIxMjAyMzk3MjYsNTAwXSxcbls1NS43NDkyMTg3MTk0OCwzNy41NDAwMDYyNDQ4OTEsMzUwXSxcbls1NS43NDkyMTg3MTk0OCwzNy41NDAwMDYyNDQ4OTEsMzUwXSxcbls1NS43MDQ4ODQ5OTM1NjIsMzcuNzY0ODQxMjYxMTc2LDI2MF0sXG5bNTUuNzMwMzgyOTM4NzgyLDM3LjczNzEwNzU4MDE2MywyMDBdLFxuWzU1LjU4MDM3MjI4NjYxMiwzNy43MDM2ODA2MDM1NjEsNDAwXSxcbls1NS43NTk4ODMzNDIxNzYsMzcuNjQ3ODg2ODUzMTc2LDgwMF0sXG5bNTUuNzQwOTgzNTMxNjg3LDM3LjYyODIyMjQ4MjIzNCwxMDAwXSxcbls1NS44Njg2NTQ3NjkyNTMsMzcuNjYyNDU3NTg5NTQ0LDUwMF0sXG5bNTUuNzY0Mjk1MzczMjcyLDM3Ljg0NDk2OTMyNDY3Nyw3NTBdLFxuWzU1LjY4NjMyMzQwNTc1OSwzNy44NTAxMzM5MjkwMzcsNTAwXSxcbls1NS43MzMwMzY3ODkzNTksMzcuNDgxMTgyNTYxOTQ0LDIwMDBdLFxuWzU1Ljc4ODYwNjg0NzQ3OCwzNy43NjE2ODU3NDM2MjEsNDUwXSxcbls1NS43NTI1MzE5MzgyMDcsMzcuNjMyNzkzMDIxMjMxLDMwMF0sXG5bNTUuODY5ODg2MzA0MzkzLDM3LjU4ODQ2MjIyNjI3OSw5MDBdLFxuWzU1Ljc1OTE1NzAyNDc0MSwzNy42NDYxMTA5OTM0MDYsMTYyMF0sXG5bNTUuODE3MTgzNjE5OTkzLDM3LjQ4NjA1MzM5MjI4LDgwMF0sXG5bNTUuODM2MTEzMzc0NjE0LDM3LjYxNDk1MjE4MzY0MSw5MDBdLFxuWzU1LjY2OTQ3OTYzNTAyNywzNy4yODIwOTkxODk3MDgsODUwXSxcbls1NS43NzAwMDY0ODQ5MjQsMzcuNjc4OTYyMDY1NzM5LDE1MDBdLFxuWzU1Ljc5ODM5MTc5NzAxNiwzNy41ODA1NjMzNzkyNyw2MDBdLFxuWzU1Ljc5OTcyMzEyMDg3MiwzNy41ODE4MDI1MzM5OTEsOTAwXSxcbls1NS43MzIxOTY2NjIzMTMsMzcuNjM1NjU0MjA1OTA2LDMwMF0sXG5bNTUuODE3MjUxNTUzODI5LDM3LjM4NzcyNDg5NjcwNiwzNTBdLFxuWzU1LjkxMDkxODA5OTgxMiwzNy43MzY1OTc3NjM4NTEsNjAwXSxcbls1NS43MjEzODc2MjAzMSwzNy42MDIwMTEwMzgxOTksMTI1MF0sXG5bNTUuODI2Njk2NTU5MzQ1LDM3LjQ0NTI5MTE5NDczOSwxNzBdLFxuWzU1Ljg3NzI5NzQ3ODYzNSwzNy42NTE2OTQ3ODEzNzUsNDAwXSxcbls1NS43NzgzMjQ5MDM4NTEsMzcuNjk5NjA4NTg0MTcsMTkwXSxcbls1NS44Nzc2OTIxMDIxMTMsMzcuNjQ2ODc1NDk4NDg5LDQwMF0sXG5bNTUuNzU3MDcyMTM0MjI2LDM3LjYzMTk3NjM0NTgzLDE1MDBdLFxuWzU1Ljc1Nzk5ODg5MDg3OSwzNy42MjMyMjIxOTk5MDEsNjAwXSxcbls1NS41ODUyNzE3MDU1MTgsMzcuNzI0ODkyODUzMTMzLDg1MF0sXG5bNTUuNzcyNDYzNjM0ODY4LDM3LjYxMDkxMDIyODc1MiwxMDAwXSxcbls1NS43NjMxNjYyNTU4MzIsMzcuNjI1OTg0Njk5NTU5LDM1MF0sXG5bNTUuNzQzMTU4MjgyOTI2LDM3LjU2NzM2MzkzMjAyLDQwMF0sXG5bNTUuODg2NTk5MDkzNjM2LDM3LjY2MDE1NDc1NDQ2LDk2MF0sXG5bNTUuNzU3NDU0MDUyNjI0LDM3LjYzNDUxMzY3OTA2NSw2MDBdLFxuWzU1Ljc1NDU4ODgxODgxOCwzNy42MzQ3OTkyNzM3NjMsNTAwXSxcbls1NS43NTc5NDkyMjIxMzksMzcuNjMzNTk0NTUwMjk0LDQwMF0sXG5bNTUuNzY1NzE2OTUwODE5LDM3LjYzNDczNzQ3MDk2MSw1NzBdLFxuWzU1LjY1NTg1MzgxMjEwOCwzNy41NDE4OTEwMTY5NTIsMjAwXSxcbls1NS42NTU4NTM4MTIxMDgsMzcuNTQxODkxMDE2OTUyLDgwMF0sXG5bNTUuNzY1MTc5MTA2NjczLDM3LjYzNDM3MTgxNzUyNiwxMDAwXSxcbls1NS43MzkyOTY1MTA0NzgsMzcuNTQ4MjUwOTU5OTE1LDUwMF0sXG5bNTUuNzc3NzEwNzAyOTQyLDM3LjYwNjk1NTc4MTMxMSwyNTBdLFxuWzU1Ljc1MzgxMjY4NzcxMiwzNy42MzYwNzA3MDU2MSwyMDBdLFxuWzU1Ljc0NDgxMDA2OTY4OSwzNy41NTUyMDA4MjAyMDksNTAwXSxcbls1NS43NDM3MzA3OTk5OTcsMzcuNTU1OTcyMjM1MTIzLDI1MF0sXG5bNTUuNzYyMDY3NDMzNTk4LDM3LjYyMTEyMzg5NTk5OSwxNTAwXSxcbls1NS43NDI1MDMwODI1NjksMzcuNTQ5NjAyMDc5ODA5LDEwMDBdLFxuWzU1Ljc2MjIyMzYzNTkxNSwzNy42MzQ2NjM4Mjk0ODcsMTAwMF0sXG5bNTUuODEwMjgwNTQ5NzkzLDM3LjQwNDU5MDQzNzM0LDc1MF0sXG5bNTUuODUyNTM4MDgxNTMxLDM3LjM1MDkzNjQ1Njk3NSwxMDAwXSxcbls1NS42OTU4NjEyNjkwOSwzNy42NjQ5MjU3NjI1NCw4MDBdLFxuWzU1LjYxNDg4MTU3NDk3NywzNy43MTIxNzg5MTQ4Myw2NTBdLFxuWzU1LjU4NTI3MTcwNTUxOCwzNy43MjQ4OTI4NTMxMzMsMjUwXSxcbls1NS43MjUxNjcxNzEyNDQsMzcuNTYzNDY0MDgwOTg4LDYwMF0sXG5bNTUuNTg1MjcxNzA1NTE4LDM3LjcyNDg5Mjg1MzEzMyw4MjBdLFxuWzU1LjU4NTI3MTcwNTUxOCwzNy43MjQ4OTI4NTMxMzMsMTAwMF0sXG5bNTUuNTg1MjcxNzA1NTE4LDM3LjcyNDg5Mjg1MzEzMywyNTBdLFxuWzU1LjU4NTI3MTcwNTUxOCwzNy43MjQ4OTI4NTMxMzMsNTAwXSxcbls1NS43MDg3MTQxMTQ4MTIsMzcuNjIyMDgxMDcyMjYxLDExMDBdLFxuWzU1LjY1NTg1MzgxMjEwOCwzNy41NDE4OTEwMTY5NTIsNzAwXSxcbls1NS43NTIwMzIxMDgyNjksMzcuNTkyNjE5OTgwNzM0LDIyMF0sXG5bNTUuNjQwOTI5MzA5Njk4LDM3LjUzMDgwNTcyMzk2OSwyNTBdLFxuWzU1LjY5MTc1NzU4NDY1NywzNy41Mjk3MzU5NTgzNzMsMjUwXSxcbls1NS44MjMyODQzMzMzNTYsMzcuNDk3NzAzMTE1MjY3LDI1MF0sXG5bNTUuNzYzODczMDEwOTAyLDM3LjY0NjA5NjU4NzUwNyw5NDBdLFxuWzU1Ljc2MzMyMTM0NjA5NiwzNy42NTc2ODAxOTY3OTEsOTQwXSxcbls1NS44NDEyNzE0MzcwNzIsMzcuNDk3ODYzMDgyODA4LDQ1MF0sXG5bNTUuODAwMjI1MzcyNTczLDM3LjU4Njk0NzE1MjMzLDEwMDBdLFxuWzU1Ljc4ODAxNTc1MzIzOSwzNy41OTM1Mzc2ODQ4OSw4MDBdLFxuWzU1Ljc4Nzc1MTc0NzQ1NCwzNy41OTM4NDQ5NTQ2MjEsNzAwXSxcbls1NS44Mzk2NjM5MjE0NywzNy40ODY2OTk1MDU3MjksMzAwXSxcbls1NS44NDI0MjkyNTI1NjgsMzcuNDg0MzgyNjMwNjY4LDMyMF0sXG5bNTUuNzU3NTMwNDI1NTYzLDM3LjYwODM3NDI0NTEzNSw0NTBdLFxuWzU1Ljg4NDk2MDk3MTY3OSwzNy40MzkzMzA0MzM4MTcsMTEwMF0sXG5bNTUuNTg1MjcxNzA1NTE4LDM3LjcyNDg5Mjg1MzEzMywzMDBdLFxuWzU1Ljc1ODY4MzkxMDc0OSwzNy42NTkxMDI2MjU4NzgsNjUwXSxcbls1NS43ODQwNTUzNDIzMzksMzcuNjM1NDA1NzM0MTk1LDcwMF0sXG5bNTUuNzQ0NTY0NjA2MzQxLDM3LjU2NTUzNTE1MzE0NCwyNTBdLFxuWzU1LjcwNjkyNjg2NTAxMSwzNy41OTIxNTI2NTg3MjYsMjUwXSxcbls1NS43NDc0NzE0NTE5NDMsMzcuNzA2ODQ3MzY0OTI0LDI1MF0sXG5bNTUuODIzMjg0MzMzMzU2LDM3LjQ5NzcwMzExNTI2NywyNTBdLFxuWzU1Ljg0MTg2OTgzMTYzMiwzNy40ODc5NzQwMzgyNTIsMzAwXSxcbls1NS44NTY1NTA1NzQzMzgsMzcuMzQ0NzUyNjQ1OTQ1LDIwMDBdLFxuWzU1LjgyMzI4NDMzMzM1NiwzNy40OTc3MDMxMTUyNjcsNTAwXSxcbls1NS44MjMyODQzMzMzNTYsMzcuNDk3NzAzMTE1MjY3LDcwMF0sXG5bNTUuODQ2MTcwNDcwMjQ2LDM3LjM1Nzg4ODg4MDAzNywxMDAwXSxcbls1NS43NzIxODg2MDI2NDMsMzcuNTkyOTYzMDA4MTEzLDg1MF0sXG5bNTUuNzQwOTYxOTIwOTIyLDM3LjQxNTQ4NDgxODg1OCwxNTAwXSxcbls1NS43NzMxNjM1OTU4NDUsMzcuNTk0OTAyNTg4NjQ2LDc1MF0sXG5bNTUuNzQwOTYxOTIwOTIyLDM3LjQxNTQ4NDgxODg1OCw4MF0sXG5bNTUuNjY1MDc0NDY3MjQxLDM3LjQ4MTU4Nzk1NjA5LDI2MF0sXG5bNTUuNjY1MDc0NDY3MjQxLDM3LjQ4MTU4Nzk1NjA5LDI2MF0sXG5bNTUuNjY1MDc0NDY3MjQxLDM3LjQ4MTU4Nzk1NjA5LDMwMF0sXG5bNTUuNzk4NTc5MjY3MzgzLDM3LjU5NTIyMDQwMTg4MiwzNTBdLFxuWzU1Ljc2OTcyNTQ4MzgxMiwzNy40MDc1MzA5NjA4MDIsMTIwMF0sXG5bNTUuNzkzNDM2MzExOTg3LDM3LjY5MzUzMTY2Mjc5Myw0NTBdLFxuWzU1Ljc0ODg2Njk5MjczLDM3LjU2MzUxMTU2MDQ0MywxNzUwXSxcbls1NS44MDYzNjgxMjQ1MiwzNy40MTgwMjc0MDEwNTQsMTI1MF0sXG5bNTUuNzU4NjMxNjE3MTUsMzcuNzQyNjI5MzAwNjYzLDUwMF0sXG5bNTUuNzQ3NDcxNDUxOTQzLDM3LjcwNjg0NzM2NDkyNCw0MDBdLFxuWzU1LjcwNjAyOTQwNDkzLDM3LjQwNDM1NjIyNTYyMiw1MDBdLFxuWzU1Ljc0NzQ3MTQ1MTk0MywzNy43MDY4NDczNjQ5MjQsNjAwXSxcbls1NS43NDc0NzE0NTE5NDMsMzcuNzA2ODQ3MzY0OTI0LDQwMF0sXG5bNTUuNzQ3NDcxNDUxOTQzLDM3LjcwNjg0NzM2NDkyNCwzODBdLFxuWzU1Ljg0NjE3MDQ3MDI0NiwzNy4zNTc4ODg4ODAwMzcsMjYwXSxcbls1NS43NDA5NjE5MjA5MjIsMzcuNDE1NDg0ODE4ODU4LDI5MF0sXG5bNTUuNjYyNzYxNjA2OTQ2LDM3LjU1NDUyMDc5MTU4NSw1MDBdLFxuWzU1LjYyMzMxMzA2ODE1NiwzNy43NDI0NDgyNDM3MDgsNjAwXSxcbls1NS43OTYxNzk0MDk5NDksMzcuOTMwNzc0NzczNzY4LDEwMDBdLFxuWzU1Ljc5MzczMDUxNjI3MSwzNy41NjA1ODkxOTM0NzgsNzUwXSxcbls1NS42Mzc1OTM4NzgzMTgsMzcuNzU3MzUzNzc2NzY3LDI2MF0sXG5bNTUuNjM3NTkzODc4MzE4LDM3Ljc1NzM1Mzc3Njc2Nyw1MDBdLFxuWzU1Ljc1NTI1NTg0Mzg5NiwzNy40MDI5MzkzNzQwMzUsMTAwMF0sXG5bNTUuNjI2MTQyMTQ0ODc1LDM3Ljc0OTU3MDI5MTIsNzAwXSxcbls1NS43OTI0ODkxMzE5NjgsMzcuNTY1NjAwODIyMjU4LDUwMF0sXG5bNTUuNTMyMTk5NjY1NzExLDM3LjUxOTIxMzQ2MjcxMSw1MDBdLFxuWzU1LjgxMTU5Mzc3NTk3MiwzNy42NTI1NzExOTk5MjcsNjAwXSxcbls1NS43NTg0NDE5OTgyNDMsMzcuNjQwNjAwNzcxOTMyLDQwMF0sXG5bNTUuNzM3MDMxNTg5NDY1LDM3LjY1OTM3MTE0MTM3Miw2MDBdLFxuWzU1LjgzODk5MzE2NTk4MiwzNy40ODY3ODU5MjgzNzgsMjQwXSxcbls1NS44OTIwMjkwMDY3MDEsMzcuNzQ1NzE5MjE4NTQxLDI4MF0sXG5bNTUuODQ1NTE5MjA5NTc4LDM3LjU3NDQwNjAxNzQwNCw1MDBdLFxuWzU1Ljc1ODI2NzQ3NzE0MywzNy41NDY0MjA3NjMzNTIsMTAwMF0sXG5bNTUuODY0MjE3MDQ3NjIzLDM3LjY3NjkyNjMyMzI0OSw2MDBdLFxuWzU1LjYzNDAxMjI5NTMzNSwzNy40NDE5ODU3NzgxNSwzNTBdLFxuWzU1Ljc2NDA4MTk5MDQxMywzNy43MDM1MzA4NDI1NzksMzAwXSxcbls1NS42MzUxNzE5Njg4ODMsMzcuNDM2OTM3MTc2Mjc0LDI2MF0sXG5bNTUuNzUzMDQ1MzU0MjEzLDM3LjU5NDU4ODQxNzQ0Myw0OTBdLFxuWzU1LjY4MDc1NDE0MDI1NiwzNy42NjI4Nzc1OTM0MzksMzUwXSxcbls1NS42NzI2Nzg1MjMwMjcsMzcuNTY4NjIxMzA4Nzk3LDYwMF0sXG5bNTUuNzM4OTQ0MTUzMzkyLDM3LjY2MjkxOTIyNzcyMiwyMzBdLFxuWzU1LjY4MzQxMjA1NTY3MiwzNy42NjA2ODgxMzg3MTgsNDUwXSxcbls1NS42NTg5ODQyMTIwMjMsMzcuNDAyNTkzNTE5MTMsNDUwXSxcbls1NS44NTE1MjIwMzIyNjEsMzcuNDM4MzI5OTE3MDk4LDc1MF0sXG5bNTUuNzA4Nzk2MzA1MDQ2LDM3LjYxNTY1Mzc4Nzk0LDEyNTBdLFxuWzU1LjgwNTc5OTI2MTEyNywzNy41NDA4NDgwNzY0MTcsMjMwXSxcbls1NS44MDY0MjI1NTA0OTMsMzcuNTQ5NjgyMzM2MzQzLDEwMDBdLFxuWzU1Ljc4MzIyMDMzNTc3LDM3LjY0MjY3Nzc4OTQxMSw0NDBdLFxuWzU1LjU3MDA2MDM3MzAwNSwzNy41ODA2ODA1ODM3OTEsNTAwXSxcbls1NS43NTkxNjQ5NDcxOTMsMzcuNjQyNzY0MDM0MTk3LDE1MDBdLFxuWzU1LjY3MzQ5ODM1MjUxNSwzNy4yNzcxMjc0Mjk1OTIsODAwXSxcbls1NS43OTk5MjYyNzIyMzIsMzcuNTc1Mzc5MTY3NjY4LDEwMDBdLFxuWzU1LjYzNTE3MTk2ODg4MywzNy40MzY5MzcxNzYyNzQsMTgwXSxcbls1NS43MDc2Mzc1OTIyMzEsMzcuNTk4MDE5ODk4ODkyLDIwMF0sXG5bNTUuNzUxODYxODAyNTYyLDM3LjgxMjc2NTAwNjkxMiw4MDBdLFxuWzU1Ljc2OTk1MDMzMzMwNiwzNy40ODI5NzQwODM0NjgsNDAwXSxcbls1NS43OTgyMzUwMTk4NTksMzcuNTY4NjkwNTI0NjUxLDgwMF0sXG5bNTUuNzA4NzE3NDczMTM2LDM3LjczMzM5NjI5MTE5NCw3MDBdLFxuWzU1Ljg2MjcxODk5MzIyMSwzNy40MzUwMzQzODc3MzMsMjYwXSxcbls1NS44NjI3MTg5OTMyMjEsMzcuNDM1MDM0Mzg3NzMzLDQ1MF0sXG5bNTUuNzUxMTc5NDQ3NTg5LDM3Ljg4ODgxMjQ4ODgyMiwxNzAwXSxcbls1NS41ODI2ODk4OTAzMTgsMzcuNjcxNjMwNDE0OTI3LDEwMDBdLFxuWzU1Ljg2MjcxODk5MzIyMSwzNy40MzUwMzQzODc3MzMsMzIwXSxcbls1NS43MjYzODUyMTYwODgsMzcuNTgxNDUzOTczNjk2LDI2MF0sXG5bNTUuNzczNTUzNTc4NzQsMzcuNzExOTYxNTg1ODU5LDcwMF0sXG5bNTUuNzEzODg0MjA4NDYxLDM3Ljc1MDc1NTIxMzM1OCw2MDBdLFxuWzU1LjY1MTczNjg1NTcyOSwzNy42MTg4NDcwMDc5MjksMjYwXSxcbls1NS42ODI3MTQwNzIwNzYsMzcuNjIyNzQxMjk3MzQsNTAwXSxcbls1NS43MTYxODUzMzk2ODksMzcuNjgyNjQ0NjMzMzg1LDI1MF0sXG5bNTUuNjMzOTYyNjk2MDM1LDM3LjYxMzcyMjUzNjE2OSw1NTBdLFxuWzU1LjcwNDkzNzU1NTQwOSwzNy43NjM5NDc0NTEwMTIsNDAwXSxcbls1NS43MDQ5Mzc1NTU0MDksMzcuNzYzOTQ3NDUxMDEyLDQwMF0sXG5bNTUuNzAxNjcwNjUzMjExLDM3Ljc2MjUwMzA0MDQ4Miw2MDBdLFxuWzU1LjcyNjg3MzEzOTUyNSwzNy41Nzk2NzAxMTU0MiwyODBdLFxuWzU1LjcyMjg4MTY4MzgzMiwzNy4zOTY2MjA3NjIxNzIsNjAwXSxcbls1NS43MDE4NDYyMTk3NjEsMzcuNzU5NjIzOTI1MTQ1LDMwMF0sXG5bNTUuODU0MDIyODU4ODQxLDM3LjQyMDU5NTAwNzMyNiwxMDAwXSxcbls1NS42OTMyNDQyNDEwOCwzNy43NDYzMTg2NjczMjgsNjAwXSxcbls1NS42OTI5MDUwNTk1MTQsMzcuNzM1NTg4MTMzMjMxLDgwMF0sXG5bNTUuODU0MzEwNjE0MTI1LDM3LjQxMDQ0ODg3NjIxOSwzMDBdLFxuWzU1Ljc2MjEyMjExMjcyOCwzNy43ODQ1NjAzMjM2NDYsNDQwXSxcbls1NS43NzQ1NDk3NTM2MTksMzcuNTQ2NTA0NTk4ODA4LDExMDBdLFxuWzU1Ljg0ODQxNzI1OTg3MiwzNy40MjM2OTU1NjUwNjEsMzUwXSxcbls1NS42Mjk0MzUyMjM4ODIsMzcuNjAwMjgzNzk1MzgyLDEwMDBdLFxuWzU1Ljc4ODkyMTE4NjUzNSwzNy41MTkxMzAyNTIyNDYsMTAwMF0sXG5bNTUuNjU0NjU4MzQ2ODU5LDM3LjU4NDA0MzkxMzgwNyw1MDBdLFxuWzU1LjY2ODU5MjExNzE3OCwzNy41OTE3ODY4OTI4NTUsMTAwMF0sXG5bNTUuODQ1NzY4NzgxNzYxLDM3LjQzMTMxNzIzMTM3LDcwMF0sXG5bNTUuODAzMjkwOTMzMzU1LDM3LjcyNDI3NTk5NjY1NCwxMDAwXSxcbls1NS43NzA1NjkzNTEyOSwzNy42MjQ4NTY3NDU3OTMsNTMwXSxcbls1NS43Njc0MzY4MDUyMjgsMzcuNTU5NTgwNTg4MDE3LDI1MF0sXG5bNTUuNzQ1NDM0NjY3MTY3LDM3LjY1ODU2OTY5OTQyMiw3MDBdLFxuWzU1Ljc3NzI5NjY4MTEyNSwzNy40NTcxNTg0MjU4MTcsMTI1MF0sXG5bNTUuNzA4MTMzNTg3NjQ4LDM3LjY0MDM0MTIxOTQwMSwxMDAwXSxcbls1NS43NDQxMzE1MjA4MzMsMzcuNjU2OTQ0MzQ1OTYxLDEyMDBdLFxuWzU1LjcwODIwNjE4MDYwMywzNy42NDE5ODAyNTg3MjgsODAwXSxcbls1NS44NDg1NzkwOTA5NzksMzcuNDIyNzMzNzgzNTQ0LDUwMF0sXG5bNTUuODQ4NzQ0NzY1MzYxLDM3LjQxNzA5ODA1NDE4Myw3MDBdLFxuWzU1LjY2OTA1MzEzODQ4NiwzNy42MjkxMTEwNTY5MzksMTAwMF0sXG5bNTUuNzg2NDQzNjQzNzc5LDM3LjQ4MDg5ODczNTcxMyw1MDBdLFxuWzU1Ljc5NjQxNTI0NzY3OCwzNy44MDA3ODY2MTg3NiwzMDBdLFxuWzU1LjY1NjY3NDk0OTExLDM3LjYwODEwNzU3Mjg0LDM1MF0sXG5bNTUuNzMwMjk4ODkxNzksMzcuNjE4OTIzMDA1MjgxLDEzMDBdLFxuWzU1LjcxMDg5NjU3ODMxNCwzNy43NzE0ODM5Njg2NCw1MDBdLFxuWzU1LjY5Nzg3ODY4MjcxNSwzNy44MjQ0MzY1MjYxNDQsNjAwXSxcbls1NS44NzY2NDU5ODM5NjcsMzcuNzEyMTg0NDA5MDU4LDUwMF0sXG5bNTUuODcwMjE0NTIyNjQxLDM3LjcwOTMzNDAyMzQ2Niw1MDBdLFxuWzU1Ljg3NzI0OTM2MzMzMywzNy43MTgzNjM2NDk5OTUsNjUwXSxcbls1NS44MzY3MzQ4NjM1NTEsMzcuNjQxMDAyNzM5OTM3LDE1MDBdLFxuWzU1LjgzMTE5ODA3MzQ1OCwzNy41OTMxMDc4MjYxNDIsNjAwXSxcbls1NS43MDU1NzU5OTk2MDYsMzcuNTExMTk1NjMxMTIyLDUwMF0sXG5bNTUuNzAxMjYzMTE0OTI1LDM3LjgxMTA3MTI3Nzk1LDcwMF0sXG5bNTUuNjk2MTA2MzQ2OTE2LDM3LjgyMTQ1NDMxMDQ1OCw3MDBdLFxuWzU1LjY1NDAyOTQ3MjM3MywzNy40ODIzNzA0Mzk4ODUsNzUwXSxcbls1NS42NDA3MDMzNzgwOCwzNy42NTgwODQ1MDg0OTksNjAwXSxcbls1NS42NTE2NDY0MDc0MzUsMzcuNTI3NzE4NzY2ODQ5LDgwMF0sXG5bNTUuNjU0MTQyNTY2OTc3LDM3Ljc2MzYwODU3OTg0NCw1NDBdLFxuWzU1Ljc0MTMzMTI1MzE3NywzNy42NTg2NjUyNDE2ODksNzUwXSxcbls1NS43MDI0ODY1NDA3NjQsMzcuNTA5MjU1NDQxNzk5LDEwMDBdLFxuWzU1LjY0MzE0OTMxNTY3MSwzNy42NzY0ODY5MDUyMDMsNTcwXSxcbls1NS42NDkyNDAyMDc2NDQsMzcuNDg0MzU5NjM4Njk4LDUwMF0sXG5bNTUuNjIwMzkxNjE2MTEsMzcuNjY5NDMyNTQ2NDEyLDE1MF0sXG5bNTUuNjIwMzkxNjE2MTEsMzcuNjY5NDMyNTQ2NDEyLDEwMDBdLFxuWzU1Ljc4NTAyNjUzOTI0NywzNy41NTY5NjA5NjM5NjksNjUwXSxcbls1NS42MTk4Mjc4NDkxMzUsMzcuNjA4ODgyODc5MTA0LDcwMF0sXG5bNTUuNzQyNjM3OTIwMjAxLDM3LjQ5OTYyNTEzMTQ0OSwyNjBdLFxuWzU1LjU0OTE0MjM1ODUxNCwzNy41NTQzNDkyNzM3NSwyNjBdLFxuWzU1LjgwODE3OTI4NDk4NywzNy42MzgzNzMwNDg3NzksMjYwXSxcbls1NS43NTE1ODIwMzU4NzcsMzguMDEyMjAzODIyNDIxLDI2MF0sXG5bNTUuNjQzNjgzOTE5MDM2LDM3LjUwODAxNTM3NTgwOCw2MDBdLFxuWzU1LjczMjE1NjQ1OTI0MiwzNy43NjQ0MDYyMzE0ODIsNTQwXSxcbls1NS43MjQyNjYzODY2MzMsMzcuNzY3ODE0NTExMDQ3LDYwMF0sXG5bNTUuODU4OTkzODc4NDM1LDM3LjY1OTYwOTI1MzkxNCw2NTBdLFxuWzU1LjgxMDkxNzU4NjgxMSwzNy42Mzg0NzQwNDA0NzcsMTEzMF0sXG5bNTUuODI2OTM3Nzc1MjE0LDM3LjU5NTU3NDA2NzMxNSw3NTBdLFxuWzU1LjgxODExNzkxOTAzMiwzNy42NDY3MDU3MDU4MzMsNTAwXSxcbls1NS43OTQzNzU2MjMxLDM3LjQ5MTE1NDU0NzkyMiwyMDBdLFxuWzU1LjgzNjIwOTUwNDA5NywzNy41NTEyOTEwMTAzOTksNzAwXSxcbls1NS44MjEyODcyMDEyOTUsMzcuNjA2Mzg0OTM5NjIyLDI2MF0sXG5bNTUuNzkzMjIwNjg0NDQ4LDM3LjQ4OTI2NTk1NzE1NCwxNTAwXSxcbls1NS44MjgyMTEyMjU2MjIsMzcuNDM5OTI1OTYxMzk2LDEwMF0sXG5bNTUuNzI2MTYwOTA3NSwzNy41MjcwOTkxNjg3NjcsNDUwXSxcbls1NS42NDUxODA4ODgxMTYsMzcuNTE5MDE0MzM2ODAzLDQ1MF0sXG5bNTUuNjgzMjE0NDU1NzQ5LDM3LjQ1ODU1NDc5MDExLDYwMF0sXG5bNTUuNzc3MzgyODAyNjUsMzcuNzIwODc0NjQ4NzA1LDUyMF0sXG5bNTUuNzg5MDA0NTA0MDk5LDM3LjUyMTY5MjUwMjI4MSw3MDBdLFxuWzU1Ljc4NTE4MTExMjQ3OSwzNy41ODMzMzA4MTM4ODgsMzAwXSxcbls1NS43ODE4MDYzNzk1NzksMzcuNTgxOTA5ODY1NjM1LDEwMDBdLFxuWzU1LjgxMjY2Njk0MDQ2MSwzNy42Mjc0ODEwODE0MDYsNTAwXSxcbls1NS43MDU3NDIwNzcyNjksMzcuNjg3Mjc2OTQxMjI3LDI2MF0sXG5bNTUuODI2NjU5NTE1MTI0LDM3LjUxNzc2MTc2NDkxNyw3MDBdLFxuWzU1LjgzMTc1ODY5NDc4NCwzNy41MTk4NTA3MDQxMywyNTBdLFxuWzU1LjcwNDEwNjA2OTk2NywzNy42ODkwMTIzMTY0NTcsMzUwXSxcbls1NS43OTM1NjUxNDU4NDcsMzcuODA0NzE1NjY4MTI2LDUwMF0sXG5bNTUuNzE1MjMxNjMwMjg0LDM3LjU1MjYxMTY4MzI2NSw0MDBdLFxuWzU1Ljg0Mjc4Nzg1NzU3MywzNy41MzIxMDgxODQ3OTgsMzAwXSxcbls1NS43MTgyMTg0NDM3ODgsMzcuNTQ5MjUyODY3NTU2LDU5MF0sXG5bNTUuNjA3OTM0NzY2NzQ3LDM3LjczMzY5MTgwMDgxNSw2MDBdLFxuWzU1LjgzMDU0NjI4NDQ5LDM3LjQ1MzY4NDk5MTkxMSw1MDBdLFxuWzU1LjgzNzQ3MTAwMzE1LDM3LjUzNzYyMDU3ODkzNywxMDAwXSxcbls1NS44MzUwMTY0NTI1ODcsMzcuNTE0ODgxMzEzMjc3LDUwMF0sXG5bNTUuODEwNzAwMTg4Njk0LDM3LjQ1OTQ4NzY5MTI0MywyMDBdLFxuWzU1Ljg2MjU2ODQ0MzM1NCwzNy42NjE4OTY3MjkzODgsMTAwMF0sXG5bNTUuNzUxNDk2OTE2NDU2LDM3LjU5OTEwMjcxMTM1NSwyODBdLFxuWzU1Ljc4MTM2MzU5MDkxMywzNy43MDU1NDYxMDE0OTMsMjgwXSxcbls1NS44MDgwNjA0NTU1NzEsMzcuNTc5ODE1Nzg1MzI0LDI4MF0sXG5bNTUuNzMyODQ3MjE4MjQ1LDM3LjY2Mzc2NTMzMTAwNywyMzBdLFxuWzU1LjY4NTM0OTczNzcxLDM3LjU3ODkxNTA0NjExLDI4MF0sXG5bNTUuNzI3MTU4NjMxOTYyLDM3LjYwNjg5ODYzMTA4MSwyODBdLFxuWzU1LjkxMDk0NTY1NDMzNiwzNy4zOTYxMDc3ODE1NiwyMzBdLFxuWzU1Ljc3MzY2ODUzMjEzNiwzNy42NTA3OTc1NDk4NTcsMjgwXSxcbls1NS42ODc1MDI2Njg4NDQsMzcuNTQzMzk2MTgyNzUsMjgwXSxcbls1NS42NTM2MDQxMTcyNjUsMzcuNTAxNDk3NDM2NTc5LDI4MF0sXG5bNTUuODQ1NTQ3NDUxMTE4LDM3LjY2MTA2NzEwODA1LDI4MF0sXG5bNTUuNzcwNzg3Njc4MzI4LDM3LjY0ODcyMjUxMzY1NywyODBdLFxuWzU1Ljc2NDk4MzUyNTI5NiwzNy42MDgzMjQ4ODUzMjEsMjgwXSxcbls1NS43NDA5NjE5MjA5MjIsMzcuNDE1NDg0ODE4ODU4LDIzMF0sXG5bNTUuOTE2NDQ0MjU2NDQ3LDM3Ljc3MjY2Mjc1MzkxNywyODBdLFxuWzU1LjYwNDY1OTcxNzc1NiwzNy40ODg3ODkzMDQ0MjIsMjgwXSxcbls1NS43OTYxMzIxNjU5ODgsMzcuOTcxNDE4MDI0MzU4LDI4MF0sXG5bNTUuOTE2NTQ2MzY0NzkyLDM3Ljc1OTE4NjM0ODc3NiwyODBdLFxuWzU1LjcwNzI1OTQwOTgwNywzNy4zODcxNDU5ODI0MjIsMjMwXSxcbls1NS44MzY0MjY0MTcwNTgsMzcuNTM3MzYxNjU3OTI2LDI4MF0sXG5bNTUuNzk4ODMzMTgxMDQsMzcuNTI4MDc3NjczMDQzLDI4MF0sXG5bNTUuNzA3Njg1MDMzMjkzLDM3LjU4NDQ5MDc2MDczOCwyODBdLFxuWzU1LjcwODQyMDAxNDY5NywzNy42NTk1OTQ5MzgyOTgsMjgwXSxcbls1NS43NDMxNTgyODI5MjYsMzcuNTY3MzYzOTMyMDIsMjgwXSxcbls1NS41ODUyNzE3MDU1MTgsMzcuNzI0ODkyODUzMTMzLDI4MF0sXG5bNTUuNzkwOTYxNzcyOTU5LDM3LjU1NzIwMjYxNzYzNSwyODBdLFxuWzU1Ljc3Njg4MTU5MDczNywzNy41ODE0NjI2MDY2NDgsMjMwXSxcbls1NS43MTU0ODIwMjc4NywzNy44MTU4NDAxMDA4NjMsMjgwXSxcbls1NS43NjAyMzI3NjE1OTMsMzcuNTg0ODUyMTQ0MzgsMjgwXSxcbls1NS43NTcwNzA2Nzk4MjgsMzcuNjYwODcxODY3OTIyLDI4MF0sXG5bNTUuNzA2OTI2ODY1MDExLDM3LjU5MjE1MjY1ODcyNiwyODBdLFxuWzU1LjY1MzgxMjQ4MzI3NSwzNy44NDQzMDA4OTAxNzIsMjgwXSxcbls1NS43NjQ5ODI4ODAzNTIsMzcuNjM4NjI3MjE0MDc1LDI4MF0sXG5bNTUuNzQxMDk4OTkxMDEzLDM3LjY1NjM5MDA3NzU4OSwyMzBdLFxuWzU1LjczNjM1OTgwMzEwMSwzNy42MTkxMDA0NjQ3OTMsMjgwXSxcbls1NS43MTY5NTUxMDc4NjYsMzcuNzkyMjMyNjQ5MDQzLDI4MF0sXG5bNTUuODg4MjcyODQzNzI1LDM3LjU4ODIzNjMxMjU1NCwyODBdLFxuWzU1LjgyODM0MTQwOTAwMywzNy40MjAwMDY1ODA5MjQsMzAwXSxcbls1NS41ODM5Nzc0NDkxODYsMzcuNjU4NzQ0OTM4OTg5LDMwMF0sXG5bNTUuNjUxMTE3ODk2MjExLDM3LjU1NzAyNDMyNzAxNiwxMDAwXSxcbls1NS41ODEzNDc0MDU2MzcsMzcuNjU4NjM5OTYxNTY0LDgwMF0sXG5bNTUuODU2NjU1NzkxODg0LDM3LjY2MTA3ODI2ODYzNCw1MDBdLFxuWzU1LjgxMTczNzE5NzMxNSwzNy43MTgyODc1NzkxNiw1MDBdLFxuWzU1LjcyMjczOTI3MDkzMywzNy44MTAyODAyOTc4NDksNTUwXSxcbls1NS44MDc4NDM2MTU4MzEsMzcuNzEyODY1NzY3MDMxLDYwMF0sXG5bNTUuNzA4NDE2MDYzMzg5LDM3LjQ3MDM5MjMxMTMyOCw2MDBdLFxuWzU1LjY0NDc4ODU2NzM1MiwzNy41Mjg3Nzk4MTMyNyw2ODBdLFxuWzU1Ljc5MjUyOTU0MjQ2MywzNy43NzkyNjUwNTkyNTYsMTMwMF0sXG5bNTUuODM2NDg5OTU1NTEzLDM3LjUxMTQ4NTAwMjAzMiw0NTBdLFxuWzU1LjY0ODk2MTE2NzgzOCwzNy43NDQ5MDE0NDA1MTksMjYwXSxcbls1NS41NzU1ODU1MjcyMDYsMzcuNjU2MjQwODg5NzI5LDEwMDBdLFxuWzU1LjgwODM2NzQ5MzAzMSwzNy41MzAwOTEyOTc2NDcsMjAwXSxcbls1NS44NDEyOTg0MjQ3NjEsMzcuNTE4MTY4ODk1ODc3LDQ1MF0sXG5bNTUuNzQwODAxNjI4NDI3LDM3LjY1NzY1NTM0Nzc0NCwzMDBdLFxuWzU1Ljc4OTU0OTU2ODkzOCwzNy41MDAyODMzMTM2MjcsMTIwMF0sXG5bNTUuNzU5MzI0OTA4ODc1LDM3Ljc1MjQ2MjIzMjk0OSwyNTBdLFxuWzU1Ljc5MzAwNjU5OTIzNiwzNy40OTM2Nzk4NTc2NjgsMjQwXSxcbls1NS43MjA0MTgzMjE4NzQsMzcuODIyMTQ2Nzc4NzIzLDI4MF0sXG5bNTUuODAwNzQ2MDMyNTc5LDM3Ljc4MTMwOTIzOTc4NCwyNTBdLFxuWzU1Ljg4Nzc3ODY3MTcxNiwzNy41NTgxMzQ5MjM3MzIsNTAwXSxcbls1NS44NDQwMjc1NTk1ODEsMzcuNTIxNTE1MjUyOTE1LDQwMF0sXG5bNTUuNzA2OTI2ODY1MDExLDM3LjU5MjE1MjY1ODcyNiw0MTBdLFxuWzU1LjcwNjkyNjg2NTAxMSwzNy41OTIxNTI2NTg3MjYsMzUwXSxcbls1NS44NDQwMjc1NTk1ODEsMzcuNTIxNTE1MjUyOTE1LDQwMF0sXG5bNTUuNjE3MzQwMzg0Njk0LDM3LjQ4OTU3NDcwMTk0NCw2MDBdLFxuWzU1Ljg2NzU0OTc3MzkyOSwzNy40OTM0MDU2NTM0MzYsNDUwXSxcbls1NS42NjAxOTU0MjI1MjksMzcuNzc4NzE0NzE0MTA1LDgwMF0sXG5bNTUuNzkwNDM3MTgzMTc2LDM3Ljc3MDIwNjA0NDgyLDU1MF0sXG5bNTUuNzQ3NDcxNDUxOTQzLDM3LjcwNjg0NzM2NDkyNCwzNDBdLFxuWzU1LjgyMzI4NDMzMzM1NiwzNy40OTc3MDMxMTUyNjcsNTEwXSxcbls1NS41ODUyNzE3MDU1MTgsMzcuNzI0ODkyODUzMTMzLDM0MF0sXG5bNTUuNjEwNDI1Njk5MzQ5MSwzNy42MDY1OTI2MTM1MTU2LDY4MF0sXG5bNTUuODUzMDk0NjkyODU5LDM3LjYwNzQzODQ1Nzk3Miw2NTBdLFxuWzU1LjcwNjE5NTUzNTA2NywzNy41NzIyNTY2NTk0MDQsNzkwXSxcbls1NS44MzA3NDEyNDAzNTUsMzcuNjMyMzA1MzY1MzUyLDc5MF0sXG5bNTUuODk0NTAxNDkwMzU1LDM3LjYxMzA3MTU3NjQ4NSwzNTBdLFxuWzU1LjcyMTQzMTIxODU1MywzNy43NjIyNDEzNDY4NjYsMTgwXSxcbls1NS43MzI0NTI5MjQwNDYsMzcuNjQ1MDUzODYxNjE2LDIzMF0sXG5bNTUuNzczOTY2OTQyOTU5LDM3LjU4NjM1MDA0MjY5Nyw2MDBdLFxuWzU1Ljk0MTUyMTk4MTQxNiwzNy41MTYyMjAyMzE0MzgsODUwXSxcbls1NS43MjA3OTc5NjIwNzcsMzcuNzc3NzQ3NDE3Mjc3LDUwMF0sXG5bNTUuNTg1ODUxOTQxMzksMzcuNjMwMjQ5NTkxODczLDQ1MF0sXG5bNTUuNjU0NDYzMzEwNDU1LDM3LjY0OTUyNjM0MzM3MSwyNjBdLFxuWzU1Ljg0ODkyMzY0NjM0MSwzNy41ODY5MTg0ODAzNCw2MDBdLFxuWzU1Ljg5MjEzNjg3MTI4NCwzNy42MjE4NzIyMTg2MzQsMjAwXSxcbls1NS44OTUyNTkyOTczNTEsMzcuNDQ5MTcxMTQxODQxLDQwMF0sXG5bNTUuNzIwNzE5NTY5Nzk2LDM3LjYzNTUxNjc1MjIxMSw0MDBdLFxuWzU1LjU4ODU4NzM4MDk2NywzNy42MTMyMjY2MTM1NiwzMDBdLFxuWzU1LjY3MTEzMzY4NjYzLDM3Ljc2NTcyNTk0NjcyOSw1MDBdLFxuWzU1Ljg4NTI0MjE0ODMyMiwzNy42NDA3ODc0OTU5NjMsNTUwXSxcbls1NS43MTM4NTUyMjMxOTQsMzcuODM2NDcxODk3MjU3LDY1MF0sXG5bNTUuNzE4NTAzNjIyMTQ4LDM3LjY0Njg5NTAxNDIwOSw1MDBdLFxuWzU1Ljg4NzY1NjE2OTM1MywzNy42Mzc5ODMxODczNDIsMTYwXSxcbls1NS43OTI0MzQ0MTA1MzksMzcuNzE4NTExMDU3MTI1LDM1MF0sXG5bNTUuODE2NDkxODUxOTQ1LDM3LjQ1OTg3NTg4NTkyNyw0MDBdLFxuWzU1Ljc2NDAyMjMwOTY2MywzNy40MzM0NTQyMDE2NjgsMjAwXSxcbls1NS43MTU4Mjg4NjI1NDQsMzcuNDM4MDYyMTk4MTM3LDEyNTBdLFxuWzU1LjQwODcyOTk5NzI2NSwzNy41NjM2NTg1ODYzNjQsMTIwMF0sXG5bNTUuODA5MTMxOTMwOTczLDM3LjgxNzc3MzUzMzUzNSwxMjAwXSxcbls1NS44MDIzMzQ2MTEwOTUsMzcuNzkyNTM1MzUzMTAxLDEwMDBdLFxuWzU1Ljc1NDI0OTM0NjcxNCwzNy44NjMxOTM4NzU5NjQsODAwXSxcbls1NS43OTk1Nzc1ODM4ODYsMzcuNzkxNDYwOTEzMTg5LDYwMF0sXG5bNTUuNjY3ODY1MjUyNTM5LDM3LjgzNjgwNzM2OTM0LDIzMF0sXG5bNTUuNDIxMjc5ODQ4MTI2LDM3LjUzNDUyMjQzOTU3NiwxMDAwXSxcbls1NS43ODExMTI4NTEzMSwzNy41OTk3NDY1NDY5MTEsMjgwXSxcbls1NS40NzIzNDcxNjI5MDYsMzcuNTM5NjQ4MjQzNzg0LDEwMDBdLFxuWzU1LjcyOTc1NTgyMzc3OCwzNy43MzIxMjAyMzk3MjYsMjgwXSxcbls1NS44NjA1MDUyOTQzNjksMzcuNDgzMjg1NDU4ODUzLDI4MF0sXG5bNTUuNzIxNDQ1MjYxMjUxLDM3LjYzNTc2Mzg1OTA5LDI4MF0sXG5bNTUuNjg1ODA5NjM0OTg1LDM3LjQzMTc1MTU3Mjk1MiwyODBdLFxuWzU1LjYxMzI5MzA5Njc5OSwzNy41MTc0MjI0Njg5MTQsNjAwXSxcbls1NS43NDE4MzY2ODM2ODQsMzcuNTk5MTYxMzI0NiwyODBdLFxuWzU1Ljg4MTY1MDgzOTg1OCwzNy42NzgxOTk2MjE0NDksMTIwMF0sXG5bNTUuNjMzMTU4MTgwMzQ4LDM3LjYyNDI4NzQ1MDU5MSwyMzBdLFxuWzU1Ljg2NTA5NTk4NDczLDM3LjUzNjQwNDM1MjAxMiw1MDBdLFxuWzU1LjgyODAzNDU0NDUwNCwzNy40ODk0NTgyNDg3MjMsNDAwXSxcbls1NS43NjQyOTUzNzMyNzIsMzcuODQ0OTY5MzI0Njc3LDM1MF0sXG5bNTUuOTEwNjA2MTYzMzI0LDM3Ljg2NjE0ODQzNDI1LDUwMF0sXG5bNTUuOTA5Mzk1MTI5NjgsMzcuNTQwNDAwNTcxMTk4LDE4MF0sXG5bNTUuNjU0NjQ5NzM1MzkxLDM3LjcwMjgzNTQ3ODczOSw2MDBdLFxuWzU1LjY0ODIwNjUxNjQ0OCwzNy42ODY5Mzg3NzU0NzIsODAwXSxcbls1NS41NDkxNDIzNTg1MTQsMzcuNTU0MzQ5MjczNzUsODIwXSxcbls1NS42NDMxNzc3ODMxNDgsMzcuNzY4MzM3MzgxNzI1LDU4MF0sXG5bNTUuNjQxNzcyMTQwOTMyLDM3Ljc2OTM3NDUzMDkyOCwzMDBdLFxuWzU1LjkwMTc0ODk2NzU3NSwzNy40MDU0OTU0ODk1MDYsMTAwMF0sXG5bNTUuNzc4ODY3ODMwMjk3LDM3LjY5MDYyNTM3OTI3NywxMDAwXSxcbls1NS44OTU1MDY0NTEyMzUsMzcuNDgwMDU4MTY2NTg1LDEwMDBdLFxuWzU1LjgxMzE3MTA5MTI5NCwzNy44MjYyNTMzODMyOTQsMzAwXSxcbls1NS43MzYwMjUzMDYyMiwzNy43MDYwNzcwNTEwOTUsMTAwMF0sXG5bNTUuODE2Nzg5NDI0OTg4LDM3LjgxMzE2MDA5MjU4OSwxOTAwXSxcbls1NS44MTgwODczNDY4MTksMzcuODIxNjczODU4MTM3LDEwMDBdLFxuWzU1LjY0Nzc4Nzc4ODY1MiwzNy41Mjg0NTQ1NjcxODgsMTAwMF0sXG5bNTUuODk5OTcxMTU0MjU1LDM3LjQwMzg4MzUyMzY3Miw3MDBdLFxuWzU1LjY3NjIzMjk0NTA5NSwzNy4yNTk0MjQzNjk2MTIsNTQwXSxcbls1NS42ODEzMDI3NTY1MTksMzcuMjY1OTAxOTM4MzUzLDUwMF0sXG5bNTUuNjg1NTA0MzU0NzExLDM3LjI1Nzg3NTg3OTQ1MSw2MDBdLFxuWzU1LjY1NzM4NTkwMDI2MiwzNy43MDk0ODU3NzMwNjgsNTAwXSxcbls1NS42Nzg0NTk5MzUyMSwzNy4yNjgyODMxOTQ5OTQsNzIwXSxcbls1NS44NTUxOTQ5OTM5MTIsMzcuNjE0NDAxMzg3MjQzLDUwMF0sXG5bNTUuNjM2MTAxNzQxOTUyLDM3LjM1ODU0NzY4MDE4Myw2MDBdLFxuWzU1LjU3MzUzNDU3NzQxMSwzNy41ODMxNDI3NDQ3NjgsODAwXSxcbls1NS43NTk1NjUwOTQ4NCwzNy41ODMxMTQzNDIwMDgsNTAwXSxcbls1NS43MzQxODk0MzAxMzMsMzcuNjI3Mzc1MDg1NTczLDUwMF0sXG5bNTUuNzU4NDU1MDUxOTQ3LDM3LjYxMTc2MTQyMzI3NCw1MDBdLFxuWzU1Ljg3MTkxNTg3NDkyNiwzNy41MDk5MzU0MzEzNjEsMTAwMF0sXG5bNTUuNzgzNjI5ODQ3NDg4LDM3LjcxOTIwMDgyNTg2NCw0ODBdLFxuWzU1Ljc1NjU3NzEwMjU5NiwzNy42MzI1NzU2NDI4NzUsNDIwXSxcbls1NS42ODcxODA4ODI3NTUsMzcuNTczNjY3NTY3NDkxLDQyMF0sXG5bNTUuNjg3NDEyOTQwMTAzLDM3Ljg1Mjk3NDc0NjU1NywxMDAwXSxcbls1NS43NDI0NDQ3NDgxNzksMzcuNjI0NjkwMjMwOTI2LDEwMDBdLFxuWzU1LjY5MDc2Mzk3NTk2NiwzNy44NTg3ODQ5NzI3NDgsMTIwMF0sXG5bNTUuNDMxNjY1MDA3MjI2LDM3LjU0MDI0MDY2OTE3MSw1MDBdLFxuWzU1LjcwODcxNDExNDgxMiwzNy42MjIwODEwNzIyNjEsNDAwXSxcbls1NS42MDU1NTg4NTE0NjEsMzcuMjg3MjkyOTAzNDQ4LDgyMF0sXG5bNTUuNjA1NTU4Nzk0MzIsMzcuMjg3MjkyODI2NTYyLDM2MF0sXG5bNTUuNjcyNTc1NjU3NTgxLDM3LjI2ODMyNzM3NzY5NiwzMDBdLFxuWzU1LjY3NTEyMDU3NTI3NiwzNy4yNzUyMDc2NjczMTUsODAwXSxcbls1NS43MTI1NTEzMDY1NTEsMzcuODE2MzkxNDc0MTQ2LDg3MF0sXG5bNTUuNTU0ODMyNDc1MDA0LDM3LjcwMjg0MDkwODA1Niw2MDBdLFxuWzU1LjYzNjU3MjcxODE1NSwzNy43MDAxOTUzNTI3OTYsNDAwXSxcbls1NS44MDE1ODA5Njk3MywzNy43NjAyODc3MDUxMTQsMTUwXSxcbls1NS42MjQ2NzUwMjYyMTEsMzcuNzE2MTYyODY4NzE3LDYwMF0sXG5bNTUuNzUxODY1NTM0OTgyLDM3Ljg1OTI1NTA2ODQ4OSwxNTAwXSxcbls1NS42NzE3NDQ5MTU3ODcsMzcuNzI1MDAyMDg4MTk2LDMwMF0sXG5bNTUuNjgyNDQyMTk5OTUsMzcuNzIyODgyODY0NDA2LDc1MF0sXG5bNTUuNzQ5MDE1MzMzOTA0LDM3LjcxOTI5NDIxOTMxNyw1ODBdLFxuWzU1Ljc1MTg2NTUzNDk4MiwzNy44NTkyNTUwNjg0ODksNTAwXSxcbls1NS44NDU1NDc0NTExMTgsMzcuNjYxMDY3MTA4MDUsMTAwMF0sXG5bNTUuNzk0Mjc4MTU3OTc3LDM3Ljc1MTg3OTM5MzY5Myw0MDBdLFxuWzU1LjgwMzczNTA5MzEwNiwzNy43NTMwNTI5NDc2NjEsMzAwXSxcbls1NS43OTQyNzgxNTc5NzcsMzcuNzUxODc5MzkzNjkzLDQwMF0sXG5bNTUuNzk0Mjc4MTU3OTc3LDM3Ljc1MTg3OTM5MzY5MywzNTBdLFxuWzU1Ljg5MzkxNjc0ODU1MywzNy4zOTAzMjAyMzczMDcsMTAwMF0sXG5bNTUuODkzOTE2NzQ4NTUzLDM3LjM5MDMyMDIzNzMwNyw1MDBdLFxuWzU1LjYzODE1ODExMjM4OSwzNy42OTY0MjA0NjE2ODgsMzAwXSxcbls1NS42NDEyMjE3NDk1MTgsMzcuMzMzOTA0MTQyMjM2LDE1MDBdLFxuWzU1LjgwNzcyNTM1NDIwMSwzNy41MDQ4OTg4Nzg2ODYsNDgwXSxcbls1NS43NTE4NjU1MzQ5ODIsMzcuODU5MjU1MDY4NDg5LDIzMF0sXG5bNTUuODgyNDk1MjczNjc2LDM3LjUxNzg3NTg4MjY4MSw2MDBdLFxuWzU1LjY4NDYyMDU5MzA5MiwzNy44NTg4NjQ2NDI4NDUsNjQwXSxcbls1NS42ODI4OTgzOTA1NjksMzcuODc2NzkxMjkzMzgyLDUwMF0sXG5bNTUuOTA0NDQ5MDk5MTI5LDM3LjY5OTI5NjkyMjU1Myw4MDBdLFxuWzU1LjY4MTgyOTE3ODQyNiwzNy44OTE2MzU5NjA0MTEsODAwXSxcbls1NS44ODU2MDEwODU2NDEsMzcuNTI4NTcyMjU4NTg5LDQ1MF0sXG5bNTUuNjg5MjQ2ODYyMzM4LDM3LjI5NDkyMjY1ODE3OCw3MDBdLFxuWzU1LjYxNDk2MzM0NTEyOSwzNy43MjEzNjg3MjcyNDEsMTI1MF0sXG5bNTUuNDMzMTgxMDYxNzA5LDM3LjU0NTM0Njg2MTAyNywxMjAwXSxcbls1NS42MTI2Mjg3Nzg1MjMsMzcuNzIwMTUyOTU2MjM5LDI4MF0sXG5bNTUuNzQ0NTY0NjA2MzQxLDM3LjU2NTUzNTE1MzE0NCwyODBdLFxuWzU1LjYxODYyMzkzNDcwOSwzNy41MDcyMzQyNzE5OTgsMjgwXSxcbls1NS43OTk3NDc1MjAyMDMsMzcuNDgyOTgzNDA1MTgzLDMwMF0sXG5bNTUuODk3NTMwMjc5ODc0LDM3LjY2NjE5Mzk5ODMyMSwzMDBdLFxuWzU1Ljc0NzQ3MTQ1MTk0MywzNy43MDY4NDczNjQ5MjQsMzAwXSxcbls1NS42MjUxNDI1NzU1MTcsMzcuNzYwOTExOTM2ODA5LDI4MF0sXG5bNTUuNzkzMDcxMDcyMjg1LDM3LjgwNzEzNzM0NzY2OSwzMDBdLFxuWzU1LjY3NDkzNTY5Mjg0MiwzNy4yNzA1MzEzMTcxOTIsMzAwXSxcbls1NS42NTU4NTM4MTIxMDgsMzcuNTQxODkxMDE2OTUyLDMwMF0sXG5bNTUuODA5NDc4NDc4MDAyLDM3LjQ2NDQ4NzkyMTkzOCwyODBdLFxuWzU1LjY1ODI1MDYxMzcyNywzNy43NDI0MDk4NTYzODMsMjgwXSxcbls1NS42ODk1MjI2NjQ4NzUsMzcuMzAxMjIzMDk4MjgsNjAwXSxcbls1NS43NDgyOTI0Mjc4MTMsMzcuOTUwMzc3MDExNTg4LDE3MF0sXG5bNTUuNjgyNzkwMjU5OTk5LDM3Ljg2NTM0NTAwNjk2MSwxMTBdLFxuWzU1LjY4MzY5MjkzNjczNiwzNy44NjU4MDUwOTgxNTksMTAwMF0sXG5bNTUuNjM0ODUxODY5NTIxLDM3Ljg0OTkxNzU3Nzg5NSw2MDBdLFxuWzU1Ljc0NjkzOTE4MDUsMzcuNTkxMTgyNDQ5Mzc3LDM1MF0sXG5bNTUuOTc5OTU2MzY3ODQzLDM3LjE3NjM3Njg3ODc2Myw1MDBdLFxuWzU1LjYyODkzMTUwMzYyNCwzNy43NDEzMzAwNzc3OCw1MDBdLFxuWzU2LjAwMTk2MDIzNDIyNywzNy4yMTA4MDcyMTcxMSwyOTBdLFxuWzU1LjY4MDMzMjI4NjYwMiwzNy4yODkxNDQxODc1ODksMTgwXSxcbls1NS44MjE4NTkzMzczNTEsMzcuOTY5Njk1MTM1NjMyLDMwMF0sXG5bNTUuNzk3MzUwMzg3NzMxLDM3LjgwMDc5MjgxMjk1Myw1MDBdLFxuWzU1LjkyMzgzNTE5MDAxNSwzNy44MjEzNzMxNjgwMjYsMjAwXSxcbls1NS45ODI3NjU4NDUwNTgsMzcuMTc0NjMyNjcxMDgxLDI2MF0sXG5bNTUuOTgyNzY1ODQ1MDU4LDM3LjE3NDYzMjY3MTA4MSwyODBdLFxuWzU1LjY2MTY2MTc3ODY1NiwzNy45MDMwNTQ2MjA4NTEsODUwXSxcbls1NS43NDY0OTk0NjE4NiwzNy45NzI4NjUzNzAwNDQsNDAwXSxcbls1NS42ODIzNzQ0NjAwNTksMzcuOTAwNDUxMDQyMTg1LDEwMDBdLFxuWzU1LjY4Mjk0NjE1NjI2NiwzNy44OTc0NTU4MzEyNjMsMjUwXSxcbls1NS43NDUxNDgxNzE5NTMsMzcuODUyOTcxODU3NDQ2LDgwMF0sXG5bNTUuNTU4MjE2OTEwOTkzLDM3LjcwODExMjY0OTY3NywyMDAwXSxcbls1NS42ODM4MTIzNzEzNTQsMzcuODk5NDQ0NzYyOTE1LDUwMF0sXG5bNTUuNTQxNjAxMDQ4MzI2LDM3LjUzNjUwMDgzODAxMSw3MDBdLFxuWzU1Ljc1NTUyOTAyNDYxOCwzNy42MDA1NzQwMDI1NzIsMzUwXSxcbls1NS43NTM5NDYxNzgzOSwzNy42MDE1Njg0MzE3NTUsOTUwXSxcbls1NS44Mzg2NTcyNDA1NCwzNy4zODgwMTMxNDQ5MjUsNjAwXSxcbls1Ni4wMTQzMTYzODkzNzUsMzcuMjA1Mzk0MjEwNjIxLDI1MF0sXG5bNTUuNzQwMDY3MjY5MzEyLDM3LjYyMTg2MTEwMzE3NCw2MDBdLFxuWzU1LjUwMzA0NjQ4OTI2NiwzNy41NzI1NTc2MzY3MDEsOTAwXSxcbls1NS43NDEwNjIwMjIzOTksMzcuNjI5MjY4NjcwMzI2LDE1MDBdLFxuWzU1LjQ5MzU3NTc1MTI3NCwzNy41Njg0MjExNDU1NjksMzAwXSxcbls1NS43MTM5OTM5MjMxMzIsMzcuNzIzNDcwODQyNzAzLDI1MF0sXG5bNTUuNzE0MDY5ODQ3NTA1LDM3LjcxODQyMjE4Njc0MSw3MDBdLFxuWzU1Ljg4ODk2MDM3NDIxLDM3LjUyNTc2MDg4Mjg4OCw3NTBdLFxuWzU1Ljg4NzA2NjQ1MzA3NCwzNy41MjM0MDAwNzgxMTEsNjkwXSxcbls1NS42OTIyMjQ2MDI4MTgsMzcuODk2NDI5MTc5ODM3LDIxMF0sXG5bNTUuNzYyMjc1MzQyNDg1LDM3Ljg2MjE4NTgwOTM2MywxMDAwXSxcbls1NS43NjQzNDcxMzY5MzQsMzcuODUzOTkzMzA3MDA4LDEwMDBdLFxuWzU1Ljg4NDI0OTU0MTI5LDM3Ljc1NTUxMTUwODg0NSwzNTBdLFxuWzU1LjcwNDQ1MzY5NjgyNywzNy4zNTg3Nzc5NjA2NzYsMzAwXSxcbls1NS42NzUxNDIwMjk1MjksMzcuODkxNDE1MjUzNjczLDUwMF0sXG5bNTUuNjMwMzA2NjI3MjIzLDM3Ljg1OTgzNzUwMjQ1MywxMjBdLFxuWzU1Ljg4OTEwNDA2OTQzOCwzNy40NTEyNzMyOTk4OTEsNjAwXSxcbls1NS45MjQ2ODIxODM2MjQsMzcuNTI0Nzk0MDAxODY3LDExMDBdLFxuWzU1LjkyMjM4MjAwNjMwMywzNy41MTQyNjg1OTY1OTQsMjUwXSxcbls1NS43NDk3MTc3NzgxMTksMzcuODY2NzU5ODYzMTkxLDcwMF0sXG5bNTUuNjcwNzg3NTg0Mjc4LDM3LjI4MTE4NzQ3NTQ2OCw4MDBdLFxuWzU1LjY3MTUyMDMyNDAwNywzNy4yODM3OTc0NDk1ODMsMjAwXSxcbls1NS43NDcwMjExNjAzNDIsMzguMDIxODgxNzI1ODMsODAwXSxcbls1NS44NDQzMTkzNjMzOTMsMzcuMzgyODkxNDg2Mzk1LDUwMF0sXG5bNTUuODQ0MzE5MzYzMzkzLDM3LjM4Mjg5MTQ4NjM5NSwyMDBdLFxuWzU1Ljc1MTE1MjA3MDM2MSwzNy45NTcwMTMxMzQ2NSw2MDBdLFxuWzU1LjgzNDc5ODgzNzg1NiwzNy4yOTkxNDk2NDgxMDcsNTgwXSxcbls1NS45MjEwNjM5MTk0NiwzNy44MzUwNzI1NjQyNTEsMTAwMF0sXG5bNTUuNzc4NjY4MzAzNzk4LDM3LjY5NjU4MzMzMTc4NiwzNTBdLFxuWzU1Ljk4OTQ1ODQxMTczLDM3LjIyNjQzODYxNDI1NSw4MDBdLFxuWzU1LjM4NTYwOTcxNTg3NCwzNy41NDUzNTE0MzQ1NjIsMjgwXSxcbls1NS42NzI5NTk2MTUwNTYsMzcuMjg0NDQ5NTY2MzY0LDIwMF0sXG5bNTUuOTg0MTA1OTAyNTI1LDM3LjIxMzk5NTkxMjAwNSw1MDBdLFxuWzU1LjY3MjEwOTUzODczMSwzNy4yODc1ODk0Mzk3NzQsMzIwXSxcbls1NS43OTcxNTI1ODY1ODQsMzcuNTE3NTc4NTAxNDkzLDc1MF0sXG5bNTUuNjgwNzQzNDczOTgzLDM3Ljg4Nzg1ODczNDQ5NiwyNTBdLFxuWzU1LjQzNzU4NzYyNzAzNCwzNy43NzM4MjQ5NTE3OTUsNDAwXSxcbls1NS45NDUwOTg1Mjc0NjQsMzcuNTEyMTU2NTM2MTI3LDUwMF0sXG5bNTUuNzUwNjEzODY2Nzc3LDM3LjY1MzE4MDA4NzgxMyw0OTBdLFxuWzU1LjQzNzg3MzAxMTIxOCwzNy43Njc4NTU0NDY4MzksMTAwMF0sXG5bNTUuODIyOTM2Njg2MDE3LDM3LjM2Nzk5ODc4MjY0NSwyMDBdLFxuWzU1Ljk5MzI2ODM5ODQwNywzNy4yMTI4NjM1MzQzNjcsNTAwXSxcbls1NS45OTY2MjQzMTEsMzcuMTg5MzcwOTQxOTc0LDUwMF0sXG5bNTUuOTg0NjM0NDY0MDcsMzcuMTU2NTkwNjQyMDM3LDUwMF0sXG5bNTUuNDE0ODgwMTQ4MTkxLDM3LjkwMjk0MTI3NjAyMyw4MDBdLFxuWzU1LjY3NDg1MzI1OTc0MSwzNy4yOTg0NTM0NTY2MjcsMTUwMF0sXG5bNTUuNzQ4Njg5MTMyMTcxLDM3LjU4MzMzOTU1NzQ2OCwxNTBdLFxuWzU1LjQxNDg4MDE0ODE5MSwzNy45MDI5NDEyNzYwMjMsNDAwXSxcbls1NS40MTQ4ODAxNDgxOTEsMzcuOTAyOTQxMjc2MDIzLDc1MF0sXG5bNTUuNTM5OTAxMDE5MDY0LDM3LjU0NDY1NDU2NDcxNCw1NTBdLFxuWzU1LjM4ODEzMzU2MjIwNiwzNy41NDEyNDU2NTg1NTksMzAwXSxcbls1NS45MjQ1Mzk0ODY5NTUsMzcuNzU0MTI0MjcwNzQ2LDgwMF0sXG5bNTUuNjUwNzk3MDY3MzY4LDM3Ljg1NDY1ODIyNTY3NCwxNjAwXSxcbls1NS45MTUzODgyNDc2NDgsMzcuODU3OTM2Nzg1NTE3LDYwMF0sXG5bNTUuNDM5OTkyMDA1MDczLDM3Ljc1MTQzNDU3NDkyLDQwMF0sXG5bNTUuNzI5NjMyNDc4NTkxLDM3LjYzNjI4MTczMzU2OSw4NTBdLFxuWzU1Ljc0OTE5NDI0MTY2MiwzNy41ODk3Njc3Njg1MDMsOTAwXSxcbls1NS43NTE4MzQ1NTkyMTcsMzguMDA2NTk5NDM2MzQ5LDYwMF0sXG5bNTUuNjA0Mzg4OTc4MzUsMzguMTA1MTg2Mjc2OTQ5LDMwMF0sXG5bNTUuNzUxMzQ1MzM1MDU0LDM3Ljk5OTg3MDI4NTI3Nyw4MDBdLFxuWzU1Ljc5MzIyOTM5MjAyOSwzNy42MzYwODIxNzY4NzgsMTAwMF0sXG5bNTUuOTM3NjAzMDI0MzE1LDM3Ljg1NzQxNTYyMzI0MywzMDBdLFxuWzU1LjkzNzA5NTMzODkzMywzNy44NTM1NTY4NDQwNjYsNTAwXSxcbls1NS45NTAwODIwNTYyODksMzcuMzAzMDk4NDcxODYzLDU1MF0sXG5bNTUuOTMyMzYyNzc4NDY5LDM3Ljg0MzU3MTI2OTQ4OCw2MDBdLFxuWzU1LjkxODQ3MDQ3ODQsMzcuNzI1NzY1Mzg4NDg3LDg1MF0sXG5bNTUuNjg3NDM1MDgyMzE3LDM3LjMxMzUwNjcwNDY2NCw2NTBdLFxuWzU1Ljc2NDE5MDI0OTcwOSwzNy42MjkyNjEwNjE5MzksMTAwMF0sXG5bNTUuOTE5NTQ3NzExNjMxLDM4LjAxMTQ1MTI5MDEzMiw1MDBdLFxuWzU1LjQwOTg1NjMyMzQxNywzNy41NTAxMjQ4OTEzNDgsNTAwXSxcbls1NS43NjEyNjY4NzMyNjMsMzcuNTc2MDExODY4NDkxLDI2MF0sXG5bNTUuNzk5NzQ3NTIwMjAzLDM3LjQ4Mjk4MzQwNTE4MywyNjBdLFxuWzU1Ljc2Njk5NTY2NTk3NSwzNy4zODAyNDExMDM1NTcsMjYwXSxcbls1NS45MzA5MTE0NTMwMzgsMzcuODUxOTI1MTEzMDI2LDgwMF0sXG5bNTUuODU1MjAyNjEwMTg0LDM3LjQ3ODM5MDk3NjY2NCwyNjBdLFxuWzU1LjY1NTg1MzgxMjEwOCwzNy41NDE4OTEwMTY5NTIsMjYwXSxcbls1NS43NDkyMTg3MTk0OCwzNy41NDAwMDYyNDQ4OTEsMjYwXSxcbls1NS40MTg2MTc3MTAyNTksMzcuODMxODM5MTkzNDM1LDYyMF0sXG5bNTUuNDM2NDYzODc1OTA2LDM3Ljc3MTQ5Njc5MzM0LDUwMF0sXG5bNTUuNDE3OTk0NzEwNzEyLDM3LjgzOTU5NDI2MTkwMSw5MDBdLFxuWzU1LjU5MDY5NzExMDYyNywzOC4xMjc2MDcwMzk4NTgsNTUwXSxcbls1NS40MTk0MjU2MzE5NDIsMzcuODMyNzk0MDk5NTY3LDYwMF0sXG5bNTUuNDI1ODUwMzkzMjQ0LDM3LjU0Nzk0NjEyNTI5NSwyMDBdLFxuWzU1LjkzNjk1MjI2NTA4OCwzNy44NTE0NzA2MDc0ODksMTAwMF0sXG5bNTUuNTkyMDU1MjEyNzI0LDM4LjEyMzMwNjM5NzMzMyw2NTBdLFxuWzU1LjYwMTEyMDg1Njk3MywzNy4wMzQ1NDkzMjI3MTIsNzAwXSxcbls1NS40MzI4OTA5MDkwMDksMzcuNTYyNzIzOTg5MTksMTAwMF0sXG5bNTUuOTIzMTYxMTE2NjkzLDM3Ljk5MjA0MTE5OTQ2OSw2MDBdLFxuWzU1LjkyNDU4NDc3NDY5MSwzNy45OTg4NDg4NjA4MTIsMjgwXSxcbls1NS44NjA1MDUyOTQzNjksMzcuNDgzMjg1NDU4ODUzLDU0MF0sXG5bNTUuODE1OTQzNzMwNzM3LDM3LjM2Mjg2ODYwNjM4Niw3NTBdLFxuWzU1Ljc4MDg3NDEwNjg2MywzNy42MDYzMDM2MzExNjYsNDAwXSxcbls1NS43OTk4ODM3NjIyMjEsMzcuMjc5OTM0MjI0Nzg1LDEwMDBdLFxuWzU1Ljg2NjMwMjgyNTQ3NywzNy4xMTkwMzY5MDI3NDgsNTAwXSxcbls1NS45NTUyMzk2NDkwMTIsMzguMDUyMzg1OTU2MDE1LDQwMF0sXG5bNTUuNzQ3ODc0NzE0MjE5LDM3LjU5MjQzNDI5NTEzLDE1MDBdLFxuWzU1LjU4NDU5NjQ1Njc4MiwzNy43NDEwNTYyMTc1MDQsNDAwXSxcbls1NS43NjA4NjkwMzg2MzEsMzcuNjMyODQzOTUwMjQ4LDEwMDBdLFxuWzU1LjczMzc5Njg1ODUzMywzNy4zNzY4MzI4OTE4MjMsNTUwXSxcbls1NS45MTI4OTE5Mjc3NDYsMzcuODYwMDUxOTc4MDAxLDYwMF0sXG5bNTUuNzgzNjI5ODQ3NDg4LDM3LjcxOTIwMDgyNTg2NCwxMjUwXSxcbls1NS42NzAxMjQ2MDMxMDgsMzcuNDkzNjAyMjQzMzAyLDE1MDBdLFxuWzU1LjY1MjY0MzcwNjQ4NCwzNy42MTM2MjIyNDU1NTEsODAwXSxcbls1NS43OTkwODkyNTE4OTQsMzcuNzc0NzA0OTMwMzY3LDU1MF0sXG5bNTUuNDMzOTAyNjY4NDEyLDM3Ljc1NjEwNDUxMzA4MSwxMDAwXSxcbls1NS45MTc2MTI5MDM4MTQsMzcuODY3MDg5NDI5NDMyLDgyMF0sXG5bNTUuNjA1Njg4NTI0NTk0LDM4LjA5OTE0NzM0Mzk3LDYwMF0sXG5bNTUuNDMyMDc4ODgyODY4LDM3LjUyNDEzODk0OTY3MywxMDAwXSxcbls1NS42MDIyNDk2NjcyOTMsMzguMTA3Njg1NDUyNzE3LDU1MF0sXG5bNTUuOTI5NTM0OTAxMDM5LDM4LjAwMzIzNDY3NTcxNiwzMDBdLFxuWzU1LjkxOTQ1MzQzODkzNiwzNy45OTI0OTY0OTIzNDcsNTAwXSxcbls1NS40MTgxMzQxOTE1NjksMzcuNTc0MTg0NTgzODY1LDI1MF0sXG5bNTUuNDM2MzEzODAyNjQxLDM3LjU1MDUzNjI4NTY0LDgwMF0sXG5bNTUuODg1NTgzMDE5MjU1LDM3LjQyNzgyMDE0MjkyOSw4MDBdLFxuWzU1LjY2MTQwNjI2OTU0MSwzNy44NTczODk4NzY1ODMsMTMwMF0sXG5bNTUuNzc0NTQ5NzUzNjE5LDM3LjU0NjUwNDU5ODgwOCwzNTBdLFxuWzU1Ljg0NTU0NzQ1MTExOCwzNy42NjEwNjcxMDgwNSwzNTBdLFxuWzU1Ljc0NDU2NDYwNjM0MSwzNy41NjU1MzUxNTMxNDQsMzUwXSxcbls1NS42MDAyNjU4MDUzMTcsMzguMTIzMDAxODg5MDUyLDUwMF0sXG5bNTUuNTk3OTk4OTA5NDM0LDM4LjExMzEwMzM5MTg5NCwxMDAwXSxcbls1NS43NTQ5MzAwNDE3MiwzNy44NDMxMjc5NjA4NDcsMjUwXSxcbls1NS43NjU0MzY3NzQyODksMzcuNTk3NTM2NTEyNDkzLDI4MF0sXG5bNTUuNzQwOTc1NzA1ODYzLDM3LjYxMDMzNDM4MDM0OSw4MDBdLFxuWzU1Ljc1ODAwOTA4NzQzOSwzNy42MjU0NTM1NDI2NzEsMTIwMF0sXG5bNTUuNzYyMzEyMDk0ODQ5LDM3LjYwMzk1MTgzNjAzNyw4MDBdLFxuWzU1LjczNjM1OTgwMzEwMSwzNy42MTkxMDA0NjQ3OTMsMjAwXSxcbls1NS43MzczMjg3NzU2MDQsMzcuNjE1NDQyMDQ2NDU2LDc0MF0sXG5bNTUuNzY0MTcyMDMyNjM2LDM3LjYwMjQwOTUyMzkzNSw3MDBdLFxuWzU1Ljc2Mjg1MDI2NjYyNSwzNy41OTI3MzA1OTMzMDksMTAwMF0sXG5bNTUuNDMyMjIxNzcyOTgsMzcuNzY2OTQ3Nzc1NzcyLDEwMDBdLFxuWzU1Ljc2MDI0Mzg0NjE2NSwzNy42Mzk5MTIyMzQ5ODYsMTAwMF0sXG5bNTUuNjYxMzIyNDM0OTAyLDM3Ljk1MDI2NjI5Mjg0NSw1NTBdLFxuWzU1Ljc2NDQ5OTExMjQyNiwzNy42NTY5MTg1MDA4MTMsNDAwXSxcbls1NS43MzgzNTI2Nzg4MTMsMzcuNjYxNjgxMTM0NDYxLDUwMF0sXG5bNTUuNzU5ODI5MjYwNTgxLDM3LjU5NjA4MzYxNjA0MiwxMDAwXSxcbls1NS42OTE3NTc1ODQ2NTcsMzcuNTI5NzM1OTU4MzczLDI2MF0sXG5bNTUuODA0MzM4NjYxOTM1LDM3LjU4NDg1NDQ4NzEwNiw3NTBdLFxuWzU1Ljg4NjE4ODMwNzU1MywzNy40MjQ0NTc3NjU1NzQsNTAwXSxcbls1NS43NjI0OTUwNjcyMzEsMzcuNTg3NzQyOTcyODUsMTAwMF0sXG5bNTUuODA1NjgwNjQyMjc1LDM3LjQxMzYxMDg0NjQ0Niw4NzBdLFxuWzU1Ljc2OTI2NTA1NzcwMiwzNy41OTY4MTk3NjM3ODYsMTU1XSxcbls1NS43NjU4MjgzMjQ2MDIsMzcuNjA5ODk3MTc2NTM5LDEyNTBdLFxuWzU1Ljc1ODA0NzU3NzYxMywzNy41ODE4MjExNTg4MjksMTMwMF0sXG5bNTUuNzU1Nzc0ODQxMjA0LDM3LjYxNDYzODkzODg3MiwyMzBdLFxuWzU2LjAxMzQwNjkyMDk3NiwzNy40ODM3MzM1OTE4OTYsMTUwMF0sXG5bNTUuNzUyNjU3NDAyMTA4LDM3LjYwMzc1MjczNTExLDgwMF0sXG5bNTUuNzQ5NzA0MjgyOTUyLDM3LjU5Mjk3OTc1NTI2LDEwMDBdLFxuWzU1Ljg4NDk3NTU3MDM4OSwzNy40MjM3ODE4MTM5ODcsNzcwXSxcbls1NS43NDM3Njg2MzU3MzMsMzcuNjI3NzA2NzQ5ODkxLDQwMF0sXG5bNTUuNzQ1Njg5NzU3NzY2LDM3LjYyNjI5NDg4NDY2MywzNTBdLFxuWzU1Ljc1MjAzNTA5MjI3MSwzNy41OTExNzA4NTIxNDEsMjgwXSxcbls1NS43NTQwOTA4NjI1Njk2LDM3LjYzNTIxNTQzMTMxNDYsMzgwXSxcbls1NS43MzM0NTcyNzQ4MiwzNy43MDkxNjQyMTI3ODksNTUwXSxcbls1NS43NzE1Nzk0Mjk4ODMsMzcuNjgyMTk4NjQ0ODI2LDMxM10sXG5bNTUuNzU1Nzc0ODQxMjA0LDM3LjYxNDYzODkzODg3MiwzMTBdLFxuWzU2LjAxNDA4NjU2NzI2NywzNy40NjIyODIzODk4OTksNzAwXSxcbls1NS44ODU2Mjc3MDE5MjEsMzcuNDIwNjI2MDE3NTQ0LDEyMDBdLFxuWzU1Ljc3MTE0NzU2MjA4OSwzNy42MjAxMzczMDA0MTksNzQwXSxcbls1NS43Mzk0NDkwNzQ3MSwzNy42NjQ3NTIyMTgyOSwyNjBdLFxuWzU1Ljc1NzA3NTA5NDgwMSwzNy41OTkyMjM1Mjc3NjYsMjgwXSxcbls1NS43NTY0MzMzNTY3OTcsMzcuNjAxNDg1NDgxODI4LDE1MDBdLFxuWzU1Ljc0MjExMTc3NjQzNiwzNy42NTI0MDU4NDQxMzcsNTAwXSxcbls1NS43NDcwMDc2MzU3NywzNy41ODgxNTA4NzQ2OCwxNTAwXSxcbls1NS41ODkwNDM3MzE3MTMsMzcuNzU0NDU5MTU2MzI2LDgwMF0sXG5bNTUuNTkxMzEzNTE1NTU0LDM3Ljc2MDkzNTc2MTUxNCw4MDBdLFxuWzU1LjQzOTg0MDY4MDcyNywzNy41NjU1NTE4NzQ1MTgsNTUwXSxcbls1NS42MzcwMTczOTA1NzIsMzcuODQyMjIxMTQxNDQxLDEwMDBdLFxuWzU1Ljc2NjUxNzY4MTMwNSwzNy42MzA1NDI1NDkxNDUsMTUwMF0sXG5bNTUuNzU5NzEzMzg2ODM2LDM3LjY0NTI1NzEwNDQxNSw3NTBdLFxuWzU1Ljc2MDg3NjYyNzM3LDM3LjYxNzE2MTY2MTU3LDc1MF0sXG5bNTUuODQ2Njc5NTg3MTU0LDM3LjE5Mzg5NDQwMjA3MSw3MDBdLFxuWzU1LjY5MjI5NDcyNDcyNSwzNy43Mjc1NDI4MzgwNzcsMTAwMF0sXG5bNTUuNzYxOTI0MjQ3NTY0LDM3LjYxMzc0MDAzMjgxOCw1NjBdLFxuWzU1Ljc2NDE5MDI0OTcwOSwzNy42MjkyNjEwNjE5MzksNTAwXSxcbls1NS43NjA5Mjk5ODE2NywzNy42MjI4ODE0NDk1NzksNTAwXSxcbls1NS42NzQ5MzU2OTI4NDIsMzcuMjcwNTMxMzE3MTkyLDU0MF0sXG5bNTUuNjY3NjY1Mjg5NTc5LDM3LjI4NTA2OTIxOTI1NCw1NDBdLFxuWzU1LjY0MDcyNDA1MTI4NCwzNy4yMDgwODk4NzgzNDQsNTQwXSxcbls1NS43NjQ4MTQ2Mjg1MywzNy42MzgzNDg3MjcxOTcsMTUwXSxcbls1NS43NDgxOTA5OTMxODQsMzguMDEzNDM2NTY1MDk3LDEwMDBdLFxuWzU1Ljc2NDgxNDYyODUzLDM3LjYzODM0ODcyNzE5Nyw0MDBdLFxuWzU1Ljc0MzU4MzczMTQ0OSwzNy42NDc1MDgwMTg2MzgsODAwXSxcbls1NS43NDAzMjczOTIyODEsMzcuNjI4MTc2MjkwNzQ5LDE1MDBdLFxuWzU1Ljg2MjcxODk5MzIyMSwzNy40MzUwMzQzODc3MzMsMzUwXSxcbls1NS43MTY5NTUxMDc4NjYsMzcuNzkyMjMyNjQ5MDQzLDM1MF0sXG5bNTUuNzk5MDcxNTkwOTI4LDM3LjUyOTgzNTQ5MzUyNiwyMDBdLFxuWzU1Ljc3MjMxOTkxNDc1MywzNy42MzI5ODkyOTUyMDQsODcwXSxcbls1NS43NjI1ODgyMTc0NzgsMzcuNjI3MTcwODk2MDIsNDkwXSxcbls1NS44MDU1NTQyNDE4MjIsMzcuODAxNDEzNjgwMzc5LDkwMF0sXG5bNTUuNzc3NjY5MzIxMjIsMzcuNTgxNDQ2NDI1MDk2LDI4MF0sXG5bNTUuOTMxOTI5NDQ0NzczLDM3LjUyMDA5Nzg5NjEzNiwyODBdLFxuWzU1LjY3OTYzNDI2NDgwNywzNy41NjU1MTYwODE1NTYsMjMwXSxcbls1NS43OTY2ODYwMTg2MDEsMzcuOTMzNDExODM3OTkyLDI4MF0sXG5bNTUuOTYxMTA5MDMzMzY1LDM3LjUzMzY3MjUyMzM4OCwyMzBdLFxuWzU1LjgzNzM3MzEyMjY0LDM3LjU3NTEwMzgxOTI4LDQyMF0sXG5bNTUuNzcxNjAxMTg3NTQ1LDM3LjY4MjYyNzIxNzQsMjgwXSxcbls1NS43MDg3MTQxMTQ4MTIsMzcuNjIyMDgxMDcyMjYxLDIzMF0sXG5bNTUuNzYwOTQzMDI5MTU0LDM3LjYzMjUyMzQ5MTQzNSwyMzBdLFxuWzU1Ljc1NzQ5NTIwOTA2MiwzNy42MTIxODEzMzM5MDYsMTIwMF0sXG5bNTUuNzc4MzgzMTUwOTU1LDM3LjU5OTYyNTA0NTQxOSwyODBdLFxuWzU1LjYzNTE3MTk2ODg4MywzNy40MzY5MzcxNzYyNzQsMjMwXSxcbls1NS43NTU3NzQ4NDEyMDQsMzcuNjE0NjM4OTM4ODcyLDI4MF0sXG5bNTUuNzU0MDUxOTUzNTc5LDM3Ljg2MTUzNzA2MTI0OSw4MDBdLFxuWzU1LjU4MDg0NTYyNjc4NCwzOC4xMzY2NjY3NzIxMDgsNjAwXSxcbls1NS45ODE4NTIwNzk0NzMsMzcuODY0MTY2NjgwNTQxLDE5MF0sXG5bNTUuNzQ0NDgxNzExMzk4LDM3LjYyNzgwNDcwNDcwNCwxMjUwXSxcbls1NS43NTg0NTUwNTE5NDcsMzcuNjExNzYxNDIzMjc0LDUwMF0sXG5bNTUuNzQ2OTU3NjI0ODQyLDM3LjY1NDA4ODc3NzIyMSw2MDBdLFxuWzU1Ljg0MDg2NDAyMTg3MywzNy4zNzkwOTkxMjIwOTksMzUwXSxcbls1NS44NTY5ODIwMjM1NzYsMzcuMzg2MTIwOTYxODE0LDM1MF0sXG5bNTUuODk5OTMxODk5MDUzLDM4LjA2MDUxNjQxMDc1NSwyOTBdLFxuWzU1Ljg1ODcyMzE0ODMwNywzNy4xMTk2NTk4NDk4NDIsMTIwMF0sXG5bNTYuMDA3MjAzOTkxMDY3LDM3Ljg2NTMwODA3Mzk5Nyw2NTBdLFxuWzU1LjY3NTAzNDkwNzQ4LDM3LjcyMzc0MzYwMDc2NSw1MDBdLFxuWzU1Ljc0OTIxODcxOTQ4LDM3LjU0MDAwNjI0NDg5MSwyNTcwXSxcbls1NS42NjU1MDUxMTY1NzksMzcuOTQ5NjEyMDUzODk4LDQwMF0sXG5bNTUuOTIzNDU5MTU3MDkxLDM3Ljk4NTUwNTEwODM1Myw2NTBdLFxuWzU1Ljg5NDI0NjkwNzY0NSwzNy42MTM1MjU3MTY3NzEsODAwXSxcbls1NS44MTMwMjU1OTAwNTMsMzcuMzQ0NTgxMzQ1NDgzLDQwMF0sXG5bNTUuODEyNTgzNzA5NzE5LDM3Ljk1ODY3MzQwMjgxMSw5MDBdLFxuWzU1LjU4OTIwMzY2MzUzOSwzOC4xMzU4MzE5ODAyMTgsNDAwXSxcbls1NS43NTkyNjg3ODEwMiwzNy42MDkwMjk2NDQ3NjMsNjAwXSxcbls1NS43MDc0NDYzNDUyNjEsMzcuNjU5NzAxMzI2NzQ2LDYwMF0sXG5bNTUuNzUwNjI1ODAyNDU2LDM3LjU5NDc5MTQ5MTY4OCwyODBdLFxuWzU1Ljc2MDEzMTE3OTE1MSwzNy42NDk2MTkyMzIxNDQsMTEwMF0sXG5bNTYuMTAxNjAyMjk0MzQzLDM4LjEyNTU4NzAzMDE5OSwzMDBdLFxuWzU1Ljc0MTA3MzgwNDQ2NCwzNy42Mjg4NzExNDAzMjEsNzUwXSxcbls1NS44NDYzODkyODUyNjksMzcuNDg5NzkyNjAwNTA1LDIwMF0sXG5bNTUuNjY3MDA2OTMyNDYsMzcuODU4MTAzODA4OTY5LDkwMF0sXG5bNTYuMDEyMjgzNTI1OTQyLDM3LjQ3NjgzMTgwNDI3MywxMDAwXSxcbls1NS44MTU1ODEyNzk0MjksMzcuMzQwMDEzOTU2NjEyLDQwMF0sXG5bNTYuMDIzMjc1NzA1NTU4LDM3LjQxOTgxMDExOTk1MywxMDAwXSxcbls1NS42NDg5NjExNjc4MzgsMzcuNzQ0OTAxNDQwNTE5LDQwMF0sXG5bNTUuNzQxNTkzNDMzMzYyLDM3LjYyMTUxMDg2MzE0OCwxMDAwXSxcbls1NS42NjI4MjA2NDExMDUsMzguMDA1NDg4NzM1NzQxLDYwMF0sXG5bNTUuODQ0MzI4MTI2NDk4LDM4LjE4NTE4MDYzMjYyNyw2MDBdLFxuWzU1Ljk1MjUwMjA1NTExNywzOC4wNDk2Nzk5NzQ2MTIsNzAwXSxcbls1NS43NDEwNzg4ODYyNTMsMzcuNjIxNjIzNjIzNjM2LDYyMF0sXG5bNTUuNzUxNDk2OTE2NDU2LDM3LjU5OTEwMjcxMTM1NSw2MjBdLFxuWzU1Ljk1Njg3ODQ3ODUwNiwzOC4wNTIzMTE5NjI0NTgsNTAwXSxcbls1NS45OTkwNzA4ODEzNDUsMzcuODM5MDQzODc4NjgzLDE1MF0sXG5bNTUuNzA5MDQxNjUxNDcyLDM3LjY1NTI5Mjg0NjQ0Miw3NTBdLFxuWzU1Ljk1Njg3ODQ3ODUwNiwzOC4wNTIzMTE5NjI0NTgsMTUwXSxcbls1Ni4wMDQ0ODgxOTc3MDEsMzcuODQ2NTE5MjE2NjkyLDgwMF0sXG5bNTYuMDA4MjEwMjA2NjkzLDM3Ljc5ODIwNTgwNDk3Niw0MDBdLFxuWzU1Ljg0NzM4ODI3NTYxMywzNy4xNzkxNzYzMjQ2NSw0MDBdLFxuWzU1LjQ5MTE2NTI2MDc4OSwzNy4zMTE5ODI4NjU5ODQsNDAwXSxcbls1NS44Mzg5MzkyNDU4MywzNy4xODI5NjU4NDc4MDUsNTAwXSxcbls1NS43Njc5NjUwNTAxNTksMzcuNTMxNzY1Mjk4NzY0LDE3MF0sXG5bNTUuNzI3OTgyODU3NDU1LDM3LjU4MDU0ODAwNDQ4OCw4MDBdLFxuWzU1Ljc1MDg5OTI3MzkzMSwzNy43MTU0ODg3MDIxMiw3MDBdLFxuWzU1LjY1NzQ2MzMyMjM4OSwzNy45ODI0OTAwOTc2MTYsNjAwXSxcbls1NS43NzM0ODg5OTU4NjQsMzcuNTQ0MzYyMzIzNDk3LDEwMF0sXG5bNTUuNzA3Njg1MDMzMjkzLDM3LjU4NDQ5MDc2MDczOCwxNTBdLFxuWzU1LjcwNzY4NTAzMzI5MywzNy41ODQ0OTA3NjA3MzgsMzUwXSxcbls1NS43MzgzOTUxNTM2MTMsMzcuNjQwNDQwMDIyNzE3LDEwMDBdLFxuWzU1LjcwNjQwMjg5NjE5NSwzNy41ODY1MjI1NDQ3MzUsMzAwXSxcbls1NS43MDY0MDI4OTYxOTUsMzcuNTg2NTIyNTQ0NzM1LDI1MF0sXG5bNTUuNzY2MjQyNTE3NDcyLDM3LjUyNjU1OTU1OTA5MSwzMDBdLFxuWzU1LjkwMjU0NjM0MTg4MSwzNy41ODU5Njk2OTY4NDEsNjAwXSxcbls1NS44MDgxMzkyNDU1MzksMzcuNTgxNzA2MTg1OTQsODIwXSxcbls1NS43MDM5NDU0ODQyMiwzNy42ODY1NTY1OTIyMDQsODAwXSxcbls1NS42Nzc3ODI2NDcyNTMsMzcuNTcyMTcxMTUxNjI4LDUwMF0sXG5bNTUuNzA2NTE5ODM1NDksMzcuNTg1NDE2NjY1OTM0LDQyMF0sXG5bNTUuNzQ3NDcxNDUxOTQzLDM3LjcwNjg0NzM2NDkyNCwyNjBdLFxuWzU1LjU4OTc3Njk4MjY2NiwzNy45MDA1MTM4NDg0MDQsMTAxMF0sXG5bNTUuNzk1OTgyMjk0NzA2LDM3Ljk0NjQ1NjQ5MzgxOSwyNTBdLFxuWzU1LjcwNzY3Nzg5NTkyNCwzNy42MjU0MTYyMjY1NDcsNjQwXSxcbls1NS43MjA2MTI5MjUxMTgsMzcuNzQ2OTk1NTIyMzIyLDM1MF0sXG5bNTUuNzE0NTA5NDk1NzQsMzcuNzkxMzE0MzQ4OTQ5LDU0MF0sXG5bNTUuNjU5NTY3MDY5MDA5LDM3Ljk4MjQ4NDQ4MjI4Miw2MDBdLFxuWzU1LjY4MjUyNDg1MDA2NSwzNy42MjEyMTQ5Nzk1OTQsMTU1XSxcbls1Ni4wMTU2Mjg4OTYzMTEsMzcuNDc5ODc3ODI0MTgsMTAwMF0sXG5bNTUuNzA0NTMyNTE4MTU0LDM3LjU4NDg4MDIxNTAwMSwyMzBdLFxuWzU1LjcxNTYxMTc5Mzk2MSwzNy41MTY0MzU3MzY2MTUsMTAwMF0sXG5bNTUuNjk2MDgxMTA2MzEyLDM3LjYyNTYzMDU3Mzk3NCw3MDBdLFxuWzU1LjgyMjI3NTUwMjMwOSwzNy40OTkwOTIyODY4MTIsNTAwXSxcbls1NS43NDMyNTYwMDMwNjQsMzcuNjYxNjQ3NDI3ODM4LDUwMF0sXG5bNTUuNzM5ODEyMzIyMjE2LDM3LjQ2OTIzNTIwMjE3Miw4MDBdLFxuWzU1LjY4NzQzODAyMzI5MiwzNy42MDQzNzYxMzUxNjQsODAwXSxcbls1NS44MDMzNDI4NzYwOTksMzcuNjE4MTk2NzgzMjI2LDI2MF0sXG5bNTUuODAzMzQyODc2MDk5LDM3LjYxODE5Njc4MzIyNiwyNDBdLFxuWzU1LjcwNDQxOTUwMzE1OCwzNy42OTE3ODM5NDEwOTYsMTAwMF0sXG5bNTUuNzkzMjY5ODg3Njc5LDM3LjYwODY3NTEyMTQ2Nyw2MDBdLFxuWzU1LjgxMTQyMjY5OTc5LDM3LjYyNDgxNzEyMTY3OSw1MDBdLFxuWzU1LjkxODQ3MDQ3ODQsMzcuNzI1NzY1Mzg4NDg3LDY1MF0sXG5bNTUuNzcxNzk5NjQ0MTA4LDM3LjcwNTIxMDkzMjcwNSw2MDBdLFxuWzU1LjgwMDg2MDMxMzYwNywzNy41NjQ5MDEyMTYxODEsNzUwXSxcbls1NS42ODcxODA4ODI3NTUsMzcuNTczNjY3NTY3NDkxLDEwMDBdLFxuWzU1LjY3NzU0MjI0MDQ0OSwzNy42NTk4OTMxNzUzNDYsMjUwXSxcbls1NS43NDExNzgwMjY2ODYsMzcuNTAyNzUyMDY2ODk4LDI2MF0sXG5bNTUuODQ1NTQ3NDUxMTE4LDM3LjY2MTA2NzEwODA1LDI2MF0sXG5bNTUuNzU3MDcwNjc5ODI4LDM3LjY2MDg3MTg2NzkyMiwyNDBdLFxuWzU1Ljg1MDk4NDU3NTU5OSwzNy41OTc0NTQ0NTA5NDgsMjkwXSxcbls1NS44ODEwMTc3MTUwMTUsMzcuNDUwNDU4ODAyNTgzLDI0MF0sXG5bNTUuNzk1NTk5NzQzMTk5LDM3LjU5MzUwMjY0OTc5OSwyNDBdLFxuWzU1LjYwOTc3MjIzOTY0NiwzNy43MjAwNTI5NDc0ODIsMjkwXSxcbls1NS42MTEwODM2MzAwNywzNy42MDY4NjE4MDYxNzIsMjQwXSxcbls1NS43NjY5OTU2NjU5NzUsMzcuMzgwMjQxMTAzNTU3LDI0MF0sXG5bNTUuNjA2NzA4MDAwOTcxLDM3LjUzNjcxOTc5NTg3MSwyNDBdLFxuWzU1Ljc1MzQ4MTYzODkxOSwzNy43MTY1NjU1ODY0MSwyOTBdLFxuWzU1LjYwNDY1OTcxNzc1NiwzNy40ODg3ODkzMDQ0MjIsMjQwXSxcbls1NS44MDYwNzMyODI4OTEsMzcuNTgxMzUzMzczMDgyLDI0MF0sXG5bNTUuODkxNzY0MzMwNTQ0LDM3LjcyNzIzMDg0MDc4NiwyNDBdLFxuWzU1LjkxMDk0NTY1NDMzNiwzNy4zOTYxMDc3ODE1NiwyNDBdLFxuWzU1Ljc0Njc0MjQxMTU4MiwzNy41MzcxNjM3NzgyMDUsMjAwXSxcbls1NS42Mzk4ODA2ODk2NjIsMzcuNzU4MTM0MDgwMzY4LDI2MF0sXG5bNTUuNjY5Nzg5MjY0NTQ3LDM3LjU1MjIwMDAzNjE5NSwyNjBdLFxuWzU1LjczMzE2MzQ0NzQxMSwzNy42Njg5NjQwNjI3MjQsMjYwXSxcbls1NS43OTIzNzEyNDYyMzcsMzcuNjAyOTU5ODA3Mzg4LDI2MF0sXG5bNTUuODM3MzczMTIyNjQsMzcuNTc1MTAzODE5MjgsMjYwXSxcbls1NS42NTI0NDE2MjU5NDQsMzcuNzMzNzIyMzc5ODc0LDE1MDBdLFxuWzU1Ljc4OTU2NjE5MzIzMiwzNy43NTI1MjA5ODEzNTUsMjYwXSxcbls1NS42Nzk2MzQyNjQ4MDcsMzcuNTY1NTE2MDgxNTU2LDU2MF0sXG5bNTUuNzE0MTA1MjEwMzU0LDM3Ljc5NDUzMjY5ODczNSw3MDBdLFxuWzU1LjcyNjQ5ODcwMjc3NCwzNy41MzE4NTc3ODkyMDgsMTEwMF0sXG5bNTUuNzM5NzgxMTc4NjE1LDM3LjY1MjAxMTAxMjg0OCwyNjBdLFxuWzU1LjYxOTUwMzI5NDM3MywzNy41MDkzODYxMjc4NzcsMjYwXSxcbls1NS43NDMxMjE4NjU1NDIsMzcuNTA3MDYzMTA2MTk5LDIyMF0sXG5bNTUuODA5NDk4MDUyNDMxLDM3LjgzMTIzMDQxMjI2LDI2MF0sXG5bNTUuNjg5NDAxOTMxMDMyLDM3LjYwMTcwODk4NDAyMywzNTBdLFxuWzU1LjY4OTQwMTkzMTAzMiwzNy42MDE3MDg5ODQwMjMsMzUwXSxcbls1NS43ODE5NzQ1NDc5NSwzNy43MDQ0NjE5NDMyMjIsMjYwXSxcbls1NS44OTc3NzMxNzk1NjEsMzcuNTg4MjcwOTYyNDM1LDI2MF0sXG5bNTUuNjQwOTI5MzA5Njk4LDM3LjUzMDgwNTcyMzk2OSwyNjBdLFxuWzU1LjU2NTA2MzI2NzIyNCwzNy41NTY3Mzc5NTE3MjgsMjYwXSxcbls1NS42NDM3NTQ3MjEwMDUsMzcuNTI2Mzk1NjY5NDQ4LDI2MF0sXG5bNTUuNTAzMDQ2NDg5MjY2LDM3LjU3MjU1NzYzNjcwMSwyMTBdLFxuWzU1LjgwODA2MDQ1NTU3MSwzNy41Nzk4MTU3ODUzMjQsMjYwXSxcbls1NS42MjE4MjUyMzE5MzEsMzcuNzEzNzU1OTMwNzYxLDI2MF0sXG5bNTUuNDE0ODgwMTQ4MTkxLDM3LjkwMjk0MTI3NjAyMywyNjBdLFxuWzU1Ljc1NzA3MDY3OTgyOCwzNy42NjA4NzE4Njc5MjIsMjYwXSxcbls1NS42Nzc5NjYyODg0ODQsMzcuNzgwMzg1OTA3NTE2LDI2MF0sXG5bNTUuODEwMTgwMTI3NzgxLDM4LjE4MjUzODg1MjkxLDEwMDBdLFxuWzU1Ljc5NDM0MjM0OTg4MywzNy45MjYyNDc5OTY0MzksMjYwXSxcbls1NS44NzAyMzYxMjc1NTEsMzguMTkwMzM1NDc1ODcxLDQ1MF0sXG5bNTUuNzE1NDgyMDI3ODcsMzcuODE1ODQwMTAwODYzLDMwMF0sXG5bNTUuNzE1NDgyMDI3ODcsMzcuODE1ODQwMTAwODYzLDI1MF0sXG5bNTUuNzE1NDgyMDI3ODcsMzcuODE1ODQwMTAwODYzLDE1MF0sXG5bNTUuNzE3MzkxNjI1NTA0LDM3Ljc4NTM3NzI0NDU1LDU1MF0sXG5bNTUuNzE1MjQ4MTM3MTUyLDM3LjgxNzI5NjY5OTAzNSwyNTBdLFxuWzU1LjgxOTE2NTQzODUyMiwzNy43MjMxNzk0NDk4NDQsNjAwXSxcbls1NS42NTY5MzkwMzY3NDEsMzcuNzI1MzUxOTQwMjA4LDIwMF0sXG5bNTUuODA3MTMxMjQwNzEzLDM4LjE4ODk1OTExNTY1Niw5MDBdLFxuWzU1LjYxNjQ1MzE4MjUzNiwzNy42NTgwNjA2MzM5MTUsNjAwXSxcbls1NS42NDY5OTY3MjM3OTQsMzcuNDExNzE2MzA0ODgzLDI2MF0sXG5bNTUuODA4MDYwNDU1NTcxLDM3LjU3OTgxNTc4NTMyNCw1MDBdLFxuWzU1LjYwOTUzNzgyNjYyNiwzNy45NzcwMzExMDU4MzMsNjUwXSxcbls1NS43ODE0NDcwNzMzNjgsMzcuNTU2MTY5MzY4NzMsNTUwXSxcbls1NS42ODAyNjA1Nzc1MTUsMzcuNTcwNjU4Njc2MDY2LDEwMDBdLFxuWzU1LjY5MTc1NzU4NDY1NywzNy41Mjk3MzU5NTgzNzMsMjgwXSxcbls1NS42Mjg4MjM3NjI1OTEsMzcuMDIxNTc5ODg1NjM2LDQwMF0sXG5bNTUuODA1MDUyMTUwMjgyLDM3LjUxNzA4OTA1MDc2OCw1MzBdLFxuWzU1LjcwNDk2MzI1MzEyNSwzNy4wMjczODk1MDAwMTQsMTAwMF0sXG5bNTUuNzU3MzAyODIyNjIxLDM3LjU5OTE0NjA0Mjk1NCw1NjBdLFxuWzU1LjcwNjkyNjg2NTAxMSwzNy41OTIxNTI2NTg3MjYsNTMwXSxcbls1NS45MDkzOTUxMjk2OCwzNy41NDA0MDA1NzExOTgsNTMwXSxcbls1NS42NjQxMjUxNTgxNSwzNy40ODIyMDgxODYxOTEsNTMwXSxcbls1NS43NTE4MjEyMjA0MjYsMzcuNzE2MTA0ODIyNTAzLDUzMF0sXG5bNTUuODY1NTcxODI4Nzk2LDM3LjcwNDk3MTU2OTQxMiw1NjBdLFxuWzU1LjcwNTI4Nzc5ODU3NiwzNy4wMTk3NDE4Mjg0NywyMDBdLFxuWzU1LjY5MjIyNDYwMjgxOCwzNy44OTY0MjkxNzk4MzcsNTYwXSxcbls1NS42NzA5MjM4NTk1ODIsMzcuNjcwNDc0MDgyMTAyLDQ4MF0sXG5bNTUuNjcwNjU4Njk0OTgyLDM3LjY3MTI2NDQyNjUwNywzMDBdLFxuWzU1LjY3NzkzODUyMTQ0NSwzNy40NjcxMzc5OTI4MDEsMjgwXSxcbls1NS42Nzc5Mzg1MjE0NDUsMzcuNDY3MTM3OTkyODAxLDI0MF0sXG5bNTUuNTcwNTkwNzk3ODIxLDM3LjQ0OTk2NzU3Mzk2MSwyODBdLFxuWzU1Ljc3OTkwODY1MTc0LDM3LjY5ODk1NzkwMTYxLDM1MF0sXG5bNTUuNjAwMDc2ODI5MzY4LDM3LjE2NDMwNTQ2MDU0MSw2MDBdLFxuWzU1Ljc5ODc5Njk2MzMxNSwzNy42ODk2MDQwODU0Nyw2MDBdLFxuWzU1Ljc2MjQ2NDIyMTg2NCwzNy41OTE5MjMwNTA5MTQsMTUwMF0sXG5bNTUuNjI4NzIxNjI1NjQyLDM4LjA0MDg5MTU5NzUzMiwzMDBdLFxuWzU1LjY3MDAzOTU0MTE2MiwzNy41MzgzNTU1MzU4MzMsNTAwXSxcbls1NS42NDMzNTIyMTMyNzUsMzcuNzA5MTExMzQ5Mzg1LDY1MF0sXG5bNTUuNzgyMjMxMDg5NjA4LDM3LjgzNTgwODU0MzE5Myw4MDBdLFxuWzU1LjgzMTMwMTg0ODk4LDM3LjQ0NTUxMzMyMTc1OSwxNTBdLFxuWzU1LjcwMzc4NDA0NTYyOCwzNy41NzQyODM5MDA1NjUsNzUwXSxcbls1NS44MDUyNjA0MTE5MDQsMzcuNTEwOTcyOTUwMzEyLDEwMDBdLFxuWzU1LjUzODI5MjUzNDk0LDM3LjA2Nzc3MzM5MTEzMiw3MDBdLFxuWzU1LjY0ODM1MTQ2MDI4NSwzNy43MTI3OTc1MjY0NDUsNTAwXSxcbls1NS42NzkxNDE3OTAxMjYsMzcuNTYzODIzNzY2NzQsMTIwMF0sXG5bNTYuMDY5MTI0MzExMTA5LDM3LjEzMzkwMjkxNjM0NSwyODBdLFxuWzU1LjU5MDg5OTYwMDgyNiwzOC4yMDMzODk2Mzg3NDMsNzAwXSxcbls1NS45NDkzOTAzMjI1OTMsMzcuMzA5MzI0ODQ2ODE0LDI4MF0sXG5bNTUuNTQwMzY2ODM2MDYyLDM3LjA4MzQ5NDg5OTA1Myw2NTBdLFxuWzU1LjU4OTgxMzQ3NjE1MiwzOC4yMTA1MzA2MDcwOSwyMDBdLFxuWzU1LjU3NDg4MzIzOTk2OSwzNy41ODAxMDI2MDMzMjIsMjYwXSxcbls1NS44MTg5MzY1MjAyNjIsMzcuNzA5NDA4MTAyNTAxLDE1MDBdLFxuWzU1Ljc5MjU1MTE2OTIwNCwzNy41MjgzOTA4NzYzMzMsMTAwMF0sXG5bNTUuNzk5MDcxNTkwOTI4LDM3LjUyOTgzNTQ5MzUyNiwzMDBdLFxuWzU1LjcyODUxMDI5MTk3MSwzNy42MjMwNjQzMjk2NTcsNDgwXSxcbls1NS42NTgyNTA2MTM3MjcsMzcuNzQyNDA5ODU2MzgzLDEyMF0sXG5bNTUuNzkyMDEwMTIxOTg4LDM3Ljc0OTE2ODUzNjgsMTAwMF0sXG5bNTUuNTk5OTA4ODEwNzc4LDM3LjA0MDI4MTQ1ODIwNCwxMDAwXSxcbls1NS44OTc2MDI2NzEzNTksMzcuNjA0NTQ1NTE2NTMzLDgwMF0sXG5bNTUuNzk4NzE2MTc0NiwzNy41MzIxOTY2OTQ2MywzMDBdLFxuWzU1Ljc2ODEzNzkxMzkwNywzNy41OTk5ODc5MTQ3OTMsNDkwXSxcbls1NS43ODI1ODYwNzA3NTA4LDM3LjcwNTU0MjQwMzc3NDksMTEwMF0sXG5bNTUuNTY2OTc2MzcxNTQ4LDM4LjE5NjQzMTA5MzI0MSw3MDBdLFxuWzU1LjcxMjU0NjE2OTQ0NiwzNy41NjY0NDM5MjQ1NSw4MjBdLFxuWzU1Ljc0OTIxODcxOTQ4LDM3LjU0MDAwNjI0NDg5MSw4MjBdLFxuWzU1Ljg4MzQxMDI4OTAzNywzNy41NTg1MzE1ODUzODIsMTUwMF0sXG5bNTUuNzc3MzY4Mjg1MjAyLDM3LjQ4NzU2MTg1MjYzMyw5MDBdLFxuWzU1Ljc3OTQxNDE4MjA3OCwzNy42NjY5MjIyMDY0NCw4MDBdLFxuWzU1Ljc1MjY2NDgyNzQzNCwzNy44MTg4ODU4Njg0NzYsODIwXSxcbls1NS43NDQ5MDg1MzM4MzMsMzcuNjAxMzkxMTg0MDcyLDgwMF0sXG5bNTUuNzI4Njg1NDk3NTgxLDM3LjYxMDg3NDIwODE1NCw4MjBdLFxuWzU1Ljg2NDkyOTIxNjYzOCwzNy42MDUwOTQ3MTI3MTksODAwXSxcbls1NS44MDM5NTI5MjMzNTIsMzcuNzA3MjU1MDcwMDU3LDE1MDBdLFxuWzU1LjczNjE3NzM1Nzc1LDM3LjU5MDMyOTU4Mzk0LDgyMF0sXG5bNTUuODQ5NDE3MTMyOSwzNy40Mzg5OTQzNTQ1Niw4MjBdLFxuWzU1Ljk2MzY1NDcyNjA0MSwzNy40MTUwNzA2NzE5NCw4MjBdLFxuWzU1LjkyMTE5MzU4MjMzOSwzNy42NjQ5MDY0NDM5Myw4MjBdLFxuWzU1LjgwMDEzMTc1NjQzMSwzNy41MzUxODU0Njg3NjcsMzAwXSxcbls1NS42MzI3MTU3NzY3NjEsMzcuMjExMjg2NTc5OTEzLDE1MDBdLFxuWzU1Ljc5NDc1NzY3ODkyMSwzNy43MTMyMjAzOTI5OTIsNDkwXSxcbls1NS43NzQxNDg4NTU4NzksMzcuNTgxOTQ4ODA5MzIyLDIwMF0sXG5bNTUuNjYxOTA5MDU1MDM5LDM4LjAxNTA2NTY3ODczNiwyMDBdLFxuWzU1LjgwNTI0NDk5Mjk1OCwzNy41MTU2NjYxMjU1NDUsMjAwXSxcbls1NS42MjAzOTM5OTQ1MjYsMzcuNjcxMDM2MjA0NDA2LDY1MF0sXG5bNTUuODMyOTEwMTU3NjY4LDM3LjYyODg3NjY5MTc1MywyNTBdLFxuWzU1LjgzMDQyNTcxNTA0OSwzNy42MjgwNDI1NjQxMzcsNDAwXSxcbls1NS42NTMxOTYzMTUyNjgsMzcuNTk2MTY0NzI4MzY5LDIwMF0sXG5bNTUuODMyMDc1MTEzOTU4LDM3LjYzMDA3Mzg2MDI2Nyw2MDBdLFxuWzU1Ljc5NzE5NTY4NzY3NCwzNy43MTcxMjQzMTI5ODksNTAwXSxcbls1NS44ODQ3MjkwODYzMzYsMzcuNTk4NDIxMzQ2NzM1LDU1MF0sXG5bNTUuODMxMTkyMjIzMTYxLDM3LjYyNTQyNTU1ODk3LDI1MF0sXG5bNTUuNzQwMTQ5MDA4MDIxLDM3Ljg1ODQzMzY0MDMzOCw3NTBdLFxuWzU2LjAwNDYyMzM3MzcyNiwzNy44NTc0Mjk5OTIxNTcsMjUwXSxcbls1NS43OTIwMTAxMjE5ODgsMzcuNzQ5MTY4NTM2OCw3MDBdLFxuWzU1Ljc5MjAxMDEyMTk4OCwzNy43NDkxNjg1MzY4LDI1MF0sXG5bNTUuNTUxOTg2Mzc0NjQxLDM3LjY5MjgzNTUwMjkzNiwxMDAwXSxcbls1NS42Mjg5MzE1MDM2MjQsMzcuNzQxMzMwMDc3NzgsMTMwMF0sXG5bNTUuODE3NjYyOTc4OTQzLDM3LjU5NjcxOTE0NzY3NywxMDAwXSxcbls1NS43NzA1NjAzNDYwNzEsMzcuNjU1NTE3MzU1NTQsNjAwXSxcbls1NS43ODM1MjU1Njg0OSwzNy42OTI5NjkwODE1MjcsOTAwXSxcbls1NS42NTMxODY5NzU2NDMsMzcuNTU0MTYzOTU3MDgyLDUwMF0sXG5bNTUuNzg5NTQ2MTQ5OTg2LDM3Ljc0ODM3MzgyOTg5MSwyODBdLFxuWzU1LjYwMDQ4NTQ2NTQsMzcuNjA3NjE3NDM2NTA3LDcwMF0sXG5bNTUuNzg5NTQ2MTQ5OTg2LDM3Ljc0ODM3MzgyOTg5MSw0NDBdLFxuWzU1Ljc4OTU0NjE0OTk4NiwzNy43NDgzNzM4Mjk4OTEsNDUwXSxcbls1NS43NTcyMTg3NzkxOTQsMzcuNjU5MTMzNjE5MTQ4LDY1XSxcbls1NS41OTQ0NDA2MzY2NzYsMzcuNjE2MTM2OTk0OTE4LDMwMF0sXG5bNTUuNzg5NTY2MTkzMjMyLDM3Ljc1MjUyMDk4MTM1NSwyOTBdLFxuWzU1LjgyODExOTQxMDU3OSwzNy42MDEwOTc5NjYwOTMsNTMwXSxcbls1NS43NTA0MDMxNTE2ODIsMzcuNDE0ODI0ODM2MTI5LDc1XSxcbls1NS43NTYxNTQ0MTMzMywzNy42NTU1NzY4ODE0OTksNTAwXSxcbls1NS45MzI3MTg0NDUxODUsMzcuNTQ3OTQ3NjIwNjc2LDEwMDBdLFxuWzU1Ljc5NTA1NjQ2NTAzLDM3LjczMjA2ODIxMTUzOCwzNTBdLFxuWzU1Ljc4ODE0NjQ4MjMyMywzNy43NDkzNDQ5ODMxNiwyNjBdLFxuWzU1Ljc4ODQ0NjYzNDA4NCwzNy43NDgwNDAwNDQyMzIsMTgwXSxcbls1NS42NTYzMzUwODg3NzksMzcuNTY5NjQzMjgyMTQ3LDE1MDBdLFxuWzU1LjgwNDAzNTM5MDkxMSwzNy41MzQzMzkwODQwODYsNTAwXSxcbls1NS40MjAyNjc5NjMxMDcsMzcuNTQ3ODQ3OTIzNDUzLDI0MF0sXG5bNTUuNzU1NjEzMjcyMTc4LDM3LjYyMzU3MTcyODc3Myw1MDBdLFxuWzU1Ljc2OTU0MDExMDUxOSwzNy41OTczNTM2Mjc5NzksOTAwXSxcbls1NS43ODQyNjI0MTY3ODMsMzcuNzE1MjY4ODMyMzgyLDI1MF0sXG5bNTUuNzgyODQ2OTg2NDk3LDM3LjcyODQ4OTkwMzc0NSwzNTBdLFxuWzU1LjgwNjk0NjQ1NTIyMiwzNy41MTI1MDU4MjI1MDcsNTAwXSxcbls1NS43OTIzMzUyOTY5NjgsMzcuNjk1MzMwNjgwMjI2LDM1MF0sXG5bNTUuODA1ODAzMDk4MDc2LDM3LjUxNDg1MTg3NDMzOSw1MDBdLFxuWzU1LjY3NzUxMjUwMDk3OCwzNy43NDY0NjE3MDAwMSw0ODBdLFxuWzU1LjU4MTIyNzg5Nzk2NiwzNy42NzY1MzM0ODI2MTUsNTUwXSxcbls1NS44MTY5MDg2MDY0MDIsMzcuNzExOTI1MjU0MDksNDUwXSxcbls1NS44NDc3MjM3MjIzMzksMzcuNTY0MzE0MjM0MDYxLDQ1MF0sXG5bNTUuODA4MTY1NTY4NTQ1LDM3LjUyOTQxNDY3NjA2Niw1MDBdLFxuWzU1LjczMjkxNDIxNDk5NCwzNy40MjczMTM5Mzk1NTUsNzAwXSxcbls1NS43NjY5OTU2NjU5NzUsMzcuMzgwMjQxMTAzNTU3LDI4MF0sXG5bNTUuNzA0MTA0MjU5Mjk4LDM3Ljc1MTA2ODIwOTY4NSw1MDBdLFxuWzU1LjYxODYzNzM2MzcyNSwzNy41OTI4MjM3MzM1ODksMTAwMF0sXG5bNTUuNjc4Mjg5NjE0MzI3LDM3Ljc0MDIxMDMyMzQzMiw1MDBdLFxuWzU1LjY3MjQ5NTA5NTg2MywzNy41MTU0NTAzODg1OCw4MzBdLFxuWzU1LjY1NjgwNzkxNjIzOSwzNy40NzIzMjk5MDI0OTYsODMwXSxcbls1NS42MTg5MDMyOTEyNTYsMzcuNTkyNTQzMjk4Mjg4LDEwMDBdLFxuWzU1LjY3MTQ3NDc2ODg5NSwzNy41MTgxNTAxMDA5ODcsMTUwMF0sXG5bNTUuNjE5MDIwNDcxNzYxLDM3LjU5MTc3NTc1NzM1MiwyMDBdLFxuWzU1LjY3MjkyODUyNzMyMywzNy43NDc1NTEyMjkzODQsMTAwMF0sXG5bNTUuNzc1MjA4MTk2NDcxLDM3LjU4NTQ4MTE1ODg3LDgzMF0sXG5bNTUuNjczMDg3NTI0MzczLDM3LjU0MjI1MDEwMjUxOSwxMjAwXSxcbls1NS40NzM3Njk1NzIwNDcsMzcuMzExMjAxODk5MjQ5LDI4MF0sXG5bNTUuNzk1MDcxNjgzNjUyLDM3LjUxMjI3MTk4NDk5NCwxMDAwXSxcbls1NS42OTgyMzY4NDUwNTIsMzcuNzYzMjc2OTYxMzA4LDcwMF0sXG5bNTUuODA3NDIyNjE1MDczLDM3LjUyMTYzMDgxMjAzMiwxMDAwXSxcbls1NS43NzcyOTY2ODExMjUsMzcuNDU3MTU4NDI1ODE3LDIxMF0sXG5bNTUuNjY3MTY1MTM1MTU0LDM3LjQ5MTQyODE2NDQwNyw3MDBdLFxuWzU1Ljc5MTg2NzU1NDE2MSwzNy42OTI3NjU3OTQxNjgsNTAwXSxcbls1NS44Mjk0MjM2ODM2ODgsMzcuODE2MDEwODE4MDM5LDcwMF0sXG5bNTUuNzA3MDUzMTk0NDU1LDM3LjQwMjkzNDU3OTQzMiw0NTBdLFxuWzU1LjY0NDI3NzgwMjU3LDM3LjUyMzE3OTcxMzk2NiwxNTBdLFxuWzU1LjcwNzA1MzE5NDQ1NSwzNy40MDI5MzQ1Nzk0MzIsNDUwXSxcbls1NS42NjUzMTMxMTg1NzEsMzcuNTEzNDEzMzQyNDAyLDUwMF0sXG5bNTUuNjQzNzU0NzIxMDA1LDM3LjUyNjM5NTY2OTQ0OCwxNzBdLFxuWzU1Ljg2MzcxMjY4MzYwMSwzNy41NDU4MTUwMTE4MjcsNTAwXSxcbls1NS45MTMxNjQ3ODgwNjUsMzcuNTcxMjQ4OTEyMDI2LDI1MF0sXG5bNTUuOTA5Mzk1MTI5NjgsMzcuNTQwNDAwNTcxMTk4LDMwMF0sXG5bNTUuNjI0OTgzNjIxNTQ3LDM3Ljc5ODgxMjk1MTczLDYwMF0sXG5bNTUuNjUwNzUxNTM4NDQ3LDM3LjU2MDMwODIwNzg4MSwxMDAwXSxcbls1NS41ODE5MjMxODYwNDYsMzcuNjU3OTE5MTA4OTY3LDEwMDBdLFxuWzU1LjcwMTMxMjkxMjExMiwzNy41MDM3OTAxOTM2NzcsMTA3MF0sXG5bNTUuNjY5Nzg5MjY0NTQ3LDM3LjU1MjIwMDAzNjE5NSw3MDBdLFxuWzU1Ljc2MTM5NDI0OTUzNSwzNy41ODM2ODI4MDQzNjgsMTAwMF0sXG5bNTUuNjc3OTM4NTIxNDQ1LDM3LjQ2NzEzNzk5MjgwMSwyODBdLFxuWzU1LjYwNDY1OTcxNzc1NiwzNy40ODg3ODkzMDQ0MjIsMjgwXSxcbls1NS43OTA0Mjc2MzgxMDcsMzcuNjg3MTAwMzY0MTIsMzUwXSxcbls1NS42NDI1NjExMTIyMywzNy41MjAxMDc4ODY1MjgsNzUwXSxcbls1NS42MzUyNTQ5Mjg0NzUsMzcuNTE3NjM1MTIzMzgzLDUwMF0sXG5bNTUuNzI1NTU2NTM0MTQxLDM3LjM3NzczMDIzMTA2NSwzMDBdLFxuWzU1LjYzNTI1NDkyODQ3NSwzNy41MTc2MzUxMjMzODMsNTUwXSxcbls1NS42NTI2Nzc4NTc1NTIsMzcuNDc1NjQwMDg1NDA0LDMwMDBdLFxuWzU1LjY2NjA3OTEyMTg3NywzNy41NDU5OTgyNzQ1OTEsNjAwXSxcbls1NS43MDI0OTU3MDE5NDksMzcuNDY2NDI3NzIzNTQ1LDgwMF0sXG5bNTUuNjY5Nzg5MjY0NTQ3LDM3LjU1MjIwMDAzNjE5NSwyNDBdLFxuWzU1LjY3Njk0OTA3MjUwMiwzNy41MDQ4Mzk2MjE1NTcsMTIwMF0sXG5bNTUuNzI5MDE3NTI0MTQ3LDM3LjY4MDAzNjgwNDE4NSwzNTBdLFxuWzU1LjYzMTU1OTI3MjM4NywzNy41MTgwNjUwNDM3Miw0NTBdLFxuWzU1LjgxODQ2NjE3MTcxMywzNy41MDA0OTc4MDc2ODgsMTMwXSxcbls1NS42MzE1NTkyNzIzODcsMzcuNTE4MDY1MDQzNzIsNDUwXSxcbls1NS43OTk3NDc1MjAyMDMsMzcuNDgyOTgzNDA1MTgzLDk1MF0sXG5bNTUuODM5NjUwMTkzNDc4LDM3LjM4NzkxOTgzMDkyNSw5NTBdLFxuWzU1LjcxNzQ5NzE2MzQ4OSwzNy43OTM2Nzg5MDMxMDMsMjAwXSxcbls1NS42NTk0OTE1Mjc4OTIsMzcuNzQ5NjA0NDE5MDQxLDI1MF0sXG5bNTUuNjU1NDM0MjU5NTYyLDM3LjUyMzI5Mzg0NjE4MSwyOTBdLFxuWzU1LjQyMDI2Nzk2MzEwNywzNy41NDc4NDc5MjM0NTMsMjUwXSxcbls1NS43NDAyMTc2MjcyMTUsMzcuNzg0NTA1ODQ4MzM2LDIwMF0sXG5bNTUuNzE2MTgzNTkzNzAyLDM3LjgxMzY3Mjg3NDY1MSw0MDBdLFxuWzU1Ljc1MDIyOTAyOTE4MywzNy43NzA1MjY4OTE2NywxMDAwXSxcbls1NS43NzU2NzU4ODc5MDgsMzcuNTg0Nzk4MDk4NTYzLDgwMF0sXG5bNTUuNjU5MDU5MDY2NjY2LDM3Ljc1NDQyNTA0NzQ4Niw2MDBdLFxuWzU1Ljc1MjAwMDg0OTU2NiwzNy43NTM2NTM2MTI3MDQsMTgwXSxcbls1NS43MTQxNDk4MTI2OTUsMzcuODIxMDg2NTAyMTg3LDI1MF0sXG5bNTUuODM2NTMxNDkyNzQ1LDM3LjU3NDA2NjE1NTExMSw1MDBdLFxuWzU1Ljk1MDQzNzY0NDE3OCwzOC4wNjEzMjE5NjU1MjYsNTUwXSxcbls1NS44MTkxNTM4MTYyNDcsMzcuMzk2ODE5Mjk4MTQxLDEwMDBdLFxuWzU1Ljc2NTMyMzg5NTk4MiwzNy44MzMyNzU2MzQzMDMsNDUwXSxcbls1NS44MDU4Mjk5ODE4MjUsMzcuODE3NTQyMDYwODcxLDYwMF0sXG5bNTUuNjMyNTM4NTcyODg4LDM3LjUxOTcyMDE5NjQ0MiwyODBdLFxuWzU1Ljg0MDIyODkxMjM3OCwzNy41NzkzMjA4MTgxMTQsNTkwXSxcbls1NS42Mzk4ODA2ODk2NjIsMzcuNzU4MTM0MDgwMzY4LDUwMF0sXG5bNTUuNjczNDUwMDgyNDYyLDM3Ljc4MDY4MTI5NzE3Niw3MDBdLFxuWzU1LjY3MzQ1MDA4MjQ2MiwzNy43ODA2ODEyOTcxNzYsMTAwXSxcbls1NS42NzM0NTAwODI0NjIsMzcuNzgwNjgxMjk3MTc2LDMwMF0sXG5bNTUuODU1MjAyNjEwMTg0LDM3LjQ3ODM5MDk3NjY2NCwyMzBdLFxuWzU1LjgwNTA1Njk0MjQ0NCwzNy40MjA1NzQ4MTM4MDcsNjAwXSxcbls1NS42NzM0NTAwODI0NjIsMzcuNzgwNjgxMjk3MTc2LDMwMF0sXG5bNTUuNTg1MjcxNzA1NTE4LDM3LjcyNDg5Mjg1MzEzMywyNDBdLFxuWzU1LjY3MzQ1MDA4MjQ2MiwzNy43ODA2ODEyOTcxNzYsNjAwXSxcbls1NS40MzAzMjI5Mzk1NDgsMzcuNTQ5NjM0NjY2OTA1LDEwMF0sXG5bNTUuNzYyMDMyODM5OTg3LDM3LjYzNTE2Mzc3MTYyMiw2NTBdLFxuWzU1Ljc1NzIzMjgxODQ4NiwzNy41OTUxMTU2NDg4NDYsNjUwXSxcbls1NS42MTE0NzUwNjI4NDQsMzcuNzMwNjYyNjM2MzQ5LDY4MF0sXG5bNTUuNjEyMDgxNzA4NTY4LDM3LjczMjgzMzIyNTE1NCwyODBdLFxuWzU1LjY5OTM4OTA5MDM5NywzNy44MTg1MDMzMjM2OTQsNTAwXSxcbls1NS44NDg1Nzk4MzIyMjUsMzcuNjE3OTcxMTg0NDY2LDM0MF0sXG5bNTUuNjczNDUwMDgyNDYyLDM3Ljc4MDY4MTI5NzE3NiwyNTBdLFxuWzU1Ljg2MTY4MTk1MTI1MSwzNy42MTM0MDg5Mjg4MjIsMTUwMF0sXG5bNTUuODUwOTg0NTc1NTk5LDM3LjU5NzQ1NDQ1MDk0OCwyNDBdLFxuWzU1Ljg2NDQ0MzI4MzgwMSwzNy41NDgwNjk2NDY4MjgsMjUwXSxcbls1NS44NTA5ODQ1NzU1OTksMzcuNTk3NDU0NDUwOTQ4LDMwMF0sXG5bNTUuODgyOTQyMTI4ODQsMzcuNjA1MjUxMTI5Nzk2LDM1MF0sXG5bNTUuNjA2NzA4MDAwOTcxLDM3LjUzNjcxOTc5NTg3MSwyODBdLFxuWzU1LjYzOTg4MDY4OTY2MiwzNy43NTgxMzQwODAzNjgsMzUwXSxcbls1NS44NTU2NDk5MjAzNDgsMzcuNjE5OTYzNDI1MzY3LDcwMF0sXG5bNTUuNjkxNzU3NTg0NjU3LDM3LjUyOTczNTk1ODM3Myw1MDBdLFxuWzU1Ljc2MjI2ODQ0NDY5NSwzNy42MjIyMDQ1NjQzNyw0NTBdLFxuWzU1Ljg3NDMzNzY3MDE4MywzNy42MDkxOTA5OTA5MDEsNzAwXSxcbls1NS44NzAxNjY2MTAxMTcsMzcuNjAyNTY4NjE2MTcsNTAwXSxcbls1NS42MjUxNDI1NzU1MTcsMzcuNzYwOTExOTM2ODA5LDI1MF0sXG5bNTUuNzg4NTgyNzIxOTc3LDM3Ljc4MzkxNzgxNDUxLDIwMF0sXG5bNTUuNjI4NjE4MTUyNTMsMzcuNzQwNzE3MTc3NDc0LDEwMDBdLFxuWzU1LjYyNTE0MjU3NTUxNywzNy43NjA5MTE5MzY4MDksMjUwXSxcbls1NS43ODA1Mzc3NTM3NSwzNy41NzQ3MDQyNTkzMDMsMTI1MF0sXG5bNTUuODQwMTM5MDU4MTg2LDM3LjQ4NjIxMjQ4Mzc5OSwxNDBdLFxuWzU1Ljc1NDY4MTc3NjM2NywzNy42MjE1MjkxODYwODUsODAwXSxcbls1NS42MTk1MDMyOTQzNzMsMzcuNTA5Mzg2MTI3ODc3LDI4MF0sXG5bNTUuNjE5NTAzMjk0MzczLDM3LjUwOTM4NjEyNzg3NywyMzBdLFxuWzU1LjYxOTUwMzI5NDM3MywzNy41MDkzODYxMjc4NzcsMjUwXSxcbls1NS42MTk1MDMyOTQzNzMsMzcuNTA5Mzg2MTI3ODc3LDM1MF0sXG5bNTUuODg2ODc1Njg4NzI2LDM3LjYwMTE2Mjk5OTU5NSw1MDBdLFxuWzU1LjYxOTUwMzI5NDM3MywzNy41MDkzODYxMjc4NzcsMzUwXSxcbls1NS44NDU1NDc0NTExMTgsMzcuNjYxMDY3MTA4MDUsMjgwXSxcbls1NS44NDU1NDc0NTExMTgsMzcuNjYxMDY3MTA4MDUsMjkwXSxcbls1NS44NjMxMTA0MDA5NDgsMzcuNjAxOTY0NTMxMTM3LDMwMF0sXG5bNTUuODQ1NTQ3NDUxMTE4LDM3LjY2MTA2NzEwODA1LDgwMF0sXG5bNTUuODQ1NTQ3NDUxMTE4LDM3LjY2MTA2NzEwODA1LDM1MF0sXG5bNTUuODQ1NTQ3NDUxMTE4LDM3LjY2MTA2NzEwODA1LDM4MF0sXG5bNTUuNjQxNDU2NTA0MDA3LDM3Ljc2NTMzNjM2MTcyMywxMDAwXSxcbls1NS44NDU1NDc0NTExMTgsMzcuNjYxMDY3MTA4MDUsNTAwXSxcbls1NS44NDU1NDc0NTExMTgsMzcuNjYxMDY3MTA4MDUsMjUwXSxcbls1NS44NDU1NDc0NTExMTgsMzcuNjYxMDY3MTA4MDUsODUwXSxcbls1NS44ODgyNzI4NDM3MjUsMzcuNTg4MjM2MzEyNTU0LDI1MF0sXG5bNTUuODc2MjA0NTQ4Mzk0LDM3LjY2ODM1NjgzNzA1OCwzNTBdLFxuWzU1LjYwMzI2MzM5MjU4MSwzNy41NDE1MjA1ODk4OCwxMDAwXSxcbls1NS44ODgyNzI4NDM3MjUsMzcuNTg4MjM2MzEyNTU0LDIzMF0sXG5bNTUuODEyMzg2MzczMTk2LDM3LjgyNzU5MDg5ODQzNSwzMDBdLFxuWzU1Ljg4ODI3Mjg0MzcyNSwzNy41ODgyMzYzMTI1NTQsMzAwXSxcbls1NS42MDQ1MzQ3NjY3MjEsMzcuNzM5NTY4MzkxMjc5LDExMDBdLFxuWzU1LjYxMjYyODc3ODUyMywzNy43MjAxNTI5NTYyMzksNTAwXSxcbls1NS44ODk4MjA1Mzg1NywzNy41MzkzMTYyNjg3OTksNjAwXSxcbls1NS44ODk4MjA1Mzg1NywzNy41MzkzMTYyNjg3OTksMzUwXSxcbls1NS44ODk4MjA1Mzg1NywzNy41MzkzMTYyNjg3OTksNTAwXSxcbls1NS44ODk4MjA1Mzg1NywzNy41MzkzMTYyNjg3OTksNDAwXSxcbls1NS44ODk4MjA1Mzg1NywzNy41MzkzMTYyNjg3OTksMTU1XSxcbls1NS41OTkzOTI4OTAyNjksMzcuNzM3MDM1ODk3NTIxLDI1MF0sXG5bNTUuODIxMzUzMTY5MzgyLDM3LjQ5NzY3Mzc4NjU5Myw1MDBdLFxuWzU1Ljg3MTIxNzE1NzUyOCwzNy42NjU5MjAzMjA1NDcsMTAwMF0sXG5bNTUuNzUwODk5MjczOTMxLDM3LjcxNTQ4ODcwMjEyLDEwMDBdLFxuWzU1LjczMzQ5NzM4MTA3MSwzNy42NDA0ODk0MDAzOTksMTAwMF0sXG5bNTUuNzY2NjUwMTY2MjksMzcuNjAyNjk4MDc0OTksMTAwMF0sXG5bNTUuNzAxMzE0MzEwNTUxLDM3LjUwMzc5Mjc2NTI2NywxMDAwXSxcbls1NS44NjMxMTA0MDA5NDgsMzcuNjAxOTY0NTMxMTM3LDQwMF0sXG5bNTUuODQ1NTQ3NDUxMTE4LDM3LjY2MTA2NzEwODA1LDcwMF0sXG5bNTUuODQ1NTQ3NDUxMTE4LDM3LjY2MTA2NzEwODA1LDIwMF0sXG5bNTUuODkwMTU2MjYxMjA2LDM3LjU5MjMzNDM4MTQ5NSw1MDBdLFxuWzU1LjYwNjk3Njc0NDQ1NiwzNy41MjM2MDI2NzgxNzksNTAwXSxcbls1NS44NDM5NDg3NzY3NzgsMzcuNjYyNjU3MDU5ODI0LDI1MF0sXG5bNTUuNjA5ODc3NjMzNDc3LDM3LjczMjcwMjUyMTYwNCwxMDAwXSxcbls1NS43MTMwMjE2ODA5MTcsMzcuNjkwMjU5OTY2NjczLDM1MF0sXG5bNTUuNzY0MzM1MzQ1NTAyLDM3LjU4MTM5NzMzNTQ0MiwxNTAwXSxcbls1NS43MTE0NDQxNTE4MDQsMzcuNjg4MjY0NzAyOTg1LDMwMF0sXG5bNTUuNzExODMwNjYxODk5LDM3LjY4Njc4NTkzNDc4LDUwMF0sXG5bNTUuODcwMDA5MTI1NTMzLDM3LjY2Mzk5NDY4MzgxMiwzNjBdLFxuWzU1LjcyNjEzNzgwODM4NSwzNy41NjEwODczODk2MjUsMTAwMF0sXG5bNTUuNzc1ODE1MjMzMTQzLDM3LjU4NTU5OTQ3MjQ1NSwxNTAwXSxcbls1NS43MjY4MDgzMzkwMzQsMzcuNjI1NzgxMjIwNzEzLDEwMDBdLFxuWzU1Ljc1OTcwNTI2Nzk3NywzNy41Nzg4NzE3Nzc3MjMsMjgwXSxcbls1NS43NTk4MDAzMTIxMSwzNy41ODM3MTA3ODA5MjMsMTUwMF0sXG5bNTUuNzMzNzc3NTY3NDk3LDM3LjY2Njg3NTc4NDQwMiw0MDBdLFxuWzU1Ljg2OTgyMzM1MDU5MywzNy42NzY0Njc2ODkxMjQsNTAwXSxcbls1NS43NzQ4NzgzNzEyODQsMzcuNTgxNDIzOTM0MTIzLDY1MF0sXG5bNTUuNzEwMDM1Mzk3NDM3LDM3LjY2ODQ1OTU3MjI1LDQwMF0sXG5bNTUuNzc0NTI5MTM5MDc4LDM3LjU4MDQwOTg5MDAyNCw4MDBdLFxuWzU1LjcwNjkyNjg2NTAxMSwzNy41OTIxNTI2NTg3MjYsMjgwXSxcbls1NS43MjE2NDMzMDQyNjIsMzcuNTcyMTc5MTIzMjQ2LDcwMF0sXG5bNTUuNzMwMjEzNTI3MjgyLDM3LjYzMjQwMTQ1OTU4NiwxMzAwXSxcbls1NS43MjE0MzMxOTYyNSwzNy42MjY0MjQ3MTM3OTksODAwXSxcbls1NS43NjAzMzA3MjIzNDksMzcuNTgxNDc4MDMzNTI5LDIwMF0sXG5bNTUuNzQwMTA1NDc1NTk3LDM4LjAxNTYyMTUzMTg2OCw2MDBdLFxuWzU1LjcyOTQyNDg5MTEyLDM3LjYyMjc0OTQ3NDgzNywyODBdLFxuWzU1Ljc3ODMyNDk5NTEyOCwzNy42OTQwNjUwNzAyODcsNTAwXSxcbls1NS43Njk1MjkwNjEwMTMsMzcuNTg0OTk4NTEwMDYxLDQ1MF0sXG5bNTUuNzQ2OTI3MjM2MzExLDM3LjYyNjM2NTQ2OTc1NCwyMzBdLFxuWzU1Ljc0Njc0MjQxMTU4MiwzNy41MzcxNjM3NzgyMDUsMjgwXSxcbls1NS43MTU1NTQ3NDkwNDUsMzcuNjMyNzk3OTk4NDY3LDE3MF0sXG5bNTUuNzUzMTc4NjgxNjM2LDM3LjU3NTU5NjA3MzE5NiwxMDAwXSxcbls1NS43OTI4NDE3ODU0NDEsMzcuODE4NTUxMTMyMTksMTUwMF0sXG5bNTUuNzg4OTEyNjAwNTU5LDM3LjU4MjAzOTU1NzAwMSw3MjBdLFxuWzU1Ljc3ODM4MjM4MzQ0NywzNy41ODQ3Njc2MDY4OTgsMjgwXSxcbls1NS43NDMxNTgyODI5MjYsMzcuNTY3MzYzOTMyMDIsMzUwXSxcbls1NS43NDMxNTgyODI5MjYsMzcuNTY3MzYzOTMyMDIsMzUwXSxcbls1NS44MTcyNTE1NTM4MjksMzcuMzg3NzI0ODk2NzA2LDM1MF0sXG5bNTUuNzUxOTk4NzUxNTUyLDM3LjU4MjYzNDY2NTg4MiwyNzBdLFxuWzU1Ljc3ODI0NzI4ODA2MSwzNy41ODY4OTcyNzEzMDYsMjAwMF0sXG5bNTUuNzU5NjcyODIwNTY2LDM3LjU3NDgxMjg1NTkwOCwxOTBdLFxuWzU1Ljc0MTY0MTU4NjE5NywzNy42Mjc2NDIzNDA2NTIsNTAwXSxcbls1NS43NzY5OTg4ODQyMDcsMzcuNTg1MzM5OTE4MDUyLDgwMF0sXG5bNTUuNjU4MjUwNjEzNzI3LDM3Ljc0MjQwOTg1NjM4MywyNjBdLFxuWzU1Ljc1NTc3NDg0MTIwNCwzNy42MTQ2Mzg5Mzg4NzIsMjYwXSxcbls1NS43MzI4NDcyMTgyNDUsMzcuNjYzNzY1MzMxMDA3LDUwMF0sXG5bNTUuNzQ0NDI4NDA1MjM3LDM3LjYyOTg0ODQwMzYyNywyMDBdLFxuWzU1LjczODE1NzUwNDI4NywzNy41Mjg4NDU5MTM4Miw1MDBdLFxuWzU1Ljc1NDYzMTEyMTY3MiwzNy42MzY1OTQxMjIxMzIsNjUwXSxcbls1NS43NDE4Mzc4NTY3NDQsMzcuNTU4MjYzMDczNzI1LDU1MF0sXG5bNTUuNzY0Mjk1MzczMjcyLDM3Ljg0NDk2OTMyNDY3NywyOTBdLFxuWzU1Ljk4Mjc2NTg0NTA1OCwzNy4xNzQ2MzI2NzEwODEsMzQwXSxcbls1NS43NDY1MzU2ODEzMDcsMzcuNTYxMTQ3NTc5ODUyLDUwMF0sXG5bNTUuNzQxNzc0NTUwOTU4LDM3LjY1NjA2NzM4ODY5NywyNjBdLFxuWzU1Ljc0MTc3NDU1MDk1OCwzNy42NTYwNjczODg2OTcsMjAwXSxcbls1NS43NzE1ODM3NzE4NzIsMzcuNjgxNTk3OTc5MjgyLDI4MF0sXG5bNTUuNzM2OTYyMTU3MDQxLDM3LjY3NTc2MjkwNjY0MywxMDAwXSxcbls1NS43NDQ1NjQ2MDYzNDEsMzcuNTY1NTM1MTUzMTQ0LDM4MF0sXG5bNTUuNzQ0MDA5MDg0OTQzLDM3LjU4Mjk0MDc0NjQwNyw2MDBdLFxuWzU1LjYzNzgxMzkyMjQ0MiwzNy42Nzc2NzY1OTg1NTEsNjAwXSxcbls1NS45MjI0MzYzMTgyMjUsMzcuNzE1MTE3ODU3ODg3LDI1MF0sXG5bNTUuNzcwMTM2NDM0NzI1LDM3LjY4MzYzMjc2MTc1Miw3MDBdLFxuWzU1LjYzMjcxNTc3Njc2MSwzNy4yMTEyODY1Nzk5MTMsMjUwXSxcbls1NS42NzIyNjIxMTQyNTEsMzcuMjc5NjAwMzM4MjAxLDI4MF0sXG5bNTUuNzQ0NTY0NjA2MzQxLDM3LjU2NTUzNTE1MzE0NCwzMDBdLFxuWzU1Ljc1MTIwNzExNTQ3NCwzNy42MDY4NzMwMDcyMjYsMTUwMF0sXG5bNTUuNTE1NTUyOTQ5NjM5LDM3LjcxMDMyMTMwNDQwOSwzNDBdLFxuWzU1Ljc0MzYwODA1NTI4MiwzNy41NzgwNTQ5Mjg0NDksNTAwXSxcbls1NS43NzM1ODgyMzE2MTgsMzcuNTg3NDU3NDE1NjUzLDEyNTBdLFxuWzU1Ljc3MjY1NzkxMTg1NSwzNy41ODU3NjQyMDEzNiwxMDAwXSxcbls1NS43NzI4OTQ5MTYwOTMsMzcuNjgwMDcxNzM4ODc5LDgwMF0sXG5bNTUuNzgzMzUzMDk1ODE0LDM3LjYzMjMwMjg1NTIwMiw5OTBdLFxuWzU1Ljc3ODY4NzI5MzUwNiwzNy42MzIxMzQ2NDk1NzYsNzAwXSxcbls1NS43NzYzMDIwOTQ2MzQsMzcuNjI3OTU5MDI0NjM2LDUwMF0sXG5bNTUuNTg1ODkxNzI4MTMxLDM3LjcxOTk5MTA2NDczNiwyNTBdLFxuWzU1Ljc3MDk5NDg0ODUxNCwzNy41ODcyOTgyMjAyMjIsOTAwXSxcbls1NS44MjQ2MzExNTc5MjYsMzcuMzg4MzgwNTExMDMsMjgwXSxcbls1NS42NDc1MjE5NTc4ODQsMzcuNTk1NjEwNTI5MzE5LDI4MF0sXG5bNTUuNzcyODk0OTE2MDkzLDM3LjY4MDA3MTczODg3OSw2MDBdLFxuWzU1Ljc0Nzc2MzkyODQ2NywzNy42ODA2NjYzMTYzLDIwMF0sXG5bNTUuNzYzMTA4OTMxNTg0LDM3LjY3Nzg2NzczOTMyNyw2MDBdLFxuWzU1Ljc0Njk5Nzk4MTYxMiwzNy42Nzg3OTYzMTIzNzgsMTUwXSxcbls1NS43NzYwMDkyMjI1NDYsMzcuNjYwNTMxMzAwMTMyLDM1MF0sXG5bNTUuNzc2MDA5MjIyNTQ2LDM3LjY2MDUzMTMwMDEzMiwyMDBdLFxuWzU1LjczMDQyNDIzODE5NCwzNy42NDI5NTgxOTEyNDEsMzkwXSxcbls1NS45MDkzOTUxMjk2OCwzNy41NDA0MDA1NzExOTgsNzUwXSxcbls1NS42NDUwMDM4NDk3ODUsMzcuNDk3MDY1MDY5MjY3LDExMDBdLFxuWzU1Ljc4MzM1MzA5NTgxNCwzNy42MzIzMDI4NTUyMDIsMTgwMF0sXG5bNTUuNzM3ODM0MzUxOTcyLDM3LjU4NjQ3NDM2MDI5OCw1MDBdLFxuWzU1Ljc3NjAwOTIyMjU0NiwzNy42NjA1MzEzMDAxMzIsMzUwXSxcbls1NS43MDkxMDA2NjQ2NDMsMzcuNTk1NTQyMDE0NjE4LDQwMF0sXG5bNTUuNzc0MTEzNDkzMTc0LDM3LjY1NDkxMDM3MzA1NSw0MDBdLFxuWzU1Ljc3NDExMzQ5MzE3NCwzNy42NTQ5MTAzNzMwNTUsMzUwXSxcbls1NS43NzQxMTM0OTMxNzQsMzcuNjU0OTEwMzczMDU1LDMwMF0sXG5bNTUuNjA0NjU5NzE3NzU2LDM3LjQ4ODc4OTMwNDQyMiw1MzBdLFxuWzU1LjcwNzI1OTQwOTgwNywzNy4zODcxNDU5ODI0MjIsNTYwXSxcbls1NS43NjgxOTIzOTk5MiwzNy42MjMwMjY0NzM5OTUsNTYwXSxcbls1NS43Mjk2NTc2MTQ3ODIsMzcuNjM5MzM0NTU1NTE0LDMwMF0sXG5bNTUuNzQ3MzY4NDkwMDM4LDM3LjY1NjE5MTk2MTc5LDUwMF0sXG5bNTUuNzcyNjE4ODA0NjY2LDM3LjY2MDU5NTEzNjY4Myw0MDBdLFxuWzU1Ljc2Mzk0MjEyNDgyLDM3LjU2MzIyODI0MjgwNiwzMDBdLFxuWzU1Ljc2OTg1OTI1ODQ2LDM3LjY1NzYwNjk1NDk4NSwzNTBdLFxuWzU1Ljc2NDEzMDAyODMwMywzNy42MDI1NTMyNzkwOTksMzAwXSxcbls1NS44MDI4NDA4MTQ0MTYsMzcuNTE3NzA5NTE1NjExLDMwMF0sXG5bNTUuNzQ5MjE4NzE5NDgsMzcuNTQwMDA2MjQ0ODkxLDI2MF0sXG5bNTUuNzA2OTI2ODY1MDExLDM3LjU5MjE1MjY1ODcyNiw0MDBdLFxuWzU1Ljc0OTIxODcxOTQ4LDM3LjU0MDAwNjI0NDg5MSwzNTBdLFxuWzU1Ljc0OTIxODcxOTQ4LDM3LjU0MDAwNjI0NDg5MSw4MDBdLFxuWzU1Ljc0OTIxODcxOTQ4LDM3LjU0MDAwNjI0NDg5MSwyMDBdLFxuWzU1Ljc0ODE4OTgyOTUzOCwzNy41ODQwMzE0Mjg2OTUsNDAwXSxcbls1NS43OTE3MjAyMTk2NjcsMzcuNjAyMzkyODAzODc5LDIwMF0sXG5bNTUuNzM4MzUyNjc4ODEzLDM3LjY2MTY4MTEzNDQ2MSw1MDBdLFxuWzU1LjQxNDg4MDE0ODE5MSwzNy45MDI5NDEyNzYwMjMsMzMwXSxcbls1NS43NDEzMTExODcwMDksMzcuNTQyMTEzMjA0ODcsMTI1MF0sXG5bNTUuNzcwNzg3Njc4MzI4LDM3LjY0ODcyMjUxMzY1NywxMDAwXSxcbls1NS44MTAxMDQzNjEwMjUsMzcuNjU2MjIxMDQ5OTU4LDkwMF0sXG5bNTUuNzU3MDcwNjc5ODI4LDM3LjY2MDg3MTg2NzkyMiwxNTVdLFxuWzU1LjcyOTA2MTYzNDA1MiwzNy42MzcwMzE0NDY5MjUsMjYwXSxcbls1NS44MDMzNDI4NzYwOTksMzcuNjE4MTk2NzgzMjI2LDQwMF0sXG5bNTUuNzgwODQwODc3MjI3LDM3LjcyMjQwMDA1MTQ0NCwyNTBdLFxuWzU1Ljc2MjY5NzY5NTcwMSwzNy43NzgxNTU4NTM5OTIsOTQwXSxcbls1NS45MTY1NDYzNjQ3OTIsMzcuNzU5MTg2MzQ4Nzc2LDk0MF0sXG5bNTUuNzU3MDcwNjc5ODI4LDM3LjY2MDg3MTg2NzkyMiw0MzBdLFxuWzU1Ljc1ODM0Mzk3OTMxOCwzNy41OTgwODI3MzMyNjEsNDAwMF0sXG5bNTUuNzI3MDM2MDY0NTQxLDM3LjY1MDk0NTc1MTU2OCwxMDAwXSxcbls1NS42NTczOTMwMzM2MDIsMzcuNzMxMzI4MTc4MTQ0LDIwMF0sXG5bNTUuNzI3MDYyOTAxOTUxLDM3LjY1MTcwNDA1ODM1OSw1MDBdLFxuWzU1Ljc1MzI4NjcxMjU3MiwzNy41ODY0MjE5MTg2OTMsMTUwMF0sXG5bNTUuNzY0NjY3Njc2MDg0LDM3LjU1ODE2MzU0MzY4LDQwMF0sXG5bNTUuNzY0NjY3Njc2MDg0LDM3LjU1ODE2MzU0MzY4LDQwMF0sXG5bNTUuNzgxMDY3MjA3Nzg5LDM3LjYyNjUwMTg4OTgyNCw1MDBdLFxuWzU1Ljc2ODI2MDY4MTUyNiwzNy42NzkyNTM0Mzc2NTIsNjAwXSxcbls1NS43Njc2NDg2MTg1OTEsMzcuNjc5Mzk0MTYwNjc0LDYwMF0sXG5bNTUuNzU1NTc4OTA1MDYzLDM3LjY2NDQ5OTEzOTMxNywxMDAwXSxcbls1NS43MzY0MzQzMjY3ODgsMzcuNTk2Mzg1MDE3Mzg4LDEwMDBdLFxuWzU1LjcyNjU4NTA4ODgzLDM3LjY0NjkxMzc1NzUzOSw1MDBdLFxuWzU1Ljc2MjA3OTUxNzM1OCwzNy42MjYwMzgwNTk4NzgsMTAwMF0sXG5bNTUuNzA4NzE0MTE0ODEyLDM3LjYyMjA4MTA3MjI2MSwyNTBdLFxuWzU1LjcwODcxNDExNDgxMiwzNy42MjIwODEwNzIyNjEsMjYwXSxcbls1NS43NTAxNjMzMTI2NzksMzcuMTg3ODEzNDE1NDMsNTUwXSxcbls1NS43NjI3OTgxNTMzMTMsMzcuNjYwOTY1NDcwOTg0LDE1MDBdLFxuWzU1LjcwODExMzE5OTQwMiwzNy42MjU0OTcwNzM5OTQsMjUwXSxcbls1NS43ODc0ODAzODM0NjMsMzcuNjExODk5MjI2NjEsNzAwXSxcbls1NS43NjEwNzIxNDI4MTUsMzcuNjYyNTg4MjM2MzM4LDM1MF0sXG5bNTUuNzA4MDAwNTQ3NzA1LDM3LjY1NTEyNDcyNjI3NiwyNzBdLFxuWzU1Ljc2NDc3MDQ1MjE0NCwzNy42NDAxNzAwMTA0NDcsMjAwXSxcbls1NS40MTQ4ODAxNDgxOTEsMzcuOTAyOTQxMjc2MDIzLDY0MF0sXG5bNTUuNjkxNzU3NTg0NjU3LDM3LjUyOTczNTk1ODM3Myw2NDBdLFxuWzU1LjY4MTg4MDgzOTk1NiwzNy4yOTA1ODQ0NzIzMDQsMjgwXSxcbls1NS43MDUyNjc2MjIyNTUsMzcuNjQ3ODg4OTYwMTE5LDYwMF0sXG5bNTUuNzE3MDM0MzcxNzY4LDM3LjU5NDkwODAzMzMzNyw1MDBdLFxuWzU1Ljc1MjU2ODQxNzIyOTUsMzcuNTk3MTc3OTU2NjA0Miw4NzBdLFxuWzU1Ljc2Nzc1ODY5ODU5NiwzNy41OTgxOTA4NTgwMDksNTUwXSxcbls1NS43NDg3ODQ0NDQ4MjMsMzcuNTg4NDkwMjY4Mzc1LDUwMF0sXG5bNTUuNjIwMzkxNjE2MTEsMzcuNjY5NDMyNTQ2NDEyLDE1NV0sXG5bNTUuODEyMjUyMDY5OTA2LDM3LjcyMjY5ODU1MjU2OCw0MDBdLFxuWzU1Ljc3MzIwOTM4MTA0MiwzNy42MjE0NTIyMzUxNTcsMzIwXSxcbls1NS43NTcyMjI4Mjk2ODQsMzcuNjI4MzA4MDU4ODM4LDEwMDBdLFxuWzU1Ljc2Njg3MzgxMjYyMywzNy42MDA4NzE0OTgwODMsMjAwMF0sXG5bNTUuNzE1MjQ4MTM3MTUyLDM3LjgxNzI5NjY5OTAzNSwyMDBdLFxuWzU1LjY1NTk2MzU5MjQ0MSwzNy44Mjg2NjMyNjAwMzYsMTU1XSxcbls1NS42NTY1NzUxMTgyNDYsMzcuODMwMDY4OTg1MDEyLDUwMF0sXG5bNTUuODMwMDM4MTM1OTIzLDM3LjgxMjA4NjI2ODMzOSw2MDBdLFxuWzU1Ljg0NTU0NzQ1MTExOCwzNy42NjEwNjcxMDgwNSw2NDBdLFxuWzU1LjU4MjIzODk3NTk3MiwzNy43MDY5MjYwNzkwMDEsMjgwXSxcbls1NS43NjIzMjM4MDYyODIsMzcuNjQ0NjY5ODA1MDg4LDkwMF0sXG5bNTUuNzgyNTAyMDE3NTY5LDM3LjU3MzgyNDU0NjUyNSwxMDAwXSxcbls1NS43NzI5MzkwMzk1NzYsMzcuNjEwNzIyMjU4MTkzLDEwMDBdLFxuWzU1Ljg0NTU0NzQ1MTExOCwzNy42NjEwNjcxMDgwNSwzODBdLFxuWzU1LjgyMzI4NDMzMzM1NiwzNy40OTc3MDMxMTUyNjcsMzEwXSxcbls1NS43MzYwMDU2NzQwODgsMzcuNTk1MjY4MTMyNTU3LDMwMF0sXG5bNTUuNzQzMTIxODY1NTQyLDM3LjUwNzA2MzEwNjE5OSwzODBdLFxuWzU1Ljc2MDk2NDYyOTE3NSwzNy42MjQzNTQyNzY1MTcsMjUwXSxcbls1NS43NDMyMzAwODEwMjMsMzcuNTkwNTE2NTY4NzQ0LDEwMDBdLFxuWzU1Ljc0NzI3MTQyNDM1LDM3LjY1NDg5MzAzOTk1NCw5MDBdLFxuWzU1Ljc0Nzg3NDgwMjg3MywzNy42NTQ0NjIwMjk2MywxMDAwXSxcbls1NS43NDg0NzM0NjYyNjIsMzcuNjQ4NjE1NjQ4MTY0LDQwMF0sXG5bNTUuNzM4MDAzOTUzNDI3LDM3Ljg2NDM1NjkzNTI0NiwxMDAwXSxcbls1NS44NDYxODE5NTgwMTgsMzcuNDUzMzA0OTIzMjU3LDYwMF0sXG5bNTUuOTA5Mzk1MTI5NjgsMzcuNTQwNDAwNTcxMTk4LDM1MF0sXG5bNTUuNzIzOTQ1MjgwNjUzLDM3LjY1Mzg5ODEwMjg0OCwxNTBdLFxuWzU1LjUwNDkwMTY2MTkzMSwzNy41NTkzMzk1MTIwODEsNzAwXSxcbls1NS45MDkzOTUxMjk2OCwzNy41NDA0MDA1NzExOTgsMzAwXSxcbls1NS44OTE2MzA4NjA5NjcsMzcuNzQ4ODY1MjYzODg5LDIwMF0sXG5bNTUuODU5MDIzNzUxMDg1LDM3LjM5NTE1NjYyNzg3LDMwMF0sXG5bNTUuNjU3MzE0MjU5ODIxLDM3Ljg0NTIzNDA1NzE5OSwyNTBdLFxuWzU1Ljc2MDc0OTAyNDgzOCwzNy42MzIxNTE4NTEwMzMsMTUwMF0sXG5bNTUuNzM2ODM5OTc4MzE1LDM3LjY5MjE0OTMyOTk4OSw2MDBdLFxuWzU1Ljc3MzY0OTMwODUzMiwzNy41NzgwMTEzMzQ3Nyw2MDBdLFxuWzU1Ljg5ODYwNjk0MTgyOSwzNy42MjkzODQ5MzIxOTMsNTAwXSxcbls1NS44OTg2MDY5NDE4MjksMzcuNjI5Mzg0OTMyMTkzLDMwMF0sXG5bNTUuNzU5MDE3MTA0OTA0LDM3LjYxNzIzMzg0NjM2OSwyMDBdLFxuWzU1LjgwNjUwNDUxMjQ5NywzNy41ODc2NTk0ODgxNzYsNTgwXSxcbls1NS43NjQyOTUzNzMyNzIsMzcuODQ0OTY5MzI0Njc3LDMwMF0sXG5bNTUuODgxMDE3NzE1MDE1LDM3LjQ1MDQ1ODgwMjU4Myw1MDBdLFxuWzU1LjY2MDg0NTM4Njc1MiwzNy43NzYwMjU5NjEyMTMsMjQwXSxcbls1NS44ODI3NDQxNTQ5ODYsMzcuNzI5Nzc5MjQ3NTUzLDQwMF0sXG5bNTUuODgxMDE3NzE1MDE1LDM3LjQ1MDQ1ODgwMjU4Myw0MDBdLFxuWzU1LjY1MzgxMjQ4MzI3NSwzNy44NDQzMDA4OTAxNzIsMjYwXSxcbls1NS44NTUyMDI2MTAxODQsMzcuNDc4MzkwOTc2NjY0LDIwMF0sXG5bNTUuODU1MjAyNjEwMTg0LDM3LjQ3ODM5MDk3NjY2NCwyNDBdLFxuWzU1Ljg2MjcxODk5MzIyMSwzNy40MzUwMzQzODc3MzMsNTUwXSxcbls1NS44NjI3MTg5OTMyMjEsMzcuNDM1MDM0Mzg3NzMzLDQ1MF0sXG5bNTUuNjkwMDQyNjM0OTYzLDM3LjYxNDYxMTY1MDA0MiwxMDAwXSxcbls1NS44NDkwNzY0NTk3OTgsMzcuNjUzMjQ0NTQ0NTEzLDY1MF0sXG5bNTUuNzA4MDUxODU5Nzk5LDM3LjY1NzMwMTAzMzgwNiwyMDBdLFxuWzU1Ljc2NTE5MjcyMjM0NCwzNy42Mzg5MzY3Njk5NDQsMTUwMF0sXG5bNTUuNzgxOTc0NTQ3OTUsMzcuNzA0NDYxOTQzMjIyLDMyMF0sXG5bNTUuNzg1NTM5Nzk5NjQ1LDM3LjY2NTM1MDgwMTQyMywyMDBdLFxuWzU1Ljc4NTUzOTc5OTY0NSwzNy42NjUzNTA4MDE0MjMsMzAwXSxcbls1NS42MjE5MzExODUxMjEsMzcuNzgzMjAzOTU3NzEyLDQwMF0sXG5bNTUuNjg5NDAxOTMxMDMyLDM3LjYwMTcwODk4NDAyMywyODBdLFxuWzU1Ljc1NzQ1NDA1MjYyNCwzNy42MzQ1MTM2NzkwNjUsMTAwMF0sXG5bNTUuNjQzNzU0NzIxMDA1LDM3LjUyNjM5NTY2OTQ0OCw0NTBdLFxuWzU1Ljc2MDgyMzE5NjM5OCwzNy42MTUzODY1Mzk5OTMsMTUwMF0sXG5bNTUuNjg5NDAxOTMxMDMyLDM3LjYwMTcwODk4NDAyMywzMDBdLFxuWzU1LjY4OTQwMTkzMTAzMiwzNy42MDE3MDg5ODQwMjMsMjYwXSxcbls1NS43NTg0ODEzNzM4MTksMzcuNzQxMDQxMDA0MzgsMjAwXSxcbls1NS42ODk0MDE5MzEwMzIsMzcuNjAxNzA4OTg0MDIzLDI0MF0sXG5bNTUuNjg5NDAxOTMxMDMyLDM3LjYwMTcwODk4NDAyMywzMTBdLFxuWzU1LjY4OTQwMTkzMTAzMiwzNy42MDE3MDg5ODQwMjMsMjUwXSxcbls1NS42NTk0OTE1Mjc4OTIsMzcuNzQ5NjA0NDE5MDQxLDI4MF0sXG5bNTUuOTc3MzQ1NTgxOTgxLDM3LjE0ODQyOTE0NTYxMSw0NTBdLFxuWzU1LjY1OTQ5MTUyNzg5MiwzNy43NDk2MDQ0MTkwNDEsNzAwXSxcbls1NS43NDMxMjE4NjU1NDIsMzcuNTA3MDYzMTA2MTk5LDU0MF0sXG5bNTUuNzQzMTIxODY1NTQyLDM3LjUwNzA2MzEwNjE5OSwxNTVdLFxuWzU1LjkyMDI1ODI1MjM4NSwzNy4zNjY0MzU2MDc0MDIsODAwXSxcbls1NS43OTQ0MDM0NTY2MTUsMzcuNTkyMDU0NjU5MzY2LDEyNTBdLFxuWzU1LjcxNjM1MzU0MTA2MywzNy44MTMyNDcxNDkzOTMsMjAwXSxcbls1NS43MTU0ODIwMjc4NywzNy44MTU4NDAxMDA4NjMsMzAwXSxcbls1NS43MTUyNDgxMzcxNTIsMzcuODE3Mjk2Njk5MDM1LDI1MF0sXG5bNTUuNzQxMTc4MDI2Njg2LDM3LjUwMjc1MjA2Njg5OCwxNTVdLFxuWzU1Ljc0MTE3ODAyNjY4NiwzNy41MDI3NTIwNjY4OTgsMjUwXSxcbls1NS43NDExNzgwMjY2ODYsMzcuNTAyNzUyMDY2ODk4LDIyMF0sXG5bNTUuNjIxOTMxMTg1MTIxLDM3Ljc4MzIwMzk1NzcxMiwyMzBdLFxuWzU1Ljc2NDI2MjA3ODY0NywzNy42NTMyNzQ0NjgxNTcsODAwXSxcbls1NS42NDAxNDMyMjE5MywzNy42MjE5MTYzMDAxMTEsNTAwXSxcbls1NS42NDAxNDMyMjE5MywzNy42MjE5MTYzMDAxMTEsNTAwXSxcbls1NS42NzM0NTAwODI0NjIsMzcuNzgwNjgxMjk3MTc2LDIwMF0sXG5bNTUuNjQwMTQzMjIxOTMsMzcuNjIxOTE2MzAwMTExLDI2MF0sXG5bNTUuNjY0NTg4MDIzODMsMzcuNjM0NzgxNDM4NTE3LDIwMF0sXG5bNTUuNjc5ODI2MDQ3MjY3LDM3LjU2NTQxMzIzNzY1Miw1MDBdLFxuWzU1LjY2OTc4OTI2NDU0NywzNy41NTIyMDAwMzYxOTUsMjAwXSxcbls1NS43NDMzNTg0NzY1NTQsMzcuNjI5NDk5NzUxODcyLDEwMDBdLFxuWzU1Ljc0MDI4ODA3NTM5MywzNy42MjE0NjE3ODcxMjksNjAwXSxcbls1NS44MjYxNTE3NDgyNDYsMzcuNDM2MDcxODcxNzczLDEwMDBdLFxuWzU1LjY2OTc4OTI2NDU0NywzNy41NTIyMDAwMzYxOTUsNjAwXSxcbls1NS44NjkzNzEwMTQyNzIsMzcuNjYyNjI4MjY1ODExLDUwMF0sXG5bNTUuNDUxOTk2ODcwMDM4LDM3Ljc2MzQ2NzIzMTE2MiwyNjBdLFxuWzU1Ljc5MzQwNTQ3MzQ0NiwzNy40OTI1MTE1MjQ3LDIzMF0sXG5bNTUuNjQwNTQ3MzAxNzQ1LDM3LjYwNDQzMDUyMzI2Nyw0MDBdLFxuWzU1LjU3NDg4NDg3NjkyNywzNy41ODAxMDg0MTM4MzgsMTI1MF0sXG5bNTUuNzM3NTA0ODQyMTMzLDM3LjYyOTU3Mzk4MDQxOCwzMDBdLFxuWzU1LjYzNjkxNjEzNjIxNCwzNy41OTgyOTY2NDI5NjMsMzUwXSxcbls1NS43NDc0NzE0NTE5NDMsMzcuNzA2ODQ3MzY0OTI0LDQ1MF0sXG5bNTUuNzQ0NDI4NDA1MjM3LDM3LjYyOTg0ODQwMzYyNywzNTBdLFxuWzU1Ljc0NDQyODQwNTIzNywzNy42Mjk4NDg0MDM2MjcsNDAwXSxcbls1NS43NDQ0Mjg0MDUyMzcsMzcuNjI5ODQ4NDAzNjI3LDEwMDBdLFxuWzU1Ljc0NTQ4NzE3NTA2OCwzNy42MjcwMzE2NDU3MTQsNDQwXSxcbls1NS43NzQxNzQ3MDcxNTYsMzcuNjE3ODkzNTI4Nzg1LDYwMF0sXG5bNTUuNjIwMjk4OTQ4ODQzLDM3LjY3MDg4MTQxMjg5OSwzMDBdLFxuWzU1LjczMjU0NzUyNzAwMiwzNy42MjM5NzU1MzY1OTksNTAwXSxcbls1NS44NzAzNDE5MTcxNTEsMzcuNjM4MDE1ODc3MzYxLDI2MF0sXG5bNTUuODA2NzUwMzcwMTYsMzcuNTI0MjY2MTEyNTYxLDEwMDBdLFxuWzU1Ljc4MjQ3MDc2MDI2NiwzNy42MTU3MTAyMTY0NjQsMTU1XSxcbls1NS42NDM2Njg1NTg5NDIsMzcuNTI0NzM3MTM0MzUzLDEwMDBdLFxuWzU1LjcxMzA4NjU3NTk0MSwzNy41NjA0NjM5NDU5MDQsNTMwXSxcbls1NS43MjA5OTQwMzEyNTcsMzcuNDAxODgwOTQzMjI3LDUwMF0sXG5bNTUuNjQwOTI5MzA5Njk4LDM3LjUzMDgwNTcyMzk2OSwyODBdLFxuWzU1LjgwNzcyNTM1NDIwMSwzNy41MDQ4OTg4Nzg2ODYsNjgwXSxcbls1NS44NjMxMTA0MDA5NDgsMzcuNjAxOTY0NTMxMTM3LDQwMF0sXG5bNTUuODYzMTEwNDAwOTQ4LDM3LjYwMTk2NDUzMTEzNywzMDBdLFxuWzU1Ljc0MDk2MTkyMDkyMiwzNy40MTU0ODQ4MTg4NTgsMzUwXSxcbls1NS44MjI5NDM1Mjc0MjIsMzcuNTI1MDM3NzI3NTcyLDYwMF0sXG5bNTUuODUxNDYyNjAwODMxLDM3LjQ0MDgwMDQyMTU5OSwzMDBdLFxuWzU1Ljg2MzQxMzA2NDA5OCwzNy42ODM2ODA0MDY1NSwyMDBdLFxuWzU1LjY1MzYyMjcxODI5OSwzNy42MjA3MDY0NTY5MjIsNDAwXSxcbls1NS42NTM2MjI3MTgyOTksMzcuNjIwNzA2NDU2OTIyLDMwMF0sXG5bNTUuODE4MzI3MDIwMDcyLDM3LjUyOTg3MzUwMjM4LDQ1MF0sXG5bNTUuNjAzMTU1MTIzNzU2LDM3LjU5OTA4Mzk0NTQ2OSw5MDBdLFxuWzU1Ljg5NjA0MzQyNjg0NywzNy42MTk3NjYyOTkyNzgsNzAwXSxcbls1NS45MDE2MzY2NTEyNjQsMzcuNjEwODgyOTk2ODg3LDIwMF0sXG5bNTUuODUwNjk0Mjc0MjAyLDM3LjQyNTQxMDc1MjgxLDEwMDBdLFxuWzU1Ljg2NzIzNDAzMzQ5NywzNy43MDQxODM4NjA2OTIsMjYwXSxcbls1NS43NDMxODk4MjIwNTcsMzcuODU5ODAzNTM0NzMsMTAwMF0sXG5bNTUuNjA1NTU4Nzk0MzIsMzcuMjg3MjkyODI2NTYyLDU1MF0sXG5bNTUuNzkyNDQ0NzYzNjMsMzcuNjM1NjAwMzA5NzU5LDIwMF0sXG5bNTUuNzI5NzU1ODIzNzc4LDM3LjczMjEyMDIzOTcyNiwyMDBdLFxuWzU1Ljg1MDQ4NTY0OTk2OSwzNy40NDUyOTI1ODkwMjYsMjUwXSxcbls1NS43Mzk0Mzk0MzAwMzksMzcuNTI3NzE0MzYyMzkxLDIyMF0sXG5bNTUuODYwNTA1Mjk0MzY5LDM3LjQ4MzI4NTQ1ODg1MywzMzBdLFxuWzU1LjgxODQzNTQzNDIzMiwzNy40NDc0NjgzNTA4NDcsNDAwXSxcbls1NS42OTg1NjE0MTYwNTcsMzcuNDU4MTA2NTQyNTkxLDYwMF0sXG5bNTUuNjg5ODk0MTk1MTgyLDM3Ljg1MjE2OTcwMTQyMiwxMjUwXSxcbls1NS45NzY4NzMzNjY1MjYsMzcuMTQ4MDI0ODk4ODA3LDcwMF0sXG5bNTUuNjEwMzIyMzI2MzY5LDM3LjI5MjE4MjY4MjA4NCw1NTBdLFxuWzU1LjYwNTU1ODc5NDMyLDM3LjI4NzI5MjgyNjU2Miw3NTBdLFxuWzU1LjY2ODk5MTUwNDYzMiwzNy44NjU0OTc0NDIwMiwyNDBdLFxuWzU1Ljc0NzE0OTUwMTAxNSwzNy40MjA0MzAwMDI4NjksMzUwXSxcbls1NS42MDkxMDcxMDYwMjgsMzcuMjg5NzgzNjc3NzEzLDQ1MF0sXG5bNTUuNjA0OTQ4MzkyNTgxLDM3LjI5Mjg5OTE1NDEyMyw0NTBdLFxuWzU1Ljg4ODcyMzA0MzY2OCwzNy42NDMxNzE3MjExMDcsNDUwXSxcbls1NS44NDI2Njc4NTg4MjIsMzcuMzc5MzIyMzk5MzU3LDE0MDBdLFxuWzU1Ljg1MzM4MzQ1NjA0NCwzNy4zNTE3NDg4MTE0ODIsMTAwMF0sXG5bNTUuNjgzODEyMzcxMzU0LDM3Ljg5OTQ0NDc2MjkxNSw1MDBdLFxuWzU1Ljc3NzY4NzY5NzY2MiwzNy42MzM1MzUxMjcxNTksMzAwXSxcbls1NS42MzY4NzM3NjU0NDYsMzcuMzUyNzkyNjU5MjMzLDIwMF0sXG5bNTUuNjk5MDkwOTM5NTQzLDM3Ljg2NTE0MTA2NzAxNiw1MDBdLFxuWzU1LjYzNjg3Mzc2NTQ0NiwzNy4zNTI3OTI2NTkyMzMsNDAwXSxcbls1NS42MDY0MjI4Nzk0MDQsMzcuMTg4NTA3NzEwMjI1LDcwMF0sXG5bNTUuNjM0ODUxODY5NTIxLDM3Ljg0OTkxNzU3Nzg5NSwxMDAwXSxcbls1NS42MzE5MDMzMDUwMSwzNy44NDc4MzU4ODA0MDcsODAwXSxcbls1NS44MzA0NjEwMjczOTEsMzcuNjE3MzUxNzQxMjQ1LDcwMF0sXG5bNTUuNzI4MzE4NDAwMzE0LDM3LjYxMDM4ODk3ODcxNywyNjBdLFxuWzU1LjcwOTM4MDQ4NjE5MiwzNy41OTgwMTkwNzY3NDksNjYwXSxcbls1NS44MzAxMDQwNzM5NjIsMzcuMzUzMTc4MTYyMTIyLDQwMF0sXG5bNTUuNjMwNjg0MzcyNDcyLDM3LjYyNDkxMDM4OTM5NCw0NTBdLFxuWzU1LjY5NjEyOTU3NDM4MiwzNy41NTgyMzUxOTM4NzIsMzAwXSxcbls1NS43MjIzMjA1NzE2MjIsMzcuNjUzODU3NjcxOTA5LDQ4MF0sXG5bNTUuOTY2NjY3NzQwNzk1LDM3LjQxNTgxODk0OTk1OSwzMDBdLFxuWzU1Ljk2MzQ2MDEzMTIwNCwzNy40MDUzODQ3MzkyNjUsMjYwXSxcbls1NS45NjY2Njc3NDA3OTUsMzcuNDE1ODE4OTQ5OTU5LDI2MF0sXG5bNTUuOTYzNDYwMTMxMjA0LDM3LjQwNTM4NDczOTI2NSwxNjIwXSxcbls1NS43OTg4NDI4NjEyODcsMzcuOTY3MjIxMDMzOTU3LDgwMF0sXG5bNTUuNzc0MTc0NzA3MTU2LDM3LjYxNzg5MzUyODc4NSwxMDAwXSxcbls1NS45NjM0NjAxMzEyMDQsMzcuNDA1Mzg0NzM5MjY1LDE1NV0sXG5bNTUuOTgzOTkzMTYzNTg3LDM3LjE0MjQwMzMwNjMzNSwzMDBdLFxuWzU1Ljk4MDY4MjEwMTAyMSwzNy40MTAzODIwODQ0NTksMzAwXSxcbls1NS45ODEzMjEwNjA5MDUsMzcuNDE0OTYyNzc1NDY2LDQwMF0sXG5bNTUuOTgwNjgyMTAxMDIxLDM3LjQxMDM4MjA4NDQ1OSw1MDBdLFxuWzU1LjUzNDIxMzE1NTc5LDM3LjUyOTgzMjkwMTU1Miw3MDBdLFxuWzU1Ljc1ODg3Nzc2ODkwMSwzNy43MDg5MTc4ODY5NjIsMTAwMF0sXG5bNTUuODE3OTEzODk3NDIxLDM3LjMxMTExNTM1Mjg0Miw3MDBdLFxuWzU1Ljc5Mzc1MjcyOTA1NywzNy42MDM5MzU1MDg2NTcsMjYwXSxcbls1NS42OTIyNjQ0ODIyNzQsMzcuNTYxOTc5NzAyOTMyLDY4MF0sXG5bNTUuNjkxOTI2NzA0NTMyLDM3LjU2MTQ5MDYzNzgxNiwxMjUwXSxcbls1NS44NzA2MjYyMjY4MTYsMzcuNjQwOTgyMjk3MTQ4LDEyNTBdLFxuWzU1LjcxMTcxNDU1NTYxLDM3LjczODA5NDE2OTY5MiwzMDBdLFxuWzU1Ljk5NTYwNzA2NDMxLDM3LjE5MDkwMzk5OTM4LDYwMF0sXG5bNTUuODAzMzQyODc2MDk5LDM3LjYxODE5Njc4MzIyNiwzMDBdLFxuWzU1LjgwMzM0Mjg3NjA5OSwzNy42MTgxOTY3ODMyMjYsOTAwXSxcbls1NS43MjA0MTgzMjE4NzQsMzcuODIyMTQ2Nzc4NzIzLDYwMF0sXG5bNTUuODA1NTUzMjA0NjgsMzcuNTg0NDg0Mjg4MDUyLDcwMF0sXG5bNTUuNzAwODEyODE4MzgsMzcuNjIyMzIzMTQ4NjMzLDIzMF0sXG5bNTUuNjk1ODYxMjY5MDksMzcuNjY0OTI1NzYyNTQsMjgwXSxcbls1NS42OTU4NjEyNjkwOSwzNy42NjQ5MjU3NjI1NCwyODBdLFxuWzU1LjgxMjMyMjIwMzc4MiwzNy41OTUzNDkzMzU1NzgsNjAwXSxcbls1NS43NjQyOTEzNDUzMjQsMzcuNTkwNDk5MDQ4NTY1LDEwMDBdLFxuWzU1LjgwOTQwNzMxMjczLDM3LjYyODQ4MTI2MjU4OSwyNTBdLFxuWzU1LjY3OTEzMjAyNjY0MywzNy44ODg4NjI5NjQwODQsMTAwMF0sXG5bNTUuOTIxMDU4OTAwNzE0LDM3Ljk5NzYwODA0MzE2OSwxNTVdLFxuWzU1Ljc1MTg1NDM1NTUzOTgsMzcuNjQ1NTgwNTEzOTg2NSw4MDBdLFxuWzU1Ljc5MzE1OTkzMjQ2NSwzNy41OTI4ODk1NTk2OTEsNTAwXSxcbls1NS43NjI3MTE3NDE3OTgsMzcuNjQ0MDYwNTgyNjM3LDgwMF0sXG5bNTUuNzA2NTEzMDMxNzA2LDM3LjY4ODY5MjM1ODcyMyw2NTBdLFxuWzU1LjcyMjg5NjUzNDMyOSwzNy41MTU3NjI5MDYyNDEsOTAwXSxcbls1NS43NzE3MjM0MTIwNTcsMzcuNTE1OTk5MjI5ODE1LDQ1MF0sXG5bNTUuNjgzMzE1NjIzMDc4LDM3LjYwMDQwNjY5NDAwOCw1NTBdLFxuWzU1LjY5MDAxMzUwNTE3MiwzNy42NzYzNDMwMTIxNjIsMjAwXSxcbls1NS43OTU5NjE1OTgzOTMsMzcuOTY4MTU1NDUxMDkyLDIwMF0sXG5bNTUuODI1NjczNTY1ODYzLDM3Ljk2NjU0MTIxOTA0Miw0NTBdLFxuWzU1LjgyMDAyMzE5MDk2NywzNy45NzE5OTM0ODk0MDgsNjAwXSxcbls1NS43OTQ2NTEwNDA4MjYsMzcuOTcxNDYxMDUwNTgxLDMwMF0sXG5bNTUuNzk5NjgzOTMwMzMzLDM3LjkzNzcwNjYxODk5LDE1NV0sXG5bNTUuODUwOTg0NTc1NTk5LDM3LjU5NzQ1NDQ1MDk0OCwyMDBdLFxuWzU1Ljc0MDY1NDIyNjgwOCwzNy42NzE4NjY1MjYyMTMsODAwXSxcbls1NS43NDQ2MjY4MTk4NjcsMzcuNTY1Mzg3NDIyMjY5LDQ1MF0sXG5bNTUuOTc1NDY2NTI2OTAxLDM3LjQ5MDM3NjQxMTMxMSwzNTBdLFxuWzU1LjY5MjM2MzAxMDIxOCwzNy43MjkyNzcyNjg5MDIsMjIwXSxcbls1NS45MDEyNzg5MTM0MzYsMzcuOTQ4NTM1MzI1NzksNjAwXSxcbls1NS45MDIzODY4Nzc1MjMsMzcuNzE2MzQyODU0Njk1LDIwMF0sXG5bNTUuOTAwMzgyMTgzMDk3LDM3LjcxMDMyOTMxMjk3NywzMDBdLFxuWzU1Ljk1NDI1Nzk0MjQ5OSwzNy41MTE1NDc2NDQ3MiwzMDBdLFxuWzU1LjgwNjc5NTgzMTk0NiwzNy41MTc3NDI3MDY1MjMsMTM1MF0sXG5bNTUuNTY3MjcwOTIwODcyLDM3LjU5OTcxODYzMzk1MSwyMzBdLFxuWzU1LjY2NjgyNzM1ODcxMywzNy40NTgyMjM4MzYzNjEsMjgwXSxcbls1NS42MDgyNjM2NjkxMjcsMzcuNjIxOTQxNjUyOTI4LDIzMF0sXG5bNTUuNzAyNzA1NDI5MzIsMzcuNTA2NDM5NzI5NDE0LDQwMF0sXG5bNTUuNzk1ODUxNzgzODAyLDM3Ljk2MjYxMTc1MTIzNiwzMDBdLFxuWzU1Ljg5NTcwMjUzMzc1NywzNy43MTY4MzYwOTYyMDIsNTAwXSxcbls1NS42NDc3ODc3ODg2NTIsMzcuNTI4NDU0NTY3MTg4LDEwMDBdLFxuWzU1Ljc3MzI4OTE2NTgwMywzNy40ODQ4OTg0NDg0MiwyMDBdLFxuWzU1LjY3NTUwNzgxNTU3OCwzNy41MDU0NjcxMDU0MzQsMjMwXSxcbls1NS43NDIyNDc2Mzc4MDEsMzcuNjU1MjE4MDA1NzM3LDcwMF0sXG5bNTUuNzYwOTI5OTgxNjcsMzcuNjIyODgxNDQ5NTc5LDI4MF0sXG5bNTUuNzM2MDk4MTM2NjkzLDM2Ljg1NzA0NTQzNDgwMSwxNTVdLFxuWzU1Ljc1ODQyMjU0NzM1OSwzNy42OTI2MDgyNDYzMDMsMTgwXSxcbls1NS45MTQ4NzE4MDkzNzYsMzcuNzYyNjQ3NzA5MzMsNjUwXSxcbls1NS45MTk0MjMxOTg5MjIsMzcuNzQ1Mzc2MzcwMTc1LDYwMF0sXG5bNTUuOTE3ODU2MTM5NTcyLDM3Ljc0NjU3NTI0OTMzMiw1NTBdLFxuWzU1LjkxNTQwMjM3NjYzLDM3Ljc2MDcyMTQ4NTI4OSw0NTBdLFxuWzU1LjkxMzIwMzkxMDUzLDM3Ljc3MTE0MzQyMzI2OSw1NTBdLFxuWzU1LjcyOTYyODY4MjA4NiwzNi44NTc0MDc0NDg5MDEsMzUwXSxcbls1NS42ODk5NTM2MTY5OTEsMzcuNDcyOTYwNDY5ODA2LDIzMF0sXG5bNTUuOTYzMjkwMTcyNTM3LDM3LjgwODMzMzk2MTQzOSw2ODBdLFxuWzU1Ljc1Nzk5NjYzNDg5OSwzNy42OTgxMzAxMzYxOTYsNjAwXSxcbls1NS42NDcxNjMwMDU0NDgsMzcuNzM3Mzc1ODQ1MTY2LDM1MF0sXG5bNTUuNjUyOTU2MzAwMTY0LDM3LjcxOTQxMTA4NDM1NCw3MDBdLFxuWzU1Ljc2OTM4Njg5NzczNiwzNy42OTI5NzkxNjQ2MjYsMzUwXSxcbls1NS44MTY5OTc4MTc2MjYsMzcuNjQ2NzA3NTU2ODUxLDM1MF0sXG5bNTUuNTc4NTEzMjU4MTM0LDM3LjkxMDE1MTUxNDQyMywxMDAwXSxcbls1NS45MTc5MjE2Mjc2MTgsMzguMDA3MjU0NTEyODE2LDgwMF0sXG5bNTUuNjg2NjQ0MDI3MDEzLDM3LjMwNTkyNjcyMzI5LDcyMF0sXG5bNTUuNjgxODgwODM5OTU2LDM3LjI5MDU4NDQ3MjMwNCwxMDAwXSxcbls1NS4xNTMzNjEzNjk1NTYsMzcuNDU5MzY0NzYzMDEsMjYwXSxcbls1NS4xNTMzNjEzNjk1NTYsMzcuNDU5MzY0NzYzMDEsMjYwXSxcbls1NS42OTMzMTMxMzc4MTgsMzcuNzI2Mzk5NDI1Mjg3LDIwMF0sXG5bNTUuMTUzMzYxMzY5NTU2LDM3LjQ1OTM2NDc2MzAxLDI4MF0sXG5bNTUuNjg3MDQ3NTE2MTc0LDM3LjU3MTkzNTMzMjcyNyw4MDBdLFxuWzU1LjY4MDg0MDIzMzE3OSwzNy43MTc4NDAzNjY2MTQsNTAwXSxcbls1NS42NzY4MTQ1MDk3NDksMzcuNzIwMDcyNTE0OTU3LDc1MF0sXG5bNTUuNzQ4OTg2MTIzMzQ2LDM3LjYwNzM2OTU5Nzg1Miw2MzBdLFxuWzU1LjY3OTE3NjQ5MTY0OSwzNy42ODc3MTY5NjcxMTMsNTQwXSxcbls1NS42ODUzMTEzNDU2MDQsMzcuNjkyNDc3MTgwNTQ4LDIwMF0sXG5bNTUuNzQ3NTA4MTU4Njk1LDM3LjY4MTU0MzIyOTEwOCw5MDBdLFxuWzU1LjY3NzYzODU3MzczNCwzNy41NzQ0MTkyODQ1OTcsMTAwMF0sXG5bNTUuNjg2Mjk0NDI1NTI0LDM3LjI5NDMxNTU3Nzk1Myw1MDBdLFxuWzU1Ljc1Mjg3NzU5MjA5NSwzNy43MTc1MTI0NTQxMTEsNDUwXSxcbls1NS43NjY4NzM4MTI2MjMsMzcuNjAwODcxNDk4MDgzLDUwMF0sXG5bNTUuNzQ3MzM3NDEyMzIzLDM3LjU4MzUyNjgzMzk2LDUwMF0sXG5bNTUuNzU3NTI5NzU1NDc4LDM3LjYwMDQ4MTQ3NDY5LDEwMDBdLFxuWzU1Ljc0MTIxMTAyNjkxLDM3LjYxNDI3NzkyOTcxOSw2MDBdLFxuWzU1LjczMDA2OTY0MDc2NywzNy42MjQ3MjkxNTY0OTQsMTkwMF0sXG5bNTUuOTEwNDQ0NTA2MjIsMzYuODY2MTg2ODcxMDk4LDUwMF0sXG5bNTUuNjYwNzg0NDgxNDE4LDM3LjQ4MDMxMjY4MTA1OSwzMjBdLFxuWzU1LjY2ODk0MTA5OTQzMiwzNy43NDE0NDc2ODc1NTUsNTAwXSxcbls1NS42NDk4NTAxOTQ0MzUsMzcuNjU4Mjk0NTM2MzM4LDY4MF0sXG5bNTUuODA0NzE5MzA5MDU0LDM3LjQyNDgyNjM0MjM0OSw0MDBdLFxuWzU1LjgyMDc5MDk0NzIyNywzNy42NTI3ODg4NDE1MjUsMTAwMF0sXG5bNTUuNDMyNzg1MzA4Mjg5LDM3LjU1MDA4MDY0NDQ0NiwxMDkwXSxcbls1NS4xNDc4MjYxOTI0NTYsMzcuNDg3Mjc2OTczNTc3LDIyMF0sXG5bNTUuNTQzNDQ1NjYxOTMyLDM3LjcyMDg2Nzc1NzA1Nyw1MDBdLFxuWzU1Ljc4MTI5NDA5ODQxNiwzNy42MDA0MzI1Njk1NTUsNzUwXSxcbls1NS40Mzg0Mzg3MTEyMzcsMzcuNzUxMzc1NjUzMTQyLDYyMF0sXG5bNTUuODYyNDUyMDI2NzE1LDM3LjEyMTQ3MzIzMzIzOCw5MDBdLFxuWzU1Ljc2NjU5NTc3OTU3OSwzNy42NTIwNTk5MTAyMDMsNDAwXSxcbls1NS43MjM3NDM0NzAxNywzNy4zNzc4MjUxNTcwMzIsMjUwXSxcbls1NS4zNzU1NjMzNDMzMTEsMzcuNTM5NjUwNTk5MTU4LDUwMF0sXG5bNTUuNzI2ODczMTM5NTI1LDM3LjU3OTY3MDExNTQyLDI2MF0sXG5bNTUuNDE5ODc5NjU1MzY0LDM3LjU3Mzk2NTc1MjAwNSw1MDBdLFxuWzU1LjY2NDA0MDEwOTA2NSwzNy43MDA5NDczMzg2NywyMDBdLFxuWzU1LjU5NTM4NzQ4NzQwNiwzNy4zMzk5NTI3MjUzMDIsNTAwXSxcbls1NS41OTY3MTMxNzA5MjUsMzcuMzQzMjU2NzMwMTE4LDEwMDBdLFxuWzU1LjY1OTg5MjYzMjk3MywzNy43MzU5NTExMTYxMzEsNjAwXSxcbls1NS41Nzg5MDc0NzM3MjgsMzcuMjM3NDU1NzI2Mjc4LDE1NV0sXG5bNTUuNjgzODE3NTUyNzA5LDM3Ljg5NTM2OTAyMjIzNywyNTBdLFxuWzU1LjU4NTI3MTcwNTUxOCwzNy43MjQ4OTI4NTMxMzMsMjgwXSxcbls1NS44MTE1OTM3NzU5NzIsMzcuNjUyNTcxMTk5OTI3LDQ1MF0sXG5bNTUuODExNTkzNzc1OTcyLDM3LjY1MjU3MTE5OTkyNyw0NTBdLFxuWzU1LjcxMTczMTM3MDE3NSwzNy4zNzIwNjE2OTU4MDIsODAwXSxcbls1NS43NTcyMTQ3Mzg3NzQsMzcuNjE4MTQ1MjU0NjA3LDQwMF0sXG5bNTUuNzk0ODM0OTQxODE4LDM3LjcxMTIwNjc0MzU4MSwyODBdLFxuWzU1Ljk4MDc1MzExMTA2NSwzNy4yNDkzNjk5MTE4NDYsMjAwXSxcbls1NS43OTE5MDAxMjYyMDksMzcuNzExMzg2MjgyOTY4LDQwMF0sXG5bNTUuNzkwNDA5Njg4MTczLDM3LjcxMDg3OTk4MzAzLDIwMF0sXG5bNTUuNzc5MTAwOTg2MzU1LDM3LjcyMTY1NjI0NzY3OCw0MDBdLFxuWzU1LjkzMzE3NjEyNjUwNiwzNy45Nzk3ODg3MjU5NTgsNzAwXSxcbls1NS42MzY5MTYxMzYyMTQsMzcuNTk4Mjk2NjQyOTYzLDQwMF0sXG5bNTUuODM2OTMyNDI3NDg3LDM3LjYzODQ0NzEzMTAyOCw0NTBdLFxuWzU1LjgyODY3ODI3MjY1NCwzNy42MzM2OTQ0MDIzNzEsMTUwXSxcbls1NS43NjQ3NzA0NTIxNDQsMzcuNjQwMTcwMDEwNDQ3LDEwMDBdLFxuWzU1LjgyODU0OTIyOTMyNiwzNy42MzA1MTgzODEyMDYsNjAwXSxcbls1NS44MTg3OTkyNzQxMjYsMzcuNTc2ODY5MjMzNzgxLDE1NV0sXG5bNTUuODMyMjkyOTE2MDQzLDM3LjYyNTA5ODA1NjY0LDI1MF0sXG5bNTUuODM2ODIwNjM5OTc0LDM3LjYyODQ2NDI1NTQzMSwxMDAwXSxcbls1NS41NDYxNTU5OTU5OTIsMzcuMDY0Njg1OTM2MTUyLDE1MDBdLFxuWzU1LjgwNTU1NDI0MTgyMiwzNy44MDE0MTM2ODAzNzksMjAwXSxcbls1NS41NTM0ODQ2ODk3NywzNy4wNzg5OTU0MDU0MzIsNTAwXSxcbls1NS43NjAxNjkxNTc5MjgsMzcuNjUxNDMyOTgzMjE2LDcwMF0sXG5bNTUuNzYzODM4MzA2ODg2LDM3LjYwNjE1OTMwMjc0NCw2MzBdLFxuWzU1Ljc1NDU4ODgxODgxOCwzNy42MzQ3OTkyNzM3NjMsMTAyMF0sXG5bNTUuOTE5NDk0ODExNzE3LDM3LjcyNDAwNjQzMjAxNCwxNzUwXSxcbls1NS43OTU4MDI2NTM0NSwzNy41MTI4Njc4MzMwNTgsNjAwXSxcbls1NS43MDM5NTgwNjI3NTksMzcuNzM0NjIwMjIzMzg2LDMwMF0sXG5bNTUuOTI5Mjg0ODAxMTIyLDM3Ljk5MzA2NTM2OTk3OCwzMDBdLFxuWzU1LjkxMDA2ODY4MDM2MiwzOC4wMDg5MDQ4NzA4LDI1MF0sXG5bNTUuNzA5Nzk0NzIzNDU2LDM3LjY1NzA5MzM5MTYxMSwyNjBdLFxuWzU1LjYwNjcwODAwMDk3MSwzNy41MzY3MTk3OTU4NzEsMjYwXSxcbls1NS43Mjk2NzAzMTA3NDcsMzcuNjEwNzcxMjM3MTYyLDI2MF0sXG5bNTUuNzQ3MDg2MDM1MTYyLDM3LjYwNzU5NzA4NTE5LDgwMF0sXG5bNTUuNzQ4NjA3NDM0Mjc0LDM3LjU4ODA0MzA2NDc2OCwzMDBdLFxuWzU1Ljc4MTcyMDU4OTUzOCwzNy43MTk1NjQ2NzQ4Niw2MDBdLFxuWzU1LjczOTU1OTI2ODA1MiwzNy41MDczNTA0NTkzNTUsMjAwXSxcbls1NS43NDcyNTg4MjIxNSwzOC4wMDYwNjc5NTU3NTEsNDUwXSxcbls1NS44NTU1NDI5NzUxMzIsMzcuNDk1NzUzODA0MDU3LDUwMF0sXG5bNTUuNzkwMjc2MjM2NDc1LDM3LjU0NDUxOTA1NTU1MywzNTBdLFxuWzU1Ljc5MDI3NjIzNjQ3NSwzNy41NDQ1MTkwNTU1NTMsNTAwXSxcbls1NS43OTAyNzYyMzY0NzUsMzcuNTQ0NTE5MDU1NTUzLDMwMF0sXG5bNTUuODA5NDk4MDUyNDMxLDM3LjgzMTIzMDQxMjI2LDE1MF0sXG5bNTUuNzM0MjE5MTkzNjMzLDM3LjQxOTM5Nzk4MjczLDU0MF0sXG5bNTUuODA5NDk4MDUyNDMxLDM3LjgzMTIzMDQxMjI2LDMwMF0sXG5bNTUuNzgyMDM0MTg5MzM3LDM3LjU5MzU0MTc0Mjk2NCw3NTBdLFxuWzU1Ljg1ODE4Nzk0MTk2OCwzNy41OTI3MTM5NTM0MjMsMTgwMF0sXG5bNTUuNzU4MDgxNzY1NTMxLDM3LjU1NDcyMDgwNzg4Myw5MDBdLFxuWzU1Ljc0NjkyMjAzMTMyOSwzNy42Nzk1MDUyODI4MzQsMTAwMF0sXG5bNTUuNjgxNzg2MDMwODQyLDM3LjkyODc0NDY4MzA3NSwxMDAwXSxcbls1NS4xNjQ0OTc1NjE2MTgsMzcuNDY4NDIzOTQ5NTgyLDE1MDBdLFxuWzU1Ljc4OTQ4ODUwODMyNiwzNy43NTM4Mjc5MTAzNTMsNTAwXSxcbls1NS43NDU5OTczMjY2MzIsMzguMDIzNzM1ODM2MjA2LDM1MF0sXG5bNTUuNjk1OTMxNzg1Njk3LDM3LjMzNTcyMTc2NTE1NSw4MDBdLFxuWzU1Ljc0OTk3NDM0MTg2NywzOC4wMDk4ODY5Nzc5MjgsNDAwXSxcbls1NS43NDgyOTA1NTAwNTgsMzguMDMzNDgzODQ2Niw0MDBdLFxuWzU1Ljc0MzU3NTMzNTgxMiwzOC4wMjQzOTcxNjg4NDgsOTAwXSxcbls1NS43NDgyOTA1NTAwNTgsMzguMDMzNDgzODQ2Niw3MDBdLFxuWzU1Ljc2NjE5NDA4OTk1ODIsMzcuNjE1MTAzMzI0MjYzOCwxMDAwXSxcbls1NS43NTM3NzMwNzYyNDcsMzguMDg0MzMyNjA2Nzg2LDUwMF0sXG5bNTUuODYyOTY5MTYyMzc4LDM3LjU4NTQzNjU2MTMxNSwyOTBdLFxuWzU1Ljc4MTk2MTc5Mjg5NywzNy43MDY1OTU5MDg1ODcsMjkwXSxcbls1NS42Mzg0MTMwMzM0NDksMzcuMzUxNjQ4OTI1Mjg2LDI5MF0sXG5bNTUuODA0Mzk3OTI1NjA4LDM3LjU4MjEzNTgwMDc2OSwyOTBdLFxuWzU1LjY4MzEzODgwMzgwNSwzNy41NDkyMzYzMzI5MTgsMjkwXSxcbls1NS41ODM5NTQzMzcwODQsMzcuNTk5Mjc4MzA5MjcyLDI5MF0sXG5bNTUuNTQ4NTcyNDU3MTY2LDM3LjU0MjQxOTQzODI0MiwyOTBdLFxuWzU1LjcyNzA2MTkxMzczNSwzNy42Nzk3NDEzMjU4MTcsMjkwXSxcbls1NS44MjQ5MDMxMjM1NDgsMzcuNDM2NDA3MjUyMTQzLDMxMF0sXG5bNTYuMDE0MzE2Mzg5Mzc1LDM3LjIwNTM5NDIxMDYyMSwzMTBdLFxuWzU1Ljg2NDQ0MzI4MzgwMSwzNy41NDgwNjk2NDY4MjgsMjkwXSxcbls1NS41NjY0MDgyNjE0NzksMzcuNTczMDIxMjc2ODExLDI5MF0sXG5bNTUuNjY1NzYwNzYzMjQsMzcuNjI4NzYxNjA4MDg0LDI5MF0sXG5bNTUuNjY3NTMwMTY2NzAxLDM3LjY1ODUxNDI5Nzc4MywyOTBdLFxuWzU1LjYyMjIzMDQyODQ4NCwzNy42MTMyNzU5MjEzOTgsMzEwXSxcbls1NS44NjU1OTI0OTUxNzYsMzcuNDYyMjI0NTE5NzksMzEwXSxcbls1NS42NjIxNDUwMjA5MjMsMzcuNTA4NzExMjYyNTM2LDMxMF0sXG5bNTUuNzAwMTQzNTUxMDc0LDM3Ljg1NTYzMTI1NzUzNiwzMTBdLFxuWzU1Ljg5ODIyOTkxOTY1OCwzNy41ODg0NjQ4NTA4NzgsMzEwXSxcbls1NS42NDk3MDQ1MTgzNzIsMzcuNzQ0NjIxMTY3Mjg5LDMxMF0sXG5bNTUuNzc1MDYzNzc5MzI0LDM3LjQ3OTA2MDc1NzI4MSwzMTBdLFxuWzU1LjgwNzEzNTc4MzYzLDM3LjQwOTMyOTQ4NjgxNywzMTBdLFxuWzU1LjcwMzc1MjA5NDMxMSwzNy40NTg5ODI3Mjk1MTMsMzEwXSxcbls1NS44MjI5MTA4NDkwOTQsMzcuNTg4NTYwODExMTc2LDMxMF0sXG5bNTUuODI3NTM1NjAxNjUyLDM3LjY0MjQyNzk2MzAwNSwzMTBdLFxuWzU1Ljg0NzY4NTQ5NDQzOCwzNy4zNjExMTYwMjczMjksMzEwXSxcbls1NS43MTY2NzI5MzA1MzcsMzcuNDA5MjU1Mjc5MDI0LDMxMF0sXG5bNTUuNjY0MTkyODM5MTg2LDM3LjQ4MTEwNTA4MDU4MywzMTBdLFxuWzU1LjcxODAwNjczOTkyNSwzNy43ODUyNDI1NzgyNSwzMTBdLFxuWzU1Ljc3NzMwNzk2MzU4NywzNy41MjA4MTk5Njk1MywzMTBdLFxuWzU1Ljc1MDIxMzM4MjI1NiwzNy44MTcyOTExNjc1NTMsMzEwXSxcbls1NS44MjI1MDY3NDIwNTUsMzcuODIzMjM1NzY4NjQzLDMxMF0sXG5bNTUuODUxNTAzODkwNzA5LDM3LjY3NjE5MzAwNTgxNiwzMTBdLFxuWzU1LjgwMjc1NzUxNjY2MywzNy43NTU2ODg4Njg5NjQsMzEwXSxcbls1NS43NzU4MjkyNjgzMSwzNy44MzU3MDgyODI1MjIsMzEwXSxcbls1NS43NTAxMjA4MzY5MjksMzcuODg3NDc0MTUwNTA5LDI5MF0sXG5bNTUuNzkzNzEzMDkyMTg3LDM3LjkzNjYxMDg1MTU0MywyOTBdLFxuWzU1LjY2ODE3MTY1OTUwNSwzNy44NzExMDYzNTU0NDgsMjkwXSxcbls1NS40NzM3Njk1NzIwNDcsMzcuMzExMjAxODk5MjQ5LDMxMF0sXG5bNTUuODE5MDY4NjkxMjE4LDM3LjM2MTEzOTI3MjE3OCwzMTBdLFxuWzU1LjgyOTIxMzM5OTQxOCwzNy4zMDU5MTc4Njg3OTgsMjkwXSxcbls1NS42MzI3MTU3NzY3NjEsMzcuMjExMjg2NTc5OTEzLDI5MF0sXG5bNTYuMDA4MzY3OTM5NDgzLDM3LjQ0MDA0MzYwMTA5NywyOTBdLFxuWzU1LjY4MDc0MzQ3Mzk4MywzNy44ODc4NTg3MzQ0OTYsMjkwXSxcbls1NS42NTkyMzU4MDI0MTYsMzcuOTE3MjA5NzU0ODYxLDI5MF0sXG5bNTUuOTIyNDM2MzE4MjI1LDM3LjcxNTExNzg1Nzg4NywzMTBdLFxuWzU1LjkxMTQyMTEyMjg2OSwzNy43NzgxNzAyODU4MTksMzEwXSxcbls1NS40MzUxOTQ3OTc3NzksMzcuNTQ5ODU2MzgzMzQ5LDMxMF0sXG5bNTUuOTk1MjQ3NDA3MTQ5LDM3Ljg2NzMyMzI3NzQ4OSwzMTBdLFxuWzU1Ljc0NjE1MjQxMjgzLDM3Ljg2MjczMjUxNjQ0MywzMTBdLFxuWzU1LjkwNDk3OTA5MjkxNSwzNy40MTY3NjE0MjU4MDMsMzEwXSxcbls1NS45MjQ1ODQ3NzQ2OTEsMzcuOTk4ODQ4ODYwODEyLDMxMF0sXG5bNTUuODgwMzIwMDMzODc3LDM3LjQ4OTg2NjY5NzY3Niw1MDBdLFxuWzU1LjU5MTY5MTMwMTI1NiwzNy43NTUwMTg3NTcyMDIsNTAwXSxcbls1NS43OTQyNzgxNTc5NzcsMzcuNzUxODc5MzkzNjkzLDMwMF0sXG5bNTUuNzk0Mjc4MTU3OTc3LDM3Ljc1MTg3OTM5MzY5MywyMDBdLFxuWzU1Ljc4OTE1OTk3OTMzOCwzNy43NDgyODE1OTA2OTgsMzAwXSxcbls1NS43NTY1NzcxMDI1OTYsMzcuNjMyNTc1NjQyODc1LDc1MF0sXG5bNTUuNjcwODAxNjQ1MTQsMzcuNzQ3NDUxNzQ0NzI0LDIwMF0sXG5bNTUuNzU3ODc5Njg4MDE1LDM3LjYwNjEzOTE5MDg4OSwxMDAwXSxcbls1NS42ODEwMzQxNDU4MzgsMzcuNzYwMzY4NjAxNDQ5LDYwMF0sXG5bNTUuODI4ODY2MzEzOTc3LDM3LjY0MzA5MTg5NDg5MiwzMDBdLFxuWzU1LjgyODg2NjMxMzk3NywzNy42NDMwOTE4OTQ4OTIsMTAwXSxcbls1NS42Nzc1NjcxMDY5ODcsMzcuNzUzNDAzNTg3NDg1LDgwMF0sXG5bNTUuNDU1NzA4NTM0MjQxLDM3Ljc1OTM4ODY2NDQ0Niw2MDBdLFxuWzU1Ljc1Nzk1MDU1MjQyNiwzNy42MzY4NDE2NDgzNjQsODUwXSxcbls1NS43MTY2NzIxMTg5MzUsMzcuNTA4OTg2MzkzMTYxLDQwMF0sXG5bNTUuNzAxMjkwMDc2NDksMzcuNTExMTA2ODQwOTEyLDQwMF0sXG5bNTUuODMyMjE1NDg3NCwzNy42Mjk4NDA3NjM5NTksNjAwXSxcbls1NS44MzQwMDI2NDA0MDYsMzcuNjI5NDg0OTIwNjgsNDUwXSxcbls1NS43MjU2OTcyODk3MDIsMzcuNjY3NDkzMzE2MTY3LDc3MF0sXG5bNTUuNzM3MDMxNTg5NDY1LDM3LjY1OTM3MTE0MTM3Miw3MDBdLFxuWzU1LjczMDcxNTc0NDIxNCwzNy42NjcyMDM3MjM3ODUsMjYwXSxcbls1NS43MTg2MTgyMTU1MTYsMzcuNjgxMTIzODg4Nzk2LDc1MF0sXG5bNTUuNzE4NjE4MjE1NTE2LDM3LjY4MTEyMzg4ODc5Niw0OTBdLFxuWzU1LjcxODYxODIxNTUxNiwzNy42ODExMjM4ODg3OTYsNjAwXSxcbls1NS43MTg2MTgyMTU1MTYsMzcuNjgxMTIzODg4Nzk2LDU2MF0sXG5bNTUuNzE4NjE4MjE1NTE2LDM3LjY4MTEyMzg4ODc5Niw3MDBdLFxuWzU1LjYzMzI5ODY0OTQ1MSwzNy43NjY3ODY1MzUyNzIsODAwXSxcbls1NS42NTk0OTE1Mjc4OTIsMzcuNzQ5NjA0NDE5MDQxLDcwMF0sXG5bNTUuNzI0MzYyODE3MSwzNy42MjE1MzkzOTMwNyw4MDBdLFxuWzU1LjczODE1OTUwMjExOCwzNy42NzMyNjYyNjkxOTYsMjUwXSxcbls1NS43MDg1NjEwMzU5NzMsMzcuNjU2ODUwMzM4MDMzLDcwMF0sXG5bNTUuNzI4MTQzNTY1MjM1LDM3LjYyMzU3Nzg4NzkyMiwyMDBdLFxuWzU1LjcwODU2MTAzNTk3MywzNy42NTY4NTAzMzgwMzMsMzUwXSxcbls1NS43MTg2MTgyMTU1MTYsMzcuNjgxMTIzODg4Nzk2LDYzMF0sXG5bNTUuNzE4NjE4MjE1NTE2LDM3LjY4MTEyMzg4ODc5NiwzNzBdLFxuWzU1LjcxODYxODIxNTUxNiwzNy42ODExMjM4ODg3OTYsNzIwXSxcbls1NS43MTg2MTgyMTU1MTYsMzcuNjgxMTIzODg4Nzk2LDQyMF0sXG5bNTUuNjU0MTQyNTY2OTc3LDM3Ljc2MzYwODU3OTg0NCwzODBdLFxuWzU1LjcxODYxODIxNTUxNiwzNy42ODExMjM4ODg3OTYsMzAwXSxcbls1NS43MTg2MTgyMTU1MTYsMzcuNjgxMTIzODg4Nzk2LDY3MF0sXG5bNTUuNzE4NjE4MjE1NTE2LDM3LjY4MTEyMzg4ODc5Niw3NDBdLFxuWzU1Ljc3MDY4ODU1NDI3NywzNy41OTY3MDAwNzQwNjUsNDgwXSxcbls1NS43NjQ3NTc0MDQ2MDQsMzcuNTcxNjUwMjY2Mzk4LDEzNTBdLFxuWzU1Ljc0Mzg3OTE0MjMwNCwzNy41NzgyMDY4NDM4ODQsMTAwMF0sXG5bNTUuNzM5NzI0MDA5MTkzLDM3LjY2NzM3MTg0ODIwNiw1MzBdLFxuWzU1LjY1ODI1MDYxMzcyNywzNy43NDI0MDk4NTYzODMsMTU1XSxcbls1NS43NDQ3MTU3OTY5MTIsMzcuNjc4MDM5NjI5NjM1LDE1MF0sXG5bNTUuNzgyMjAwMzk0LDM3LjU4MDEwODYyNzEzOCwyMzBdLFxuWzU1LjczMTk3NzIzMzU2MSwzNy42NDMxODE3MzQxLDEyMDBdLFxuWzU1Ljc4NTUwMzYzMjc5NiwzNy41OTYwNTIyMTYzODYsNDEwXSxcbls1NS43NTcyODcwNDEyMzUsMzcuNTM2NjU4OTMzMDUsMjUwXSxcbls1NS43MzM0NTcyNzQ4MiwzNy43MDkxNjQyMTI3ODksNTQwXSxcbls1NS43OTAzNjcwODExODMsMzcuNjEzODM5MzU3NDAzLDcwMF0sXG5bNTUuNzc5OTMwOTk0NDAxLDM3LjYwNTk5Mzk5Nzg1OSwxMDAwXSxcbls1NS43ODU5OTIwODgwNDksMzcuNjM0NTI3MjU0MDgsMTAwMF0sXG5bNTUuNzU3MjE4Nzc5MTk0LDM3LjY1OTEzMzYxOTE0OCw4MDBdLFxuWzU1Ljc4OTc5OTY0NzIzNSwzNy42MzQzODMzNTgzOTUsOTAwXSxcbls1NS43MzcwOTQ0MDU2NiwzNy41ODM3NTQwNDk2NDcsNTUwXSxcbls1NS43OTI0NzM2NzIzNjgsMzcuNjA1MDAwMTcwOTM1LDIyMF0sXG5bNTUuNzU3MjE4Nzc5MTk0LDM3LjY1OTEzMzYxOTE0OCw1OTBdLFxuWzU1LjcwNzkwNTAxNDQ3NiwzNy42NTY3NDEzODE1NTcsMjAwXSxcbls1NS44NzE2MjcwOTMwMjksMzcuNjM3MjAyOTI0MTI5LDEyNTBdLFxuWzU1Ljc3NjkxMjcyNjA2MSwzNy42NTkzOTY4MzY3NzksMjYwXSxcbls1NS43Nzc2ODc2OTc2NjIsMzcuNjMzNTM1MTI3MTU5LDEwMDBdLFxuWzU1LjU2NTA2MzI2NzIyNCwzNy41NTY3Mzc5NTE3MjgsNTAwXSxcbls1NS43NTcwNzA2Nzk4MjgsMzcuNjYwODcxODY3OTIyLDUwMF0sXG5bNTUuNzMwMTA4Mzc5OTI3LDM3LjU5OTM5MDI3NDQyNCw1MDBdLFxuWzU1LjkwMzgyMTg5NzIxNiwzNi44NTc4NDYwODA5NjIsMTcwXSxcbls1NS45MTMwNDkzNDE3OTcsMzYuODI0MjU4MjkxLDQwMF0sXG5bNTUuOTE2MDQzMDg2NjY1LDM2LjgzMzQ4NDQ1ODg2OSw1MDBdLFxuWzU1LjY0NTY4NDg0Mjk5NCwzNy41MTc5NzE0NzM0MjgsODAwXSxcbls1NS43NTcwNzA2Nzk4MjgsMzcuNjYwODcxODY3OTIyLDUwMF0sXG5bNTUuNzMyOTYwODAxMDgxLDM3LjU1MjkwODk5MDYzLDEwMDBdLFxuWzU1Ljg1OTIyNTI4NDkwNiwzNy4zOTU1OTE3MTQ0ODksNDMwXSxcbls1NS45MTM4NzYxMjQxODYsMzYuODY0NDE3MTIyNTI0LDE1MF0sXG5bNTUuOTE0MDcxODE2MzY5LDM2Ljg2MzE4MTIwNTAyNSwzMDBdLFxuWzU1Ljk1NTIzOTY0OTAxMiwzOC4wNTIzODU5NTYwMTUsNjBdLFxuWzU1LjczNDc1MTg5NjM2MSwzNy42NDIyODAwNjQxOSwxNTAwXSxcbls1NS45NjEyNjY1OTQ4MjcsMzguMDQzODE2MDUwNjE4LDQwMF0sXG5bNTUuNTc4Nzk5OTY1NTQyLDM3LjkwMjYzMjAyNDI4NywzNTBdLFxuWzU1LjczMjE5NjY2MjMxMywzNy42MzU2NTQyMDU5MDYsNTAwXSxcbls1NS42NzU0MDAyODcwNzQsMzcuNzc3MTg3OTgzNDg0LDEwMDBdLFxuWzU1LjkxODkxMTU0MTE2OSwzNy44NjIyNjYxMTU0NDQsMTI1MF0sXG5bNTUuOTYyMjk1NDczODA1LDM3LjkxNjY0ODY0Mzk5OSw0MDBdLFxuWzU1Ljk2NDg2MTYzNzI3NiwzNy45MTUwNzE2NjYwMDcsMTUwXSxcbls1NS43NTUwNDg5MTE3MDQsMzcuNjQ3MjA2ODY0MDAzLDgwMF0sXG5bNTUuOTYyMDAwNzEwMzk4LDM3LjkwODY3OTc2MTEzOSw0MDBdLFxuWzU1Ljc1OTUwNzQ4MjM3NiwzNy42NDU3MDY4MDcxNDgsNTAwXSxcbls1NS44NTk5MDg1MDkzOTIsMzcuNDY3NzQ3MzI3MTc0LDY1MF0sXG5bNTUuNzY1ODY0MTIwODAyLDM3LjYwNDc5MjczODY3MSwxMjAwXSxcbls1NS43NjU4NjQxMjA4MDIsMzcuNjA0NzkyNzM4NjcxLDE2MzBdLFxuWzU1Ljc1NTMzOTcxODM4NCwzNy42MDg5ODI0MTk5MiwxNTAwXSxcbls1NS43NTgxMTg2Njc3NjYsMzcuNjM3MDM4NjUwNjAxLDEwMDBdLFxuWzU2LjAxMzk3MTE2NTUwOSwzNy44NDQxMTk4NDMxMjUsODAwXSxcbls1NS43MzE5MDQ3MjcwNTcsMzcuNjI0NjAwNDU0MDk2LDYwMF0sXG5bNTUuNzY5NjkyMzc0Njc3LDM3LjYyMDc0OTY3MjQyMywyMDAwXSxcbls1NS43NTAyMDE0MTc1ODgsMzcuNTk0Nzc4NDY4MzgsMzAwXSxcbls1NS43NTU3NzQ4NDEyMDQsMzcuNjE0NjM4OTM4ODcyLDI0MF0sXG5bNTUuNTY2NzkxMzAyNDcyLDM3LjU2OTc5MzYwODc2NiwxMDAwXSxcbls1NS43NTY2Nzk0OTc2MTUsMzcuNjA1NzgwMjYyNDg1LDM5MF0sXG5bNTUuNzUzMjc3MzQ0NjU3LDM3LjYwNjQwMjc2NzMwMiwxMjBdLFxuWzU1Ljc5NzI3MzY2MDI2NiwzNy43OTk2OTgxNjU2MDksNTQwXSxcbls1NS43Njc1NDM0NTIzNTgsMzcuNjAxMzU5NTA4OTI5LDE5MjBdLFxuWzU1LjY3Nzg3MzYxODA2OSwzNy41MDcxODg0OTkwMjcsMjAwXSxcbls1NS43NDgzMDgxNzEwNDIsMzcuNTg2ODk1NDM1OTUxLDgyMF0sXG5bNTUuNzU3MDc1MDk0ODAxLDM3LjU5OTIyMzUyNzc2NiwxNTAwXSxcbls1NS42NDM2Njg1NTg5NDIsMzcuNTI0NzM3MTM0MzUzLDI0MF0sXG5bNTUuNjU1ODA2NTg0MzAxNSwzNy41MjU2NjAxNjQ5MzEzLDE4MF0sXG5bNTUuNzYwNTQ5MjA2ODkzLDM3LjYxNDYxMTE0MTIwNSwxMDAwXSxcbls1NS42ODAzMjA0MDgzNDQsMzcuNTMyNjgwOTA0NTEsMzMwXSxcbls1NS42NjM2OTEyMjUyMTEsMzcuNDYzOTY1NTgyNjY1LDEwMDBdLFxuWzU1LjY2MzY5MTIyNTIxMSwzNy40NjM5NjU1ODI2NjUsNjAwXSxcbls1NS44NTYyNTYyOTQwMDUsMzcuNjUzMjg5OTg2NDMsODAwXSxcbls1NS43NjY3OTcxODU1NTksMzcuNTk2NTg2MTEyMzA0LDEwMDBdLFxuWzU2LjAxODkzMTQzODQyOCwzNy40NzE4MTgzODYxMDgsNjAwXSxcbls1NS45MTQwNzE4MTYzNjksMzYuODYzMTgxMjA1MDI1LDEwMDBdLFxuWzU1Ljc1MTQzOTE1MjU5OCwzNy41OTU4NzYzMjQyMjcsMjAwXSxcbls1NS42NzIwMjQ0NTg4NTUsMzcuNTQzNjAwNTQ1NjY3LDgzMF0sXG5bNTUuNzUwNzUxODI0MzkxLDM3LjU5NTQ0MzQxMjIzNSwzNTBdLFxuWzU1Ljg5MzkxNjc0ODU1MywzNy4zOTAzMjAyMzczMDcsODMwXSxcbls1NS43Mzc5NDE1MDg1OTUsMzcuNjM0MzA1MDUzOTU4LDgwMF0sXG5bNTUuNjUzODEyNDgzMjc1LDM3Ljg0NDMwMDg5MDE3MiwzMDBdLFxuWzU1LjczOTI1MDk3ODQ5NSwzNy42MzMzMTg0MjM3MzMsMjgwXSxcbls1NS42MDQ2NTk3MTc3NTYsMzcuNDg4Nzg5MzA0NDIyLDMzMF0sXG5bNTUuODU2MjU2Mjk0MDA1LDM3LjY1MzI4OTk4NjQzLDI2MF0sXG5bNTUuNjY5Nzg5MjY0NTQ3LDM3LjU1MjIwMDAzNjE5NSwzMDBdLFxuWzU1LjY2OTc4OTI2NDU0NywzNy41NTIyMDAwMzYxOTUsMjUwXSxcbls1NS45MTMzOTc2NTExMjcsMzYuODY0ODQ4MTMxMDIxLDQwMF0sXG5bNTUuNjMzNzIxMDg5Nzk0LDM3LjUxODczNTMxODcyNywxMDAwXSxcbls1NS42MzE1NTkyNzIzODcsMzcuNTE4MDY1MDQzNzIsNTAwXSxcbls1NS42MzA0NTQ3MTM0NTMsMzcuNTE2OTc3ODE1NjI0LDMwMF0sXG5bNTUuNjE5NTAzMjk0MzczLDM3LjUwOTM4NjEyNzg3NywyNjBdLFxuWzU1LjYxOTUwMzI5NDM3MywzNy41MDkzODYxMjc4NzcsMjQwXSxcbls1NS42MTg0MDA5MDgwMDMsMzcuNTEwNDk1NzE3NTgxLDYwMF0sXG5bNTUuODg5ODM4NzE1MDQ5LDM3LjQ3ODU4MTA2NzI5LDcwMF0sXG5bNTUuOTk3NTU0MjQ0Nzc4LDM3LjIyNzYyNzExNDE3NiwxMDAwXSxcbls1NS44MDU3NTgwOTI5NDcsMzcuNTgxNTI4ODYyNDE4LDgwMF0sXG5bNTUuNzg0ODUwMjEwNjQxLDM3LjU5NTQyNzk0MjE0MSw1MDBdLFxuWzU1LjYxMjI1NjcwOTUzNywzNy41MzY5NzEzNjI3MjYsMzUwXSxcbls1NS43NjExMTczODUwNTMsMzcuNjE0NTU0MDU5NDAxLDE1MDBdLFxuWzU1Ljg4OTgyMDUzODU3LDM3LjUzOTMxNjI2ODc5OSw1MDBdLFxuWzU1Ljg4NjM2MjI4MTg5OCwzNy41MjQ1OTgzMzE0OTUsMzUwXSxcbls1NS44NjE1NjU1Mzg3MTUsMzcuNTY3MTM3MzQ3MDcyLDMwMF0sXG5bNTUuODc5MTk4MjQ2ODA1LDM3LjU3OTQ1MjYxMjk0LDcwMF0sXG5bNTUuODk4NjI4OTkyNzU5LDM3LjUzOTIwNDIxNjEzOCwxMjUwXSxcbls1NS44MDE3MDY3ODc0NjQsMzcuNzQyOTY2NzM5NzAzLDUwMF0sXG5bNTUuODIzMjg0MzMzMzU2LDM3LjQ5NzcwMzExNTI2NywyODBdLFxuWzU1LjkwMTgzMTE4NTQ4NywzNy41NDg0NDE1OTA2MTcsODIwXSxcbls1NS43NTg3NzM3ODYwNTUsMzcuNjU0MzI3Mzg1MjcyLDEwMDBdLFxuWzU1Ljc1NjkwMTAxOTQ1LDM3LjU5ODA4NzgwOTY1Niw1MjBdLFxuWzU1LjkxNjU0NjM2NDc5MiwzNy43NTkxODYzNDg3NzYsMzEwXSxcbls1NS43MjgzODE5MjAxOTMsMzcuNjA4NDI3MDk4MzczLDMxMF0sXG5bNTUuODQzNTE5MjMwOTcsMzcuNTc5NzI3NTM3NTI3LDMwMF0sXG5bNTUuODAwODA3Njc3NTc1LDM3LjU5NTA3OTIxNzIyNiwyNzBdLFxuWzU1LjU5OTU0NzU2NjE4LDM3LjcxODA4OTU4MDc2OSwxNjBdLFxuWzU1LjY4MzA2NTYyOTY3OCwzNy42ODA5ODkyNzM5NzksMTkwXSxcbls1NS40MzE5NzQ2NDAyNTcsMzcuNTQ4Njg4NzI1MTk3LDI1MF0sXG5bNTUuODcwMzk4NDc1NDIyLDM3LjY3NjE1MTk3OTE2OCw1MDBdLFxuWzU1LjcwNTg1MDA3OTAzMSwzNy44Mjc5MTgzMjY3MzgsMzAwXSxcbls1NS44NzA1MTg3MTkyNjEsMzcuNjc2NzM3OTQ3MzE3LDUwMF0sXG5bNTUuNzY3MTAwNTEyNTQ2LDM3LjU4ODE5NDE0Mjg1NywxNTAwXSxcbls1NS44NzE5NzY2NDA1MTMsMzcuNjcxODE4Mjc0MjcsNTAwXSxcbls1NS42OTEwMjMwMTI1MzQsMzcuOTA2NTE1MTY0NDU2LDU1MF0sXG5bNTUuNjkxMDIzMDEyNTM0LDM3LjkwNjUxNTE2NDQ1Niw0MDBdLFxuWzU1Ljg2OTcxNjc5ODIwMSwzNy42NzY5NDYxMzE3ODQsNTAwXSxcbls1NS43NzA0NzYxNTY4NDQsMzcuNTgxMTczODE5OTI0LDkwMF0sXG5bNTUuNTgzMDgzMzk5NjczLDM3LjY2Mjg3NTc2NzM0MSw2MDBdLFxuWzU1LjcwOTc3Nzc4NTc1NSwzNy40NzgyMzI0NTcyMDYsMTAwMF0sXG5bNTUuODIzMjg0MzMzMzU2LDM3LjQ5NzcwMzExNTI2NywyODBdLFxuWzU1Ljc1ODg0MzEzMDY3NywzNy42NDA3Mzc3MzQ4ODYsMjMwXSxcbls1NS45NjM2NTQ3MjYwNDEsMzcuNDE1MDcwNjcxOTQsMjgwXSxcbls1NS43MDYyNDgyMjAzOTIsMzcuNzY1NDQyOTYyOTU4LDI4MF0sXG5bNTUuODgxMDE3NzE1MDE1LDM3LjQ1MDQ1ODgwMjU4MywyNTBdLFxuWzU1LjcwNTU2NTc1MTAzNSwzNy42ODk2OTg2OTg4MjgsMjgwXSxcbls1NS43NDUxMDk3NzExMDYsMzcuNTE1ODY4ODMzNDI5LDI4MF0sXG5bNTUuNjUzNjIyNzE4Mjk5LDM3LjYyMDcwNjQ1NjkyMiwyMzBdLFxuWzU1Ljc0MzkzMTY1ODQ3NywzNy44MTk2NDA5ODQzNDEsNjAwXSxcbls1NS42NTMxMTI2MDAzMTcsMzcuODIyNDIzMjU3NDY4LDUwMF0sXG5bNTUuODU1MjAyNjEwMTg0LDM3LjQ3ODM5MDk3NjY2NCwyMzBdLFxuWzU1LjY4MTQyNzQxNDExOCwzNy42MjQ4OTgzODQ0MDUsMjgwXSxcbls1NS43NDczNTU2NDU2MjcsMzcuNjc5OTAxMTk1MzQxLDIwMF0sXG5bNTUuNzk0NTA4MTQwOTI3LDM3LjU4NzI2NzYwNzA0MywyODBdLFxuWzU1Ljc1MTA4Nzc2MTgyNSwzNy44MTYwNTQyODc0MTQsMjgwXSxcbls1NS43NjkxNTQ1OTk1NjMsMzcuNTgzNjg3NTUzMzk4LDI4MF0sXG5bNTUuNzQ0ODIxOTYzMzU5LDM3LjYzNjcwMzQ4MTg0OCwyMzBdLFxuWzU1LjU2NTA2MzI2NzIyNCwzNy41NTY3Mzc5NTE3MjgsMjMwXSxcbls1NS44MTU0NDU4NzI4MzIsMzcuNzM4MDcwMDcyNjkxLDI4MF0sXG5bNTUuNzYyMjMxNjAzNTM0LDM3LjY4MjkzMDI1NDIzNCwyODBdLFxuWzU1Ljc0NzQ3MTQ1MTk0MywzNy43MDY4NDczNjQ5MjQsMjMwXSxcbls1NS41OTM2MzMxNzg3ODcsMzcuMjQyNjcwODM4NTgyLDI4MF0sXG5bNTUuNzgzNzAyOTc2NDE1LDM3LjYyNDI4NTg1NjgyNCwxNTAwXSxcbls1NS43Mjg1NzAzODE5ODksMzcuNjQ0NjI3NjU0NzU2LDY0MF0sXG5bNTUuNzcyMjE2MzgxODEyLDM3LjY0Nzg4Nzk0MjMzNSw2NDBdLFxuWzU1LjY1OTExNTAzODk0NSwzNy44Nzk3OTQ2MTQ4NjMsMjgwXSxcbls1NS40Mjc2MjMwNjE0NjUsMzcuNzU1Njk4NDUyMzE0LDcwMF0sXG5bNTUuNjY1ODk0MzY0MjA4LDM3LjU1ODIwOTI2OTU5Niw4MDBdLFxuWzU1Ljg2NjQzMTkzMjM0NCwzNy41OTI5MDMyNTQ3MzEsNjAwXSxcbls1NS44MzUwNDY4Mzg1MTQsMzcuNTM1MjA4NjAxOTc3LDYzMF0sXG5bNTUuODc5NzA5MDg3ODMyLDM3LjU1NzMyMTU5ODk3OCw2NTBdLFxuWzU1LjgxNTE3Mzg2MDk1NSwzNy40OTkyMzk0MzI0OTUsNzUwXSxcbls1NS43NTQ1MjUxMzY3NjQsMzcuNTY5NjI2NzExNjE5LDEyNTBdLFxuWzU1Ljg4OTAzMzAwOTU3NCwzNy41OTQxNjc4MzYyNzYsNzAwXSxcbls1NS44NTA5ODQ1NzU1OTksMzcuNTk3NDU0NDUwOTQ4LDMyMF0sXG5bNTUuODc2MTg5MzUzOTUyLDM3LjU4OTEzNTU0MjA3OSw2NTBdLFxuWzU1LjY3MDExNTQ1NDA0MywzNy41NTM5MDU4OTAzNjUsNTAwXSxcbls1NS43NDgxMTk2ODk2NTcsMzcuNzY2Njk0MDg0MTc5LDI1MF0sXG5bNTUuODUyNzk1ODY3MzkyLDM3LjU4NTgwNjgyNjk5NiwyNDBdLFxuWzU1Ljc2NzExMzM5ODE2OSwzNy42MDc4OTE5NDk3MDIsMTAwMF0sXG5bNTUuNjgxOTUyMjE0NTk1LDM3Ljg0NzIyMDA5MjE5NiwxMDAwXSxcbls1Ni4wMDg4NjAyNjA2NzMsMzcuMTk5OTg2MDMwNTYxLDI2MF0sXG5bNTYuMDA4ODYwMjYwNjczLDM3LjE5OTk4NjAzMDU2MSwyNDBdLFxuWzU2LjAwODg2MDI2MDY3MywzNy4xOTk5ODYwMzA1NjEsODAwXSxcbls1NS42MDQ2NTk3MTc3NTYsMzcuNDg4Nzg5MzA0NDIyLDEwMDBdLFxuWzU1LjczMjA0OTUxMjM1NywzNy42NDcwOTA1Mzg5MzEsMTAwMF0sXG5bNTUuODgxMDE3NzE1MDE1LDM3LjQ1MDQ1ODgwMjU4Myw4MDBdLFxuWzU1LjYxMjIyMzUzODEyOCwzNy43MTgyNzI1MzU1NTIsMjkwXSxcbls1NS45MDkzOTUxMjk2OCwzNy41NDA0MDA1NzExOTgsMTAwMF0sXG5bNTUuOTA5Mzk1MTI5NjgsMzcuNTQwNDAwNTcxMTk4LDMxMF0sXG5bNTUuODgxMzcxMDMxNTQ0LDM3LjcxMTkzMTQwODksNDAwXSxcbls1NS44ODgwODQzMzE0MSwzNy42NjI1Mzc0NzgyNzYsODIwXSxcbls1NS43NTMyNzQ0NTg0MTUsMzcuODU3OTIxNTYzNDg4LDEwMDBdLFxuWzU1Ljg1NjI1NjI5NDAwNSwzNy42NTMyODk5ODY0MywyNTBdLFxuWzU1Ljg1NTIwMjYxMDE4NCwzNy40NzgzOTA5NzY2NjQsNDAwXSxcbls1NS44MjAwMjczNDUxMywzNy40NjU2NDY5MTM4MzEsNTAwXSxcbls1NS42NzMwMDY1NDE0NzUsMzcuNDUxMjcwNDY0NTgxLDEwMDBdLFxuWzU1Ljc1NDkzMDA0MTcyLDM3Ljg0MzEyNzk2MDg0NywyNDBdLFxuWzU1Ljc0ODY0Nzk4NzQyMiwzNy42NTczMDUyOTYyOTksMTUwMF0sXG5bNTUuODYwNTA1Mjk0MzY5LDM3LjQ4MzI4NTQ1ODg1Myw1MDBdLFxuWzU1Ljg1OTkwODUwOTM5MiwzNy40Njc3NDczMjcxNzQsMTAwMF0sXG5bNTUuODQ5OTY3MjUzNDM5LDM3LjQ1MjAwMTU0NzMwMSw0NTBdLFxuWzU1Ljc5NDI4MzUyMjYyOSwzNy42NjU0MTA2NTgxNTgsODAwXSxcbls1NS43OTU2NjQ0MDg5ODMsMzcuNTYyMjM2NDkwMzc4LDI1MF0sXG5bNTUuODY2NjM3MDg2NDU1LDM3LjcwNjcwMzM5NzY0NCwyNDBdLFxuWzU1Ljg4Nzc5MTgxMzQ1LDM3LjQwMTMwNzg2MTgxMyw4MDBdLFxuWzU1Ljc5NzY0MTg0MDEwMywzNy45MzkxMTQ1OTcwMzcsMzIwXSxcbls1NS42NTIwOTg1ODg4NjksMzcuNDk5MjI0NjUxMDgyLDMwMF0sXG5bNTUuNjIyNjA2NzU1NDM0LDM3LjYwNTk0MDQ0MjY4OCwzMDBdLFxuWzU1LjY4OTQwMTkzMTAzMiwzNy42MDE3MDg5ODQwMjMsMzAwXSxcbls1NS42MTg2MjM5MzQ3MDksMzcuNTA3MjM0MjcxOTk4LDMwMF0sXG5bNTUuNzY2NjU2MDA0OTE3LDM3LjYwMjcwODIyNjk3NSwzNTBdLFxuWzU1Ljc2NDA5NzEwNDI5MiwzNy42MTU0NjAwOTY2NDEsNjAwXSxcbls1NS43NDg3ODAxNTA0MTIsMzcuNTM4NjY5MTUwNjA4LDM1MF0sXG5bNTUuNzQ5MjE4NzE5NDgsMzcuNTQwMDA2MjQ0ODkxLDIwMF0sXG5bNTUuNzkxMzYyNzI1OTg5LDM3LjQ4MzA1MzY4NTMwNSwxMDAwXSxcbls1NS44MDY5NTkwNzk3ODQsMzcuNTAyNTkzOTc5OTAxLDQwMF0sXG5bNTUuNzg0MDIwOTA4NjQ1LDM3LjQ3MDk3NjEyMTg2NCwyMzBdLFxuWzU1LjgwNDM3MjM5OTg4OSwzNy40OTU4NjA1MjgxMDIsMjAwXSxcbls1NS44MDM5MjQxNDU3MzQsMzcuNTgyMjU4MzI1Mjk0LDMwMF0sXG5bNTUuODAyODQ1NjQ5NDg5LDM3LjU4MzgwNTIzMTEzLDMwMF0sXG5bNTUuODAyODQ1NjQ5NDg5LDM3LjU4MzgwNTIzMTEzLDQwMF0sXG5bNTUuNzMwMzU4NTYwMTUyLDM3LjY0NTUyNDA1Mjc4OSwyNTBdLFxuWzU1LjcyNDQ1MzA0MDg5OSwzNy42NDYzNDU4MTgyNTQsMjUwXSxcbls1NS42NzU5MjY3NjAwNTgsMzcuNjI1MTA1NjgwNjE5LDIyMF0sXG5bNTUuNjgzMDgxMTY4MTIsMzcuNTM2OTg5NTA1NDU5LDE1NV0sXG5bNTUuODE3MDc4MzIyMDAzLDM3LjUyMjQ5NzgxMDEyNCw0MDBdLFxuWzU1Ljk1ODQ2MjMwODY5OSwzOC4wNTI3MDQ0NTU1NzUsNTAwXSxcbls1NS43NjE1NjgzODk4MjQsMzcuNjU4MjQ2MjgwMzI1LDQwMF0sXG5bNTUuNzk2NTcwNDU4NDY3LDM3LjU5OTI2NjY4NTA3Niw0MDBdLFxuWzU1Ljc0MjE3OTI2NjY5MywzNy41MDE2MjkyMDc3MTMsNDAwXSxcbls1NS42MTA0MDcxNzc3OTksMzcuNzE4NjQ2NzY0NjgsNDAwXSxcbls1NS42MTI2Mjg3Nzg1MjMsMzcuNzIwMTUyOTU2MjM5LDM1MF0sXG5bNTUuNjQ0NTYzNTc4MTE0LDM3LjY1NDUxNjYxOTI5OSw1MDBdLFxuWzU1LjgzNzk2NzQ0NDEzNCwzNy40NTM4MDgxMDczNjYsMzUwXSxcbls1NS44MjcyNjU5MjQ1NDcsMzcuNDQ1NzA5NTkyNDc5LDMwMF0sXG5bNTUuNzU5MDQ1OTQ2MjkyLDM3LjU4MDgxNjEzMDg0MSw1MzBdLFxuWzU1Ljc5MjY0MjcxMTM2NywzNy41OTA4MzI3NDM0OTMsMzAwXSxcbls1NS44MDY1Mzg4OTcyNjUsMzcuNTA0MTM4NzI2MDgsNDUwXSxcbls1NS42NDkzNzY5MTg5MzYsMzcuNzQ0MzYxNDg5NDQzLDUzMF0sXG5bNTUuODI2Njk2NTU5MzQ1LDM3LjQ0NTI5MTE5NDczOSwzNTBdLFxuWzU1LjgxODk3NjE0MzI1OCwzNy41MTg1NDYxNTc5NCw3MDBdLFxuWzU2LjAyNzI3NDExMjMyNiwzNy40NjgzMzExNDkxMTcsNTAwXSxcbls1NS42MTQyODQ5MzA4NzksMzcuNzQzMzg5MDA4Mjk2LDE1NV0sXG5bNTYuMDExOTg0NDYwNzA3LDM3LjQ2MzA1NTM1ODA5NCw1MDBdLFxuWzU1Ljc0NTMyNzA1MzM2NywzNy44NTYyMDc2NjY0NDQsMTAwMF0sXG5bNTUuODYyNzE4OTkzMjIxLDM3LjQzNTAzNDM4NzczMywyNjBdLFxuWzU1LjYxMjA4MTcwODU2OCwzNy43MzI4MzMyMjUxNTQsMjUwXSxcbls1NS44MTIyNTg3MTY3NTcsMzcuNTg4MzA1ODIwOTkyLDM1MF0sXG5bNTUuNzkzODY5OTcwNTI2LDM3LjU5MzU2NDUxODk2MSwzMDBdLFxuWzU1LjgwNzI2Mjc5MTIsMzcuNTg4NzcyNzUxNzAxLDM1MF0sXG5bNTUuNzU5ODAzMTY5Njk2LDM3LjY0NjMzNDUwOTkzNiw2MDBdLFxuWzU1Ljg3NTQxOTA3MjQwNCwzNy4zMzMwMjg3MTg1NDYsNjAwXSxcbls1NS43NDk4OTU5MjQ1NjMsMzcuNzA0NTE5MjE2ODA3LDM0MF0sXG5bNTUuNzU5MzI0OTA4ODc1LDM3Ljc1MjQ2MjIzMjk0OSwyMzBdLFxuWzU1Ljc3NzkzMjMyMjM5NywzNy41NTU2ODU0NzkxMTMsMzMwXSxcbls1NS44NDY0MTc2ODUzNSwzNy42NTU1MzEzOTUyOTMsNTYwXSxcbls1NS42MjE5MzExODUxMjEsMzcuNzgzMjAzOTU3NzEyLDMxMF0sXG5bNTUuODQ3NDA2MDAzNzcxLDM3LjY1ODUyMjY1NzQ0Miw1MDBdLFxuWzU1Ljc0NDU2NDYwNjM0MSwzNy41NjU1MzUxNTMxNDQsMjU3MF0sXG5bNTUuNjg0NDI3NTYzNjE1LDM3LjQ1MDk1MjE5NTcwOSwyMDBdLFxuWzU1LjY4NDQyNzU2MzYxNSwzNy40NTA5NTIxOTU3MDksMzAwXSxcbls1NS43ODUwMjY1MzkyNDcsMzcuNTU2OTYwOTYzOTY5LDQwMF0sXG5bNTUuNzc5NDY2NTM5ODIsMzcuNTQ3MjA0MjgzMjY0LDQwMF0sXG5bNTUuNzc0MDgyMzUzNjAxLDM3LjU0NDA4ODMwNzUwNyw0MDBdLFxuWzU1Ljc1OTg4MDk0NTk4MywzNy43NTI5MDI4MTc2NjYsMzAwXSxcbls1NS43OTA3NTYzMzA1NjcsMzcuOTU4OTI2MDEwMTk5LDIwMF0sXG5bNTUuNjk0MDg3MjkyMDAxLDM3LjUzMTY0NzgwODA5Niw4MjBdLFxuWzU1LjY4NjA0Njc3ODczNiwzNy4zMDI2NzUwNzUxMjUsMTAwMF0sXG5bNTUuNTgyMTU4NjY4MTMsMzcuOTEyNDU4NzA4NDE4LDI1MF0sXG5bNTUuNTgyMTU4NjY4MTMsMzcuOTEyNDU4NzA4NDE4LDI2MF0sXG5bNTUuNTgyMTU4NjY4MTMsMzcuOTEyNDU4NzA4NDE4LDQwMF0sXG5bNTUuNTgyMTU4NjY4MTMsMzcuOTEyNDU4NzA4NDE4LDg3MF0sXG5bNTUuNjc5OTc0ODk3NTA4LDM3LjYyNTMzNTAzMjc5OCwzMDBdLFxuWzU1Ljc2NDIxNzg2Nzg0NCwzNy42MTg0Njk1ODkzNCw0MDBdLFxuWzU1Ljg1MDQ4NTY0OTk2OSwzNy40NDUyOTI1ODkwMjYsMjYwXSxcbls1NS43NDM3NDg0MTEzNzEsMzcuNjI4MzgxOTUxMzI0LDI1MF0sXG5bNTUuODUwNDg1NjQ5OTY5LDM3LjQ0NTI5MjU4OTAyNiwyMjBdLFxuWzU1Ljg1MDQ4NTY0OTk2OSwzNy40NDUyOTI1ODkwMjYsMzAwXSxcbls1NS44NTA0ODU2NDk5NjksMzcuNDQ1MjkyNTg5MDI2LDI2MF0sXG5bNTUuODUwNDg1NjQ5OTY5LDM3LjQ0NTI5MjU4OTAyNiwzNTBdLFxuWzU1LjczOTcyMDkwNjYxOSwzNy42MTg2NjU1ODM4NDksMTAwMF0sXG5bNTUuODUwNDg1NjQ5OTY5LDM3LjQ0NTI5MjU4OTAyNiw4MjBdLFxuWzU1Ljg1MDQ4NTY0OTk2OSwzNy40NDUyOTI1ODkwMjYsOTUwXSxcbls1NS43NDE3ODkyOTQ0NzEsMzcuNTI1NDg5NTMwMzA4LDUwMF0sXG5bNTUuODUwNDg1NjQ5OTY5LDM3LjQ0NTI5MjU4OTAyNiwxMDAwXSxcbls1NS43NDgxNzU3OTU5OTEsMzcuNTQzOTg1MTE0NDg5LDQwMF0sXG5bNTUuNDUxOTk2ODcwMDM4LDM3Ljc2MzQ2NzIzMTE2Miw4MjBdLFxuWzU1LjcyNTE2NzU2MjgyMiwzNy41Nzg0ODQ0NzYyNDcsMTUwMF0sXG5bNTUuNDUxOTk2ODcwMDM4LDM3Ljc2MzQ2NzIzMTE2MiwzNTBdLFxuWzU1LjQ1MTk5Njg3MDAzOCwzNy43NjM0NjcyMzExNjIsMTAwMF0sXG5bNTUuNDUxOTk2ODcwMDM4LDM3Ljc2MzQ2NzIzMTE2MiwyNjBdLFxuWzU1LjYwNzg3ODYwMzk1NiwzNy40MjU0MzA1ODIyOSw1MDBdLFxuWzU1Ljc4NTMxODA2NjIzOSwzNy42MzEyNDk0MjE5MTIsMjAwXSxcbls1NS44NDYxNzA0NzAyNDYsMzcuMzU3ODg4ODgwMDM3LDI2MF0sXG5bNTUuNzI1MTY4MTUxNDQ4LDM3LjU2MzQ2NTE1ODk0NSwzMDBdLFxuWzU1Ljc3MzEyNzgzNjQ0LDM3LjYwMDg4MjI3NzY5Nyw2MDBdLFxuWzU1Ljg5NzU0MDE2MzQzMSwzNy43NTEzMTcyODI2NjYsNDAwXSxcbls1NS43NzM3NjU3NDY5MjQsMzcuNTk5Mjg2MzYwODQsMjAwXSxcbls1NS40MTU3NTkzMDcxNjIsMzcuNjA3NjU2MTg5NzkyLDI1MF0sXG5bNTUuNDE1NzU5MzA3MTYyLDM3LjYwNzY1NjE4OTc5MiwyMDBdLFxuWzU1Ljc3Njk5ODg4NDIwNywzNy41ODUzMzk5MTgwNTIsMTAwMF0sXG5bNTUuNzMxOTg3NTI5NTc5LDM3LjU2MjMyNjM3MDk3OCwxOTAwXSxcbls1NS43NzcyMjQ3ODEwMDQsMzcuNTg2MTQyODEwNjksNDgwXSxcbls1NS43MzIyOTUyNTQ2MzIsMzcuNTY0NjY1MjM2Mzk5LDMwMDQwMF0sXG5bNTUuNjk4NTc3MDIyMTY3LDM3Ljg1MDE1ODYxNjM2Niw4MjBdLFxuWzU1LjcyNjY3MDMzMzU5MiwzNy41ODY1NDI3Mzc0NjIsMTUwMF0sXG5bNTUuNzUzMTA4ODYwNzUxLDM3LjU4ODk3NzUxNDk2OSwxMDkwXSxcbls1NS43MDY5MjY4NjUwMTEsMzcuNTkyMTUyNjU4NzI2LDI2MF0sXG5bNTUuODM3NzM4Nzk3NzU4LDM3LjQ4MDU4NDMzMTQwMSw0MDBdLFxuWzU1Ljc2NjI1MzE3MTk3NywzNy42MjYyNzg5MTM3NjMsNTAwXSxcbls1NS43NzQyODg1OTUwMzcsMzcuNjc0MzUzMzQxNTE5LDMyMF0sXG5bNTUuNzc3OTAyNTYzNDQyLDM3LjY3NDU3MDU3ODIzMiwzNTBdLFxuWzU1LjkyNTgyNDc2ODE1NCwzNy44MTczMzY2MTI1MDksNTAwXSxcbls1NS43NTYyNDQzNjIzNTcsMzcuNjY0OTY0OTc1MzY0LDEwMDBdLFxuWzU1LjYxODYyMzkzNDcwOSwzNy41MDcyMzQyNzE5OTgsMjYwXSxcbls1NS42NTk0OTE1Mjc4OTIsMzcuNzQ5NjA0NDE5MDQxLDI2MF0sXG5bNTUuNjY1MDc0NDY3MjQxLDM3LjQ4MTU4Nzk1NjA5LDI2MF0sXG5bNTUuNzYwMTM3NTgzODc4LDM3LjU4NDUzODkyMDcxOCwyNjBdLFxuWzU1LjcyNjc0MjcwNDcsMzcuNjExMzIzNDQ2NTc1LDEyNTBdLFxuWzU1LjcxMTQ1ODAyNTE3NiwzNy42NTU4NzI0Njg5NTMsMzAwXSxcbls1NS43Mjg5NzE5MzE0NjYsMzguMDI4MzI3OTIwNTczLDUwMF0sXG5bNTUuNzgwNzcwODQwNzM1LDM3LjU5MDMzNTY0MDAwMSwzMDBdLFxuWzU1Ljc0MjE3MjkxMjAyOSwzNy45NzUwODc3MDA0MjIsNTAwXSxcbls1NS42NjE2NjUzMDYyNTYsMzcuNDUyNjM2NDczNzcsMjAwXSxcbls1NS43ODM1MzMyMzE1ODIsMzcuNzIxMzQwMTcwNTYzLDM1MF0sXG5bNTUuNzY0NzQxNTYxNTUzLDM3LjY1NjA3MTk0MTgxMywxMjUwXSxcbls1NS43MjY2NTE4NzY3MjEsMzcuNTc4MTYxNTkzOTU0LDE1NV0sXG5bNTUuNzU4NjgzOTEwNzQ5LDM3LjY1OTEwMjYyNTg3OCwxNTBdLFxuWzU1LjgwNzM3NTAwNzQ1OSwzNy43NTY4MDI0MTEwOTgsMjAwXSxcbls1NS44MDczNzUwMDc0NTksMzcuNzU2ODAyNDExMDk4LDIwMF0sXG5bNTUuNzc0MTEzNDkzMTc0LDM3LjY1NDkxMDM3MzA1NSwyNTBdLFxuWzU1Ljc3NDExMzQ5MzE3NCwzNy42NTQ5MTAzNzMwNTUsNDAwXSxcbls1NS43NzQxMTM0OTMxNzQsMzcuNjU0OTEwMzczMDU1LDE1NV0sXG5bNTUuNzc0MTEzNDkzMTc0LDM3LjY1NDkxMDM3MzA1NSwzNTBdLFxuWzU1Ljc3NDExMzQ5MzE3NCwzNy42NTQ5MTAzNzMwNTUsNDAwXSxcbls1NS43NzQxMTM0OTMxNzQsMzcuNjU0OTEwMzczMDU1LDQwMF0sXG5bNTUuNzc0MTEzNDkzMTc0LDM3LjY1NDkxMDM3MzA1NSwyNTBdLFxuWzU1Ljc2NzEwODA1MDU4OCwzNy42NTc3MTQyNTQ5NDYsNDAwXSxcbls1NS43ODY2MjMxNjE4NzIsMzcuNTg0MTk4NjczMDY1LDI1MF0sXG5bNTUuNzM4MTYwNzAxMTQ5LDM3LjY3ODkyMzA0MjA5NCwxNjMwXSxcbls1NS43OTIzMjE1NDgyNjMsMzcuNjAxNDEwMjY2NDM4LDUwMF0sXG5bNTUuNzM5NzI0MDA5MTkzLDM3LjY2NzM3MTg0ODIwNiw4MDBdLFxuWzU1Ljc3MjU5NTcwNjYwOCwzNy42NzgzMDE2MDkwNywxMDAwXSxcbls1NS43MTM3OTA5ODYxMjEsMzcuNzU3NjE3MzUzMDE0LDEwMDBdLFxuWzU1Ljc3MDEzODU1Mjg0OSwzNy42ODYxMzE5MTY1MjEsNzAwXSxcbls1NS41MTIzNTc5OTkxNTgsMzcuNTYzNDI0NTAxNDQyLDEwMDBdLFxuWzU1Ljg5NzcwMjY5NDE4NiwzNy40MDA5NjU4MDk1MDYsNzUwXSxcbls1NS43NzAxMzg1NTI4NDksMzcuNjg2MTMxOTE2NTIxLDI1MF0sXG5bNTUuNzY5NTQwMTEwNTE5LDM3LjU5NzM1MzYyNzk3OSw1MDBdLFxuWzU1Ljc3NjgxMzQ5NzQ2OCwzNy42NDkzMzA5NTM1MTEsMzUwXSxcbls1NS43OTY0NTE5MDAwNjksMzcuNjAwNjM3MjI0MTc2LDQ1MF0sXG5bNTUuNjA4MzE4MTEwNjA5LDM4LjA5MDAzNDgxNTM2NSwyNTBdLFxuWzU1Ljc4MTYyMzQ4MzA3OSwzNy42OTcwMTU5ODE4ODksNTAwXSxcbls1NS43ODA5ODk4MTc0NDEsMzcuNjMzMDIyMTkxODk1LDE1NV0sXG5bNTUuNzY5NTE2MTAzNDk1LDM3LjY3OTQyNTg2ODAwNiwxNTVdLFxuWzU1Ljc2OTUxNjEwMzQ5NSwzNy42Nzk0MjU4NjgwMDYsMjAwXSxcbls1NS43MjczNzQwMzcyMTgsMzcuNjEyNTk5Nzc0MjEsMTU1XSxcbls1NS43MjA1OTU4NzkzMDIsMzcuNjEwMzI5NjkzNTUsNzAwXSxcbls1NS43NjAwODE3ODI2MzEsMzcuNTgxNDIxODg4NjA0LDIwMF0sXG5bNTUuNzc0NTI5MTM5MDc4LDM3LjU4MDQwOTg5MDAyNCwyMDBdLFxuWzU1LjcyMTI2MjU3MzgxNiwzNy42MjE3MjYzMDcwMjYsMzUwXSxcbls1NS43NzQ4NzgzNzEyODQsMzcuNTgxNDIzOTM0MTIzLDE1MF0sXG5bNTUuNjA5OTc0MDY5Mzc1LDM3LjYwMzU0MzE4ODg3MSw2MDBdLFxuWzU1Ljc2MTI0MTUwNDI2LDM3LjY4Mzc3NzA3MjQ2MiwyNTBdLFxuWzU1LjYwOTk3NDA2OTM3NSwzNy42MDM1NDMxODg4NzEsMzUwXSxcbls1NS42MDk5NzQwNjkzNzUsMzcuNjAzNTQzMTg4ODcxLDYwMF0sXG5bNTUuNzQ5NDU1OTcwNTc0LDM3LjUzNjg3OTQ3MzgyMywxNDBdLFxuWzU1Ljc5MTkyNDI1MTg3OCwzNy42MDMwOTI1NjM2NTQsMzAwXSxcbls1NS43NzIyMTYzODE4MTIsMzcuNjQ3ODg3OTQyMzM1LDE0MF0sXG5bNTUuNzQ2MjcxNjA0MzMzLDM3LjU0NjE0OTc2ODAxOSwxNTBdLFxuWzU1Ljc2MzM1ODUwMDUwMywzNy41NTEzMjA1MjA0NTMsMTUwXSxcbls1NS42OTk3NjY2OTAwNjcsMzcuNjIzOTg3NDc3OTUxLDE1MF0sXG5bNTUuNzUxODk3NjIwODM5LDM3LjUzMjU4ODIxMDkxMSwxNTBdLFxuWzU1LjcyMjA4MjQ0OTEyOSwzNy42NTE0NzQ5Mzc3MTQsMTQwXSxcbls1NS42Njk3ODkyNjQ1NDcsMzcuNTUyMjAwMDM2MTk1LDE1MF0sXG5bNTUuNzc1Njc1ODg3OTA4LDM3LjU4NDc5ODA5ODU2Myw2MDBdLFxuWzU1LjcyMTk0NTI2MDc3NywzNy42MzI4MTQxNzIzMzksMTAwMF0sXG5bNTUuNzI0MzYyODE3MSwzNy42MjE1MzkzOTMwNywzMDBdLFxuWzU1Ljc5NDAxNDg4MDIzOSwzNy40OTUxMjYxNTIzNzcsMTA5MF0sXG5bNTUuNzIwNTk2NzgwNzQzLDM3LjYzMjM5NDY0NTczMSwzMDBdLFxuWzU1LjczMDM1ODU2MDE1MiwzNy42NDU1MjQwNTI3ODksODIwXSxcbls1NS43MDU2MzQ0NDQxMTYsMzcuNjExNzExNzUxOTI2LDI1MF0sXG5bNTUuNzYzMDIzODYyNDQ3LDM3LjU5NjY5NzU5NjU0MSw1MDBdLFxuWzU1Ljc2NDk0MjM3NjMzOCwzNy42MzIwNjU5MTI4MzYsMTc1MF0sXG5bNTUuNzk0MzU1OTExLDM3LjU4ODE1OTIwMjI4MywyNDBdLFxuWzU1Ljc3MDA0ODk3NzEyMywzNy41ODQ1NTEwMTU2NzksMjAwXSxcbls1NS43OTczOTAxNTkzNjEsMzcuNzIwNTE0OTAzOTI1LDI1MF0sXG5bNTUuNzY3ODExNTE2MzkxLDM3LjczODI4NzE2Mjk4MiwyNTBdLFxuWzU1LjcyOTQ4NDg2OTM2NywzNy42NDQ2OTY5MzAzNjgsMjUwXSxcbls1NS43OTQ3MjIyMjAzNzUsMzcuNzEzMTMzNjczMDk3LDQ4MF0sXG5bNTUuNzEyMTE2MzQ5Mzc4LDM3Ljg5NjQyOTIyMDI0OSwyNTBdLFxuWzU1LjczMjE4NDY1OTMzLDM3LjY4MDA4MTg1NTMwMyw3MDBdLFxuWzU1LjYwNDQ2Njg2NjU5NCwzOC4wODExNjkyNjkzMzEsNDUwXSxcbls1NS42ODUzNDg2NDY3OTgsMzcuNjczNDcxMzcyOTQ5LDEwMDBdLFxuWzU1LjczMzkyNDIxMTU4OSwzNy42NjMxODY1NjUwNTQsMTgwXSxcbls1NS44MTM3ODkyOTUyNzIsMzcuMzQ1ODQ1MzI4NzQ0LDE4MF0sXG5bNTUuNzE5ODE1NzM2OTU1LDM3LjY0ODEwNTQ1NzMzNiw2MDBdLFxuWzU1Ljg1MDQ4NTY0OTk2OSwzNy40NDUyOTI1ODkwMjYsNDAwXSxcbls1NS44NTA0ODU2NDk5NjksMzcuNDQ1MjkyNTg5MDI2LDU1MF0sXG5bNTUuNjk4NzEzNzQyNzgsMzcuNTgwMjU1OTAwMjczLDQwMF0sXG5bNTUuNjAxNjg1MTg1ODIyLDM4LjExNTYwMTkyNDY0MiwxMDAwXSxcbls1NS43MjY3MTQwMzM4MzcsMzcuNDUwMTIyOTIxNzE2LDIwMF0sXG5bNTUuODI5MDI4OTUxMDE3LDM3LjYxNzMxNjAxODg0NywxMDAwXSxcbls1NS43NTM5MzIwMjIyODQsMzcuNjM3NTkzMzgyNTQzLDYyMF0sXG5bNTUuNzIxMzQ2MTA2NTUxLDM3LjczMzg2ODYxNTI0NCw3MTBdLFxuWzU1Ljc0MzEyMTg2NTU0MiwzNy41MDcwNjMxMDYxOTksMjYwXSxcbls1NS42MDE0Mzg5MTE0OSwzNy40NzkwMTQ0Mzg4MDMsMjAwXSxcbls1NS42MDE0Mzg5MTE0OSwzNy40NzkwMTQ0Mzg4MDMsMzAwXSxcbls1NS43NDkyMTg3MTk0OCwzNy41NDAwMDYyNDQ4OTEsMzAwXSxcbls1NS42MDE3NTgzNDgyMDUsMzcuNDgyNzk3ODE0NDY3LDMwMF0sXG5bNTUuNzQzNTA4NzQyNzkzLDM3LjUwNTQ3NDg3MTA4Niw1MDBdLFxuWzU1Ljc4NjEwMDUyNjIyLDM3LjY1Nzk2MjEwNzIyLDEwMDBdLFxuWzU1LjcwMDgxMjgxODM4LDM3LjYyMjMyMzE0ODYzMywxMTAwXSxcbls1NS43NzQ1MTQ0MDQ2OTUsMzcuNTIwNjEzNzgxNDY3LDIyMF0sXG5bNTUuNzI2NTYwODAwNDAzLDM3LjYwNzMwNTI2NjAyOCw0NTBdLFxuWzU1LjgxODk3NDYyNTQ0NywzNy4zNDcyNjA1OTQ5MTYsMzEwXSxcbls1NS43MDUxNTE5NjUyNzUsMzcuNTg4NjkyMTY0MDc0LDIwMF0sXG5bNTUuNzA0OTM5MjMzMjUsMzcuNTg4OTAxMTUyNTEzLDI3MF0sXG5bNTUuODE4OTc0NjI1NDQ3LDM3LjM0NzI2MDU5NDkxNiwyNjBdLFxuWzU1Ljc2MDU0OTk0Nzk5OCwzNy42MTQ2MTM4NjQwOTksMzMwXSxcbls1NS43NjEzMDk1MDg2NTcsMzcuNjE0MzMwNjU1NDUyLDQwMF0sXG5bNTUuNjUzODEyNDgzMjc1LDM3Ljg0NDMwMDg5MDE3MiwzMzBdLFxuWzU1Ljc2MTg5MzE1MzE1OSwzNy42MjQ2MDQ3MTgwNzcsMTYzMF0sXG5bNTUuNzU5ODg1OTA4ODg2LDM3LjY0NzA3NDkzOTY1OCwxNjMwXSxcbls1NS43MzA3MzMzODQ2MTYsMzcuNjI4MTMwMTgzMjY2LDU3MF0sXG5bNTUuNzMzNzU4NjQ5MTUxLDM3LjYyNzI5NjU1NzYyMiwyNTBdLFxuWzU1LjczMDczMzM4NDYxNiwzNy42MjgxMzAxODMyNjYsMTc1MF0sXG5bNTUuNzMzNzg3MjMzMDM1LDM3LjYyNzg3NjM4NjIxMiw3NTBdLFxuWzU1Ljc0MjE1Nzk5ODY0MiwzNy41MDQwOTQ3MTUyNTUsMzAwXSxcbls1NS43NDIxNTc5OTg2NDIsMzcuNTA0MDk0NzE1MjU1LDQwMF0sXG5bNTUuNzYxNDEzMzQ4OTI2LDM3LjYyMzc4NzY3NTI1OCw2NTBdLFxuWzU1Ljc0MjE1Nzk5ODY0MiwzNy41MDQwOTQ3MTUyNTUsMTU1XSxcbls1NS43NjE4Nzk3NjU0ODMsMzcuNjIzMjY4ODg3OTk2LDQwMF0sXG5bNTUuNzYwOTI5OTgxNjcsMzcuNjIyODgxNDQ5NTc5LDQ1MF0sXG5bNTUuNzYwOTI5OTgxNjcsMzcuNjIyODgxNDQ5NTc5LDUwMF0sXG5bNTUuNzY0NzcwNDUyMTQ0LDM3LjY0MDE3MDAxMDQ0Nyw4MjBdLFxuWzU1LjczOTcwODI3OTg1NCwzNy42MzM1NzYwOTUzMDEsMjEwXSxcbls1NS43NDQzOTQ5NTQ1MTIsMzcuNjQ5ODcyNTY1OTA5LDQ1MF0sXG5bNTUuNzU4NzI5ODUxOTIxLDM3LjY1NzIwMzUwNDE3MSwzMDBdLFxuWzU1Ljc1NTc3NDg0MTIwNCwzNy42MTQ2Mzg5Mzg4NzIsNTAwXSxcbls1NS43NTU3NzQ4NDEyMDQsMzcuNjE0NjM4OTM4ODcyLDIwMF0sXG5bNTUuNzcwNTYyMzUyNjQyLDM3LjYyMDAyMjk1Mjg5NywyNjBdLFxuWzU1Ljc5MTU4NDgyNTI5MSwzNy41NDE0MzMwMzUwOTUsNjAwXSxcbls1NS43NzE1OTgwNDEzMTcsMzcuNjMyNzUwMDA5NzcyLDIwMF0sXG5bNTUuNzU0NjgxNzc2MzY3LDM3LjYyMTUyOTE4NjA4NSwyNTBdLFxuWzU1LjcyOTc1NTgyMzc3OCwzNy43MzIxMjAyMzk3MjYsNjAwXSxcbls1NS42MDI2OTk1NDE1MDgsMzcuNDcwMDk4NTUyNDEyLDI1MF0sXG5bNTUuNzU0NjgxNzc2MzY3LDM3LjYyMTUyOTE4NjA4NSwxOTIwXSxcbls1NS43MTQwNjk4NDc1MDUsMzcuNzE4NDIyMTg2NzQxLDUwMF0sXG5bNTUuNjA0NjU5NzE3NzU2LDM3LjQ4ODc4OTMwNDQyMiwyMDBdLFxuWzU1LjYwNDY1OTcxNzc1NiwzNy40ODg3ODkzMDQ0MjIsNjAwXSxcbls1NS42MDQ2NTk3MTc3NTYsMzcuNDg4Nzg5MzA0NDIyLDMwMF0sXG5bNTUuNjA0NjU5NzE3NzU2LDM3LjQ4ODc4OTMwNDQyMiwyNTBdLFxuWzU1LjczNTQzMTcwMjc5NCwzNy43MDE1OTkxMjcwMTEsMjQwXSxcbls1NS43Mjk3NTU4MjM3NzgsMzcuNzMyMTIwMjM5NzI2LDcwMF0sXG5bNTUuNjA0NjU5NzE3NzU2LDM3LjQ4ODc4OTMwNDQyMiwyODBdLFxuWzU1LjkwOTM5NTEyOTY4LDM3LjU0MDQwMDU3MTE5OCwzMDBdLFxuWzU1LjgwOTQ5ODA1MjQzMSwzNy44MzEyMzA0MTIyNiwzMzBdLFxuWzU1LjgwOTQ5ODA1MjQzMSwzNy44MzEyMzA0MTIyNiwxODBdLFxuWzU1LjgxOTMxMzk5NDc2NywzNy4zODczNTA1Mjc4NjgsMTUwMF0sXG5bNTUuNzY2MDc4NDk1ODUsMzcuNTMyNTc0MDU3OTIyLDQ1MF0sXG5bNTUuNzY2MDc4NDk1ODUsMzcuNTMyNTc0MDU3OTIyLDQwMF0sXG5bNTUuNzU4MTM2NDE5MDc1LDM3LjY1NzE0NzQwMzU5OSwxNTAwXSxcbls1NS43NTg3Mjk4NTE5MjEsMzcuNjU3MjAzNTA0MTcxLDcwMF0sXG5bNTUuODQ4NjczNjgwMDQ1LDM3LjU5MDY0MjYzMjM3Nyw4MDBdLFxuWzU1Ljc0MjMzNTU0MjU0LDM3LjY1Mjg5ODMyNDY4MiwyNTBdLFxuWzU1LjczNzA0MzA3MjEyOCwzNy41OTQ2NDEwNjU0NTMsMjEwXSxcbls1NS42NTkwNTkwNjY2NjYsMzcuNzU0NDI1MDQ3NDg2LDI2MF0sXG5bNTUuODg4MDg0MzMxNDEsMzcuNjYyNTM3NDc4Mjc2LDQwMF0sXG5bNTUuOTkxMzc5ODQyMjA1LDM3LjIxNjAzODUyODkyNywxMDAwXSxcbls1NS43Mzk3MDgyNzk4NTQsMzcuNjMzNTc2MDk1MzAxLDUwMF0sXG5bNTUuNzQwMzg3ODkzNTAxLDM3LjYwOTM5NTU0Nzg2NCwxMDAwXSxcbls1NS44NDE5OTM4NDEyNTQsMzcuNjc3Mzc3ODI3NzU5LDc1MF0sXG5bNTUuNTc4MzAyNjYxNDYsMzguMTEwNTUyNDY5MDU0LDU3MF0sXG5bNTUuODA5MjA2MDg4OTA3LDM3LjEyNjgyNTA3NDI1Miw2MDBdLFxuWzU1Ljc4NTAxOTcwNjc4MywzNy40NjQyMTA2MTY1NDcsMTUwMF0sXG5bNTUuNzU3MjE4Nzc5MTk0LDM3LjY1OTEzMzYxOTE0OCwzMDBdLFxuWzU1LjgxMTI5MDA4NDkwMSwzNy4xMjg1MTMyMDU4NTEsMjUwXSxcbls1NS43NTcyMTg3NzkxOTQsMzcuNjU5MTMzNjE5MTQ4LDgwMF0sXG5bNTUuOTAxNjQ5MjkwNzQxLDM3LjU4NTg4NjM3MDcxLDMwMF0sXG5bNTUuODUwNDg1NjQ5OTY5LDM3LjQ0NTI5MjU4OTAyNiwzMTBdLFxuWzU1Ljc1NzM0Nzg0NjQ5NSwzNy42MjI1MDUzMTQ1NTUsMzUwXSxcbls1NS43OTc2NDE4NDAxMDMsMzcuOTM5MTE0NTk3MDM3LDM1MF0sXG5bNTUuNzAxNjMzNjgzMjgsMzcuNzMxODY1MjkyMTM3LDcyMF0sXG5bNTUuNTY1MDYzMjY3MjI0LDM3LjU1NjczNzk1MTcyOCwyMDBdLFxuWzU1Ljc2NTg0OTc3MDkwMSwzNy42MDI3NzAyMTk4OTgsODIwXSxcbls1NS44NTY3NTg3NzM4NzMsMzcuNDk0ODM4NjM5MzUxLDUwMF0sXG5bNTUuNzIyNTIzNDMzMDU0LDM3LjU2MTY3Mzc2ODM3MSwxMDAwXSxcbls1NS44MzczNjkwMTE4MjMsMzcuNjM2Mzg5ODA5NjE2LDQwMF0sXG5bNTUuODA3Nzg5MjM0OTM4LDM3LjU3ODM2Nzg2NDQ1NCwyNDBdLFxuWzU1Ljc1MDYxMzg2Njc3NywzNy42NTMxODAwODc4MTMsMzAwXSxcbls1NS43OTYyMjg2NTIxMDQsMzcuNzEzNTEyMDUyMzM2LDI0MF0sXG5bNTUuODAyOTUwMDk3MTY4LDM3Ljc3MzExMTA5NjQ1MywyNzBdLFxuWzU1LjczNDUwODk1MDQ5NiwzNy41OTU0Njc5Mzk3MTQsMTI1MF0sXG5bNTUuNzk2ODIwNTI1OTI0LDM3Ljc5ODk0NjQyNjg2Nyw4MDBdLFxuWzU1LjgwMzAwMDk0NjA1OSwzNy43Nzg1OTgyMTk4MjEsNTAwXSxcbls1NS43OTAyMTI1NTcxNDUsMzcuNzg5NzQxNjY3MDg3LDUwMF0sXG5bNTUuODE4NjA3MDIxNjY4LDM3LjY0NzU3ODcwNjkzMSwyMDBdLFxuWzU1LjgxODY4MjAxNTM1OSwzNy40NDgxMzAwMjgyLDU2MF0sXG5bNTUuODIwNTIyNDExMDMsMzcuNjQ4MDE5NjgwMzI1LDYwMF0sXG5bNTUuODAyMzgyMTY4MzkyLDM3LjgyNTgzMjE2NTgwOCw1MDBdLFxuWzU1LjgyMDc0ODgxMDk5MywzNy42NDIxOTg3MTQxMjMsNDUwXSxcbls1NS42ODE4NzEyNTgyMjUsMzcuNjIyNzQyNzY2NDMsMzUwXSxcbls1NS43NTgyNjk2NjY1OTQsMzcuNzAwNjg4OTgyNjcyLDcwMF0sXG5bNTUuNzc1OTg2NDM1MjI0LDM3LjY5MjA0NDE3OTEzOCwzMF0sXG5bNTUuNzc0NjY0NTU0NDI4LDM3LjY4NzI0NTgyNDE1NCwyMDBdLFxuWzU1Ljc3OTU2NTQ4MzM5NiwzNy42OTA3MjM4MDE1MDcsMjUwXSxcbls1NS43ODA4NDM2MDIxOTgsMzcuNjg5NDg2MTU2NTY2LDMwMF0sXG5bNTUuNzgzOTQ5NTI4NjA4LDM3LjcwOTg4OTM1NDUzOCw2MDBdLFxuWzU1Ljc3ODg2MTMyNzQ4MSwzNy42NzYzNDE1MjEyOCwyMDBdLFxuWzU1Ljc5MjY0MTQxMjM0NywzNy43NTIxNTA4OTM4MTksMTUwXSxcbls1NS43OTIyNzExMjkyNjgsMzcuNzUyMDQ3NzM0OTkyLDUwMF0sXG5bNTUuNzkzODY5OTcwNTI2LDM3LjU5MzU2NDUxODk2MSw1MDBdLFxuWzU1Ljc4ODM3MDY4MjM1LDM3LjY2Mjc5MzE1MzI1MSw5MF0sXG5bNTUuNzI3NDgxMTI4ODI2LDM3LjYyMTQ4MTI2ODYzLDE5MDBdLFxuWzU1Ljc5MTkwMzE1OTM1LDM3LjY4MTI4OTk1MjUyLDEyNTBdLFxuWzU1Ljc2NzMyMDk1MTE1MiwzNy42MDY3NzExNDI4NjQsNDQwXSxcbls1NS45NjM2NTQ3MjYwNDEsMzcuNDE1MDcwNjcxOTQsMzMwXSxcbls1NS43NDc1NTA2Mzk0NzcsMzcuNTM5NTcyODk5Nzc0LDQ0MF0sXG5bNTUuNzg5OTk5NDI5NjAyLDM3LjY4MDgyNzQ3NzkzNyw0MDBdLFxuWzU1LjQzOTg4MzM1MzI5NiwzNy41NzA2ODgwMzA5MjIsMjMwXSxcbls1NS43OTQyMDczMTA3NTYsMzcuNjc0NDU1OTU3MTk1LDUwMF0sXG5bNTUuNzU4NDgxMzczODE5LDM3Ljc0MTA0MTAwNDM4LDQ1MF0sXG5bNTUuODAyNDE4MDE3NzM3LDM3Ljc0Mzk3NjY4NjI3LDQ1MF0sXG5bNTUuNzgxOTc0NTQ3OTUsMzcuNzA0NDYxOTQzMjIyLDI2MF0sXG5bNTUuNzk1NTI1OTk2MjcsMzcuNjc4MjkzMDg2MTI3LDMwMF0sXG5bNTUuNzk1NDU0NjE4OTAzLDM3LjY2OTMxNzc2ODM2NiwyMDBdLFxuWzU1Ljc4Mjg5MDQ4OTQzNSwzNy43MjgwMzA1MTUzNjksNTAwXSxcbls1NS43ODI2NDgzNzUyMjQsMzcuNzIzNDE1NjYxMjcsODIwXSxcbls1NS42MjI2MDY3NTU0MzQsMzcuNjA1OTQwNDQyNjg4LDI4MF0sXG5bNTUuODUyNzk1ODY3MzkyLDM3LjU4NTgwNjgyNjk5NiwyMDBdLFxuWzU1Ljc5NjI0Mzc1NjIyMywzNy43MTk1NTE4NTM5MTYsMjAwXSxcbls1NS43NjQyOTUzNzMyNzIsMzcuODQ0OTY5MzI0Njc3LDIwMF0sXG5bNTUuNjU2MjU0NzgwODQ3LDM3Ljc0NDY2NjQ5MjYyOSwzMDBdLFxuWzU1LjgwMzQ0NTE0ODI3OSwzNy42NDc3OTkwMzk2NjgsMjcwXSxcbls1NS43NzI2Mjk0Mzg4MTksMzcuNzEyNzU4NTUyNDI2LDMwMF0sXG5bNTUuODAyNDE4MDE3NzM3LDM3Ljc0Mzk3NjY4NjI3LDE1NV0sXG5bNTUuNzg1NDUyMTQ4OTg2LDM3LjcxOTQ4Njc2OTYyLDUwMF0sXG5bNTUuNzg3NzE2Mjk3Mzk4LDM3LjcyOTcwMDkwNjkzLDQ1MF0sXG5bNTUuNzIxOTA3NDU4Mzg5LDM3LjYzODYwMTUwMTY0Nyw0NTBdLFxuWzU1Ljc4Nzg3Njk3Mzc1MywzNy43MzI2NjE4Njc0NTIsOTAwXSxcbls1NS43NzkxMjY4MDY4MTgsMzcuNjI4NjI2MDcwMzA4LDU0MF0sXG5bNTUuNzc1NjgwMTM5NjIzLDM3LjY4NDUxMTM3NzMsNTQwXSxcbls1NS43MDEzMzg3MTA1NzcsMzcuNTExMzk3MzIwNTIzLDU0MF0sXG5bNTUuNTk1MTc2ODc1NTMyLDM3LjAzNzk4NTgyOTk1NywzNTBdLFxuWzU1LjYxNDk3MTM4MzA5NiwzNi45OTAyMzYxNTM4NCwzNTBdLFxuWzU1LjY4NDM2NDU4Njc2MiwzNy4yOTYyNjk3OTE2MjksNDAwXSxcbls1NS43OTk0NjIzNjc5OTYsMzcuNzk0NzI3NzY4OTkzLDQ1MF0sXG5bNTUuODIxOTM5MjI2NzQyLDM3LjgyMzc4NDI2OTc1LDQ1MF0sXG5bNTUuNzE4NjE4MjE1NTE2LDM3LjY4MTEyMzg4ODc5Niw2NzBdLFxuWzU1LjczNTgyMzI0NDQ2OCwzNy41MjAzODc0MTM3MTcsNzAwXSxcbls1NS43OTAyNzYyMzY0NzUsMzcuNTQ0NTE5MDU1NTUzLDI1MF0sXG5bNTUuODgwMzIwMDMzODc3LDM3LjQ4OTg2NjY5NzY3Niw0NTBdLFxuWzU1Ljc5ODcxNjE3NDYsMzcuNTMyMTk2Njk0NjMsMTAwMF0sXG5bNTUuNzg4MTAwMzU5NjI1LDM3LjQ5MTE5MzMyNzMxNCwxMjUwXSxcbls1NS44Njg4OTk5NjIwNTMsMzcuNDk4OTA2NjA1MDk5LDYwMF0sXG5bNTUuODA1MjYwNDExOTA0LDM3LjUxMDk3Mjk1MDMxMiwzNzBdLFxuWzU1Ljc0ODc5MzY2NzM5OSwzNy43NTU4NzQ2ODMzMDMsNjMwXSxcbls1NS43OTI1NTExNjkyMDQsMzcuNTI4MzkwODc2MzMzLDIyNTBdLFxuWzU1Ljg3NTIxOTQ4MDk4MiwzNy40OTA1MDE1NjAwODUsNTUwXSxcbls1NS43ODYxNjU0NTcwODksMzcuNDk5NjExNjM2MzMyLDUwMF0sXG5bNTUuOTIxMzkxMTMxNjc5LDM3Ljg3MDU1MzcyMjI2Miw3MDBdLFxuWzU1LjkyMTg3MzA4MjE5MiwzNy43NDg1NTQxNzA2MzEsNzUwXSxcbls1NS45MjU4NzEzMjU2NTIsMzcuNzU1NDQ0NDk4OTE2LDc1MF0sXG5bNTUuODk3NjIxNjk2NzU3LDM3LjU3ODkxNDY4Mzc3NiwzMDBdLFxuWzU1Ljc1NzMwMDMxODgyMiwzNy42MDE1Mjk4MzA4MDgsODIwXSxcbls1NS43NjA3NDg3ODc3ODEsMzcuNjMyMTU2MTYxNzY4LDgyMF0sXG5bNTUuODU1MDc1MjQxMDU4LDM3LjM1NTEzMTk2Nzk0OCw4MjBdLFxuWzU1Ljg0NTU0NzQ1MTExOCwzNy42NjEwNjcxMDgwNSwyNTBdLFxuWzU1Ljg1NDg0NzAwMzY3NiwzNy42NTM3MDg0MTI1NjYsNTMwXSxcbls1NS44NTUyMDI2MTAxODQsMzcuNDc4MzkwOTc2NjY0LDgyMF0sXG5bNTUuNzg4NjkzODgxODg5LDM3LjU2MDEyOTAyMTg2OCwxNTVdLFxuWzU1Ljk2NjY2Nzc0MDc5NSwzNy40MTU4MTg5NDk5NTksODIwXSxcbls1NS42Nzc1MjM0MzY2NDQsMzcuNjY1MDI5MTYzNTE0LDI2MF0sXG5bNTUuOTY0MjA3NDM2OTM4LDM3LjQxMzA0OTg4ODQwOCw4MjBdLFxuWzU1LjkxOTczNTQ4MDkyNiwzNy43MDg1NTg3NDczNTgsODIwXSxcbls1NS42ODYyNzE2OTg1MzgsMzcuNzM4Njk2MjY4OTg2LDMwMF0sXG5bNTUuNjk0MzQ3NDQ2NTM5LDM3LjMzMTU4NTcxMjM3Niw3MjBdLFxuWzU1LjY4NTgwMzI0OTYwNiwzNy43MTg1MzAwODI3Myw1MDBdLFxuWzU1Ljc4MDY5NzM4NDM5MywzNy42MzM3OTYyMTYwMTYsNTMwXSxcbls1NS43NzA3ODA3MzQ5NjUsMzcuNjEwNjgzNjE2NjE5LDYwMF0sXG5bNTUuODUwNDg1NjQ5OTY5LDM3LjQ0NTI5MjU4OTAyNiw1MzBdLFxuWzU1LjcxOTk2MDM5MTA5MSwzNy40MTk5ODgzNDI4NDgsNTMwXSxcbls1NS40MTQ4ODAxNDgxOTEsMzcuOTAyOTQxMjc2MDIzLDUzMF0sXG5bNTUuNzM3MDIxNTY5ODAyLDM3LjUyNTY3MDc0Mjc4OCw1MzBdLFxuWzU1LjY3ODQyODk3NzEzNiwzNy42ODg3NjQ3NTg5OTIsNTAwXSxcbls1NS45MTA5NDU2NTQzMzYsMzcuMzk2MTA3NzgxNTYsMjQ1XSxcbls1NS43NDk0NTU5NzA1NzQsMzcuNTM2ODc5NDczODIzLDQwMF0sXG5bNTUuNzcwNTM2Njg1NjI3LDM3LjQyMTM4NDk3NzEyMSw0MDBdLFxuWzU1LjY1NDMwNDI2MDI1NiwzNy43NjU2ODI2OTU3NTcsMTUwXSxcbls1NS43MTA4MzU1ODMwODksMzcuODgwMzg1NDg3NzA0LDY2MF0sXG5bNTUuNzQ2OTcxMTA2MjMzLDM3LjU1NjgyMTUxMzc5NSwxOTIwXSxcbls1NS42NzI4MTE2NjEyODMsMzcuNzM4OTU0MTQzMjkxLDI1MF0sXG5bNTUuNjQ1OTc5NDA3NzcxLDM3Ljc0NzEwNTE0MjkxOCw1MF0sXG5bNTUuODA3ODg3MDY1NzQ0LDM3LjU3OTA4ODQxMTgwOCw3MDBdLFxuWzU1LjYzNjM3MzE2MTI3MSwzNy43NTg4MjQ4OTkxMzQsNTUwXSxcbls1NS42NDM3Njc5Mzg5NDQsMzcuNzI0Mzk4OTY4MzYzLDQwMF0sXG5bNTUuNjQ0NDk0MTAyMTIsMzcuNzExNjE2NDc4Nzc4LDYwMF0sXG5bNTUuNjc5MzAyNzk3ODA2LDM3LjU3NTcyMjIyMDkyNiwxMjAwXSxcbls1NS45NjM0NjAxMzEyMDQsMzcuNDA1Mzg0NzM5MjY1LDM1MF0sXG5bNTUuODc0OTEyMjYwNTkzLDM3LjU2MzEwNTk0Njc1MSwxMDAwXSxcbls1NS43MDM1ODI1ODU2OTcsMzcuNzQ0MTMxMTg4ODUxLDE5MF0sXG5bNTUuNjU2MzMyNjczODA0LDM3LjcyOTgzNTYzOTQ3MiwxNzBdLFxuWzU1LjcxNDUwNTY3NzAwMSwzNy42NDYzNDQ5MjAzMDcsMTAwMF0sXG5bNTUuNjExNDMzODMzMDU4LDM3LjYwMDI3OTYwNywxMjAwXSxcbls1NS44NDc3MjM3MjIzMzksMzcuNTY0MzE0MjM0MDYxLDUwMF0sXG5bNTUuNjA1NTA5NzI3MzU3LDM3LjU5MTQ2MzAzNjM1LDU1MF0sXG5bNTUuNzQxMDYxOTc1MTQ5LDM3LjYyOTI2ODY3MTM1NSwzNTBdLFxuWzU1LjY0NzUyMTk1Nzg4NCwzNy41OTU2MTA1MjkzMTksMjYwXSxcbls1NS42NTk3ODUyOTcxNzUsMzcuNTM3NjU5OTQ0Njc2LDYwMF0sXG5bNTUuODA3MzkwMDg0MDk4LDM3LjU4MDU5NDI5NzY4OSw1MzBdLFxuWzU1LjY5MDg4NDMzNTc2NiwzNy43NTQ1MzQ1OTc5OCwxNTVdLFxuWzU1LjY3OTk4MjU2NzY3NSwzNy42NDA1ODkzMTEyMzcsMTUwMF0sXG5bNTUuNDcwNTA0OTg4NzY1LDM3LjU0NjE2NTI4MDg5NCwzMDBdLFxuWzU1Ljc0NTEwOTc3MTEwNiwzNy41MTU4Njg4MzM0MjksMzAwXSxcbls1NS4zNjM2MjYzNTU1NTQsMzcuNTIyODQ5NjQ4NzUzLDYwMF0sXG5bNTUuNzY0MTMwMDI4MzAzLDM3LjYwMjU1MzI3OTA5OSw1MDBdLFxuWzU1LjYwOTU2NTEzMzg4OSwzNy42MDUyNjAyNTkwNzUsMzAwXSxcbls1NS42NDM3NTczMDA4MjIsMzcuNDgwOTU4OTU3OTk3LDMwMF0sXG5bNTUuNjEwNzMxMDg2MjAzLDM3Ljc0Mzg2ODEzMTAxMiw1MzBdLFxuWzU1LjcwNzI1OTQwOTgwNywzNy4zODcxNDU5ODI0MjIsMjQwXSxcbls1NS44OTE2MzA4NjA5NjcsMzcuNzQ4ODY1MjYzODg5LDM2MF0sXG5bNTUuNjQxOTkzMDMxODUsMzcuNTQxNTc1MzUyNTQzLDMwMF0sXG5bNTUuNzU1MTI4MzcwNTUyLDM3LjY2NzE1MDgwNDk1NiwzMDBdLFxuWzU1LjcwNjkyNjg2NTAxMSwzNy41OTIxNTI2NTg3MjYsMzAwXSxcbls1NS43NzE0MzI4NDQxOTYsMzcuNTk0MjgyMDcyOTA4LDUwMF0sXG5bNTUuODk0MTU1MDQ1Nzc5LDM3LjQ0OTc5MDkyMjIxNSwyNDBdLFxuWzU1Ljg1MDQ4NTY0OTk2OSwzNy40NDUyOTI1ODkwMjYsMjQwXSxcbls1NS42NTk5MDAwMjI1MjQsMzcuNTYyODkwMDI1MzQ3LDQwMF0sXG5bNTUuNjEzOTMyNzE5NTM0LDM3LjQ5NDEwMzc2NjkyOCw0ODBdLFxuWzU1LjY3NTkxNDEzMzQ2OCwzNy40NzI5MjE3OTA4NjMsODMwXSxcbls1NS42NTg4MDgzNDgyMTksMzcuNTE0NDc4Mzk3OTQsMzAwXSxcbls1NS43NTcxMjcyMTE1MDQsMzcuNjEzNTQxNzc4NzgzLDUwMF0sXG5bNTUuNjQ0NDI5NzkzMTY5LDM3LjQ5NTAyMDIwMDI5LDMwMF0sXG5bNTUuOTE5NzM1NDgwOTI2LDM3LjcwODU1ODc0NzM1OCwyNjBdLFxuWzU1LjkxOTczNTQ4MDkyNiwzNy43MDg1NTg3NDczNTgsMTAwMF0sXG5bNTUuOTE5NzM1NDgwOTI2LDM3LjcwODU1ODc0NzM1OCwyODBdLFxuWzU1LjkxOTczNTQ4MDkyNiwzNy43MDg1NTg3NDczNTgsMjYwXSxcbls1NS45MTk3MzU0ODA5MjYsMzcuNzA4NTU4NzQ3MzU4LDM1MF0sXG5bNTUuNjE4NjIzOTM0NzA5LDM3LjUwNzIzNDI3MTk5OCwyNTBdLFxuWzU1Ljc0NzU1MDYzOTQ3NywzNy41Mzk1NzI4OTk3NzQsMjAwXSxcbls1NS43ODAxNzE4NDA3ODgsMzcuNjMyNjIxNTg2NTcyLDcwMF0sXG5bNTUuNjk2NTcxODQ2MTksMzcuNTYxNTQ5MzExMDE0LDMwMF0sXG5bNTUuNjc2OTY4ODA3NzQ5LDM3LjU3ODIzODQ5NTI5OSwxMDAwXSxcbls1NS43NjMyMjE0ODk0MTEsMzcuNTkzNDA1NTk5NjgzLDYwMF0sXG5bNTUuOTE5MDM5NjI1NDE3LDM3Ljc0NjIyNjc4MDEwMyw2NTBdLFxuWzU1Ljc2Mjk3MDU4MTM1MiwzNy41OTE3NDExMTQ2NDgsNTAwXSxcbls1NS43NzIyMTY0NzMwNDUsMzcuNjQ3ODg4MDE5NTA2LDQwMF0sXG5bNTUuNzc0NjMxMDA2OTEzLDM3LjYwODU3MjU3NjUxNiwyMDBdLFxuWzU1Ljc1MzcxMzQwNDk3MSwzNy41NzcxNzM4NjIxMDcsMjAwXSxcbls1NS43NTIwMzUwOTIyNzEsMzcuNTkxMTcwODUyMTQxLDM1MF0sXG5bNTUuOTE5MDM5NjI1NDE3LDM3Ljc0NjIyNjc4MDEwMyw1NTBdLFxuWzU1LjY2MTYyMDk4NDM1LDM3Ljg3OTc2NTE2NTg3OCw1NTBdLFxuWzU1Ljc0OTg4MzE4MDcwMywzNy41OTM1NTEwNDM2MzYsNjUwXSxcbls1NS43NTk5NjY1NzY4NTQsMzcuNjE0MTUzMDkyMTY4LDEwMDBdLFxuWzU1Ljc3MDI2OTY4Mjk3NywzNy42MjE0MzM0MDc2ODYsMjAwXSxcbls1NS43NTE4OTc2MjA4MzksMzcuNTMyNTg4MjEwOTExLDcwMF0sXG5bNTUuNzQ3MzM3NDEyMzIzLDM3LjU4MzUyNjgzMzk2LDgyMF0sXG5bNTUuNzQ5MTg3NjM1Nzg1LDM3LjU4MzQ1MTUwMDg3LDcwXSxcbls1NS43NDY5MjcyMzYzMTEsMzcuNjI2MzY1NDY5NzU0LDY0MF0sXG5bNTUuNzY1Nzg3MzM0NjY0LDM3LjYxMTM2NjY1MTk0MSwxNTAwXSxcbls1NS43NTk4ODU5MDg4ODYsMzcuNjQ3MDc0OTM5NjU4LDEwMDBdLFxuWzU1LjkzODMzMDQ5MjM4MSwzNy4zMTM1Njc3MDI5MywzMTBdLFxuWzU1LjkzODMzMDQ5MjM4MSwzNy4zMTM1Njc3MDI5MywyNTBdLFxuWzU1Ljc1MjEwOTI4ODIyMSwzNy41OTYyODc3MjA2NTcsNDAwXSxcbls1NS43NjExMzczOTc3NDIsMzcuNjMyNzIzNDc2MDM1LDEwMDBdLFxuWzU1Ljc3NDExMzQ5MzE3NCwzNy42NTQ5MTAzNzMwNTUsMjQwXSxcbls1NS42NzczMzI0NjI2NDUsMzcuMjcxMzUxNDk2NTk2LDYwMF0sXG5bNTUuNzQ4MTgyNTQ1Mjg0LDM3LjYyNjA3Nzc1NTE0OSwzNTAwXSxcbls1NS43MzAxNTY3MTY2NDMsMzcuNzM0NDgzOTg3MjQ2LDM1MF0sXG5bNTUuNzU3OTk4ODkwODc5LDM3LjYyMzIyMjE5OTkwMSw1MDBdLFxuWzU1LjczMDE1NjcxNjY0MywzNy43MzQ0ODM5ODcyNDYsMzUwXSxcbls1NS43MzAxNTY3MTY2NDMsMzcuNzM0NDgzOTg3MjQ2LDE1NV0sXG5bNTUuNzUyMDE5NTQ5NTA4LDM3LjYzOTgzODM0MzkyMywyMDBdLFxuWzU1Ljc1ODYyMTc0OTk1OSwzNy42NDE2MzUzMjMzOTIsNDAwXSxcbls1NS43NzQ5OTQ1ODIwODYsMzcuNTgzMjQwOTA1MTMyLDUwMF0sXG5bNTUuNzQ4NzA0OTU4MDY3LDM3LjQyMzAzNzM0MDM4OCwxNTAwXSxcbls1NS43MzY5ODQzMjQ5MzYsMzcuNjMwODkyODY4LDE1MF0sXG5bNTUuNzU3MzYwMTE0MTM5LDM3LjY1NzEzMjE2OTkzMSw1MzBdLFxuWzU1Ljc1NTUyNzUxODM5LDM3LjY1NDc3MDYyMDY3OSwyNTBdLFxuWzU1LjczNzUyMTY5MzkzMiwzNy42MzE3MTQ3MjM4NjgsNTAwXSxcbls1NS45MDkzOTUxMjk2OCwzNy41NDA0MDA1NzExOTgsMjYwXSxcbls1NS43ODEzNjM1OTA5MTMsMzcuNzA1NTQ2MTAxNDkzLDI2MF0sXG5bNTUuNzk3MTIxMzk0MjY0LDM3Ljc3NjIxMDM2MzU4NSw0NTBdLFxuWzU1LjcwNzY4NTAzMzI5MywzNy41ODQ0OTA3NjA3MzgsMjUwXSxcbls1NS43NDEwNjE5NzUxNDksMzcuNjI5MjY4NjcxMzU1LDk1MF0sXG5bNTUuNzQzNTQxMTUxNzExLDM3Ljg2NjMwNzc1NjQ0NSwxMDAwXSxcbls1NS43MzQ2NDQ4MTg5MywzNy42MzIyMjIxNDE1MDksNTAwXSxcbls1NS44MzIxMTc0MDA2MTksMzcuNjI0NzYzMDQ1NDk0LDEwMDBdLFxuWzU1Ljc2MDMzNDczMDM0MiwzNy44NjM1NDQ2NTcxNCw0MDBdLFxuWzU1Ljc1ODA0NzU3NzYxMywzNy41ODE4MjExNTg4MjksNjAwXSxcbls1NS43NDEwNDQ0MTI1OTgsMzcuNjI2NjA5NzQwMTExLDUzMF0sXG5bNTUuNzUxMTc5NDQ3NTg5LDM3Ljg4ODgxMjQ4ODgyMiw0MDBdLFxuWzU1LjY4MzAyNDkyNjA5MSwzNy44OTY2MjE0NjIzMDgsNjAwXSxcbls1NS44MDgxMzE4ODM4NSwzNy42MzU5MjgzOTQ2MjMsMjEwXSxcbls1NS42MjQ5Mzk3MjQ4MzgsMzcuNzA4NDIwNjc2Mzc2LDc1MF0sXG5bNTUuNjI0Njc1MDI2MjExLDM3LjcxNjE2Mjg2ODcxNyw1MDBdLFxuWzU1LjYwNjU2Mzk0Nzk0NSwzNy43MDg2ODcxNzU3ODgsNTAwXSxcbls1NS41OTEyMjEzMDU5NzEsMzcuNjY0NjcwNjcxNTgsNzAwXSxcbls1NS42NTQyMTgxNzExOTQsMzcuNTMzNjYyNjc4NTAxLDEwMDBdLFxuWzU1LjYxMzA1Mzg0MDE0NCwzNy43NDM4MzA3MDY2MzYsMzAwXSxcbls1NS44MTMwNjM4ODg5NDgsMzcuNDc5NjU2MjYyMTQ5LDEwMDBdLFxuWzU2LjAwODU5MTY0NjA5MSwzNy44NTE3NTYxMTAyMzgsMTAwMF0sXG5bNTUuNTY1MDYzMjY3MjI0LDM3LjU1NjczNzk1MTcyOCw2MDBdLFxuWzU1LjYxMjYyODc3ODUyMywzNy43MjAxNTI5NTYyMzksMjUwXSxcbls1NS42MDI0Mjk3MTc5MjcsMzcuNzIzMTY3ODkzNDc1LDQwMF0sXG5bNTUuOTU4NTA4MzUxMDI0LDM4LjAyOTEwNzgxNjEwOCw3OTBdLFxuWzU1LjU2NTA2MzI2NzIyNCwzNy41NTY3Mzc5NTE3MjgsMzAwXSxcbls1NS42MjIxNDg4NjYyMjksMzcuNzUxMTk3MzU4MTY3LDUwMF0sXG5bNTUuNTY1MDYzMjY3MjI0LDM3LjU1NjczNzk1MTcyOCwzNTBdLFxuWzU1LjY1ODg4NTc2NjcyMiwzNy40MzAxMzE1MzQ3NTYsNTAwXSxcbls1NS42MDk5NDM1OTM0MjYsMzcuNzIyMzI2NjU5MDQ0LDU1MF0sXG5bNTUuNzUxODYxODAyNTYyLDM3LjgxMjc2NTAwNjkxMiw0NTBdLFxuWzU1LjU1MTEwODE4MzEsMzcuNTU3MDI1Mjk1NzU1LDYwMF0sXG5bNTUuNjQwMTQzMjIxOTMsMzcuNjIxOTE2MzAwMTExLDY1MF0sXG5bNTUuNjI1NDkwODc5Njc0LDM3LjYxODY4Mjc2OTUwNCw4MDBdLFxuWzU1LjcxODI0NzU5NjAxNCwzNy43OTM0NDE0OTQwOTcsNjAwXSxcbls1NS42NTMxMTYyMTkwNjUsMzcuNjIzMDMyNjQxODQ1LDE1NV0sXG5bNTUuNjI1NDkwODc5Njc0LDM3LjYxODY4Mjc2OTUwNCw2NjBdLFxuWzU1LjU2OTIzMjU5MjMwOCwzNy40NzM0ODY0NzUxNDYsNzAwXSxcbls1NS43ODM0MDA3NDcwOCwzNy42MDA2MzgwMjI2MDMsNTAwXSxcbls1NS43NjgxOTIzOTk5MiwzNy42MjMwMjY0NzM5OTUsNTAwXSxcbls1NS43MTI4OTgwMTU3NTcsMzcuNzk1OTUyMzAyNzIsNjAwXSxcbls1NS41MDU3NjY0MDY0ODIsMzcuNTcyNjk3MzYwNDc3LDUwMF0sXG5bNTUuNzMzMTE5NDkzMzk3LDM3Ljc2NDU2NjQzOTk4NSw1MDBdLFxuWzU1LjczODg0OTE5ODY3MywzNy43ODA5NjU1Mzk3NzgsNTAwXSxcbls1NS44MDMzNDI4NzYwOTksMzcuNjE4MTk2NzgzMjI2LDI2MF0sXG5bNTUuMTQxMDYwOTE2MDUsMzcuNDUyMDIxMjk3NTg3LDI4MF0sXG5bNTUuMTQxMDYwOTE2MDUsMzcuNDUyMDIxMjk3NTg3LDMxMF0sXG5bNTUuNTQ3ODUyMjc1MTUzLDM3LjU0MjgxMzA0NzQxNiwyMDBdLFxuWzU1Ljc0OTM3NDI5NDE5OSwzNy43NjUxMjUxNTcwNjIsNTAwXSxcbls1NS43NTQzODkwMDc4OTksMzcuNzUxODEzNjc1ODAzLDUwMF0sXG5bNTUuNzUxMTUzMTkyNjM2LDM3Ljc1NDQyNDcxNjMzOCwzMDBdLFxuWzU1Ljc0MDYzNTY1OTYxMSwzNy42MDkzMDE1MTUzMjQsMTUwMF0sXG5bNTUuNzI4MDg3NTkyNTQ1LDM3Ljc1NTQ0NjMxNTM5OCw1MDBdLFxuWzU1LjU0NjEwNDIyMDgyNCwzNy41NTU1NTg3NDk5MzUsMTE0MF0sXG5bNTUuNzMxODU0MDYwODU1LDM3LjczNjQ4NzI1MTcyMywzMDBdLFxuWzU1LjcxNjEwODkwNzE1NiwzNy44MTU4OTcyMjU3MjYsMTUwXSxcbls1NS43MTM2MDkzNTU0MzcsMzcuODIxMzYzNjcwMDkyLDI1MF0sXG5bNTUuNTA4MzU4NDg2NjM4LDM3LjU2MzYxNjcyOTk3NCw1MDBdLFxuWzU1Ljg2MzU5Njc3NzYxMywzNy42ODI4MTg5ODQyNDksMjUwXSxcbls1NS43NjQ5ODI4ODAzNTIsMzcuNjM4NjI3MjE0MDc1LDMwMF0sXG5bNTUuNzY4MTIxOTgyNTE0LDM3LjY4NDAyNDcxMzQ3Niw0MDBdLFxuWzU1Ljc4MzQzMTY4NTg2LDM3LjYwMTI0ODMwNjQ4Myw3MDBdLFxuWzU1LjcxNTQ4MjAyNzg3LDM3LjgxNTg0MDEwMDg2MywzNTBdLFxuWzU1Ljg0NDMxOTM2MzM5MywzNy4zODI4OTE0ODYzOTUsMzAwXSxcbls1NS44NDE0MTU3MjY1MzQsMzcuMzgyMzkxNzI5Njg3LDc1MF0sXG5bNTUuODQ1NTQ3NDUxMTE4LDM3LjY2MTA2NzEwODA1LDMwMF0sXG5bNTUuODY3ODQ0MzUxMjI4LDM3LjcwODk0NTY3MTk0NSw1MDBdLFxuWzU1Ljg5MTQ0NzA1OTcwMSwzNy42MjE5ODA5NDE2ODgsNTAwXSxcbls1NS44NTI2MDgwMzMzNzEsMzcuMzUwMzI5MTM2NDE5LDMwMF0sXG5bNTUuODczNDA3MTM5NDI4LDM3LjYyNjI4MTI5NDAyLDcwMF0sXG5bNTUuNzAzMzIyODIzMTM2LDM3LjMyNjE3MjMwNTU5MSw0MDBdLFxuWzU1LjU0ODQxNzQxOTk5NiwzNy43NzM3ODEzMzE2MDIsNTAwXSxcbls1NS44Nzc4NzUzODc1ODQsMzcuNzIxMDQ4MDEwMTQzLDQwMF0sXG5bNTUuODYyNjQyMTk5NzUxLDM3LjY4NzI1MTg2Mjc5Miw1MDBdLFxuWzU1Ljg1MjAwNjg0NzIsMzcuNjQ3NjQyNjY5Nzg3LDQ1MF0sXG5bNTUuODYyNjQyMTk5NzUxLDM3LjY4NzI1MTg2Mjc5MiwxNTBdLFxuWzU1Ljg3NDI3MDcwNTIwNiwzNy41NDk0NTg0MTY1NjgsNzAwXSxcbls1NS43ODkyMDIxNDY4ODEsMzcuNTgzMzk2NjY1MjI5LDgwMF0sXG5bNTUuNzM5ODMzMDYxMTYsMzcuNjU2NzcyNjk4NjUyLDY0MF0sXG5bNTUuODg1MzI2NDE3ODcyLDM3LjQwNjI1ODAxNzUxNyw0MDBdLFxuWzU1Ljg4NTMyNjQxNzg3MiwzNy40MDYyNTgwMTc1MTcsMzUwXSxcbls1NS44MDI3NTI3NTc0NiwzNy41MjU5NzA1NDA3NTUsNTIwXSxcbls1NS44NTI3ODYwMjExNTIsMzcuNTY4NTk1OTY4MzMsMzAwXSxcbls1NS44ODE0NjAwMzI2MzUsMzcuNjgzODk5NTY4ODEyLDQ1MF0sXG5bNTUuODM1MjIyODM2NiwzNy41NzM3Nzk4NDMxMTEsNTUwXSxcbls1NS44NzI3NjUyODk3MDQsMzcuNzEyNTUyNDQ0MzcxLDcwMF0sXG5bNTUuOTgzNDMzNjI0MzAxLDM3LjE0Mzg1MTIxNDkxNiwzNTBdLFxuWzU1LjY2NDU4ODAyMzgzLDM3LjYzNDc4MTQzODUxNywyMDBdLFxuWzU1Ljg0Njk0NTMyMDkwNywzNy41NzM5NTY0MTMxNzMsODAwXSxcbls1NS45OTc2NDMzNjQwMDcsMzcuMjM2NTM2Njg5NzcyLDU1MF0sXG5bNTUuNzkyNDA0NjI5ODM3LDM3LjYzMjY1OTA2MTkxNyw0NTBdLFxuWzU1Ljk4NDEwNTkwMjUyNSwzNy4yMTM5OTU5MTIwMDUsNDgwXSxcbls1Ni4wMDQ3NjgyMDM2NTEsMzcuMjA2Mjc1MDkyNzA5LDUxMF0sXG5bNTUuNzY1MzQwNjU2MjgxLDM3LjU5NTcxNzc4OTc1MSwyMDAwXSxcbls1NS43NTk4MDY3MTg5NzQsMzcuNjQ3NTg3MzQyMDgzLDEwMDBdLFxuWzU1Ljg2NTYzMTU0OTY2NCwzNy41NzA2MDk5MTM0NDYsNTAwXSxcbls1NS45NzM0NzA1Nzk2NjgsMzcuMTYwMzA0MDA2NDE1LDQwMF0sXG5bNTUuNzQwMjIyNjU3MDM5LDM3LjYxMDQyMTk5MjU0NSwxMDAwXSxcbls1NS44NjcyMzQwMzM0OTcsMzcuNzA0MTgzODYwNjkyLDI1MF0sXG5bNTUuODQ1ODM1NDQ4MjE3LDM3LjU3NDMwNjQzNDY4NiwyNTBdLFxuWzU1Ljg2NjYzNzA4NjQ1NSwzNy43MDY3MDMzOTc2NDQsMzAwXSxcbls1NS42NDAwMzc5MDgwMjYsMzcuNjg3NjE1MzAxNjY3LDE1NV0sXG5bNTUuMzYxNjk3NjU1MTI4LDM3LjUyMjIwOTE2NDUxNCw0MDBdLFxuWzU2LjAwODQ3MTU3OTAwNSwzNy40NDI4OTcwNDY2MywzMDBdLFxuWzU1LjkwMTM4Nzc0MzgwNywzNy40MDI1MzczODQyMjIsNzAwXSxcbls1NS4zODMxNDE4MTE5NzEsMzcuNTM4MjM3MDA1Nzk3LDUwMF0sXG5bNTUuODk3NzgxOTExMTc2LDM3LjQwMzEzNjYxOTY3NSwzMDBdLFxuWzU1LjkwNTgwOTAzNDczOCwzNy43MDcyMDc3Njc1MzEsNTAwXSxcbls1NS44OTU0NzY2MzMxMjMsMzcuNjk3NzU4Njc0NTU3LDM1MF0sXG5bNTUuNjAxMzQyODIwNzU2LDM3LjA0NDA1NjI4NTM1OCw0MDBdLFxuWzU1LjYyMTgyNTIzMTkzMSwzNy43MTM3NTU5MzA3NjEsNDAwXSxcbls1NS45MTk3MzU0ODA5MjYsMzcuNzA4NTU4NzQ3MzU4LDQwMF0sXG5bNTUuNjAxMzQyODIwNzU2LDM3LjA0NDA1NjI4NTM1OCwyMDBdLFxuWzU1LjYwMTM0MjgyMDc1NiwzNy4wNDQwNTYyODUzNTgsMjAwXSxcbls1NS42MDEzNDI4MjA3NTYsMzcuMDQ0MDU2Mjg1MzU4LDQwMF0sXG5bNTUuODkxNDkzNDc1NjA1LDM3LjQyMDQ1ODU3MDk0OCw1MDBdLFxuWzU1LjYwMTM0MjgyMDc1NiwzNy4wNDQwNTYyODUzNTgsMjUwXSxcbls1NS44MTA2MTQ4MDUwNzYsMzcuMzM4NjA3OTk2MzkyLDU1MF0sXG5bNTUuODE0MDc1Njk4MDE5LDM3LjM0MjE1NDkxMzA4Myw0MDBdLFxuWzU1LjkwMTkzOTExMTg4NSwzNy43NDM1MDgwMjA3MTksMzAwXSxcbls1NS44MTg5NzQ2MjU0NDcsMzcuMzQ3MjYwNTk0OTE2LDM1MF0sXG5bNTUuOTE1MTYyODI2OTEsMzcuNzUxMjM5MjAwMDQ1LDkwMF0sXG5bNTUuNDMyNDE0NTM4NjI1LDM3LjU1MjI2ODM1NjA5LDUwMF0sXG5bNTUuNzQ0ODk2ODg2Nzk3LDM3LjYwMDY2ODE3OTM4NCwzNTBdLFxuWzU1LjgwMzM0Mjg3NjA5OSwzNy42MTgxOTY3ODMyMjYsMzAwXSxcbls1NS44MjUxMzU1NTE1NCwzNy42MzY1MDIyMzA5NDUsMzUwXSxcbls1NS44OTEzODgxNTE4NDcsMzcuNzEyMjQzNTEyOTMsNDAwXSxcbls1NS44MTc0MjM5ODcwMzksMzcuMzY4Nzk4ODk4ODQ1LDgwMF0sXG5bNTUuODEwNTA1MDY1Njg1LDM3LjM4MzA4ODg1OTYzOCwyMzBdLFxuWzU1LjkwNjU5NjA0MDAyNCwzNy40MDA5MjE4NjIxMDUsMzAwXSxcbls1NS43Mjc1MDA0NDEwOTIsMzcuNjA4ODU0NDc4Nzc4LDEwMDBdLFxuWzU1LjgzMTY0MzgxNTI1LDM3LjMwMTc2NTAwMjEzOSw3MDBdLFxuWzU1Ljg5MTYzMDg2MDk2NywzNy43NDg4NjUyNjM4ODksNDAwXSxcbls1NS44OTE2MzA4NjA5NjcsMzcuNzQ4ODY1MjYzODg5LDQwMF0sXG5bNTUuOTM1NDAwMzE2NjI2LDM3LjQ5NDE3MTMwODY5Niw2MDBdLFxuWzU1LjgyMjE3MjIwMzQ0OCwzNy4zNjQ0ODc5NDI3OTUsMTAwMF0sXG5bNTUuNzM0NTUyOTkzMTMxLDM3LjYwNjE5MTM3NjQzMSwyMDBdLFxuWzU1LjY1NTE0NTY3NTI5LDM3Ljk1MTUyMTA4OTkwNiw1NTBdLFxuWzU1LjkxOTE0OTA2NTgyNSwzNy43NDIxODk0NzU0MzksNjAwXSxcbls1NS44NTA0ODU2NDk5NjksMzcuNDQ1MjkyNTg5MDI2LDM1MF0sXG5bNTUuOTI0NTc3ODE1ODgsMzcuNzE3NjE2NDgyODQsNDAwXSxcbls1NS45MTUxNDY2NDAwMDYsMzYuODU3NjAxOTgxODc3LDYwMF0sXG5bNTUuOTIwMTcyNjMyNTg4LDM3LjcyMjI5MTU4Njg4NSw0MDBdLFxuWzU1Ljg1NjAxMjk4ODQ3NywzNy4xMjU5MDU2MTIwODEsNDUwXSxcbls1NS42MDA1NTg1OTU0ODEsMzcuMTQxODE3MzgxMjgyLDUwMF0sXG5bNTUuNjM2NjEwODkyMjY3LDM3LjUyMTM1Njc4NjAxNywyODBdLFxuWzU1LjYzMTM3MjQzMzk1OSwzNy44NDkwMzU3ODYxNzcsMjUwXSxcbls1NS44Mzk5NzEwNzg5NSwzNy4yOTcyNTEyMDEyOTMsNjAwXSxcbls1NS44NjU3NDczODYzNzgsMzcuMTI1MDQ2MTk3OTEyLDQ1MF0sXG5bNTUuOTExODA0NDI0MTYxLDM2LjgyNjMyMDU3NDExNCw4MDBdLFxuWzU1LjQzMjIxNTYyMjEyMSwzNy41NDMyMzMyMjQ4NTcsNTAwXSxcbls1NS45MTc4NTYxMzk1NzIsMzcuNzQ2NTc1MjQ5MzMyLDYwMF0sXG5bNTUuOTA5Mzk1MTI5NjgsMzcuNTQwNDAwNTcxMTk4LDI2MF0sXG5bNTUuODk0OTE2NDU1MTgzLDM3LjQ1MTk0MDUyNDk2MSwzMDBdLFxuWzU1LjkxOTYxMzk1NjA2MywzNy43NTI0MjU4NjgzMTQsMTAwMF0sXG5bNTUuODg0MjQxNzc5NzYyLDM3LjQyNzIyNzMxNzgxNiw4MDBdLFxuWzU1Ljc1NTI2Nzk5MDA3MiwzNy41NjAxODEzMzkyODMsMTAwMF0sXG5bNTUuNDcxNzg1OTA2NDUzLDM3LjU2MjE1MzI5NzQwNSw0NTBdLFxuWzU1LjkwNjQ1NzE2ODM1OCwzNy40MDk5NjE1ODA0NzgsNDUwXSxcbls1NS40NjYzNDAzMDQ5ODQsMzcuNTYwMDgxNzE3NjQ1LDUwMF0sXG5bNTUuNjA4MjYzNjY5MTI3LDM3LjYyMTk0MTY1MjkyOCw1MDBdLFxuWzU1LjUwMTg5ODYwMTIzOCwzNy42MTA1MDUzMTM4MTEsNTAwXSxcbls1NS44OTMzODc4NzM0NjMsMzcuNDM3NTQxODE0ODIsNTAwXSxcbls1NS43NDE3Mjg1NzQ5OTksMzcuNjI4MTU3NDc0ODU0LDUwMF0sXG5bNTUuOTQ2NjMxNjc5NTM5LDM3LjQ5OTQ1Nzk4NTAzNiw3MDBdLFxuWzU1LjQzMzEzOTMzMTYwOCwzNy41NDkyMTE2NTgzNiw0MDBdLFxuWzU1LjkwMjM5NjEzMjE3LDM3LjQ2MzU0MjY0MDE5Nyw1MDBdLFxuWzU1Ljg4NDk2MDk3MTY3OSwzNy40MzkzMzA0MzM4MTcsMTAwMF0sXG5bNTUuNzI5OTU3NDMxNzY5LDM3LjY3NDE0OTI4OTY1OCw1MDBdLFxuWzU1LjkyNjgwMjMxOTA0LDM3Ljc3MjAyMzc1MTIzMyw1MDBdLFxuWzU1Ljc1NjYzOTg0MTQ2NiwzNy42MjcxMzY2OTkxMDIsMTAwMF0sXG5bNTUuOTMwNDE4MDU3NzY1LDM3Ljc3NTA1ODk5NDgzMyw0NTBdLFxuWzU1Ljc5Mjc5Mzk3MzIwNiwzNy45NTc5NjM0ODI0MTQsNTAwXSxcbls1NS40MTkyMjk0NjA1ODYsMzcuNTQ2Njk5MDA0MTA2LDE1NV0sXG5bNTUuODkzODIyMTMxMTI3LDM3LjQ3NjMxOTQ4MDE1OSw4MDBdLFxuWzU1Ljg5Mzk3ODYwOTcxNCwzNy40NzY4ODA5MTIyMjUsNjAwXSxcbls1NS44MzU1OTMxODI0NDUsMzcuMzIyMTI1MTUwNjY5LDQwMF0sXG5bNTUuNzUwOTMwODM1NjA3LDM4LjAwNDgzMDk1NTE0NCwxMDAwXSxcbls1NS43MjgzNTY4OTcxNDEsMzguMDMwNTg1NjY2NTQ3LDUwMF0sXG5bNTUuNzYxNDgwMzM0ODgzLDM3LjYzMTU0MDcwMTEwNCw0MDBdLFxuWzU1Ljc1MDkwMjAxNTI0MiwzNy45NTgyNjE1OTAyMDcsNDUwXSxcbls1NS44MDgxNDI4NzcxMywzNy45NDMxMDcyNzA1MjUsNTAwXSxcbls1NS44MjA3Njg3OTMzNTQsMzcuOTUzNzQ0MDI5MzQxLDIwMF0sXG5bNTUuOTk2NTkxNjM1MzY0LDM3LjcyNTY0NTAwNDc1NywyMDAwXSxcbls1NS41ODY1MDQyMjcwODYsMzcuOTAwODI0NDQ5MTQyLDQwMF0sXG5bNTUuNzU5MDQ1OTQ2MjkyLDM3LjU4MDgxNjEzMDg0MSw4MDBdLFxuWzU1Ljc1MTM3ODEwOTE1MSwzNy45NTY3MTEzOTE0MDgsNDUwXSxcbls1NS43NTA5NjA5NjY3OTUsMzcuOTU0MjE0MjU4MjE2LDUwMF0sXG5bNTUuNzUxMjg1MzIwMzE2LDM3Ljk4NjY2NTI0ODc1LDcwMF0sXG5bNTUuNDIwMjY3OTYzMTA3LDM3LjU0Nzg0NzkyMzQ1MywyNjBdLFxuWzU1LjgxNzk1MDkyNzcxOSwzNy45NjcwNTIzNTA5MTQsMTUwXSxcbls1NS45MTg3MDgxNTUzOTksMzcuOTg0NTA2MjI4Nzc2LDUxMF0sXG5bNTUuNDMyMDUzNTY3OTgyLDM3LjU0NTg0ODA4NTMwNiw1MDBdLFxuWzU1LjcxMjI5Mjg3MDc5OSwzNy42MDU4NzM0MDc0NzEsNTAwXSxcbls1NS41ODIxNTg2NjgxMywzNy45MTI0NTg3MDg0MTgsMjIwXSxcbls1NS40MjAyNjc5NjMxMDcsMzcuNTQ3ODQ3OTIzNDUzLDgwMF0sXG5bNTUuOTE4ODM1MTEyODg1LDM3LjgwNjI3MjEwODc0MiwzMDBdLFxuWzU1LjkxODI0MTkzNjAwMSwzNy44MDY0MzY0MzIwMiwyNTBdLFxuWzU1LjcyNDMzMjMwNjA0MSwzNy41ODQ0Mjc4MjQ3MDgsNzAwXSxcbls1NS45MjEyNjY4OTU0OTgsMzcuOTkxODcyNzI3NjAzLDMwMF0sXG5bNTUuODA1OTgxODE3ODM5LDM3Ljg0MjUzMTU5NjU4Miw1NTBdLFxuWzU1LjgwNTk4MTgxNzgzOSwzNy44NDI1MzE1OTY1ODIsNzAwXSxcbls1NS45MjU5MTQ3OTYzNjMsMzguMDEwNDU2NTEyNzI1LDUwMF0sXG5bNTUuNzUyODM2NjM3NTU3LDM3LjY2NzkxNDc1NzkzOCwxNTAwXSxcbls1NS44MzEwODMyMTUwOTksMzcuNjI1MTU1NTg3MTM3LDM1MF0sXG5bNTUuOTI0MzkxNDEyMzMzLDM3LjgyMTQ1ODA3MTE5OSw0NTBdLFxuWzU2LjAxNzg5NTc0NTg0LDM3LjQzNDE4MjA1NzEyMSwxMDAwXSxcbls1NS45MjIzNzg2MDQ4OTMsMzcuODEzMTQ3OTIxMzc1LDQ1MF0sXG5bNTUuOTQ5Mjc1NzQ0MjIxLDM3LjgzNTQ0ODEzMDI4Myw2MDBdLFxuWzU1Ljk1NzAwODIyOTQwMiwzNy44MjE2ODU5MjUwMTcsNTAwXSxcbls1NS45MTYwNjk4MDQwODgsMzcuODQ2NTM3ODY5NTE3LDYwMF0sXG5bNTUuOTY2OTk5NzA4NDU1LDM3LjkwMzQ0OTU1MzE4NSw1MDBdLFxuWzU1LjkzMzAyMjU3OTUxNywzNy44NTYyMDcwOTY3MjUsMjUwXSxcbls1NS45MTYwNjk4MDQwODgsMzcuODQ2NTM3ODY5NTE3LDMwMF0sXG5bNTUuOTU0NTczMjM4MDIyLDM4LjA1ODQ2NDEwOTUzMywxNTVdLFxuWzU1LjkyNDUzMDY2NjkwNSwzNy44MjIyMjU4Nzc4MTksMzUwXSxcbls1NS45Njc2MDMwOTY3NDMsMzcuOTEzNDQ0NTQzNjA2LDUwMF0sXG5bNTUuOTYwODU5NTMyODg1LDM3LjkyMjU1ODM2MjMzNywzMDBdLFxuWzU1Ljc4Njk4Mzk1NTAyOCwzNy44ODI2MjUyNDg5NTcsNTYwXSxcbls1NS43ODY1ODI5MjUzMjcsMzcuODgyMDgyNzIwMjcxLDI2MF0sXG5bNTUuNDUxOTk2ODcwMDM4LDM3Ljc2MzQ2NzIzMTE2MiwzMDBdLFxuWzU1LjkyNDMyNTg0MDc3NywzNy44MjY3NTA3OTM0MDIsNDAwXSxcbls1NS43NTQ1MTY4MTA5MjcsMzcuNjA5MDc0NjUyOTMyLDc1MF0sXG5bNTUuNzY3OTUzODU0ODUxLDM3LjYwNTYzMDE5ODYxNCwxNTAwXSxcbls1NS43MzIxNzQ2ODE1MjIsMzcuNjM0NjA1OTUyMzM5LDc1MF0sXG5bNTUuNDUxOTk2ODcwMDM4LDM3Ljc2MzQ2NzIzMTE2MiwyODBdLFxuWzU1Ljk5NTgyNTA1MTg3NywzNy44Njc2OTA3MDMxMTUsMjAwXSxcbls1NS44MTgzNTA3ODQ5NjMsMzcuOTY1MzMwMDM3NTI2LDgwMF0sXG5bNTUuOTI2NTM4ODIwMTM2LDM3Ljg2MDY5MzYwNTU4OCw0MDBdLFxuWzU1LjkyNjk5NDU4NzEzMiwzNy44NjIwNjU2MTk2OTMsNzUwXSxcbls1NS45MjAyODYzODQ3MTgsMzcuOTk4MzIyNzgyNzU2LDE1MF0sXG5bNTUuOTYyNTM3MzQ2NzE0LDM3LjkzMjA1OTUwNzMwOCw1MDBdLFxuWzU1Ljg5NDY3Mjg0Nzc2MywzNy40ODAwNzcwMDcyMjIsMzAwXSxcbls1NS45NTEzNzkzMzg3MDQsMzguMDUxMDgxNjkxOTkyLDI1MF0sXG5bNTUuNjk1ODgwMTI0NTc2LDM3Ljg2MDY2NTkxNzQwMiw1NTBdLFxuWzU1LjYxOTcyNzkzODc0MSwzNy45NjM2MzM1ODk2NTQsNDIwXSxcbls1NS45MjYzMzczNDYzMTYsMzcuODU5NjUyOTcyMDYzLDM1MF0sXG5bNTUuNjcxMjQ5MDM0ODI3LDM3Ljk0NDU1MDg5NjQwNSw0MDBdLFxuWzU1LjY3NzA0MDkxMTY2OCwzNy44OTUyMzc4MTgwMTksNzAwXSxcbls1NS45MjUzNzA0NTA3OCwzNy44NjAwMzc3ODExOTQsNDUwXSxcbls1NS42Njg4NzA0NjkyNTQsMzcuOTUzMDUyOTU4MDQyLDQ1MF0sXG5bNTUuNjY2NDQ5MzQ1NDMxLDM3Ljk1MDkzMzgxODksNDUwXSxcbls1NS45MjU3MzQ2MTIxOTUsMzcuODU4NTc5MDExMTQ2LDMwMF0sXG5bNTUuOTc2OTQ5MjQyODM1LDM3LjgxOTE0NDYyODkxNiw2MDBdLFxuWzU1Ljc2MjMyMDQ0NzI0OCwzNy41OTU2ODU0NTgxNTUsNTAwXSxcbls1NS42ODk4OTQxOTUxODIsMzcuODUyMTY5NzAxNDIyLDcwMF0sXG5bNTUuOTE0MzM1MzMyMzQ1LDM3Ljg2NjU5NzgyNDI1OCwzMDBdLFxuWzU1LjY4Mjk1MDA1NTc3NSwzNy44OTkzMTI0NzQ1NTMsMzUwXSxcbls1NS40MzMyMTY3MzE1MDgsMzcuNzI3ODA1Njc1NDkyLDcyMF0sXG5bNTUuODI3MTMzMjMyNDMsMzcuNDM2NDEwMDU1NDkzLDUwMF0sXG5bNTUuNzQ3MTU3MDYxNzE1LDM3Ljk2MjM3NDg4NjM0NSw0NTBdLFxuWzU1LjkxMzI5MzMxNDYwOCwzNy44MTQ0NDA5NzQ1MzcsMjAwXSxcbls1NS44MjY2OTY1NTkzNDUsMzcuNDQ1MjkxMTk0NzM5LDM1MF0sXG5bNTUuODI2MjgxODEwNzI5LDM3LjQzNzQ4ODI5Nzg2NCwzNTBdLFxuWzU1LjE2MTUyMDA1ODIxNywzNy40NjgxMTUzNDEyNDgsNDAwXSxcbls1NS45MjgxOTU5MjcxOTYsMzcuODU4MDY5MjI4NTk2LDI1MF0sXG5bNTUuOTI2NzgxMjE4MDYyLDM3Ljg1OTQ2NjEyMzk2Nyw2MDBdLFxuWzU1Ljg1NzE2NTk3OTY0LDM3LjQzMTkwMzA1NDcyNCw1MDBdLFxuWzU1Ljg1NzE2NTk3OTY0LDM3LjQzMTkwMzA1NDcyNCw2MDBdLFxuWzU1LjgzODE5MTM0NTAzOCwzNy40MTcyOTI0NzcxMTYsNjUwXSxcbls1NS44NDQyODE4MTk3MiwzNy4zOTg0NjcxMDU3NjksNDAwXSxcbls1NS44NTc3MzQzMzQyMTQsMzcuNDE5MDk3MDM2NDY3LDYwMF0sXG5bNTUuNDE2Njg5ODU4OTcsMzcuODM1NjQ4NzQyMjgzLDY1MF0sXG5bNTUuNDE2Njg5ODU4OTcsMzcuODM1NjQ4NzQyMjgzLDc5MF0sXG5bNTUuNjkyMjI0NjAyODE4LDM3Ljg5NjQyOTE3OTgzNywyMDBdLFxuWzU1LjY4MTg0MjUzODQ1LDM3Ljg5NjQ0MDY3NjQ1MSw1MDBdLFxuWzU1Ljg1MDQ4NTY0OTk2OSwzNy40NDUyOTI1ODkwMjYsNDAwXSxcbls1NS42NzMzOTcxMzQzMzksMzcuNDc5Njk0NjA4NjQxLDMwMF0sXG5bNTUuNjc2NzIyNzMwMDc2LDM3LjQ5NjE5MDkxNTI2NSwyNTBdLFxuWzU1LjY3ODExNTg5MDA5NSwzNy40OTU4ODgyNDMzODksMTAwMF0sXG5bNTUuNzU5NzEzMzg2ODM2LDM3LjY0NTI1NzEwNDQxNSw1MDBdLFxuWzU1LjE2NTIzNjYxNDQ5NywzNy40Njc5MTgzNjE0MjksODAwXSxcbls1NS4xNjUyMzY2MTQ0OTcsMzcuNDY3OTE4MzYxNDI5LDUwMF0sXG5bNTUuNzU5MTQwNDg4NjIxLDM3LjY0NTc2MDE2NDc4LDQwMF0sXG5bNTUuNjk3OTI1MTkxMjA5LDM3LjU2MDQ5Nzk1MTI1Niw0NTBdLFxuWzU1LjcxMjU3ODYxMjk0NiwzNy41NTk2OTMxMDM1NDUsNTAwXSxcbls1NS43NTk2MzI4NzczNjUsMzcuNTg0NDk2ODAzNTg4LDUwMF0sXG5bNTUuNzcwNjk1OTM2OTg5LDM3LjQwMzE2NzE0MTkzNSw1MDBdLFxuWzU1LjY0NjQ4NTg5NDgwNCwzNy43MTU1MjMyNjQxMDgsMzAwXSxcbls1NS41ODUyNzE3MDU1MTgsMzcuNzI0ODkyODUzMTMzLDY1MF0sXG5bNTUuNzczMjIzOTc5NjE2LDM3LjYxOTQ3MDI0MDIsNjAwXSxcbls1NS43NDExNDcyODU3ODYsMzcuNDE3ODExNTA2MzY1LDUwMF0sXG5bNTUuNzQwOTYxOTIwOTIyLDM3LjQxNTQ4NDgxODg1OCwzMDBdLFxuWzU1Ljc0MDU5MTEwODAzNiwzNy40MTUyMzg5MTk0MDIsMzUwXSxcbls1NS43NzE1ODczMTg3MzIsMzcuNTkyODA1NzIzNDYzLDk5MF0sXG5bNTUuNzcxNTAzOTEyMjM1LDM3LjUxODY2OTIzODU0NCw0MDBdLFxuWzU1Ljc5MTQxMjkyMjA0OCwzNy41NTYwMTE3MDA3NDEsMTU1XSxcbls1NS43NzY3ODg5MzcwOCwzNy40NzE5NzcxNDQ5NDMsODAwXSxcbls1NS43NzgzMTI0NDgzMTcsMzcuNTIxMzcxNzEwMzg5LDQwMF0sXG5bNTUuNzU3OTY1NDY4NDc5LDM3LjU5NzY4ODE4Njc3MywxMDAwXSxcbls1NS43OTM0MDU0NzM0NDYsMzcuNDkyNTExNTI0NywxMjBdLFxuWzU1Ljc5NDc2NjAzNTUwNSwzNy40OTE4MzkyNDQ1NDgsNTYwXSxcbls1NS43MzE3NjAyNzI2NTgsMzcuNDg3Mzc0MjQ4MDM2LDEwMDBdLFxuWzU1LjczNDc1MTg5NjM2MSwzNy42NDIyODAwNjQxOSw1MDBdLFxuWzU1Ljc3NzE4NzYzMjc5MSwzNy41MjU1OTE3MDExNDEsMzAwXSxcbls1NS43MzE3NjAyNzI2NTgsMzcuNDg3Mzc0MjQ4MDM2LDE1MDBdLFxuWzU1LjgwOTQ3ODQ3ODAwMiwzNy40NjQ0ODc5MjE5MzgsMzAwXSxcbls1NS43OTk3NDc1MjAyMDMsMzcuNDgyOTgzNDA1MTgzLDIwMF0sXG5bNTUuNzk5NzQ3NTIwMjAzLDM3LjQ4Mjk4MzQwNTE4MywyODBdLFxuWzU1Ljc3ODcwNzI5MTUyLDM3LjY2NTMxMjAyNzkxMywzMDBdLFxuWzU1LjYxMDE5MjA2MzU2MSwzNy4zMzI1ODE3OTQ1OTEsMzcwXSxcbls1NS43NDkyMTg3MTk0OCwzNy41NDAwMDYyNDQ4OTEsMzAwXSxcbls1NS43NjYyNDE4MTAwMDcsMzcuNjA0MTUxMzg4Nzk2LDMwMF0sXG5bNTUuODEwOTU1MjAzNzUxLDM3LjQ3NjU5Njc4NzcyMSw1MDBdLFxuWzU1Ljc0MTc4OTI5NDQ3MSwzNy41MjU0ODk1MzAzMDgsMzUwXSxcbls1NS43NzYzMDg3NTE4NzQsMzcuNTQxNjI3NDMwNjgzLDUwMF0sXG5bNTUuODA0MzY1Mzk2NzM0LDM3LjQ5OTAzMDY2NDMsMzAwXSxcbls1NS43OTkxMzA1NTQ4MDIsMzcuNTA2NjAxNTI4OTA2LDM1MF0sXG5bNTUuODAxOTQxNjk2OTQxLDM3LjUzMTk0NTk0MTYsNTAwXSxcbls1NS44MDA3OTk5NjA2NDgsMzcuNTU0ODc1OTg3MTk1LDc1MF0sXG5bNTUuODA3ODg3MDY1NzQ0LDM3LjU3OTA4ODQxMTgwOCw0NTBdLFxuWzU1LjgwNzc4OTIzNDkzOCwzNy41NzgzNjc4NjQ0NTQsMzUwXSxcbls1NS44MDc3ODkyMzQ5MzgsMzcuNTc4MzY3ODY0NDU0LDQ1MF0sXG5bNTUuNzg0ODUwMjEwNjQxLDM3LjU5NTQyNzk0MjE0MSw0MDBdLFxuWzU1Ljc5OTkwMTAzNTEwNCwzNy41MjY0OTUzMTU3MzQsMTAwMF0sXG5bNTUuODU1MjAyNjEwMTg0LDM3LjQ3ODM5MDk3NjY2NCwyNTBdLFxuWzU1LjgyMDM4OTE0OTc0NSwzNy40OTkzMTA4MDkyOTYsMzUwXSxcbls1NS44MjAzODkxNDk3NDUsMzcuNDk5MzEwODA5Mjk2LDE1NV0sXG5bNTUuODIwMzg5MTQ5NzQ1LDM3LjQ5OTMxMDgwOTI5NiwzMDBdLFxuWzU1Ljg1NDA5MTc5MTQ1NywzNy40NzYxNTI4Nzc5MzUsNDAwXSxcbls1NS43NDEyOTMzNzIyNDMsMzcuNjU2Mjc1ODc1Mzk0LDE1NV0sXG5bNTUuODAwNDI0MjgxMjYyLDM3LjU3NDc2NTc1MjMzOCwxMDAwXSxcbls1NS44NzEwNzI4Mzc0MTgsMzcuNDYwNTMwMTQ0NDEzLDE1NV0sXG5bNTUuODg0Njk1MjIwMTQ4LDM3LjUxNzUyNzQzMTM0LDM1MF0sXG5bNTUuODA1NzQxMjE5MTg0LDM3LjU3MTc3OTUzMTAxOCw0MDBdLFxuWzU1Ljg1NjA2NjQzMDk0MywzNy41MjEyNzMxMTg5MzMsNDAwXSxcbls1NS42NDIzMDAzNDMyMiwzNy41MDcwMTc4NDM3ODMsNDUwXSxcbls1NS44Mzk2NjM5MjE0NywzNy40ODY2OTk1MDU3MjksMTU1XSxcbls1NS44Mzk2NjM5MjE0NywzNy40ODY2OTk1MDU3MjksMjYwXSxcbls1NS44MjM4MDcxNDAxMjksMzYuOTE5MTE4NDIxNzY5LDUwMF0sXG5bNTUuNzY0MDAyMDI4NDUsMzcuNTMzMzczMTMxMjc5LDUwMF0sXG5bNTUuNzA1OTQ3ODE0NzMyLDM3LjU4NjI5NTE1NTcyMiwyMDBdLFxuWzU1LjgzODk5MzE2NTk4MiwzNy40ODY3ODU5MjgzNzgsNzAwXSxcbls1NS43MDc2ODUwMzMyOTMsMzcuNTg0NDkwNzYwNzM4LDE1NV0sXG5bNTUuODU2MjE3Mzk1MTA1LDM3LjQ3NTQ3NjI5ODI5OCwzMDBdLFxuWzU1Ljg2MjcxODk5MzIyMSwzNy40MzUwMzQzODc3MzMsMzAwXSxcbls1NS44NTU1Mjg4NTA0NzUsMzcuNDc1Nzk0NTEyODk3LDM1MF0sXG5bNTUuNjkzNTE3MzU3MDYyLDM3LjU1NzQxMzAxNjkyNCwzMDBdLFxuWzU1LjY3NTUwNTQ2MTk4LDM3Ljg4MzEwMjA0OTIzMSw1NzBdLFxuWzU1LjY2MjY1OTM4MzM3NCwzNy41NTQ4OTA2ODA1NzUsMTU1XSxcbls1NS42NjM4MDAwMjE3NTIsMzcuNTExMDkwMjc3MzA3LDMwMF0sXG5bNTUuNjY5Nzg5MjY0NTQ3LDM3LjU1MjIwMDAzNjE5NSw0MDBdLFxuWzU1Ljc2NjI0MjUxNzQ3MiwzNy41MjY1NTk1NTkwOTEsNDUwXSxcbls1NS45MTU5NDY2NDE5OTIsMzcuODY4NTIyMDU2NzAyLDUxMF0sXG5bNTUuODUwMTUxNTYyOTk1LDM3LjY0NDk1Mzg1NjU2Miw1MTBdLFxuWzU1Ljk2MzY1NDcyNjA0MSwzNy40MTUwNzA2NzE5NCw1MTBdLFxuWzU1LjY3OTA1ODE2MDYxNiwzNy41NjQ4MzMyNDg5MDcsMjUwXSxcbls1NS42NDAyNTc0MDIxNjUsMzcuNjA4Mzc4NjAyODUzLDI2MF0sXG5bNTUuNjI2MDc3Njc1NDA4LDM3LjQ4NzA0MDI4ODYxOCw2MDBdLFxuWzU1LjY2OTk0MDU3MjYyNSwzNy42MzI2ODI3MjMxMjksMzUwXSxcbls1NS42NTE5Nzg5NjQ4OTMsMzcuNTgwNzYyODQ2ODExLDUwMF0sXG5bNTUuNjc1OTI2NzYwMDU4LDM3LjYyNTEwNTY4MDYxOSwyNTBdLFxuWzU1LjYzODk0MDA2MTE1NSwzNy42MDM4OTIwMzUyNzIsNTAwXSxcbls1NS42ODE0OTA4OTA0NzEsMzcuNjc1ODczODE5MDQ5LDM1MF0sXG5bNTUuNjg0ODk0NjA4MTI4LDM3LjY4NzUxMjc0NTI2Myw3MDBdLFxuWzU1LjY4MzA2NTYyOTY3OCwzNy42ODA5ODkyNzM5NzksNTAwXSxcbls1NS42NzgxODQ4MjcwNzEsMzcuNjk3MzU3ODExNzA1LDI4MF0sXG5bNTUuODQ1NTQ3NDUxMTE4LDM3LjY2MTA2NzEwODA1LDI1MF0sXG5bNTUuNjExMDgzNjMwMDcsMzcuNjA2ODYxODA2MTcyLDUwMF0sXG5bNTUuNjIyNDU2MTIwOTM4LDM3LjcwNTIwMjEzNjE4NSwxMDAwXSxcbls1NS42MjI0NTYxMjA5MzgsMzcuNzA1MjAyMTM2MTg1LDcwMF0sXG5bNTUuNzAzOTQ1NDg0MjIsMzcuNjg2NTU2NTkyMjA0LDM1MF0sXG5bNTUuNzEwMzQ1ODQwNTUxLDM3LjY2ODEwMDI3ODcyOSw0MDBdLFxuWzU1LjcxMDM0NTg0MDU1MSwzNy42NjgxMDAyNzg3MjksMzAwXSxcbls1NS43MTAwMjE1ODQ4NiwzNy42NTU1NzgzMTE5MjcsMTAwMF0sXG5bNTUuNzA5MTI4NjUxNTg5LDM3LjYyMDc2ODAzMTkwNywyNjBdLFxuWzU1LjcyNzI2MzEwMDY1MywzNy42MTMyNzIxODQyMjYsMzUwXSxcbls1NS43MjI4MDg1ODY1MzQsMzcuNjIwNTAyMzg5MzksMzUwXSxcbls1NS43MjIyNzY1NjM3MDUsMzcuNjIxNTcxOTczNDg1LDUwMF0sXG5bNTUuNzIxOTE5Nzg0NDEzLDM3LjY0NjI3ODA2NDU5OCwzMDBdLFxuWzU1LjcxNjkwNDc5MjUxNiwzNy42NDQyMjI5ODYwNTcsMjUwXSxcbls1NS43Mjg2MTYzODQyMDksMzcuNjM5OTY4MjQ3MTk3LDI4MF0sXG5bNTUuNzI4MzQ5ODI5MzY0LDM3LjYxNDk0NjEzOTU5NSwxNjAwXSxcbls1NS43MjgwNjU3MDAxMjEsMzcuNjQ5NDQwMTQ5NDAyLDM1MF0sXG5bNTUuNzI4NzA1NjAyNjg0LDM3LjY0NzkxMTc4OTc2NSwzNTBdLFxuWzU1Ljc4MzQwMDc0NzA4LDM3LjYwMDYzODAyMjYwMywzNTBdLFxuWzU1Ljc1NzIxODc3OTE5NCwzNy42NTkxMzM2MTkxNDgsMzAwXSxcbls1NS44MjMyODQzMzMzNTYsMzcuNDk3NzAzMTE1MjY3LDMwMF0sXG5bNTUuNjYzODAwMDIxNzUyLDM3LjUxMTA5MDI3NzMwNywzMDBdLFxuWzU1LjcwODcxNDExNDgxMiwzNy42MjIwODEwNzIyNjEsMzUwXSxcbls1NS42NjM4MDAwMjE3NTIsMzcuNTExMDkwMjc3MzA3LDI1MF0sXG5bNTUuNjYzODAwMDIxNzUyLDM3LjUxMTA5MDI3NzMwNywzNTBdLFxuWzU1LjY2MzgwMDAyMTc1MiwzNy41MTEwOTAyNzczMDcsMjAwXSxcbls1NS42NjM4MDAwMjE3NTIsMzcuNTExMDkwMjc3MzA3LDQwMF0sXG5bNTUuNzQ4NzIzMzYzMjUzLDM3LjU4MTY5NTM1ODY1MywxODBdLFxuWzU1Ljc1ODY2NDExNzM2NSwzNy41NTcxMzI3ODc4Niw3MDBdLFxuWzU1Ljc2MTQwNTU2OTIwOSwzNy41NTE1ODU3ODE4MywxMDAwXSxcbls1NS42MjM5NzA0MzE5NDMsMzcuNjA4ODU5NTQ0ODk3LDE1NV0sXG5bNTUuNzYxMTg5NjIxNDM4LDM3LjU3OTQ3NzYwMjQ3NCwyMDBdLFxuWzU1Ljc3MTE4Nzc3Njg0MywzNy41OTA3NjU0MDI1NywzNTBdLFxuWzU1LjcwNTc0NTU5NjI1LDM3LjY4NjExODcwNzY0MSwyMDBdLFxuWzU1Ljc3ODM4MjM4MzQ0NywzNy41ODQ3Njc2MDY4OTgsMzAwXSxcbls1NS43NzgzODIzODM0NDcsMzcuNTg0NzY3NjA2ODk4LDI1MF0sXG5bNTUuNzg3NTU3MjQ4Njk1LDM3LjYzNTg5ODQyOTIwNyw3NTBdLFxuWzU1Ljc4NDQ5NjgzOTU0NCwzNy41OTc1MDMwODk0MjMsMTAwMF0sXG5bNTUuNzc0MzYyNjIwNzEsMzcuNjE4NTc0MDE1Mzk3LDQwMF0sXG5bNTUuNzkxMTAwMjM4Mjg4LDM3LjU5MDU4MzMyMDg1LDQ1MF0sXG5bNTUuNzc4NjQ4NTg0MTM1LDM3LjU4MTkxNjEzNDU3NCw1MDBdLFxuWzU1Ljc4OTk1MTc1NjIxMywzNy42MzQzODA5MDY5MTUsNDUwXSxcbls1NS43ODgxNDE2MjAyNDMsMzcuNjEyNTk0NTA5NDIsMTU1XSxcbls1NS43NzIzNDY1NDcxNDMsMzcuNjc5NTgzMzIwMDA2LDM1MF0sXG5bNTUuNzc1MDM1OTgwMzExLDM3LjY1NzIwODUxNDY5OSwyODBdLFxuWzU1Ljc3NDExMzQ5MzE3NCwzNy42NTQ5MTAzNzMwNTUsNzAwXSxcbls1NS43NzYxMzU1MDkzOTEsMzcuNjcwMzc1NDA5MDE0LDQwMF0sXG5bNTUuNzc0MTEzNDkzMTc0LDM3LjY1NDkxMDM3MzA1NSw3MDBdLFxuWzU1Ljc3NDExMzQ5MzE3NCwzNy42NTQ5MTAzNzMwNTUsNTAwXSxcbls1NS43NzQxMTM0OTMxNzQsMzcuNjU0OTEwMzczMDU1LDUwMF0sXG5bNTUuNzc0MTEzNDkzMTc0LDM3LjY1NDkxMDM3MzA1NSw0NTBdLFxuWzU1Ljc3NDExMzQ5MzE3NCwzNy42NTQ5MTAzNzMwNTUsMzUwXSxcbls1NS43NzQxMTM0OTMxNzQsMzcuNjU0OTEwMzczMDU1LDQwMF0sXG5bNTUuNzc0MTEzNDkzMTc0LDM3LjY1NDkxMDM3MzA1NSw0MDBdLFxuWzU1LjczMjE5NjcxMjQ3MywzNy42MTcxNzQwODQ4NTgsNTAwXSxcbls1NS43NDQ1NjQ2MDYzNDEsMzcuNTY1NTM1MTUzMTQ0LDMwMF0sXG5bNTUuNzc0MTEzNDkzMTc0LDM3LjY1NDkxMDM3MzA1NSwzNTBdLFxuWzU1Ljc3MjIxNjM4MTgxMiwzNy42NDc4ODc5NDIzMzUsMzAwXSxcbls1NS43NjI1MTMzOTQ2NDksMzcuNjU3Njg4MTkzMjExLDEwMDBdLFxuWzU1LjcwOTYzMjI0MzA3OSwzNy44OTU4ODY4MDI3MjksMTYwXSxcbls1NS43NzIxMjUyMjcxNzcsMzcuNjUwNjk3ODI0MDIzLDUwMF0sXG5bNTUuNzcxNDczMjM3NTkxLDM3LjY0OTM3Njc5MDc5MiwzNTBdLFxuWzU1Ljc0NzQyNzY3ODQ1MywzNy42NjA2OTk0MTU3NjUsNjAwXSxcbls1NS44NTA5ODQ1NzU1OTksMzcuNTk3NDU0NDUwOTQ4LDE1NV0sXG5bNTUuNzM4NDYwNDY5ODQsMzcuNjk2MDkwMjAzNTI5LDUwMF0sXG5bNTUuNzQ2OTIyMDMxMzI5LDM3LjY3OTUwNTI4MjgzNCw4MjBdLFxuWzU1Ljc1NDIwMDY0ODkyMywzNy43MTY1MjU0MDI3MDEsNDgwXSxcbls1NS43NTkxMzA0ODQ5MTIsMzcuNDA5MjkxNjY1NjE2LDM1MF0sXG5bNTUuNzU0OTIxMjA4NjIsMzcuNjYxNzk4MzU0NjQ3LDQ1MF0sXG5bNTUuNzM3MzU2MzE1ODcsMzcuNjkzMDM1MTU2Mjk4LDM1MF0sXG5bNTUuNzU3MDcwNjc5ODI4LDM3LjY2MDg3MTg2NzkyMiwzMDBdLFxuWzU1LjU4MjE1ODY2ODEzLDM3LjkxMjQ1ODcwODQxOCwzNTBdLFxuWzU1Ljc1ODQzNTQ2NTE5OSwzNy42Mzg5NjMyMjQ4OTUsMTAwMF0sXG5bNTUuNzM2Njg0MDQ3MTI5LDM3LjY2MTIwNDY3MTMwNywyMDBdLFxuWzU1LjcyMzQ3MjYxNDY5OSwzNy42MTAxNTAxMzgxOTMsMjUwXSxcbls1NS43NDc1NTA2Mzk0NzcsMzcuNTM5NTcyODk5Nzc0LDc1MF0sXG5bNTUuNzYyMjY4NDQ0Njk1LDM3LjYyMjIwNDU2NDM3LDgyMF0sXG5bNTUuNTY5NzY3MDEyNTEsMzcuNTc5MDYzOTMzNjkzLDM1MF0sXG5bNTUuNzI0MDk0MzgyODA3LDM3LjY4NzA4NDQ3NzY3NiwxNjBdLFxuWzU1Ljc2MTI3NDA2NjIwNCwzNy42MDU4NTc0NDUzMDksNzAwXSxcbls1NS43MjI4NzQ3NzU1NTUsMzcuNjg4OTg2MDExODM3LDI1MF0sXG5bNTUuNzIzODc5MDM0OTk3LDM3LjY5MDExMTAxMzg3MiwzMjBdLFxuWzU1LjM3MzQ4MDc3MDk0NSwzNy4yMDY0NzA1NTQ0OTIsNzUwXSxcbls1NS43NTE4NjE4MDI1NjIsMzcuODEyNzY1MDA2OTEyLDQwMF0sXG5bNTUuNzUwMjA1ODAzNTUyLDM3LjU5NDc3NzU5MzA2Niw0MDBdLFxuWzU1Ljc1MDQxMDc2NTA0MiwzNy41OTUzNDIwNjQ4NzksNDAwXSxcbls1NS43NDAzNDY4OTQzMTYsMzcuNzA1NTc4NTE5NDI5LDgzMF0sXG5bNTUuNzQ0NDI4NDA1MjM3LDM3LjYyOTg0ODQwMzYyNywzMDBdLFxuWzU1Ljc0NDQyODQwNTIzNywzNy42Mjk4NDg0MDM2MjcsNDAwXSxcbls1NS43NDQ0Mjg0MDUyMzcsMzcuNjI5ODQ4NDAzNjI3LDI1MF0sXG5bNTUuNzE4NjE4MjE1NTE2LDM3LjY4MTEyMzg4ODc5NiwyNTBdLFxuWzU1LjcxODYxODIxNTUxNiwzNy42ODExMjM4ODg3OTYsMTU1XSxcbls1NS43NDQ0Mjg0MDUyMzcsMzcuNjI5ODQ4NDAzNjI3LDQ1MF0sXG5bNTUuNzE4NjE4MjE1NTE2LDM3LjY4MTEyMzg4ODc5NiwyODBdLFxuWzU1LjcxODYxODIxNTUxNiwzNy42ODExMjM4ODg3OTYsMzIwXSxcbls1NS43MTg2MTgyMTU1MTYsMzcuNjgxMTIzODg4Nzk2LDM4MF0sXG5bNTUuNzE4NjE4MjE1NTE2LDM3LjY4MTEyMzg4ODc5Niw0MzBdLFxuWzU1LjczNjM1OTgwMzEwMSwzNy42MTkxMDA0NjQ3OTMsMzAwXSxcbls1NS43NTU5OTIxMzc3OTUsMzcuNjIxMTAzMzgzNzE2LDMyMF0sXG5bNTUuMzQzNDUyNTQ1NjgxLDM3LjE3Mjg0MTkxMDU3NSwxMDAwXSxcbls1NS43MzYzNTk4MDMxMDEsMzcuNjE5MTAwNDY0NzkzLDMwMF0sXG5bNTUuNjMyNTc0ODE3MDQ4LDM3LjY1ODczOTMwOTYyOSwzNTBdLFxuWzU1Ljc1MzEwODg2MDc1MSwzNy41ODg5Nzc1MTQ5NjksNTAwXSxcbls1NS42NDU2NDA5Njk5MzIsMzcuNzE5NDQwMzg0Njk4LDcwMF0sXG5bNTUuNzcxMjY5ODMwOTA0LDM3LjYyNTQ1OTU0MjgxOSwxMDAwXSxcbls1NS43OTg3MTYxNzQ2LDM3LjUzMjE5NjY5NDYzLDM1MF0sXG5bNTUuNzk0ODI4NTgwNDUsMzcuODA4OTY2OTMzNzU5LDUwMF0sXG5bNTUuNjA2ODA5NTMwMzY5LDM3LjczNDEwMzgwOTAxMywxNTVdLFxuWzU1LjYyMDUwNDQwMzM4MSwzNy42Njg4NTM1NDQxNjUsNDAwXSxcbls1NS42NDc3MzgwNzMyNTUsMzcuNzQxODU4ODA3MTU3LDYwMF0sXG5bNTUuNjU4Njc2ODI2ODY1LDM3LjczOTc1NTE1MTkyNywyNjBdLFxuWzU1Ljg0NTU0NzQ1MTExOCwzNy42NjEwNjcxMDgwNSwzMDBdLFxuWzU1LjY1NDIwNTg4NjA1MywzNy42NDYwMjI4MDk5MDQsMjgwXSxcbls1NS42NzIyMzc3MzI3MjcsMzcuNzQ0Njk4NTU3NjMsMTUwMF0sXG5bNTUuNzU5MTMwNDg0OTEyLDM3LjQwOTI5MTY2NTYxNiwxMDAwXSxcbls1NS43MDQwMjM5NTY5OTEsMzcuNzcxNDg5ODU5NjA3LDI1MF0sXG5bNTUuNjU0MzIxODUxNzEzLDM3LjcwMjIyNTk4NDU0Niw0MDBdLFxuWzU1LjczNjM1OTgwMzEwMSwzNy42MTkxMDA0NjQ3OTMsMzAwXSxcbls1NS44MTkxNTM3NTUwNTMsMzcuMzM4Mzc5Mjg3MTIyLDI1MF0sXG5bNTUuNzU3Mzk5MjM3NzcxLDM3LjYzNDAzNjcyMDc4Myw0NTBdLFxuWzU1LjY3OTM0Njk2NjM0OSwzNy43MzkyOTQ2MjQzMDksMjUwXSxcbls1NS42ODQyOTg3MzEyMTcsMzcuNzUwMzM0NjU1Njg4LDM1MF0sXG5bNTUuNjg0Mjk4NzMxMjE3LDM3Ljc1MDMzNDY1NTY4OCw4MDBdLFxuWzU1LjY3MTEzMzY4NjYzLDM3Ljc2NTcyNTk0NjcyOSwzMDBdLFxuWzU1LjY2ODE4MjAyMDc3MSwzNy43Njc0Mjc3MTU4ODgsMzAwXSxcbls1NS42NzE1NzM3MDEwNDksMzcuNzczMDQ1MDA4ODcsNjUwXSxcbls1NS42ODEwMzQxNDU4MzgsMzcuNzYwMzY4NjAxNDQ5LDIwMF0sXG5bNTUuNjQwMTQzMjIxOTMsMzcuNjIxOTE2MzAwMTExLDI2MF0sXG5bNTUuNzQ5NjI0ODUwNTIsMzcuNzMxMjM4MTMzNTE5LDQwMF0sXG5bNTUuODI2MDc4MzY3NTk5LDM3LjM4ODQ0MzkxMjM2NSw4MjBdLFxuWzU1Ljk3NTQ4NzkzNDI1NCwzNy4xNjExMzYxODc1NTEsNDUwXSxcbls1NS44OTY4Nzk0ODU4NzUsMzcuMzk2Nzk0Nzc5MzI1LDc1MF0sXG5bNTUuNTc0ODgzMjM5OTY5LDM3LjU4MDEwMjYwMzMyMiwzMDBdLFxuWzU1Ljg0NjkwODA0Nzg0OSwzNy4zNDYzOTk1MDgzODEsNzAwXSxcbls1NS41NzQ4ODMyMzk5NjksMzcuNTgwMTAyNjAzMzIyLDM1MF0sXG5bNTUuNTc3MzY2Mzg4ODYsMzcuNTcxMDgzNTI3OTQxLDYwMF0sXG5bNTYuMDAxOTYwMjM0MjI3LDM3LjIxMDgwNzIxNzExLDk5MF0sXG5bNTUuNTY2NDA2NjkxNDgyLDM3LjU3MzY0Mjk5MTI4LDE1NV0sXG5bNTUuNzE3NzEwOTQwODgxLDM3Ljc5MjQ4MDc0ODk5LDQ1MF0sXG5bNTUuNzE3NDk3MTYzNDg5LDM3Ljc5MzY3ODkwMzEwMywzNTBdLFxuWzU1LjcxNTAwODA3NTc0OCwzNy43OTE0NDU0MDA1MTUsMjUwXSxcbls1NS43NTY4OTUzNzY5NzQsMzcuNzA3ODUyOTE3ODgzLDQwMF0sXG5bNTUuNzE2OTg1MTUwNDkxLDM3Ljc5MzM4NzYwNTg5LDI1MF0sXG5bNTUuNzE2OTU1MTA3ODY2LDM3Ljc5MjIzMjY0OTA0MywyNTBdLFxuWzU1LjcxNjk4NTE1MDQ5MSwzNy43OTMzODc2MDU4OSwyNTBdLFxuWzU1Ljc1ODg3Nzc2ODkwMSwzNy43MDg5MTc4ODY5NjIsNTUwXSxcbls1NS43NTYyNjU2NjgxNTgsMzcuNzA0MTc4NTEwNTY0LDQwMF0sXG5bNTUuNzU1NzcwNjI3Mzg2LDM3LjcwNDg5NTExMjM3Nyw0MDBdLFxuWzU1LjcxNjg5OTcwNzM0NywzNy43OTQxNzYwMDM3NzgsNDUwXSxcbls1NS43NTQ4MjY5Nzg3ODMsMzcuNzE2Nzc0NjA2OTA4LDMwMF0sXG5bNTUuNzMxMTc1OTc0MzQ4LDM3Ljc1MzU3OTQzMTQ1Niw3NTBdLFxuWzU1LjcxODEyNTczMTc5MSwzNy43ODM5Mjc0MzE3OTksNjAwXSxcbls1NS43NTA0ODgxMTI5OTMsMzcuODE2MjU4MjI1MTU2LDMwMF0sXG5bNTUuNzUzNzE3MDk0NjMsMzcuODE3NjM0MzIyNzY5LDI1MF0sXG5bNTUuNzQ3Nzk2Mjc4NzU5LDM3Ljg1NDMyMzUzMzMwNSw0MDBdLFxuWzU1LjU4MzAxMjYyMDEyNSwzNy41OTUyNDc2NDUzNTcsMjYwXSxcbls1NS43NzkzNzUzNzEwMDQsMzcuNzMzOTQ2NDg3NTI4LDMwMF0sXG5bNTUuNzg5MzQwNDQwMzU3LDM3LjgxOTAzMTQyOTYxLDQ1MF0sXG5bNTUuNzkxNzkzMzExNTQyLDM3Ljc4NzE0NTY1Nzg2MSwyNjBdLFxuWzU1LjgxMDYyNTE1NTE1NiwzNy43OTQ5MzYyMDg0MzQsMTU1XSxcbls1NS42OTU0MzY1ODQ0MywzNy45MDY5MzAzNTQzNzksMzQwXSxcbls1NS44Mjk0MjM2ODM2ODgsMzcuODE2MDEwODE4MDM5LDY1MF0sXG5bNTUuODAwOTQ5MTQ4MTI5LDM3LjcxMTUxODc5MDE0NSwxNTVdLFxuWzU1LjYzNTE3MTk2ODg4MywzNy40MzY5MzcxNzYyNzQsMzUwXSxcbls1NS43OTcyNzM2NjAyNjYsMzcuNzk5Njk4MTY1NjA5LDIwMF0sXG5bNTUuODYyMjc4ODA4NzQ4LDM3LjU2MzMwMjAxNjMzNSwxNTVdLFxuWzU1Ljg4MTIwMjY3ODQwMiwzNy41Njk5OTAyMzAwMjUsNTAwXSxcbls1NS42ODM0MTIwNTU2NzIsMzcuNjYwNjg4MTM4NzE4LDQwMF0sXG5bNTUuODk4NzA1OTczMTM1LDM3LjU5MzY1MzA5NzkxNCw0NTBdLFxuWzU1Ljg5NjA0MzQyNjg0NywzNy42MTk3NjYyOTkyNzgsNTAwXSxcbls1NS43NDM5NTU5OTcxMTksMzcuNTgwODc1NTIyMjU1LDMwMF0sXG5bNTUuODY0OTI5MjE2NjM4LDM3LjYwNTA5NDcxMjcxOSwxNTVdLFxuWzU1Ljg1NjIxNzM5NTEwNSwzNy40NzU0NzYyOTgyOTgsMTU1XSxcbls1NS44MzkxOTEyNTY5MTEsMzcuNDg4NDg0NDM4ODQzLDE1NV0sXG5bNTUuODg5ODIwNTM4NTcsMzcuNTM5MzE2MjY4Nzk5LDM1MF0sXG5bNTUuODA5NTA0NTgzMTQ2LDM3LjU2OTA2NzE1NDE3MiwxMDAwXSxcbls1NS44NTkyOTQzMDMwMywzNy41NTI2OTUwNzE5NTEsMTU1XSxcbls1NS43MDkzMDk5OTczNywzNy42NTcxMDkyMjM4NjcsNTAwXSxcbls1NS43MDkzMDk5OTczNywzNy42NTcxMDkyMjM4NjcsMTAwMF0sXG5bNTUuNzkyNjIyMTM2MjA4LDM3LjU4MzgzMzMzNTUxLDE1NV0sXG5bNTUuNzc4NTMxMjc5MDQ2LDM3LjU4NTgyMTA5MzgxOSwyNjBdLFxuWzU1Ljc5MjQ3MzY3MjM2OCwzNy42MDUwMDAxNzA5MzUsMzUwXSxcbls1NS43Nzk0Mzg5ODc3MzcsMzcuNjAwNDk2Njc3NDk0LDM1MF0sXG5bNTUuODA1MjQ0OTkyOTU4LDM3LjUxNTY2NjEyNTU0NSwxNTVdLFxuWzU1Ljc3NDE1MzA3ODgxNCwzNy42MTUzNzI5NDM4MTMsMzAwXSxcbls1NS43ODMxOTE4MDM4NDUsMzcuNTg1ODgxNDE4OTQ2LDIwMF0sXG5bNTUuNzY5MTU0NTk5NTYzLDM3LjU4MzY4NzU1MzM5OCw5MDBdLFxuWzU1LjcyNTYwNjIwNzgzMSwzNy41OTYzMTAxNjYxNjgsMTIwMF0sXG5bNTUuNzgxMzc1NzAwNzYxLDM3LjYyOTExNzkzMTU1MSw3NTBdLFxuWzU1LjYzNDAxMjI5NTMzNSwzNy40NDE5ODU3NzgxNSwyNjBdLFxuWzU1Ljc0MzE1ODI4MjkyNiwzNy41NjczNjM5MzIwMiwxNTVdLFxuWzU1LjQxNDg4MDE0ODE5MSwzNy45MDI5NDEyNzYwMjMsMjYwXSxcbls1NS43MTM5MzIwODAwNywzNy42MjM5NjE5NzM4Nyw0NTBdLFxuWzU1Ljc0NDU2NDYwNjM0MSwzNy41NjU1MzUxNTMxNDQsMzAwXSxcbls1NS43NDQ1NjQ2MDYzNDEsMzcuNTY1NTM1MTUzMTQ0LDE1NV0sXG5bNTUuNzUyMjI0Nzc5NjU1LDM3LjY2ODUzNzc0NjM2OSw1MDBdLFxuWzU1Ljc0Nzc2MzkyODQ2NywzNy42ODA2NjYzMTYzLDM1MF0sXG5bNTUuNzQ0NDYyMjk1ODY4LDM3LjgxNzUxMTUwMzcxOCwxNTVdLFxuWzU1Ljk1OTI1MjUwODc1NCwzNy40MTQ4NDU3OTYyODgsMTU1XSxcbls1NS42Nzc4NzM2MTgwNjksMzcuNTA3MTg4NDk5MDI3LDI2MF0sXG5bNTUuNzA2NDAyODk2MTk1LDM3LjU4NjUyMjU0NDczNSwxNTVdLFxuWzU1Ljc5ODg0ODkzOTYwOCwzNy40ODc5MjcxNDg3NDUsMTI1MF0sXG5bNTUuNzQxNjk1NzQwMjc5LDM3LjYxNTYzMjQ0MzkwOSwxNTAwXSxcbls1NS42OTE3NTc1ODQ2NTcsMzcuNTI5NzM1OTU4MzczLDUwMF0sXG5bNTUuNzc2NzExMzM1ODgzLDM3LjUzNjA0ODA5MDc1MSwxMjAwXSxcbls1NS42Njc3MDU1NTQwNzQsMzcuNTI0OTYxMzc0NDcxLDEwMDBdLFxuWzU1Ljc3NDU3NzgxMjU1NywzNy41ODE5NDg1MzcxOTIsMjYwXSxcbls1NS43NTIwMDU4MjA2OTcsMzcuODg3NTY0MDU2MzksMzUwXSxcbls1NS42Njg2NTM3NDkwNDIsMzcuNTU5MzAzNjMzODk0LDEwMDBdLFxuWzU1LjY0NTg4Nzg1Njg4NywzNy42NzMyMDQzNjkxMjEsODAwXSxcbls1NS43NTA4NDY1MzU3MTksMzcuODIwMzk0ODQwMjQ4LDI2MF0sXG5bNTUuNzY2ODE0ODI0MDI5LDM3LjM3MjIwNjE3OTQ0NCwyNjBdLFxuWzU1LjkzOTkwNDYxMTA0NiwzNy4zNjQ2ODg4MDI3NTgsMjYwXSxcbls1NS4xNjE1MjAwNTgyMTcsMzcuNDY4MTE1MzQxMjQ4LDI2MF0sXG5bNTUuNjkxNTcxMzI3ODkyLDM3LjY2MjcwNjQ1Nzk2Myw1MDBdLFxuWzU1Ljc0NzQ3MTQ1MTk0MywzNy43MDY4NDczNjQ5MjQsMTU1XSxcbls1NS43NDc1NTA2Mzk0NzcsMzcuNTM5NTcyODk5Nzc0LDUwMF0sXG5bNTUuNzYxNTY4Mzg5ODI0LDM3LjY1ODI0NjI4MDMyNSw1MDBdLFxuWzU1Ljc4NTU1NjMyMjIxNCwzNy4yNDEwMjY4MjA2NjIsNTAwXSxcbls1NS42NTM4MTI0ODMyNzUsMzcuODQ0MzAwODkwMTcyLDM1MF0sXG5bNTUuNjQyMzQ2Nzg2MDU4LDM3LjU0MjIyOTQwMDgyNyw0NTBdLFxuWzU1LjY2MjYzNjY5OTI2NCwzNy41ODAxMTY3NTY1NzcsMTU1XSxcbls1NS42NDc5NTUwOTI2NTUsMzcuNTc4Mjg2MTM0MTIsMTU1XSxcbls1NS41ODUyNzE3MDU1MTgsMzcuNzI0ODkyODUzMTMzLDI2MF0sXG5bNTUuNjg4NDY2NTQ2OTcsMzcuNTY5OTM0NTU5MjM0LDIwMF0sXG5bNTUuNTcyNzExMjI1NDAyLDM3LjY3Mzk1OTI3NDkyMywyNjBdLFxuWzU1LjY4MzgzNDk5OTQ5OSwzNy41NDkzMTM2Mjg1NDQsMjUwXSxcbls1NS42NzgxMjA3MDk4NzUsMzcuNTM1NjMyMDA1MTExLDUwMF0sXG5bNTUuODQ5NDU3NzY5OTkzLDM2LjgwNjc0NjQyMjkwMyw0MDBdLFxuWzU1LjY4MzUyNTcyOTMyMiwzNy41NTI2MjkwODE3NzUsMzUwXSxcbls1NS43NTgxMjAyMjgwNTQsMzcuNjc2MzAzOTY2MzAyLDE1MDBdLFxuWzU1Ljc0MDE5NTc0OTM1NSwzNy42MzQ2MTU2MjM0NTcsNzAwXSxcbls1NS42Nzc4NzM2MTgwNjksMzcuNTA3MTg4NDk5MDI3LDE1NV0sXG5bNTUuNzQ0MTMxNDMxNDc5LDM3LjY1Njk0NDI2ODc2Myw4MDBdLFxuWzU1LjY1MzUwMDE4NTM0MiwzNy42NDY2MzM2NDE3MzcsMzUwXSxcbls1NS43MzM3NzA4NjIxNzQsMzcuNjM0MjQ1NzE4ODUyLDQ1MF0sXG5bNTkuODA3MTI3MDg1MzY3LDMwLjM3NzM3OTAxMDg1MiwyNjBdLFxuWzU1LjczNzIzOTg4MDU0OSwzNy41OTQ3NDM4OTQzMDEsNTAwXSxcbls1Ni4yNjAzNzI3NzY1NDIsNDMuODU5MjY2NTE2Njc2LDUwMF0sXG5bNTAuNTY2MDQ5NzE4MjI2LDM2LjU1MTUwODUxMzU3MywzNTBdLFxuWzUwLjA1MjQ1MDg5MjcyLDE0LjQ3Mjc3NjkxNTMxNywzMDBdLFxuWzU0Ljc4OTk3ODU2ODMyOSw1Ni4wMzY4MTMwMDQ0ODUsMTAwMF0sXG5bNTMuMjI0NDM4NDIwNDQ5LDUwLjE2Nzk0MTE2NDE3NCwxMDAwXSxcbls0Ny4yNzY3OTk1NTIxMDksMzkuODA5NDA0NDYzNDI3LDE1NV0sXG5bNTUuOTEyMjU3NTg5NzI0LDM2Ljg2MTg2OTY2MTEzNCwzNTBdLFxuWzI1LjI2OTk5ODk1NjI4OCw1NS4yOTk2NzgwNTIwMTUsMzUwXSxcbls1MC4wOTI5NDg3NDM4NTksMTQuNDQzNjE1MzY1ODgyLDE1NV0sXG5bMjUuMTg1NjYyMDIzNjQzLDU1LjI0MDg1NDUyNjA2NSwxMDAwXSxcbls1NS42NzA1ODI3NDAxODcsMzcuNzYwOTAwMzgyMDAxLDUwMF0sXG5bNTUuNzIzNzY4MjQxOTgzLDM3LjU5MjU0MTU0MTMzMywxNzUwXSxcbls1NS44MDYyMTc0MTE0MzYsMzcuODI4OTY2MTk3ODM5LDMwMF1cbl07IiwidmFyIHRoZW1lID0gcmVxdWlyZSgnLi90aGVtZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG1hcCkge1xuICAgIHRoZW1lKG1hcCwgJ2RhcmsnKTtcblxuICAgIHJldHVybiBtYXA7XG59OyIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oYXBwKSB7XG4gICAgdmFyIGRldmljZSA9IGFwcC5iYXNlLmNvbnRyb2wuJCgnLmRldmljZScpLFxuICAgICAgICBkaXNwbGF5ID0gZGV2aWNlLmNoaWxkcmVuKCksXG4gICAgICAgIG1hcCA9IG5ldyBERy5NYXAoJ21vYmlsZS1tYXAnLCB7XG4gICAgICAgICAgICAnY2VudGVyJzogbmV3IERHLkxhdExuZyg1NC45ODAxNTY4MzE0NTUsIDgyLjg5NzQ0MDcyNTA5NCksXG4gICAgICAgICAgICAnem9vbSc6IDEzLFxuICAgICAgICAgICAgJ2dlb2NsaWNrZXInOiBmYWxzZSxcbiAgICAgICAgICAgICd3b3JsZENvcHlKdW1wJzogdHJ1ZSxcbiAgICAgICAgICAgICdsb2NhdGlvbkNvbnRyb2wnOiBmYWxzZSxcbiAgICAgICAgICAgICd6b29tQ29udHJvbCc6IHRydWUsXG4gICAgICAgICAgICAnZnVsbHNjcmVlbkNvbnRyb2wnOiBmYWxzZVxuICAgICAgICB9KTtcblxuICAgIHJldHVybiB7XG4gICAgICAgIGVuYWJsZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBkZXZpY2UuYWRkQ2xhc3MoJ2RldmljZV9pcy12aXNpYmxlX3RydWUnKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9LFxuICAgICAgICBkaXNhYmxlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGRldmljZS5yZW1vdmVDbGFzcygnZGV2aWNlX2lzLXZpc2libGVfdHJ1ZScpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0sXG4gICAgICAgIGNsZWFuOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGRldmljZS5yZW1vdmVDbGFzcygndGFibGV0IHNtYXJ0cGhvbmUgbm90ZXBhZCcpO1xuICAgICAgICAgICAgZGlzcGxheS5yZW1vdmVDbGFzcygpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0sXG4gICAgICAgIHNldFR5cGU6IGZ1bmN0aW9uKHR5cGUpIHtcbiAgICAgICAgICAgIHRoaXMuY2xlYW4oKTtcbiAgICAgICAgICAgIGRldmljZS5hZGRDbGFzcyh0eXBlKTtcbiAgICAgICAgICAgIGRpc3BsYXkuYWRkQ2xhc3ModHlwZSArICdfX2Rpc3BsYXknKTtcbiAgICAgICAgICAgIG1hcC5pbnZhbGlkYXRlU2l6ZSgpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0sXG4gICAgICAgIG1hcDogbWFwXG4gICAgfTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IFtcbiAgICB7XG4gICAgICAgIGVudHJhbmNlOiBbJ0xJTkVTVFJJTkcoMzAuNDM4MDAwNDk0NDk3NjI2IDU5Ljk5NDQ5MTQwNDk2NzM5MSwzMC40Mzc5NzEzMDAwMjU5NDMgNTkuOTk0MzA3NzQ5Mjg0MjI1LDMwLjQzODYzMDI0MjAxODYwOCA1OS45OTQyODE3MjgwOTI3OTQsMzAuNDM4Nzg1MTA4NjQyMjg2IDU5Ljk5NDA1MzIyMTgzMzYxNywzMC40Mzg4NDI2MTAxNDM0MzYgNTkuOTkzOTY4MjczMjA2ODg5KSddLFxuICAgICAgICBkZXNjcmlwdGlvbjoge1xuICAgICAgICAgICAgYWRkcmVzczogJ9Cf0LjRgdC60LDRgNGR0LLRgdC60LjQuSDQv9GA0L7RgdC/0LXQutGCLCA2MycsXG4gICAgICAgICAgICBjb21wYW55OiAn0JHQsNC70YLQuNC6LCDQntCe0J4sINCz0YDRg9C/0L/QsCDQutC+0LzQv9Cw0L3QuNC5JyxcbiAgICAgICAgICAgIHRleHQ6ICfQoSDQn9C40YHQutCw0YDQtdCy0YHQutC+0LPQviDQv9GA0L7RgdC/0LXQutGC0LAg0YHQstC10YDQvdC40YLQtSDQvdCw0L/RgNCw0LLQviwg0LfQsNGC0LXQvCDQv9C+INC00L7RgNC+0LPQtSDRgdGA0LDQt9GDINC90LDQu9C10LLQvi4g0JfQsNC50LTQuNGC0LUg0LLQvdGD0YLRgNGMINC4INC40LTQuNGC0LUg0LLQu9C10LLQviDQv9C+INC60L7RgNC40LTQvtGA0LDQvCwg0L/QvtC60LAg0L3QtSDQvdCw0LnQtNC10YLQtSDQvdGD0LbQvdGL0Lkg0L7RhNC40YEuJ1xuICAgICAgICB9XG4gICAgfSxcbiAgICB7XG4gICAgICAgIGVudHJhbmNlOiBbJ0xJTkVTVFJJTkcoODIuODk3NTUzNDQzOTA4NjggNTQuOTgyMzIwNjA1NDQ5Mjk2LCA4Mi44OTcxNDU3NDgxMzg0MyA1NC45ODI1NjY4NjU0NTc0NjQsIDgyLjg5Njc3NTYwMzI5NDM3IDU0Ljk4MjMzMjkxODQ4NTYsIDgyLjg5NjY0Njg1NzI2MTY0IDU0Ljk4MjQwNjc5NjYyMzk4LCA4Mi44OTY3NzAyMzg4NzYzNCA1NC45ODI0NzQ1MTgxMzE0MiknXSxcbiAgICAgICAgZGVzY3JpcHRpb246IHtcbiAgICAgICAgICAgIGFkZHJlc3M6ICfQkdC+0YLQutC40L3RgdC60LDRjywgMScsXG4gICAgICAgICAgICBjb21wYW55OiAn0JDQndCiINCd0JXQlNCS0JjQltCY0JzQntCh0KLQrCwg0J7QntCeLCDQsNCz0LXQvdGC0YHRgtCy0L4g0L3QtdC00LLQuNC20LjQvNC+0YHRgtC4JyxcbiAgICAgICAgICAgIHRleHQ6ICfQktGF0L7QtNC40YLQtSDRgdC+INGB0YLQvtGA0L7QvdGLINGB0YLQsNC90YbQuNC4INC80LXRgtGA0L4gwqvQn9C70L7RidCw0LTRjCDQm9C10L3QuNC90LDCuywg0YPQstC40LTQuNGC0LUg0LfQtNCw0L3QuNC1INGB0LvQvtC20L3QvtC5INGE0L7RgNC80YsuINCS0LDQvCDQvdGD0LbQvdC+INCyINC70LXQstC+0LUg0LrRgNGL0LvQvi4g0JjRidC40YLQtSAxNDEg0L7RhNC40YEuJ1xuICAgICAgICB9XG4gICAgfSxcbiAgICB7XG4gICAgICAgIGVudHJhbmNlOiBbJ0xJTkVTVFJJTkcoMzAuMzI0NTQ5MDMzNjAxNzE2IDU5Ljg1NDM0MzgwNjYzNDA3NywzMC4zMjUwNzg4NDMwMDA0MTIgNTkuODU0MzUxNTIwOTAwODA2LDMwLjMyNTA3NDM0MDY1MDkzOSA1OS44NTQ0MDc1ODEzNjI1MzcsMzAuMzI0OTM5ODk4Nzc5NzI1IDU5Ljg1NDQwNDg0ODg5MDcwOSknXSxcbiAgICAgICAgZGVzY3JpcHRpb246IHtcbiAgICAgICAgICAgIGFkZHJlc3M6ICfQkNCy0LjQsNGG0LjQvtC90L3QsNGPLCAxOCcsXG4gICAgICAgICAgICBjb21wYW55OiAn0JTQtdC90YLQsC3QnNC10LQsINGB0YLQvtC80LDRgtC+0LvQvtCz0LjRh9C10YHQutC40Lkg0YbQtdC90YLRgCcsXG4gICAgICAgICAgICB0ZXh0OiAn0KEg0J/QuNGB0LrQsNGA0LXQstGB0LrQvtCz0L4g0L/RgNC+0YHQv9C10LrRgtCwINGB0LLQtdGA0L3QuNGC0LUg0L3QsNC/0YDQsNCy0L4sINC30LDRgtC10Lwg0L/QviDQtNC+0YDQvtCz0LUg0YHRgNCw0LfRgyDQvdCw0LvQtdCy0L4uINCX0LDQudC00LjRgtC1INCy0L3Rg9GC0YDRjCDQuCDQuNC00LjRgtC1INCy0LvQtdCy0L4g0L/QviDQutC+0YDQuNC00L7RgNCw0LwsINC/0L7QutCwINC90LUg0L3QsNC50LTQtdGC0LUg0L3Rg9C20L3Ri9C5INC+0YTQuNGBLidcbiAgICAgICAgfVxuICAgIH0sXG4gICAge1xuICAgICAgICBlbnRyYW5jZTogWydMSU5FU1RSSU5HKDMwLjM3ODg0OTQ3ODI0MjI2MiA1OS45MjY0MDMzNjgyOTA4NDIsMzAuMzc4MzQ5MTY2MDQ2NDU4IDU5LjkyNjU2NzQzOTAxNjU2NiwzMC4zNzgzOTk5MDk4OTU1MTcgNTkuOTI2NjA3MDc5Njg1NzM4LDMwLjM3ODU0NTI0NDMyMzE0NiA1OS45MjY1NTQ4OTgwMzg3NTIpJ10sXG4gICAgICAgIGRlc2NyaXB0aW9uOiB7XG4gICAgICAgICAgICBhZGRyZXNzOiAn0J3QtdCy0YHQutC40Lkg0L/RgNC+0YHQv9C10LrRgiwgMTcwJyxcbiAgICAgICAgICAgIGNvbXBhbnk6ICfQptC10L3RgtGAINGA0LXQsNCx0LjQu9C40YLQsNGG0LjQuCDRgNC10YfQuCDQotCw0YLRjNGP0L3RiyDQodC+0LvQvtCy0YzRkdCy0L7QuScsXG4gICAgICAgICAgICB0ZXh0OiAn0KEg0J3QtdCy0YHQutC+0LPQviDQv9GA0L7RgdC/0LXQutGC0LAg0YHQstC10YDQvdC40YLQtSDQvdCwINCY0YHQv9C+0LvQutC+0LzRgdC60YPRjiwg0L3QviDQtNCw0LvQtdC60L4g0L3QtSDRg9C10LfQttCw0LnRgtC1INCy0LDQvCDQsiDRg9Cz0LvQvtCy0L7QtSDQt9C00LDQvdC40LUuINCf0YDQvtC50LTQuNGC0LUg0LLQviDQtNCy0L7RgCwg0LLRhdC+0LQg0LHRg9C00LXRgiDQv9C+INC/0YDQsNCy0YPRjiDRgNGD0LrRgy4nXG4gICAgICAgIH1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgZW50cmFuY2U6IFsnTElORVNUUklORygzMC4zMjIxNjQwOTQ0NTUyNDYgNTkuOTMzMDUzOTU1NDU0NTY4LDMwLjMyMTQwNTczMjM3MTEwOCA1OS45MzMyMjc0ODY0Nzg4MjcsMzAuMzIwNzM4MTk0OTU4MzU5IDU5LjkzMjQ5Mjg0NDk3NTY3NywzMC4zMjA0OTM5ODQwODU5NjQgNTkuOTMyNTQ4NzA0NDgzMTUzLDMwLjMyMDMzODc3NzU2ODExNCA1OS45MzIzNzc5MDM0NDI5NTUsMzAuMzIwMTgxMjI3MDg4NDE5IDU5LjkzMjQyMDI1MDc2ODA2MSknXSxcbiAgICAgICAgZGVzY3JpcHRpb246IHtcbiAgICAgICAgICAgIGFkZHJlc3M6ICfQmtCw0LfQsNC90YHQutCw0Y8sIDcnLFxuICAgICAgICAgICAgY29tcGFueTogJ9Ce0LHQu9C40LrQnNC10LTQuNCwLCDQntCe0J4sINGA0LXQutC70LDQvNC90L7QtSDQsNCz0LXQvdGC0YHRgtCy0L4nLFxuICAgICAgICAgICAgdGV4dDogJ9Ce0YIg0J3QtdCy0YHQutC+0LPQviDQv9GA0L7RgdC/0LXQutGC0LAg0LTQstC40LPQsNC50YLQtdGB0Ywg0L/QviDRg9C70LjRhtC1INCa0LDQt9Cw0L3RgdC60L7QuSDQtNC+INC00L7QvNCwIOKEljUuINCf0YDQvtGF0L7QtNC40YLQtSDQstC+INCy0YLQvtGA0YPRjiDQsNGA0LrRgyDQuCDQv9C+0LLQtdGA0L3QuNGC0LUg0L3QsNC70LXQstC+INCyINGB0LvQtdC00YPRjtGJ0YPRjiDQsNGA0LrRgy4g0JTQvtC50LTQuNGC0LUg0LTQviDQt9C00LDQvdC40Y8sINC/0YDQvtC50LTQuNGC0LUg0L3QsNGB0LrQstC+0LfRjCwg0YPQstC40LTQuNGC0LUg0LLRhdC+0LQg0YHQv9GA0LDQstCwLidcbiAgICAgICAgfVxuICAgIH0sXG4gICAge1xuICAgICAgICBlbnRyYW5jZTogWydMSU5FU1RSSU5HKDMwLjM3ODg0OTQ3ODI0MjI2MiA1OS45MjY0MDMzNjgyOTA4NDIsMzAuMzc4MzQ5MTY2MDQ2NDU4IDU5LjkyNjU2NzQzOTAxNjU2NiwzMC4zNzgzOTk5MDk4OTU1MTcgNTkuOTI2NjA3MDc5Njg1NzM4LDMwLjM3ODU0NTI0NDMyMzE0NiA1OS45MjY1NTQ4OTgwMzg3NTIpJ10sXG4gICAgICAgIGRlc2NyaXB0aW9uOiB7XG4gICAgICAgICAgICBhZGRyZXNzOiAn0J3QtdCy0YHQutC40Lkg0L/RgNC+0YHQv9C10LrRgiwgMTcwJyxcbiAgICAgICAgICAgIGNvbXBhbnk6ICfQptC10L3RgtGAINGA0LXQsNCx0LjQu9C40YLQsNGG0LjQuCDRgNC10YfQuCDQotCw0YLRjNGP0L3RiyDQodC+0LvQvtCy0YzRkdCy0L7QuScsXG4gICAgICAgICAgICB0ZXh0OiAn0KEg0J3QtdCy0YHQutC+0LPQviDQv9GA0L7RgdC/0LXQutGC0LAg0YHQstC10YDQvdC40YLQtSDQvdCwINCY0YHQv9C+0LvQutC+0LzRgdC60YPRjiwg0L3QviDQtNCw0LvQtdC60L4g0L3QtSDRg9C10LfQttCw0LnRgtC1INCy0LDQvCDQsiDRg9Cz0LvQvtCy0L7QtSDQt9C00LDQvdC40LUuINCf0YDQvtC50LTQuNGC0LUg0LLQviDQtNCy0L7RgCwg0LLRhdC+0LQg0LHRg9C00LXRgiDQv9C+INC/0YDQsNCy0YPRjiDRgNGD0LrRgy4nXG4gICAgICAgIH1cbiAgICB9XG5dO1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgJ3BhZ2UxJzogcmVxdWlyZSgnLi9wYWdlMScpLFxuICAgICdwYWdlNCc6IHJlcXVpcmUoJy4vcGFnZTQnKSxcbiAgICAncGFnZTUnOiByZXF1aXJlKCcuL3BhZ2U1JyksXG4gICAgJ3R3by1tYXJrZXJzJzogcmVxdWlyZSgnLi90d28tbWFya2VycycpLFxuICAgICdzdW4nOiByZXF1aXJlKCcuL3N1bicpLFxuICAgICdtYXJrZXInOiByZXF1aXJlKCcuL21hcmtlcicpLFxuICAgICdkYXJrLXRoZW1lJzogcmVxdWlyZSgnLi9kYXJrLXRoZW1lJyksXG4gICAgJ2xpZ2h0LXRoZW1lJzogcmVxdWlyZSgnLi9saWdodC10aGVtZScpLFxuICAgICdzbWFydHBob25lJzogcmVxdWlyZSgnLi9zbWFydHBob25lJyksXG4gICAgJ25vdGVwYWQnOiByZXF1aXJlKCcuL25vdGVwYWQnKSxcbiAgICAndGFibGV0JzogcmVxdWlyZSgnLi90YWJsZXQnKSxcbiAgICAnc2V0dXAnOiByZXF1aXJlKCcuL3NldHVwJyksXG4gICAgJ3Jlc2V0JzogcmVxdWlyZSgnLi9yZXNldCcpXG59O1xuIiwidmFyIHRoZW1lID0gcmVxdWlyZSgnLi90aGVtZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG1hcCkge1xuICAgIHRoZW1lKG1hcCwgJ2xpZ2h0Jyk7XG5cbiAgICByZXR1cm4gbWFwO1xufTsiLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG1hcCwgYXBwKSB7XG4gICAgaWYgKG1hcC5tYXJrZXIpIHtcbiAgICAgICAgcmV0dXJuIG1hcC5hZGRMYXllcihtYXAubWFya2VyKTtcbiAgICB9XG5cbiAgICBhcHAucGx1Z2lucy5tYXJrZXIudGhlbihmdW5jdGlvbigpIHtcbiAgICAgICAgbWFwLm1hcmtlciA9IG5ldyBMLk1hcmtlcihbNTUuNzU1NjE2ODk0MDQ3MjE1LCAzNy42MDA3MDgwMDc4MTI1MV0sIHtib3VuY2VPbkFkZDogdHJ1ZX0pLmFkZFRvKG1hcCk7XG4gICAgICAgIG1hcC5tYXJrZXIub24oJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgbWFwLm1hcmtlci5ib3VuY2Uoe2R1cmF0aW9uOiA1MDAsIGhlaWdodDogNDAwfSk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIG1hcDtcbn07IiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihtYXAsIGFwcCkge1xuICAgIGFwcC5kZXZpY2UuZW5hYmxlKCkuc2V0VHlwZSgnbm90ZXBhZCcpO1xuXG4gICAgcmV0dXJuIG1hcDtcbn07IiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihtYXAsIGFwcCkge1xuICAgIHZhciBsb2FkZXIgPSBhcHAuYmFzZS5mb290ZXIuJCgnW2RhdGEtZm9vdGVyLXN0YXRlPXBhZ2UxXScpLFxuICAgICAgICB0aW1lRWwgPSBsb2FkZXIuZmluZCgnLmxpZ2h0bmVzcy1wYW5lbF9fY291bnRlcicpLFxuICAgICAgICBuZXdCYXIgPSBsb2FkZXIuZmluZCgnLmxpZ2h0bmVzcy1wYW5lbF9fdmVyc2lvbl9vZl9uZXctYXBpIC5saWdodG5lc3MtcGFuZWxfX3Byb2dyZXNzLWJhci1maWxsJyksXG4gICAgICAgIG9sZEJhciA9IGxvYWRlci5maW5kKCcubGlnaHRuZXNzLXBhbmVsX192ZXJzaW9uX29mX29sZC1hcGkgLmxpZ2h0bmVzcy1wYW5lbF9fcHJvZ3Jlc3MtYmFyLWZpbGwnKSxcbiAgICAgICAgbG9hZGVkID0gJ2xpZ2h0bmVzcy1wYW5lbF9fcHJvZ3Jlc3MtYmFyLWZpbGwtaXNfbG9hZGVkJyxcbiAgICAgICAgdGltZXIsIHRpbWUgPSAwLCBtcywgcztcblxuICAgIG5ld0Jhci5hZGQob2xkQmFyKS53aWR0aCgwKS5zdG9wKCkucmVtb3ZlQ2xhc3MobG9hZGVkKTtcblxuICAgIG5ld0Jhci5hbmltYXRlKHt3aWR0aDogJzYwJSd9LCB7XG4gICAgICAgIGR1cmF0aW9uOiAyMDAwLFxuICAgICAgICBjb21wbGV0ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBuZXdCYXIuYWRkQ2xhc3MobG9hZGVkKTtcbiAgICAgICAgICAgIGFwcC5iYXNlLiQoJy5tYXAnKS5yZW1vdmVDbGFzcygnbWFwX2hhcy1vdmVybGF5X2RhcmsnKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIG9sZEJhci5hbmltYXRlKHt3aWR0aDogJzEwMCUnfSwge1xuICAgICAgICBkdXJhdGlvbjogNDAwMCxcbiAgICAgICAgc3RhcnQ6IHN0YXJ0VGltZXIsXG4gICAgICAgIGFsd2F5czogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBvbGRCYXIuYWRkQ2xhc3MobG9hZGVkKTtcbiAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwodGltZXIpO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICBmdW5jdGlvbiBzdGFydFRpbWVyKCkge1xuICAgICAgICB0aW1lciA9IHNldEludGVydmFsKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGltZSArPSAxO1xuICAgICAgICAgICAgcyA9ICBNYXRoLmZsb29yKHRpbWUgLyA2MCk7XG4gICAgICAgICAgICBtcyA9IE1hdGguZmxvb3IodGltZSAlIDYwKTtcbiAgICAgICAgICAgIGlmIChzIDwgMTApIHtcbiAgICAgICAgICAgICAgICBzID0gJzAnICsgcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtcyA8IDEwKSB7XG4gICAgICAgICAgICAgICAgbXMgPSAnMCcgKyBtcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRpbWVFbC50ZXh0KFsnMDAnLCBzLCBtc10uam9pbignIDogJykpO1xuICAgICAgICB9LCAyMCk7XG4gICAgfTtcblxuICAgIHJldHVybiBtYXA7XG59OyIsInZhciBkYXRhID0gcmVxdWlyZSgnLi9lbnRyYW5jZXMnKSxcbiAgICAkID0gcmVxdWlyZSgnanF1ZXJ5Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obWFwLCBhcHApIHtcbiAgICB2YXIgZW50cmFuY2VzID0ge30sXG4gICAgICAgIHRpdGxlTm9kZSA9ICQoJy5wc2V1ZG9jYXJkX19oZWFkZXInKSxcbiAgICAgICAgYWRkcmVzc05vZGUgPSAkKCcucHNldWRvY2FyZF9fYWRkcmVzcycpLFxuICAgICAgICB0ZXh0Tm9kZSA9ICQoJy5wc2V1ZG9jYXJkX19yb3V0ZS1pbnN0cnVjdGlvbnMnKTtcblxuICAgIGZ1bmN0aW9uIHNob3dFbnRyYW5jZShpZCkge1xuICAgICAgICBpZiAoIWVudHJhbmNlc1tpZF0pIHtcbiAgICAgICAgICAgIGVudHJhbmNlc1tpZF0gPSBuZXcgREcuRW50cmFuY2Uoe1xuICAgICAgICAgICAgICAgICd2ZWN0b3JzJzogZGF0YVtpZF0uZW50cmFuY2VcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVudHJhbmNlc1tpZF0uYWRkVG8obWFwKS5zaG93KCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdXBkYXRlRGVzY3JpcHRpb24oaWQpIHtcbiAgICAgICAgdmFyIGRlc2NyaXB0aW9uID0gZGF0YVtpZF0uZGVzY3JpcHRpb247XG5cbiAgICAgICAgdGl0bGVOb2RlLmh0bWwoZGVzY3JpcHRpb24uY29tcGFueSk7XG4gICAgICAgIGFkZHJlc3NOb2RlLmh0bWwoZGVzY3JpcHRpb24uYWRkcmVzcyk7XG4gICAgICAgIHRleHROb2RlLmh0bWwoZGVzY3JpcHRpb24udGV4dCk7XG4gICAgfVxuXG4gICAgYXBwLnZlbnQub24oJ3Nob3dFbnRyYW5jZSBjaGFuZ2VFbnRyYW5jZScsIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgIHNob3dFbnRyYW5jZShkYXRhLmlkKTtcbiAgICB9KTtcblxuICAgIGFwcC52ZW50Lm9uKCdjaGFuZ2VFbnRyYW5jZScsIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgIHVwZGF0ZURlc2NyaXB0aW9uKGRhdGEuaWQpO1xuICAgIH0pO1xuXG4gICAgLy8gaW5pdCBzdGF0ZVxuICAgIHNob3dFbnRyYW5jZSgwKTtcbiAgICBhcHAuYmFzZS5jb250cm9sLl9jdXJyRWwgPSAkKCcuZW50cmFuY2VzLWV4YW1wbGVzX19leGFtcGxlLWxpbmtfaXMtc2hvd25fdHJ1ZScpO1xuXG4gICAgcmV0dXJuIG1hcDtcbn07XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJ2pxdWVyeScpO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihtYXAsIGFwcCkge1xuXG5cblxuXHQvLyBjb25zb2xlLmxvZyhhcHAuYmFzZS5mb290ZXIpO1xuXHR2YXIgQ29tbWl0c19KU0FQSSA9IHtcblx0XHRcIjIwMTBcIiA6IFtcblx0XHRcdHtcImRhdGVcIjpcIjIwMTAtMDYtMThUMTU6NDI6NTBaXCIsXCJhdXRob3JcIjp7XCJsb2dpblwiOlwiR2FpZGFtYWtcIixcImxvY2F0aW9uXCI6XCJLaWV2LCBVa3JhaW5lXCJ9LFwibGF0bG5nXCI6e1wibGF0XCI6NTAuNDUwMSxcImxuZ1wiOjMwLjUyMzR9fSxcblx0XHRcdHtcImRhdGVcIjpcIjIwMTAtMDYtMjNUMDg6MTA6MTZaXCIsXCJhdXRob3JcIjp7XCJsb2dpblwiOlwicG9ycXpcIixcImxvY2F0aW9uXCI6XCJOb3Zvc2liaXJza1wifSxcImxhdGxuZ1wiOntcImxhdFwiOjU1LjAwODM1MjU5OTk5OTk5LFwibG5nXCI6ODIuOTM1NzMyN319XG5cdFx0XSxcblx0XHRcIjIwMTFcIiA6IFtcblx0XHRcdHtcImRhdGVcIjpcIjIwMTEtMDYtMThUMTU6NDI6NTBaXCIsXCJhdXRob3JcIjp7XCJsb2dpblwiOlwiR2FpZGFtYWtcIixcImxvY2F0aW9uXCI6XCJLaWV2LCBVa3JhaW5lXCJ9LFwibGF0bG5nXCI6e1wibGF0XCI6NTAuNDUwMSxcImxuZ1wiOjMwLjUyMzR9fSxcblx0XHRcdHtcImRhdGVcIjpcIjIwMTEtMDYtMjNUMDg6MTA6MTZaXCIsXCJhdXRob3JcIjp7XCJsb2dpblwiOlwicG9ycXpcIixcImxvY2F0aW9uXCI6XCJOb3Zvc2liaXJza1wifSxcImxhdGxuZ1wiOntcImxhdFwiOjU1LjAwODM1MjU5OTk5OTk5LFwibG5nXCI6ODIuOTM1NzMyN319XG5cdFx0XSxcblx0XHRcIjIwMTJcIiA6IFtcblx0XHRcdHtcImRhdGVcIjpcIjIwMTItMDYtMThUMTU6NDI6NTBaXCIsXCJhdXRob3JcIjp7XCJsb2dpblwiOlwiR2FpZGFtYWtcIixcImxvY2F0aW9uXCI6XCJLaWV2LCBVa3JhaW5lXCJ9LFwibGF0bG5nXCI6e1wibGF0XCI6NTAuNDUwMSxcImxuZ1wiOjMwLjUyMzR9fSxcblx0XHRcdHtcImRhdGVcIjpcIjIwMTItMDYtMjNUMDg6MTA6MTZaXCIsXCJhdXRob3JcIjp7XCJsb2dpblwiOlwicG9ycXpcIixcImxvY2F0aW9uXCI6XCJOb3Zvc2liaXJza1wifSxcImxhdGxuZ1wiOntcImxhdFwiOjU1LjAwODM1MjU5OTk5OTk5LFwibG5nXCI6ODIuOTM1NzMyN319XG5cdFx0XSxcblx0XHRcIjIwMTNcIiA6IFtcblx0XHRcdHtcImRhdGVcIjpcIjIwMTMtMDYtMThUMTU6NDI6NTBaXCIsXCJhdXRob3JcIjp7XCJsb2dpblwiOlwiR2FpZGFtYWtcIixcImxvY2F0aW9uXCI6XCJLaWV2LCBVa3JhaW5lXCJ9LFwibGF0bG5nXCI6e1wibGF0XCI6NTAuNDUwMSxcImxuZ1wiOjMwLjUyMzR9fSxcblx0XHRcdHtcImRhdGVcIjpcIjIwMTMtMDYtMjNUMDg6MTA6MTZaXCIsXCJhdXRob3JcIjp7XCJsb2dpblwiOlwicG9ycXpcIixcImxvY2F0aW9uXCI6XCJOb3Zvc2liaXJza1wifSxcImxhdGxuZ1wiOntcImxhdFwiOjU1LjAwODM1MjU5OTk5OTk5LFwibG5nXCI6ODIuOTM1NzMyN319XG5cdFx0XSxcblx0XHRcIjIwMTRcIiA6IFtcblx0XHRcdHtcImRhdGVcIjpcIjIwMTQtMDYtMThUMTU6NDI6NTBaXCIsXCJhdXRob3JcIjp7XCJsb2dpblwiOlwiR2FpZGFtYWtcIixcImxvY2F0aW9uXCI6XCJLaWV2LCBVa3JhaW5lXCJ9LFwibGF0bG5nXCI6e1wibGF0XCI6NTAuNDUwMSxcImxuZ1wiOjMwLjUyMzR9fSxcblx0XHRcdHtcImRhdGVcIjpcIjIwMTQtMDYtMjNUMDg6MTA6MTZaXCIsXCJhdXRob3JcIjp7XCJsb2dpblwiOlwicG9ycXpcIixcImxvY2F0aW9uXCI6XCJOb3Zvc2liaXJza1wifSxcImxhdGxuZ1wiOntcImxhdFwiOjU1LjAwODM1MjU5OTk5OTk5LFwibG5nXCI6ODIuOTM1NzMyN319XG5cdFx0XVxuXHR9O1xuXG5cdHZhciBHaXRIdWJJY29uID0gREcuaWNvbih7XG5cdCAgICBpY29uVXJsOiAnL2ltZy9naXRodWItbWFyay5wbmcnLFxuXHQgICAgaWNvblJldGluYVVybDogJy9pbWcvZ2l0aHViLW1hcmsucG5nJyxcblx0ICAgIGljb25TaXplOiBbMzIsIDMyXSxcblx0ICAgIGljb25BbmNob3I6IFsxNiwgMTZdXG5cdH0pO1xuXG5cdHZhciBjTGF5ZXJzID0gW107XG5cblx0T2JqZWN0LmtleXMoQ29tbWl0c19KU0FQSSkuZm9yRWFjaChcblx0XHRmdW5jdGlvbih5ZWFyKXtcblxuXHRcdFx0dmFyIGNvbW1pdE1hcmsgPSBbXTtcblxuXHRcdFx0YWRkTWFya2Vyc1RvR3JvdXAoeWVhciwgY29tbWl0TWFyayk7XG5cblx0XHRcdC8vY0xheWVyc1t5ZWFyXSA9IERHLmxheWVyR3JvdXAoY29tbWl0TWFyaykuYWRkVG8obWFwKTtcblxuXHRcdH1cblx0KTtcblxuXHRtYXAuc2V0Wm9vbSg0KTtcblx0bWFwLnNldFZpZXcoWzMyLjY1Nzg3NTczNjk1NTMwNSwgNDQuMjUyOTI5Njg3NTAwMDFdKTtcblxuXG5cdGZ1bmN0aW9uIGFkZE1hcmtlcnNUb0dyb3VwKHllYXIsIGFNYXJrZXJzKXtcblx0XHRpZihDb21taXRzX0pTQVBJW3llYXJdKXtcblx0XHRcdENvbW1pdHNfSlNBUElbeWVhcl0uZm9yRWFjaChcblx0XHRcdFx0ZnVuY3Rpb24oY29tbWl0KXtcblx0XHRcdFx0XHRhTWFya2Vycy5wdXNoKCBERy5tYXJrZXIoW2NvbW1pdC5sYXRsbmcubGF0LGNvbW1pdC5sYXRsbmcubG5nXSwge2ljb246IEdpdEh1Ykljb259KSApO1xuXHRcdFx0XHR9XG5cdFx0XHQpO1xuXHRcdH1cblx0fVxuXG5cdGZ1bmN0aW9uIHNob3dDb21taXRzKHllYXIpe1xuXHRcdGlmKCBjTGF5ZXJzW3llYXJdIHx8ICFDb21taXRzX0pTQVBJW3llYXJdICkgeyByZXR1cm47IH1cblx0XHR2YXIgY29tbWl0cyA9IFtdO1xuXHRcdGFkZE1hcmtlcnNUb0dyb3VwKHllYXIsIGNvbW1pdHMpO1xuXHRcdGNMYXllcnNbeWVhcl0gPSBERy5sYXllckdyb3VwKGNvbW1pdHMpLmFkZFRvKG1hcCk7XG5cdH1cblxuXHRmdW5jdGlvbiBoaWRlQ29tbWl0cyh5ZWFyKXtcblx0XHRpZiAoICFjTGF5ZXJzW3llYXJdIHx8ICFDb21taXRzX0pTQVBJW3llYXJdICkgeyByZXR1cm47IH1cblx0XHRtYXAucmVtb3ZlTGF5ZXIoY0xheWVyc1t5ZWFyXSk7XG5cdH1cblxuICAgIGFwcC52ZW50Lm9uKCdjaGFuZ2VPcGVubmVzJywgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICBcdGNvbnNvbGUubG9nKGRhdGEuaWQpO1xuICAgIH0pO1xuXG4gICAgYXBwLmJhc2UuY29udHJvbC5fY3VyckVsID0gJCgnLm9wZW5uZXNzLWV4YW1wbGVzX19leGFtcGxlLWxpbmtfaXMtc2hvd25fdHJ1ZScpO1xuXG5cdHJldHVybiBtYXA7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihtYXAsIGFwcCkge1xuXG4gICAgaWYgKG1hcC5jbHVzdGVycyAmJiBtYXAuaGFzTGF5ZXIobWFwLmNsdXN0ZXJzKSkge1xuICAgICAgICBtYXAucmVtb3ZlTGF5ZXIobWFwLmNsdXN0ZXJzKTtcbiAgICB9XG5cbiAgICBpZiAobWFwLmhlYXQgJiYgbWFwLmhhc0xheWVyKG1hcC5oZWF0KSkge1xuICAgICAgICBtYXAucmVtb3ZlTGF5ZXIobWFwLmhlYXQpO1xuICAgIH1cblxuICAgIGlmIChtYXAubWFya2VyICYmIG1hcC5oYXNMYXllcihtYXAubWFya2VyKSkge1xuICAgICAgICBtYXAucmVtb3ZlTGF5ZXIobWFwLm1hcmtlcik7XG4gICAgfVxuXG4gICAgIW1hcC5nZW9jbGlja2VyLmVuYWJsZWQoKSAmJiBtYXAuZ2VvY2xpY2tlci5kaXNhYmxlKCk7XG5cbiAgICBpZiAobWFwLmNvbnRyb2xzLnJ1bGVyKSB7XG4gICAgICAgIG1hcC5yZW1vdmVDb250cm9sKG1hcC5jb250cm9scy5ydWxlcik7XG4gICAgICAgIG1hcC5jb250cm9scy5ydWxlciA9IG51bGw7XG4gICAgfVxuXG4gICAgLy9lbnRyYW5jZVxuICAgLyogYXBwLm9mZignc2hvd0VudHJhbmNlJyk7XG4gICAgYXBwLm9mZignY2hhbmdlRW50cmFuY2UnKTsqL1xuXG4gICAgbWFwLmdlb2NsaWNrZXIuX21hcC5fcG9wdXAgJiYgbWFwLmNsb3NlUG9wdXAobWFwLmdlb2NsaWNrZXIuX21hcC5fcG9wdXApO1xuXG4gICAgYXBwLmRldmljZS5jbGVhbigpLmRpc2FibGUoKTtcblxuICAgIHJldHVybiBtYXA7XG59O1xuIiwidmFyIHNldHVwID0gcmVxdWlyZSgnLi9kZXZpY2UnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihtYXAsIGFwcCkge1xuICAgIGFwcC5iYW5rcyA9IERHLmFqYXgoJ2h0dHA6Ly9jYXRhbG9nLmFwaS4yZ2lzLnJ1LzIuMC9jYXRhbG9nL2JyYW5jaC9zZWFyY2gnLCB7XG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIHE6ICfQsdCw0L3QutC+0LzQsNGC0YsnLFxuICAgICAgICAgICAgcGFnZV9zaXplOiAxLFxuICAgICAgICAgICAgcGFnZTogMSxcbiAgICAgICAgICAgIHJlZ2lvbl9pZDogMzIsXG4gICAgICAgICAgICBmaWVsZHM6ICdtYXJrZXJzJyxcbiAgICAgICAgICAgIGtleTogJ3J1ZGNndTMzMTcnLFxuICAgICAgICAgICAgb3V0cHV0OiAnanNvbidcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgYXBwLnBsdWdpbnMubWFya2VycyA9IERHLnBsdWdpbihbXG4gICAgICAgICcuL3ZlbmRvcnMvTGVhZmxldC5tYXJrZXJDbHVzdGVyL2xlYWZsZXQubWFya2VyY2x1c3Rlci1zcmMuanMnLFxuICAgICAgICAnLi92ZW5kb3JzL0xlYWZsZXQubWFya2VyQ2x1c3Rlci9NYXJrZXJDbHVzdGVyLkRlZmF1bHQuY3NzJ1xuICAgIF0pO1xuXG4gICAgYXBwLnBsdWdpbnMuaGVhdCA9IERHLnBsdWdpbignLi92ZW5kb3JzL0hlYXRMYXllci9oZWF0TGF5ZXIuanMnKTtcblxuICAgIGFwcC5wbHVnaW5zLm1hcmtlciA9IERHLnBsdWdpbignLi92ZW5kb3JzL0xlYWZsZXQuYm91bmNlTWFya2VyL2xlYWZsZXQuYm91bmNlbWFya2VyLmpzJyk7XG5cbiAgICBhcHAuZGV2aWNlID0gc2V0dXAoYXBwKTtcblxuICAgIHJldHVybiBtYXA7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihtYXAsIGFwcCkge1xuICAgIGFwcC5kZXZpY2UuZW5hYmxlKCkuc2V0VHlwZSgnc21hcnRwaG9uZScpO1xuXG4gICAgcmV0dXJuIG1hcDtcbn07IiwidmFyIGRhdGEgPSByZXF1aXJlKCcuL2NhZmVIZWF0Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obWFwLCBhcHApIHtcbiAgICBpZiAobWFwLmhlYXQpIHtcbiAgICAgICAgcmV0dXJuIG1hcC5hZGRMYXllcihtYXAuaGVhdCk7XG4gICAgfVxuXG4gICAgYXBwLnBsdWdpbnMuaGVhdC50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICBtYXAuaGVhdCA9IEwuaGVhdExheWVyKGRhdGEsIHtyYWRpdXM6IDI1fSkuYWRkVG8obWFwKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBtYXA7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihtYXAsIGFwcCkge1xuICAgIHZhciBtYXAyID0gYXBwLmRldmljZS5tYXA7XG4gICAgYXBwLmRldmljZS5lbmFibGUoKS5zZXRUeXBlKCd0YWJsZXQnKTtcblxuICAgIG1hcC5vbignbW92ZScsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgY29uc29sZS5sb2coZS50YXJnZXQuZ2V0Q2VudGVyKCkpO1xuICAgICAgICBtYXAyLnNldFZpZXcoZS50YXJnZXQuZ2V0Q2VudGVyKCksIG1hcC5nZXRab29tKCksIHthbmltYXRlOiBmYWxzZX0pO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIG1hcDtcbn07IiwidmFyICQgPSByZXF1aXJlKCdqcXVlcnknKTtcbnJlcXVpcmUoJy4uLy4uL3BvbHlmaWxsL2luZGV4T2YnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihtYXAsIHNraW4pIHtcbiAgICBtYXAuc2V0VmlldyhbNTQuOTgwNDk2ODMxNDU1LCA4Mi44OTcxNDA3MjUwOTRdLCAxOCk7XG4gICAgdmFyIGNzcyA9ICQoJ2hlYWQgW3JlbD1zdHlsZXNoZWV0XScpLmZpbHRlcihmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiAkKHRoaXMpLmF0dHIoJ2hyZWYnKS5pbmRleE9mKCdtYXBzLmFwaScpID4gLTE7XG4gICAgICAgIH0pLFxuICAgICAgICB1cmwgPSBjc3MuYXR0cignaHJlZicpLFxuICAgICAgICByZWdleCA9IC9za2luPShcXHcqKS8sXG4gICAgICAgIHRlc3QgPSB1cmwubWF0Y2gocmVnZXgpO1xuXG4gICAgbWFwLmdlb2NsaWNrZXIuZW5hYmxlKCk7XG4gICAgaWYgKCFtYXAuY29udHJvbHMucnVsZXIpIHtcbiAgICAgICAgbWFwLmNvbnRyb2xzLnJ1bGVyID0gREcuY29udHJvbC5ydWxlcigpLmFkZFRvKG1hcCk7XG4gICAgfVxuXG4gICAgbWFwLmZpcmUoJ2NsaWNrJywge2xhdGxuZzogbmV3IERHLkxhdExuZyg1NC45ODAxODczMTQ5MDc1NSwgODIuODk4MDI1NTEyNjk1MzEpfSk7XG5cbiAgICBjc3MuYXR0cignaHJlZicsIHRlc3QgPyB1cmwucmVwbGFjZShyZWdleCwgJyZza2luPScgKyBza2luKSA6ICh1cmwgKyAnJnNraW49JyArIHNraW4pKTtcblxuICAgIHJldHVybiBtYXA7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihtYXAsIGFwcCkge1xuICAgIG1hcC5zZXRWaWV3KFs1NS43NTU2MTY4OTQwNDcyMTUsIDM3LjYwMDcwODAwNzgxMjUxXSwgMTApO1xuXG4gICAgaWYgKG1hcC5jbHVzdGVycykge1xuICAgICAgICByZXR1cm4gbWFwLmFkZExheWVyKG1hcC5jbHVzdGVycykuZml0Qm91bmRzKG1hcC5jbHVzdGVycy5nZXRCb3VuZHMoKSk7XG4gICAgfVxuXG4gICAgYXBwLnBsdWdpbnMubWFya2Vycy50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gYXBwLmJhbmtzO1xuICAgIH0pLnRoZW4oZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gZGF0YS5yZXN1bHQubWFya2VycztcblxuICAgICAgICB2YXIgbWFya2VycyA9IG1hcC5jbHVzdGVycyA9IEwubWFya2VyQ2x1c3Rlckdyb3VwKHtzaG93Q292ZXJhZ2VPbkhvdmVyOiBmYWxzZS8qLCBjaHVua2VkTG9hZGluZzogdHJ1ZSovfSk7XG5cbiAgICAgICAgZnVuY3Rpb24gcG9wdWxhdGUoKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJlc3VsdC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHZhciBtID0gTC5tYXJrZXIoW3Jlc3VsdFtpXS5sYXQsIHJlc3VsdFtpXS5sb25dKTtcbiAgICAgICAgICAgICAgICBtLmJpbmRMYWJlbChyZXN1bHRbaV0ubmFtZV9leC5wcmltYXJ5KTtcbiAgICAgICAgICAgICAgICBtYXJrZXJzLmFkZExheWVyKG0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcG9wdWxhdGUoKTtcblxuICAgICAgICBtYXAuYWRkTGF5ZXIobWFya2VycykuZml0Qm91bmRzKG1hcmtlcnMuZ2V0Qm91bmRzKCkpO1xuXG4gICAgfSk7XG5cbiAgICByZXR1cm4gbWFwO1xufTtcbiIsInZhciBCYWNrYm9uZSA9IHJlcXVpcmUoJ2JhY2tib25lJyk7XG5CYWNrYm9uZS4kID0gcmVxdWlyZSgnanF1ZXJ5Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFwcCkge1xuXHR2YXIgQmFzZVZpZXcgPSByZXF1aXJlKCcuL3ZpZXcvYmFzZScpKGFwcCk7XG5cdHJldHVybiBCYWNrYm9uZS5Sb3V0ZXIuZXh0ZW5kKHtcblx0XHRyb3V0ZXM6IHtcblx0XHRcdCcnOiAnaW5kZXgnLFxuXHRcdFx0JzpwYWdlJzogJ3JlbmRlclBhZ2UnXG5cdFx0fSxcblxuXHRcdGluaXRpYWxpemU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0YXBwLmJhc2UgPSBuZXcgQmFzZVZpZXcoe2VsOiAnYm9keScsIG1vZGVsOiBhcHAuc3RhdGV9KTtcblxuXHRcdFx0YXBwLnN0YXRlLm9uKCdjaGFuZ2U6cGFnZScsIHRoaXMudXBkYXRlLCB0aGlzKTtcblx0XHR9LFxuXG5cdFx0dXBkYXRlOiBmdW5jdGlvbigpIHtcblx0XHRcdHRoaXMubmF2aWdhdGUoJy8nICsgYXBwLnN0YXRlLmdldFBhZ2VOYW1lKCkpO1xuXHRcdH0sXG5cblx0XHRpbmRleDogZnVuY3Rpb24gKCkge1xuXHRcdFx0YXBwLnN0YXRlLnNldFBhZ2UoMCk7XG5cdFx0fSxcblxuXHRcdHJlbmRlclBhZ2U6IGZ1bmN0aW9uKHBhZ2UpIHtcblx0XHRcdGFwcC5zdGF0ZS5zZXRQYWdlTmFtZShwYWdlKTtcblx0XHR9XG5cdH0pO1xufSIsInZhciBCYWNrYm9uZSA9IHJlcXVpcmUoJ2JhY2tib25lJyk7XG5CYWNrYm9uZS4kID0gcmVxdWlyZSgnanF1ZXJ5Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG5cdHJldHVybiBCYWNrYm9uZS5Nb2RlbC5leHRlbmQoe1xuXHRcdGRlZmF1bHRzOiB7XG5cdFx0XHRtYXg6IDcsXG5cdFx0XHRwYWdlczogW1xuXHRcdFx0XHQnaW5kZXgnLFxuXHRcdFx0XHQnbGlnaHRuZXNzJyxcblx0XHRcdFx0J21vZHVsYXJpdHknLFxuXHRcdFx0XHQndGhlbWVzJyxcblx0XHRcdFx0J2VudHJhbmNlcycsXG5cdFx0XHRcdCdvcGVubmVzcycsXG5cdFx0XHRcdCdtb2JpbGUnLFxuXHRcdFx0XHQnc3RhcnQnXG5cdFx0XHRdXG5cdFx0fSxcblxuXHRcdHZhbGlkYXRlOiBmdW5jdGlvbihhdHRycywgb3B0aW9ucykge1xuXHRcdFx0aWYgKGF0dHJzLnBhZ2UgPiBhdHRycy5tYXgpIHtcblx0XHRcdFx0cmV0dXJuICdlcnJvcic7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChhdHRycy5wYWdlIDwgMCkge1xuXHRcdFx0XHRyZXR1cm4gJ2Vycm9yJztcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0Z2V0UGFnZU5hbWU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZ2V0KCdwYWdlcycpW3RoaXMuZ2V0KCdwYWdlJyldO1xuXHRcdH0sXG5cblx0XHRzZXRQYWdlTmFtZTogZnVuY3Rpb24ocGFnZSwgc2lsZW50KSB7XG5cdFx0XHR2YXIgcGFnZU51bSA9IHRoaXMuZ2V0KCdwYWdlcycpLmluZGV4T2YocGFnZSk7XG5cdFx0XHRpZiAocGFnZU51bSA9PT0gLTEpIHsgcGFnZU51bSA9IDA7IH1cblx0XHRcdHRoaXMuc2V0KCdwYWdlJywgcGFnZU51bSwge3ZhbGlkYXRlOnRydWUsIHNpbGVudDogc2lsZW50fSk7XG5cdFx0fSxcblxuXHRcdHNldFBhZ2U6IGZ1bmN0aW9uKHBhZ2UsIHNpbGVudCkge1xuXHRcdFx0dGhpcy5zZXQoJ3BhZ2UnLCBwYWdlLCB7dmFsaWRhdGU6dHJ1ZSwgc2lsZW50OiBzaWxlbnR9KTtcblx0XHR9LFxuXG5cdFx0dXBQYWdlOiBmdW5jdGlvbigpIHtcblx0XHRcdHRoaXMuc2V0KCdwYWdlJywgK3RoaXMuZ2V0KCdwYWdlJykgKyAxLCB7dmFsaWRhdGU6dHJ1ZX0pO1xuXHRcdH0sXG5cblx0XHRkb3duUGFnZTogZnVuY3Rpb24oKSB7XG5cdFx0XHR0aGlzLnNldCgncGFnZScsICt0aGlzLmdldCgncGFnZScpIC0gMSwge3ZhbGlkYXRlOnRydWV9KTtcblx0XHR9XG5cdH0pO1xufTsiLCJ2YXIgQmFja2JvbmUgPSByZXF1aXJlKCdiYWNrYm9uZScpO1xuQmFja2JvbmUuJCA9IHJlcXVpcmUoJ2pxdWVyeScpO1xucmVxdWlyZSgnLi4vLi4vcG9seWZpbGwvaW5kZXhPZicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGFwcCkge1xuXHR2YXIgTWFwVmlldyA9IHJlcXVpcmUoJy4vbWFwJykoYXBwKSxcblx0XHRDb250cm9sVmlldyA9IHJlcXVpcmUoJy4vY29udHJvbCcpKGFwcCksXG5cdFx0Rm9vdGVyVmlldyA9IHJlcXVpcmUoJy4vZm9vdGVyJykoYXBwKTtcblx0cmV0dXJuIEJhY2tib25lLlZpZXcuZXh0ZW5kKHtcblx0XHRldmVudHM6IHtcblx0XHRcdCdjbGljayAuaW50cm8nOiAnc3RhcnQnLFxuXHRcdFx0J3Njcm9sbCAuaW50cm8nOiAnc3RhcnQnXG5cdFx0fSxcblxuXHRcdHRlbXBsYXRlOiB7XG5cdFx0XHRpbnRybzogcmVxdWlyZSgnLi4vLi4vcGFnZXMvaW5kZXgnKSxcblx0XHRcdG1hcDogcmVxdWlyZSgnLi4vLi4vcGFydGlhbHMvbWFwJyksXG5cdFx0XHRvdXRybzogcmVxdWlyZSgnLi4vLi4vcGFnZXMvc3RhcnQnKVxuXHRcdH0sXG5cblx0XHRpbml0aWFsaXplOiBmdW5jdGlvbigpIHtcblx0XHRcdHRoaXMubW9kZWwub24oJ2NoYW5nZTpwYWdlJywgdGhpcy51cGRhdGUsIHRoaXMpO1xuXG5cdFx0XHR0aGlzLm1hcCA9IG5ldyBNYXBWaWV3KHttb2RlbDogdGhpcy5tb2RlbH0pO1xuXHRcdFx0dGhpcy5jb250cm9sID0gbmV3IENvbnRyb2xWaWV3KHttb2RlbDogdGhpcy5tb2RlbH0pO1xuXHRcdFx0dGhpcy5mb290ZXIgPSBuZXcgRm9vdGVyVmlldyh7bW9kZWw6IHRoaXMubW9kZWx9KTtcblxuXHRcdFx0dGhpcy5yZW5kZXIoKTtcblx0XHR9LFxuXG5cdFx0dXBkYXRlOiBmdW5jdGlvbigpIHtcblx0XHRcdHRoaXMuJCgnLm1hcCcpWyhbMCwgMSwgJzAnLCAnMScsIHRoaXMubW9kZWwuZ2V0KCdtYXgnKV0uaW5kZXhPZih0aGlzLm1vZGVsLmdldCgncGFnZScpKSAhPT0gLTEgPyAnYWRkJyA6ICdyZW1vdmUnKSArICdDbGFzcyddKCdtYXBfaGFzLW92ZXJsYXlfZGFyaycpO1xuXHRcdFx0dGhpcy4kKCcuaW50cm8nKVsodGhpcy5tb2RlbC5nZXQoJ3BhZ2UnKSAhPSAwID8gJ2FkZCcgOiAncmVtb3ZlJykgKyAnQ2xhc3MnXSgnaW50cm9faXMtc3RhcnRlZF90cnVlJyk7XG5cdFx0XHR0aGlzLiQoJy5zdGFydCcpWyh0aGlzLm1vZGVsLmdldCgncGFnZScpICE9IHRoaXMubW9kZWwuZ2V0KCdtYXgnKSA/ICdhZGQnIDogJ3JlbW92ZScpICsgJ0NsYXNzJ10oJ3N0YXJ0X2lzLXN0YXJ0ZWRfdHJ1ZScpO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fSxcblxuXHRcdHN0YXJ0OiBmdW5jdGlvbigpIHtcblx0XHRcdHRoaXMubW9kZWwudXBQYWdlKCk7XG5cdFx0fSxcblxuXHRcdHJlbmRlcjogZnVuY3Rpb24oKSB7XG5cdFx0XHR0aGlzLiRlbC5odG1sKFtcblx0XHRcdFx0dGhpcy50ZW1wbGF0ZS5tYXAucmVuZGVyKCksXG5cdFx0XHRcdHRoaXMudGVtcGxhdGUuaW50cm8ucmVuZGVyKHtsYXlvdXQ6IHRydWV9KSxcblx0XHRcdFx0dGhpcy50ZW1wbGF0ZS5vdXRyby5yZW5kZXIoe2xheW91dDogdHJ1ZX0pXG5cdFx0XHRcdF0uam9pbignJykpO1xuXG5cdFx0XHR0aGlzLiRlbC5hcHBlbmQodGhpcy5tYXAuJGVsKTtcblx0XHRcdHRoaXMuJGVsLmFwcGVuZCh0aGlzLmNvbnRyb2wuJGVsKTtcblx0XHRcdHRoaXMuJGVsLmFwcGVuZCh0aGlzLmZvb3Rlci4kZWwpO1xuXG5cdFx0XHR0aGlzLnVwZGF0ZSgpO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXHR9KTtcbn07XG4iLCJ2YXIgQmFja2JvbmUgPSByZXF1aXJlKCdiYWNrYm9uZScpO1xuQmFja2JvbmUuJCA9IHJlcXVpcmUoJ2pxdWVyeScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcHApIHtcbiAgICByZXR1cm4gQmFja2JvbmUuVmlldy5leHRlbmQoe1xuICAgICAgICBldmVudHM6IHtcbiAgICAgICAgICAgICdjbGljayAuZmVhdHVyZXNfX2Fycm93LWxpbmtfdG9fcmlnaHQnOiAnbmV4dCcsXG4gICAgICAgICAgICAnY2xpY2sgLmZlYXR1cmVzX19hcnJvdy1saW5rX3RvX2xlZnQnOiAncHJldicsXG4gICAgICAgICAgICAnY2xpY2sgLmZlYXR1cmVzX190YWJsZS1vZi1jb250ZW50cy1pdGVtJzogJ2dvUGFnZScsXG4gICAgICAgICAgICAnY2xpY2sgLmZlYXR1cmVzX19yb3VuZC1saW5rJzogJ3NldFN0YXRlJyxcbiAgICAgICAgICAgICdjbGljayAub3Blbm5lc3MtZXhhbXBsZXNfX2xpc3QnOiAnaGFuZGxlU2xpZGVyJyxcbiAgICAgICAgICAgICdjbGljayAuZW50cmFuY2VzLWV4YW1wbGVzX19saXN0JzogJ2hhbmRsZVNsaWRlcicsXG4gICAgICAgICAgICAnY2xpY2sgLm9wZW5uZXNzLWV4YW1wbGVzX19wbGF5LXBhdXNlLWJ1dHRvbic6ICdoYW5kbGVTbGlkZXInLFxuICAgICAgICAgICAgJ2NsaWNrIC5lbnRyYW5jZXMtZXhhbXBsZXNfX3BsYXktcGF1c2UtYnV0dG9uJzogJ2hhbmRsZVNsaWRlcicsXG4gICAgICAgICAgICAnY2xpY2sgLnBzZXVkb2NhcmRfX2ZpbmQtZW50cmFuY2UtbGluayc6ICdfc2hvd0VudHJhbmNlJ1xuICAgICAgICB9LFxuXG4gICAgICAgIHRlbXBsYXRlOiByZXF1aXJlKCcuLi8uLi9wYXJ0aWFscy9oZWFkZXInKSxcblxuICAgICAgICBpbml0aWFsaXplOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGlzLm1vZGVsLm9uKCdjaGFuZ2U6cGFnZScsIHRoaXMudXBkYXRlLCB0aGlzKTtcbiAgICAgICAgICAgIHRoaXMuX2N1cnJJZCA9IDA7XG5cbiAgICAgICAgICAgIHRoaXMucmVuZGVyKCkudG9nZ2xlKCk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgdG9nZ2xlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgYWN0aW9uID0gKCh0aGlzLm1vZGVsLmdldCgncGFnZScpID09IDAgfHxcbiAgICAgICAgICAgICAgICB0aGlzLm1vZGVsLmdldCgncGFnZScpID09IHRoaXMubW9kZWwuZ2V0KCdtYXgnKSkgPyAncmVtb3ZlJyA6ICdhZGQnKSArICdDbGFzcyc7XG5cbiAgICAgICAgICAgIHRoaXMuJCgnLmZlYXR1cmVzJylbYWN0aW9uXSgnZmVhdHVyZXNfaXMtdmlzaWJsZV90cnVlJyk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfSxcblxuICAgICAgICBzZXRQYWdlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgcGlucyA9ICdmZWF0dXJlc19fdGFibGUtb2YtY29udGVudHMtaXRlbScsXG4gICAgICAgICAgICAgICAgdGFicyA9ICdmZWF0dXJlc19fbGlzdC1pdGVtJyxcbiAgICAgICAgICAgICAgICBhY3RpdmUgPSAnX2lzLWFjdGl2ZV90cnVlJyxcbiAgICAgICAgICAgICAgICBpdGVtID0gJzplcSgnICsgKHRoaXMubW9kZWwuZ2V0KCdwYWdlJykgLSAxKSArICcpJztcblxuICAgICAgICAgICAgdGhpcy4kKCcuJyArIHBpbnMgKyBhY3RpdmUpLnJlbW92ZUNsYXNzKHBpbnMgKyBhY3RpdmUpO1xuICAgICAgICAgICAgdGhpcy4kKCcuJyArIHRhYnMgKyBhY3RpdmUpLnJlbW92ZUNsYXNzKHRhYnMgKyBhY3RpdmUpO1xuXG4gICAgICAgICAgICB0aGlzLiQoJy4nICsgcGlucyArIGl0ZW0pLmFkZENsYXNzKHBpbnMgKyBhY3RpdmUpO1xuICAgICAgICAgICAgdGhpcy4kKCcuJyArIHRhYnMgKyBpdGVtKS5hZGRDbGFzcyh0YWJzICsgYWN0aXZlKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9LFxuXG4gICAgICAgIHVwZGF0ZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy50b2dnbGUoKS5zZXRQYWdlKCkuc2V0U3RhdGUoKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9LFxuXG4gICAgICAgIG5leHQ6IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICB0aGlzLm1vZGVsLnVwUGFnZSgpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcHJldjogZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIHRoaXMubW9kZWwuZG93blBhZ2UoKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9LFxuXG4gICAgICAgIGdvUGFnZTogZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIHRoaXMubW9kZWwuc2V0UGFnZSh0aGlzLiQoZS50YXJnZXQpLmluZGV4KCkgKyAxKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9LFxuXG4gICAgICAgIHNldFN0YXRlOiBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgdmFyICRlbCxcbiAgICAgICAgICAgICAgICBzdGF0ZSxcbiAgICAgICAgICAgICAgICBhY3RpdmVDbGFzcyA9ICdmZWF0dXJlc19fcm91bmQtbGluay1pcy1hY3RpdmVfdHJ1ZSc7XG4gICAgICAgICAgICBpZiAoZSkge1xuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAkZWwgPSB0aGlzLiQoZS50YXJnZXQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAkZWwgPSB0aGlzLiQoJy5mZWF0dXJlc19fbGlzdC1pdGVtX2lzLWFjdGl2ZV90cnVlIC5mZWF0dXJlc19fcm91bmQtbGluazplcSgwKScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy4kKCcuJyArIGFjdGl2ZUNsYXNzKS5yZW1vdmVDbGFzcyhhY3RpdmVDbGFzcyk7XG4gICAgICAgICAgICAkZWwuYWRkQ2xhc3MoYWN0aXZlQ2xhc3MpO1xuICAgICAgICAgICAgc3RhdGUgPSAkZWwuZGF0YSgnc3RhdGUnKSA/ICRlbC5kYXRhKCdzdGF0ZScpIDogJ3BhZ2UnICsgdGhpcy5tb2RlbC5nZXQoJ3BhZ2UnKTtcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKHN0YXRlKTtcbiAgICAgICAgICAgIHRoaXMubW9kZWwuc2V0KCdzdGF0ZScsIHN0YXRlKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9LFxuXG4gICAgICAgIC8vIHNsaWRlclxuICAgICAgICBoYW5kbGVTbGlkZXI6IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICB2YXIgdHlwZSA9IGUuY3VycmVudFRhcmdldC5jbGFzc05hbWUuc3BsaXQoJy0nKVswXSxcbiAgICAgICAgICAgICAgICAkZWwgPSB0aGlzLiQoZS50YXJnZXQpO1xuXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgICAgIGlmICgkZWwuaGFzQ2xhc3ModHlwZSArICctZXhhbXBsZXNfX2V4YW1wbGUtbGluaycpKSB7XG4gICAgICAgICAgICAgICAgdmFyIGlkID0gJGVsLmRhdGEoJ2lkJyk7XG4gICAgICAgICAgICAgICAgdGhpcy5fY3VycklkICE9PSBpZCAmJiB0aGlzLl9oYW5kbGVTbGlkZXJQb3MoaWQsICRlbCwgdHlwZSk7XG5cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoJGVsLmhhc0NsYXNzKHR5cGUgKyAnLWV4YW1wbGVzX19wbGF5LXBhdXNlLWJ1dHRvbicpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5faGFuZGxlU2xpZGVyU3RhcnQodHlwZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgX2hhbmRsZVNsaWRlclBvczogZnVuY3Rpb24gKGlkLCBlbCwgdHlwZSkge1xuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ0NIQU5HRSBTVEFURScsIGlkLCB0aGlzLl9jdXJySWQsIHRoaXMuX2N1cnJFbCk7XG4gICAgICAgICAgICB2YXIgYWN0aXZlQ2xhc3MgPSB0eXBlICsgJy1leGFtcGxlc19fZXhhbXBsZS1saW5rX2lzLXNob3duX3RydWUnLFxuICAgICAgICAgICAgICAgIGwgPSB0eXBlLmxlbmd0aCAtIDEsXG4gICAgICAgICAgICAgICAgZXZlbnROYW1lID0gdHlwZS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHR5cGUuc2xpY2UoMSwgbCk7XG5cbiAgICAgICAgICAgIHRoaXMuX2N1cnJFbC5yZW1vdmVDbGFzcyhhY3RpdmVDbGFzcyk7XG4gICAgICAgICAgICBlbC5hZGRDbGFzcyhhY3RpdmVDbGFzcyk7XG5cbiAgICAgICAgICAgIHRoaXMuX2N1cnJJZCA9IGlkO1xuICAgICAgICAgICAgdGhpcy5fY3VyckVsID0gZWw7XG5cbiAgICAgICAgICAgIGFwcC52ZW50LnRyaWdnZXIoJ2NoYW5nZScgKyBldmVudE5hbWUsIHtpZDogdGhpcy5fY3VycklkfSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgX2hhbmRsZVNsaWRlclN0YXJ0OiBmdW5jdGlvbiAodHlwZSkge1xuICAgICAgICAgICAgLy9jb25zb2xlLmxvZyh0aGlzLl9jdXJySWQgKyAxLCB0aGlzLl9jdXJyRWwsIHRoaXMuX2N1cnJFbC5wYXJlbnQoKS5uZXh0KCkuY2hpbGRyZW4oKSk7XG4gICAgICAgICAgICBpZiAoIXRoaXMuX2ludGVydmFsKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ3N0YXJ0IGF1dG8gc2xpZGUnKTtcblxuICAgICAgICAgICAgICAgIHRoaXMuX2ludGVydmFsID0gd2luZG93LnNldEludGVydmFsKHRoaXMuX3N0YXJ0U2xpZGVyLmJpbmQodGhpcyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDE1MDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB3aW5kb3cuY2xlYXJJbnRlcnZhbCh0aGlzLl9pbnRlcnZhbCk7XG4gICAgICAgICAgICAgICAgdGhpcy5faW50ZXJ2YWwgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgX3N0YXJ0U2xpZGVyOiBmdW5jdGlvbiAodHlwZSkge1xuICAgICAgICAgICAgdmFyIGlkID0gdGhpcy5fY3VycklkICsgMSxcbiAgICAgICAgICAgICAgICBlbCA9IHRoaXMuX2N1cnJFbC5wYXJlbnQoKS5uZXh0KCkuY2hpbGRyZW4oKTtcbiAgICAgICAgICAgIHRoaXMuX2hhbmRsZVNsaWRlclBvcyhpZCwgZWwsIHR5cGUpO1xuICAgICAgICB9LFxuXG4gICAgICAgIF9zaG93RW50cmFuY2U6IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBhcHAudmVudC50cmlnZ2VyKCdzaG93RW50cmFuY2UnLCB7aWQ6IHRoaXMuX2N1cnJJZH0pO1xuICAgICAgICB9LFxuXG4gICAgICAgIHJlbmRlcjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy4kZWwuaHRtbCh0aGlzLnRlbXBsYXRlLnJlbmRlcigpKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgfSk7XG59O1xuIiwidmFyIEJhY2tib25lID0gcmVxdWlyZSgnYmFja2JvbmUnKTtcbkJhY2tib25lLiQgPSByZXF1aXJlKCdqcXVlcnknKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihhcHApIHtcblx0cmV0dXJuIEJhY2tib25lLlZpZXcuZXh0ZW5kKHtcblx0XHR0ZW1wbGF0ZTogcmVxdWlyZSgnLi4vLi4vcGFydGlhbHMvZm9vdGVyJyksXG5cblx0XHRpbml0aWFsaXplOiBmdW5jdGlvbigpIHtcblx0XHRcdHRoaXMubW9kZWwub24oJ2NoYW5nZTpzdGF0ZScsIHRoaXMuc2V0U3RhdGUsIHRoaXMpO1xuXHRcdFx0dGhpcy5yZW5kZXIoKS5zZXRTdGF0ZSgpO1xuXHRcdH0sXG5cblx0XHRzZXRTdGF0ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgdGFicyA9ICdmb290ZXJfX3BhbmVsJyxcblx0XHRcdFx0YWN0aXZlID0gJ19pcy1hY3RpdmVfdHJ1ZScsXG5cdFx0XHRcdGl0ZW0gPSAnW2RhdGEtZm9vdGVyLXN0YXRlPScgKyB0aGlzLm1vZGVsLmdldCgnc3RhdGUnKSArICddJztcblxuXHRcdFx0dGhpcy4kKCcuJyArIHRhYnMgKyBhY3RpdmUpLnJlbW92ZUNsYXNzKHRhYnMgKyBhY3RpdmUpO1xuXHRcdFx0dGhpcy4kKGl0ZW0pLmFkZENsYXNzKHRhYnMgKyBhY3RpdmUpO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fSxcblxuXHRcdHJlbmRlcjogZnVuY3Rpb24oKSB7XG5cdFx0XHR0aGlzLiRlbC5odG1sKHRoaXMudGVtcGxhdGUucmVuZGVyKCkpO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXHR9KTtcbn07XG4iLCJ2YXIgQmFja2JvbmUgPSByZXF1aXJlKCdiYWNrYm9uZScpLFxuXHRfID0gcmVxdWlyZSgndW5kZXJzY29yZScpLFxuXHRtYXBzID0gcmVxdWlyZSgnLi4vbWFwcycpO1xuQmFja2JvbmUuJCA9IHJlcXVpcmUoJ2pxdWVyeScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGFwcCkge1xuXHRyZXR1cm4gQmFja2JvbmUuVmlldy5leHRlbmQoe1xuXG5cdFx0bWFwT3B0czogZnVuY3Rpb24gKCkge1xuXHRcdFx0cmV0dXJuIHtcblx0ICAgICAgICAgICAgJ2NlbnRlcic6IG5ldyBERy5MYXRMbmcoNTQuOTgwMTU2ODMxNDU1LCA4Mi44OTc0NDA3MjUwOTQpLFxuXHQgICAgICAgICAgICAnem9vbSc6IDEzLFxuXHQgICAgICAgICAgICAnZ2VvY2xpY2tlcic6IGZhbHNlLFxuXHQgICAgICAgICAgICAnd29ybGRDb3B5SnVtcCc6IHRydWUsXG5cdCAgICAgICAgICAgICdsb2NhdGlvbkNvbnRyb2wnOiBmYWxzZSxcblx0ICAgICAgICAgICAgJ3pvb21Db250cm9sJzogdHJ1ZSxcblx0ICAgICAgICAgICAgJ2Z1bGxzY3JlZW5Db250cm9sJzogZmFsc2Vcblx0XHRcdH07XG4gICAgICAgIH0sXG5cblx0XHRpbml0aWFsaXplOiBmdW5jdGlvbigpIHtcblx0XHRcdHRoaXMubW9kZWwub24oJ2NoYW5nZTpzdGF0ZScsIHRoaXMudXBkYXRlLCB0aGlzKTtcblx0XHRcdERHLnRoZW4oXy5iaW5kKHRoaXMucmVuZGVyLCB0aGlzKSk7XG5cdFx0fSxcblxuXHRcdHVwZGF0ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRERy50aGVuKF8uYmluZChmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIG1hcCA9IHRoaXMubW9kZWwuZ2V0KCdtYXAnKSxcblx0XHRcdFx0XHRzY2VuZSA9IG1hcHNbdGhpcy5tb2RlbC5nZXQoJ3N0YXRlJyldO1xuXG5cdFx0XHRcdG1hcHMucmVzZXQobWFwLCBhcHApO1xuXHRcdFx0XHRzY2VuZSAmJiBzY2VuZShtYXAsIGFwcCk7XG5cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LCB0aGlzKSk7XG5cdFx0fSxcblxuXHRcdHJlbmRlcjogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgbWFwID0gbmV3IERHLk1hcCgnbWFwJywgdGhpcy5tYXBPcHRzKCkpO1xuXHRcdFx0bWFwcy5zZXR1cChtYXAsIGFwcCk7XG5cdFx0XHRtYXAuY29udHJvbHMgPSB7XG5cdFx0XHRcdGZ1bGxzY3JlZW46IERHLmNvbnRyb2wuZnVsbHNjcmVlbigpXG5cdFx0XHR9O1xuXHRcdFx0bWFwLnpvb21Db250cm9sLnNldFBvc2l0aW9uKCd0b3ByaWdodCcpO1xuXHRcdFx0bWFwLmNvbnRyb2xzLmZ1bGxzY3JlZW4uYWRkVG8obWFwKTtcblx0XHRcdHRoaXMubW9kZWwuc2V0KCdtYXAnLCBtYXApO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXHR9KTtcbn07XG4iLCIvLyAgICAgQmFja2JvbmUuanMgMS4xLjJcblxuLy8gICAgIChjKSAyMDEwLTIwMTQgSmVyZW15IEFzaGtlbmFzLCBEb2N1bWVudENsb3VkIGFuZCBJbnZlc3RpZ2F0aXZlIFJlcG9ydGVycyAmIEVkaXRvcnNcbi8vICAgICBCYWNrYm9uZSBtYXkgYmUgZnJlZWx5IGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbi8vICAgICBGb3IgYWxsIGRldGFpbHMgYW5kIGRvY3VtZW50YXRpb246XG4vLyAgICAgaHR0cDovL2JhY2tib25lanMub3JnXG5cbihmdW5jdGlvbihyb290LCBmYWN0b3J5KSB7XG5cbiAgLy8gU2V0IHVwIEJhY2tib25lIGFwcHJvcHJpYXRlbHkgZm9yIHRoZSBlbnZpcm9ubWVudC4gU3RhcnQgd2l0aCBBTUQuXG4gIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHtcbiAgICBkZWZpbmUoWyd1bmRlcnNjb3JlJywgJ2pxdWVyeScsICdleHBvcnRzJ10sIGZ1bmN0aW9uKF8sICQsIGV4cG9ydHMpIHtcbiAgICAgIC8vIEV4cG9ydCBnbG9iYWwgZXZlbiBpbiBBTUQgY2FzZSBpbiBjYXNlIHRoaXMgc2NyaXB0IGlzIGxvYWRlZCB3aXRoXG4gICAgICAvLyBvdGhlcnMgdGhhdCBtYXkgc3RpbGwgZXhwZWN0IGEgZ2xvYmFsIEJhY2tib25lLlxuICAgICAgcm9vdC5CYWNrYm9uZSA9IGZhY3Rvcnkocm9vdCwgZXhwb3J0cywgXywgJCk7XG4gICAgfSk7XG5cbiAgLy8gTmV4dCBmb3IgTm9kZS5qcyBvciBDb21tb25KUy4galF1ZXJ5IG1heSBub3QgYmUgbmVlZGVkIGFzIGEgbW9kdWxlLlxuICB9IGVsc2UgaWYgKHR5cGVvZiBleHBvcnRzICE9PSAndW5kZWZpbmVkJykge1xuICAgIHZhciBfID0gcmVxdWlyZSgndW5kZXJzY29yZScpO1xuICAgIGZhY3Rvcnkocm9vdCwgZXhwb3J0cywgXyk7XG5cbiAgLy8gRmluYWxseSwgYXMgYSBicm93c2VyIGdsb2JhbC5cbiAgfSBlbHNlIHtcbiAgICByb290LkJhY2tib25lID0gZmFjdG9yeShyb290LCB7fSwgcm9vdC5fLCAocm9vdC5qUXVlcnkgfHwgcm9vdC5aZXB0byB8fCByb290LmVuZGVyIHx8IHJvb3QuJCkpO1xuICB9XG5cbn0odGhpcywgZnVuY3Rpb24ocm9vdCwgQmFja2JvbmUsIF8sICQpIHtcblxuICAvLyBJbml0aWFsIFNldHVwXG4gIC8vIC0tLS0tLS0tLS0tLS1cblxuICAvLyBTYXZlIHRoZSBwcmV2aW91cyB2YWx1ZSBvZiB0aGUgYEJhY2tib25lYCB2YXJpYWJsZSwgc28gdGhhdCBpdCBjYW4gYmVcbiAgLy8gcmVzdG9yZWQgbGF0ZXIgb24sIGlmIGBub0NvbmZsaWN0YCBpcyB1c2VkLlxuICB2YXIgcHJldmlvdXNCYWNrYm9uZSA9IHJvb3QuQmFja2JvbmU7XG5cbiAgLy8gQ3JlYXRlIGxvY2FsIHJlZmVyZW5jZXMgdG8gYXJyYXkgbWV0aG9kcyB3ZSdsbCB3YW50IHRvIHVzZSBsYXRlci5cbiAgdmFyIGFycmF5ID0gW107XG4gIHZhciBwdXNoID0gYXJyYXkucHVzaDtcbiAgdmFyIHNsaWNlID0gYXJyYXkuc2xpY2U7XG4gIHZhciBzcGxpY2UgPSBhcnJheS5zcGxpY2U7XG5cbiAgLy8gQ3VycmVudCB2ZXJzaW9uIG9mIHRoZSBsaWJyYXJ5LiBLZWVwIGluIHN5bmMgd2l0aCBgcGFja2FnZS5qc29uYC5cbiAgQmFja2JvbmUuVkVSU0lPTiA9ICcxLjEuMic7XG5cbiAgLy8gRm9yIEJhY2tib25lJ3MgcHVycG9zZXMsIGpRdWVyeSwgWmVwdG8sIEVuZGVyLCBvciBNeSBMaWJyYXJ5IChraWRkaW5nKSBvd25zXG4gIC8vIHRoZSBgJGAgdmFyaWFibGUuXG4gIEJhY2tib25lLiQgPSAkO1xuXG4gIC8vIFJ1bnMgQmFja2JvbmUuanMgaW4gKm5vQ29uZmxpY3QqIG1vZGUsIHJldHVybmluZyB0aGUgYEJhY2tib25lYCB2YXJpYWJsZVxuICAvLyB0byBpdHMgcHJldmlvdXMgb3duZXIuIFJldHVybnMgYSByZWZlcmVuY2UgdG8gdGhpcyBCYWNrYm9uZSBvYmplY3QuXG4gIEJhY2tib25lLm5vQ29uZmxpY3QgPSBmdW5jdGlvbigpIHtcbiAgICByb290LkJhY2tib25lID0gcHJldmlvdXNCYWNrYm9uZTtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICAvLyBUdXJuIG9uIGBlbXVsYXRlSFRUUGAgdG8gc3VwcG9ydCBsZWdhY3kgSFRUUCBzZXJ2ZXJzLiBTZXR0aW5nIHRoaXMgb3B0aW9uXG4gIC8vIHdpbGwgZmFrZSBgXCJQQVRDSFwiYCwgYFwiUFVUXCJgIGFuZCBgXCJERUxFVEVcImAgcmVxdWVzdHMgdmlhIHRoZSBgX21ldGhvZGAgcGFyYW1ldGVyIGFuZFxuICAvLyBzZXQgYSBgWC1IdHRwLU1ldGhvZC1PdmVycmlkZWAgaGVhZGVyLlxuICBCYWNrYm9uZS5lbXVsYXRlSFRUUCA9IGZhbHNlO1xuXG4gIC8vIFR1cm4gb24gYGVtdWxhdGVKU09OYCB0byBzdXBwb3J0IGxlZ2FjeSBzZXJ2ZXJzIHRoYXQgY2FuJ3QgZGVhbCB3aXRoIGRpcmVjdFxuICAvLyBgYXBwbGljYXRpb24vanNvbmAgcmVxdWVzdHMgLi4uIHdpbGwgZW5jb2RlIHRoZSBib2R5IGFzXG4gIC8vIGBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRgIGluc3RlYWQgYW5kIHdpbGwgc2VuZCB0aGUgbW9kZWwgaW4gYVxuICAvLyBmb3JtIHBhcmFtIG5hbWVkIGBtb2RlbGAuXG4gIEJhY2tib25lLmVtdWxhdGVKU09OID0gZmFsc2U7XG5cbiAgLy8gQmFja2JvbmUuRXZlbnRzXG4gIC8vIC0tLS0tLS0tLS0tLS0tLVxuXG4gIC8vIEEgbW9kdWxlIHRoYXQgY2FuIGJlIG1peGVkIGluIHRvICphbnkgb2JqZWN0KiBpbiBvcmRlciB0byBwcm92aWRlIGl0IHdpdGhcbiAgLy8gY3VzdG9tIGV2ZW50cy4gWW91IG1heSBiaW5kIHdpdGggYG9uYCBvciByZW1vdmUgd2l0aCBgb2ZmYCBjYWxsYmFja1xuICAvLyBmdW5jdGlvbnMgdG8gYW4gZXZlbnQ7IGB0cmlnZ2VyYC1pbmcgYW4gZXZlbnQgZmlyZXMgYWxsIGNhbGxiYWNrcyBpblxuICAvLyBzdWNjZXNzaW9uLlxuICAvL1xuICAvLyAgICAgdmFyIG9iamVjdCA9IHt9O1xuICAvLyAgICAgXy5leHRlbmQob2JqZWN0LCBCYWNrYm9uZS5FdmVudHMpO1xuICAvLyAgICAgb2JqZWN0Lm9uKCdleHBhbmQnLCBmdW5jdGlvbigpeyBhbGVydCgnZXhwYW5kZWQnKTsgfSk7XG4gIC8vICAgICBvYmplY3QudHJpZ2dlcignZXhwYW5kJyk7XG4gIC8vXG4gIHZhciBFdmVudHMgPSBCYWNrYm9uZS5FdmVudHMgPSB7XG5cbiAgICAvLyBCaW5kIGFuIGV2ZW50IHRvIGEgYGNhbGxiYWNrYCBmdW5jdGlvbi4gUGFzc2luZyBgXCJhbGxcImAgd2lsbCBiaW5kXG4gICAgLy8gdGhlIGNhbGxiYWNrIHRvIGFsbCBldmVudHMgZmlyZWQuXG4gICAgb246IGZ1bmN0aW9uKG5hbWUsIGNhbGxiYWNrLCBjb250ZXh0KSB7XG4gICAgICBpZiAoIWV2ZW50c0FwaSh0aGlzLCAnb24nLCBuYW1lLCBbY2FsbGJhY2ssIGNvbnRleHRdKSB8fCAhY2FsbGJhY2spIHJldHVybiB0aGlzO1xuICAgICAgdGhpcy5fZXZlbnRzIHx8ICh0aGlzLl9ldmVudHMgPSB7fSk7XG4gICAgICB2YXIgZXZlbnRzID0gdGhpcy5fZXZlbnRzW25hbWVdIHx8ICh0aGlzLl9ldmVudHNbbmFtZV0gPSBbXSk7XG4gICAgICBldmVudHMucHVzaCh7Y2FsbGJhY2s6IGNhbGxiYWNrLCBjb250ZXh0OiBjb250ZXh0LCBjdHg6IGNvbnRleHQgfHwgdGhpc30pO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8vIEJpbmQgYW4gZXZlbnQgdG8gb25seSBiZSB0cmlnZ2VyZWQgYSBzaW5nbGUgdGltZS4gQWZ0ZXIgdGhlIGZpcnN0IHRpbWVcbiAgICAvLyB0aGUgY2FsbGJhY2sgaXMgaW52b2tlZCwgaXQgd2lsbCBiZSByZW1vdmVkLlxuICAgIG9uY2U6IGZ1bmN0aW9uKG5hbWUsIGNhbGxiYWNrLCBjb250ZXh0KSB7XG4gICAgICBpZiAoIWV2ZW50c0FwaSh0aGlzLCAnb25jZScsIG5hbWUsIFtjYWxsYmFjaywgY29udGV4dF0pIHx8ICFjYWxsYmFjaykgcmV0dXJuIHRoaXM7XG4gICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICB2YXIgb25jZSA9IF8ub25jZShmdW5jdGlvbigpIHtcbiAgICAgICAgc2VsZi5vZmYobmFtZSwgb25jZSk7XG4gICAgICAgIGNhbGxiYWNrLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9KTtcbiAgICAgIG9uY2UuX2NhbGxiYWNrID0gY2FsbGJhY2s7XG4gICAgICByZXR1cm4gdGhpcy5vbihuYW1lLCBvbmNlLCBjb250ZXh0KTtcbiAgICB9LFxuXG4gICAgLy8gUmVtb3ZlIG9uZSBvciBtYW55IGNhbGxiYWNrcy4gSWYgYGNvbnRleHRgIGlzIG51bGwsIHJlbW92ZXMgYWxsXG4gICAgLy8gY2FsbGJhY2tzIHdpdGggdGhhdCBmdW5jdGlvbi4gSWYgYGNhbGxiYWNrYCBpcyBudWxsLCByZW1vdmVzIGFsbFxuICAgIC8vIGNhbGxiYWNrcyBmb3IgdGhlIGV2ZW50LiBJZiBgbmFtZWAgaXMgbnVsbCwgcmVtb3ZlcyBhbGwgYm91bmRcbiAgICAvLyBjYWxsYmFja3MgZm9yIGFsbCBldmVudHMuXG4gICAgb2ZmOiBmdW5jdGlvbihuYW1lLCBjYWxsYmFjaywgY29udGV4dCkge1xuICAgICAgdmFyIHJldGFpbiwgZXYsIGV2ZW50cywgbmFtZXMsIGksIGwsIGosIGs7XG4gICAgICBpZiAoIXRoaXMuX2V2ZW50cyB8fCAhZXZlbnRzQXBpKHRoaXMsICdvZmYnLCBuYW1lLCBbY2FsbGJhY2ssIGNvbnRleHRdKSkgcmV0dXJuIHRoaXM7XG4gICAgICBpZiAoIW5hbWUgJiYgIWNhbGxiYWNrICYmICFjb250ZXh0KSB7XG4gICAgICAgIHRoaXMuX2V2ZW50cyA9IHZvaWQgMDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgICBuYW1lcyA9IG5hbWUgPyBbbmFtZV0gOiBfLmtleXModGhpcy5fZXZlbnRzKTtcbiAgICAgIGZvciAoaSA9IDAsIGwgPSBuYW1lcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgbmFtZSA9IG5hbWVzW2ldO1xuICAgICAgICBpZiAoZXZlbnRzID0gdGhpcy5fZXZlbnRzW25hbWVdKSB7XG4gICAgICAgICAgdGhpcy5fZXZlbnRzW25hbWVdID0gcmV0YWluID0gW107XG4gICAgICAgICAgaWYgKGNhbGxiYWNrIHx8IGNvbnRleHQpIHtcbiAgICAgICAgICAgIGZvciAoaiA9IDAsIGsgPSBldmVudHMubGVuZ3RoOyBqIDwgazsgaisrKSB7XG4gICAgICAgICAgICAgIGV2ID0gZXZlbnRzW2pdO1xuICAgICAgICAgICAgICBpZiAoKGNhbGxiYWNrICYmIGNhbGxiYWNrICE9PSBldi5jYWxsYmFjayAmJiBjYWxsYmFjayAhPT0gZXYuY2FsbGJhY2suX2NhbGxiYWNrKSB8fFxuICAgICAgICAgICAgICAgICAgKGNvbnRleHQgJiYgY29udGV4dCAhPT0gZXYuY29udGV4dCkpIHtcbiAgICAgICAgICAgICAgICByZXRhaW4ucHVzaChldik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCFyZXRhaW4ubGVuZ3RoKSBkZWxldGUgdGhpcy5fZXZlbnRzW25hbWVdO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvLyBUcmlnZ2VyIG9uZSBvciBtYW55IGV2ZW50cywgZmlyaW5nIGFsbCBib3VuZCBjYWxsYmFja3MuIENhbGxiYWNrcyBhcmVcbiAgICAvLyBwYXNzZWQgdGhlIHNhbWUgYXJndW1lbnRzIGFzIGB0cmlnZ2VyYCBpcywgYXBhcnQgZnJvbSB0aGUgZXZlbnQgbmFtZVxuICAgIC8vICh1bmxlc3MgeW91J3JlIGxpc3RlbmluZyBvbiBgXCJhbGxcImAsIHdoaWNoIHdpbGwgY2F1c2UgeW91ciBjYWxsYmFjayB0b1xuICAgIC8vIHJlY2VpdmUgdGhlIHRydWUgbmFtZSBvZiB0aGUgZXZlbnQgYXMgdGhlIGZpcnN0IGFyZ3VtZW50KS5cbiAgICB0cmlnZ2VyOiBmdW5jdGlvbihuYW1lKSB7XG4gICAgICBpZiAoIXRoaXMuX2V2ZW50cykgcmV0dXJuIHRoaXM7XG4gICAgICB2YXIgYXJncyA9IHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcbiAgICAgIGlmICghZXZlbnRzQXBpKHRoaXMsICd0cmlnZ2VyJywgbmFtZSwgYXJncykpIHJldHVybiB0aGlzO1xuICAgICAgdmFyIGV2ZW50cyA9IHRoaXMuX2V2ZW50c1tuYW1lXTtcbiAgICAgIHZhciBhbGxFdmVudHMgPSB0aGlzLl9ldmVudHMuYWxsO1xuICAgICAgaWYgKGV2ZW50cykgdHJpZ2dlckV2ZW50cyhldmVudHMsIGFyZ3MpO1xuICAgICAgaWYgKGFsbEV2ZW50cykgdHJpZ2dlckV2ZW50cyhhbGxFdmVudHMsIGFyZ3VtZW50cyk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLy8gVGVsbCB0aGlzIG9iamVjdCB0byBzdG9wIGxpc3RlbmluZyB0byBlaXRoZXIgc3BlY2lmaWMgZXZlbnRzIC4uLiBvclxuICAgIC8vIHRvIGV2ZXJ5IG9iamVjdCBpdCdzIGN1cnJlbnRseSBsaXN0ZW5pbmcgdG8uXG4gICAgc3RvcExpc3RlbmluZzogZnVuY3Rpb24ob2JqLCBuYW1lLCBjYWxsYmFjaykge1xuICAgICAgdmFyIGxpc3RlbmluZ1RvID0gdGhpcy5fbGlzdGVuaW5nVG87XG4gICAgICBpZiAoIWxpc3RlbmluZ1RvKSByZXR1cm4gdGhpcztcbiAgICAgIHZhciByZW1vdmUgPSAhbmFtZSAmJiAhY2FsbGJhY2s7XG4gICAgICBpZiAoIWNhbGxiYWNrICYmIHR5cGVvZiBuYW1lID09PSAnb2JqZWN0JykgY2FsbGJhY2sgPSB0aGlzO1xuICAgICAgaWYgKG9iaikgKGxpc3RlbmluZ1RvID0ge30pW29iai5fbGlzdGVuSWRdID0gb2JqO1xuICAgICAgZm9yICh2YXIgaWQgaW4gbGlzdGVuaW5nVG8pIHtcbiAgICAgICAgb2JqID0gbGlzdGVuaW5nVG9baWRdO1xuICAgICAgICBvYmoub2ZmKG5hbWUsIGNhbGxiYWNrLCB0aGlzKTtcbiAgICAgICAgaWYgKHJlbW92ZSB8fCBfLmlzRW1wdHkob2JqLl9ldmVudHMpKSBkZWxldGUgdGhpcy5fbGlzdGVuaW5nVG9baWRdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gIH07XG5cbiAgLy8gUmVndWxhciBleHByZXNzaW9uIHVzZWQgdG8gc3BsaXQgZXZlbnQgc3RyaW5ncy5cbiAgdmFyIGV2ZW50U3BsaXR0ZXIgPSAvXFxzKy87XG5cbiAgLy8gSW1wbGVtZW50IGZhbmN5IGZlYXR1cmVzIG9mIHRoZSBFdmVudHMgQVBJIHN1Y2ggYXMgbXVsdGlwbGUgZXZlbnRcbiAgLy8gbmFtZXMgYFwiY2hhbmdlIGJsdXJcImAgYW5kIGpRdWVyeS1zdHlsZSBldmVudCBtYXBzIGB7Y2hhbmdlOiBhY3Rpb259YFxuICAvLyBpbiB0ZXJtcyBvZiB0aGUgZXhpc3RpbmcgQVBJLlxuICB2YXIgZXZlbnRzQXBpID0gZnVuY3Rpb24ob2JqLCBhY3Rpb24sIG5hbWUsIHJlc3QpIHtcbiAgICBpZiAoIW5hbWUpIHJldHVybiB0cnVlO1xuXG4gICAgLy8gSGFuZGxlIGV2ZW50IG1hcHMuXG4gICAgaWYgKHR5cGVvZiBuYW1lID09PSAnb2JqZWN0Jykge1xuICAgICAgZm9yICh2YXIga2V5IGluIG5hbWUpIHtcbiAgICAgICAgb2JqW2FjdGlvbl0uYXBwbHkob2JqLCBba2V5LCBuYW1lW2tleV1dLmNvbmNhdChyZXN0KSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIHNwYWNlIHNlcGFyYXRlZCBldmVudCBuYW1lcy5cbiAgICBpZiAoZXZlbnRTcGxpdHRlci50ZXN0KG5hbWUpKSB7XG4gICAgICB2YXIgbmFtZXMgPSBuYW1lLnNwbGl0KGV2ZW50U3BsaXR0ZXIpO1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBuYW1lcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgb2JqW2FjdGlvbl0uYXBwbHkob2JqLCBbbmFtZXNbaV1dLmNvbmNhdChyZXN0KSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH07XG5cbiAgLy8gQSBkaWZmaWN1bHQtdG8tYmVsaWV2ZSwgYnV0IG9wdGltaXplZCBpbnRlcm5hbCBkaXNwYXRjaCBmdW5jdGlvbiBmb3JcbiAgLy8gdHJpZ2dlcmluZyBldmVudHMuIFRyaWVzIHRvIGtlZXAgdGhlIHVzdWFsIGNhc2VzIHNwZWVkeSAobW9zdCBpbnRlcm5hbFxuICAvLyBCYWNrYm9uZSBldmVudHMgaGF2ZSAzIGFyZ3VtZW50cykuXG4gIHZhciB0cmlnZ2VyRXZlbnRzID0gZnVuY3Rpb24oZXZlbnRzLCBhcmdzKSB7XG4gICAgdmFyIGV2LCBpID0gLTEsIGwgPSBldmVudHMubGVuZ3RoLCBhMSA9IGFyZ3NbMF0sIGEyID0gYXJnc1sxXSwgYTMgPSBhcmdzWzJdO1xuICAgIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICAgIGNhc2UgMDogd2hpbGUgKCsraSA8IGwpIChldiA9IGV2ZW50c1tpXSkuY2FsbGJhY2suY2FsbChldi5jdHgpOyByZXR1cm47XG4gICAgICBjYXNlIDE6IHdoaWxlICgrK2kgPCBsKSAoZXYgPSBldmVudHNbaV0pLmNhbGxiYWNrLmNhbGwoZXYuY3R4LCBhMSk7IHJldHVybjtcbiAgICAgIGNhc2UgMjogd2hpbGUgKCsraSA8IGwpIChldiA9IGV2ZW50c1tpXSkuY2FsbGJhY2suY2FsbChldi5jdHgsIGExLCBhMik7IHJldHVybjtcbiAgICAgIGNhc2UgMzogd2hpbGUgKCsraSA8IGwpIChldiA9IGV2ZW50c1tpXSkuY2FsbGJhY2suY2FsbChldi5jdHgsIGExLCBhMiwgYTMpOyByZXR1cm47XG4gICAgICBkZWZhdWx0OiB3aGlsZSAoKytpIDwgbCkgKGV2ID0gZXZlbnRzW2ldKS5jYWxsYmFjay5hcHBseShldi5jdHgsIGFyZ3MpOyByZXR1cm47XG4gICAgfVxuICB9O1xuXG4gIHZhciBsaXN0ZW5NZXRob2RzID0ge2xpc3RlblRvOiAnb24nLCBsaXN0ZW5Ub09uY2U6ICdvbmNlJ307XG5cbiAgLy8gSW52ZXJzaW9uLW9mLWNvbnRyb2wgdmVyc2lvbnMgb2YgYG9uYCBhbmQgYG9uY2VgLiBUZWxsICp0aGlzKiBvYmplY3QgdG9cbiAgLy8gbGlzdGVuIHRvIGFuIGV2ZW50IGluIGFub3RoZXIgb2JqZWN0IC4uLiBrZWVwaW5nIHRyYWNrIG9mIHdoYXQgaXQnc1xuICAvLyBsaXN0ZW5pbmcgdG8uXG4gIF8uZWFjaChsaXN0ZW5NZXRob2RzLCBmdW5jdGlvbihpbXBsZW1lbnRhdGlvbiwgbWV0aG9kKSB7XG4gICAgRXZlbnRzW21ldGhvZF0gPSBmdW5jdGlvbihvYmosIG5hbWUsIGNhbGxiYWNrKSB7XG4gICAgICB2YXIgbGlzdGVuaW5nVG8gPSB0aGlzLl9saXN0ZW5pbmdUbyB8fCAodGhpcy5fbGlzdGVuaW5nVG8gPSB7fSk7XG4gICAgICB2YXIgaWQgPSBvYmouX2xpc3RlbklkIHx8IChvYmouX2xpc3RlbklkID0gXy51bmlxdWVJZCgnbCcpKTtcbiAgICAgIGxpc3RlbmluZ1RvW2lkXSA9IG9iajtcbiAgICAgIGlmICghY2FsbGJhY2sgJiYgdHlwZW9mIG5hbWUgPT09ICdvYmplY3QnKSBjYWxsYmFjayA9IHRoaXM7XG4gICAgICBvYmpbaW1wbGVtZW50YXRpb25dKG5hbWUsIGNhbGxiYWNrLCB0aGlzKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gIH0pO1xuXG4gIC8vIEFsaWFzZXMgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5LlxuICBFdmVudHMuYmluZCAgID0gRXZlbnRzLm9uO1xuICBFdmVudHMudW5iaW5kID0gRXZlbnRzLm9mZjtcblxuICAvLyBBbGxvdyB0aGUgYEJhY2tib25lYCBvYmplY3QgdG8gc2VydmUgYXMgYSBnbG9iYWwgZXZlbnQgYnVzLCBmb3IgZm9sa3Mgd2hvXG4gIC8vIHdhbnQgZ2xvYmFsIFwicHVic3ViXCIgaW4gYSBjb252ZW5pZW50IHBsYWNlLlxuICBfLmV4dGVuZChCYWNrYm9uZSwgRXZlbnRzKTtcblxuICAvLyBCYWNrYm9uZS5Nb2RlbFxuICAvLyAtLS0tLS0tLS0tLS0tLVxuXG4gIC8vIEJhY2tib25lICoqTW9kZWxzKiogYXJlIHRoZSBiYXNpYyBkYXRhIG9iamVjdCBpbiB0aGUgZnJhbWV3b3JrIC0tXG4gIC8vIGZyZXF1ZW50bHkgcmVwcmVzZW50aW5nIGEgcm93IGluIGEgdGFibGUgaW4gYSBkYXRhYmFzZSBvbiB5b3VyIHNlcnZlci5cbiAgLy8gQSBkaXNjcmV0ZSBjaHVuayBvZiBkYXRhIGFuZCBhIGJ1bmNoIG9mIHVzZWZ1bCwgcmVsYXRlZCBtZXRob2RzIGZvclxuICAvLyBwZXJmb3JtaW5nIGNvbXB1dGF0aW9ucyBhbmQgdHJhbnNmb3JtYXRpb25zIG9uIHRoYXQgZGF0YS5cblxuICAvLyBDcmVhdGUgYSBuZXcgbW9kZWwgd2l0aCB0aGUgc3BlY2lmaWVkIGF0dHJpYnV0ZXMuIEEgY2xpZW50IGlkIChgY2lkYClcbiAgLy8gaXMgYXV0b21hdGljYWxseSBnZW5lcmF0ZWQgYW5kIGFzc2lnbmVkIGZvciB5b3UuXG4gIHZhciBNb2RlbCA9IEJhY2tib25lLk1vZGVsID0gZnVuY3Rpb24oYXR0cmlidXRlcywgb3B0aW9ucykge1xuICAgIHZhciBhdHRycyA9IGF0dHJpYnV0ZXMgfHwge307XG4gICAgb3B0aW9ucyB8fCAob3B0aW9ucyA9IHt9KTtcbiAgICB0aGlzLmNpZCA9IF8udW5pcXVlSWQoJ2MnKTtcbiAgICB0aGlzLmF0dHJpYnV0ZXMgPSB7fTtcbiAgICBpZiAob3B0aW9ucy5jb2xsZWN0aW9uKSB0aGlzLmNvbGxlY3Rpb24gPSBvcHRpb25zLmNvbGxlY3Rpb247XG4gICAgaWYgKG9wdGlvbnMucGFyc2UpIGF0dHJzID0gdGhpcy5wYXJzZShhdHRycywgb3B0aW9ucykgfHwge307XG4gICAgYXR0cnMgPSBfLmRlZmF1bHRzKHt9LCBhdHRycywgXy5yZXN1bHQodGhpcywgJ2RlZmF1bHRzJykpO1xuICAgIHRoaXMuc2V0KGF0dHJzLCBvcHRpb25zKTtcbiAgICB0aGlzLmNoYW5nZWQgPSB7fTtcbiAgICB0aGlzLmluaXRpYWxpemUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfTtcblxuICAvLyBBdHRhY2ggYWxsIGluaGVyaXRhYmxlIG1ldGhvZHMgdG8gdGhlIE1vZGVsIHByb3RvdHlwZS5cbiAgXy5leHRlbmQoTW9kZWwucHJvdG90eXBlLCBFdmVudHMsIHtcblxuICAgIC8vIEEgaGFzaCBvZiBhdHRyaWJ1dGVzIHdob3NlIGN1cnJlbnQgYW5kIHByZXZpb3VzIHZhbHVlIGRpZmZlci5cbiAgICBjaGFuZ2VkOiBudWxsLFxuXG4gICAgLy8gVGhlIHZhbHVlIHJldHVybmVkIGR1cmluZyB0aGUgbGFzdCBmYWlsZWQgdmFsaWRhdGlvbi5cbiAgICB2YWxpZGF0aW9uRXJyb3I6IG51bGwsXG5cbiAgICAvLyBUaGUgZGVmYXVsdCBuYW1lIGZvciB0aGUgSlNPTiBgaWRgIGF0dHJpYnV0ZSBpcyBgXCJpZFwiYC4gTW9uZ29EQiBhbmRcbiAgICAvLyBDb3VjaERCIHVzZXJzIG1heSB3YW50IHRvIHNldCB0aGlzIHRvIGBcIl9pZFwiYC5cbiAgICBpZEF0dHJpYnV0ZTogJ2lkJyxcblxuICAgIC8vIEluaXRpYWxpemUgaXMgYW4gZW1wdHkgZnVuY3Rpb24gYnkgZGVmYXVsdC4gT3ZlcnJpZGUgaXQgd2l0aCB5b3VyIG93blxuICAgIC8vIGluaXRpYWxpemF0aW9uIGxvZ2ljLlxuICAgIGluaXRpYWxpemU6IGZ1bmN0aW9uKCl7fSxcblxuICAgIC8vIFJldHVybiBhIGNvcHkgb2YgdGhlIG1vZGVsJ3MgYGF0dHJpYnV0ZXNgIG9iamVjdC5cbiAgICB0b0pTT046IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgIHJldHVybiBfLmNsb25lKHRoaXMuYXR0cmlidXRlcyk7XG4gICAgfSxcblxuICAgIC8vIFByb3h5IGBCYWNrYm9uZS5zeW5jYCBieSBkZWZhdWx0IC0tIGJ1dCBvdmVycmlkZSB0aGlzIGlmIHlvdSBuZWVkXG4gICAgLy8gY3VzdG9tIHN5bmNpbmcgc2VtYW50aWNzIGZvciAqdGhpcyogcGFydGljdWxhciBtb2RlbC5cbiAgICBzeW5jOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBCYWNrYm9uZS5zeW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfSxcblxuICAgIC8vIEdldCB0aGUgdmFsdWUgb2YgYW4gYXR0cmlidXRlLlxuICAgIGdldDogZnVuY3Rpb24oYXR0cikge1xuICAgICAgcmV0dXJuIHRoaXMuYXR0cmlidXRlc1thdHRyXTtcbiAgICB9LFxuXG4gICAgLy8gR2V0IHRoZSBIVE1MLWVzY2FwZWQgdmFsdWUgb2YgYW4gYXR0cmlidXRlLlxuICAgIGVzY2FwZTogZnVuY3Rpb24oYXR0cikge1xuICAgICAgcmV0dXJuIF8uZXNjYXBlKHRoaXMuZ2V0KGF0dHIpKTtcbiAgICB9LFxuXG4gICAgLy8gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGF0dHJpYnV0ZSBjb250YWlucyBhIHZhbHVlIHRoYXQgaXMgbm90IG51bGxcbiAgICAvLyBvciB1bmRlZmluZWQuXG4gICAgaGFzOiBmdW5jdGlvbihhdHRyKSB7XG4gICAgICByZXR1cm4gdGhpcy5nZXQoYXR0cikgIT0gbnVsbDtcbiAgICB9LFxuXG4gICAgLy8gU2V0IGEgaGFzaCBvZiBtb2RlbCBhdHRyaWJ1dGVzIG9uIHRoZSBvYmplY3QsIGZpcmluZyBgXCJjaGFuZ2VcImAuIFRoaXMgaXNcbiAgICAvLyB0aGUgY29yZSBwcmltaXRpdmUgb3BlcmF0aW9uIG9mIGEgbW9kZWwsIHVwZGF0aW5nIHRoZSBkYXRhIGFuZCBub3RpZnlpbmdcbiAgICAvLyBhbnlvbmUgd2hvIG5lZWRzIHRvIGtub3cgYWJvdXQgdGhlIGNoYW5nZSBpbiBzdGF0ZS4gVGhlIGhlYXJ0IG9mIHRoZSBiZWFzdC5cbiAgICBzZXQ6IGZ1bmN0aW9uKGtleSwgdmFsLCBvcHRpb25zKSB7XG4gICAgICB2YXIgYXR0ciwgYXR0cnMsIHVuc2V0LCBjaGFuZ2VzLCBzaWxlbnQsIGNoYW5naW5nLCBwcmV2LCBjdXJyZW50O1xuICAgICAgaWYgKGtleSA9PSBudWxsKSByZXR1cm4gdGhpcztcblxuICAgICAgLy8gSGFuZGxlIGJvdGggYFwia2V5XCIsIHZhbHVlYCBhbmQgYHtrZXk6IHZhbHVlfWAgLXN0eWxlIGFyZ3VtZW50cy5cbiAgICAgIGlmICh0eXBlb2Yga2V5ID09PSAnb2JqZWN0Jykge1xuICAgICAgICBhdHRycyA9IGtleTtcbiAgICAgICAgb3B0aW9ucyA9IHZhbDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIChhdHRycyA9IHt9KVtrZXldID0gdmFsO1xuICAgICAgfVxuXG4gICAgICBvcHRpb25zIHx8IChvcHRpb25zID0ge30pO1xuXG4gICAgICAvLyBSdW4gdmFsaWRhdGlvbi5cbiAgICAgIGlmICghdGhpcy5fdmFsaWRhdGUoYXR0cnMsIG9wdGlvbnMpKSByZXR1cm4gZmFsc2U7XG5cbiAgICAgIC8vIEV4dHJhY3QgYXR0cmlidXRlcyBhbmQgb3B0aW9ucy5cbiAgICAgIHVuc2V0ICAgICAgICAgICA9IG9wdGlvbnMudW5zZXQ7XG4gICAgICBzaWxlbnQgICAgICAgICAgPSBvcHRpb25zLnNpbGVudDtcbiAgICAgIGNoYW5nZXMgICAgICAgICA9IFtdO1xuICAgICAgY2hhbmdpbmcgICAgICAgID0gdGhpcy5fY2hhbmdpbmc7XG4gICAgICB0aGlzLl9jaGFuZ2luZyAgPSB0cnVlO1xuXG4gICAgICBpZiAoIWNoYW5naW5nKSB7XG4gICAgICAgIHRoaXMuX3ByZXZpb3VzQXR0cmlidXRlcyA9IF8uY2xvbmUodGhpcy5hdHRyaWJ1dGVzKTtcbiAgICAgICAgdGhpcy5jaGFuZ2VkID0ge307XG4gICAgICB9XG4gICAgICBjdXJyZW50ID0gdGhpcy5hdHRyaWJ1dGVzLCBwcmV2ID0gdGhpcy5fcHJldmlvdXNBdHRyaWJ1dGVzO1xuXG4gICAgICAvLyBDaGVjayBmb3IgY2hhbmdlcyBvZiBgaWRgLlxuICAgICAgaWYgKHRoaXMuaWRBdHRyaWJ1dGUgaW4gYXR0cnMpIHRoaXMuaWQgPSBhdHRyc1t0aGlzLmlkQXR0cmlidXRlXTtcblxuICAgICAgLy8gRm9yIGVhY2ggYHNldGAgYXR0cmlidXRlLCB1cGRhdGUgb3IgZGVsZXRlIHRoZSBjdXJyZW50IHZhbHVlLlxuICAgICAgZm9yIChhdHRyIGluIGF0dHJzKSB7XG4gICAgICAgIHZhbCA9IGF0dHJzW2F0dHJdO1xuICAgICAgICBpZiAoIV8uaXNFcXVhbChjdXJyZW50W2F0dHJdLCB2YWwpKSBjaGFuZ2VzLnB1c2goYXR0cik7XG4gICAgICAgIGlmICghXy5pc0VxdWFsKHByZXZbYXR0cl0sIHZhbCkpIHtcbiAgICAgICAgICB0aGlzLmNoYW5nZWRbYXR0cl0gPSB2YWw7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGVsZXRlIHRoaXMuY2hhbmdlZFthdHRyXTtcbiAgICAgICAgfVxuICAgICAgICB1bnNldCA/IGRlbGV0ZSBjdXJyZW50W2F0dHJdIDogY3VycmVudFthdHRyXSA9IHZhbDtcbiAgICAgIH1cblxuICAgICAgLy8gVHJpZ2dlciBhbGwgcmVsZXZhbnQgYXR0cmlidXRlIGNoYW5nZXMuXG4gICAgICBpZiAoIXNpbGVudCkge1xuICAgICAgICBpZiAoY2hhbmdlcy5sZW5ndGgpIHRoaXMuX3BlbmRpbmcgPSBvcHRpb25zO1xuICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGNoYW5nZXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgdGhpcy50cmlnZ2VyKCdjaGFuZ2U6JyArIGNoYW5nZXNbaV0sIHRoaXMsIGN1cnJlbnRbY2hhbmdlc1tpXV0sIG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFlvdSBtaWdodCBiZSB3b25kZXJpbmcgd2h5IHRoZXJlJ3MgYSBgd2hpbGVgIGxvb3AgaGVyZS4gQ2hhbmdlcyBjYW5cbiAgICAgIC8vIGJlIHJlY3Vyc2l2ZWx5IG5lc3RlZCB3aXRoaW4gYFwiY2hhbmdlXCJgIGV2ZW50cy5cbiAgICAgIGlmIChjaGFuZ2luZykgcmV0dXJuIHRoaXM7XG4gICAgICBpZiAoIXNpbGVudCkge1xuICAgICAgICB3aGlsZSAodGhpcy5fcGVuZGluZykge1xuICAgICAgICAgIG9wdGlvbnMgPSB0aGlzLl9wZW5kaW5nO1xuICAgICAgICAgIHRoaXMuX3BlbmRpbmcgPSBmYWxzZTtcbiAgICAgICAgICB0aGlzLnRyaWdnZXIoJ2NoYW5nZScsIHRoaXMsIG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0aGlzLl9wZW5kaW5nID0gZmFsc2U7XG4gICAgICB0aGlzLl9jaGFuZ2luZyA9IGZhbHNlO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8vIFJlbW92ZSBhbiBhdHRyaWJ1dGUgZnJvbSB0aGUgbW9kZWwsIGZpcmluZyBgXCJjaGFuZ2VcImAuIGB1bnNldGAgaXMgYSBub29wXG4gICAgLy8gaWYgdGhlIGF0dHJpYnV0ZSBkb2Vzbid0IGV4aXN0LlxuICAgIHVuc2V0OiBmdW5jdGlvbihhdHRyLCBvcHRpb25zKSB7XG4gICAgICByZXR1cm4gdGhpcy5zZXQoYXR0ciwgdm9pZCAwLCBfLmV4dGVuZCh7fSwgb3B0aW9ucywge3Vuc2V0OiB0cnVlfSkpO1xuICAgIH0sXG5cbiAgICAvLyBDbGVhciBhbGwgYXR0cmlidXRlcyBvbiB0aGUgbW9kZWwsIGZpcmluZyBgXCJjaGFuZ2VcImAuXG4gICAgY2xlYXI6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgIHZhciBhdHRycyA9IHt9O1xuICAgICAgZm9yICh2YXIga2V5IGluIHRoaXMuYXR0cmlidXRlcykgYXR0cnNba2V5XSA9IHZvaWQgMDtcbiAgICAgIHJldHVybiB0aGlzLnNldChhdHRycywgXy5leHRlbmQoe30sIG9wdGlvbnMsIHt1bnNldDogdHJ1ZX0pKTtcbiAgICB9LFxuXG4gICAgLy8gRGV0ZXJtaW5lIGlmIHRoZSBtb2RlbCBoYXMgY2hhbmdlZCBzaW5jZSB0aGUgbGFzdCBgXCJjaGFuZ2VcImAgZXZlbnQuXG4gICAgLy8gSWYgeW91IHNwZWNpZnkgYW4gYXR0cmlidXRlIG5hbWUsIGRldGVybWluZSBpZiB0aGF0IGF0dHJpYnV0ZSBoYXMgY2hhbmdlZC5cbiAgICBoYXNDaGFuZ2VkOiBmdW5jdGlvbihhdHRyKSB7XG4gICAgICBpZiAoYXR0ciA9PSBudWxsKSByZXR1cm4gIV8uaXNFbXB0eSh0aGlzLmNoYW5nZWQpO1xuICAgICAgcmV0dXJuIF8uaGFzKHRoaXMuY2hhbmdlZCwgYXR0cik7XG4gICAgfSxcblxuICAgIC8vIFJldHVybiBhbiBvYmplY3QgY29udGFpbmluZyBhbGwgdGhlIGF0dHJpYnV0ZXMgdGhhdCBoYXZlIGNoYW5nZWQsIG9yXG4gICAgLy8gZmFsc2UgaWYgdGhlcmUgYXJlIG5vIGNoYW5nZWQgYXR0cmlidXRlcy4gVXNlZnVsIGZvciBkZXRlcm1pbmluZyB3aGF0XG4gICAgLy8gcGFydHMgb2YgYSB2aWV3IG5lZWQgdG8gYmUgdXBkYXRlZCBhbmQvb3Igd2hhdCBhdHRyaWJ1dGVzIG5lZWQgdG8gYmVcbiAgICAvLyBwZXJzaXN0ZWQgdG8gdGhlIHNlcnZlci4gVW5zZXQgYXR0cmlidXRlcyB3aWxsIGJlIHNldCB0byB1bmRlZmluZWQuXG4gICAgLy8gWW91IGNhbiBhbHNvIHBhc3MgYW4gYXR0cmlidXRlcyBvYmplY3QgdG8gZGlmZiBhZ2FpbnN0IHRoZSBtb2RlbCxcbiAgICAvLyBkZXRlcm1pbmluZyBpZiB0aGVyZSAqd291bGQgYmUqIGEgY2hhbmdlLlxuICAgIGNoYW5nZWRBdHRyaWJ1dGVzOiBmdW5jdGlvbihkaWZmKSB7XG4gICAgICBpZiAoIWRpZmYpIHJldHVybiB0aGlzLmhhc0NoYW5nZWQoKSA/IF8uY2xvbmUodGhpcy5jaGFuZ2VkKSA6IGZhbHNlO1xuICAgICAgdmFyIHZhbCwgY2hhbmdlZCA9IGZhbHNlO1xuICAgICAgdmFyIG9sZCA9IHRoaXMuX2NoYW5naW5nID8gdGhpcy5fcHJldmlvdXNBdHRyaWJ1dGVzIDogdGhpcy5hdHRyaWJ1dGVzO1xuICAgICAgZm9yICh2YXIgYXR0ciBpbiBkaWZmKSB7XG4gICAgICAgIGlmIChfLmlzRXF1YWwob2xkW2F0dHJdLCAodmFsID0gZGlmZlthdHRyXSkpKSBjb250aW51ZTtcbiAgICAgICAgKGNoYW5nZWQgfHwgKGNoYW5nZWQgPSB7fSkpW2F0dHJdID0gdmFsO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNoYW5nZWQ7XG4gICAgfSxcblxuICAgIC8vIEdldCB0aGUgcHJldmlvdXMgdmFsdWUgb2YgYW4gYXR0cmlidXRlLCByZWNvcmRlZCBhdCB0aGUgdGltZSB0aGUgbGFzdFxuICAgIC8vIGBcImNoYW5nZVwiYCBldmVudCB3YXMgZmlyZWQuXG4gICAgcHJldmlvdXM6IGZ1bmN0aW9uKGF0dHIpIHtcbiAgICAgIGlmIChhdHRyID09IG51bGwgfHwgIXRoaXMuX3ByZXZpb3VzQXR0cmlidXRlcykgcmV0dXJuIG51bGw7XG4gICAgICByZXR1cm4gdGhpcy5fcHJldmlvdXNBdHRyaWJ1dGVzW2F0dHJdO1xuICAgIH0sXG5cbiAgICAvLyBHZXQgYWxsIG9mIHRoZSBhdHRyaWJ1dGVzIG9mIHRoZSBtb2RlbCBhdCB0aGUgdGltZSBvZiB0aGUgcHJldmlvdXNcbiAgICAvLyBgXCJjaGFuZ2VcImAgZXZlbnQuXG4gICAgcHJldmlvdXNBdHRyaWJ1dGVzOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBfLmNsb25lKHRoaXMuX3ByZXZpb3VzQXR0cmlidXRlcyk7XG4gICAgfSxcblxuICAgIC8vIEZldGNoIHRoZSBtb2RlbCBmcm9tIHRoZSBzZXJ2ZXIuIElmIHRoZSBzZXJ2ZXIncyByZXByZXNlbnRhdGlvbiBvZiB0aGVcbiAgICAvLyBtb2RlbCBkaWZmZXJzIGZyb20gaXRzIGN1cnJlbnQgYXR0cmlidXRlcywgdGhleSB3aWxsIGJlIG92ZXJyaWRkZW4sXG4gICAgLy8gdHJpZ2dlcmluZyBhIGBcImNoYW5nZVwiYCBldmVudC5cbiAgICBmZXRjaDogZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgPyBfLmNsb25lKG9wdGlvbnMpIDoge307XG4gICAgICBpZiAob3B0aW9ucy5wYXJzZSA9PT0gdm9pZCAwKSBvcHRpb25zLnBhcnNlID0gdHJ1ZTtcbiAgICAgIHZhciBtb2RlbCA9IHRoaXM7XG4gICAgICB2YXIgc3VjY2VzcyA9IG9wdGlvbnMuc3VjY2VzcztcbiAgICAgIG9wdGlvbnMuc3VjY2VzcyA9IGZ1bmN0aW9uKHJlc3ApIHtcbiAgICAgICAgaWYgKCFtb2RlbC5zZXQobW9kZWwucGFyc2UocmVzcCwgb3B0aW9ucyksIG9wdGlvbnMpKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIGlmIChzdWNjZXNzKSBzdWNjZXNzKG1vZGVsLCByZXNwLCBvcHRpb25zKTtcbiAgICAgICAgbW9kZWwudHJpZ2dlcignc3luYycsIG1vZGVsLCByZXNwLCBvcHRpb25zKTtcbiAgICAgIH07XG4gICAgICB3cmFwRXJyb3IodGhpcywgb3B0aW9ucyk7XG4gICAgICByZXR1cm4gdGhpcy5zeW5jKCdyZWFkJywgdGhpcywgb3B0aW9ucyk7XG4gICAgfSxcblxuICAgIC8vIFNldCBhIGhhc2ggb2YgbW9kZWwgYXR0cmlidXRlcywgYW5kIHN5bmMgdGhlIG1vZGVsIHRvIHRoZSBzZXJ2ZXIuXG4gICAgLy8gSWYgdGhlIHNlcnZlciByZXR1cm5zIGFuIGF0dHJpYnV0ZXMgaGFzaCB0aGF0IGRpZmZlcnMsIHRoZSBtb2RlbCdzXG4gICAgLy8gc3RhdGUgd2lsbCBiZSBgc2V0YCBhZ2Fpbi5cbiAgICBzYXZlOiBmdW5jdGlvbihrZXksIHZhbCwgb3B0aW9ucykge1xuICAgICAgdmFyIGF0dHJzLCBtZXRob2QsIHhociwgYXR0cmlidXRlcyA9IHRoaXMuYXR0cmlidXRlcztcblxuICAgICAgLy8gSGFuZGxlIGJvdGggYFwia2V5XCIsIHZhbHVlYCBhbmQgYHtrZXk6IHZhbHVlfWAgLXN0eWxlIGFyZ3VtZW50cy5cbiAgICAgIGlmIChrZXkgPT0gbnVsbCB8fCB0eXBlb2Yga2V5ID09PSAnb2JqZWN0Jykge1xuICAgICAgICBhdHRycyA9IGtleTtcbiAgICAgICAgb3B0aW9ucyA9IHZhbDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIChhdHRycyA9IHt9KVtrZXldID0gdmFsO1xuICAgICAgfVxuXG4gICAgICBvcHRpb25zID0gXy5leHRlbmQoe3ZhbGlkYXRlOiB0cnVlfSwgb3B0aW9ucyk7XG5cbiAgICAgIC8vIElmIHdlJ3JlIG5vdCB3YWl0aW5nIGFuZCBhdHRyaWJ1dGVzIGV4aXN0LCBzYXZlIGFjdHMgYXNcbiAgICAgIC8vIGBzZXQoYXR0cikuc2F2ZShudWxsLCBvcHRzKWAgd2l0aCB2YWxpZGF0aW9uLiBPdGhlcndpc2UsIGNoZWNrIGlmXG4gICAgICAvLyB0aGUgbW9kZWwgd2lsbCBiZSB2YWxpZCB3aGVuIHRoZSBhdHRyaWJ1dGVzLCBpZiBhbnksIGFyZSBzZXQuXG4gICAgICBpZiAoYXR0cnMgJiYgIW9wdGlvbnMud2FpdCkge1xuICAgICAgICBpZiAoIXRoaXMuc2V0KGF0dHJzLCBvcHRpb25zKSkgcmV0dXJuIGZhbHNlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKCF0aGlzLl92YWxpZGF0ZShhdHRycywgb3B0aW9ucykpIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgLy8gU2V0IHRlbXBvcmFyeSBhdHRyaWJ1dGVzIGlmIGB7d2FpdDogdHJ1ZX1gLlxuICAgICAgaWYgKGF0dHJzICYmIG9wdGlvbnMud2FpdCkge1xuICAgICAgICB0aGlzLmF0dHJpYnV0ZXMgPSBfLmV4dGVuZCh7fSwgYXR0cmlidXRlcywgYXR0cnMpO1xuICAgICAgfVxuXG4gICAgICAvLyBBZnRlciBhIHN1Y2Nlc3NmdWwgc2VydmVyLXNpZGUgc2F2ZSwgdGhlIGNsaWVudCBpcyAob3B0aW9uYWxseSlcbiAgICAgIC8vIHVwZGF0ZWQgd2l0aCB0aGUgc2VydmVyLXNpZGUgc3RhdGUuXG4gICAgICBpZiAob3B0aW9ucy5wYXJzZSA9PT0gdm9pZCAwKSBvcHRpb25zLnBhcnNlID0gdHJ1ZTtcbiAgICAgIHZhciBtb2RlbCA9IHRoaXM7XG4gICAgICB2YXIgc3VjY2VzcyA9IG9wdGlvbnMuc3VjY2VzcztcbiAgICAgIG9wdGlvbnMuc3VjY2VzcyA9IGZ1bmN0aW9uKHJlc3ApIHtcbiAgICAgICAgLy8gRW5zdXJlIGF0dHJpYnV0ZXMgYXJlIHJlc3RvcmVkIGR1cmluZyBzeW5jaHJvbm91cyBzYXZlcy5cbiAgICAgICAgbW9kZWwuYXR0cmlidXRlcyA9IGF0dHJpYnV0ZXM7XG4gICAgICAgIHZhciBzZXJ2ZXJBdHRycyA9IG1vZGVsLnBhcnNlKHJlc3AsIG9wdGlvbnMpO1xuICAgICAgICBpZiAob3B0aW9ucy53YWl0KSBzZXJ2ZXJBdHRycyA9IF8uZXh0ZW5kKGF0dHJzIHx8IHt9LCBzZXJ2ZXJBdHRycyk7XG4gICAgICAgIGlmIChfLmlzT2JqZWN0KHNlcnZlckF0dHJzKSAmJiAhbW9kZWwuc2V0KHNlcnZlckF0dHJzLCBvcHRpb25zKSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3VjY2Vzcykgc3VjY2Vzcyhtb2RlbCwgcmVzcCwgb3B0aW9ucyk7XG4gICAgICAgIG1vZGVsLnRyaWdnZXIoJ3N5bmMnLCBtb2RlbCwgcmVzcCwgb3B0aW9ucyk7XG4gICAgICB9O1xuICAgICAgd3JhcEVycm9yKHRoaXMsIG9wdGlvbnMpO1xuXG4gICAgICBtZXRob2QgPSB0aGlzLmlzTmV3KCkgPyAnY3JlYXRlJyA6IChvcHRpb25zLnBhdGNoID8gJ3BhdGNoJyA6ICd1cGRhdGUnKTtcbiAgICAgIGlmIChtZXRob2QgPT09ICdwYXRjaCcpIG9wdGlvbnMuYXR0cnMgPSBhdHRycztcbiAgICAgIHhociA9IHRoaXMuc3luYyhtZXRob2QsIHRoaXMsIG9wdGlvbnMpO1xuXG4gICAgICAvLyBSZXN0b3JlIGF0dHJpYnV0ZXMuXG4gICAgICBpZiAoYXR0cnMgJiYgb3B0aW9ucy53YWl0KSB0aGlzLmF0dHJpYnV0ZXMgPSBhdHRyaWJ1dGVzO1xuXG4gICAgICByZXR1cm4geGhyO1xuICAgIH0sXG5cbiAgICAvLyBEZXN0cm95IHRoaXMgbW9kZWwgb24gdGhlIHNlcnZlciBpZiBpdCB3YXMgYWxyZWFkeSBwZXJzaXN0ZWQuXG4gICAgLy8gT3B0aW1pc3RpY2FsbHkgcmVtb3ZlcyB0aGUgbW9kZWwgZnJvbSBpdHMgY29sbGVjdGlvbiwgaWYgaXQgaGFzIG9uZS5cbiAgICAvLyBJZiBgd2FpdDogdHJ1ZWAgaXMgcGFzc2VkLCB3YWl0cyBmb3IgdGhlIHNlcnZlciB0byByZXNwb25kIGJlZm9yZSByZW1vdmFsLlxuICAgIGRlc3Ryb3k6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgIG9wdGlvbnMgPSBvcHRpb25zID8gXy5jbG9uZShvcHRpb25zKSA6IHt9O1xuICAgICAgdmFyIG1vZGVsID0gdGhpcztcbiAgICAgIHZhciBzdWNjZXNzID0gb3B0aW9ucy5zdWNjZXNzO1xuXG4gICAgICB2YXIgZGVzdHJveSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBtb2RlbC50cmlnZ2VyKCdkZXN0cm95JywgbW9kZWwsIG1vZGVsLmNvbGxlY3Rpb24sIG9wdGlvbnMpO1xuICAgICAgfTtcblxuICAgICAgb3B0aW9ucy5zdWNjZXNzID0gZnVuY3Rpb24ocmVzcCkge1xuICAgICAgICBpZiAob3B0aW9ucy53YWl0IHx8IG1vZGVsLmlzTmV3KCkpIGRlc3Ryb3koKTtcbiAgICAgICAgaWYgKHN1Y2Nlc3MpIHN1Y2Nlc3MobW9kZWwsIHJlc3AsIG9wdGlvbnMpO1xuICAgICAgICBpZiAoIW1vZGVsLmlzTmV3KCkpIG1vZGVsLnRyaWdnZXIoJ3N5bmMnLCBtb2RlbCwgcmVzcCwgb3B0aW9ucyk7XG4gICAgICB9O1xuXG4gICAgICBpZiAodGhpcy5pc05ldygpKSB7XG4gICAgICAgIG9wdGlvbnMuc3VjY2VzcygpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB3cmFwRXJyb3IodGhpcywgb3B0aW9ucyk7XG5cbiAgICAgIHZhciB4aHIgPSB0aGlzLnN5bmMoJ2RlbGV0ZScsIHRoaXMsIG9wdGlvbnMpO1xuICAgICAgaWYgKCFvcHRpb25zLndhaXQpIGRlc3Ryb3koKTtcbiAgICAgIHJldHVybiB4aHI7XG4gICAgfSxcblxuICAgIC8vIERlZmF1bHQgVVJMIGZvciB0aGUgbW9kZWwncyByZXByZXNlbnRhdGlvbiBvbiB0aGUgc2VydmVyIC0tIGlmIHlvdSdyZVxuICAgIC8vIHVzaW5nIEJhY2tib25lJ3MgcmVzdGZ1bCBtZXRob2RzLCBvdmVycmlkZSB0aGlzIHRvIGNoYW5nZSB0aGUgZW5kcG9pbnRcbiAgICAvLyB0aGF0IHdpbGwgYmUgY2FsbGVkLlxuICAgIHVybDogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgYmFzZSA9XG4gICAgICAgIF8ucmVzdWx0KHRoaXMsICd1cmxSb290JykgfHxcbiAgICAgICAgXy5yZXN1bHQodGhpcy5jb2xsZWN0aW9uLCAndXJsJykgfHxcbiAgICAgICAgdXJsRXJyb3IoKTtcbiAgICAgIGlmICh0aGlzLmlzTmV3KCkpIHJldHVybiBiYXNlO1xuICAgICAgcmV0dXJuIGJhc2UucmVwbGFjZSgvKFteXFwvXSkkLywgJyQxLycpICsgZW5jb2RlVVJJQ29tcG9uZW50KHRoaXMuaWQpO1xuICAgIH0sXG5cbiAgICAvLyAqKnBhcnNlKiogY29udmVydHMgYSByZXNwb25zZSBpbnRvIHRoZSBoYXNoIG9mIGF0dHJpYnV0ZXMgdG8gYmUgYHNldGAgb25cbiAgICAvLyB0aGUgbW9kZWwuIFRoZSBkZWZhdWx0IGltcGxlbWVudGF0aW9uIGlzIGp1c3QgdG8gcGFzcyB0aGUgcmVzcG9uc2UgYWxvbmcuXG4gICAgcGFyc2U6IGZ1bmN0aW9uKHJlc3AsIG9wdGlvbnMpIHtcbiAgICAgIHJldHVybiByZXNwO1xuICAgIH0sXG5cbiAgICAvLyBDcmVhdGUgYSBuZXcgbW9kZWwgd2l0aCBpZGVudGljYWwgYXR0cmlidXRlcyB0byB0aGlzIG9uZS5cbiAgICBjbG9uZTogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IodGhpcy5hdHRyaWJ1dGVzKTtcbiAgICB9LFxuXG4gICAgLy8gQSBtb2RlbCBpcyBuZXcgaWYgaXQgaGFzIG5ldmVyIGJlZW4gc2F2ZWQgdG8gdGhlIHNlcnZlciwgYW5kIGxhY2tzIGFuIGlkLlxuICAgIGlzTmV3OiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiAhdGhpcy5oYXModGhpcy5pZEF0dHJpYnV0ZSk7XG4gICAgfSxcblxuICAgIC8vIENoZWNrIGlmIHRoZSBtb2RlbCBpcyBjdXJyZW50bHkgaW4gYSB2YWxpZCBzdGF0ZS5cbiAgICBpc1ZhbGlkOiBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICByZXR1cm4gdGhpcy5fdmFsaWRhdGUoe30sIF8uZXh0ZW5kKG9wdGlvbnMgfHwge30sIHsgdmFsaWRhdGU6IHRydWUgfSkpO1xuICAgIH0sXG5cbiAgICAvLyBSdW4gdmFsaWRhdGlvbiBhZ2FpbnN0IHRoZSBuZXh0IGNvbXBsZXRlIHNldCBvZiBtb2RlbCBhdHRyaWJ1dGVzLFxuICAgIC8vIHJldHVybmluZyBgdHJ1ZWAgaWYgYWxsIGlzIHdlbGwuIE90aGVyd2lzZSwgZmlyZSBhbiBgXCJpbnZhbGlkXCJgIGV2ZW50LlxuICAgIF92YWxpZGF0ZTogZnVuY3Rpb24oYXR0cnMsIG9wdGlvbnMpIHtcbiAgICAgIGlmICghb3B0aW9ucy52YWxpZGF0ZSB8fCAhdGhpcy52YWxpZGF0ZSkgcmV0dXJuIHRydWU7XG4gICAgICBhdHRycyA9IF8uZXh0ZW5kKHt9LCB0aGlzLmF0dHJpYnV0ZXMsIGF0dHJzKTtcbiAgICAgIHZhciBlcnJvciA9IHRoaXMudmFsaWRhdGlvbkVycm9yID0gdGhpcy52YWxpZGF0ZShhdHRycywgb3B0aW9ucykgfHwgbnVsbDtcbiAgICAgIGlmICghZXJyb3IpIHJldHVybiB0cnVlO1xuICAgICAgdGhpcy50cmlnZ2VyKCdpbnZhbGlkJywgdGhpcywgZXJyb3IsIF8uZXh0ZW5kKG9wdGlvbnMsIHt2YWxpZGF0aW9uRXJyb3I6IGVycm9yfSkpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICB9KTtcblxuICAvLyBVbmRlcnNjb3JlIG1ldGhvZHMgdGhhdCB3ZSB3YW50IHRvIGltcGxlbWVudCBvbiB0aGUgTW9kZWwuXG4gIHZhciBtb2RlbE1ldGhvZHMgPSBbJ2tleXMnLCAndmFsdWVzJywgJ3BhaXJzJywgJ2ludmVydCcsICdwaWNrJywgJ29taXQnXTtcblxuICAvLyBNaXggaW4gZWFjaCBVbmRlcnNjb3JlIG1ldGhvZCBhcyBhIHByb3h5IHRvIGBNb2RlbCNhdHRyaWJ1dGVzYC5cbiAgXy5lYWNoKG1vZGVsTWV0aG9kcywgZnVuY3Rpb24obWV0aG9kKSB7XG4gICAgTW9kZWwucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBhcmdzID0gc2xpY2UuY2FsbChhcmd1bWVudHMpO1xuICAgICAgYXJncy51bnNoaWZ0KHRoaXMuYXR0cmlidXRlcyk7XG4gICAgICByZXR1cm4gX1ttZXRob2RdLmFwcGx5KF8sIGFyZ3MpO1xuICAgIH07XG4gIH0pO1xuXG4gIC8vIEJhY2tib25lLkNvbGxlY3Rpb25cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8vIElmIG1vZGVscyB0ZW5kIHRvIHJlcHJlc2VudCBhIHNpbmdsZSByb3cgb2YgZGF0YSwgYSBCYWNrYm9uZSBDb2xsZWN0aW9uIGlzXG4gIC8vIG1vcmUgYW5hbGFnb3VzIHRvIGEgdGFibGUgZnVsbCBvZiBkYXRhIC4uLiBvciBhIHNtYWxsIHNsaWNlIG9yIHBhZ2Ugb2YgdGhhdFxuICAvLyB0YWJsZSwgb3IgYSBjb2xsZWN0aW9uIG9mIHJvd3MgdGhhdCBiZWxvbmcgdG9nZXRoZXIgZm9yIGEgcGFydGljdWxhciByZWFzb25cbiAgLy8gLS0gYWxsIG9mIHRoZSBtZXNzYWdlcyBpbiB0aGlzIHBhcnRpY3VsYXIgZm9sZGVyLCBhbGwgb2YgdGhlIGRvY3VtZW50c1xuICAvLyBiZWxvbmdpbmcgdG8gdGhpcyBwYXJ0aWN1bGFyIGF1dGhvciwgYW5kIHNvIG9uLiBDb2xsZWN0aW9ucyBtYWludGFpblxuICAvLyBpbmRleGVzIG9mIHRoZWlyIG1vZGVscywgYm90aCBpbiBvcmRlciwgYW5kIGZvciBsb29rdXAgYnkgYGlkYC5cblxuICAvLyBDcmVhdGUgYSBuZXcgKipDb2xsZWN0aW9uKiosIHBlcmhhcHMgdG8gY29udGFpbiBhIHNwZWNpZmljIHR5cGUgb2YgYG1vZGVsYC5cbiAgLy8gSWYgYSBgY29tcGFyYXRvcmAgaXMgc3BlY2lmaWVkLCB0aGUgQ29sbGVjdGlvbiB3aWxsIG1haW50YWluXG4gIC8vIGl0cyBtb2RlbHMgaW4gc29ydCBvcmRlciwgYXMgdGhleSdyZSBhZGRlZCBhbmQgcmVtb3ZlZC5cbiAgdmFyIENvbGxlY3Rpb24gPSBCYWNrYm9uZS5Db2xsZWN0aW9uID0gZnVuY3Rpb24obW9kZWxzLCBvcHRpb25zKSB7XG4gICAgb3B0aW9ucyB8fCAob3B0aW9ucyA9IHt9KTtcbiAgICBpZiAob3B0aW9ucy5tb2RlbCkgdGhpcy5tb2RlbCA9IG9wdGlvbnMubW9kZWw7XG4gICAgaWYgKG9wdGlvbnMuY29tcGFyYXRvciAhPT0gdm9pZCAwKSB0aGlzLmNvbXBhcmF0b3IgPSBvcHRpb25zLmNvbXBhcmF0b3I7XG4gICAgdGhpcy5fcmVzZXQoKTtcbiAgICB0aGlzLmluaXRpYWxpemUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICBpZiAobW9kZWxzKSB0aGlzLnJlc2V0KG1vZGVscywgXy5leHRlbmQoe3NpbGVudDogdHJ1ZX0sIG9wdGlvbnMpKTtcbiAgfTtcblxuICAvLyBEZWZhdWx0IG9wdGlvbnMgZm9yIGBDb2xsZWN0aW9uI3NldGAuXG4gIHZhciBzZXRPcHRpb25zID0ge2FkZDogdHJ1ZSwgcmVtb3ZlOiB0cnVlLCBtZXJnZTogdHJ1ZX07XG4gIHZhciBhZGRPcHRpb25zID0ge2FkZDogdHJ1ZSwgcmVtb3ZlOiBmYWxzZX07XG5cbiAgLy8gRGVmaW5lIHRoZSBDb2xsZWN0aW9uJ3MgaW5oZXJpdGFibGUgbWV0aG9kcy5cbiAgXy5leHRlbmQoQ29sbGVjdGlvbi5wcm90b3R5cGUsIEV2ZW50cywge1xuXG4gICAgLy8gVGhlIGRlZmF1bHQgbW9kZWwgZm9yIGEgY29sbGVjdGlvbiBpcyBqdXN0IGEgKipCYWNrYm9uZS5Nb2RlbCoqLlxuICAgIC8vIFRoaXMgc2hvdWxkIGJlIG92ZXJyaWRkZW4gaW4gbW9zdCBjYXNlcy5cbiAgICBtb2RlbDogTW9kZWwsXG5cbiAgICAvLyBJbml0aWFsaXplIGlzIGFuIGVtcHR5IGZ1bmN0aW9uIGJ5IGRlZmF1bHQuIE92ZXJyaWRlIGl0IHdpdGggeW91ciBvd25cbiAgICAvLyBpbml0aWFsaXphdGlvbiBsb2dpYy5cbiAgICBpbml0aWFsaXplOiBmdW5jdGlvbigpe30sXG5cbiAgICAvLyBUaGUgSlNPTiByZXByZXNlbnRhdGlvbiBvZiBhIENvbGxlY3Rpb24gaXMgYW4gYXJyYXkgb2YgdGhlXG4gICAgLy8gbW9kZWxzJyBhdHRyaWJ1dGVzLlxuICAgIHRvSlNPTjogZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uKG1vZGVsKXsgcmV0dXJuIG1vZGVsLnRvSlNPTihvcHRpb25zKTsgfSk7XG4gICAgfSxcblxuICAgIC8vIFByb3h5IGBCYWNrYm9uZS5zeW5jYCBieSBkZWZhdWx0LlxuICAgIHN5bmM6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIEJhY2tib25lLnN5bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9LFxuXG4gICAgLy8gQWRkIGEgbW9kZWwsIG9yIGxpc3Qgb2YgbW9kZWxzIHRvIHRoZSBzZXQuXG4gICAgYWRkOiBmdW5jdGlvbihtb2RlbHMsIG9wdGlvbnMpIHtcbiAgICAgIHJldHVybiB0aGlzLnNldChtb2RlbHMsIF8uZXh0ZW5kKHttZXJnZTogZmFsc2V9LCBvcHRpb25zLCBhZGRPcHRpb25zKSk7XG4gICAgfSxcblxuICAgIC8vIFJlbW92ZSBhIG1vZGVsLCBvciBhIGxpc3Qgb2YgbW9kZWxzIGZyb20gdGhlIHNldC5cbiAgICByZW1vdmU6IGZ1bmN0aW9uKG1vZGVscywgb3B0aW9ucykge1xuICAgICAgdmFyIHNpbmd1bGFyID0gIV8uaXNBcnJheShtb2RlbHMpO1xuICAgICAgbW9kZWxzID0gc2luZ3VsYXIgPyBbbW9kZWxzXSA6IF8uY2xvbmUobW9kZWxzKTtcbiAgICAgIG9wdGlvbnMgfHwgKG9wdGlvbnMgPSB7fSk7XG4gICAgICB2YXIgaSwgbCwgaW5kZXgsIG1vZGVsO1xuICAgICAgZm9yIChpID0gMCwgbCA9IG1vZGVscy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgbW9kZWwgPSBtb2RlbHNbaV0gPSB0aGlzLmdldChtb2RlbHNbaV0pO1xuICAgICAgICBpZiAoIW1vZGVsKSBjb250aW51ZTtcbiAgICAgICAgZGVsZXRlIHRoaXMuX2J5SWRbbW9kZWwuaWRdO1xuICAgICAgICBkZWxldGUgdGhpcy5fYnlJZFttb2RlbC5jaWRdO1xuICAgICAgICBpbmRleCA9IHRoaXMuaW5kZXhPZihtb2RlbCk7XG4gICAgICAgIHRoaXMubW9kZWxzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIHRoaXMubGVuZ3RoLS07XG4gICAgICAgIGlmICghb3B0aW9ucy5zaWxlbnQpIHtcbiAgICAgICAgICBvcHRpb25zLmluZGV4ID0gaW5kZXg7XG4gICAgICAgICAgbW9kZWwudHJpZ2dlcigncmVtb3ZlJywgbW9kZWwsIHRoaXMsIG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3JlbW92ZVJlZmVyZW5jZShtb2RlbCwgb3B0aW9ucyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gc2luZ3VsYXIgPyBtb2RlbHNbMF0gOiBtb2RlbHM7XG4gICAgfSxcblxuICAgIC8vIFVwZGF0ZSBhIGNvbGxlY3Rpb24gYnkgYHNldGAtaW5nIGEgbmV3IGxpc3Qgb2YgbW9kZWxzLCBhZGRpbmcgbmV3IG9uZXMsXG4gICAgLy8gcmVtb3ZpbmcgbW9kZWxzIHRoYXQgYXJlIG5vIGxvbmdlciBwcmVzZW50LCBhbmQgbWVyZ2luZyBtb2RlbHMgdGhhdFxuICAgIC8vIGFscmVhZHkgZXhpc3QgaW4gdGhlIGNvbGxlY3Rpb24sIGFzIG5lY2Vzc2FyeS4gU2ltaWxhciB0byAqKk1vZGVsI3NldCoqLFxuICAgIC8vIHRoZSBjb3JlIG9wZXJhdGlvbiBmb3IgdXBkYXRpbmcgdGhlIGRhdGEgY29udGFpbmVkIGJ5IHRoZSBjb2xsZWN0aW9uLlxuICAgIHNldDogZnVuY3Rpb24obW9kZWxzLCBvcHRpb25zKSB7XG4gICAgICBvcHRpb25zID0gXy5kZWZhdWx0cyh7fSwgb3B0aW9ucywgc2V0T3B0aW9ucyk7XG4gICAgICBpZiAob3B0aW9ucy5wYXJzZSkgbW9kZWxzID0gdGhpcy5wYXJzZShtb2RlbHMsIG9wdGlvbnMpO1xuICAgICAgdmFyIHNpbmd1bGFyID0gIV8uaXNBcnJheShtb2RlbHMpO1xuICAgICAgbW9kZWxzID0gc2luZ3VsYXIgPyAobW9kZWxzID8gW21vZGVsc10gOiBbXSkgOiBfLmNsb25lKG1vZGVscyk7XG4gICAgICB2YXIgaSwgbCwgaWQsIG1vZGVsLCBhdHRycywgZXhpc3RpbmcsIHNvcnQ7XG4gICAgICB2YXIgYXQgPSBvcHRpb25zLmF0O1xuICAgICAgdmFyIHRhcmdldE1vZGVsID0gdGhpcy5tb2RlbDtcbiAgICAgIHZhciBzb3J0YWJsZSA9IHRoaXMuY29tcGFyYXRvciAmJiAoYXQgPT0gbnVsbCkgJiYgb3B0aW9ucy5zb3J0ICE9PSBmYWxzZTtcbiAgICAgIHZhciBzb3J0QXR0ciA9IF8uaXNTdHJpbmcodGhpcy5jb21wYXJhdG9yKSA/IHRoaXMuY29tcGFyYXRvciA6IG51bGw7XG4gICAgICB2YXIgdG9BZGQgPSBbXSwgdG9SZW1vdmUgPSBbXSwgbW9kZWxNYXAgPSB7fTtcbiAgICAgIHZhciBhZGQgPSBvcHRpb25zLmFkZCwgbWVyZ2UgPSBvcHRpb25zLm1lcmdlLCByZW1vdmUgPSBvcHRpb25zLnJlbW92ZTtcbiAgICAgIHZhciBvcmRlciA9ICFzb3J0YWJsZSAmJiBhZGQgJiYgcmVtb3ZlID8gW10gOiBmYWxzZTtcblxuICAgICAgLy8gVHVybiBiYXJlIG9iamVjdHMgaW50byBtb2RlbCByZWZlcmVuY2VzLCBhbmQgcHJldmVudCBpbnZhbGlkIG1vZGVsc1xuICAgICAgLy8gZnJvbSBiZWluZyBhZGRlZC5cbiAgICAgIGZvciAoaSA9IDAsIGwgPSBtb2RlbHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGF0dHJzID0gbW9kZWxzW2ldIHx8IHt9O1xuICAgICAgICBpZiAoYXR0cnMgaW5zdGFuY2VvZiBNb2RlbCkge1xuICAgICAgICAgIGlkID0gbW9kZWwgPSBhdHRycztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZCA9IGF0dHJzW3RhcmdldE1vZGVsLnByb3RvdHlwZS5pZEF0dHJpYnV0ZSB8fCAnaWQnXTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIElmIGEgZHVwbGljYXRlIGlzIGZvdW5kLCBwcmV2ZW50IGl0IGZyb20gYmVpbmcgYWRkZWQgYW5kXG4gICAgICAgIC8vIG9wdGlvbmFsbHkgbWVyZ2UgaXQgaW50byB0aGUgZXhpc3RpbmcgbW9kZWwuXG4gICAgICAgIGlmIChleGlzdGluZyA9IHRoaXMuZ2V0KGlkKSkge1xuICAgICAgICAgIGlmIChyZW1vdmUpIG1vZGVsTWFwW2V4aXN0aW5nLmNpZF0gPSB0cnVlO1xuICAgICAgICAgIGlmIChtZXJnZSkge1xuICAgICAgICAgICAgYXR0cnMgPSBhdHRycyA9PT0gbW9kZWwgPyBtb2RlbC5hdHRyaWJ1dGVzIDogYXR0cnM7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5wYXJzZSkgYXR0cnMgPSBleGlzdGluZy5wYXJzZShhdHRycywgb3B0aW9ucyk7XG4gICAgICAgICAgICBleGlzdGluZy5zZXQoYXR0cnMsIG9wdGlvbnMpO1xuICAgICAgICAgICAgaWYgKHNvcnRhYmxlICYmICFzb3J0ICYmIGV4aXN0aW5nLmhhc0NoYW5nZWQoc29ydEF0dHIpKSBzb3J0ID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgbW9kZWxzW2ldID0gZXhpc3Rpbmc7XG5cbiAgICAgICAgLy8gSWYgdGhpcyBpcyBhIG5ldywgdmFsaWQgbW9kZWwsIHB1c2ggaXQgdG8gdGhlIGB0b0FkZGAgbGlzdC5cbiAgICAgICAgfSBlbHNlIGlmIChhZGQpIHtcbiAgICAgICAgICBtb2RlbCA9IG1vZGVsc1tpXSA9IHRoaXMuX3ByZXBhcmVNb2RlbChhdHRycywgb3B0aW9ucyk7XG4gICAgICAgICAgaWYgKCFtb2RlbCkgY29udGludWU7XG4gICAgICAgICAgdG9BZGQucHVzaChtb2RlbCk7XG4gICAgICAgICAgdGhpcy5fYWRkUmVmZXJlbmNlKG1vZGVsLCBvcHRpb25zKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIERvIG5vdCBhZGQgbXVsdGlwbGUgbW9kZWxzIHdpdGggdGhlIHNhbWUgYGlkYC5cbiAgICAgICAgbW9kZWwgPSBleGlzdGluZyB8fCBtb2RlbDtcbiAgICAgICAgaWYgKG9yZGVyICYmIChtb2RlbC5pc05ldygpIHx8ICFtb2RlbE1hcFttb2RlbC5pZF0pKSBvcmRlci5wdXNoKG1vZGVsKTtcbiAgICAgICAgbW9kZWxNYXBbbW9kZWwuaWRdID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgLy8gUmVtb3ZlIG5vbmV4aXN0ZW50IG1vZGVscyBpZiBhcHByb3ByaWF0ZS5cbiAgICAgIGlmIChyZW1vdmUpIHtcbiAgICAgICAgZm9yIChpID0gMCwgbCA9IHRoaXMubGVuZ3RoOyBpIDwgbDsgKytpKSB7XG4gICAgICAgICAgaWYgKCFtb2RlbE1hcFsobW9kZWwgPSB0aGlzLm1vZGVsc1tpXSkuY2lkXSkgdG9SZW1vdmUucHVzaChtb2RlbCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRvUmVtb3ZlLmxlbmd0aCkgdGhpcy5yZW1vdmUodG9SZW1vdmUsIG9wdGlvbnMpO1xuICAgICAgfVxuXG4gICAgICAvLyBTZWUgaWYgc29ydGluZyBpcyBuZWVkZWQsIHVwZGF0ZSBgbGVuZ3RoYCBhbmQgc3BsaWNlIGluIG5ldyBtb2RlbHMuXG4gICAgICBpZiAodG9BZGQubGVuZ3RoIHx8IChvcmRlciAmJiBvcmRlci5sZW5ndGgpKSB7XG4gICAgICAgIGlmIChzb3J0YWJsZSkgc29ydCA9IHRydWU7XG4gICAgICAgIHRoaXMubGVuZ3RoICs9IHRvQWRkLmxlbmd0aDtcbiAgICAgICAgaWYgKGF0ICE9IG51bGwpIHtcbiAgICAgICAgICBmb3IgKGkgPSAwLCBsID0gdG9BZGQubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICB0aGlzLm1vZGVscy5zcGxpY2UoYXQgKyBpLCAwLCB0b0FkZFtpXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChvcmRlcikgdGhpcy5tb2RlbHMubGVuZ3RoID0gMDtcbiAgICAgICAgICB2YXIgb3JkZXJlZE1vZGVscyA9IG9yZGVyIHx8IHRvQWRkO1xuICAgICAgICAgIGZvciAoaSA9IDAsIGwgPSBvcmRlcmVkTW9kZWxzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgdGhpcy5tb2RlbHMucHVzaChvcmRlcmVkTW9kZWxzW2ldKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gU2lsZW50bHkgc29ydCB0aGUgY29sbGVjdGlvbiBpZiBhcHByb3ByaWF0ZS5cbiAgICAgIGlmIChzb3J0KSB0aGlzLnNvcnQoe3NpbGVudDogdHJ1ZX0pO1xuXG4gICAgICAvLyBVbmxlc3Mgc2lsZW5jZWQsIGl0J3MgdGltZSB0byBmaXJlIGFsbCBhcHByb3ByaWF0ZSBhZGQvc29ydCBldmVudHMuXG4gICAgICBpZiAoIW9wdGlvbnMuc2lsZW50KSB7XG4gICAgICAgIGZvciAoaSA9IDAsIGwgPSB0b0FkZC5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAobW9kZWwgPSB0b0FkZFtpXSkudHJpZ2dlcignYWRkJywgbW9kZWwsIHRoaXMsIG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzb3J0IHx8IChvcmRlciAmJiBvcmRlci5sZW5ndGgpKSB0aGlzLnRyaWdnZXIoJ3NvcnQnLCB0aGlzLCBvcHRpb25zKTtcbiAgICAgIH1cblxuICAgICAgLy8gUmV0dXJuIHRoZSBhZGRlZCAob3IgbWVyZ2VkKSBtb2RlbCAob3IgbW9kZWxzKS5cbiAgICAgIHJldHVybiBzaW5ndWxhciA/IG1vZGVsc1swXSA6IG1vZGVscztcbiAgICB9LFxuXG4gICAgLy8gV2hlbiB5b3UgaGF2ZSBtb3JlIGl0ZW1zIHRoYW4geW91IHdhbnQgdG8gYWRkIG9yIHJlbW92ZSBpbmRpdmlkdWFsbHksXG4gICAgLy8geW91IGNhbiByZXNldCB0aGUgZW50aXJlIHNldCB3aXRoIGEgbmV3IGxpc3Qgb2YgbW9kZWxzLCB3aXRob3V0IGZpcmluZ1xuICAgIC8vIGFueSBncmFudWxhciBgYWRkYCBvciBgcmVtb3ZlYCBldmVudHMuIEZpcmVzIGByZXNldGAgd2hlbiBmaW5pc2hlZC5cbiAgICAvLyBVc2VmdWwgZm9yIGJ1bGsgb3BlcmF0aW9ucyBhbmQgb3B0aW1pemF0aW9ucy5cbiAgICByZXNldDogZnVuY3Rpb24obW9kZWxzLCBvcHRpb25zKSB7XG4gICAgICBvcHRpb25zIHx8IChvcHRpb25zID0ge30pO1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSB0aGlzLm1vZGVscy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgdGhpcy5fcmVtb3ZlUmVmZXJlbmNlKHRoaXMubW9kZWxzW2ldLCBvcHRpb25zKTtcbiAgICAgIH1cbiAgICAgIG9wdGlvbnMucHJldmlvdXNNb2RlbHMgPSB0aGlzLm1vZGVscztcbiAgICAgIHRoaXMuX3Jlc2V0KCk7XG4gICAgICBtb2RlbHMgPSB0aGlzLmFkZChtb2RlbHMsIF8uZXh0ZW5kKHtzaWxlbnQ6IHRydWV9LCBvcHRpb25zKSk7XG4gICAgICBpZiAoIW9wdGlvbnMuc2lsZW50KSB0aGlzLnRyaWdnZXIoJ3Jlc2V0JywgdGhpcywgb3B0aW9ucyk7XG4gICAgICByZXR1cm4gbW9kZWxzO1xuICAgIH0sXG5cbiAgICAvLyBBZGQgYSBtb2RlbCB0byB0aGUgZW5kIG9mIHRoZSBjb2xsZWN0aW9uLlxuICAgIHB1c2g6IGZ1bmN0aW9uKG1vZGVsLCBvcHRpb25zKSB7XG4gICAgICByZXR1cm4gdGhpcy5hZGQobW9kZWwsIF8uZXh0ZW5kKHthdDogdGhpcy5sZW5ndGh9LCBvcHRpb25zKSk7XG4gICAgfSxcblxuICAgIC8vIFJlbW92ZSBhIG1vZGVsIGZyb20gdGhlIGVuZCBvZiB0aGUgY29sbGVjdGlvbi5cbiAgICBwb3A6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgIHZhciBtb2RlbCA9IHRoaXMuYXQodGhpcy5sZW5ndGggLSAxKTtcbiAgICAgIHRoaXMucmVtb3ZlKG1vZGVsLCBvcHRpb25zKTtcbiAgICAgIHJldHVybiBtb2RlbDtcbiAgICB9LFxuXG4gICAgLy8gQWRkIGEgbW9kZWwgdG8gdGhlIGJlZ2lubmluZyBvZiB0aGUgY29sbGVjdGlvbi5cbiAgICB1bnNoaWZ0OiBmdW5jdGlvbihtb2RlbCwgb3B0aW9ucykge1xuICAgICAgcmV0dXJuIHRoaXMuYWRkKG1vZGVsLCBfLmV4dGVuZCh7YXQ6IDB9LCBvcHRpb25zKSk7XG4gICAgfSxcblxuICAgIC8vIFJlbW92ZSBhIG1vZGVsIGZyb20gdGhlIGJlZ2lubmluZyBvZiB0aGUgY29sbGVjdGlvbi5cbiAgICBzaGlmdDogZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgdmFyIG1vZGVsID0gdGhpcy5hdCgwKTtcbiAgICAgIHRoaXMucmVtb3ZlKG1vZGVsLCBvcHRpb25zKTtcbiAgICAgIHJldHVybiBtb2RlbDtcbiAgICB9LFxuXG4gICAgLy8gU2xpY2Ugb3V0IGEgc3ViLWFycmF5IG9mIG1vZGVscyBmcm9tIHRoZSBjb2xsZWN0aW9uLlxuICAgIHNsaWNlOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBzbGljZS5hcHBseSh0aGlzLm1vZGVscywgYXJndW1lbnRzKTtcbiAgICB9LFxuXG4gICAgLy8gR2V0IGEgbW9kZWwgZnJvbSB0aGUgc2V0IGJ5IGlkLlxuICAgIGdldDogZnVuY3Rpb24ob2JqKSB7XG4gICAgICBpZiAob2JqID09IG51bGwpIHJldHVybiB2b2lkIDA7XG4gICAgICByZXR1cm4gdGhpcy5fYnlJZFtvYmpdIHx8IHRoaXMuX2J5SWRbb2JqLmlkXSB8fCB0aGlzLl9ieUlkW29iai5jaWRdO1xuICAgIH0sXG5cbiAgICAvLyBHZXQgdGhlIG1vZGVsIGF0IHRoZSBnaXZlbiBpbmRleC5cbiAgICBhdDogZnVuY3Rpb24oaW5kZXgpIHtcbiAgICAgIHJldHVybiB0aGlzLm1vZGVsc1tpbmRleF07XG4gICAgfSxcblxuICAgIC8vIFJldHVybiBtb2RlbHMgd2l0aCBtYXRjaGluZyBhdHRyaWJ1dGVzLiBVc2VmdWwgZm9yIHNpbXBsZSBjYXNlcyBvZlxuICAgIC8vIGBmaWx0ZXJgLlxuICAgIHdoZXJlOiBmdW5jdGlvbihhdHRycywgZmlyc3QpIHtcbiAgICAgIGlmIChfLmlzRW1wdHkoYXR0cnMpKSByZXR1cm4gZmlyc3QgPyB2b2lkIDAgOiBbXTtcbiAgICAgIHJldHVybiB0aGlzW2ZpcnN0ID8gJ2ZpbmQnIDogJ2ZpbHRlciddKGZ1bmN0aW9uKG1vZGVsKSB7XG4gICAgICAgIGZvciAodmFyIGtleSBpbiBhdHRycykge1xuICAgICAgICAgIGlmIChhdHRyc1trZXldICE9PSBtb2RlbC5nZXQoa2V5KSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSk7XG4gICAgfSxcblxuICAgIC8vIFJldHVybiB0aGUgZmlyc3QgbW9kZWwgd2l0aCBtYXRjaGluZyBhdHRyaWJ1dGVzLiBVc2VmdWwgZm9yIHNpbXBsZSBjYXNlc1xuICAgIC8vIG9mIGBmaW5kYC5cbiAgICBmaW5kV2hlcmU6IGZ1bmN0aW9uKGF0dHJzKSB7XG4gICAgICByZXR1cm4gdGhpcy53aGVyZShhdHRycywgdHJ1ZSk7XG4gICAgfSxcblxuICAgIC8vIEZvcmNlIHRoZSBjb2xsZWN0aW9uIHRvIHJlLXNvcnQgaXRzZWxmLiBZb3UgZG9uJ3QgbmVlZCB0byBjYWxsIHRoaXMgdW5kZXJcbiAgICAvLyBub3JtYWwgY2lyY3Vtc3RhbmNlcywgYXMgdGhlIHNldCB3aWxsIG1haW50YWluIHNvcnQgb3JkZXIgYXMgZWFjaCBpdGVtXG4gICAgLy8gaXMgYWRkZWQuXG4gICAgc29ydDogZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgaWYgKCF0aGlzLmNvbXBhcmF0b3IpIHRocm93IG5ldyBFcnJvcignQ2Fubm90IHNvcnQgYSBzZXQgd2l0aG91dCBhIGNvbXBhcmF0b3InKTtcbiAgICAgIG9wdGlvbnMgfHwgKG9wdGlvbnMgPSB7fSk7XG5cbiAgICAgIC8vIFJ1biBzb3J0IGJhc2VkIG9uIHR5cGUgb2YgYGNvbXBhcmF0b3JgLlxuICAgICAgaWYgKF8uaXNTdHJpbmcodGhpcy5jb21wYXJhdG9yKSB8fCB0aGlzLmNvbXBhcmF0b3IubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHRoaXMubW9kZWxzID0gdGhpcy5zb3J0QnkodGhpcy5jb21wYXJhdG9yLCB0aGlzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMubW9kZWxzLnNvcnQoXy5iaW5kKHRoaXMuY29tcGFyYXRvciwgdGhpcykpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIW9wdGlvbnMuc2lsZW50KSB0aGlzLnRyaWdnZXIoJ3NvcnQnLCB0aGlzLCBvcHRpb25zKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvLyBQbHVjayBhbiBhdHRyaWJ1dGUgZnJvbSBlYWNoIG1vZGVsIGluIHRoZSBjb2xsZWN0aW9uLlxuICAgIHBsdWNrOiBmdW5jdGlvbihhdHRyKSB7XG4gICAgICByZXR1cm4gXy5pbnZva2UodGhpcy5tb2RlbHMsICdnZXQnLCBhdHRyKTtcbiAgICB9LFxuXG4gICAgLy8gRmV0Y2ggdGhlIGRlZmF1bHQgc2V0IG9mIG1vZGVscyBmb3IgdGhpcyBjb2xsZWN0aW9uLCByZXNldHRpbmcgdGhlXG4gICAgLy8gY29sbGVjdGlvbiB3aGVuIHRoZXkgYXJyaXZlLiBJZiBgcmVzZXQ6IHRydWVgIGlzIHBhc3NlZCwgdGhlIHJlc3BvbnNlXG4gICAgLy8gZGF0YSB3aWxsIGJlIHBhc3NlZCB0aHJvdWdoIHRoZSBgcmVzZXRgIG1ldGhvZCBpbnN0ZWFkIG9mIGBzZXRgLlxuICAgIGZldGNoOiBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICBvcHRpb25zID0gb3B0aW9ucyA/IF8uY2xvbmUob3B0aW9ucykgOiB7fTtcbiAgICAgIGlmIChvcHRpb25zLnBhcnNlID09PSB2b2lkIDApIG9wdGlvbnMucGFyc2UgPSB0cnVlO1xuICAgICAgdmFyIHN1Y2Nlc3MgPSBvcHRpb25zLnN1Y2Nlc3M7XG4gICAgICB2YXIgY29sbGVjdGlvbiA9IHRoaXM7XG4gICAgICBvcHRpb25zLnN1Y2Nlc3MgPSBmdW5jdGlvbihyZXNwKSB7XG4gICAgICAgIHZhciBtZXRob2QgPSBvcHRpb25zLnJlc2V0ID8gJ3Jlc2V0JyA6ICdzZXQnO1xuICAgICAgICBjb2xsZWN0aW9uW21ldGhvZF0ocmVzcCwgb3B0aW9ucyk7XG4gICAgICAgIGlmIChzdWNjZXNzKSBzdWNjZXNzKGNvbGxlY3Rpb24sIHJlc3AsIG9wdGlvbnMpO1xuICAgICAgICBjb2xsZWN0aW9uLnRyaWdnZXIoJ3N5bmMnLCBjb2xsZWN0aW9uLCByZXNwLCBvcHRpb25zKTtcbiAgICAgIH07XG4gICAgICB3cmFwRXJyb3IodGhpcywgb3B0aW9ucyk7XG4gICAgICByZXR1cm4gdGhpcy5zeW5jKCdyZWFkJywgdGhpcywgb3B0aW9ucyk7XG4gICAgfSxcblxuICAgIC8vIENyZWF0ZSBhIG5ldyBpbnN0YW5jZSBvZiBhIG1vZGVsIGluIHRoaXMgY29sbGVjdGlvbi4gQWRkIHRoZSBtb2RlbCB0byB0aGVcbiAgICAvLyBjb2xsZWN0aW9uIGltbWVkaWF0ZWx5LCB1bmxlc3MgYHdhaXQ6IHRydWVgIGlzIHBhc3NlZCwgaW4gd2hpY2ggY2FzZSB3ZVxuICAgIC8vIHdhaXQgZm9yIHRoZSBzZXJ2ZXIgdG8gYWdyZWUuXG4gICAgY3JlYXRlOiBmdW5jdGlvbihtb2RlbCwgb3B0aW9ucykge1xuICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgPyBfLmNsb25lKG9wdGlvbnMpIDoge307XG4gICAgICBpZiAoIShtb2RlbCA9IHRoaXMuX3ByZXBhcmVNb2RlbChtb2RlbCwgb3B0aW9ucykpKSByZXR1cm4gZmFsc2U7XG4gICAgICBpZiAoIW9wdGlvbnMud2FpdCkgdGhpcy5hZGQobW9kZWwsIG9wdGlvbnMpO1xuICAgICAgdmFyIGNvbGxlY3Rpb24gPSB0aGlzO1xuICAgICAgdmFyIHN1Y2Nlc3MgPSBvcHRpb25zLnN1Y2Nlc3M7XG4gICAgICBvcHRpb25zLnN1Y2Nlc3MgPSBmdW5jdGlvbihtb2RlbCwgcmVzcCkge1xuICAgICAgICBpZiAob3B0aW9ucy53YWl0KSBjb2xsZWN0aW9uLmFkZChtb2RlbCwgb3B0aW9ucyk7XG4gICAgICAgIGlmIChzdWNjZXNzKSBzdWNjZXNzKG1vZGVsLCByZXNwLCBvcHRpb25zKTtcbiAgICAgIH07XG4gICAgICBtb2RlbC5zYXZlKG51bGwsIG9wdGlvbnMpO1xuICAgICAgcmV0dXJuIG1vZGVsO1xuICAgIH0sXG5cbiAgICAvLyAqKnBhcnNlKiogY29udmVydHMgYSByZXNwb25zZSBpbnRvIGEgbGlzdCBvZiBtb2RlbHMgdG8gYmUgYWRkZWQgdG8gdGhlXG4gICAgLy8gY29sbGVjdGlvbi4gVGhlIGRlZmF1bHQgaW1wbGVtZW50YXRpb24gaXMganVzdCB0byBwYXNzIGl0IHRocm91Z2guXG4gICAgcGFyc2U6IGZ1bmN0aW9uKHJlc3AsIG9wdGlvbnMpIHtcbiAgICAgIHJldHVybiByZXNwO1xuICAgIH0sXG5cbiAgICAvLyBDcmVhdGUgYSBuZXcgY29sbGVjdGlvbiB3aXRoIGFuIGlkZW50aWNhbCBsaXN0IG9mIG1vZGVscyBhcyB0aGlzIG9uZS5cbiAgICBjbG9uZTogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IodGhpcy5tb2RlbHMpO1xuICAgIH0sXG5cbiAgICAvLyBQcml2YXRlIG1ldGhvZCB0byByZXNldCBhbGwgaW50ZXJuYWwgc3RhdGUuIENhbGxlZCB3aGVuIHRoZSBjb2xsZWN0aW9uXG4gICAgLy8gaXMgZmlyc3QgaW5pdGlhbGl6ZWQgb3IgcmVzZXQuXG4gICAgX3Jlc2V0OiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMubGVuZ3RoID0gMDtcbiAgICAgIHRoaXMubW9kZWxzID0gW107XG4gICAgICB0aGlzLl9ieUlkICA9IHt9O1xuICAgIH0sXG5cbiAgICAvLyBQcmVwYXJlIGEgaGFzaCBvZiBhdHRyaWJ1dGVzIChvciBvdGhlciBtb2RlbCkgdG8gYmUgYWRkZWQgdG8gdGhpc1xuICAgIC8vIGNvbGxlY3Rpb24uXG4gICAgX3ByZXBhcmVNb2RlbDogZnVuY3Rpb24oYXR0cnMsIG9wdGlvbnMpIHtcbiAgICAgIGlmIChhdHRycyBpbnN0YW5jZW9mIE1vZGVsKSByZXR1cm4gYXR0cnM7XG4gICAgICBvcHRpb25zID0gb3B0aW9ucyA/IF8uY2xvbmUob3B0aW9ucykgOiB7fTtcbiAgICAgIG9wdGlvbnMuY29sbGVjdGlvbiA9IHRoaXM7XG4gICAgICB2YXIgbW9kZWwgPSBuZXcgdGhpcy5tb2RlbChhdHRycywgb3B0aW9ucyk7XG4gICAgICBpZiAoIW1vZGVsLnZhbGlkYXRpb25FcnJvcikgcmV0dXJuIG1vZGVsO1xuICAgICAgdGhpcy50cmlnZ2VyKCdpbnZhbGlkJywgdGhpcywgbW9kZWwudmFsaWRhdGlvbkVycm9yLCBvcHRpb25zKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9LFxuXG4gICAgLy8gSW50ZXJuYWwgbWV0aG9kIHRvIGNyZWF0ZSBhIG1vZGVsJ3MgdGllcyB0byBhIGNvbGxlY3Rpb24uXG4gICAgX2FkZFJlZmVyZW5jZTogZnVuY3Rpb24obW9kZWwsIG9wdGlvbnMpIHtcbiAgICAgIHRoaXMuX2J5SWRbbW9kZWwuY2lkXSA9IG1vZGVsO1xuICAgICAgaWYgKG1vZGVsLmlkICE9IG51bGwpIHRoaXMuX2J5SWRbbW9kZWwuaWRdID0gbW9kZWw7XG4gICAgICBpZiAoIW1vZGVsLmNvbGxlY3Rpb24pIG1vZGVsLmNvbGxlY3Rpb24gPSB0aGlzO1xuICAgICAgbW9kZWwub24oJ2FsbCcsIHRoaXMuX29uTW9kZWxFdmVudCwgdGhpcyk7XG4gICAgfSxcblxuICAgIC8vIEludGVybmFsIG1ldGhvZCB0byBzZXZlciBhIG1vZGVsJ3MgdGllcyB0byBhIGNvbGxlY3Rpb24uXG4gICAgX3JlbW92ZVJlZmVyZW5jZTogZnVuY3Rpb24obW9kZWwsIG9wdGlvbnMpIHtcbiAgICAgIGlmICh0aGlzID09PSBtb2RlbC5jb2xsZWN0aW9uKSBkZWxldGUgbW9kZWwuY29sbGVjdGlvbjtcbiAgICAgIG1vZGVsLm9mZignYWxsJywgdGhpcy5fb25Nb2RlbEV2ZW50LCB0aGlzKTtcbiAgICB9LFxuXG4gICAgLy8gSW50ZXJuYWwgbWV0aG9kIGNhbGxlZCBldmVyeSB0aW1lIGEgbW9kZWwgaW4gdGhlIHNldCBmaXJlcyBhbiBldmVudC5cbiAgICAvLyBTZXRzIG5lZWQgdG8gdXBkYXRlIHRoZWlyIGluZGV4ZXMgd2hlbiBtb2RlbHMgY2hhbmdlIGlkcy4gQWxsIG90aGVyXG4gICAgLy8gZXZlbnRzIHNpbXBseSBwcm94eSB0aHJvdWdoLiBcImFkZFwiIGFuZCBcInJlbW92ZVwiIGV2ZW50cyB0aGF0IG9yaWdpbmF0ZVxuICAgIC8vIGluIG90aGVyIGNvbGxlY3Rpb25zIGFyZSBpZ25vcmVkLlxuICAgIF9vbk1vZGVsRXZlbnQ6IGZ1bmN0aW9uKGV2ZW50LCBtb2RlbCwgY29sbGVjdGlvbiwgb3B0aW9ucykge1xuICAgICAgaWYgKChldmVudCA9PT0gJ2FkZCcgfHwgZXZlbnQgPT09ICdyZW1vdmUnKSAmJiBjb2xsZWN0aW9uICE9PSB0aGlzKSByZXR1cm47XG4gICAgICBpZiAoZXZlbnQgPT09ICdkZXN0cm95JykgdGhpcy5yZW1vdmUobW9kZWwsIG9wdGlvbnMpO1xuICAgICAgaWYgKG1vZGVsICYmIGV2ZW50ID09PSAnY2hhbmdlOicgKyBtb2RlbC5pZEF0dHJpYnV0ZSkge1xuICAgICAgICBkZWxldGUgdGhpcy5fYnlJZFttb2RlbC5wcmV2aW91cyhtb2RlbC5pZEF0dHJpYnV0ZSldO1xuICAgICAgICBpZiAobW9kZWwuaWQgIT0gbnVsbCkgdGhpcy5fYnlJZFttb2RlbC5pZF0gPSBtb2RlbDtcbiAgICAgIH1cbiAgICAgIHRoaXMudHJpZ2dlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH1cblxuICB9KTtcblxuICAvLyBVbmRlcnNjb3JlIG1ldGhvZHMgdGhhdCB3ZSB3YW50IHRvIGltcGxlbWVudCBvbiB0aGUgQ29sbGVjdGlvbi5cbiAgLy8gOTAlIG9mIHRoZSBjb3JlIHVzZWZ1bG5lc3Mgb2YgQmFja2JvbmUgQ29sbGVjdGlvbnMgaXMgYWN0dWFsbHkgaW1wbGVtZW50ZWRcbiAgLy8gcmlnaHQgaGVyZTpcbiAgdmFyIG1ldGhvZHMgPSBbJ2ZvckVhY2gnLCAnZWFjaCcsICdtYXAnLCAnY29sbGVjdCcsICdyZWR1Y2UnLCAnZm9sZGwnLFxuICAgICdpbmplY3QnLCAncmVkdWNlUmlnaHQnLCAnZm9sZHInLCAnZmluZCcsICdkZXRlY3QnLCAnZmlsdGVyJywgJ3NlbGVjdCcsXG4gICAgJ3JlamVjdCcsICdldmVyeScsICdhbGwnLCAnc29tZScsICdhbnknLCAnaW5jbHVkZScsICdjb250YWlucycsICdpbnZva2UnLFxuICAgICdtYXgnLCAnbWluJywgJ3RvQXJyYXknLCAnc2l6ZScsICdmaXJzdCcsICdoZWFkJywgJ3Rha2UnLCAnaW5pdGlhbCcsICdyZXN0JyxcbiAgICAndGFpbCcsICdkcm9wJywgJ2xhc3QnLCAnd2l0aG91dCcsICdkaWZmZXJlbmNlJywgJ2luZGV4T2YnLCAnc2h1ZmZsZScsXG4gICAgJ2xhc3RJbmRleE9mJywgJ2lzRW1wdHknLCAnY2hhaW4nLCAnc2FtcGxlJ107XG5cbiAgLy8gTWl4IGluIGVhY2ggVW5kZXJzY29yZSBtZXRob2QgYXMgYSBwcm94eSB0byBgQ29sbGVjdGlvbiNtb2RlbHNgLlxuICBfLmVhY2gobWV0aG9kcywgZnVuY3Rpb24obWV0aG9kKSB7XG4gICAgQ29sbGVjdGlvbi5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGFyZ3MgPSBzbGljZS5jYWxsKGFyZ3VtZW50cyk7XG4gICAgICBhcmdzLnVuc2hpZnQodGhpcy5tb2RlbHMpO1xuICAgICAgcmV0dXJuIF9bbWV0aG9kXS5hcHBseShfLCBhcmdzKTtcbiAgICB9O1xuICB9KTtcblxuICAvLyBVbmRlcnNjb3JlIG1ldGhvZHMgdGhhdCB0YWtlIGEgcHJvcGVydHkgbmFtZSBhcyBhbiBhcmd1bWVudC5cbiAgdmFyIGF0dHJpYnV0ZU1ldGhvZHMgPSBbJ2dyb3VwQnknLCAnY291bnRCeScsICdzb3J0QnknLCAnaW5kZXhCeSddO1xuXG4gIC8vIFVzZSBhdHRyaWJ1dGVzIGluc3RlYWQgb2YgcHJvcGVydGllcy5cbiAgXy5lYWNoKGF0dHJpYnV0ZU1ldGhvZHMsIGZ1bmN0aW9uKG1ldGhvZCkge1xuICAgIENvbGxlY3Rpb24ucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbih2YWx1ZSwgY29udGV4dCkge1xuICAgICAgdmFyIGl0ZXJhdG9yID0gXy5pc0Z1bmN0aW9uKHZhbHVlKSA/IHZhbHVlIDogZnVuY3Rpb24obW9kZWwpIHtcbiAgICAgICAgcmV0dXJuIG1vZGVsLmdldCh2YWx1ZSk7XG4gICAgICB9O1xuICAgICAgcmV0dXJuIF9bbWV0aG9kXSh0aGlzLm1vZGVscywgaXRlcmF0b3IsIGNvbnRleHQpO1xuICAgIH07XG4gIH0pO1xuXG4gIC8vIEJhY2tib25lLlZpZXdcbiAgLy8gLS0tLS0tLS0tLS0tLVxuXG4gIC8vIEJhY2tib25lIFZpZXdzIGFyZSBhbG1vc3QgbW9yZSBjb252ZW50aW9uIHRoYW4gdGhleSBhcmUgYWN0dWFsIGNvZGUuIEEgVmlld1xuICAvLyBpcyBzaW1wbHkgYSBKYXZhU2NyaXB0IG9iamVjdCB0aGF0IHJlcHJlc2VudHMgYSBsb2dpY2FsIGNodW5rIG9mIFVJIGluIHRoZVxuICAvLyBET00uIFRoaXMgbWlnaHQgYmUgYSBzaW5nbGUgaXRlbSwgYW4gZW50aXJlIGxpc3QsIGEgc2lkZWJhciBvciBwYW5lbCwgb3JcbiAgLy8gZXZlbiB0aGUgc3Vycm91bmRpbmcgZnJhbWUgd2hpY2ggd3JhcHMgeW91ciB3aG9sZSBhcHAuIERlZmluaW5nIGEgY2h1bmsgb2ZcbiAgLy8gVUkgYXMgYSAqKlZpZXcqKiBhbGxvd3MgeW91IHRvIGRlZmluZSB5b3VyIERPTSBldmVudHMgZGVjbGFyYXRpdmVseSwgd2l0aG91dFxuICAvLyBoYXZpbmcgdG8gd29ycnkgYWJvdXQgcmVuZGVyIG9yZGVyIC4uLiBhbmQgbWFrZXMgaXQgZWFzeSBmb3IgdGhlIHZpZXcgdG9cbiAgLy8gcmVhY3QgdG8gc3BlY2lmaWMgY2hhbmdlcyBpbiB0aGUgc3RhdGUgb2YgeW91ciBtb2RlbHMuXG5cbiAgLy8gQ3JlYXRpbmcgYSBCYWNrYm9uZS5WaWV3IGNyZWF0ZXMgaXRzIGluaXRpYWwgZWxlbWVudCBvdXRzaWRlIG9mIHRoZSBET00sXG4gIC8vIGlmIGFuIGV4aXN0aW5nIGVsZW1lbnQgaXMgbm90IHByb3ZpZGVkLi4uXG4gIHZhciBWaWV3ID0gQmFja2JvbmUuVmlldyA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICB0aGlzLmNpZCA9IF8udW5pcXVlSWQoJ3ZpZXcnKTtcbiAgICBvcHRpb25zIHx8IChvcHRpb25zID0ge30pO1xuICAgIF8uZXh0ZW5kKHRoaXMsIF8ucGljayhvcHRpb25zLCB2aWV3T3B0aW9ucykpO1xuICAgIHRoaXMuX2Vuc3VyZUVsZW1lbnQoKTtcbiAgICB0aGlzLmluaXRpYWxpemUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB0aGlzLmRlbGVnYXRlRXZlbnRzKCk7XG4gIH07XG5cbiAgLy8gQ2FjaGVkIHJlZ2V4IHRvIHNwbGl0IGtleXMgZm9yIGBkZWxlZ2F0ZWAuXG4gIHZhciBkZWxlZ2F0ZUV2ZW50U3BsaXR0ZXIgPSAvXihcXFMrKVxccyooLiopJC87XG5cbiAgLy8gTGlzdCBvZiB2aWV3IG9wdGlvbnMgdG8gYmUgbWVyZ2VkIGFzIHByb3BlcnRpZXMuXG4gIHZhciB2aWV3T3B0aW9ucyA9IFsnbW9kZWwnLCAnY29sbGVjdGlvbicsICdlbCcsICdpZCcsICdhdHRyaWJ1dGVzJywgJ2NsYXNzTmFtZScsICd0YWdOYW1lJywgJ2V2ZW50cyddO1xuXG4gIC8vIFNldCB1cCBhbGwgaW5oZXJpdGFibGUgKipCYWNrYm9uZS5WaWV3KiogcHJvcGVydGllcyBhbmQgbWV0aG9kcy5cbiAgXy5leHRlbmQoVmlldy5wcm90b3R5cGUsIEV2ZW50cywge1xuXG4gICAgLy8gVGhlIGRlZmF1bHQgYHRhZ05hbWVgIG9mIGEgVmlldydzIGVsZW1lbnQgaXMgYFwiZGl2XCJgLlxuICAgIHRhZ05hbWU6ICdkaXYnLFxuXG4gICAgLy8galF1ZXJ5IGRlbGVnYXRlIGZvciBlbGVtZW50IGxvb2t1cCwgc2NvcGVkIHRvIERPTSBlbGVtZW50cyB3aXRoaW4gdGhlXG4gICAgLy8gY3VycmVudCB2aWV3LiBUaGlzIHNob3VsZCBiZSBwcmVmZXJyZWQgdG8gZ2xvYmFsIGxvb2t1cHMgd2hlcmUgcG9zc2libGUuXG4gICAgJDogZnVuY3Rpb24oc2VsZWN0b3IpIHtcbiAgICAgIHJldHVybiB0aGlzLiRlbC5maW5kKHNlbGVjdG9yKTtcbiAgICB9LFxuXG4gICAgLy8gSW5pdGlhbGl6ZSBpcyBhbiBlbXB0eSBmdW5jdGlvbiBieSBkZWZhdWx0LiBPdmVycmlkZSBpdCB3aXRoIHlvdXIgb3duXG4gICAgLy8gaW5pdGlhbGl6YXRpb24gbG9naWMuXG4gICAgaW5pdGlhbGl6ZTogZnVuY3Rpb24oKXt9LFxuXG4gICAgLy8gKipyZW5kZXIqKiBpcyB0aGUgY29yZSBmdW5jdGlvbiB0aGF0IHlvdXIgdmlldyBzaG91bGQgb3ZlcnJpZGUsIGluIG9yZGVyXG4gICAgLy8gdG8gcG9wdWxhdGUgaXRzIGVsZW1lbnQgKGB0aGlzLmVsYCksIHdpdGggdGhlIGFwcHJvcHJpYXRlIEhUTUwuIFRoZVxuICAgIC8vIGNvbnZlbnRpb24gaXMgZm9yICoqcmVuZGVyKiogdG8gYWx3YXlzIHJldHVybiBgdGhpc2AuXG4gICAgcmVuZGVyOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvLyBSZW1vdmUgdGhpcyB2aWV3IGJ5IHRha2luZyB0aGUgZWxlbWVudCBvdXQgb2YgdGhlIERPTSwgYW5kIHJlbW92aW5nIGFueVxuICAgIC8vIGFwcGxpY2FibGUgQmFja2JvbmUuRXZlbnRzIGxpc3RlbmVycy5cbiAgICByZW1vdmU6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy4kZWwucmVtb3ZlKCk7XG4gICAgICB0aGlzLnN0b3BMaXN0ZW5pbmcoKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvLyBDaGFuZ2UgdGhlIHZpZXcncyBlbGVtZW50IChgdGhpcy5lbGAgcHJvcGVydHkpLCBpbmNsdWRpbmcgZXZlbnRcbiAgICAvLyByZS1kZWxlZ2F0aW9uLlxuICAgIHNldEVsZW1lbnQ6IGZ1bmN0aW9uKGVsZW1lbnQsIGRlbGVnYXRlKSB7XG4gICAgICBpZiAodGhpcy4kZWwpIHRoaXMudW5kZWxlZ2F0ZUV2ZW50cygpO1xuICAgICAgdGhpcy4kZWwgPSBlbGVtZW50IGluc3RhbmNlb2YgQmFja2JvbmUuJCA/IGVsZW1lbnQgOiBCYWNrYm9uZS4kKGVsZW1lbnQpO1xuICAgICAgdGhpcy5lbCA9IHRoaXMuJGVsWzBdO1xuICAgICAgaWYgKGRlbGVnYXRlICE9PSBmYWxzZSkgdGhpcy5kZWxlZ2F0ZUV2ZW50cygpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8vIFNldCBjYWxsYmFja3MsIHdoZXJlIGB0aGlzLmV2ZW50c2AgaXMgYSBoYXNoIG9mXG4gICAgLy9cbiAgICAvLyAqe1wiZXZlbnQgc2VsZWN0b3JcIjogXCJjYWxsYmFja1wifSpcbiAgICAvL1xuICAgIC8vICAgICB7XG4gICAgLy8gICAgICAgJ21vdXNlZG93biAudGl0bGUnOiAgJ2VkaXQnLFxuICAgIC8vICAgICAgICdjbGljayAuYnV0dG9uJzogICAgICdzYXZlJyxcbiAgICAvLyAgICAgICAnY2xpY2sgLm9wZW4nOiAgICAgICBmdW5jdGlvbihlKSB7IC4uLiB9XG4gICAgLy8gICAgIH1cbiAgICAvL1xuICAgIC8vIHBhaXJzLiBDYWxsYmFja3Mgd2lsbCBiZSBib3VuZCB0byB0aGUgdmlldywgd2l0aCBgdGhpc2Agc2V0IHByb3Blcmx5LlxuICAgIC8vIFVzZXMgZXZlbnQgZGVsZWdhdGlvbiBmb3IgZWZmaWNpZW5jeS5cbiAgICAvLyBPbWl0dGluZyB0aGUgc2VsZWN0b3IgYmluZHMgdGhlIGV2ZW50IHRvIGB0aGlzLmVsYC5cbiAgICAvLyBUaGlzIG9ubHkgd29ya3MgZm9yIGRlbGVnYXRlLWFibGUgZXZlbnRzOiBub3QgYGZvY3VzYCwgYGJsdXJgLCBhbmRcbiAgICAvLyBub3QgYGNoYW5nZWAsIGBzdWJtaXRgLCBhbmQgYHJlc2V0YCBpbiBJbnRlcm5ldCBFeHBsb3Jlci5cbiAgICBkZWxlZ2F0ZUV2ZW50czogZnVuY3Rpb24oZXZlbnRzKSB7XG4gICAgICBpZiAoIShldmVudHMgfHwgKGV2ZW50cyA9IF8ucmVzdWx0KHRoaXMsICdldmVudHMnKSkpKSByZXR1cm4gdGhpcztcbiAgICAgIHRoaXMudW5kZWxlZ2F0ZUV2ZW50cygpO1xuICAgICAgZm9yICh2YXIga2V5IGluIGV2ZW50cykge1xuICAgICAgICB2YXIgbWV0aG9kID0gZXZlbnRzW2tleV07XG4gICAgICAgIGlmICghXy5pc0Z1bmN0aW9uKG1ldGhvZCkpIG1ldGhvZCA9IHRoaXNbZXZlbnRzW2tleV1dO1xuICAgICAgICBpZiAoIW1ldGhvZCkgY29udGludWU7XG5cbiAgICAgICAgdmFyIG1hdGNoID0ga2V5Lm1hdGNoKGRlbGVnYXRlRXZlbnRTcGxpdHRlcik7XG4gICAgICAgIHZhciBldmVudE5hbWUgPSBtYXRjaFsxXSwgc2VsZWN0b3IgPSBtYXRjaFsyXTtcbiAgICAgICAgbWV0aG9kID0gXy5iaW5kKG1ldGhvZCwgdGhpcyk7XG4gICAgICAgIGV2ZW50TmFtZSArPSAnLmRlbGVnYXRlRXZlbnRzJyArIHRoaXMuY2lkO1xuICAgICAgICBpZiAoc2VsZWN0b3IgPT09ICcnKSB7XG4gICAgICAgICAgdGhpcy4kZWwub24oZXZlbnROYW1lLCBtZXRob2QpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuJGVsLm9uKGV2ZW50TmFtZSwgc2VsZWN0b3IsIG1ldGhvZCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvLyBDbGVhcnMgYWxsIGNhbGxiYWNrcyBwcmV2aW91c2x5IGJvdW5kIHRvIHRoZSB2aWV3IHdpdGggYGRlbGVnYXRlRXZlbnRzYC5cbiAgICAvLyBZb3UgdXN1YWxseSBkb24ndCBuZWVkIHRvIHVzZSB0aGlzLCBidXQgbWF5IHdpc2ggdG8gaWYgeW91IGhhdmUgbXVsdGlwbGVcbiAgICAvLyBCYWNrYm9uZSB2aWV3cyBhdHRhY2hlZCB0byB0aGUgc2FtZSBET00gZWxlbWVudC5cbiAgICB1bmRlbGVnYXRlRXZlbnRzOiBmdW5jdGlvbigpIHtcbiAgICAgIHRoaXMuJGVsLm9mZignLmRlbGVnYXRlRXZlbnRzJyArIHRoaXMuY2lkKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvLyBFbnN1cmUgdGhhdCB0aGUgVmlldyBoYXMgYSBET00gZWxlbWVudCB0byByZW5kZXIgaW50by5cbiAgICAvLyBJZiBgdGhpcy5lbGAgaXMgYSBzdHJpbmcsIHBhc3MgaXQgdGhyb3VnaCBgJCgpYCwgdGFrZSB0aGUgZmlyc3RcbiAgICAvLyBtYXRjaGluZyBlbGVtZW50LCBhbmQgcmUtYXNzaWduIGl0IHRvIGBlbGAuIE90aGVyd2lzZSwgY3JlYXRlXG4gICAgLy8gYW4gZWxlbWVudCBmcm9tIHRoZSBgaWRgLCBgY2xhc3NOYW1lYCBhbmQgYHRhZ05hbWVgIHByb3BlcnRpZXMuXG4gICAgX2Vuc3VyZUVsZW1lbnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKCF0aGlzLmVsKSB7XG4gICAgICAgIHZhciBhdHRycyA9IF8uZXh0ZW5kKHt9LCBfLnJlc3VsdCh0aGlzLCAnYXR0cmlidXRlcycpKTtcbiAgICAgICAgaWYgKHRoaXMuaWQpIGF0dHJzLmlkID0gXy5yZXN1bHQodGhpcywgJ2lkJyk7XG4gICAgICAgIGlmICh0aGlzLmNsYXNzTmFtZSkgYXR0cnNbJ2NsYXNzJ10gPSBfLnJlc3VsdCh0aGlzLCAnY2xhc3NOYW1lJyk7XG4gICAgICAgIHZhciAkZWwgPSBCYWNrYm9uZS4kKCc8JyArIF8ucmVzdWx0KHRoaXMsICd0YWdOYW1lJykgKyAnPicpLmF0dHIoYXR0cnMpO1xuICAgICAgICB0aGlzLnNldEVsZW1lbnQoJGVsLCBmYWxzZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnNldEVsZW1lbnQoXy5yZXN1bHQodGhpcywgJ2VsJyksIGZhbHNlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgfSk7XG5cbiAgLy8gQmFja2JvbmUuc3luY1xuICAvLyAtLS0tLS0tLS0tLS0tXG5cbiAgLy8gT3ZlcnJpZGUgdGhpcyBmdW5jdGlvbiB0byBjaGFuZ2UgdGhlIG1hbm5lciBpbiB3aGljaCBCYWNrYm9uZSBwZXJzaXN0c1xuICAvLyBtb2RlbHMgdG8gdGhlIHNlcnZlci4gWW91IHdpbGwgYmUgcGFzc2VkIHRoZSB0eXBlIG9mIHJlcXVlc3QsIGFuZCB0aGVcbiAgLy8gbW9kZWwgaW4gcXVlc3Rpb24uIEJ5IGRlZmF1bHQsIG1ha2VzIGEgUkVTVGZ1bCBBamF4IHJlcXVlc3RcbiAgLy8gdG8gdGhlIG1vZGVsJ3MgYHVybCgpYC4gU29tZSBwb3NzaWJsZSBjdXN0b21pemF0aW9ucyBjb3VsZCBiZTpcbiAgLy9cbiAgLy8gKiBVc2UgYHNldFRpbWVvdXRgIHRvIGJhdGNoIHJhcGlkLWZpcmUgdXBkYXRlcyBpbnRvIGEgc2luZ2xlIHJlcXVlc3QuXG4gIC8vICogU2VuZCB1cCB0aGUgbW9kZWxzIGFzIFhNTCBpbnN0ZWFkIG9mIEpTT04uXG4gIC8vICogUGVyc2lzdCBtb2RlbHMgdmlhIFdlYlNvY2tldHMgaW5zdGVhZCBvZiBBamF4LlxuICAvL1xuICAvLyBUdXJuIG9uIGBCYWNrYm9uZS5lbXVsYXRlSFRUUGAgaW4gb3JkZXIgdG8gc2VuZCBgUFVUYCBhbmQgYERFTEVURWAgcmVxdWVzdHNcbiAgLy8gYXMgYFBPU1RgLCB3aXRoIGEgYF9tZXRob2RgIHBhcmFtZXRlciBjb250YWluaW5nIHRoZSB0cnVlIEhUVFAgbWV0aG9kLFxuICAvLyBhcyB3ZWxsIGFzIGFsbCByZXF1ZXN0cyB3aXRoIHRoZSBib2R5IGFzIGBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRgXG4gIC8vIGluc3RlYWQgb2YgYGFwcGxpY2F0aW9uL2pzb25gIHdpdGggdGhlIG1vZGVsIGluIGEgcGFyYW0gbmFtZWQgYG1vZGVsYC5cbiAgLy8gVXNlZnVsIHdoZW4gaW50ZXJmYWNpbmcgd2l0aCBzZXJ2ZXItc2lkZSBsYW5ndWFnZXMgbGlrZSAqKlBIUCoqIHRoYXQgbWFrZVxuICAvLyBpdCBkaWZmaWN1bHQgdG8gcmVhZCB0aGUgYm9keSBvZiBgUFVUYCByZXF1ZXN0cy5cbiAgQmFja2JvbmUuc3luYyA9IGZ1bmN0aW9uKG1ldGhvZCwgbW9kZWwsIG9wdGlvbnMpIHtcbiAgICB2YXIgdHlwZSA9IG1ldGhvZE1hcFttZXRob2RdO1xuXG4gICAgLy8gRGVmYXVsdCBvcHRpb25zLCB1bmxlc3Mgc3BlY2lmaWVkLlxuICAgIF8uZGVmYXVsdHMob3B0aW9ucyB8fCAob3B0aW9ucyA9IHt9KSwge1xuICAgICAgZW11bGF0ZUhUVFA6IEJhY2tib25lLmVtdWxhdGVIVFRQLFxuICAgICAgZW11bGF0ZUpTT046IEJhY2tib25lLmVtdWxhdGVKU09OXG4gICAgfSk7XG5cbiAgICAvLyBEZWZhdWx0IEpTT04tcmVxdWVzdCBvcHRpb25zLlxuICAgIHZhciBwYXJhbXMgPSB7dHlwZTogdHlwZSwgZGF0YVR5cGU6ICdqc29uJ307XG5cbiAgICAvLyBFbnN1cmUgdGhhdCB3ZSBoYXZlIGEgVVJMLlxuICAgIGlmICghb3B0aW9ucy51cmwpIHtcbiAgICAgIHBhcmFtcy51cmwgPSBfLnJlc3VsdChtb2RlbCwgJ3VybCcpIHx8IHVybEVycm9yKCk7XG4gICAgfVxuXG4gICAgLy8gRW5zdXJlIHRoYXQgd2UgaGF2ZSB0aGUgYXBwcm9wcmlhdGUgcmVxdWVzdCBkYXRhLlxuICAgIGlmIChvcHRpb25zLmRhdGEgPT0gbnVsbCAmJiBtb2RlbCAmJiAobWV0aG9kID09PSAnY3JlYXRlJyB8fCBtZXRob2QgPT09ICd1cGRhdGUnIHx8IG1ldGhvZCA9PT0gJ3BhdGNoJykpIHtcbiAgICAgIHBhcmFtcy5jb250ZW50VHlwZSA9ICdhcHBsaWNhdGlvbi9qc29uJztcbiAgICAgIHBhcmFtcy5kYXRhID0gSlNPTi5zdHJpbmdpZnkob3B0aW9ucy5hdHRycyB8fCBtb2RlbC50b0pTT04ob3B0aW9ucykpO1xuICAgIH1cblxuICAgIC8vIEZvciBvbGRlciBzZXJ2ZXJzLCBlbXVsYXRlIEpTT04gYnkgZW5jb2RpbmcgdGhlIHJlcXVlc3QgaW50byBhbiBIVE1MLWZvcm0uXG4gICAgaWYgKG9wdGlvbnMuZW11bGF0ZUpTT04pIHtcbiAgICAgIHBhcmFtcy5jb250ZW50VHlwZSA9ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnO1xuICAgICAgcGFyYW1zLmRhdGEgPSBwYXJhbXMuZGF0YSA/IHttb2RlbDogcGFyYW1zLmRhdGF9IDoge307XG4gICAgfVxuXG4gICAgLy8gRm9yIG9sZGVyIHNlcnZlcnMsIGVtdWxhdGUgSFRUUCBieSBtaW1pY2tpbmcgdGhlIEhUVFAgbWV0aG9kIHdpdGggYF9tZXRob2RgXG4gICAgLy8gQW5kIGFuIGBYLUhUVFAtTWV0aG9kLU92ZXJyaWRlYCBoZWFkZXIuXG4gICAgaWYgKG9wdGlvbnMuZW11bGF0ZUhUVFAgJiYgKHR5cGUgPT09ICdQVVQnIHx8IHR5cGUgPT09ICdERUxFVEUnIHx8IHR5cGUgPT09ICdQQVRDSCcpKSB7XG4gICAgICBwYXJhbXMudHlwZSA9ICdQT1NUJztcbiAgICAgIGlmIChvcHRpb25zLmVtdWxhdGVKU09OKSBwYXJhbXMuZGF0YS5fbWV0aG9kID0gdHlwZTtcbiAgICAgIHZhciBiZWZvcmVTZW5kID0gb3B0aW9ucy5iZWZvcmVTZW5kO1xuICAgICAgb3B0aW9ucy5iZWZvcmVTZW5kID0gZnVuY3Rpb24oeGhyKSB7XG4gICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKCdYLUhUVFAtTWV0aG9kLU92ZXJyaWRlJywgdHlwZSk7XG4gICAgICAgIGlmIChiZWZvcmVTZW5kKSByZXR1cm4gYmVmb3JlU2VuZC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBEb24ndCBwcm9jZXNzIGRhdGEgb24gYSBub24tR0VUIHJlcXVlc3QuXG4gICAgaWYgKHBhcmFtcy50eXBlICE9PSAnR0VUJyAmJiAhb3B0aW9ucy5lbXVsYXRlSlNPTikge1xuICAgICAgcGFyYW1zLnByb2Nlc3NEYXRhID0gZmFsc2U7XG4gICAgfVxuXG4gICAgLy8gSWYgd2UncmUgc2VuZGluZyBhIGBQQVRDSGAgcmVxdWVzdCwgYW5kIHdlJ3JlIGluIGFuIG9sZCBJbnRlcm5ldCBFeHBsb3JlclxuICAgIC8vIHRoYXQgc3RpbGwgaGFzIEFjdGl2ZVggZW5hYmxlZCBieSBkZWZhdWx0LCBvdmVycmlkZSBqUXVlcnkgdG8gdXNlIHRoYXRcbiAgICAvLyBmb3IgWEhSIGluc3RlYWQuIFJlbW92ZSB0aGlzIGxpbmUgd2hlbiBqUXVlcnkgc3VwcG9ydHMgYFBBVENIYCBvbiBJRTguXG4gICAgaWYgKHBhcmFtcy50eXBlID09PSAnUEFUQ0gnICYmIG5vWGhyUGF0Y2gpIHtcbiAgICAgIHBhcmFtcy54aHIgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBBY3RpdmVYT2JqZWN0KFwiTWljcm9zb2Z0LlhNTEhUVFBcIik7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8vIE1ha2UgdGhlIHJlcXVlc3QsIGFsbG93aW5nIHRoZSB1c2VyIHRvIG92ZXJyaWRlIGFueSBBamF4IG9wdGlvbnMuXG4gICAgdmFyIHhociA9IG9wdGlvbnMueGhyID0gQmFja2JvbmUuYWpheChfLmV4dGVuZChwYXJhbXMsIG9wdGlvbnMpKTtcbiAgICBtb2RlbC50cmlnZ2VyKCdyZXF1ZXN0JywgbW9kZWwsIHhociwgb3B0aW9ucyk7XG4gICAgcmV0dXJuIHhocjtcbiAgfTtcblxuICB2YXIgbm9YaHJQYXRjaCA9XG4gICAgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgISF3aW5kb3cuQWN0aXZlWE9iamVjdCAmJlxuICAgICAgISh3aW5kb3cuWE1MSHR0cFJlcXVlc3QgJiYgKG5ldyBYTUxIdHRwUmVxdWVzdCkuZGlzcGF0Y2hFdmVudCk7XG5cbiAgLy8gTWFwIGZyb20gQ1JVRCB0byBIVFRQIGZvciBvdXIgZGVmYXVsdCBgQmFja2JvbmUuc3luY2AgaW1wbGVtZW50YXRpb24uXG4gIHZhciBtZXRob2RNYXAgPSB7XG4gICAgJ2NyZWF0ZSc6ICdQT1NUJyxcbiAgICAndXBkYXRlJzogJ1BVVCcsXG4gICAgJ3BhdGNoJzogICdQQVRDSCcsXG4gICAgJ2RlbGV0ZSc6ICdERUxFVEUnLFxuICAgICdyZWFkJzogICAnR0VUJ1xuICB9O1xuXG4gIC8vIFNldCB0aGUgZGVmYXVsdCBpbXBsZW1lbnRhdGlvbiBvZiBgQmFja2JvbmUuYWpheGAgdG8gcHJveHkgdGhyb3VnaCB0byBgJGAuXG4gIC8vIE92ZXJyaWRlIHRoaXMgaWYgeW91J2QgbGlrZSB0byB1c2UgYSBkaWZmZXJlbnQgbGlicmFyeS5cbiAgQmFja2JvbmUuYWpheCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBCYWNrYm9uZS4kLmFqYXguYXBwbHkoQmFja2JvbmUuJCwgYXJndW1lbnRzKTtcbiAgfTtcblxuICAvLyBCYWNrYm9uZS5Sb3V0ZXJcbiAgLy8gLS0tLS0tLS0tLS0tLS0tXG5cbiAgLy8gUm91dGVycyBtYXAgZmF1eC1VUkxzIHRvIGFjdGlvbnMsIGFuZCBmaXJlIGV2ZW50cyB3aGVuIHJvdXRlcyBhcmVcbiAgLy8gbWF0Y2hlZC4gQ3JlYXRpbmcgYSBuZXcgb25lIHNldHMgaXRzIGByb3V0ZXNgIGhhc2gsIGlmIG5vdCBzZXQgc3RhdGljYWxseS5cbiAgdmFyIFJvdXRlciA9IEJhY2tib25lLlJvdXRlciA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICBvcHRpb25zIHx8IChvcHRpb25zID0ge30pO1xuICAgIGlmIChvcHRpb25zLnJvdXRlcykgdGhpcy5yb3V0ZXMgPSBvcHRpb25zLnJvdXRlcztcbiAgICB0aGlzLl9iaW5kUm91dGVzKCk7XG4gICAgdGhpcy5pbml0aWFsaXplLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH07XG5cbiAgLy8gQ2FjaGVkIHJlZ3VsYXIgZXhwcmVzc2lvbnMgZm9yIG1hdGNoaW5nIG5hbWVkIHBhcmFtIHBhcnRzIGFuZCBzcGxhdHRlZFxuICAvLyBwYXJ0cyBvZiByb3V0ZSBzdHJpbmdzLlxuICB2YXIgb3B0aW9uYWxQYXJhbSA9IC9cXCgoLio/KVxcKS9nO1xuICB2YXIgbmFtZWRQYXJhbSAgICA9IC8oXFwoXFw/KT86XFx3Ky9nO1xuICB2YXIgc3BsYXRQYXJhbSAgICA9IC9cXCpcXHcrL2c7XG4gIHZhciBlc2NhcGVSZWdFeHAgID0gL1tcXC17fVxcW1xcXSs/LixcXFxcXFxeJHwjXFxzXS9nO1xuXG4gIC8vIFNldCB1cCBhbGwgaW5oZXJpdGFibGUgKipCYWNrYm9uZS5Sb3V0ZXIqKiBwcm9wZXJ0aWVzIGFuZCBtZXRob2RzLlxuICBfLmV4dGVuZChSb3V0ZXIucHJvdG90eXBlLCBFdmVudHMsIHtcblxuICAgIC8vIEluaXRpYWxpemUgaXMgYW4gZW1wdHkgZnVuY3Rpb24gYnkgZGVmYXVsdC4gT3ZlcnJpZGUgaXQgd2l0aCB5b3VyIG93blxuICAgIC8vIGluaXRpYWxpemF0aW9uIGxvZ2ljLlxuICAgIGluaXRpYWxpemU6IGZ1bmN0aW9uKCl7fSxcblxuICAgIC8vIE1hbnVhbGx5IGJpbmQgYSBzaW5nbGUgbmFtZWQgcm91dGUgdG8gYSBjYWxsYmFjay4gRm9yIGV4YW1wbGU6XG4gICAgLy9cbiAgICAvLyAgICAgdGhpcy5yb3V0ZSgnc2VhcmNoLzpxdWVyeS9wOm51bScsICdzZWFyY2gnLCBmdW5jdGlvbihxdWVyeSwgbnVtKSB7XG4gICAgLy8gICAgICAgLi4uXG4gICAgLy8gICAgIH0pO1xuICAgIC8vXG4gICAgcm91dGU6IGZ1bmN0aW9uKHJvdXRlLCBuYW1lLCBjYWxsYmFjaykge1xuICAgICAgaWYgKCFfLmlzUmVnRXhwKHJvdXRlKSkgcm91dGUgPSB0aGlzLl9yb3V0ZVRvUmVnRXhwKHJvdXRlKTtcbiAgICAgIGlmIChfLmlzRnVuY3Rpb24obmFtZSkpIHtcbiAgICAgICAgY2FsbGJhY2sgPSBuYW1lO1xuICAgICAgICBuYW1lID0gJyc7XG4gICAgICB9XG4gICAgICBpZiAoIWNhbGxiYWNrKSBjYWxsYmFjayA9IHRoaXNbbmFtZV07XG4gICAgICB2YXIgcm91dGVyID0gdGhpcztcbiAgICAgIEJhY2tib25lLmhpc3Rvcnkucm91dGUocm91dGUsIGZ1bmN0aW9uKGZyYWdtZW50KSB7XG4gICAgICAgIHZhciBhcmdzID0gcm91dGVyLl9leHRyYWN0UGFyYW1ldGVycyhyb3V0ZSwgZnJhZ21lbnQpO1xuICAgICAgICByb3V0ZXIuZXhlY3V0ZShjYWxsYmFjaywgYXJncyk7XG4gICAgICAgIHJvdXRlci50cmlnZ2VyLmFwcGx5KHJvdXRlciwgWydyb3V0ZTonICsgbmFtZV0uY29uY2F0KGFyZ3MpKTtcbiAgICAgICAgcm91dGVyLnRyaWdnZXIoJ3JvdXRlJywgbmFtZSwgYXJncyk7XG4gICAgICAgIEJhY2tib25lLmhpc3RvcnkudHJpZ2dlcigncm91dGUnLCByb3V0ZXIsIG5hbWUsIGFyZ3MpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLy8gRXhlY3V0ZSBhIHJvdXRlIGhhbmRsZXIgd2l0aCB0aGUgcHJvdmlkZWQgcGFyYW1ldGVycy4gIFRoaXMgaXMgYW5cbiAgICAvLyBleGNlbGxlbnQgcGxhY2UgdG8gZG8gcHJlLXJvdXRlIHNldHVwIG9yIHBvc3Qtcm91dGUgY2xlYW51cC5cbiAgICBleGVjdXRlOiBmdW5jdGlvbihjYWxsYmFjaywgYXJncykge1xuICAgICAgaWYgKGNhbGxiYWNrKSBjYWxsYmFjay5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICB9LFxuXG4gICAgLy8gU2ltcGxlIHByb3h5IHRvIGBCYWNrYm9uZS5oaXN0b3J5YCB0byBzYXZlIGEgZnJhZ21lbnQgaW50byB0aGUgaGlzdG9yeS5cbiAgICBuYXZpZ2F0ZTogZnVuY3Rpb24oZnJhZ21lbnQsIG9wdGlvbnMpIHtcbiAgICAgIEJhY2tib25lLmhpc3RvcnkubmF2aWdhdGUoZnJhZ21lbnQsIG9wdGlvbnMpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8vIEJpbmQgYWxsIGRlZmluZWQgcm91dGVzIHRvIGBCYWNrYm9uZS5oaXN0b3J5YC4gV2UgaGF2ZSB0byByZXZlcnNlIHRoZVxuICAgIC8vIG9yZGVyIG9mIHRoZSByb3V0ZXMgaGVyZSB0byBzdXBwb3J0IGJlaGF2aW9yIHdoZXJlIHRoZSBtb3N0IGdlbmVyYWxcbiAgICAvLyByb3V0ZXMgY2FuIGJlIGRlZmluZWQgYXQgdGhlIGJvdHRvbSBvZiB0aGUgcm91dGUgbWFwLlxuICAgIF9iaW5kUm91dGVzOiBmdW5jdGlvbigpIHtcbiAgICAgIGlmICghdGhpcy5yb3V0ZXMpIHJldHVybjtcbiAgICAgIHRoaXMucm91dGVzID0gXy5yZXN1bHQodGhpcywgJ3JvdXRlcycpO1xuICAgICAgdmFyIHJvdXRlLCByb3V0ZXMgPSBfLmtleXModGhpcy5yb3V0ZXMpO1xuICAgICAgd2hpbGUgKChyb3V0ZSA9IHJvdXRlcy5wb3AoKSkgIT0gbnVsbCkge1xuICAgICAgICB0aGlzLnJvdXRlKHJvdXRlLCB0aGlzLnJvdXRlc1tyb3V0ZV0pO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvLyBDb252ZXJ0IGEgcm91dGUgc3RyaW5nIGludG8gYSByZWd1bGFyIGV4cHJlc3Npb24sIHN1aXRhYmxlIGZvciBtYXRjaGluZ1xuICAgIC8vIGFnYWluc3QgdGhlIGN1cnJlbnQgbG9jYXRpb24gaGFzaC5cbiAgICBfcm91dGVUb1JlZ0V4cDogZnVuY3Rpb24ocm91dGUpIHtcbiAgICAgIHJvdXRlID0gcm91dGUucmVwbGFjZShlc2NhcGVSZWdFeHAsICdcXFxcJCYnKVxuICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKG9wdGlvbmFsUGFyYW0sICcoPzokMSk/JylcbiAgICAgICAgICAgICAgICAgICAucmVwbGFjZShuYW1lZFBhcmFtLCBmdW5jdGlvbihtYXRjaCwgb3B0aW9uYWwpIHtcbiAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvcHRpb25hbCA/IG1hdGNoIDogJyhbXi8/XSspJztcbiAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKHNwbGF0UGFyYW0sICcoW14/XSo/KScpO1xuICAgICAgcmV0dXJuIG5ldyBSZWdFeHAoJ14nICsgcm91dGUgKyAnKD86XFxcXD8oW1xcXFxzXFxcXFNdKikpPyQnKTtcbiAgICB9LFxuXG4gICAgLy8gR2l2ZW4gYSByb3V0ZSwgYW5kIGEgVVJMIGZyYWdtZW50IHRoYXQgaXQgbWF0Y2hlcywgcmV0dXJuIHRoZSBhcnJheSBvZlxuICAgIC8vIGV4dHJhY3RlZCBkZWNvZGVkIHBhcmFtZXRlcnMuIEVtcHR5IG9yIHVubWF0Y2hlZCBwYXJhbWV0ZXJzIHdpbGwgYmVcbiAgICAvLyB0cmVhdGVkIGFzIGBudWxsYCB0byBub3JtYWxpemUgY3Jvc3MtYnJvd3NlciBiZWhhdmlvci5cbiAgICBfZXh0cmFjdFBhcmFtZXRlcnM6IGZ1bmN0aW9uKHJvdXRlLCBmcmFnbWVudCkge1xuICAgICAgdmFyIHBhcmFtcyA9IHJvdXRlLmV4ZWMoZnJhZ21lbnQpLnNsaWNlKDEpO1xuICAgICAgcmV0dXJuIF8ubWFwKHBhcmFtcywgZnVuY3Rpb24ocGFyYW0sIGkpIHtcbiAgICAgICAgLy8gRG9uJ3QgZGVjb2RlIHRoZSBzZWFyY2ggcGFyYW1zLlxuICAgICAgICBpZiAoaSA9PT0gcGFyYW1zLmxlbmd0aCAtIDEpIHJldHVybiBwYXJhbSB8fCBudWxsO1xuICAgICAgICByZXR1cm4gcGFyYW0gPyBkZWNvZGVVUklDb21wb25lbnQocGFyYW0pIDogbnVsbDtcbiAgICAgIH0pO1xuICAgIH1cblxuICB9KTtcblxuICAvLyBCYWNrYm9uZS5IaXN0b3J5XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS1cblxuICAvLyBIYW5kbGVzIGNyb3NzLWJyb3dzZXIgaGlzdG9yeSBtYW5hZ2VtZW50LCBiYXNlZCBvbiBlaXRoZXJcbiAgLy8gW3B1c2hTdGF0ZV0oaHR0cDovL2RpdmVpbnRvaHRtbDUuaW5mby9oaXN0b3J5Lmh0bWwpIGFuZCByZWFsIFVSTHMsIG9yXG4gIC8vIFtvbmhhc2hjaGFuZ2VdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvRE9NL3dpbmRvdy5vbmhhc2hjaGFuZ2UpXG4gIC8vIGFuZCBVUkwgZnJhZ21lbnRzLiBJZiB0aGUgYnJvd3NlciBzdXBwb3J0cyBuZWl0aGVyIChvbGQgSUUsIG5hdGNoKSxcbiAgLy8gZmFsbHMgYmFjayB0byBwb2xsaW5nLlxuICB2YXIgSGlzdG9yeSA9IEJhY2tib25lLkhpc3RvcnkgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLmhhbmRsZXJzID0gW107XG4gICAgXy5iaW5kQWxsKHRoaXMsICdjaGVja1VybCcpO1xuXG4gICAgLy8gRW5zdXJlIHRoYXQgYEhpc3RvcnlgIGNhbiBiZSB1c2VkIG91dHNpZGUgb2YgdGhlIGJyb3dzZXIuXG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aGlzLmxvY2F0aW9uID0gd2luZG93LmxvY2F0aW9uO1xuICAgICAgdGhpcy5oaXN0b3J5ID0gd2luZG93Lmhpc3Rvcnk7XG4gICAgfVxuICB9O1xuXG4gIC8vIENhY2hlZCByZWdleCBmb3Igc3RyaXBwaW5nIGEgbGVhZGluZyBoYXNoL3NsYXNoIGFuZCB0cmFpbGluZyBzcGFjZS5cbiAgdmFyIHJvdXRlU3RyaXBwZXIgPSAvXlsjXFwvXXxcXHMrJC9nO1xuXG4gIC8vIENhY2hlZCByZWdleCBmb3Igc3RyaXBwaW5nIGxlYWRpbmcgYW5kIHRyYWlsaW5nIHNsYXNoZXMuXG4gIHZhciByb290U3RyaXBwZXIgPSAvXlxcLyt8XFwvKyQvZztcblxuICAvLyBDYWNoZWQgcmVnZXggZm9yIGRldGVjdGluZyBNU0lFLlxuICB2YXIgaXNFeHBsb3JlciA9IC9tc2llIFtcXHcuXSsvO1xuXG4gIC8vIENhY2hlZCByZWdleCBmb3IgcmVtb3ZpbmcgYSB0cmFpbGluZyBzbGFzaC5cbiAgdmFyIHRyYWlsaW5nU2xhc2ggPSAvXFwvJC87XG5cbiAgLy8gQ2FjaGVkIHJlZ2V4IGZvciBzdHJpcHBpbmcgdXJscyBvZiBoYXNoLlxuICB2YXIgcGF0aFN0cmlwcGVyID0gLyMuKiQvO1xuXG4gIC8vIEhhcyB0aGUgaGlzdG9yeSBoYW5kbGluZyBhbHJlYWR5IGJlZW4gc3RhcnRlZD9cbiAgSGlzdG9yeS5zdGFydGVkID0gZmFsc2U7XG5cbiAgLy8gU2V0IHVwIGFsbCBpbmhlcml0YWJsZSAqKkJhY2tib25lLkhpc3RvcnkqKiBwcm9wZXJ0aWVzIGFuZCBtZXRob2RzLlxuICBfLmV4dGVuZChIaXN0b3J5LnByb3RvdHlwZSwgRXZlbnRzLCB7XG5cbiAgICAvLyBUaGUgZGVmYXVsdCBpbnRlcnZhbCB0byBwb2xsIGZvciBoYXNoIGNoYW5nZXMsIGlmIG5lY2Vzc2FyeSwgaXNcbiAgICAvLyB0d2VudHkgdGltZXMgYSBzZWNvbmQuXG4gICAgaW50ZXJ2YWw6IDUwLFxuXG4gICAgLy8gQXJlIHdlIGF0IHRoZSBhcHAgcm9vdD9cbiAgICBhdFJvb3Q6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMubG9jYXRpb24ucGF0aG5hbWUucmVwbGFjZSgvW15cXC9dJC8sICckJi8nKSA9PT0gdGhpcy5yb290O1xuICAgIH0sXG5cbiAgICAvLyBHZXRzIHRoZSB0cnVlIGhhc2ggdmFsdWUuIENhbm5vdCB1c2UgbG9jYXRpb24uaGFzaCBkaXJlY3RseSBkdWUgdG8gYnVnXG4gICAgLy8gaW4gRmlyZWZveCB3aGVyZSBsb2NhdGlvbi5oYXNoIHdpbGwgYWx3YXlzIGJlIGRlY29kZWQuXG4gICAgZ2V0SGFzaDogZnVuY3Rpb24od2luZG93KSB7XG4gICAgICB2YXIgbWF0Y2ggPSAod2luZG93IHx8IHRoaXMpLmxvY2F0aW9uLmhyZWYubWF0Y2goLyMoLiopJC8pO1xuICAgICAgcmV0dXJuIG1hdGNoID8gbWF0Y2hbMV0gOiAnJztcbiAgICB9LFxuXG4gICAgLy8gR2V0IHRoZSBjcm9zcy1icm93c2VyIG5vcm1hbGl6ZWQgVVJMIGZyYWdtZW50LCBlaXRoZXIgZnJvbSB0aGUgVVJMLFxuICAgIC8vIHRoZSBoYXNoLCBvciB0aGUgb3ZlcnJpZGUuXG4gICAgZ2V0RnJhZ21lbnQ6IGZ1bmN0aW9uKGZyYWdtZW50LCBmb3JjZVB1c2hTdGF0ZSkge1xuICAgICAgaWYgKGZyYWdtZW50ID09IG51bGwpIHtcbiAgICAgICAgaWYgKHRoaXMuX2hhc1B1c2hTdGF0ZSB8fCAhdGhpcy5fd2FudHNIYXNoQ2hhbmdlIHx8IGZvcmNlUHVzaFN0YXRlKSB7XG4gICAgICAgICAgZnJhZ21lbnQgPSBkZWNvZGVVUkkodGhpcy5sb2NhdGlvbi5wYXRobmFtZSArIHRoaXMubG9jYXRpb24uc2VhcmNoKTtcbiAgICAgICAgICB2YXIgcm9vdCA9IHRoaXMucm9vdC5yZXBsYWNlKHRyYWlsaW5nU2xhc2gsICcnKTtcbiAgICAgICAgICBpZiAoIWZyYWdtZW50LmluZGV4T2Yocm9vdCkpIGZyYWdtZW50ID0gZnJhZ21lbnQuc2xpY2Uocm9vdC5sZW5ndGgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGZyYWdtZW50ID0gdGhpcy5nZXRIYXNoKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBmcmFnbWVudC5yZXBsYWNlKHJvdXRlU3RyaXBwZXIsICcnKTtcbiAgICB9LFxuXG4gICAgLy8gU3RhcnQgdGhlIGhhc2ggY2hhbmdlIGhhbmRsaW5nLCByZXR1cm5pbmcgYHRydWVgIGlmIHRoZSBjdXJyZW50IFVSTCBtYXRjaGVzXG4gICAgLy8gYW4gZXhpc3Rpbmcgcm91dGUsIGFuZCBgZmFsc2VgIG90aGVyd2lzZS5cbiAgICBzdGFydDogZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgaWYgKEhpc3Rvcnkuc3RhcnRlZCkgdGhyb3cgbmV3IEVycm9yKFwiQmFja2JvbmUuaGlzdG9yeSBoYXMgYWxyZWFkeSBiZWVuIHN0YXJ0ZWRcIik7XG4gICAgICBIaXN0b3J5LnN0YXJ0ZWQgPSB0cnVlO1xuXG4gICAgICAvLyBGaWd1cmUgb3V0IHRoZSBpbml0aWFsIGNvbmZpZ3VyYXRpb24uIERvIHdlIG5lZWQgYW4gaWZyYW1lP1xuICAgICAgLy8gSXMgcHVzaFN0YXRlIGRlc2lyZWQgLi4uIGlzIGl0IGF2YWlsYWJsZT9cbiAgICAgIHRoaXMub3B0aW9ucyAgICAgICAgICA9IF8uZXh0ZW5kKHtyb290OiAnLyd9LCB0aGlzLm9wdGlvbnMsIG9wdGlvbnMpO1xuICAgICAgdGhpcy5yb290ICAgICAgICAgICAgID0gdGhpcy5vcHRpb25zLnJvb3Q7XG4gICAgICB0aGlzLl93YW50c0hhc2hDaGFuZ2UgPSB0aGlzLm9wdGlvbnMuaGFzaENoYW5nZSAhPT0gZmFsc2U7XG4gICAgICB0aGlzLl93YW50c1B1c2hTdGF0ZSAgPSAhIXRoaXMub3B0aW9ucy5wdXNoU3RhdGU7XG4gICAgICB0aGlzLl9oYXNQdXNoU3RhdGUgICAgPSAhISh0aGlzLm9wdGlvbnMucHVzaFN0YXRlICYmIHRoaXMuaGlzdG9yeSAmJiB0aGlzLmhpc3RvcnkucHVzaFN0YXRlKTtcbiAgICAgIHZhciBmcmFnbWVudCAgICAgICAgICA9IHRoaXMuZ2V0RnJhZ21lbnQoKTtcbiAgICAgIHZhciBkb2NNb2RlICAgICAgICAgICA9IGRvY3VtZW50LmRvY3VtZW50TW9kZTtcbiAgICAgIHZhciBvbGRJRSAgICAgICAgICAgICA9IChpc0V4cGxvcmVyLmV4ZWMobmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpKSAmJiAoIWRvY01vZGUgfHwgZG9jTW9kZSA8PSA3KSk7XG5cbiAgICAgIC8vIE5vcm1hbGl6ZSByb290IHRvIGFsd2F5cyBpbmNsdWRlIGEgbGVhZGluZyBhbmQgdHJhaWxpbmcgc2xhc2guXG4gICAgICB0aGlzLnJvb3QgPSAoJy8nICsgdGhpcy5yb290ICsgJy8nKS5yZXBsYWNlKHJvb3RTdHJpcHBlciwgJy8nKTtcblxuICAgICAgaWYgKG9sZElFICYmIHRoaXMuX3dhbnRzSGFzaENoYW5nZSkge1xuICAgICAgICB2YXIgZnJhbWUgPSBCYWNrYm9uZS4kKCc8aWZyYW1lIHNyYz1cImphdmFzY3JpcHQ6MFwiIHRhYmluZGV4PVwiLTFcIj4nKTtcbiAgICAgICAgdGhpcy5pZnJhbWUgPSBmcmFtZS5oaWRlKCkuYXBwZW5kVG8oJ2JvZHknKVswXS5jb250ZW50V2luZG93O1xuICAgICAgICB0aGlzLm5hdmlnYXRlKGZyYWdtZW50KTtcbiAgICAgIH1cblxuICAgICAgLy8gRGVwZW5kaW5nIG9uIHdoZXRoZXIgd2UncmUgdXNpbmcgcHVzaFN0YXRlIG9yIGhhc2hlcywgYW5kIHdoZXRoZXJcbiAgICAgIC8vICdvbmhhc2hjaGFuZ2UnIGlzIHN1cHBvcnRlZCwgZGV0ZXJtaW5lIGhvdyB3ZSBjaGVjayB0aGUgVVJMIHN0YXRlLlxuICAgICAgaWYgKHRoaXMuX2hhc1B1c2hTdGF0ZSkge1xuICAgICAgICBCYWNrYm9uZS4kKHdpbmRvdykub24oJ3BvcHN0YXRlJywgdGhpcy5jaGVja1VybCk7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuX3dhbnRzSGFzaENoYW5nZSAmJiAoJ29uaGFzaGNoYW5nZScgaW4gd2luZG93KSAmJiAhb2xkSUUpIHtcbiAgICAgICAgQmFja2JvbmUuJCh3aW5kb3cpLm9uKCdoYXNoY2hhbmdlJywgdGhpcy5jaGVja1VybCk7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuX3dhbnRzSGFzaENoYW5nZSkge1xuICAgICAgICB0aGlzLl9jaGVja1VybEludGVydmFsID0gc2V0SW50ZXJ2YWwodGhpcy5jaGVja1VybCwgdGhpcy5pbnRlcnZhbCk7XG4gICAgICB9XG5cbiAgICAgIC8vIERldGVybWluZSBpZiB3ZSBuZWVkIHRvIGNoYW5nZSB0aGUgYmFzZSB1cmwsIGZvciBhIHB1c2hTdGF0ZSBsaW5rXG4gICAgICAvLyBvcGVuZWQgYnkgYSBub24tcHVzaFN0YXRlIGJyb3dzZXIuXG4gICAgICB0aGlzLmZyYWdtZW50ID0gZnJhZ21lbnQ7XG4gICAgICB2YXIgbG9jID0gdGhpcy5sb2NhdGlvbjtcblxuICAgICAgLy8gVHJhbnNpdGlvbiBmcm9tIGhhc2hDaGFuZ2UgdG8gcHVzaFN0YXRlIG9yIHZpY2UgdmVyc2EgaWYgYm90aCBhcmVcbiAgICAgIC8vIHJlcXVlc3RlZC5cbiAgICAgIGlmICh0aGlzLl93YW50c0hhc2hDaGFuZ2UgJiYgdGhpcy5fd2FudHNQdXNoU3RhdGUpIHtcblxuICAgICAgICAvLyBJZiB3ZSd2ZSBzdGFydGVkIG9mZiB3aXRoIGEgcm91dGUgZnJvbSBhIGBwdXNoU3RhdGVgLWVuYWJsZWRcbiAgICAgICAgLy8gYnJvd3NlciwgYnV0IHdlJ3JlIGN1cnJlbnRseSBpbiBhIGJyb3dzZXIgdGhhdCBkb2Vzbid0IHN1cHBvcnQgaXQuLi5cbiAgICAgICAgaWYgKCF0aGlzLl9oYXNQdXNoU3RhdGUgJiYgIXRoaXMuYXRSb290KCkpIHtcbiAgICAgICAgICB0aGlzLmZyYWdtZW50ID0gdGhpcy5nZXRGcmFnbWVudChudWxsLCB0cnVlKTtcbiAgICAgICAgICB0aGlzLmxvY2F0aW9uLnJlcGxhY2UodGhpcy5yb290ICsgJyMnICsgdGhpcy5mcmFnbWVudCk7XG4gICAgICAgICAgLy8gUmV0dXJuIGltbWVkaWF0ZWx5IGFzIGJyb3dzZXIgd2lsbCBkbyByZWRpcmVjdCB0byBuZXcgdXJsXG4gICAgICAgICAgcmV0dXJuIHRydWU7XG5cbiAgICAgICAgLy8gT3IgaWYgd2UndmUgc3RhcnRlZCBvdXQgd2l0aCBhIGhhc2gtYmFzZWQgcm91dGUsIGJ1dCB3ZSdyZSBjdXJyZW50bHlcbiAgICAgICAgLy8gaW4gYSBicm93c2VyIHdoZXJlIGl0IGNvdWxkIGJlIGBwdXNoU3RhdGVgLWJhc2VkIGluc3RlYWQuLi5cbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9oYXNQdXNoU3RhdGUgJiYgdGhpcy5hdFJvb3QoKSAmJiBsb2MuaGFzaCkge1xuICAgICAgICAgIHRoaXMuZnJhZ21lbnQgPSB0aGlzLmdldEhhc2goKS5yZXBsYWNlKHJvdXRlU3RyaXBwZXIsICcnKTtcbiAgICAgICAgICB0aGlzLmhpc3RvcnkucmVwbGFjZVN0YXRlKHt9LCBkb2N1bWVudC50aXRsZSwgdGhpcy5yb290ICsgdGhpcy5mcmFnbWVudCk7XG4gICAgICAgIH1cblxuICAgICAgfVxuXG4gICAgICBpZiAoIXRoaXMub3B0aW9ucy5zaWxlbnQpIHJldHVybiB0aGlzLmxvYWRVcmwoKTtcbiAgICB9LFxuXG4gICAgLy8gRGlzYWJsZSBCYWNrYm9uZS5oaXN0b3J5LCBwZXJoYXBzIHRlbXBvcmFyaWx5LiBOb3QgdXNlZnVsIGluIGEgcmVhbCBhcHAsXG4gICAgLy8gYnV0IHBvc3NpYmx5IHVzZWZ1bCBmb3IgdW5pdCB0ZXN0aW5nIFJvdXRlcnMuXG4gICAgc3RvcDogZnVuY3Rpb24oKSB7XG4gICAgICBCYWNrYm9uZS4kKHdpbmRvdykub2ZmKCdwb3BzdGF0ZScsIHRoaXMuY2hlY2tVcmwpLm9mZignaGFzaGNoYW5nZScsIHRoaXMuY2hlY2tVcmwpO1xuICAgICAgaWYgKHRoaXMuX2NoZWNrVXJsSW50ZXJ2YWwpIGNsZWFySW50ZXJ2YWwodGhpcy5fY2hlY2tVcmxJbnRlcnZhbCk7XG4gICAgICBIaXN0b3J5LnN0YXJ0ZWQgPSBmYWxzZTtcbiAgICB9LFxuXG4gICAgLy8gQWRkIGEgcm91dGUgdG8gYmUgdGVzdGVkIHdoZW4gdGhlIGZyYWdtZW50IGNoYW5nZXMuIFJvdXRlcyBhZGRlZCBsYXRlclxuICAgIC8vIG1heSBvdmVycmlkZSBwcmV2aW91cyByb3V0ZXMuXG4gICAgcm91dGU6IGZ1bmN0aW9uKHJvdXRlLCBjYWxsYmFjaykge1xuICAgICAgdGhpcy5oYW5kbGVycy51bnNoaWZ0KHtyb3V0ZTogcm91dGUsIGNhbGxiYWNrOiBjYWxsYmFja30pO1xuICAgIH0sXG5cbiAgICAvLyBDaGVja3MgdGhlIGN1cnJlbnQgVVJMIHRvIHNlZSBpZiBpdCBoYXMgY2hhbmdlZCwgYW5kIGlmIGl0IGhhcyxcbiAgICAvLyBjYWxscyBgbG9hZFVybGAsIG5vcm1hbGl6aW5nIGFjcm9zcyB0aGUgaGlkZGVuIGlmcmFtZS5cbiAgICBjaGVja1VybDogZnVuY3Rpb24oZSkge1xuICAgICAgdmFyIGN1cnJlbnQgPSB0aGlzLmdldEZyYWdtZW50KCk7XG4gICAgICBpZiAoY3VycmVudCA9PT0gdGhpcy5mcmFnbWVudCAmJiB0aGlzLmlmcmFtZSkge1xuICAgICAgICBjdXJyZW50ID0gdGhpcy5nZXRGcmFnbWVudCh0aGlzLmdldEhhc2godGhpcy5pZnJhbWUpKTtcbiAgICAgIH1cbiAgICAgIGlmIChjdXJyZW50ID09PSB0aGlzLmZyYWdtZW50KSByZXR1cm4gZmFsc2U7XG4gICAgICBpZiAodGhpcy5pZnJhbWUpIHRoaXMubmF2aWdhdGUoY3VycmVudCk7XG4gICAgICB0aGlzLmxvYWRVcmwoKTtcbiAgICB9LFxuXG4gICAgLy8gQXR0ZW1wdCB0byBsb2FkIHRoZSBjdXJyZW50IFVSTCBmcmFnbWVudC4gSWYgYSByb3V0ZSBzdWNjZWVkcyB3aXRoIGFcbiAgICAvLyBtYXRjaCwgcmV0dXJucyBgdHJ1ZWAuIElmIG5vIGRlZmluZWQgcm91dGVzIG1hdGNoZXMgdGhlIGZyYWdtZW50LFxuICAgIC8vIHJldHVybnMgYGZhbHNlYC5cbiAgICBsb2FkVXJsOiBmdW5jdGlvbihmcmFnbWVudCkge1xuICAgICAgZnJhZ21lbnQgPSB0aGlzLmZyYWdtZW50ID0gdGhpcy5nZXRGcmFnbWVudChmcmFnbWVudCk7XG4gICAgICByZXR1cm4gXy5hbnkodGhpcy5oYW5kbGVycywgZnVuY3Rpb24oaGFuZGxlcikge1xuICAgICAgICBpZiAoaGFuZGxlci5yb3V0ZS50ZXN0KGZyYWdtZW50KSkge1xuICAgICAgICAgIGhhbmRsZXIuY2FsbGJhY2soZnJhZ21lbnQpO1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9LFxuXG4gICAgLy8gU2F2ZSBhIGZyYWdtZW50IGludG8gdGhlIGhhc2ggaGlzdG9yeSwgb3IgcmVwbGFjZSB0aGUgVVJMIHN0YXRlIGlmIHRoZVxuICAgIC8vICdyZXBsYWNlJyBvcHRpb24gaXMgcGFzc2VkLiBZb3UgYXJlIHJlc3BvbnNpYmxlIGZvciBwcm9wZXJseSBVUkwtZW5jb2RpbmdcbiAgICAvLyB0aGUgZnJhZ21lbnQgaW4gYWR2YW5jZS5cbiAgICAvL1xuICAgIC8vIFRoZSBvcHRpb25zIG9iamVjdCBjYW4gY29udGFpbiBgdHJpZ2dlcjogdHJ1ZWAgaWYgeW91IHdpc2ggdG8gaGF2ZSB0aGVcbiAgICAvLyByb3V0ZSBjYWxsYmFjayBiZSBmaXJlZCAobm90IHVzdWFsbHkgZGVzaXJhYmxlKSwgb3IgYHJlcGxhY2U6IHRydWVgLCBpZlxuICAgIC8vIHlvdSB3aXNoIHRvIG1vZGlmeSB0aGUgY3VycmVudCBVUkwgd2l0aG91dCBhZGRpbmcgYW4gZW50cnkgdG8gdGhlIGhpc3RvcnkuXG4gICAgbmF2aWdhdGU6IGZ1bmN0aW9uKGZyYWdtZW50LCBvcHRpb25zKSB7XG4gICAgICBpZiAoIUhpc3Rvcnkuc3RhcnRlZCkgcmV0dXJuIGZhbHNlO1xuICAgICAgaWYgKCFvcHRpb25zIHx8IG9wdGlvbnMgPT09IHRydWUpIG9wdGlvbnMgPSB7dHJpZ2dlcjogISFvcHRpb25zfTtcblxuICAgICAgdmFyIHVybCA9IHRoaXMucm9vdCArIChmcmFnbWVudCA9IHRoaXMuZ2V0RnJhZ21lbnQoZnJhZ21lbnQgfHwgJycpKTtcblxuICAgICAgLy8gU3RyaXAgdGhlIGhhc2ggZm9yIG1hdGNoaW5nLlxuICAgICAgZnJhZ21lbnQgPSBmcmFnbWVudC5yZXBsYWNlKHBhdGhTdHJpcHBlciwgJycpO1xuXG4gICAgICBpZiAodGhpcy5mcmFnbWVudCA9PT0gZnJhZ21lbnQpIHJldHVybjtcbiAgICAgIHRoaXMuZnJhZ21lbnQgPSBmcmFnbWVudDtcblxuICAgICAgLy8gRG9uJ3QgaW5jbHVkZSBhIHRyYWlsaW5nIHNsYXNoIG9uIHRoZSByb290LlxuICAgICAgaWYgKGZyYWdtZW50ID09PSAnJyAmJiB1cmwgIT09ICcvJykgdXJsID0gdXJsLnNsaWNlKDAsIC0xKTtcblxuICAgICAgLy8gSWYgcHVzaFN0YXRlIGlzIGF2YWlsYWJsZSwgd2UgdXNlIGl0IHRvIHNldCB0aGUgZnJhZ21lbnQgYXMgYSByZWFsIFVSTC5cbiAgICAgIGlmICh0aGlzLl9oYXNQdXNoU3RhdGUpIHtcbiAgICAgICAgdGhpcy5oaXN0b3J5W29wdGlvbnMucmVwbGFjZSA/ICdyZXBsYWNlU3RhdGUnIDogJ3B1c2hTdGF0ZSddKHt9LCBkb2N1bWVudC50aXRsZSwgdXJsKTtcblxuICAgICAgLy8gSWYgaGFzaCBjaGFuZ2VzIGhhdmVuJ3QgYmVlbiBleHBsaWNpdGx5IGRpc2FibGVkLCB1cGRhdGUgdGhlIGhhc2hcbiAgICAgIC8vIGZyYWdtZW50IHRvIHN0b3JlIGhpc3RvcnkuXG4gICAgICB9IGVsc2UgaWYgKHRoaXMuX3dhbnRzSGFzaENoYW5nZSkge1xuICAgICAgICB0aGlzLl91cGRhdGVIYXNoKHRoaXMubG9jYXRpb24sIGZyYWdtZW50LCBvcHRpb25zLnJlcGxhY2UpO1xuICAgICAgICBpZiAodGhpcy5pZnJhbWUgJiYgKGZyYWdtZW50ICE9PSB0aGlzLmdldEZyYWdtZW50KHRoaXMuZ2V0SGFzaCh0aGlzLmlmcmFtZSkpKSkge1xuICAgICAgICAgIC8vIE9wZW5pbmcgYW5kIGNsb3NpbmcgdGhlIGlmcmFtZSB0cmlja3MgSUU3IGFuZCBlYXJsaWVyIHRvIHB1c2ggYVxuICAgICAgICAgIC8vIGhpc3RvcnkgZW50cnkgb24gaGFzaC10YWcgY2hhbmdlLiAgV2hlbiByZXBsYWNlIGlzIHRydWUsIHdlIGRvbid0XG4gICAgICAgICAgLy8gd2FudCB0aGlzLlxuICAgICAgICAgIGlmKCFvcHRpb25zLnJlcGxhY2UpIHRoaXMuaWZyYW1lLmRvY3VtZW50Lm9wZW4oKS5jbG9zZSgpO1xuICAgICAgICAgIHRoaXMuX3VwZGF0ZUhhc2godGhpcy5pZnJhbWUubG9jYXRpb24sIGZyYWdtZW50LCBvcHRpb25zLnJlcGxhY2UpO1xuICAgICAgICB9XG5cbiAgICAgIC8vIElmIHlvdSd2ZSB0b2xkIHVzIHRoYXQgeW91IGV4cGxpY2l0bHkgZG9uJ3Qgd2FudCBmYWxsYmFjayBoYXNoY2hhbmdlLVxuICAgICAgLy8gYmFzZWQgaGlzdG9yeSwgdGhlbiBgbmF2aWdhdGVgIGJlY29tZXMgYSBwYWdlIHJlZnJlc2guXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdGhpcy5sb2NhdGlvbi5hc3NpZ24odXJsKTtcbiAgICAgIH1cbiAgICAgIGlmIChvcHRpb25zLnRyaWdnZXIpIHJldHVybiB0aGlzLmxvYWRVcmwoZnJhZ21lbnQpO1xuICAgIH0sXG5cbiAgICAvLyBVcGRhdGUgdGhlIGhhc2ggbG9jYXRpb24sIGVpdGhlciByZXBsYWNpbmcgdGhlIGN1cnJlbnQgZW50cnksIG9yIGFkZGluZ1xuICAgIC8vIGEgbmV3IG9uZSB0byB0aGUgYnJvd3NlciBoaXN0b3J5LlxuICAgIF91cGRhdGVIYXNoOiBmdW5jdGlvbihsb2NhdGlvbiwgZnJhZ21lbnQsIHJlcGxhY2UpIHtcbiAgICAgIGlmIChyZXBsYWNlKSB7XG4gICAgICAgIHZhciBocmVmID0gbG9jYXRpb24uaHJlZi5yZXBsYWNlKC8oamF2YXNjcmlwdDp8IykuKiQvLCAnJyk7XG4gICAgICAgIGxvY2F0aW9uLnJlcGxhY2UoaHJlZiArICcjJyArIGZyYWdtZW50KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFNvbWUgYnJvd3NlcnMgcmVxdWlyZSB0aGF0IGBoYXNoYCBjb250YWlucyBhIGxlYWRpbmcgIy5cbiAgICAgICAgbG9jYXRpb24uaGFzaCA9ICcjJyArIGZyYWdtZW50O1xuICAgICAgfVxuICAgIH1cblxuICB9KTtcblxuICAvLyBDcmVhdGUgdGhlIGRlZmF1bHQgQmFja2JvbmUuaGlzdG9yeS5cbiAgQmFja2JvbmUuaGlzdG9yeSA9IG5ldyBIaXN0b3J5O1xuXG4gIC8vIEhlbHBlcnNcbiAgLy8gLS0tLS0tLVxuXG4gIC8vIEhlbHBlciBmdW5jdGlvbiB0byBjb3JyZWN0bHkgc2V0IHVwIHRoZSBwcm90b3R5cGUgY2hhaW4sIGZvciBzdWJjbGFzc2VzLlxuICAvLyBTaW1pbGFyIHRvIGBnb29nLmluaGVyaXRzYCwgYnV0IHVzZXMgYSBoYXNoIG9mIHByb3RvdHlwZSBwcm9wZXJ0aWVzIGFuZFxuICAvLyBjbGFzcyBwcm9wZXJ0aWVzIHRvIGJlIGV4dGVuZGVkLlxuICB2YXIgZXh0ZW5kID0gZnVuY3Rpb24ocHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgICB2YXIgcGFyZW50ID0gdGhpcztcbiAgICB2YXIgY2hpbGQ7XG5cbiAgICAvLyBUaGUgY29uc3RydWN0b3IgZnVuY3Rpb24gZm9yIHRoZSBuZXcgc3ViY2xhc3MgaXMgZWl0aGVyIGRlZmluZWQgYnkgeW91XG4gICAgLy8gKHRoZSBcImNvbnN0cnVjdG9yXCIgcHJvcGVydHkgaW4geW91ciBgZXh0ZW5kYCBkZWZpbml0aW9uKSwgb3IgZGVmYXVsdGVkXG4gICAgLy8gYnkgdXMgdG8gc2ltcGx5IGNhbGwgdGhlIHBhcmVudCdzIGNvbnN0cnVjdG9yLlxuICAgIGlmIChwcm90b1Byb3BzICYmIF8uaGFzKHByb3RvUHJvcHMsICdjb25zdHJ1Y3RvcicpKSB7XG4gICAgICBjaGlsZCA9IHByb3RvUHJvcHMuY29uc3RydWN0b3I7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNoaWxkID0gZnVuY3Rpb24oKXsgcmV0dXJuIHBhcmVudC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9O1xuICAgIH1cblxuICAgIC8vIEFkZCBzdGF0aWMgcHJvcGVydGllcyB0byB0aGUgY29uc3RydWN0b3IgZnVuY3Rpb24sIGlmIHN1cHBsaWVkLlxuICAgIF8uZXh0ZW5kKGNoaWxkLCBwYXJlbnQsIHN0YXRpY1Byb3BzKTtcblxuICAgIC8vIFNldCB0aGUgcHJvdG90eXBlIGNoYWluIHRvIGluaGVyaXQgZnJvbSBgcGFyZW50YCwgd2l0aG91dCBjYWxsaW5nXG4gICAgLy8gYHBhcmVudGAncyBjb25zdHJ1Y3RvciBmdW5jdGlvbi5cbiAgICB2YXIgU3Vycm9nYXRlID0gZnVuY3Rpb24oKXsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9O1xuICAgIFN1cnJvZ2F0ZS5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlO1xuICAgIGNoaWxkLnByb3RvdHlwZSA9IG5ldyBTdXJyb2dhdGU7XG5cbiAgICAvLyBBZGQgcHJvdG90eXBlIHByb3BlcnRpZXMgKGluc3RhbmNlIHByb3BlcnRpZXMpIHRvIHRoZSBzdWJjbGFzcyxcbiAgICAvLyBpZiBzdXBwbGllZC5cbiAgICBpZiAocHJvdG9Qcm9wcykgXy5leHRlbmQoY2hpbGQucHJvdG90eXBlLCBwcm90b1Byb3BzKTtcblxuICAgIC8vIFNldCBhIGNvbnZlbmllbmNlIHByb3BlcnR5IGluIGNhc2UgdGhlIHBhcmVudCdzIHByb3RvdHlwZSBpcyBuZWVkZWRcbiAgICAvLyBsYXRlci5cbiAgICBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlO1xuXG4gICAgcmV0dXJuIGNoaWxkO1xuICB9O1xuXG4gIC8vIFNldCB1cCBpbmhlcml0YW5jZSBmb3IgdGhlIG1vZGVsLCBjb2xsZWN0aW9uLCByb3V0ZXIsIHZpZXcgYW5kIGhpc3RvcnkuXG4gIE1vZGVsLmV4dGVuZCA9IENvbGxlY3Rpb24uZXh0ZW5kID0gUm91dGVyLmV4dGVuZCA9IFZpZXcuZXh0ZW5kID0gSGlzdG9yeS5leHRlbmQgPSBleHRlbmQ7XG5cbiAgLy8gVGhyb3cgYW4gZXJyb3Igd2hlbiBhIFVSTCBpcyBuZWVkZWQsIGFuZCBub25lIGlzIHN1cHBsaWVkLlxuICB2YXIgdXJsRXJyb3IgPSBmdW5jdGlvbigpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0EgXCJ1cmxcIiBwcm9wZXJ0eSBvciBmdW5jdGlvbiBtdXN0IGJlIHNwZWNpZmllZCcpO1xuICB9O1xuXG4gIC8vIFdyYXAgYW4gb3B0aW9uYWwgZXJyb3IgY2FsbGJhY2sgd2l0aCBhIGZhbGxiYWNrIGVycm9yIGV2ZW50LlxuICB2YXIgd3JhcEVycm9yID0gZnVuY3Rpb24obW9kZWwsIG9wdGlvbnMpIHtcbiAgICB2YXIgZXJyb3IgPSBvcHRpb25zLmVycm9yO1xuICAgIG9wdGlvbnMuZXJyb3IgPSBmdW5jdGlvbihyZXNwKSB7XG4gICAgICBpZiAoZXJyb3IpIGVycm9yKG1vZGVsLCByZXNwLCBvcHRpb25zKTtcbiAgICAgIG1vZGVsLnRyaWdnZXIoJ2Vycm9yJywgbW9kZWwsIHJlc3AsIG9wdGlvbnMpO1xuICAgIH07XG4gIH07XG5cbiAgcmV0dXJuIEJhY2tib25lO1xuXG59KSk7XG4iLCIvLyAgICAgVW5kZXJzY29yZS5qcyAxLjYuMFxuLy8gICAgIGh0dHA6Ly91bmRlcnNjb3JlanMub3JnXG4vLyAgICAgKGMpIDIwMDktMjAxNCBKZXJlbXkgQXNoa2VuYXMsIERvY3VtZW50Q2xvdWQgYW5kIEludmVzdGlnYXRpdmUgUmVwb3J0ZXJzICYgRWRpdG9yc1xuLy8gICAgIFVuZGVyc2NvcmUgbWF5IGJlIGZyZWVseSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG5cbihmdW5jdGlvbigpIHtcblxuICAvLyBCYXNlbGluZSBzZXR1cFxuICAvLyAtLS0tLS0tLS0tLS0tLVxuXG4gIC8vIEVzdGFibGlzaCB0aGUgcm9vdCBvYmplY3QsIGB3aW5kb3dgIGluIHRoZSBicm93c2VyLCBvciBgZXhwb3J0c2Agb24gdGhlIHNlcnZlci5cbiAgdmFyIHJvb3QgPSB0aGlzO1xuXG4gIC8vIFNhdmUgdGhlIHByZXZpb3VzIHZhbHVlIG9mIHRoZSBgX2AgdmFyaWFibGUuXG4gIHZhciBwcmV2aW91c1VuZGVyc2NvcmUgPSByb290Ll87XG5cbiAgLy8gRXN0YWJsaXNoIHRoZSBvYmplY3QgdGhhdCBnZXRzIHJldHVybmVkIHRvIGJyZWFrIG91dCBvZiBhIGxvb3AgaXRlcmF0aW9uLlxuICB2YXIgYnJlYWtlciA9IHt9O1xuXG4gIC8vIFNhdmUgYnl0ZXMgaW4gdGhlIG1pbmlmaWVkIChidXQgbm90IGd6aXBwZWQpIHZlcnNpb246XG4gIHZhciBBcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlLCBPYmpQcm90byA9IE9iamVjdC5wcm90b3R5cGUsIEZ1bmNQcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcblxuICAvLyBDcmVhdGUgcXVpY2sgcmVmZXJlbmNlIHZhcmlhYmxlcyBmb3Igc3BlZWQgYWNjZXNzIHRvIGNvcmUgcHJvdG90eXBlcy5cbiAgdmFyXG4gICAgcHVzaCAgICAgICAgICAgICA9IEFycmF5UHJvdG8ucHVzaCxcbiAgICBzbGljZSAgICAgICAgICAgID0gQXJyYXlQcm90by5zbGljZSxcbiAgICBjb25jYXQgICAgICAgICAgID0gQXJyYXlQcm90by5jb25jYXQsXG4gICAgdG9TdHJpbmcgICAgICAgICA9IE9ialByb3RvLnRvU3RyaW5nLFxuICAgIGhhc093blByb3BlcnR5ICAgPSBPYmpQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuICAvLyBBbGwgKipFQ01BU2NyaXB0IDUqKiBuYXRpdmUgZnVuY3Rpb24gaW1wbGVtZW50YXRpb25zIHRoYXQgd2UgaG9wZSB0byB1c2VcbiAgLy8gYXJlIGRlY2xhcmVkIGhlcmUuXG4gIHZhclxuICAgIG5hdGl2ZUZvckVhY2ggICAgICA9IEFycmF5UHJvdG8uZm9yRWFjaCxcbiAgICBuYXRpdmVNYXAgICAgICAgICAgPSBBcnJheVByb3RvLm1hcCxcbiAgICBuYXRpdmVSZWR1Y2UgICAgICAgPSBBcnJheVByb3RvLnJlZHVjZSxcbiAgICBuYXRpdmVSZWR1Y2VSaWdodCAgPSBBcnJheVByb3RvLnJlZHVjZVJpZ2h0LFxuICAgIG5hdGl2ZUZpbHRlciAgICAgICA9IEFycmF5UHJvdG8uZmlsdGVyLFxuICAgIG5hdGl2ZUV2ZXJ5ICAgICAgICA9IEFycmF5UHJvdG8uZXZlcnksXG4gICAgbmF0aXZlU29tZSAgICAgICAgID0gQXJyYXlQcm90by5zb21lLFxuICAgIG5hdGl2ZUluZGV4T2YgICAgICA9IEFycmF5UHJvdG8uaW5kZXhPZixcbiAgICBuYXRpdmVMYXN0SW5kZXhPZiAgPSBBcnJheVByb3RvLmxhc3RJbmRleE9mLFxuICAgIG5hdGl2ZUlzQXJyYXkgICAgICA9IEFycmF5LmlzQXJyYXksXG4gICAgbmF0aXZlS2V5cyAgICAgICAgID0gT2JqZWN0LmtleXMsXG4gICAgbmF0aXZlQmluZCAgICAgICAgID0gRnVuY1Byb3RvLmJpbmQ7XG5cbiAgLy8gQ3JlYXRlIGEgc2FmZSByZWZlcmVuY2UgdG8gdGhlIFVuZGVyc2NvcmUgb2JqZWN0IGZvciB1c2UgYmVsb3cuXG4gIHZhciBfID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgaWYgKG9iaiBpbnN0YW5jZW9mIF8pIHJldHVybiBvYmo7XG4gICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIF8pKSByZXR1cm4gbmV3IF8ob2JqKTtcbiAgICB0aGlzLl93cmFwcGVkID0gb2JqO1xuICB9O1xuXG4gIC8vIEV4cG9ydCB0aGUgVW5kZXJzY29yZSBvYmplY3QgZm9yICoqTm9kZS5qcyoqLCB3aXRoXG4gIC8vIGJhY2t3YXJkcy1jb21wYXRpYmlsaXR5IGZvciB0aGUgb2xkIGByZXF1aXJlKClgIEFQSS4gSWYgd2UncmUgaW5cbiAgLy8gdGhlIGJyb3dzZXIsIGFkZCBgX2AgYXMgYSBnbG9iYWwgb2JqZWN0IHZpYSBhIHN0cmluZyBpZGVudGlmaWVyLFxuICAvLyBmb3IgQ2xvc3VyZSBDb21waWxlciBcImFkdmFuY2VkXCIgbW9kZS5cbiAgaWYgKHR5cGVvZiBleHBvcnRzICE9PSAndW5kZWZpbmVkJykge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cykge1xuICAgICAgZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gXztcbiAgICB9XG4gICAgZXhwb3J0cy5fID0gXztcbiAgfSBlbHNlIHtcbiAgICByb290Ll8gPSBfO1xuICB9XG5cbiAgLy8gQ3VycmVudCB2ZXJzaW9uLlxuICBfLlZFUlNJT04gPSAnMS42LjAnO1xuXG4gIC8vIENvbGxlY3Rpb24gRnVuY3Rpb25zXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLy8gVGhlIGNvcm5lcnN0b25lLCBhbiBgZWFjaGAgaW1wbGVtZW50YXRpb24sIGFrYSBgZm9yRWFjaGAuXG4gIC8vIEhhbmRsZXMgb2JqZWN0cyB3aXRoIHRoZSBidWlsdC1pbiBgZm9yRWFjaGAsIGFycmF5cywgYW5kIHJhdyBvYmplY3RzLlxuICAvLyBEZWxlZ2F0ZXMgdG8gKipFQ01BU2NyaXB0IDUqKidzIG5hdGl2ZSBgZm9yRWFjaGAgaWYgYXZhaWxhYmxlLlxuICB2YXIgZWFjaCA9IF8uZWFjaCA9IF8uZm9yRWFjaCA9IGZ1bmN0aW9uKG9iaiwgaXRlcmF0b3IsIGNvbnRleHQpIHtcbiAgICBpZiAob2JqID09IG51bGwpIHJldHVybiBvYmo7XG4gICAgaWYgKG5hdGl2ZUZvckVhY2ggJiYgb2JqLmZvckVhY2ggPT09IG5hdGl2ZUZvckVhY2gpIHtcbiAgICAgIG9iai5mb3JFYWNoKGl0ZXJhdG9yLCBjb250ZXh0KTtcbiAgICB9IGVsc2UgaWYgKG9iai5sZW5ndGggPT09ICtvYmoubGVuZ3RoKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gb2JqLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChpdGVyYXRvci5jYWxsKGNvbnRleHQsIG9ialtpXSwgaSwgb2JqKSA9PT0gYnJlYWtlcikgcmV0dXJuO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIga2V5cyA9IF8ua2V5cyhvYmopO1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IGtleXMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKGl0ZXJhdG9yLmNhbGwoY29udGV4dCwgb2JqW2tleXNbaV1dLCBrZXlzW2ldLCBvYmopID09PSBicmVha2VyKSByZXR1cm47XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBvYmo7XG4gIH07XG5cbiAgLy8gUmV0dXJuIHRoZSByZXN1bHRzIG9mIGFwcGx5aW5nIHRoZSBpdGVyYXRvciB0byBlYWNoIGVsZW1lbnQuXG4gIC8vIERlbGVnYXRlcyB0byAqKkVDTUFTY3JpcHQgNSoqJ3MgbmF0aXZlIGBtYXBgIGlmIGF2YWlsYWJsZS5cbiAgXy5tYXAgPSBfLmNvbGxlY3QgPSBmdW5jdGlvbihvYmosIGl0ZXJhdG9yLCBjb250ZXh0KSB7XG4gICAgdmFyIHJlc3VsdHMgPSBbXTtcbiAgICBpZiAob2JqID09IG51bGwpIHJldHVybiByZXN1bHRzO1xuICAgIGlmIChuYXRpdmVNYXAgJiYgb2JqLm1hcCA9PT0gbmF0aXZlTWFwKSByZXR1cm4gb2JqLm1hcChpdGVyYXRvciwgY29udGV4dCk7XG4gICAgZWFjaChvYmosIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgbGlzdCkge1xuICAgICAgcmVzdWx0cy5wdXNoKGl0ZXJhdG9yLmNhbGwoY29udGV4dCwgdmFsdWUsIGluZGV4LCBsaXN0KSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdHM7XG4gIH07XG5cbiAgdmFyIHJlZHVjZUVycm9yID0gJ1JlZHVjZSBvZiBlbXB0eSBhcnJheSB3aXRoIG5vIGluaXRpYWwgdmFsdWUnO1xuXG4gIC8vICoqUmVkdWNlKiogYnVpbGRzIHVwIGEgc2luZ2xlIHJlc3VsdCBmcm9tIGEgbGlzdCBvZiB2YWx1ZXMsIGFrYSBgaW5qZWN0YCxcbiAgLy8gb3IgYGZvbGRsYC4gRGVsZWdhdGVzIHRvICoqRUNNQVNjcmlwdCA1KioncyBuYXRpdmUgYHJlZHVjZWAgaWYgYXZhaWxhYmxlLlxuICBfLnJlZHVjZSA9IF8uZm9sZGwgPSBfLmluamVjdCA9IGZ1bmN0aW9uKG9iaiwgaXRlcmF0b3IsIG1lbW8sIGNvbnRleHQpIHtcbiAgICB2YXIgaW5pdGlhbCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyO1xuICAgIGlmIChvYmogPT0gbnVsbCkgb2JqID0gW107XG4gICAgaWYgKG5hdGl2ZVJlZHVjZSAmJiBvYmoucmVkdWNlID09PSBuYXRpdmVSZWR1Y2UpIHtcbiAgICAgIGlmIChjb250ZXh0KSBpdGVyYXRvciA9IF8uYmluZChpdGVyYXRvciwgY29udGV4dCk7XG4gICAgICByZXR1cm4gaW5pdGlhbCA/IG9iai5yZWR1Y2UoaXRlcmF0b3IsIG1lbW8pIDogb2JqLnJlZHVjZShpdGVyYXRvcik7XG4gICAgfVxuICAgIGVhY2gob2JqLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGxpc3QpIHtcbiAgICAgIGlmICghaW5pdGlhbCkge1xuICAgICAgICBtZW1vID0gdmFsdWU7XG4gICAgICAgIGluaXRpYWwgPSB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbWVtbyA9IGl0ZXJhdG9yLmNhbGwoY29udGV4dCwgbWVtbywgdmFsdWUsIGluZGV4LCBsaXN0KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoIWluaXRpYWwpIHRocm93IG5ldyBUeXBlRXJyb3IocmVkdWNlRXJyb3IpO1xuICAgIHJldHVybiBtZW1vO1xuICB9O1xuXG4gIC8vIFRoZSByaWdodC1hc3NvY2lhdGl2ZSB2ZXJzaW9uIG9mIHJlZHVjZSwgYWxzbyBrbm93biBhcyBgZm9sZHJgLlxuICAvLyBEZWxlZ2F0ZXMgdG8gKipFQ01BU2NyaXB0IDUqKidzIG5hdGl2ZSBgcmVkdWNlUmlnaHRgIGlmIGF2YWlsYWJsZS5cbiAgXy5yZWR1Y2VSaWdodCA9IF8uZm9sZHIgPSBmdW5jdGlvbihvYmosIGl0ZXJhdG9yLCBtZW1vLCBjb250ZXh0KSB7XG4gICAgdmFyIGluaXRpYWwgPSBhcmd1bWVudHMubGVuZ3RoID4gMjtcbiAgICBpZiAob2JqID09IG51bGwpIG9iaiA9IFtdO1xuICAgIGlmIChuYXRpdmVSZWR1Y2VSaWdodCAmJiBvYmoucmVkdWNlUmlnaHQgPT09IG5hdGl2ZVJlZHVjZVJpZ2h0KSB7XG4gICAgICBpZiAoY29udGV4dCkgaXRlcmF0b3IgPSBfLmJpbmQoaXRlcmF0b3IsIGNvbnRleHQpO1xuICAgICAgcmV0dXJuIGluaXRpYWwgPyBvYmoucmVkdWNlUmlnaHQoaXRlcmF0b3IsIG1lbW8pIDogb2JqLnJlZHVjZVJpZ2h0KGl0ZXJhdG9yKTtcbiAgICB9XG4gICAgdmFyIGxlbmd0aCA9IG9iai5sZW5ndGg7XG4gICAgaWYgKGxlbmd0aCAhPT0gK2xlbmd0aCkge1xuICAgICAgdmFyIGtleXMgPSBfLmtleXMob2JqKTtcbiAgICAgIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICAgIH1cbiAgICBlYWNoKG9iaiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBsaXN0KSB7XG4gICAgICBpbmRleCA9IGtleXMgPyBrZXlzWy0tbGVuZ3RoXSA6IC0tbGVuZ3RoO1xuICAgICAgaWYgKCFpbml0aWFsKSB7XG4gICAgICAgIG1lbW8gPSBvYmpbaW5kZXhdO1xuICAgICAgICBpbml0aWFsID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG1lbW8gPSBpdGVyYXRvci5jYWxsKGNvbnRleHQsIG1lbW8sIG9ialtpbmRleF0sIGluZGV4LCBsaXN0KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoIWluaXRpYWwpIHRocm93IG5ldyBUeXBlRXJyb3IocmVkdWNlRXJyb3IpO1xuICAgIHJldHVybiBtZW1vO1xuICB9O1xuXG4gIC8vIFJldHVybiB0aGUgZmlyc3QgdmFsdWUgd2hpY2ggcGFzc2VzIGEgdHJ1dGggdGVzdC4gQWxpYXNlZCBhcyBgZGV0ZWN0YC5cbiAgXy5maW5kID0gXy5kZXRlY3QgPSBmdW5jdGlvbihvYmosIHByZWRpY2F0ZSwgY29udGV4dCkge1xuICAgIHZhciByZXN1bHQ7XG4gICAgYW55KG9iaiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBsaXN0KSB7XG4gICAgICBpZiAocHJlZGljYXRlLmNhbGwoY29udGV4dCwgdmFsdWUsIGluZGV4LCBsaXN0KSkge1xuICAgICAgICByZXN1bHQgPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICAvLyBSZXR1cm4gYWxsIHRoZSBlbGVtZW50cyB0aGF0IHBhc3MgYSB0cnV0aCB0ZXN0LlxuICAvLyBEZWxlZ2F0ZXMgdG8gKipFQ01BU2NyaXB0IDUqKidzIG5hdGl2ZSBgZmlsdGVyYCBpZiBhdmFpbGFibGUuXG4gIC8vIEFsaWFzZWQgYXMgYHNlbGVjdGAuXG4gIF8uZmlsdGVyID0gXy5zZWxlY3QgPSBmdW5jdGlvbihvYmosIHByZWRpY2F0ZSwgY29udGV4dCkge1xuICAgIHZhciByZXN1bHRzID0gW107XG4gICAgaWYgKG9iaiA9PSBudWxsKSByZXR1cm4gcmVzdWx0cztcbiAgICBpZiAobmF0aXZlRmlsdGVyICYmIG9iai5maWx0ZXIgPT09IG5hdGl2ZUZpbHRlcikgcmV0dXJuIG9iai5maWx0ZXIocHJlZGljYXRlLCBjb250ZXh0KTtcbiAgICBlYWNoKG9iaiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBsaXN0KSB7XG4gICAgICBpZiAocHJlZGljYXRlLmNhbGwoY29udGV4dCwgdmFsdWUsIGluZGV4LCBsaXN0KSkgcmVzdWx0cy5wdXNoKHZhbHVlKTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0cztcbiAgfTtcblxuICAvLyBSZXR1cm4gYWxsIHRoZSBlbGVtZW50cyBmb3Igd2hpY2ggYSB0cnV0aCB0ZXN0IGZhaWxzLlxuICBfLnJlamVjdCA9IGZ1bmN0aW9uKG9iaiwgcHJlZGljYXRlLCBjb250ZXh0KSB7XG4gICAgcmV0dXJuIF8uZmlsdGVyKG9iaiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBsaXN0KSB7XG4gICAgICByZXR1cm4gIXByZWRpY2F0ZS5jYWxsKGNvbnRleHQsIHZhbHVlLCBpbmRleCwgbGlzdCk7XG4gICAgfSwgY29udGV4dCk7XG4gIH07XG5cbiAgLy8gRGV0ZXJtaW5lIHdoZXRoZXIgYWxsIG9mIHRoZSBlbGVtZW50cyBtYXRjaCBhIHRydXRoIHRlc3QuXG4gIC8vIERlbGVnYXRlcyB0byAqKkVDTUFTY3JpcHQgNSoqJ3MgbmF0aXZlIGBldmVyeWAgaWYgYXZhaWxhYmxlLlxuICAvLyBBbGlhc2VkIGFzIGBhbGxgLlxuICBfLmV2ZXJ5ID0gXy5hbGwgPSBmdW5jdGlvbihvYmosIHByZWRpY2F0ZSwgY29udGV4dCkge1xuICAgIHByZWRpY2F0ZSB8fCAocHJlZGljYXRlID0gXy5pZGVudGl0eSk7XG4gICAgdmFyIHJlc3VsdCA9IHRydWU7XG4gICAgaWYgKG9iaiA9PSBudWxsKSByZXR1cm4gcmVzdWx0O1xuICAgIGlmIChuYXRpdmVFdmVyeSAmJiBvYmouZXZlcnkgPT09IG5hdGl2ZUV2ZXJ5KSByZXR1cm4gb2JqLmV2ZXJ5KHByZWRpY2F0ZSwgY29udGV4dCk7XG4gICAgZWFjaChvYmosIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgbGlzdCkge1xuICAgICAgaWYgKCEocmVzdWx0ID0gcmVzdWx0ICYmIHByZWRpY2F0ZS5jYWxsKGNvbnRleHQsIHZhbHVlLCBpbmRleCwgbGlzdCkpKSByZXR1cm4gYnJlYWtlcjtcbiAgICB9KTtcbiAgICByZXR1cm4gISFyZXN1bHQ7XG4gIH07XG5cbiAgLy8gRGV0ZXJtaW5lIGlmIGF0IGxlYXN0IG9uZSBlbGVtZW50IGluIHRoZSBvYmplY3QgbWF0Y2hlcyBhIHRydXRoIHRlc3QuXG4gIC8vIERlbGVnYXRlcyB0byAqKkVDTUFTY3JpcHQgNSoqJ3MgbmF0aXZlIGBzb21lYCBpZiBhdmFpbGFibGUuXG4gIC8vIEFsaWFzZWQgYXMgYGFueWAuXG4gIHZhciBhbnkgPSBfLnNvbWUgPSBfLmFueSA9IGZ1bmN0aW9uKG9iaiwgcHJlZGljYXRlLCBjb250ZXh0KSB7XG4gICAgcHJlZGljYXRlIHx8IChwcmVkaWNhdGUgPSBfLmlkZW50aXR5KTtcbiAgICB2YXIgcmVzdWx0ID0gZmFsc2U7XG4gICAgaWYgKG9iaiA9PSBudWxsKSByZXR1cm4gcmVzdWx0O1xuICAgIGlmIChuYXRpdmVTb21lICYmIG9iai5zb21lID09PSBuYXRpdmVTb21lKSByZXR1cm4gb2JqLnNvbWUocHJlZGljYXRlLCBjb250ZXh0KTtcbiAgICBlYWNoKG9iaiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBsaXN0KSB7XG4gICAgICBpZiAocmVzdWx0IHx8IChyZXN1bHQgPSBwcmVkaWNhdGUuY2FsbChjb250ZXh0LCB2YWx1ZSwgaW5kZXgsIGxpc3QpKSkgcmV0dXJuIGJyZWFrZXI7XG4gICAgfSk7XG4gICAgcmV0dXJuICEhcmVzdWx0O1xuICB9O1xuXG4gIC8vIERldGVybWluZSBpZiB0aGUgYXJyYXkgb3Igb2JqZWN0IGNvbnRhaW5zIGEgZ2l2ZW4gdmFsdWUgKHVzaW5nIGA9PT1gKS5cbiAgLy8gQWxpYXNlZCBhcyBgaW5jbHVkZWAuXG4gIF8uY29udGFpbnMgPSBfLmluY2x1ZGUgPSBmdW5jdGlvbihvYmosIHRhcmdldCkge1xuICAgIGlmIChvYmogPT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuICAgIGlmIChuYXRpdmVJbmRleE9mICYmIG9iai5pbmRleE9mID09PSBuYXRpdmVJbmRleE9mKSByZXR1cm4gb2JqLmluZGV4T2YodGFyZ2V0KSAhPSAtMTtcbiAgICByZXR1cm4gYW55KG9iaiwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gdGFyZ2V0O1xuICAgIH0pO1xuICB9O1xuXG4gIC8vIEludm9rZSBhIG1ldGhvZCAod2l0aCBhcmd1bWVudHMpIG9uIGV2ZXJ5IGl0ZW0gaW4gYSBjb2xsZWN0aW9uLlxuICBfLmludm9rZSA9IGZ1bmN0aW9uKG9iaiwgbWV0aG9kKSB7XG4gICAgdmFyIGFyZ3MgPSBzbGljZS5jYWxsKGFyZ3VtZW50cywgMik7XG4gICAgdmFyIGlzRnVuYyA9IF8uaXNGdW5jdGlvbihtZXRob2QpO1xuICAgIHJldHVybiBfLm1hcChvYmosIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gKGlzRnVuYyA/IG1ldGhvZCA6IHZhbHVlW21ldGhvZF0pLmFwcGx5KHZhbHVlLCBhcmdzKTtcbiAgICB9KTtcbiAgfTtcblxuICAvLyBDb252ZW5pZW5jZSB2ZXJzaW9uIG9mIGEgY29tbW9uIHVzZSBjYXNlIG9mIGBtYXBgOiBmZXRjaGluZyBhIHByb3BlcnR5LlxuICBfLnBsdWNrID0gZnVuY3Rpb24ob2JqLCBrZXkpIHtcbiAgICByZXR1cm4gXy5tYXAob2JqLCBfLnByb3BlcnR5KGtleSkpO1xuICB9O1xuXG4gIC8vIENvbnZlbmllbmNlIHZlcnNpb24gb2YgYSBjb21tb24gdXNlIGNhc2Ugb2YgYGZpbHRlcmA6IHNlbGVjdGluZyBvbmx5IG9iamVjdHNcbiAgLy8gY29udGFpbmluZyBzcGVjaWZpYyBga2V5OnZhbHVlYCBwYWlycy5cbiAgXy53aGVyZSA9IGZ1bmN0aW9uKG9iaiwgYXR0cnMpIHtcbiAgICByZXR1cm4gXy5maWx0ZXIob2JqLCBfLm1hdGNoZXMoYXR0cnMpKTtcbiAgfTtcblxuICAvLyBDb252ZW5pZW5jZSB2ZXJzaW9uIG9mIGEgY29tbW9uIHVzZSBjYXNlIG9mIGBmaW5kYDogZ2V0dGluZyB0aGUgZmlyc3Qgb2JqZWN0XG4gIC8vIGNvbnRhaW5pbmcgc3BlY2lmaWMgYGtleTp2YWx1ZWAgcGFpcnMuXG4gIF8uZmluZFdoZXJlID0gZnVuY3Rpb24ob2JqLCBhdHRycykge1xuICAgIHJldHVybiBfLmZpbmQob2JqLCBfLm1hdGNoZXMoYXR0cnMpKTtcbiAgfTtcblxuICAvLyBSZXR1cm4gdGhlIG1heGltdW0gZWxlbWVudCBvciAoZWxlbWVudC1iYXNlZCBjb21wdXRhdGlvbikuXG4gIC8vIENhbid0IG9wdGltaXplIGFycmF5cyBvZiBpbnRlZ2VycyBsb25nZXIgdGhhbiA2NSw1MzUgZWxlbWVudHMuXG4gIC8vIFNlZSBbV2ViS2l0IEJ1ZyA4MDc5N10oaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTgwNzk3KVxuICBfLm1heCA9IGZ1bmN0aW9uKG9iaiwgaXRlcmF0b3IsIGNvbnRleHQpIHtcbiAgICBpZiAoIWl0ZXJhdG9yICYmIF8uaXNBcnJheShvYmopICYmIG9ialswXSA9PT0gK29ialswXSAmJiBvYmoubGVuZ3RoIDwgNjU1MzUpIHtcbiAgICAgIHJldHVybiBNYXRoLm1heC5hcHBseShNYXRoLCBvYmopO1xuICAgIH1cbiAgICB2YXIgcmVzdWx0ID0gLUluZmluaXR5LCBsYXN0Q29tcHV0ZWQgPSAtSW5maW5pdHk7XG4gICAgZWFjaChvYmosIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgbGlzdCkge1xuICAgICAgdmFyIGNvbXB1dGVkID0gaXRlcmF0b3IgPyBpdGVyYXRvci5jYWxsKGNvbnRleHQsIHZhbHVlLCBpbmRleCwgbGlzdCkgOiB2YWx1ZTtcbiAgICAgIGlmIChjb21wdXRlZCA+IGxhc3RDb21wdXRlZCkge1xuICAgICAgICByZXN1bHQgPSB2YWx1ZTtcbiAgICAgICAgbGFzdENvbXB1dGVkID0gY29tcHV0ZWQ7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICAvLyBSZXR1cm4gdGhlIG1pbmltdW0gZWxlbWVudCAob3IgZWxlbWVudC1iYXNlZCBjb21wdXRhdGlvbikuXG4gIF8ubWluID0gZnVuY3Rpb24ob2JqLCBpdGVyYXRvciwgY29udGV4dCkge1xuICAgIGlmICghaXRlcmF0b3IgJiYgXy5pc0FycmF5KG9iaikgJiYgb2JqWzBdID09PSArb2JqWzBdICYmIG9iai5sZW5ndGggPCA2NTUzNSkge1xuICAgICAgcmV0dXJuIE1hdGgubWluLmFwcGx5KE1hdGgsIG9iaik7XG4gICAgfVxuICAgIHZhciByZXN1bHQgPSBJbmZpbml0eSwgbGFzdENvbXB1dGVkID0gSW5maW5pdHk7XG4gICAgZWFjaChvYmosIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgbGlzdCkge1xuICAgICAgdmFyIGNvbXB1dGVkID0gaXRlcmF0b3IgPyBpdGVyYXRvci5jYWxsKGNvbnRleHQsIHZhbHVlLCBpbmRleCwgbGlzdCkgOiB2YWx1ZTtcbiAgICAgIGlmIChjb21wdXRlZCA8IGxhc3RDb21wdXRlZCkge1xuICAgICAgICByZXN1bHQgPSB2YWx1ZTtcbiAgICAgICAgbGFzdENvbXB1dGVkID0gY29tcHV0ZWQ7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICAvLyBTaHVmZmxlIGFuIGFycmF5LCB1c2luZyB0aGUgbW9kZXJuIHZlcnNpb24gb2YgdGhlXG4gIC8vIFtGaXNoZXItWWF0ZXMgc2h1ZmZsZV0oaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9GaXNoZXLigJNZYXRlc19zaHVmZmxlKS5cbiAgXy5zaHVmZmxlID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgdmFyIHJhbmQ7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgc2h1ZmZsZWQgPSBbXTtcbiAgICBlYWNoKG9iaiwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJhbmQgPSBfLnJhbmRvbShpbmRleCsrKTtcbiAgICAgIHNodWZmbGVkW2luZGV4IC0gMV0gPSBzaHVmZmxlZFtyYW5kXTtcbiAgICAgIHNodWZmbGVkW3JhbmRdID0gdmFsdWU7XG4gICAgfSk7XG4gICAgcmV0dXJuIHNodWZmbGVkO1xuICB9O1xuXG4gIC8vIFNhbXBsZSAqKm4qKiByYW5kb20gdmFsdWVzIGZyb20gYSBjb2xsZWN0aW9uLlxuICAvLyBJZiAqKm4qKiBpcyBub3Qgc3BlY2lmaWVkLCByZXR1cm5zIGEgc2luZ2xlIHJhbmRvbSBlbGVtZW50LlxuICAvLyBUaGUgaW50ZXJuYWwgYGd1YXJkYCBhcmd1bWVudCBhbGxvd3MgaXQgdG8gd29yayB3aXRoIGBtYXBgLlxuICBfLnNhbXBsZSA9IGZ1bmN0aW9uKG9iaiwgbiwgZ3VhcmQpIHtcbiAgICBpZiAobiA9PSBudWxsIHx8IGd1YXJkKSB7XG4gICAgICBpZiAob2JqLmxlbmd0aCAhPT0gK29iai5sZW5ndGgpIG9iaiA9IF8udmFsdWVzKG9iaik7XG4gICAgICByZXR1cm4gb2JqW18ucmFuZG9tKG9iai5sZW5ndGggLSAxKV07XG4gICAgfVxuICAgIHJldHVybiBfLnNodWZmbGUob2JqKS5zbGljZSgwLCBNYXRoLm1heCgwLCBuKSk7XG4gIH07XG5cbiAgLy8gQW4gaW50ZXJuYWwgZnVuY3Rpb24gdG8gZ2VuZXJhdGUgbG9va3VwIGl0ZXJhdG9ycy5cbiAgdmFyIGxvb2t1cEl0ZXJhdG9yID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICBpZiAodmFsdWUgPT0gbnVsbCkgcmV0dXJuIF8uaWRlbnRpdHk7XG4gICAgaWYgKF8uaXNGdW5jdGlvbih2YWx1ZSkpIHJldHVybiB2YWx1ZTtcbiAgICByZXR1cm4gXy5wcm9wZXJ0eSh2YWx1ZSk7XG4gIH07XG5cbiAgLy8gU29ydCB0aGUgb2JqZWN0J3MgdmFsdWVzIGJ5IGEgY3JpdGVyaW9uIHByb2R1Y2VkIGJ5IGFuIGl0ZXJhdG9yLlxuICBfLnNvcnRCeSA9IGZ1bmN0aW9uKG9iaiwgaXRlcmF0b3IsIGNvbnRleHQpIHtcbiAgICBpdGVyYXRvciA9IGxvb2t1cEl0ZXJhdG9yKGl0ZXJhdG9yKTtcbiAgICByZXR1cm4gXy5wbHVjayhfLm1hcChvYmosIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgbGlzdCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICBpbmRleDogaW5kZXgsXG4gICAgICAgIGNyaXRlcmlhOiBpdGVyYXRvci5jYWxsKGNvbnRleHQsIHZhbHVlLCBpbmRleCwgbGlzdClcbiAgICAgIH07XG4gICAgfSkuc29ydChmdW5jdGlvbihsZWZ0LCByaWdodCkge1xuICAgICAgdmFyIGEgPSBsZWZ0LmNyaXRlcmlhO1xuICAgICAgdmFyIGIgPSByaWdodC5jcml0ZXJpYTtcbiAgICAgIGlmIChhICE9PSBiKSB7XG4gICAgICAgIGlmIChhID4gYiB8fCBhID09PSB2b2lkIDApIHJldHVybiAxO1xuICAgICAgICBpZiAoYSA8IGIgfHwgYiA9PT0gdm9pZCAwKSByZXR1cm4gLTE7XG4gICAgICB9XG4gICAgICByZXR1cm4gbGVmdC5pbmRleCAtIHJpZ2h0LmluZGV4O1xuICAgIH0pLCAndmFsdWUnKTtcbiAgfTtcblxuICAvLyBBbiBpbnRlcm5hbCBmdW5jdGlvbiB1c2VkIGZvciBhZ2dyZWdhdGUgXCJncm91cCBieVwiIG9wZXJhdGlvbnMuXG4gIHZhciBncm91cCA9IGZ1bmN0aW9uKGJlaGF2aW9yKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKG9iaiwgaXRlcmF0b3IsIGNvbnRleHQpIHtcbiAgICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICAgIGl0ZXJhdG9yID0gbG9va3VwSXRlcmF0b3IoaXRlcmF0b3IpO1xuICAgICAgZWFjaChvYmosIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCkge1xuICAgICAgICB2YXIga2V5ID0gaXRlcmF0b3IuY2FsbChjb250ZXh0LCB2YWx1ZSwgaW5kZXgsIG9iaik7XG4gICAgICAgIGJlaGF2aW9yKHJlc3VsdCwga2V5LCB2YWx1ZSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcbiAgfTtcblxuICAvLyBHcm91cHMgdGhlIG9iamVjdCdzIHZhbHVlcyBieSBhIGNyaXRlcmlvbi4gUGFzcyBlaXRoZXIgYSBzdHJpbmcgYXR0cmlidXRlXG4gIC8vIHRvIGdyb3VwIGJ5LCBvciBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGUgY3JpdGVyaW9uLlxuICBfLmdyb3VwQnkgPSBncm91cChmdW5jdGlvbihyZXN1bHQsIGtleSwgdmFsdWUpIHtcbiAgICBfLmhhcyhyZXN1bHQsIGtleSkgPyByZXN1bHRba2V5XS5wdXNoKHZhbHVlKSA6IHJlc3VsdFtrZXldID0gW3ZhbHVlXTtcbiAgfSk7XG5cbiAgLy8gSW5kZXhlcyB0aGUgb2JqZWN0J3MgdmFsdWVzIGJ5IGEgY3JpdGVyaW9uLCBzaW1pbGFyIHRvIGBncm91cEJ5YCwgYnV0IGZvclxuICAvLyB3aGVuIHlvdSBrbm93IHRoYXQgeW91ciBpbmRleCB2YWx1ZXMgd2lsbCBiZSB1bmlxdWUuXG4gIF8uaW5kZXhCeSA9IGdyb3VwKGZ1bmN0aW9uKHJlc3VsdCwga2V5LCB2YWx1ZSkge1xuICAgIHJlc3VsdFtrZXldID0gdmFsdWU7XG4gIH0pO1xuXG4gIC8vIENvdW50cyBpbnN0YW5jZXMgb2YgYW4gb2JqZWN0IHRoYXQgZ3JvdXAgYnkgYSBjZXJ0YWluIGNyaXRlcmlvbi4gUGFzc1xuICAvLyBlaXRoZXIgYSBzdHJpbmcgYXR0cmlidXRlIHRvIGNvdW50IGJ5LCBvciBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGVcbiAgLy8gY3JpdGVyaW9uLlxuICBfLmNvdW50QnkgPSBncm91cChmdW5jdGlvbihyZXN1bHQsIGtleSkge1xuICAgIF8uaGFzKHJlc3VsdCwga2V5KSA/IHJlc3VsdFtrZXldKysgOiByZXN1bHRba2V5XSA9IDE7XG4gIH0pO1xuXG4gIC8vIFVzZSBhIGNvbXBhcmF0b3IgZnVuY3Rpb24gdG8gZmlndXJlIG91dCB0aGUgc21hbGxlc3QgaW5kZXggYXQgd2hpY2hcbiAgLy8gYW4gb2JqZWN0IHNob3VsZCBiZSBpbnNlcnRlZCBzbyBhcyB0byBtYWludGFpbiBvcmRlci4gVXNlcyBiaW5hcnkgc2VhcmNoLlxuICBfLnNvcnRlZEluZGV4ID0gZnVuY3Rpb24oYXJyYXksIG9iaiwgaXRlcmF0b3IsIGNvbnRleHQpIHtcbiAgICBpdGVyYXRvciA9IGxvb2t1cEl0ZXJhdG9yKGl0ZXJhdG9yKTtcbiAgICB2YXIgdmFsdWUgPSBpdGVyYXRvci5jYWxsKGNvbnRleHQsIG9iaik7XG4gICAgdmFyIGxvdyA9IDAsIGhpZ2ggPSBhcnJheS5sZW5ndGg7XG4gICAgd2hpbGUgKGxvdyA8IGhpZ2gpIHtcbiAgICAgIHZhciBtaWQgPSAobG93ICsgaGlnaCkgPj4+IDE7XG4gICAgICBpdGVyYXRvci5jYWxsKGNvbnRleHQsIGFycmF5W21pZF0pIDwgdmFsdWUgPyBsb3cgPSBtaWQgKyAxIDogaGlnaCA9IG1pZDtcbiAgICB9XG4gICAgcmV0dXJuIGxvdztcbiAgfTtcblxuICAvLyBTYWZlbHkgY3JlYXRlIGEgcmVhbCwgbGl2ZSBhcnJheSBmcm9tIGFueXRoaW5nIGl0ZXJhYmxlLlxuICBfLnRvQXJyYXkgPSBmdW5jdGlvbihvYmopIHtcbiAgICBpZiAoIW9iaikgcmV0dXJuIFtdO1xuICAgIGlmIChfLmlzQXJyYXkob2JqKSkgcmV0dXJuIHNsaWNlLmNhbGwob2JqKTtcbiAgICBpZiAob2JqLmxlbmd0aCA9PT0gK29iai5sZW5ndGgpIHJldHVybiBfLm1hcChvYmosIF8uaWRlbnRpdHkpO1xuICAgIHJldHVybiBfLnZhbHVlcyhvYmopO1xuICB9O1xuXG4gIC8vIFJldHVybiB0aGUgbnVtYmVyIG9mIGVsZW1lbnRzIGluIGFuIG9iamVjdC5cbiAgXy5zaXplID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgaWYgKG9iaiA9PSBudWxsKSByZXR1cm4gMDtcbiAgICByZXR1cm4gKG9iai5sZW5ndGggPT09ICtvYmoubGVuZ3RoKSA/IG9iai5sZW5ndGggOiBfLmtleXMob2JqKS5sZW5ndGg7XG4gIH07XG5cbiAgLy8gQXJyYXkgRnVuY3Rpb25zXG4gIC8vIC0tLS0tLS0tLS0tLS0tLVxuXG4gIC8vIEdldCB0aGUgZmlyc3QgZWxlbWVudCBvZiBhbiBhcnJheS4gUGFzc2luZyAqKm4qKiB3aWxsIHJldHVybiB0aGUgZmlyc3QgTlxuICAvLyB2YWx1ZXMgaW4gdGhlIGFycmF5LiBBbGlhc2VkIGFzIGBoZWFkYCBhbmQgYHRha2VgLiBUaGUgKipndWFyZCoqIGNoZWNrXG4gIC8vIGFsbG93cyBpdCB0byB3b3JrIHdpdGggYF8ubWFwYC5cbiAgXy5maXJzdCA9IF8uaGVhZCA9IF8udGFrZSA9IGZ1bmN0aW9uKGFycmF5LCBuLCBndWFyZCkge1xuICAgIGlmIChhcnJheSA9PSBudWxsKSByZXR1cm4gdm9pZCAwO1xuICAgIGlmICgobiA9PSBudWxsKSB8fCBndWFyZCkgcmV0dXJuIGFycmF5WzBdO1xuICAgIGlmIChuIDwgMCkgcmV0dXJuIFtdO1xuICAgIHJldHVybiBzbGljZS5jYWxsKGFycmF5LCAwLCBuKTtcbiAgfTtcblxuICAvLyBSZXR1cm5zIGV2ZXJ5dGhpbmcgYnV0IHRoZSBsYXN0IGVudHJ5IG9mIHRoZSBhcnJheS4gRXNwZWNpYWxseSB1c2VmdWwgb25cbiAgLy8gdGhlIGFyZ3VtZW50cyBvYmplY3QuIFBhc3NpbmcgKipuKiogd2lsbCByZXR1cm4gYWxsIHRoZSB2YWx1ZXMgaW5cbiAgLy8gdGhlIGFycmF5LCBleGNsdWRpbmcgdGhlIGxhc3QgTi4gVGhlICoqZ3VhcmQqKiBjaGVjayBhbGxvd3MgaXQgdG8gd29yayB3aXRoXG4gIC8vIGBfLm1hcGAuXG4gIF8uaW5pdGlhbCA9IGZ1bmN0aW9uKGFycmF5LCBuLCBndWFyZCkge1xuICAgIHJldHVybiBzbGljZS5jYWxsKGFycmF5LCAwLCBhcnJheS5sZW5ndGggLSAoKG4gPT0gbnVsbCkgfHwgZ3VhcmQgPyAxIDogbikpO1xuICB9O1xuXG4gIC8vIEdldCB0aGUgbGFzdCBlbGVtZW50IG9mIGFuIGFycmF5LiBQYXNzaW5nICoqbioqIHdpbGwgcmV0dXJuIHRoZSBsYXN0IE5cbiAgLy8gdmFsdWVzIGluIHRoZSBhcnJheS4gVGhlICoqZ3VhcmQqKiBjaGVjayBhbGxvd3MgaXQgdG8gd29yayB3aXRoIGBfLm1hcGAuXG4gIF8ubGFzdCA9IGZ1bmN0aW9uKGFycmF5LCBuLCBndWFyZCkge1xuICAgIGlmIChhcnJheSA9PSBudWxsKSByZXR1cm4gdm9pZCAwO1xuICAgIGlmICgobiA9PSBudWxsKSB8fCBndWFyZCkgcmV0dXJuIGFycmF5W2FycmF5Lmxlbmd0aCAtIDFdO1xuICAgIHJldHVybiBzbGljZS5jYWxsKGFycmF5LCBNYXRoLm1heChhcnJheS5sZW5ndGggLSBuLCAwKSk7XG4gIH07XG5cbiAgLy8gUmV0dXJucyBldmVyeXRoaW5nIGJ1dCB0aGUgZmlyc3QgZW50cnkgb2YgdGhlIGFycmF5LiBBbGlhc2VkIGFzIGB0YWlsYCBhbmQgYGRyb3BgLlxuICAvLyBFc3BlY2lhbGx5IHVzZWZ1bCBvbiB0aGUgYXJndW1lbnRzIG9iamVjdC4gUGFzc2luZyBhbiAqKm4qKiB3aWxsIHJldHVyblxuICAvLyB0aGUgcmVzdCBOIHZhbHVlcyBpbiB0aGUgYXJyYXkuIFRoZSAqKmd1YXJkKipcbiAgLy8gY2hlY2sgYWxsb3dzIGl0IHRvIHdvcmsgd2l0aCBgXy5tYXBgLlxuICBfLnJlc3QgPSBfLnRhaWwgPSBfLmRyb3AgPSBmdW5jdGlvbihhcnJheSwgbiwgZ3VhcmQpIHtcbiAgICByZXR1cm4gc2xpY2UuY2FsbChhcnJheSwgKG4gPT0gbnVsbCkgfHwgZ3VhcmQgPyAxIDogbik7XG4gIH07XG5cbiAgLy8gVHJpbSBvdXQgYWxsIGZhbHN5IHZhbHVlcyBmcm9tIGFuIGFycmF5LlxuICBfLmNvbXBhY3QgPSBmdW5jdGlvbihhcnJheSkge1xuICAgIHJldHVybiBfLmZpbHRlcihhcnJheSwgXy5pZGVudGl0eSk7XG4gIH07XG5cbiAgLy8gSW50ZXJuYWwgaW1wbGVtZW50YXRpb24gb2YgYSByZWN1cnNpdmUgYGZsYXR0ZW5gIGZ1bmN0aW9uLlxuICB2YXIgZmxhdHRlbiA9IGZ1bmN0aW9uKGlucHV0LCBzaGFsbG93LCBvdXRwdXQpIHtcbiAgICBpZiAoc2hhbGxvdyAmJiBfLmV2ZXJ5KGlucHV0LCBfLmlzQXJyYXkpKSB7XG4gICAgICByZXR1cm4gY29uY2F0LmFwcGx5KG91dHB1dCwgaW5wdXQpO1xuICAgIH1cbiAgICBlYWNoKGlucHV0LCBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgaWYgKF8uaXNBcnJheSh2YWx1ZSkgfHwgXy5pc0FyZ3VtZW50cyh2YWx1ZSkpIHtcbiAgICAgICAgc2hhbGxvdyA/IHB1c2guYXBwbHkob3V0cHV0LCB2YWx1ZSkgOiBmbGF0dGVuKHZhbHVlLCBzaGFsbG93LCBvdXRwdXQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3V0cHV0LnB1c2godmFsdWUpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBvdXRwdXQ7XG4gIH07XG5cbiAgLy8gRmxhdHRlbiBvdXQgYW4gYXJyYXksIGVpdGhlciByZWN1cnNpdmVseSAoYnkgZGVmYXVsdCksIG9yIGp1c3Qgb25lIGxldmVsLlxuICBfLmZsYXR0ZW4gPSBmdW5jdGlvbihhcnJheSwgc2hhbGxvdykge1xuICAgIHJldHVybiBmbGF0dGVuKGFycmF5LCBzaGFsbG93LCBbXSk7XG4gIH07XG5cbiAgLy8gUmV0dXJuIGEgdmVyc2lvbiBvZiB0aGUgYXJyYXkgdGhhdCBkb2VzIG5vdCBjb250YWluIHRoZSBzcGVjaWZpZWQgdmFsdWUocykuXG4gIF8ud2l0aG91dCA9IGZ1bmN0aW9uKGFycmF5KSB7XG4gICAgcmV0dXJuIF8uZGlmZmVyZW5jZShhcnJheSwgc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpKTtcbiAgfTtcblxuICAvLyBTcGxpdCBhbiBhcnJheSBpbnRvIHR3byBhcnJheXM6IG9uZSB3aG9zZSBlbGVtZW50cyBhbGwgc2F0aXNmeSB0aGUgZ2l2ZW5cbiAgLy8gcHJlZGljYXRlLCBhbmQgb25lIHdob3NlIGVsZW1lbnRzIGFsbCBkbyBub3Qgc2F0aXNmeSB0aGUgcHJlZGljYXRlLlxuICBfLnBhcnRpdGlvbiA9IGZ1bmN0aW9uKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgICB2YXIgcGFzcyA9IFtdLCBmYWlsID0gW107XG4gICAgZWFjaChhcnJheSwgZnVuY3Rpb24oZWxlbSkge1xuICAgICAgKHByZWRpY2F0ZShlbGVtKSA/IHBhc3MgOiBmYWlsKS5wdXNoKGVsZW0pO1xuICAgIH0pO1xuICAgIHJldHVybiBbcGFzcywgZmFpbF07XG4gIH07XG5cbiAgLy8gUHJvZHVjZSBhIGR1cGxpY2F0ZS1mcmVlIHZlcnNpb24gb2YgdGhlIGFycmF5LiBJZiB0aGUgYXJyYXkgaGFzIGFscmVhZHlcbiAgLy8gYmVlbiBzb3J0ZWQsIHlvdSBoYXZlIHRoZSBvcHRpb24gb2YgdXNpbmcgYSBmYXN0ZXIgYWxnb3JpdGhtLlxuICAvLyBBbGlhc2VkIGFzIGB1bmlxdWVgLlxuICBfLnVuaXEgPSBfLnVuaXF1ZSA9IGZ1bmN0aW9uKGFycmF5LCBpc1NvcnRlZCwgaXRlcmF0b3IsIGNvbnRleHQpIHtcbiAgICBpZiAoXy5pc0Z1bmN0aW9uKGlzU29ydGVkKSkge1xuICAgICAgY29udGV4dCA9IGl0ZXJhdG9yO1xuICAgICAgaXRlcmF0b3IgPSBpc1NvcnRlZDtcbiAgICAgIGlzU29ydGVkID0gZmFsc2U7XG4gICAgfVxuICAgIHZhciBpbml0aWFsID0gaXRlcmF0b3IgPyBfLm1hcChhcnJheSwgaXRlcmF0b3IsIGNvbnRleHQpIDogYXJyYXk7XG4gICAgdmFyIHJlc3VsdHMgPSBbXTtcbiAgICB2YXIgc2VlbiA9IFtdO1xuICAgIGVhY2goaW5pdGlhbCwgZnVuY3Rpb24odmFsdWUsIGluZGV4KSB7XG4gICAgICBpZiAoaXNTb3J0ZWQgPyAoIWluZGV4IHx8IHNlZW5bc2Vlbi5sZW5ndGggLSAxXSAhPT0gdmFsdWUpIDogIV8uY29udGFpbnMoc2VlbiwgdmFsdWUpKSB7XG4gICAgICAgIHNlZW4ucHVzaCh2YWx1ZSk7XG4gICAgICAgIHJlc3VsdHMucHVzaChhcnJheVtpbmRleF0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHRzO1xuICB9O1xuXG4gIC8vIFByb2R1Y2UgYW4gYXJyYXkgdGhhdCBjb250YWlucyB0aGUgdW5pb246IGVhY2ggZGlzdGluY3QgZWxlbWVudCBmcm9tIGFsbCBvZlxuICAvLyB0aGUgcGFzc2VkLWluIGFycmF5cy5cbiAgXy51bmlvbiA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBfLnVuaXEoXy5mbGF0dGVuKGFyZ3VtZW50cywgdHJ1ZSkpO1xuICB9O1xuXG4gIC8vIFByb2R1Y2UgYW4gYXJyYXkgdGhhdCBjb250YWlucyBldmVyeSBpdGVtIHNoYXJlZCBiZXR3ZWVuIGFsbCB0aGVcbiAgLy8gcGFzc2VkLWluIGFycmF5cy5cbiAgXy5pbnRlcnNlY3Rpb24gPSBmdW5jdGlvbihhcnJheSkge1xuICAgIHZhciByZXN0ID0gc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xuICAgIHJldHVybiBfLmZpbHRlcihfLnVuaXEoYXJyYXkpLCBmdW5jdGlvbihpdGVtKSB7XG4gICAgICByZXR1cm4gXy5ldmVyeShyZXN0LCBmdW5jdGlvbihvdGhlcikge1xuICAgICAgICByZXR1cm4gXy5jb250YWlucyhvdGhlciwgaXRlbSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuICAvLyBUYWtlIHRoZSBkaWZmZXJlbmNlIGJldHdlZW4gb25lIGFycmF5IGFuZCBhIG51bWJlciBvZiBvdGhlciBhcnJheXMuXG4gIC8vIE9ubHkgdGhlIGVsZW1lbnRzIHByZXNlbnQgaW4ganVzdCB0aGUgZmlyc3QgYXJyYXkgd2lsbCByZW1haW4uXG4gIF8uZGlmZmVyZW5jZSA9IGZ1bmN0aW9uKGFycmF5KSB7XG4gICAgdmFyIHJlc3QgPSBjb25jYXQuYXBwbHkoQXJyYXlQcm90bywgc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpKTtcbiAgICByZXR1cm4gXy5maWx0ZXIoYXJyYXksIGZ1bmN0aW9uKHZhbHVlKXsgcmV0dXJuICFfLmNvbnRhaW5zKHJlc3QsIHZhbHVlKTsgfSk7XG4gIH07XG5cbiAgLy8gWmlwIHRvZ2V0aGVyIG11bHRpcGxlIGxpc3RzIGludG8gYSBzaW5nbGUgYXJyYXkgLS0gZWxlbWVudHMgdGhhdCBzaGFyZVxuICAvLyBhbiBpbmRleCBnbyB0b2dldGhlci5cbiAgXy56aXAgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgbGVuZ3RoID0gXy5tYXgoXy5wbHVjayhhcmd1bWVudHMsICdsZW5ndGgnKS5jb25jYXQoMCkpO1xuICAgIHZhciByZXN1bHRzID0gbmV3IEFycmF5KGxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgcmVzdWx0c1tpXSA9IF8ucGx1Y2soYXJndW1lbnRzLCAnJyArIGkpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0cztcbiAgfTtcblxuICAvLyBDb252ZXJ0cyBsaXN0cyBpbnRvIG9iamVjdHMuIFBhc3MgZWl0aGVyIGEgc2luZ2xlIGFycmF5IG9mIGBba2V5LCB2YWx1ZV1gXG4gIC8vIHBhaXJzLCBvciB0d28gcGFyYWxsZWwgYXJyYXlzIG9mIHRoZSBzYW1lIGxlbmd0aCAtLSBvbmUgb2Yga2V5cywgYW5kIG9uZSBvZlxuICAvLyB0aGUgY29ycmVzcG9uZGluZyB2YWx1ZXMuXG4gIF8ub2JqZWN0ID0gZnVuY3Rpb24obGlzdCwgdmFsdWVzKSB7XG4gICAgaWYgKGxpc3QgPT0gbnVsbCkgcmV0dXJuIHt9O1xuICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gbGlzdC5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHZhbHVlcykge1xuICAgICAgICByZXN1bHRbbGlzdFtpXV0gPSB2YWx1ZXNbaV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXN1bHRbbGlzdFtpXVswXV0gPSBsaXN0W2ldWzFdO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIC8vIElmIHRoZSBicm93c2VyIGRvZXNuJ3Qgc3VwcGx5IHVzIHdpdGggaW5kZXhPZiAoSSdtIGxvb2tpbmcgYXQgeW91LCAqKk1TSUUqKiksXG4gIC8vIHdlIG5lZWQgdGhpcyBmdW5jdGlvbi4gUmV0dXJuIHRoZSBwb3NpdGlvbiBvZiB0aGUgZmlyc3Qgb2NjdXJyZW5jZSBvZiBhblxuICAvLyBpdGVtIGluIGFuIGFycmF5LCBvciAtMSBpZiB0aGUgaXRlbSBpcyBub3QgaW5jbHVkZWQgaW4gdGhlIGFycmF5LlxuICAvLyBEZWxlZ2F0ZXMgdG8gKipFQ01BU2NyaXB0IDUqKidzIG5hdGl2ZSBgaW5kZXhPZmAgaWYgYXZhaWxhYmxlLlxuICAvLyBJZiB0aGUgYXJyYXkgaXMgbGFyZ2UgYW5kIGFscmVhZHkgaW4gc29ydCBvcmRlciwgcGFzcyBgdHJ1ZWBcbiAgLy8gZm9yICoqaXNTb3J0ZWQqKiB0byB1c2UgYmluYXJ5IHNlYXJjaC5cbiAgXy5pbmRleE9mID0gZnVuY3Rpb24oYXJyYXksIGl0ZW0sIGlzU29ydGVkKSB7XG4gICAgaWYgKGFycmF5ID09IG51bGwpIHJldHVybiAtMTtcbiAgICB2YXIgaSA9IDAsIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcbiAgICBpZiAoaXNTb3J0ZWQpIHtcbiAgICAgIGlmICh0eXBlb2YgaXNTb3J0ZWQgPT0gJ251bWJlcicpIHtcbiAgICAgICAgaSA9IChpc1NvcnRlZCA8IDAgPyBNYXRoLm1heCgwLCBsZW5ndGggKyBpc1NvcnRlZCkgOiBpc1NvcnRlZCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpID0gXy5zb3J0ZWRJbmRleChhcnJheSwgaXRlbSk7XG4gICAgICAgIHJldHVybiBhcnJheVtpXSA9PT0gaXRlbSA/IGkgOiAtMTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKG5hdGl2ZUluZGV4T2YgJiYgYXJyYXkuaW5kZXhPZiA9PT0gbmF0aXZlSW5kZXhPZikgcmV0dXJuIGFycmF5LmluZGV4T2YoaXRlbSwgaXNTb3J0ZWQpO1xuICAgIGZvciAoOyBpIDwgbGVuZ3RoOyBpKyspIGlmIChhcnJheVtpXSA9PT0gaXRlbSkgcmV0dXJuIGk7XG4gICAgcmV0dXJuIC0xO1xuICB9O1xuXG4gIC8vIERlbGVnYXRlcyB0byAqKkVDTUFTY3JpcHQgNSoqJ3MgbmF0aXZlIGBsYXN0SW5kZXhPZmAgaWYgYXZhaWxhYmxlLlxuICBfLmxhc3RJbmRleE9mID0gZnVuY3Rpb24oYXJyYXksIGl0ZW0sIGZyb20pIHtcbiAgICBpZiAoYXJyYXkgPT0gbnVsbCkgcmV0dXJuIC0xO1xuICAgIHZhciBoYXNJbmRleCA9IGZyb20gIT0gbnVsbDtcbiAgICBpZiAobmF0aXZlTGFzdEluZGV4T2YgJiYgYXJyYXkubGFzdEluZGV4T2YgPT09IG5hdGl2ZUxhc3RJbmRleE9mKSB7XG4gICAgICByZXR1cm4gaGFzSW5kZXggPyBhcnJheS5sYXN0SW5kZXhPZihpdGVtLCBmcm9tKSA6IGFycmF5Lmxhc3RJbmRleE9mKGl0ZW0pO1xuICAgIH1cbiAgICB2YXIgaSA9IChoYXNJbmRleCA/IGZyb20gOiBhcnJheS5sZW5ndGgpO1xuICAgIHdoaWxlIChpLS0pIGlmIChhcnJheVtpXSA9PT0gaXRlbSkgcmV0dXJuIGk7XG4gICAgcmV0dXJuIC0xO1xuICB9O1xuXG4gIC8vIEdlbmVyYXRlIGFuIGludGVnZXIgQXJyYXkgY29udGFpbmluZyBhbiBhcml0aG1ldGljIHByb2dyZXNzaW9uLiBBIHBvcnQgb2ZcbiAgLy8gdGhlIG5hdGl2ZSBQeXRob24gYHJhbmdlKClgIGZ1bmN0aW9uLiBTZWVcbiAgLy8gW3RoZSBQeXRob24gZG9jdW1lbnRhdGlvbl0oaHR0cDovL2RvY3MucHl0aG9uLm9yZy9saWJyYXJ5L2Z1bmN0aW9ucy5odG1sI3JhbmdlKS5cbiAgXy5yYW5nZSA9IGZ1bmN0aW9uKHN0YXJ0LCBzdG9wLCBzdGVwKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPD0gMSkge1xuICAgICAgc3RvcCA9IHN0YXJ0IHx8IDA7XG4gICAgICBzdGFydCA9IDA7XG4gICAgfVxuICAgIHN0ZXAgPSBhcmd1bWVudHNbMl0gfHwgMTtcblxuICAgIHZhciBsZW5ndGggPSBNYXRoLm1heChNYXRoLmNlaWwoKHN0b3AgLSBzdGFydCkgLyBzdGVwKSwgMCk7XG4gICAgdmFyIGlkeCA9IDA7XG4gICAgdmFyIHJhbmdlID0gbmV3IEFycmF5KGxlbmd0aCk7XG5cbiAgICB3aGlsZShpZHggPCBsZW5ndGgpIHtcbiAgICAgIHJhbmdlW2lkeCsrXSA9IHN0YXJ0O1xuICAgICAgc3RhcnQgKz0gc3RlcDtcbiAgICB9XG5cbiAgICByZXR1cm4gcmFuZ2U7XG4gIH07XG5cbiAgLy8gRnVuY3Rpb24gKGFoZW0pIEZ1bmN0aW9uc1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvLyBSZXVzYWJsZSBjb25zdHJ1Y3RvciBmdW5jdGlvbiBmb3IgcHJvdG90eXBlIHNldHRpbmcuXG4gIHZhciBjdG9yID0gZnVuY3Rpb24oKXt9O1xuXG4gIC8vIENyZWF0ZSBhIGZ1bmN0aW9uIGJvdW5kIHRvIGEgZ2l2ZW4gb2JqZWN0IChhc3NpZ25pbmcgYHRoaXNgLCBhbmQgYXJndW1lbnRzLFxuICAvLyBvcHRpb25hbGx5KS4gRGVsZWdhdGVzIHRvICoqRUNNQVNjcmlwdCA1KioncyBuYXRpdmUgYEZ1bmN0aW9uLmJpbmRgIGlmXG4gIC8vIGF2YWlsYWJsZS5cbiAgXy5iaW5kID0gZnVuY3Rpb24oZnVuYywgY29udGV4dCkge1xuICAgIHZhciBhcmdzLCBib3VuZDtcbiAgICBpZiAobmF0aXZlQmluZCAmJiBmdW5jLmJpbmQgPT09IG5hdGl2ZUJpbmQpIHJldHVybiBuYXRpdmVCaW5kLmFwcGx5KGZ1bmMsIHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSk7XG4gICAgaWYgKCFfLmlzRnVuY3Rpb24oZnVuYykpIHRocm93IG5ldyBUeXBlRXJyb3I7XG4gICAgYXJncyA9IHNsaWNlLmNhbGwoYXJndW1lbnRzLCAyKTtcbiAgICByZXR1cm4gYm91bmQgPSBmdW5jdGlvbigpIHtcbiAgICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBib3VuZCkpIHJldHVybiBmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3MuY29uY2F0KHNsaWNlLmNhbGwoYXJndW1lbnRzKSkpO1xuICAgICAgY3Rvci5wcm90b3R5cGUgPSBmdW5jLnByb3RvdHlwZTtcbiAgICAgIHZhciBzZWxmID0gbmV3IGN0b3I7XG4gICAgICBjdG9yLnByb3RvdHlwZSA9IG51bGw7XG4gICAgICB2YXIgcmVzdWx0ID0gZnVuYy5hcHBseShzZWxmLCBhcmdzLmNvbmNhdChzbGljZS5jYWxsKGFyZ3VtZW50cykpKTtcbiAgICAgIGlmIChPYmplY3QocmVzdWx0KSA9PT0gcmVzdWx0KSByZXR1cm4gcmVzdWx0O1xuICAgICAgcmV0dXJuIHNlbGY7XG4gICAgfTtcbiAgfTtcblxuICAvLyBQYXJ0aWFsbHkgYXBwbHkgYSBmdW5jdGlvbiBieSBjcmVhdGluZyBhIHZlcnNpb24gdGhhdCBoYXMgaGFkIHNvbWUgb2YgaXRzXG4gIC8vIGFyZ3VtZW50cyBwcmUtZmlsbGVkLCB3aXRob3V0IGNoYW5naW5nIGl0cyBkeW5hbWljIGB0aGlzYCBjb250ZXh0LiBfIGFjdHNcbiAgLy8gYXMgYSBwbGFjZWhvbGRlciwgYWxsb3dpbmcgYW55IGNvbWJpbmF0aW9uIG9mIGFyZ3VtZW50cyB0byBiZSBwcmUtZmlsbGVkLlxuICBfLnBhcnRpYWwgPSBmdW5jdGlvbihmdW5jKSB7XG4gICAgdmFyIGJvdW5kQXJncyA9IHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgcG9zaXRpb24gPSAwO1xuICAgICAgdmFyIGFyZ3MgPSBib3VuZEFyZ3Muc2xpY2UoKTtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBhcmdzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChhcmdzW2ldID09PSBfKSBhcmdzW2ldID0gYXJndW1lbnRzW3Bvc2l0aW9uKytdO1xuICAgICAgfVxuICAgICAgd2hpbGUgKHBvc2l0aW9uIDwgYXJndW1lbnRzLmxlbmd0aCkgYXJncy5wdXNoKGFyZ3VtZW50c1twb3NpdGlvbisrXSk7XG4gICAgICByZXR1cm4gZnVuYy5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICB9O1xuICB9O1xuXG4gIC8vIEJpbmQgYSBudW1iZXIgb2YgYW4gb2JqZWN0J3MgbWV0aG9kcyB0byB0aGF0IG9iamVjdC4gUmVtYWluaW5nIGFyZ3VtZW50c1xuICAvLyBhcmUgdGhlIG1ldGhvZCBuYW1lcyB0byBiZSBib3VuZC4gVXNlZnVsIGZvciBlbnN1cmluZyB0aGF0IGFsbCBjYWxsYmFja3NcbiAgLy8gZGVmaW5lZCBvbiBhbiBvYmplY3QgYmVsb25nIHRvIGl0LlxuICBfLmJpbmRBbGwgPSBmdW5jdGlvbihvYmopIHtcbiAgICB2YXIgZnVuY3MgPSBzbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XG4gICAgaWYgKGZ1bmNzLmxlbmd0aCA9PT0gMCkgdGhyb3cgbmV3IEVycm9yKCdiaW5kQWxsIG11c3QgYmUgcGFzc2VkIGZ1bmN0aW9uIG5hbWVzJyk7XG4gICAgZWFjaChmdW5jcywgZnVuY3Rpb24oZikgeyBvYmpbZl0gPSBfLmJpbmQob2JqW2ZdLCBvYmopOyB9KTtcbiAgICByZXR1cm4gb2JqO1xuICB9O1xuXG4gIC8vIE1lbW9pemUgYW4gZXhwZW5zaXZlIGZ1bmN0aW9uIGJ5IHN0b3JpbmcgaXRzIHJlc3VsdHMuXG4gIF8ubWVtb2l6ZSA9IGZ1bmN0aW9uKGZ1bmMsIGhhc2hlcikge1xuICAgIHZhciBtZW1vID0ge307XG4gICAgaGFzaGVyIHx8IChoYXNoZXIgPSBfLmlkZW50aXR5KTtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIga2V5ID0gaGFzaGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICByZXR1cm4gXy5oYXMobWVtbywga2V5KSA/IG1lbW9ba2V5XSA6IChtZW1vW2tleV0gPSBmdW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICAgIH07XG4gIH07XG5cbiAgLy8gRGVsYXlzIGEgZnVuY3Rpb24gZm9yIHRoZSBnaXZlbiBudW1iZXIgb2YgbWlsbGlzZWNvbmRzLCBhbmQgdGhlbiBjYWxsc1xuICAvLyBpdCB3aXRoIHRoZSBhcmd1bWVudHMgc3VwcGxpZWQuXG4gIF8uZGVsYXkgPSBmdW5jdGlvbihmdW5jLCB3YWl0KSB7XG4gICAgdmFyIGFyZ3MgPSBzbGljZS5jYWxsKGFyZ3VtZW50cywgMik7XG4gICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuY3Rpb24oKXsgcmV0dXJuIGZ1bmMuYXBwbHkobnVsbCwgYXJncyk7IH0sIHdhaXQpO1xuICB9O1xuXG4gIC8vIERlZmVycyBhIGZ1bmN0aW9uLCBzY2hlZHVsaW5nIGl0IHRvIHJ1biBhZnRlciB0aGUgY3VycmVudCBjYWxsIHN0YWNrIGhhc1xuICAvLyBjbGVhcmVkLlxuICBfLmRlZmVyID0gZnVuY3Rpb24oZnVuYykge1xuICAgIHJldHVybiBfLmRlbGF5LmFwcGx5KF8sIFtmdW5jLCAxXS5jb25jYXQoc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpKSk7XG4gIH07XG5cbiAgLy8gUmV0dXJucyBhIGZ1bmN0aW9uLCB0aGF0LCB3aGVuIGludm9rZWQsIHdpbGwgb25seSBiZSB0cmlnZ2VyZWQgYXQgbW9zdCBvbmNlXG4gIC8vIGR1cmluZyBhIGdpdmVuIHdpbmRvdyBvZiB0aW1lLiBOb3JtYWxseSwgdGhlIHRocm90dGxlZCBmdW5jdGlvbiB3aWxsIHJ1blxuICAvLyBhcyBtdWNoIGFzIGl0IGNhbiwgd2l0aG91dCBldmVyIGdvaW5nIG1vcmUgdGhhbiBvbmNlIHBlciBgd2FpdGAgZHVyYXRpb247XG4gIC8vIGJ1dCBpZiB5b3UnZCBsaWtlIHRvIGRpc2FibGUgdGhlIGV4ZWN1dGlvbiBvbiB0aGUgbGVhZGluZyBlZGdlLCBwYXNzXG4gIC8vIGB7bGVhZGluZzogZmFsc2V9YC4gVG8gZGlzYWJsZSBleGVjdXRpb24gb24gdGhlIHRyYWlsaW5nIGVkZ2UsIGRpdHRvLlxuICBfLnRocm90dGxlID0gZnVuY3Rpb24oZnVuYywgd2FpdCwgb3B0aW9ucykge1xuICAgIHZhciBjb250ZXh0LCBhcmdzLCByZXN1bHQ7XG4gICAgdmFyIHRpbWVvdXQgPSBudWxsO1xuICAgIHZhciBwcmV2aW91cyA9IDA7XG4gICAgb3B0aW9ucyB8fCAob3B0aW9ucyA9IHt9KTtcbiAgICB2YXIgbGF0ZXIgPSBmdW5jdGlvbigpIHtcbiAgICAgIHByZXZpb3VzID0gb3B0aW9ucy5sZWFkaW5nID09PSBmYWxzZSA/IDAgOiBfLm5vdygpO1xuICAgICAgdGltZW91dCA9IG51bGw7XG4gICAgICByZXN1bHQgPSBmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xuICAgICAgY29udGV4dCA9IGFyZ3MgPSBudWxsO1xuICAgIH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIG5vdyA9IF8ubm93KCk7XG4gICAgICBpZiAoIXByZXZpb3VzICYmIG9wdGlvbnMubGVhZGluZyA9PT0gZmFsc2UpIHByZXZpb3VzID0gbm93O1xuICAgICAgdmFyIHJlbWFpbmluZyA9IHdhaXQgLSAobm93IC0gcHJldmlvdXMpO1xuICAgICAgY29udGV4dCA9IHRoaXM7XG4gICAgICBhcmdzID0gYXJndW1lbnRzO1xuICAgICAgaWYgKHJlbWFpbmluZyA8PSAwKSB7XG4gICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICAgICAgdGltZW91dCA9IG51bGw7XG4gICAgICAgIHByZXZpb3VzID0gbm93O1xuICAgICAgICByZXN1bHQgPSBmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xuICAgICAgICBjb250ZXh0ID0gYXJncyA9IG51bGw7XG4gICAgICB9IGVsc2UgaWYgKCF0aW1lb3V0ICYmIG9wdGlvbnMudHJhaWxpbmcgIT09IGZhbHNlKSB7XG4gICAgICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KGxhdGVyLCByZW1haW5pbmcpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuICB9O1xuXG4gIC8vIFJldHVybnMgYSBmdW5jdGlvbiwgdGhhdCwgYXMgbG9uZyBhcyBpdCBjb250aW51ZXMgdG8gYmUgaW52b2tlZCwgd2lsbCBub3RcbiAgLy8gYmUgdHJpZ2dlcmVkLiBUaGUgZnVuY3Rpb24gd2lsbCBiZSBjYWxsZWQgYWZ0ZXIgaXQgc3RvcHMgYmVpbmcgY2FsbGVkIGZvclxuICAvLyBOIG1pbGxpc2Vjb25kcy4gSWYgYGltbWVkaWF0ZWAgaXMgcGFzc2VkLCB0cmlnZ2VyIHRoZSBmdW5jdGlvbiBvbiB0aGVcbiAgLy8gbGVhZGluZyBlZGdlLCBpbnN0ZWFkIG9mIHRoZSB0cmFpbGluZy5cbiAgXy5kZWJvdW5jZSA9IGZ1bmN0aW9uKGZ1bmMsIHdhaXQsIGltbWVkaWF0ZSkge1xuICAgIHZhciB0aW1lb3V0LCBhcmdzLCBjb250ZXh0LCB0aW1lc3RhbXAsIHJlc3VsdDtcblxuICAgIHZhciBsYXRlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGxhc3QgPSBfLm5vdygpIC0gdGltZXN0YW1wO1xuICAgICAgaWYgKGxhc3QgPCB3YWl0KSB7XG4gICAgICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KGxhdGVyLCB3YWl0IC0gbGFzdCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aW1lb3V0ID0gbnVsbDtcbiAgICAgICAgaWYgKCFpbW1lZGlhdGUpIHtcbiAgICAgICAgICByZXN1bHQgPSBmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xuICAgICAgICAgIGNvbnRleHQgPSBhcmdzID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICBjb250ZXh0ID0gdGhpcztcbiAgICAgIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICB0aW1lc3RhbXAgPSBfLm5vdygpO1xuICAgICAgdmFyIGNhbGxOb3cgPSBpbW1lZGlhdGUgJiYgIXRpbWVvdXQ7XG4gICAgICBpZiAoIXRpbWVvdXQpIHtcbiAgICAgICAgdGltZW91dCA9IHNldFRpbWVvdXQobGF0ZXIsIHdhaXQpO1xuICAgICAgfVxuICAgICAgaWYgKGNhbGxOb3cpIHtcbiAgICAgICAgcmVzdWx0ID0gZnVuYy5hcHBseShjb250ZXh0LCBhcmdzKTtcbiAgICAgICAgY29udGV4dCA9IGFyZ3MgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG4gIH07XG5cbiAgLy8gUmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSBleGVjdXRlZCBhdCBtb3N0IG9uZSB0aW1lLCBubyBtYXR0ZXIgaG93XG4gIC8vIG9mdGVuIHlvdSBjYWxsIGl0LiBVc2VmdWwgZm9yIGxhenkgaW5pdGlhbGl6YXRpb24uXG4gIF8ub25jZSA9IGZ1bmN0aW9uKGZ1bmMpIHtcbiAgICB2YXIgcmFuID0gZmFsc2UsIG1lbW87XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKHJhbikgcmV0dXJuIG1lbW87XG4gICAgICByYW4gPSB0cnVlO1xuICAgICAgbWVtbyA9IGZ1bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIGZ1bmMgPSBudWxsO1xuICAgICAgcmV0dXJuIG1lbW87XG4gICAgfTtcbiAgfTtcblxuICAvLyBSZXR1cm5zIHRoZSBmaXJzdCBmdW5jdGlvbiBwYXNzZWQgYXMgYW4gYXJndW1lbnQgdG8gdGhlIHNlY29uZCxcbiAgLy8gYWxsb3dpbmcgeW91IHRvIGFkanVzdCBhcmd1bWVudHMsIHJ1biBjb2RlIGJlZm9yZSBhbmQgYWZ0ZXIsIGFuZFxuICAvLyBjb25kaXRpb25hbGx5IGV4ZWN1dGUgdGhlIG9yaWdpbmFsIGZ1bmN0aW9uLlxuICBfLndyYXAgPSBmdW5jdGlvbihmdW5jLCB3cmFwcGVyKSB7XG4gICAgcmV0dXJuIF8ucGFydGlhbCh3cmFwcGVyLCBmdW5jKTtcbiAgfTtcblxuICAvLyBSZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCBpcyB0aGUgY29tcG9zaXRpb24gb2YgYSBsaXN0IG9mIGZ1bmN0aW9ucywgZWFjaFxuICAvLyBjb25zdW1pbmcgdGhlIHJldHVybiB2YWx1ZSBvZiB0aGUgZnVuY3Rpb24gdGhhdCBmb2xsb3dzLlxuICBfLmNvbXBvc2UgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgZnVuY3MgPSBhcmd1bWVudHM7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICBmb3IgKHZhciBpID0gZnVuY3MubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgYXJncyA9IFtmdW5jc1tpXS5hcHBseSh0aGlzLCBhcmdzKV07XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJnc1swXTtcbiAgICB9O1xuICB9O1xuXG4gIC8vIFJldHVybnMgYSBmdW5jdGlvbiB0aGF0IHdpbGwgb25seSBiZSBleGVjdXRlZCBhZnRlciBiZWluZyBjYWxsZWQgTiB0aW1lcy5cbiAgXy5hZnRlciA9IGZ1bmN0aW9uKHRpbWVzLCBmdW5jKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKC0tdGltZXMgPCAxKSB7XG4gICAgICAgIHJldHVybiBmdW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9XG4gICAgfTtcbiAgfTtcblxuICAvLyBPYmplY3QgRnVuY3Rpb25zXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS1cblxuICAvLyBSZXRyaWV2ZSB0aGUgbmFtZXMgb2YgYW4gb2JqZWN0J3MgcHJvcGVydGllcy5cbiAgLy8gRGVsZWdhdGVzIHRvICoqRUNNQVNjcmlwdCA1KioncyBuYXRpdmUgYE9iamVjdC5rZXlzYFxuICBfLmtleXMgPSBmdW5jdGlvbihvYmopIHtcbiAgICBpZiAoIV8uaXNPYmplY3Qob2JqKSkgcmV0dXJuIFtdO1xuICAgIGlmIChuYXRpdmVLZXlzKSByZXR1cm4gbmF0aXZlS2V5cyhvYmopO1xuICAgIHZhciBrZXlzID0gW107XG4gICAgZm9yICh2YXIga2V5IGluIG9iaikgaWYgKF8uaGFzKG9iaiwga2V5KSkga2V5cy5wdXNoKGtleSk7XG4gICAgcmV0dXJuIGtleXM7XG4gIH07XG5cbiAgLy8gUmV0cmlldmUgdGhlIHZhbHVlcyBvZiBhbiBvYmplY3QncyBwcm9wZXJ0aWVzLlxuICBfLnZhbHVlcyA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHZhciBrZXlzID0gXy5rZXlzKG9iaik7XG4gICAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICAgIHZhciB2YWx1ZXMgPSBuZXcgQXJyYXkobGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICB2YWx1ZXNbaV0gPSBvYmpba2V5c1tpXV07XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZXM7XG4gIH07XG5cbiAgLy8gQ29udmVydCBhbiBvYmplY3QgaW50byBhIGxpc3Qgb2YgYFtrZXksIHZhbHVlXWAgcGFpcnMuXG4gIF8ucGFpcnMgPSBmdW5jdGlvbihvYmopIHtcbiAgICB2YXIga2V5cyA9IF8ua2V5cyhvYmopO1xuICAgIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgICB2YXIgcGFpcnMgPSBuZXcgQXJyYXkobGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBwYWlyc1tpXSA9IFtrZXlzW2ldLCBvYmpba2V5c1tpXV1dO1xuICAgIH1cbiAgICByZXR1cm4gcGFpcnM7XG4gIH07XG5cbiAgLy8gSW52ZXJ0IHRoZSBrZXlzIGFuZCB2YWx1ZXMgb2YgYW4gb2JqZWN0LiBUaGUgdmFsdWVzIG11c3QgYmUgc2VyaWFsaXphYmxlLlxuICBfLmludmVydCA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICB2YXIga2V5cyA9IF8ua2V5cyhvYmopO1xuICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBrZXlzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICByZXN1bHRbb2JqW2tleXNbaV1dXSA9IGtleXNbaV07XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgLy8gUmV0dXJuIGEgc29ydGVkIGxpc3Qgb2YgdGhlIGZ1bmN0aW9uIG5hbWVzIGF2YWlsYWJsZSBvbiB0aGUgb2JqZWN0LlxuICAvLyBBbGlhc2VkIGFzIGBtZXRob2RzYFxuICBfLmZ1bmN0aW9ucyA9IF8ubWV0aG9kcyA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHZhciBuYW1lcyA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICAgIGlmIChfLmlzRnVuY3Rpb24ob2JqW2tleV0pKSBuYW1lcy5wdXNoKGtleSk7XG4gICAgfVxuICAgIHJldHVybiBuYW1lcy5zb3J0KCk7XG4gIH07XG5cbiAgLy8gRXh0ZW5kIGEgZ2l2ZW4gb2JqZWN0IHdpdGggYWxsIHRoZSBwcm9wZXJ0aWVzIGluIHBhc3NlZC1pbiBvYmplY3QocykuXG4gIF8uZXh0ZW5kID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgZWFjaChzbGljZS5jYWxsKGFyZ3VtZW50cywgMSksIGZ1bmN0aW9uKHNvdXJjZSkge1xuICAgICAgaWYgKHNvdXJjZSkge1xuICAgICAgICBmb3IgKHZhciBwcm9wIGluIHNvdXJjZSkge1xuICAgICAgICAgIG9ialtwcm9wXSA9IHNvdXJjZVtwcm9wXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBvYmo7XG4gIH07XG5cbiAgLy8gUmV0dXJuIGEgY29weSBvZiB0aGUgb2JqZWN0IG9ubHkgY29udGFpbmluZyB0aGUgd2hpdGVsaXN0ZWQgcHJvcGVydGllcy5cbiAgXy5waWNrID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgdmFyIGNvcHkgPSB7fTtcbiAgICB2YXIga2V5cyA9IGNvbmNhdC5hcHBseShBcnJheVByb3RvLCBzbGljZS5jYWxsKGFyZ3VtZW50cywgMSkpO1xuICAgIGVhY2goa2V5cywgZnVuY3Rpb24oa2V5KSB7XG4gICAgICBpZiAoa2V5IGluIG9iaikgY29weVtrZXldID0gb2JqW2tleV07XG4gICAgfSk7XG4gICAgcmV0dXJuIGNvcHk7XG4gIH07XG5cbiAgIC8vIFJldHVybiBhIGNvcHkgb2YgdGhlIG9iamVjdCB3aXRob3V0IHRoZSBibGFja2xpc3RlZCBwcm9wZXJ0aWVzLlxuICBfLm9taXQgPSBmdW5jdGlvbihvYmopIHtcbiAgICB2YXIgY29weSA9IHt9O1xuICAgIHZhciBrZXlzID0gY29uY2F0LmFwcGx5KEFycmF5UHJvdG8sIHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSk7XG4gICAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgICAgaWYgKCFfLmNvbnRhaW5zKGtleXMsIGtleSkpIGNvcHlba2V5XSA9IG9ialtrZXldO1xuICAgIH1cbiAgICByZXR1cm4gY29weTtcbiAgfTtcblxuICAvLyBGaWxsIGluIGEgZ2l2ZW4gb2JqZWN0IHdpdGggZGVmYXVsdCBwcm9wZXJ0aWVzLlxuICBfLmRlZmF1bHRzID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgZWFjaChzbGljZS5jYWxsKGFyZ3VtZW50cywgMSksIGZ1bmN0aW9uKHNvdXJjZSkge1xuICAgICAgaWYgKHNvdXJjZSkge1xuICAgICAgICBmb3IgKHZhciBwcm9wIGluIHNvdXJjZSkge1xuICAgICAgICAgIGlmIChvYmpbcHJvcF0gPT09IHZvaWQgMCkgb2JqW3Byb3BdID0gc291cmNlW3Byb3BdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIG9iajtcbiAgfTtcblxuICAvLyBDcmVhdGUgYSAoc2hhbGxvdy1jbG9uZWQpIGR1cGxpY2F0ZSBvZiBhbiBvYmplY3QuXG4gIF8uY2xvbmUgPSBmdW5jdGlvbihvYmopIHtcbiAgICBpZiAoIV8uaXNPYmplY3Qob2JqKSkgcmV0dXJuIG9iajtcbiAgICByZXR1cm4gXy5pc0FycmF5KG9iaikgPyBvYmouc2xpY2UoKSA6IF8uZXh0ZW5kKHt9LCBvYmopO1xuICB9O1xuXG4gIC8vIEludm9rZXMgaW50ZXJjZXB0b3Igd2l0aCB0aGUgb2JqLCBhbmQgdGhlbiByZXR1cm5zIG9iai5cbiAgLy8gVGhlIHByaW1hcnkgcHVycG9zZSBvZiB0aGlzIG1ldGhvZCBpcyB0byBcInRhcCBpbnRvXCIgYSBtZXRob2QgY2hhaW4sIGluXG4gIC8vIG9yZGVyIHRvIHBlcmZvcm0gb3BlcmF0aW9ucyBvbiBpbnRlcm1lZGlhdGUgcmVzdWx0cyB3aXRoaW4gdGhlIGNoYWluLlxuICBfLnRhcCA9IGZ1bmN0aW9uKG9iaiwgaW50ZXJjZXB0b3IpIHtcbiAgICBpbnRlcmNlcHRvcihvYmopO1xuICAgIHJldHVybiBvYmo7XG4gIH07XG5cbiAgLy8gSW50ZXJuYWwgcmVjdXJzaXZlIGNvbXBhcmlzb24gZnVuY3Rpb24gZm9yIGBpc0VxdWFsYC5cbiAgdmFyIGVxID0gZnVuY3Rpb24oYSwgYiwgYVN0YWNrLCBiU3RhY2spIHtcbiAgICAvLyBJZGVudGljYWwgb2JqZWN0cyBhcmUgZXF1YWwuIGAwID09PSAtMGAsIGJ1dCB0aGV5IGFyZW4ndCBpZGVudGljYWwuXG4gICAgLy8gU2VlIHRoZSBbSGFybW9ueSBgZWdhbGAgcHJvcG9zYWxdKGh0dHA6Ly93aWtpLmVjbWFzY3JpcHQub3JnL2Rva3UucGhwP2lkPWhhcm1vbnk6ZWdhbCkuXG4gICAgaWYgKGEgPT09IGIpIHJldHVybiBhICE9PSAwIHx8IDEgLyBhID09IDEgLyBiO1xuICAgIC8vIEEgc3RyaWN0IGNvbXBhcmlzb24gaXMgbmVjZXNzYXJ5IGJlY2F1c2UgYG51bGwgPT0gdW5kZWZpbmVkYC5cbiAgICBpZiAoYSA9PSBudWxsIHx8IGIgPT0gbnVsbCkgcmV0dXJuIGEgPT09IGI7XG4gICAgLy8gVW53cmFwIGFueSB3cmFwcGVkIG9iamVjdHMuXG4gICAgaWYgKGEgaW5zdGFuY2VvZiBfKSBhID0gYS5fd3JhcHBlZDtcbiAgICBpZiAoYiBpbnN0YW5jZW9mIF8pIGIgPSBiLl93cmFwcGVkO1xuICAgIC8vIENvbXBhcmUgYFtbQ2xhc3NdXWAgbmFtZXMuXG4gICAgdmFyIGNsYXNzTmFtZSA9IHRvU3RyaW5nLmNhbGwoYSk7XG4gICAgaWYgKGNsYXNzTmFtZSAhPSB0b1N0cmluZy5jYWxsKGIpKSByZXR1cm4gZmFsc2U7XG4gICAgc3dpdGNoIChjbGFzc05hbWUpIHtcbiAgICAgIC8vIFN0cmluZ3MsIG51bWJlcnMsIGRhdGVzLCBhbmQgYm9vbGVhbnMgYXJlIGNvbXBhcmVkIGJ5IHZhbHVlLlxuICAgICAgY2FzZSAnW29iamVjdCBTdHJpbmddJzpcbiAgICAgICAgLy8gUHJpbWl0aXZlcyBhbmQgdGhlaXIgY29ycmVzcG9uZGluZyBvYmplY3Qgd3JhcHBlcnMgYXJlIGVxdWl2YWxlbnQ7IHRodXMsIGBcIjVcImAgaXNcbiAgICAgICAgLy8gZXF1aXZhbGVudCB0byBgbmV3IFN0cmluZyhcIjVcIilgLlxuICAgICAgICByZXR1cm4gYSA9PSBTdHJpbmcoYik7XG4gICAgICBjYXNlICdbb2JqZWN0IE51bWJlcl0nOlxuICAgICAgICAvLyBgTmFOYHMgYXJlIGVxdWl2YWxlbnQsIGJ1dCBub24tcmVmbGV4aXZlLiBBbiBgZWdhbGAgY29tcGFyaXNvbiBpcyBwZXJmb3JtZWQgZm9yXG4gICAgICAgIC8vIG90aGVyIG51bWVyaWMgdmFsdWVzLlxuICAgICAgICByZXR1cm4gYSAhPSArYSA/IGIgIT0gK2IgOiAoYSA9PSAwID8gMSAvIGEgPT0gMSAvIGIgOiBhID09ICtiKTtcbiAgICAgIGNhc2UgJ1tvYmplY3QgRGF0ZV0nOlxuICAgICAgY2FzZSAnW29iamVjdCBCb29sZWFuXSc6XG4gICAgICAgIC8vIENvZXJjZSBkYXRlcyBhbmQgYm9vbGVhbnMgdG8gbnVtZXJpYyBwcmltaXRpdmUgdmFsdWVzLiBEYXRlcyBhcmUgY29tcGFyZWQgYnkgdGhlaXJcbiAgICAgICAgLy8gbWlsbGlzZWNvbmQgcmVwcmVzZW50YXRpb25zLiBOb3RlIHRoYXQgaW52YWxpZCBkYXRlcyB3aXRoIG1pbGxpc2Vjb25kIHJlcHJlc2VudGF0aW9uc1xuICAgICAgICAvLyBvZiBgTmFOYCBhcmUgbm90IGVxdWl2YWxlbnQuXG4gICAgICAgIHJldHVybiArYSA9PSArYjtcbiAgICAgIC8vIFJlZ0V4cHMgYXJlIGNvbXBhcmVkIGJ5IHRoZWlyIHNvdXJjZSBwYXR0ZXJucyBhbmQgZmxhZ3MuXG4gICAgICBjYXNlICdbb2JqZWN0IFJlZ0V4cF0nOlxuICAgICAgICByZXR1cm4gYS5zb3VyY2UgPT0gYi5zb3VyY2UgJiZcbiAgICAgICAgICAgICAgIGEuZ2xvYmFsID09IGIuZ2xvYmFsICYmXG4gICAgICAgICAgICAgICBhLm11bHRpbGluZSA9PSBiLm11bHRpbGluZSAmJlxuICAgICAgICAgICAgICAgYS5pZ25vcmVDYXNlID09IGIuaWdub3JlQ2FzZTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBhICE9ICdvYmplY3QnIHx8IHR5cGVvZiBiICE9ICdvYmplY3QnKSByZXR1cm4gZmFsc2U7XG4gICAgLy8gQXNzdW1lIGVxdWFsaXR5IGZvciBjeWNsaWMgc3RydWN0dXJlcy4gVGhlIGFsZ29yaXRobSBmb3IgZGV0ZWN0aW5nIGN5Y2xpY1xuICAgIC8vIHN0cnVjdHVyZXMgaXMgYWRhcHRlZCBmcm9tIEVTIDUuMSBzZWN0aW9uIDE1LjEyLjMsIGFic3RyYWN0IG9wZXJhdGlvbiBgSk9gLlxuICAgIHZhciBsZW5ndGggPSBhU3RhY2subGVuZ3RoO1xuICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgLy8gTGluZWFyIHNlYXJjaC4gUGVyZm9ybWFuY2UgaXMgaW52ZXJzZWx5IHByb3BvcnRpb25hbCB0byB0aGUgbnVtYmVyIG9mXG4gICAgICAvLyB1bmlxdWUgbmVzdGVkIHN0cnVjdHVyZXMuXG4gICAgICBpZiAoYVN0YWNrW2xlbmd0aF0gPT0gYSkgcmV0dXJuIGJTdGFja1tsZW5ndGhdID09IGI7XG4gICAgfVxuICAgIC8vIE9iamVjdHMgd2l0aCBkaWZmZXJlbnQgY29uc3RydWN0b3JzIGFyZSBub3QgZXF1aXZhbGVudCwgYnV0IGBPYmplY3Rgc1xuICAgIC8vIGZyb20gZGlmZmVyZW50IGZyYW1lcyBhcmUuXG4gICAgdmFyIGFDdG9yID0gYS5jb25zdHJ1Y3RvciwgYkN0b3IgPSBiLmNvbnN0cnVjdG9yO1xuICAgIGlmIChhQ3RvciAhPT0gYkN0b3IgJiYgIShfLmlzRnVuY3Rpb24oYUN0b3IpICYmIChhQ3RvciBpbnN0YW5jZW9mIGFDdG9yKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfLmlzRnVuY3Rpb24oYkN0b3IpICYmIChiQ3RvciBpbnN0YW5jZW9mIGJDdG9yKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICYmICgnY29uc3RydWN0b3InIGluIGEgJiYgJ2NvbnN0cnVjdG9yJyBpbiBiKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICAvLyBBZGQgdGhlIGZpcnN0IG9iamVjdCB0byB0aGUgc3RhY2sgb2YgdHJhdmVyc2VkIG9iamVjdHMuXG4gICAgYVN0YWNrLnB1c2goYSk7XG4gICAgYlN0YWNrLnB1c2goYik7XG4gICAgdmFyIHNpemUgPSAwLCByZXN1bHQgPSB0cnVlO1xuICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbXBhcmUgb2JqZWN0cyBhbmQgYXJyYXlzLlxuICAgIGlmIChjbGFzc05hbWUgPT0gJ1tvYmplY3QgQXJyYXldJykge1xuICAgICAgLy8gQ29tcGFyZSBhcnJheSBsZW5ndGhzIHRvIGRldGVybWluZSBpZiBhIGRlZXAgY29tcGFyaXNvbiBpcyBuZWNlc3NhcnkuXG4gICAgICBzaXplID0gYS5sZW5ndGg7XG4gICAgICByZXN1bHQgPSBzaXplID09IGIubGVuZ3RoO1xuICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAvLyBEZWVwIGNvbXBhcmUgdGhlIGNvbnRlbnRzLCBpZ25vcmluZyBub24tbnVtZXJpYyBwcm9wZXJ0aWVzLlxuICAgICAgICB3aGlsZSAoc2l6ZS0tKSB7XG4gICAgICAgICAgaWYgKCEocmVzdWx0ID0gZXEoYVtzaXplXSwgYltzaXplXSwgYVN0YWNrLCBiU3RhY2spKSkgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gRGVlcCBjb21wYXJlIG9iamVjdHMuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gYSkge1xuICAgICAgICBpZiAoXy5oYXMoYSwga2V5KSkge1xuICAgICAgICAgIC8vIENvdW50IHRoZSBleHBlY3RlZCBudW1iZXIgb2YgcHJvcGVydGllcy5cbiAgICAgICAgICBzaXplKys7XG4gICAgICAgICAgLy8gRGVlcCBjb21wYXJlIGVhY2ggbWVtYmVyLlxuICAgICAgICAgIGlmICghKHJlc3VsdCA9IF8uaGFzKGIsIGtleSkgJiYgZXEoYVtrZXldLCBiW2tleV0sIGFTdGFjaywgYlN0YWNrKSkpIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBFbnN1cmUgdGhhdCBib3RoIG9iamVjdHMgY29udGFpbiB0aGUgc2FtZSBudW1iZXIgb2YgcHJvcGVydGllcy5cbiAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgZm9yIChrZXkgaW4gYikge1xuICAgICAgICAgIGlmIChfLmhhcyhiLCBrZXkpICYmICEoc2l6ZS0tKSkgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0ID0gIXNpemU7XG4gICAgICB9XG4gICAgfVxuICAgIC8vIFJlbW92ZSB0aGUgZmlyc3Qgb2JqZWN0IGZyb20gdGhlIHN0YWNrIG9mIHRyYXZlcnNlZCBvYmplY3RzLlxuICAgIGFTdGFjay5wb3AoKTtcbiAgICBiU3RhY2sucG9wKCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICAvLyBQZXJmb3JtIGEgZGVlcCBjb21wYXJpc29uIHRvIGNoZWNrIGlmIHR3byBvYmplY3RzIGFyZSBlcXVhbC5cbiAgXy5pc0VxdWFsID0gZnVuY3Rpb24oYSwgYikge1xuICAgIHJldHVybiBlcShhLCBiLCBbXSwgW10pO1xuICB9O1xuXG4gIC8vIElzIGEgZ2l2ZW4gYXJyYXksIHN0cmluZywgb3Igb2JqZWN0IGVtcHR5P1xuICAvLyBBbiBcImVtcHR5XCIgb2JqZWN0IGhhcyBubyBlbnVtZXJhYmxlIG93bi1wcm9wZXJ0aWVzLlxuICBfLmlzRW1wdHkgPSBmdW5jdGlvbihvYmopIHtcbiAgICBpZiAob2JqID09IG51bGwpIHJldHVybiB0cnVlO1xuICAgIGlmIChfLmlzQXJyYXkob2JqKSB8fCBfLmlzU3RyaW5nKG9iaikpIHJldHVybiBvYmoubGVuZ3RoID09PSAwO1xuICAgIGZvciAodmFyIGtleSBpbiBvYmopIGlmIChfLmhhcyhvYmosIGtleSkpIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfTtcblxuICAvLyBJcyBhIGdpdmVuIHZhbHVlIGEgRE9NIGVsZW1lbnQ/XG4gIF8uaXNFbGVtZW50ID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgcmV0dXJuICEhKG9iaiAmJiBvYmoubm9kZVR5cGUgPT09IDEpO1xuICB9O1xuXG4gIC8vIElzIGEgZ2l2ZW4gdmFsdWUgYW4gYXJyYXk/XG4gIC8vIERlbGVnYXRlcyB0byBFQ01BNSdzIG5hdGl2ZSBBcnJheS5pc0FycmF5XG4gIF8uaXNBcnJheSA9IG5hdGl2ZUlzQXJyYXkgfHwgZnVuY3Rpb24ob2JqKSB7XG4gICAgcmV0dXJuIHRvU3RyaW5nLmNhbGwob2JqKSA9PSAnW29iamVjdCBBcnJheV0nO1xuICB9O1xuXG4gIC8vIElzIGEgZ2l2ZW4gdmFyaWFibGUgYW4gb2JqZWN0P1xuICBfLmlzT2JqZWN0ID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgcmV0dXJuIG9iaiA9PT0gT2JqZWN0KG9iaik7XG4gIH07XG5cbiAgLy8gQWRkIHNvbWUgaXNUeXBlIG1ldGhvZHM6IGlzQXJndW1lbnRzLCBpc0Z1bmN0aW9uLCBpc1N0cmluZywgaXNOdW1iZXIsIGlzRGF0ZSwgaXNSZWdFeHAuXG4gIGVhY2goWydBcmd1bWVudHMnLCAnRnVuY3Rpb24nLCAnU3RyaW5nJywgJ051bWJlcicsICdEYXRlJywgJ1JlZ0V4cCddLCBmdW5jdGlvbihuYW1lKSB7XG4gICAgX1snaXMnICsgbmFtZV0gPSBmdW5jdGlvbihvYmopIHtcbiAgICAgIHJldHVybiB0b1N0cmluZy5jYWxsKG9iaikgPT0gJ1tvYmplY3QgJyArIG5hbWUgKyAnXSc7XG4gICAgfTtcbiAgfSk7XG5cbiAgLy8gRGVmaW5lIGEgZmFsbGJhY2sgdmVyc2lvbiBvZiB0aGUgbWV0aG9kIGluIGJyb3dzZXJzIChhaGVtLCBJRSksIHdoZXJlXG4gIC8vIHRoZXJlIGlzbid0IGFueSBpbnNwZWN0YWJsZSBcIkFyZ3VtZW50c1wiIHR5cGUuXG4gIGlmICghXy5pc0FyZ3VtZW50cyhhcmd1bWVudHMpKSB7XG4gICAgXy5pc0FyZ3VtZW50cyA9IGZ1bmN0aW9uKG9iaikge1xuICAgICAgcmV0dXJuICEhKG9iaiAmJiBfLmhhcyhvYmosICdjYWxsZWUnKSk7XG4gICAgfTtcbiAgfVxuXG4gIC8vIE9wdGltaXplIGBpc0Z1bmN0aW9uYCBpZiBhcHByb3ByaWF0ZS5cbiAgaWYgKHR5cGVvZiAoLy4vKSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIF8uaXNGdW5jdGlvbiA9IGZ1bmN0aW9uKG9iaikge1xuICAgICAgcmV0dXJuIHR5cGVvZiBvYmogPT09ICdmdW5jdGlvbic7XG4gICAgfTtcbiAgfVxuXG4gIC8vIElzIGEgZ2l2ZW4gb2JqZWN0IGEgZmluaXRlIG51bWJlcj9cbiAgXy5pc0Zpbml0ZSA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHJldHVybiBpc0Zpbml0ZShvYmopICYmICFpc05hTihwYXJzZUZsb2F0KG9iaikpO1xuICB9O1xuXG4gIC8vIElzIHRoZSBnaXZlbiB2YWx1ZSBgTmFOYD8gKE5hTiBpcyB0aGUgb25seSBudW1iZXIgd2hpY2ggZG9lcyBub3QgZXF1YWwgaXRzZWxmKS5cbiAgXy5pc05hTiA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHJldHVybiBfLmlzTnVtYmVyKG9iaikgJiYgb2JqICE9ICtvYmo7XG4gIH07XG5cbiAgLy8gSXMgYSBnaXZlbiB2YWx1ZSBhIGJvb2xlYW4/XG4gIF8uaXNCb29sZWFuID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgcmV0dXJuIG9iaiA9PT0gdHJ1ZSB8fCBvYmogPT09IGZhbHNlIHx8IHRvU3RyaW5nLmNhbGwob2JqKSA9PSAnW29iamVjdCBCb29sZWFuXSc7XG4gIH07XG5cbiAgLy8gSXMgYSBnaXZlbiB2YWx1ZSBlcXVhbCB0byBudWxsP1xuICBfLmlzTnVsbCA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHJldHVybiBvYmogPT09IG51bGw7XG4gIH07XG5cbiAgLy8gSXMgYSBnaXZlbiB2YXJpYWJsZSB1bmRlZmluZWQ/XG4gIF8uaXNVbmRlZmluZWQgPSBmdW5jdGlvbihvYmopIHtcbiAgICByZXR1cm4gb2JqID09PSB2b2lkIDA7XG4gIH07XG5cbiAgLy8gU2hvcnRjdXQgZnVuY3Rpb24gZm9yIGNoZWNraW5nIGlmIGFuIG9iamVjdCBoYXMgYSBnaXZlbiBwcm9wZXJ0eSBkaXJlY3RseVxuICAvLyBvbiBpdHNlbGYgKGluIG90aGVyIHdvcmRzLCBub3Qgb24gYSBwcm90b3R5cGUpLlxuICBfLmhhcyA9IGZ1bmN0aW9uKG9iaiwga2V5KSB7XG4gICAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpO1xuICB9O1xuXG4gIC8vIFV0aWxpdHkgRnVuY3Rpb25zXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLy8gUnVuIFVuZGVyc2NvcmUuanMgaW4gKm5vQ29uZmxpY3QqIG1vZGUsIHJldHVybmluZyB0aGUgYF9gIHZhcmlhYmxlIHRvIGl0c1xuICAvLyBwcmV2aW91cyBvd25lci4gUmV0dXJucyBhIHJlZmVyZW5jZSB0byB0aGUgVW5kZXJzY29yZSBvYmplY3QuXG4gIF8ubm9Db25mbGljdCA9IGZ1bmN0aW9uKCkge1xuICAgIHJvb3QuXyA9IHByZXZpb3VzVW5kZXJzY29yZTtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICAvLyBLZWVwIHRoZSBpZGVudGl0eSBmdW5jdGlvbiBhcm91bmQgZm9yIGRlZmF1bHQgaXRlcmF0b3JzLlxuICBfLmlkZW50aXR5ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH07XG5cbiAgXy5jb25zdGFudCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9O1xuICB9O1xuXG4gIF8ucHJvcGVydHkgPSBmdW5jdGlvbihrZXkpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24ob2JqKSB7XG4gICAgICByZXR1cm4gb2JqW2tleV07XG4gICAgfTtcbiAgfTtcblxuICAvLyBSZXR1cm5zIGEgcHJlZGljYXRlIGZvciBjaGVja2luZyB3aGV0aGVyIGFuIG9iamVjdCBoYXMgYSBnaXZlbiBzZXQgb2YgYGtleTp2YWx1ZWAgcGFpcnMuXG4gIF8ubWF0Y2hlcyA9IGZ1bmN0aW9uKGF0dHJzKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKG9iaikge1xuICAgICAgaWYgKG9iaiA9PT0gYXR0cnMpIHJldHVybiB0cnVlOyAvL2F2b2lkIGNvbXBhcmluZyBhbiBvYmplY3QgdG8gaXRzZWxmLlxuICAgICAgZm9yICh2YXIga2V5IGluIGF0dHJzKSB7XG4gICAgICAgIGlmIChhdHRyc1trZXldICE9PSBvYmpba2V5XSlcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH07XG5cbiAgLy8gUnVuIGEgZnVuY3Rpb24gKipuKiogdGltZXMuXG4gIF8udGltZXMgPSBmdW5jdGlvbihuLCBpdGVyYXRvciwgY29udGV4dCkge1xuICAgIHZhciBhY2N1bSA9IEFycmF5KE1hdGgubWF4KDAsIG4pKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG47IGkrKykgYWNjdW1baV0gPSBpdGVyYXRvci5jYWxsKGNvbnRleHQsIGkpO1xuICAgIHJldHVybiBhY2N1bTtcbiAgfTtcblxuICAvLyBSZXR1cm4gYSByYW5kb20gaW50ZWdlciBiZXR3ZWVuIG1pbiBhbmQgbWF4IChpbmNsdXNpdmUpLlxuICBfLnJhbmRvbSA9IGZ1bmN0aW9uKG1pbiwgbWF4KSB7XG4gICAgaWYgKG1heCA9PSBudWxsKSB7XG4gICAgICBtYXggPSBtaW47XG4gICAgICBtaW4gPSAwO1xuICAgIH1cbiAgICByZXR1cm4gbWluICsgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKG1heCAtIG1pbiArIDEpKTtcbiAgfTtcblxuICAvLyBBIChwb3NzaWJseSBmYXN0ZXIpIHdheSB0byBnZXQgdGhlIGN1cnJlbnQgdGltZXN0YW1wIGFzIGFuIGludGVnZXIuXG4gIF8ubm93ID0gRGF0ZS5ub3cgfHwgZnVuY3Rpb24oKSB7IHJldHVybiBuZXcgRGF0ZSgpLmdldFRpbWUoKTsgfTtcblxuICAvLyBMaXN0IG9mIEhUTUwgZW50aXRpZXMgZm9yIGVzY2FwaW5nLlxuICB2YXIgZW50aXR5TWFwID0ge1xuICAgIGVzY2FwZToge1xuICAgICAgJyYnOiAnJmFtcDsnLFxuICAgICAgJzwnOiAnJmx0OycsXG4gICAgICAnPic6ICcmZ3Q7JyxcbiAgICAgICdcIic6ICcmcXVvdDsnLFxuICAgICAgXCInXCI6ICcmI3gyNzsnXG4gICAgfVxuICB9O1xuICBlbnRpdHlNYXAudW5lc2NhcGUgPSBfLmludmVydChlbnRpdHlNYXAuZXNjYXBlKTtcblxuICAvLyBSZWdleGVzIGNvbnRhaW5pbmcgdGhlIGtleXMgYW5kIHZhbHVlcyBsaXN0ZWQgaW1tZWRpYXRlbHkgYWJvdmUuXG4gIHZhciBlbnRpdHlSZWdleGVzID0ge1xuICAgIGVzY2FwZTogICBuZXcgUmVnRXhwKCdbJyArIF8ua2V5cyhlbnRpdHlNYXAuZXNjYXBlKS5qb2luKCcnKSArICddJywgJ2cnKSxcbiAgICB1bmVzY2FwZTogbmV3IFJlZ0V4cCgnKCcgKyBfLmtleXMoZW50aXR5TWFwLnVuZXNjYXBlKS5qb2luKCd8JykgKyAnKScsICdnJylcbiAgfTtcblxuICAvLyBGdW5jdGlvbnMgZm9yIGVzY2FwaW5nIGFuZCB1bmVzY2FwaW5nIHN0cmluZ3MgdG8vZnJvbSBIVE1MIGludGVycG9sYXRpb24uXG4gIF8uZWFjaChbJ2VzY2FwZScsICd1bmVzY2FwZSddLCBmdW5jdGlvbihtZXRob2QpIHtcbiAgICBfW21ldGhvZF0gPSBmdW5jdGlvbihzdHJpbmcpIHtcbiAgICAgIGlmIChzdHJpbmcgPT0gbnVsbCkgcmV0dXJuICcnO1xuICAgICAgcmV0dXJuICgnJyArIHN0cmluZykucmVwbGFjZShlbnRpdHlSZWdleGVzW21ldGhvZF0sIGZ1bmN0aW9uKG1hdGNoKSB7XG4gICAgICAgIHJldHVybiBlbnRpdHlNYXBbbWV0aG9kXVttYXRjaF07XG4gICAgICB9KTtcbiAgICB9O1xuICB9KTtcblxuICAvLyBJZiB0aGUgdmFsdWUgb2YgdGhlIG5hbWVkIGBwcm9wZXJ0eWAgaXMgYSBmdW5jdGlvbiB0aGVuIGludm9rZSBpdCB3aXRoIHRoZVxuICAvLyBgb2JqZWN0YCBhcyBjb250ZXh0OyBvdGhlcndpc2UsIHJldHVybiBpdC5cbiAgXy5yZXN1bHQgPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7XG4gICAgaWYgKG9iamVjdCA9PSBudWxsKSByZXR1cm4gdm9pZCAwO1xuICAgIHZhciB2YWx1ZSA9IG9iamVjdFtwcm9wZXJ0eV07XG4gICAgcmV0dXJuIF8uaXNGdW5jdGlvbih2YWx1ZSkgPyB2YWx1ZS5jYWxsKG9iamVjdCkgOiB2YWx1ZTtcbiAgfTtcblxuICAvLyBBZGQgeW91ciBvd24gY3VzdG9tIGZ1bmN0aW9ucyB0byB0aGUgVW5kZXJzY29yZSBvYmplY3QuXG4gIF8ubWl4aW4gPSBmdW5jdGlvbihvYmopIHtcbiAgICBlYWNoKF8uZnVuY3Rpb25zKG9iaiksIGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgIHZhciBmdW5jID0gX1tuYW1lXSA9IG9ialtuYW1lXTtcbiAgICAgIF8ucHJvdG90eXBlW25hbWVdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBhcmdzID0gW3RoaXMuX3dyYXBwZWRdO1xuICAgICAgICBwdXNoLmFwcGx5KGFyZ3MsIGFyZ3VtZW50cyk7XG4gICAgICAgIHJldHVybiByZXN1bHQuY2FsbCh0aGlzLCBmdW5jLmFwcGx5KF8sIGFyZ3MpKTtcbiAgICAgIH07XG4gICAgfSk7XG4gIH07XG5cbiAgLy8gR2VuZXJhdGUgYSB1bmlxdWUgaW50ZWdlciBpZCAodW5pcXVlIHdpdGhpbiB0aGUgZW50aXJlIGNsaWVudCBzZXNzaW9uKS5cbiAgLy8gVXNlZnVsIGZvciB0ZW1wb3JhcnkgRE9NIGlkcy5cbiAgdmFyIGlkQ291bnRlciA9IDA7XG4gIF8udW5pcXVlSWQgPSBmdW5jdGlvbihwcmVmaXgpIHtcbiAgICB2YXIgaWQgPSArK2lkQ291bnRlciArICcnO1xuICAgIHJldHVybiBwcmVmaXggPyBwcmVmaXggKyBpZCA6IGlkO1xuICB9O1xuXG4gIC8vIEJ5IGRlZmF1bHQsIFVuZGVyc2NvcmUgdXNlcyBFUkItc3R5bGUgdGVtcGxhdGUgZGVsaW1pdGVycywgY2hhbmdlIHRoZVxuICAvLyBmb2xsb3dpbmcgdGVtcGxhdGUgc2V0dGluZ3MgdG8gdXNlIGFsdGVybmF0aXZlIGRlbGltaXRlcnMuXG4gIF8udGVtcGxhdGVTZXR0aW5ncyA9IHtcbiAgICBldmFsdWF0ZSAgICA6IC88JShbXFxzXFxTXSs/KSU+L2csXG4gICAgaW50ZXJwb2xhdGUgOiAvPCU9KFtcXHNcXFNdKz8pJT4vZyxcbiAgICBlc2NhcGUgICAgICA6IC88JS0oW1xcc1xcU10rPyklPi9nXG4gIH07XG5cbiAgLy8gV2hlbiBjdXN0b21pemluZyBgdGVtcGxhdGVTZXR0aW5nc2AsIGlmIHlvdSBkb24ndCB3YW50IHRvIGRlZmluZSBhblxuICAvLyBpbnRlcnBvbGF0aW9uLCBldmFsdWF0aW9uIG9yIGVzY2FwaW5nIHJlZ2V4LCB3ZSBuZWVkIG9uZSB0aGF0IGlzXG4gIC8vIGd1YXJhbnRlZWQgbm90IHRvIG1hdGNoLlxuICB2YXIgbm9NYXRjaCA9IC8oLileLztcblxuICAvLyBDZXJ0YWluIGNoYXJhY3RlcnMgbmVlZCB0byBiZSBlc2NhcGVkIHNvIHRoYXQgdGhleSBjYW4gYmUgcHV0IGludG8gYVxuICAvLyBzdHJpbmcgbGl0ZXJhbC5cbiAgdmFyIGVzY2FwZXMgPSB7XG4gICAgXCInXCI6ICAgICAgXCInXCIsXG4gICAgJ1xcXFwnOiAgICAgJ1xcXFwnLFxuICAgICdcXHInOiAgICAgJ3InLFxuICAgICdcXG4nOiAgICAgJ24nLFxuICAgICdcXHQnOiAgICAgJ3QnLFxuICAgICdcXHUyMDI4JzogJ3UyMDI4JyxcbiAgICAnXFx1MjAyOSc6ICd1MjAyOSdcbiAgfTtcblxuICB2YXIgZXNjYXBlciA9IC9cXFxcfCd8XFxyfFxcbnxcXHR8XFx1MjAyOHxcXHUyMDI5L2c7XG5cbiAgLy8gSmF2YVNjcmlwdCBtaWNyby10ZW1wbGF0aW5nLCBzaW1pbGFyIHRvIEpvaG4gUmVzaWcncyBpbXBsZW1lbnRhdGlvbi5cbiAgLy8gVW5kZXJzY29yZSB0ZW1wbGF0aW5nIGhhbmRsZXMgYXJiaXRyYXJ5IGRlbGltaXRlcnMsIHByZXNlcnZlcyB3aGl0ZXNwYWNlLFxuICAvLyBhbmQgY29ycmVjdGx5IGVzY2FwZXMgcXVvdGVzIHdpdGhpbiBpbnRlcnBvbGF0ZWQgY29kZS5cbiAgXy50ZW1wbGF0ZSA9IGZ1bmN0aW9uKHRleHQsIGRhdGEsIHNldHRpbmdzKSB7XG4gICAgdmFyIHJlbmRlcjtcbiAgICBzZXR0aW5ncyA9IF8uZGVmYXVsdHMoe30sIHNldHRpbmdzLCBfLnRlbXBsYXRlU2V0dGluZ3MpO1xuXG4gICAgLy8gQ29tYmluZSBkZWxpbWl0ZXJzIGludG8gb25lIHJlZ3VsYXIgZXhwcmVzc2lvbiB2aWEgYWx0ZXJuYXRpb24uXG4gICAgdmFyIG1hdGNoZXIgPSBuZXcgUmVnRXhwKFtcbiAgICAgIChzZXR0aW5ncy5lc2NhcGUgfHwgbm9NYXRjaCkuc291cmNlLFxuICAgICAgKHNldHRpbmdzLmludGVycG9sYXRlIHx8IG5vTWF0Y2gpLnNvdXJjZSxcbiAgICAgIChzZXR0aW5ncy5ldmFsdWF0ZSB8fCBub01hdGNoKS5zb3VyY2VcbiAgICBdLmpvaW4oJ3wnKSArICd8JCcsICdnJyk7XG5cbiAgICAvLyBDb21waWxlIHRoZSB0ZW1wbGF0ZSBzb3VyY2UsIGVzY2FwaW5nIHN0cmluZyBsaXRlcmFscyBhcHByb3ByaWF0ZWx5LlxuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIHNvdXJjZSA9IFwiX19wKz0nXCI7XG4gICAgdGV4dC5yZXBsYWNlKG1hdGNoZXIsIGZ1bmN0aW9uKG1hdGNoLCBlc2NhcGUsIGludGVycG9sYXRlLCBldmFsdWF0ZSwgb2Zmc2V0KSB7XG4gICAgICBzb3VyY2UgKz0gdGV4dC5zbGljZShpbmRleCwgb2Zmc2V0KVxuICAgICAgICAucmVwbGFjZShlc2NhcGVyLCBmdW5jdGlvbihtYXRjaCkgeyByZXR1cm4gJ1xcXFwnICsgZXNjYXBlc1ttYXRjaF07IH0pO1xuXG4gICAgICBpZiAoZXNjYXBlKSB7XG4gICAgICAgIHNvdXJjZSArPSBcIicrXFxuKChfX3Q9KFwiICsgZXNjYXBlICsgXCIpKT09bnVsbD8nJzpfLmVzY2FwZShfX3QpKStcXG4nXCI7XG4gICAgICB9XG4gICAgICBpZiAoaW50ZXJwb2xhdGUpIHtcbiAgICAgICAgc291cmNlICs9IFwiJytcXG4oKF9fdD0oXCIgKyBpbnRlcnBvbGF0ZSArIFwiKSk9PW51bGw/Jyc6X190KStcXG4nXCI7XG4gICAgICB9XG4gICAgICBpZiAoZXZhbHVhdGUpIHtcbiAgICAgICAgc291cmNlICs9IFwiJztcXG5cIiArIGV2YWx1YXRlICsgXCJcXG5fX3ArPSdcIjtcbiAgICAgIH1cbiAgICAgIGluZGV4ID0gb2Zmc2V0ICsgbWF0Y2gubGVuZ3RoO1xuICAgICAgcmV0dXJuIG1hdGNoO1xuICAgIH0pO1xuICAgIHNvdXJjZSArPSBcIic7XFxuXCI7XG5cbiAgICAvLyBJZiBhIHZhcmlhYmxlIGlzIG5vdCBzcGVjaWZpZWQsIHBsYWNlIGRhdGEgdmFsdWVzIGluIGxvY2FsIHNjb3BlLlxuICAgIGlmICghc2V0dGluZ3MudmFyaWFibGUpIHNvdXJjZSA9ICd3aXRoKG9ianx8e30pe1xcbicgKyBzb3VyY2UgKyAnfVxcbic7XG5cbiAgICBzb3VyY2UgPSBcInZhciBfX3QsX19wPScnLF9faj1BcnJheS5wcm90b3R5cGUuam9pbixcIiArXG4gICAgICBcInByaW50PWZ1bmN0aW9uKCl7X19wKz1fX2ouY2FsbChhcmd1bWVudHMsJycpO307XFxuXCIgK1xuICAgICAgc291cmNlICsgXCJyZXR1cm4gX19wO1xcblwiO1xuXG4gICAgdHJ5IHtcbiAgICAgIHJlbmRlciA9IG5ldyBGdW5jdGlvbihzZXR0aW5ncy52YXJpYWJsZSB8fCAnb2JqJywgJ18nLCBzb3VyY2UpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGUuc291cmNlID0gc291cmNlO1xuICAgICAgdGhyb3cgZTtcbiAgICB9XG5cbiAgICBpZiAoZGF0YSkgcmV0dXJuIHJlbmRlcihkYXRhLCBfKTtcbiAgICB2YXIgdGVtcGxhdGUgPSBmdW5jdGlvbihkYXRhKSB7XG4gICAgICByZXR1cm4gcmVuZGVyLmNhbGwodGhpcywgZGF0YSwgXyk7XG4gICAgfTtcblxuICAgIC8vIFByb3ZpZGUgdGhlIGNvbXBpbGVkIGZ1bmN0aW9uIHNvdXJjZSBhcyBhIGNvbnZlbmllbmNlIGZvciBwcmVjb21waWxhdGlvbi5cbiAgICB0ZW1wbGF0ZS5zb3VyY2UgPSAnZnVuY3Rpb24oJyArIChzZXR0aW5ncy52YXJpYWJsZSB8fCAnb2JqJykgKyAnKXtcXG4nICsgc291cmNlICsgJ30nO1xuXG4gICAgcmV0dXJuIHRlbXBsYXRlO1xuICB9O1xuXG4gIC8vIEFkZCBhIFwiY2hhaW5cIiBmdW5jdGlvbiwgd2hpY2ggd2lsbCBkZWxlZ2F0ZSB0byB0aGUgd3JhcHBlci5cbiAgXy5jaGFpbiA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHJldHVybiBfKG9iaikuY2hhaW4oKTtcbiAgfTtcblxuICAvLyBPT1BcbiAgLy8gLS0tLS0tLS0tLS0tLS0tXG4gIC8vIElmIFVuZGVyc2NvcmUgaXMgY2FsbGVkIGFzIGEgZnVuY3Rpb24sIGl0IHJldHVybnMgYSB3cmFwcGVkIG9iamVjdCB0aGF0XG4gIC8vIGNhbiBiZSB1c2VkIE9PLXN0eWxlLiBUaGlzIHdyYXBwZXIgaG9sZHMgYWx0ZXJlZCB2ZXJzaW9ucyBvZiBhbGwgdGhlXG4gIC8vIHVuZGVyc2NvcmUgZnVuY3Rpb25zLiBXcmFwcGVkIG9iamVjdHMgbWF5IGJlIGNoYWluZWQuXG5cbiAgLy8gSGVscGVyIGZ1bmN0aW9uIHRvIGNvbnRpbnVlIGNoYWluaW5nIGludGVybWVkaWF0ZSByZXN1bHRzLlxuICB2YXIgcmVzdWx0ID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NoYWluID8gXyhvYmopLmNoYWluKCkgOiBvYmo7XG4gIH07XG5cbiAgLy8gQWRkIGFsbCBvZiB0aGUgVW5kZXJzY29yZSBmdW5jdGlvbnMgdG8gdGhlIHdyYXBwZXIgb2JqZWN0LlxuICBfLm1peGluKF8pO1xuXG4gIC8vIEFkZCBhbGwgbXV0YXRvciBBcnJheSBmdW5jdGlvbnMgdG8gdGhlIHdyYXBwZXIuXG4gIGVhY2goWydwb3AnLCAncHVzaCcsICdyZXZlcnNlJywgJ3NoaWZ0JywgJ3NvcnQnLCAnc3BsaWNlJywgJ3Vuc2hpZnQnXSwgZnVuY3Rpb24obmFtZSkge1xuICAgIHZhciBtZXRob2QgPSBBcnJheVByb3RvW25hbWVdO1xuICAgIF8ucHJvdG90eXBlW25hbWVdID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgb2JqID0gdGhpcy5fd3JhcHBlZDtcbiAgICAgIG1ldGhvZC5hcHBseShvYmosIGFyZ3VtZW50cyk7XG4gICAgICBpZiAoKG5hbWUgPT0gJ3NoaWZ0JyB8fCBuYW1lID09ICdzcGxpY2UnKSAmJiBvYmoubGVuZ3RoID09PSAwKSBkZWxldGUgb2JqWzBdO1xuICAgICAgcmV0dXJuIHJlc3VsdC5jYWxsKHRoaXMsIG9iaik7XG4gICAgfTtcbiAgfSk7XG5cbiAgLy8gQWRkIGFsbCBhY2Nlc3NvciBBcnJheSBmdW5jdGlvbnMgdG8gdGhlIHdyYXBwZXIuXG4gIGVhY2goWydjb25jYXQnLCAnam9pbicsICdzbGljZSddLCBmdW5jdGlvbihuYW1lKSB7XG4gICAgdmFyIG1ldGhvZCA9IEFycmF5UHJvdG9bbmFtZV07XG4gICAgXy5wcm90b3R5cGVbbmFtZV0gPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiByZXN1bHQuY2FsbCh0aGlzLCBtZXRob2QuYXBwbHkodGhpcy5fd3JhcHBlZCwgYXJndW1lbnRzKSk7XG4gICAgfTtcbiAgfSk7XG5cbiAgXy5leHRlbmQoXy5wcm90b3R5cGUsIHtcblxuICAgIC8vIFN0YXJ0IGNoYWluaW5nIGEgd3JhcHBlZCBVbmRlcnNjb3JlIG9iamVjdC5cbiAgICBjaGFpbjogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLl9jaGFpbiA9IHRydWU7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLy8gRXh0cmFjdHMgdGhlIHJlc3VsdCBmcm9tIGEgd3JhcHBlZCBhbmQgY2hhaW5lZCBvYmplY3QuXG4gICAgdmFsdWU6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuX3dyYXBwZWQ7XG4gICAgfVxuXG4gIH0pO1xuXG4gIC8vIEFNRCByZWdpc3RyYXRpb24gaGFwcGVucyBhdCB0aGUgZW5kIGZvciBjb21wYXRpYmlsaXR5IHdpdGggQU1EIGxvYWRlcnNcbiAgLy8gdGhhdCBtYXkgbm90IGVuZm9yY2UgbmV4dC10dXJuIHNlbWFudGljcyBvbiBtb2R1bGVzLiBFdmVuIHRob3VnaCBnZW5lcmFsXG4gIC8vIHByYWN0aWNlIGZvciBBTUQgcmVnaXN0cmF0aW9uIGlzIHRvIGJlIGFub255bW91cywgdW5kZXJzY29yZSByZWdpc3RlcnNcbiAgLy8gYXMgYSBuYW1lZCBtb2R1bGUgYmVjYXVzZSwgbGlrZSBqUXVlcnksIGl0IGlzIGEgYmFzZSBsaWJyYXJ5IHRoYXQgaXNcbiAgLy8gcG9wdWxhciBlbm91Z2ggdG8gYmUgYnVuZGxlZCBpbiBhIHRoaXJkIHBhcnR5IGxpYiwgYnV0IG5vdCBiZSBwYXJ0IG9mXG4gIC8vIGFuIEFNRCBsb2FkIHJlcXVlc3QuIFRob3NlIGNhc2VzIGNvdWxkIGdlbmVyYXRlIGFuIGVycm9yIHdoZW4gYW5cbiAgLy8gYW5vbnltb3VzIGRlZmluZSgpIGlzIGNhbGxlZCBvdXRzaWRlIG9mIGEgbG9hZGVyIHJlcXVlc3QuXG4gIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHtcbiAgICBkZWZpbmUoJ3VuZGVyc2NvcmUnLCBbXSwgZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gXztcbiAgICB9KTtcbiAgfVxufSkuY2FsbCh0aGlzKTtcbiIsIi8qXG4gKiAgQ29weXJpZ2h0IDIwMTEgVHdpdHRlciwgSW5jLlxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiAgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiAgVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqICBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiAgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxudmFyIEhvZ2FuID0ge307XG5cbihmdW5jdGlvbiAoSG9nYW4sIHVzZUFycmF5QnVmZmVyKSB7XG4gIEhvZ2FuLlRlbXBsYXRlID0gZnVuY3Rpb24gKHJlbmRlckZ1bmMsIHRleHQsIGNvbXBpbGVyLCBvcHRpb25zKSB7XG4gICAgdGhpcy5yID0gcmVuZGVyRnVuYyB8fCB0aGlzLnI7XG4gICAgdGhpcy5jID0gY29tcGlsZXI7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB0aGlzLnRleHQgPSB0ZXh0IHx8ICcnO1xuICAgIHRoaXMuYnVmID0gKHVzZUFycmF5QnVmZmVyKSA/IFtdIDogJyc7XG4gIH1cblxuICBIb2dhbi5UZW1wbGF0ZS5wcm90b3R5cGUgPSB7XG4gICAgLy8gcmVuZGVyOiByZXBsYWNlZCBieSBnZW5lcmF0ZWQgY29kZS5cbiAgICByOiBmdW5jdGlvbiAoY29udGV4dCwgcGFydGlhbHMsIGluZGVudCkgeyByZXR1cm4gJyc7IH0sXG5cbiAgICAvLyB2YXJpYWJsZSBlc2NhcGluZ1xuICAgIHY6IGhvZ2FuRXNjYXBlLFxuXG4gICAgLy8gdHJpcGxlIHN0YWNoZVxuICAgIHQ6IGNvZXJjZVRvU3RyaW5nLFxuXG4gICAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoY29udGV4dCwgcGFydGlhbHMsIGluZGVudCkge1xuICAgICAgcmV0dXJuIHRoaXMucmkoW2NvbnRleHRdLCBwYXJ0aWFscyB8fCB7fSwgaW5kZW50KTtcbiAgICB9LFxuXG4gICAgLy8gcmVuZGVyIGludGVybmFsIC0tIGEgaG9vayBmb3Igb3ZlcnJpZGVzIHRoYXQgY2F0Y2hlcyBwYXJ0aWFscyB0b29cbiAgICByaTogZnVuY3Rpb24gKGNvbnRleHQsIHBhcnRpYWxzLCBpbmRlbnQpIHtcbiAgICAgIHJldHVybiB0aGlzLnIoY29udGV4dCwgcGFydGlhbHMsIGluZGVudCk7XG4gICAgfSxcblxuICAgIC8vIHRyaWVzIHRvIGZpbmQgYSBwYXJ0aWFsIGluIHRoZSBjdXJlbnQgc2NvcGUgYW5kIHJlbmRlciBpdFxuICAgIHJwOiBmdW5jdGlvbihuYW1lLCBjb250ZXh0LCBwYXJ0aWFscywgaW5kZW50KSB7XG4gICAgICB2YXIgcGFydGlhbCA9IHBhcnRpYWxzW25hbWVdO1xuXG4gICAgICBpZiAoIXBhcnRpYWwpIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5jICYmIHR5cGVvZiBwYXJ0aWFsID09ICdzdHJpbmcnKSB7XG4gICAgICAgIHBhcnRpYWwgPSB0aGlzLmMuY29tcGlsZShwYXJ0aWFsLCB0aGlzLm9wdGlvbnMpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcGFydGlhbC5yaShjb250ZXh0LCBwYXJ0aWFscywgaW5kZW50KTtcbiAgICB9LFxuXG4gICAgLy8gcmVuZGVyIGEgc2VjdGlvblxuICAgIHJzOiBmdW5jdGlvbihjb250ZXh0LCBwYXJ0aWFscywgc2VjdGlvbikge1xuICAgICAgdmFyIHRhaWwgPSBjb250ZXh0W2NvbnRleHQubGVuZ3RoIC0gMV07XG5cbiAgICAgIGlmICghaXNBcnJheSh0YWlsKSkge1xuICAgICAgICBzZWN0aW9uKGNvbnRleHQsIHBhcnRpYWxzLCB0aGlzKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRhaWwubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29udGV4dC5wdXNoKHRhaWxbaV0pO1xuICAgICAgICBzZWN0aW9uKGNvbnRleHQsIHBhcnRpYWxzLCB0aGlzKTtcbiAgICAgICAgY29udGV4dC5wb3AoKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLy8gbWF5YmUgc3RhcnQgYSBzZWN0aW9uXG4gICAgczogZnVuY3Rpb24odmFsLCBjdHgsIHBhcnRpYWxzLCBpbnZlcnRlZCwgc3RhcnQsIGVuZCwgdGFncykge1xuICAgICAgdmFyIHBhc3M7XG5cbiAgICAgIGlmIChpc0FycmF5KHZhbCkgJiYgdmFsLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgdmFsID09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdmFsID0gdGhpcy5scyh2YWwsIGN0eCwgcGFydGlhbHMsIGludmVydGVkLCBzdGFydCwgZW5kLCB0YWdzKTtcbiAgICAgIH1cblxuICAgICAgcGFzcyA9ICh2YWwgPT09ICcnKSB8fCAhIXZhbDtcblxuICAgICAgaWYgKCFpbnZlcnRlZCAmJiBwYXNzICYmIGN0eCkge1xuICAgICAgICBjdHgucHVzaCgodHlwZW9mIHZhbCA9PSAnb2JqZWN0JykgPyB2YWwgOiBjdHhbY3R4Lmxlbmd0aCAtIDFdKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHBhc3M7XG4gICAgfSxcblxuICAgIC8vIGZpbmQgdmFsdWVzIHdpdGggZG90dGVkIG5hbWVzXG4gICAgZDogZnVuY3Rpb24oa2V5LCBjdHgsIHBhcnRpYWxzLCByZXR1cm5Gb3VuZCkge1xuICAgICAgdmFyIG5hbWVzID0ga2V5LnNwbGl0KCcuJyksXG4gICAgICAgICAgdmFsID0gdGhpcy5mKG5hbWVzWzBdLCBjdHgsIHBhcnRpYWxzLCByZXR1cm5Gb3VuZCksXG4gICAgICAgICAgY3ggPSBudWxsO1xuXG4gICAgICBpZiAoa2V5ID09PSAnLicgJiYgaXNBcnJheShjdHhbY3R4Lmxlbmd0aCAtIDJdKSkge1xuICAgICAgICByZXR1cm4gY3R4W2N0eC5sZW5ndGggLSAxXTtcbiAgICAgIH1cblxuICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBuYW1lcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAodmFsICYmIHR5cGVvZiB2YWwgPT0gJ29iamVjdCcgJiYgbmFtZXNbaV0gaW4gdmFsKSB7XG4gICAgICAgICAgY3ggPSB2YWw7XG4gICAgICAgICAgdmFsID0gdmFsW25hbWVzW2ldXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YWwgPSAnJztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAocmV0dXJuRm91bmQgJiYgIXZhbCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGlmICghcmV0dXJuRm91bmQgJiYgdHlwZW9mIHZhbCA9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGN0eC5wdXNoKGN4KTtcbiAgICAgICAgdmFsID0gdGhpcy5sdih2YWwsIGN0eCwgcGFydGlhbHMpO1xuICAgICAgICBjdHgucG9wKCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB2YWw7XG4gICAgfSxcblxuICAgIC8vIGZpbmQgdmFsdWVzIHdpdGggbm9ybWFsIG5hbWVzXG4gICAgZjogZnVuY3Rpb24oa2V5LCBjdHgsIHBhcnRpYWxzLCByZXR1cm5Gb3VuZCkge1xuICAgICAgdmFyIHZhbCA9IGZhbHNlLFxuICAgICAgICAgIHYgPSBudWxsLFxuICAgICAgICAgIGZvdW5kID0gZmFsc2U7XG5cbiAgICAgIGZvciAodmFyIGkgPSBjdHgubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgdiA9IGN0eFtpXTtcbiAgICAgICAgaWYgKHYgJiYgdHlwZW9mIHYgPT0gJ29iamVjdCcgJiYga2V5IGluIHYpIHtcbiAgICAgICAgICB2YWwgPSB2W2tleV07XG4gICAgICAgICAgZm91bmQgPSB0cnVlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICghZm91bmQpIHtcbiAgICAgICAgcmV0dXJuIChyZXR1cm5Gb3VuZCkgPyBmYWxzZSA6IFwiXCI7XG4gICAgICB9XG5cbiAgICAgIGlmICghcmV0dXJuRm91bmQgJiYgdHlwZW9mIHZhbCA9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHZhbCA9IHRoaXMubHYodmFsLCBjdHgsIHBhcnRpYWxzKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHZhbDtcbiAgICB9LFxuXG4gICAgLy8gaGlnaGVyIG9yZGVyIHRlbXBsYXRlc1xuICAgIGhvOiBmdW5jdGlvbih2YWwsIGN4LCBwYXJ0aWFscywgdGV4dCwgdGFncykge1xuICAgICAgdmFyIGNvbXBpbGVyID0gdGhpcy5jO1xuICAgICAgdmFyIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICBvcHRpb25zLmRlbGltaXRlcnMgPSB0YWdzO1xuICAgICAgdmFyIHRleHQgPSB2YWwuY2FsbChjeCwgdGV4dCk7XG4gICAgICB0ZXh0ID0gKHRleHQgPT0gbnVsbCkgPyBTdHJpbmcodGV4dCkgOiB0ZXh0LnRvU3RyaW5nKCk7XG4gICAgICB0aGlzLmIoY29tcGlsZXIuY29tcGlsZSh0ZXh0LCBvcHRpb25zKS5yZW5kZXIoY3gsIHBhcnRpYWxzKSk7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSxcblxuICAgIC8vIHRlbXBsYXRlIHJlc3VsdCBidWZmZXJpbmdcbiAgICBiOiAodXNlQXJyYXlCdWZmZXIpID8gZnVuY3Rpb24ocykgeyB0aGlzLmJ1Zi5wdXNoKHMpOyB9IDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24ocykgeyB0aGlzLmJ1ZiArPSBzOyB9LFxuICAgIGZsOiAodXNlQXJyYXlCdWZmZXIpID8gZnVuY3Rpb24oKSB7IHZhciByID0gdGhpcy5idWYuam9pbignJyk7IHRoaXMuYnVmID0gW107IHJldHVybiByOyB9IDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uKCkgeyB2YXIgciA9IHRoaXMuYnVmOyB0aGlzLmJ1ZiA9ICcnOyByZXR1cm4gcjsgfSxcblxuICAgIC8vIGxhbWJkYSByZXBsYWNlIHNlY3Rpb25cbiAgICBsczogZnVuY3Rpb24odmFsLCBjdHgsIHBhcnRpYWxzLCBpbnZlcnRlZCwgc3RhcnQsIGVuZCwgdGFncykge1xuICAgICAgdmFyIGN4ID0gY3R4W2N0eC5sZW5ndGggLSAxXSxcbiAgICAgICAgICB0ID0gbnVsbDtcblxuICAgICAgaWYgKCFpbnZlcnRlZCAmJiB0aGlzLmMgJiYgdmFsLmxlbmd0aCA+IDApIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaG8odmFsLCBjeCwgcGFydGlhbHMsIHRoaXMudGV4dC5zdWJzdHJpbmcoc3RhcnQsIGVuZCksIHRhZ3MpO1xuICAgICAgfVxuXG4gICAgICB0ID0gdmFsLmNhbGwoY3gpO1xuXG4gICAgICBpZiAodHlwZW9mIHQgPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBpZiAoaW52ZXJ0ZWQpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmMpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5obyh0LCBjeCwgcGFydGlhbHMsIHRoaXMudGV4dC5zdWJzdHJpbmcoc3RhcnQsIGVuZCksIHRhZ3MpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0O1xuICAgIH0sXG5cbiAgICAvLyBsYW1iZGEgcmVwbGFjZSB2YXJpYWJsZVxuICAgIGx2OiBmdW5jdGlvbih2YWwsIGN0eCwgcGFydGlhbHMpIHtcbiAgICAgIHZhciBjeCA9IGN0eFtjdHgubGVuZ3RoIC0gMV07XG4gICAgICB2YXIgcmVzdWx0ID0gdmFsLmNhbGwoY3gpO1xuXG4gICAgICBpZiAodHlwZW9mIHJlc3VsdCA9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJlc3VsdCA9IGNvZXJjZVRvU3RyaW5nKHJlc3VsdC5jYWxsKGN4KSk7XG4gICAgICAgIGlmICh0aGlzLmMgJiYgfnJlc3VsdC5pbmRleE9mKFwie1xcdTAwN0JcIikpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5jLmNvbXBpbGUocmVzdWx0LCB0aGlzLm9wdGlvbnMpLnJlbmRlcihjeCwgcGFydGlhbHMpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjb2VyY2VUb1N0cmluZyhyZXN1bHQpO1xuICAgIH1cblxuICB9O1xuXG4gIHZhciByQW1wID0gLyYvZyxcbiAgICAgIHJMdCA9IC88L2csXG4gICAgICByR3QgPSAvPi9nLFxuICAgICAgckFwb3MgPS9cXCcvZyxcbiAgICAgIHJRdW90ID0gL1xcXCIvZyxcbiAgICAgIGhDaGFycyA9L1smPD5cXFwiXFwnXS87XG5cblxuICBmdW5jdGlvbiBjb2VyY2VUb1N0cmluZyh2YWwpIHtcbiAgICByZXR1cm4gU3RyaW5nKCh2YWwgPT09IG51bGwgfHwgdmFsID09PSB1bmRlZmluZWQpID8gJycgOiB2YWwpO1xuICB9XG5cbiAgZnVuY3Rpb24gaG9nYW5Fc2NhcGUoc3RyKSB7XG4gICAgc3RyID0gY29lcmNlVG9TdHJpbmcoc3RyKTtcbiAgICByZXR1cm4gaENoYXJzLnRlc3Qoc3RyKSA/XG4gICAgICBzdHJcbiAgICAgICAgLnJlcGxhY2UockFtcCwnJmFtcDsnKVxuICAgICAgICAucmVwbGFjZShyTHQsJyZsdDsnKVxuICAgICAgICAucmVwbGFjZShyR3QsJyZndDsnKVxuICAgICAgICAucmVwbGFjZShyQXBvcywnJiMzOTsnKVxuICAgICAgICAucmVwbGFjZShyUXVvdCwgJyZxdW90OycpIDpcbiAgICAgIHN0cjtcbiAgfVxuXG4gIHZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbihhKSB7XG4gICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhKSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbiAgfTtcblxufSkodHlwZW9mIGV4cG9ydHMgIT09ICd1bmRlZmluZWQnID8gZXhwb3J0cyA6IEhvZ2FuKTtcblxuIiwiLyohXG4gKiBqUXVlcnkgSmF2YVNjcmlwdCBMaWJyYXJ5IHYxLjExLjFcbiAqIGh0dHA6Ly9qcXVlcnkuY29tL1xuICpcbiAqIEluY2x1ZGVzIFNpenpsZS5qc1xuICogaHR0cDovL3NpenpsZWpzLmNvbS9cbiAqXG4gKiBDb3B5cmlnaHQgMjAwNSwgMjAxNCBqUXVlcnkgRm91bmRhdGlvbiwgSW5jLiBhbmQgb3RoZXIgY29udHJpYnV0b3JzXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcbiAqIGh0dHA6Ly9qcXVlcnkub3JnL2xpY2Vuc2VcbiAqXG4gKiBEYXRlOiAyMDE0LTA1LTAxVDE3OjQyWlxuICovXG5cbihmdW5jdGlvbiggZ2xvYmFsLCBmYWN0b3J5ICkge1xuXG5cdGlmICggdHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0Ly8gRm9yIENvbW1vbkpTIGFuZCBDb21tb25KUy1saWtlIGVudmlyb25tZW50cyB3aGVyZSBhIHByb3BlciB3aW5kb3cgaXMgcHJlc2VudCxcblx0XHQvLyBleGVjdXRlIHRoZSBmYWN0b3J5IGFuZCBnZXQgalF1ZXJ5XG5cdFx0Ly8gRm9yIGVudmlyb25tZW50cyB0aGF0IGRvIG5vdCBpbmhlcmVudGx5IHBvc3NlcyBhIHdpbmRvdyB3aXRoIGEgZG9jdW1lbnRcblx0XHQvLyAoc3VjaCBhcyBOb2RlLmpzKSwgZXhwb3NlIGEgalF1ZXJ5LW1ha2luZyBmYWN0b3J5IGFzIG1vZHVsZS5leHBvcnRzXG5cdFx0Ly8gVGhpcyBhY2NlbnR1YXRlcyB0aGUgbmVlZCBmb3IgdGhlIGNyZWF0aW9uIG9mIGEgcmVhbCB3aW5kb3dcblx0XHQvLyBlLmcuIHZhciBqUXVlcnkgPSByZXF1aXJlKFwianF1ZXJ5XCIpKHdpbmRvdyk7XG5cdFx0Ly8gU2VlIHRpY2tldCAjMTQ1NDkgZm9yIG1vcmUgaW5mb1xuXHRcdG1vZHVsZS5leHBvcnRzID0gZ2xvYmFsLmRvY3VtZW50ID9cblx0XHRcdGZhY3RvcnkoIGdsb2JhbCwgdHJ1ZSApIDpcblx0XHRcdGZ1bmN0aW9uKCB3ICkge1xuXHRcdFx0XHRpZiAoICF3LmRvY3VtZW50ICkge1xuXHRcdFx0XHRcdHRocm93IG5ldyBFcnJvciggXCJqUXVlcnkgcmVxdWlyZXMgYSB3aW5kb3cgd2l0aCBhIGRvY3VtZW50XCIgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gZmFjdG9yeSggdyApO1xuXHRcdFx0fTtcblx0fSBlbHNlIHtcblx0XHRmYWN0b3J5KCBnbG9iYWwgKTtcblx0fVxuXG4vLyBQYXNzIHRoaXMgaWYgd2luZG93IGlzIG5vdCBkZWZpbmVkIHlldFxufSh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDogdGhpcywgZnVuY3Rpb24oIHdpbmRvdywgbm9HbG9iYWwgKSB7XG5cbi8vIENhbid0IGRvIHRoaXMgYmVjYXVzZSBzZXZlcmFsIGFwcHMgaW5jbHVkaW5nIEFTUC5ORVQgdHJhY2Vcbi8vIHRoZSBzdGFjayB2aWEgYXJndW1lbnRzLmNhbGxlci5jYWxsZWUgYW5kIEZpcmVmb3ggZGllcyBpZlxuLy8geW91IHRyeSB0byB0cmFjZSB0aHJvdWdoIFwidXNlIHN0cmljdFwiIGNhbGwgY2hhaW5zLiAoIzEzMzM1KVxuLy8gU3VwcG9ydDogRmlyZWZveCAxOCtcbi8vXG5cbnZhciBkZWxldGVkSWRzID0gW107XG5cbnZhciBzbGljZSA9IGRlbGV0ZWRJZHMuc2xpY2U7XG5cbnZhciBjb25jYXQgPSBkZWxldGVkSWRzLmNvbmNhdDtcblxudmFyIHB1c2ggPSBkZWxldGVkSWRzLnB1c2g7XG5cbnZhciBpbmRleE9mID0gZGVsZXRlZElkcy5pbmRleE9mO1xuXG52YXIgY2xhc3MydHlwZSA9IHt9O1xuXG52YXIgdG9TdHJpbmcgPSBjbGFzczJ0eXBlLnRvU3RyaW5nO1xuXG52YXIgaGFzT3duID0gY2xhc3MydHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxudmFyIHN1cHBvcnQgPSB7fTtcblxuXG5cbnZhclxuXHR2ZXJzaW9uID0gXCIxLjExLjFcIixcblxuXHQvLyBEZWZpbmUgYSBsb2NhbCBjb3B5IG9mIGpRdWVyeVxuXHRqUXVlcnkgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQgKSB7XG5cdFx0Ly8gVGhlIGpRdWVyeSBvYmplY3QgaXMgYWN0dWFsbHkganVzdCB0aGUgaW5pdCBjb25zdHJ1Y3RvciAnZW5oYW5jZWQnXG5cdFx0Ly8gTmVlZCBpbml0IGlmIGpRdWVyeSBpcyBjYWxsZWQgKGp1c3QgYWxsb3cgZXJyb3IgdG8gYmUgdGhyb3duIGlmIG5vdCBpbmNsdWRlZClcblx0XHRyZXR1cm4gbmV3IGpRdWVyeS5mbi5pbml0KCBzZWxlY3RvciwgY29udGV4dCApO1xuXHR9LFxuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQ8NC4xLCBJRTw5XG5cdC8vIE1ha2Ugc3VyZSB3ZSB0cmltIEJPTSBhbmQgTkJTUFxuXHRydHJpbSA9IC9eW1xcc1xcdUZFRkZcXHhBMF0rfFtcXHNcXHVGRUZGXFx4QTBdKyQvZyxcblxuXHQvLyBNYXRjaGVzIGRhc2hlZCBzdHJpbmcgZm9yIGNhbWVsaXppbmdcblx0cm1zUHJlZml4ID0gL14tbXMtLyxcblx0cmRhc2hBbHBoYSA9IC8tKFtcXGRhLXpdKS9naSxcblxuXHQvLyBVc2VkIGJ5IGpRdWVyeS5jYW1lbENhc2UgYXMgY2FsbGJhY2sgdG8gcmVwbGFjZSgpXG5cdGZjYW1lbENhc2UgPSBmdW5jdGlvbiggYWxsLCBsZXR0ZXIgKSB7XG5cdFx0cmV0dXJuIGxldHRlci50b1VwcGVyQ2FzZSgpO1xuXHR9O1xuXG5qUXVlcnkuZm4gPSBqUXVlcnkucHJvdG90eXBlID0ge1xuXHQvLyBUaGUgY3VycmVudCB2ZXJzaW9uIG9mIGpRdWVyeSBiZWluZyB1c2VkXG5cdGpxdWVyeTogdmVyc2lvbixcblxuXHRjb25zdHJ1Y3RvcjogalF1ZXJ5LFxuXG5cdC8vIFN0YXJ0IHdpdGggYW4gZW1wdHkgc2VsZWN0b3Jcblx0c2VsZWN0b3I6IFwiXCIsXG5cblx0Ly8gVGhlIGRlZmF1bHQgbGVuZ3RoIG9mIGEgalF1ZXJ5IG9iamVjdCBpcyAwXG5cdGxlbmd0aDogMCxcblxuXHR0b0FycmF5OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gc2xpY2UuY2FsbCggdGhpcyApO1xuXHR9LFxuXG5cdC8vIEdldCB0aGUgTnRoIGVsZW1lbnQgaW4gdGhlIG1hdGNoZWQgZWxlbWVudCBzZXQgT1Jcblx0Ly8gR2V0IHRoZSB3aG9sZSBtYXRjaGVkIGVsZW1lbnQgc2V0IGFzIGEgY2xlYW4gYXJyYXlcblx0Z2V0OiBmdW5jdGlvbiggbnVtICkge1xuXHRcdHJldHVybiBudW0gIT0gbnVsbCA/XG5cblx0XHRcdC8vIFJldHVybiBqdXN0IHRoZSBvbmUgZWxlbWVudCBmcm9tIHRoZSBzZXRcblx0XHRcdCggbnVtIDwgMCA/IHRoaXNbIG51bSArIHRoaXMubGVuZ3RoIF0gOiB0aGlzWyBudW0gXSApIDpcblxuXHRcdFx0Ly8gUmV0dXJuIGFsbCB0aGUgZWxlbWVudHMgaW4gYSBjbGVhbiBhcnJheVxuXHRcdFx0c2xpY2UuY2FsbCggdGhpcyApO1xuXHR9LFxuXG5cdC8vIFRha2UgYW4gYXJyYXkgb2YgZWxlbWVudHMgYW5kIHB1c2ggaXQgb250byB0aGUgc3RhY2tcblx0Ly8gKHJldHVybmluZyB0aGUgbmV3IG1hdGNoZWQgZWxlbWVudCBzZXQpXG5cdHB1c2hTdGFjazogZnVuY3Rpb24oIGVsZW1zICkge1xuXG5cdFx0Ly8gQnVpbGQgYSBuZXcgalF1ZXJ5IG1hdGNoZWQgZWxlbWVudCBzZXRcblx0XHR2YXIgcmV0ID0galF1ZXJ5Lm1lcmdlKCB0aGlzLmNvbnN0cnVjdG9yKCksIGVsZW1zICk7XG5cblx0XHQvLyBBZGQgdGhlIG9sZCBvYmplY3Qgb250byB0aGUgc3RhY2sgKGFzIGEgcmVmZXJlbmNlKVxuXHRcdHJldC5wcmV2T2JqZWN0ID0gdGhpcztcblx0XHRyZXQuY29udGV4dCA9IHRoaXMuY29udGV4dDtcblxuXHRcdC8vIFJldHVybiB0aGUgbmV3bHktZm9ybWVkIGVsZW1lbnQgc2V0XG5cdFx0cmV0dXJuIHJldDtcblx0fSxcblxuXHQvLyBFeGVjdXRlIGEgY2FsbGJhY2sgZm9yIGV2ZXJ5IGVsZW1lbnQgaW4gdGhlIG1hdGNoZWQgc2V0LlxuXHQvLyAoWW91IGNhbiBzZWVkIHRoZSBhcmd1bWVudHMgd2l0aCBhbiBhcnJheSBvZiBhcmdzLCBidXQgdGhpcyBpc1xuXHQvLyBvbmx5IHVzZWQgaW50ZXJuYWxseS4pXG5cdGVhY2g6IGZ1bmN0aW9uKCBjYWxsYmFjaywgYXJncyApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmVhY2goIHRoaXMsIGNhbGxiYWNrLCBhcmdzICk7XG5cdH0sXG5cblx0bWFwOiBmdW5jdGlvbiggY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqUXVlcnkubWFwKHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBpICkge1xuXHRcdFx0cmV0dXJuIGNhbGxiYWNrLmNhbGwoIGVsZW0sIGksIGVsZW0gKTtcblx0XHR9KSk7XG5cdH0sXG5cblx0c2xpY2U6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggc2xpY2UuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApICk7XG5cdH0sXG5cblx0Zmlyc3Q6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmVxKCAwICk7XG5cdH0sXG5cblx0bGFzdDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuZXEoIC0xICk7XG5cdH0sXG5cblx0ZXE6IGZ1bmN0aW9uKCBpICkge1xuXHRcdHZhciBsZW4gPSB0aGlzLmxlbmd0aCxcblx0XHRcdGogPSAraSArICggaSA8IDAgPyBsZW4gOiAwICk7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqID49IDAgJiYgaiA8IGxlbiA/IFsgdGhpc1tqXSBdIDogW10gKTtcblx0fSxcblxuXHRlbmQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLnByZXZPYmplY3QgfHwgdGhpcy5jb25zdHJ1Y3RvcihudWxsKTtcblx0fSxcblxuXHQvLyBGb3IgaW50ZXJuYWwgdXNlIG9ubHkuXG5cdC8vIEJlaGF2ZXMgbGlrZSBhbiBBcnJheSdzIG1ldGhvZCwgbm90IGxpa2UgYSBqUXVlcnkgbWV0aG9kLlxuXHRwdXNoOiBwdXNoLFxuXHRzb3J0OiBkZWxldGVkSWRzLnNvcnQsXG5cdHNwbGljZTogZGVsZXRlZElkcy5zcGxpY2Vcbn07XG5cbmpRdWVyeS5leHRlbmQgPSBqUXVlcnkuZm4uZXh0ZW5kID0gZnVuY3Rpb24oKSB7XG5cdHZhciBzcmMsIGNvcHlJc0FycmF5LCBjb3B5LCBuYW1lLCBvcHRpb25zLCBjbG9uZSxcblx0XHR0YXJnZXQgPSBhcmd1bWVudHNbMF0gfHwge30sXG5cdFx0aSA9IDEsXG5cdFx0bGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCxcblx0XHRkZWVwID0gZmFsc2U7XG5cblx0Ly8gSGFuZGxlIGEgZGVlcCBjb3B5IHNpdHVhdGlvblxuXHRpZiAoIHR5cGVvZiB0YXJnZXQgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdGRlZXAgPSB0YXJnZXQ7XG5cblx0XHQvLyBza2lwIHRoZSBib29sZWFuIGFuZCB0aGUgdGFyZ2V0XG5cdFx0dGFyZ2V0ID0gYXJndW1lbnRzWyBpIF0gfHwge307XG5cdFx0aSsrO1xuXHR9XG5cblx0Ly8gSGFuZGxlIGNhc2Ugd2hlbiB0YXJnZXQgaXMgYSBzdHJpbmcgb3Igc29tZXRoaW5nIChwb3NzaWJsZSBpbiBkZWVwIGNvcHkpXG5cdGlmICggdHlwZW9mIHRhcmdldCAhPT0gXCJvYmplY3RcIiAmJiAhalF1ZXJ5LmlzRnVuY3Rpb24odGFyZ2V0KSApIHtcblx0XHR0YXJnZXQgPSB7fTtcblx0fVxuXG5cdC8vIGV4dGVuZCBqUXVlcnkgaXRzZWxmIGlmIG9ubHkgb25lIGFyZ3VtZW50IGlzIHBhc3NlZFxuXHRpZiAoIGkgPT09IGxlbmd0aCApIHtcblx0XHR0YXJnZXQgPSB0aGlzO1xuXHRcdGktLTtcblx0fVxuXG5cdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdC8vIE9ubHkgZGVhbCB3aXRoIG5vbi1udWxsL3VuZGVmaW5lZCB2YWx1ZXNcblx0XHRpZiAoIChvcHRpb25zID0gYXJndW1lbnRzWyBpIF0pICE9IG51bGwgKSB7XG5cdFx0XHQvLyBFeHRlbmQgdGhlIGJhc2Ugb2JqZWN0XG5cdFx0XHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XG5cdFx0XHRcdHNyYyA9IHRhcmdldFsgbmFtZSBdO1xuXHRcdFx0XHRjb3B5ID0gb3B0aW9uc1sgbmFtZSBdO1xuXG5cdFx0XHRcdC8vIFByZXZlbnQgbmV2ZXItZW5kaW5nIGxvb3Bcblx0XHRcdFx0aWYgKCB0YXJnZXQgPT09IGNvcHkgKSB7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZWN1cnNlIGlmIHdlJ3JlIG1lcmdpbmcgcGxhaW4gb2JqZWN0cyBvciBhcnJheXNcblx0XHRcdFx0aWYgKCBkZWVwICYmIGNvcHkgJiYgKCBqUXVlcnkuaXNQbGFpbk9iamVjdChjb3B5KSB8fCAoY29weUlzQXJyYXkgPSBqUXVlcnkuaXNBcnJheShjb3B5KSkgKSApIHtcblx0XHRcdFx0XHRpZiAoIGNvcHlJc0FycmF5ICkge1xuXHRcdFx0XHRcdFx0Y29weUlzQXJyYXkgPSBmYWxzZTtcblx0XHRcdFx0XHRcdGNsb25lID0gc3JjICYmIGpRdWVyeS5pc0FycmF5KHNyYykgPyBzcmMgOiBbXTtcblxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRjbG9uZSA9IHNyYyAmJiBqUXVlcnkuaXNQbGFpbk9iamVjdChzcmMpID8gc3JjIDoge307XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gTmV2ZXIgbW92ZSBvcmlnaW5hbCBvYmplY3RzLCBjbG9uZSB0aGVtXG5cdFx0XHRcdFx0dGFyZ2V0WyBuYW1lIF0gPSBqUXVlcnkuZXh0ZW5kKCBkZWVwLCBjbG9uZSwgY29weSApO1xuXG5cdFx0XHRcdC8vIERvbid0IGJyaW5nIGluIHVuZGVmaW5lZCB2YWx1ZXNcblx0XHRcdFx0fSBlbHNlIGlmICggY29weSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHRhcmdldFsgbmFtZSBdID0gY29weTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgbW9kaWZpZWQgb2JqZWN0XG5cdHJldHVybiB0YXJnZXQ7XG59O1xuXG5qUXVlcnkuZXh0ZW5kKHtcblx0Ly8gVW5pcXVlIGZvciBlYWNoIGNvcHkgb2YgalF1ZXJ5IG9uIHRoZSBwYWdlXG5cdGV4cGFuZG86IFwialF1ZXJ5XCIgKyAoIHZlcnNpb24gKyBNYXRoLnJhbmRvbSgpICkucmVwbGFjZSggL1xcRC9nLCBcIlwiICksXG5cblx0Ly8gQXNzdW1lIGpRdWVyeSBpcyByZWFkeSB3aXRob3V0IHRoZSByZWFkeSBtb2R1bGVcblx0aXNSZWFkeTogdHJ1ZSxcblxuXHRlcnJvcjogZnVuY3Rpb24oIG1zZyApIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoIG1zZyApO1xuXHR9LFxuXG5cdG5vb3A6IGZ1bmN0aW9uKCkge30sXG5cblx0Ly8gU2VlIHRlc3QvdW5pdC9jb3JlLmpzIGZvciBkZXRhaWxzIGNvbmNlcm5pbmcgaXNGdW5jdGlvbi5cblx0Ly8gU2luY2UgdmVyc2lvbiAxLjMsIERPTSBtZXRob2RzIGFuZCBmdW5jdGlvbnMgbGlrZSBhbGVydFxuXHQvLyBhcmVuJ3Qgc3VwcG9ydGVkLiBUaGV5IHJldHVybiBmYWxzZSBvbiBJRSAoIzI5NjgpLlxuXHRpc0Z1bmN0aW9uOiBmdW5jdGlvbiggb2JqICkge1xuXHRcdHJldHVybiBqUXVlcnkudHlwZShvYmopID09PSBcImZ1bmN0aW9uXCI7XG5cdH0sXG5cblx0aXNBcnJheTogQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiggb2JqICkge1xuXHRcdHJldHVybiBqUXVlcnkudHlwZShvYmopID09PSBcImFycmF5XCI7XG5cdH0sXG5cblx0aXNXaW5kb3c6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0LyoganNoaW50IGVxZXFlcTogZmFsc2UgKi9cblx0XHRyZXR1cm4gb2JqICE9IG51bGwgJiYgb2JqID09IG9iai53aW5kb3c7XG5cdH0sXG5cblx0aXNOdW1lcmljOiBmdW5jdGlvbiggb2JqICkge1xuXHRcdC8vIHBhcnNlRmxvYXQgTmFOcyBudW1lcmljLWNhc3QgZmFsc2UgcG9zaXRpdmVzIChudWxsfHRydWV8ZmFsc2V8XCJcIilcblx0XHQvLyAuLi5idXQgbWlzaW50ZXJwcmV0cyBsZWFkaW5nLW51bWJlciBzdHJpbmdzLCBwYXJ0aWN1bGFybHkgaGV4IGxpdGVyYWxzIChcIjB4Li4uXCIpXG5cdFx0Ly8gc3VidHJhY3Rpb24gZm9yY2VzIGluZmluaXRpZXMgdG8gTmFOXG5cdFx0cmV0dXJuICFqUXVlcnkuaXNBcnJheSggb2JqICkgJiYgb2JqIC0gcGFyc2VGbG9hdCggb2JqICkgPj0gMDtcblx0fSxcblxuXHRpc0VtcHR5T2JqZWN0OiBmdW5jdGlvbiggb2JqICkge1xuXHRcdHZhciBuYW1lO1xuXHRcdGZvciAoIG5hbWUgaW4gb2JqICkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSxcblxuXHRpc1BsYWluT2JqZWN0OiBmdW5jdGlvbiggb2JqICkge1xuXHRcdHZhciBrZXk7XG5cblx0XHQvLyBNdXN0IGJlIGFuIE9iamVjdC5cblx0XHQvLyBCZWNhdXNlIG9mIElFLCB3ZSBhbHNvIGhhdmUgdG8gY2hlY2sgdGhlIHByZXNlbmNlIG9mIHRoZSBjb25zdHJ1Y3RvciBwcm9wZXJ0eS5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCBET00gbm9kZXMgYW5kIHdpbmRvdyBvYmplY3RzIGRvbid0IHBhc3MgdGhyb3VnaCwgYXMgd2VsbFxuXHRcdGlmICggIW9iaiB8fCBqUXVlcnkudHlwZShvYmopICE9PSBcIm9iamVjdFwiIHx8IG9iai5ub2RlVHlwZSB8fCBqUXVlcnkuaXNXaW5kb3coIG9iaiApICkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdHRyeSB7XG5cdFx0XHQvLyBOb3Qgb3duIGNvbnN0cnVjdG9yIHByb3BlcnR5IG11c3QgYmUgT2JqZWN0XG5cdFx0XHRpZiAoIG9iai5jb25zdHJ1Y3RvciAmJlxuXHRcdFx0XHQhaGFzT3duLmNhbGwob2JqLCBcImNvbnN0cnVjdG9yXCIpICYmXG5cdFx0XHRcdCFoYXNPd24uY2FsbChvYmouY29uc3RydWN0b3IucHJvdG90eXBlLCBcImlzUHJvdG90eXBlT2ZcIikgKSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHR9IGNhdGNoICggZSApIHtcblx0XHRcdC8vIElFOCw5IFdpbGwgdGhyb3cgZXhjZXB0aW9ucyBvbiBjZXJ0YWluIGhvc3Qgb2JqZWN0cyAjOTg5N1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIFN1cHBvcnQ6IElFPDlcblx0XHQvLyBIYW5kbGUgaXRlcmF0aW9uIG92ZXIgaW5oZXJpdGVkIHByb3BlcnRpZXMgYmVmb3JlIG93biBwcm9wZXJ0aWVzLlxuXHRcdGlmICggc3VwcG9ydC5vd25MYXN0ICkge1xuXHRcdFx0Zm9yICgga2V5IGluIG9iaiApIHtcblx0XHRcdFx0cmV0dXJuIGhhc093bi5jYWxsKCBvYmosIGtleSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIE93biBwcm9wZXJ0aWVzIGFyZSBlbnVtZXJhdGVkIGZpcnN0bHksIHNvIHRvIHNwZWVkIHVwLFxuXHRcdC8vIGlmIGxhc3Qgb25lIGlzIG93biwgdGhlbiBhbGwgcHJvcGVydGllcyBhcmUgb3duLlxuXHRcdGZvciAoIGtleSBpbiBvYmogKSB7fVxuXG5cdFx0cmV0dXJuIGtleSA9PT0gdW5kZWZpbmVkIHx8IGhhc093bi5jYWxsKCBvYmosIGtleSApO1xuXHR9LFxuXG5cdHR5cGU6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0aWYgKCBvYmogPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiBvYmogKyBcIlwiO1xuXHRcdH1cblx0XHRyZXR1cm4gdHlwZW9mIG9iaiA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2Ygb2JqID09PSBcImZ1bmN0aW9uXCIgP1xuXHRcdFx0Y2xhc3MydHlwZVsgdG9TdHJpbmcuY2FsbChvYmopIF0gfHwgXCJvYmplY3RcIiA6XG5cdFx0XHR0eXBlb2Ygb2JqO1xuXHR9LFxuXG5cdC8vIEV2YWx1YXRlcyBhIHNjcmlwdCBpbiBhIGdsb2JhbCBjb250ZXh0XG5cdC8vIFdvcmthcm91bmRzIGJhc2VkIG9uIGZpbmRpbmdzIGJ5IEppbSBEcmlzY29sbFxuXHQvLyBodHRwOi8vd2VibG9ncy5qYXZhLm5ldC9ibG9nL2RyaXNjb2xsL2FyY2hpdmUvMjAwOS8wOS8wOC9ldmFsLWphdmFzY3JpcHQtZ2xvYmFsLWNvbnRleHRcblx0Z2xvYmFsRXZhbDogZnVuY3Rpb24oIGRhdGEgKSB7XG5cdFx0aWYgKCBkYXRhICYmIGpRdWVyeS50cmltKCBkYXRhICkgKSB7XG5cdFx0XHQvLyBXZSB1c2UgZXhlY1NjcmlwdCBvbiBJbnRlcm5ldCBFeHBsb3JlclxuXHRcdFx0Ly8gV2UgdXNlIGFuIGFub255bW91cyBmdW5jdGlvbiBzbyB0aGF0IGNvbnRleHQgaXMgd2luZG93XG5cdFx0XHQvLyByYXRoZXIgdGhhbiBqUXVlcnkgaW4gRmlyZWZveFxuXHRcdFx0KCB3aW5kb3cuZXhlY1NjcmlwdCB8fCBmdW5jdGlvbiggZGF0YSApIHtcblx0XHRcdFx0d2luZG93WyBcImV2YWxcIiBdLmNhbGwoIHdpbmRvdywgZGF0YSApO1xuXHRcdFx0fSApKCBkYXRhICk7XG5cdFx0fVxuXHR9LFxuXG5cdC8vIENvbnZlcnQgZGFzaGVkIHRvIGNhbWVsQ2FzZTsgdXNlZCBieSB0aGUgY3NzIGFuZCBkYXRhIG1vZHVsZXNcblx0Ly8gTWljcm9zb2Z0IGZvcmdvdCB0byBodW1wIHRoZWlyIHZlbmRvciBwcmVmaXggKCM5NTcyKVxuXHRjYW1lbENhc2U6IGZ1bmN0aW9uKCBzdHJpbmcgKSB7XG5cdFx0cmV0dXJuIHN0cmluZy5yZXBsYWNlKCBybXNQcmVmaXgsIFwibXMtXCIgKS5yZXBsYWNlKCByZGFzaEFscGhhLCBmY2FtZWxDYXNlICk7XG5cdH0sXG5cblx0bm9kZU5hbWU6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xuXHRcdHJldHVybiBlbGVtLm5vZGVOYW1lICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuXHR9LFxuXG5cdC8vIGFyZ3MgaXMgZm9yIGludGVybmFsIHVzYWdlIG9ubHlcblx0ZWFjaDogZnVuY3Rpb24oIG9iaiwgY2FsbGJhY2ssIGFyZ3MgKSB7XG5cdFx0dmFyIHZhbHVlLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRsZW5ndGggPSBvYmoubGVuZ3RoLFxuXHRcdFx0aXNBcnJheSA9IGlzQXJyYXlsaWtlKCBvYmogKTtcblxuXHRcdGlmICggYXJncyApIHtcblx0XHRcdGlmICggaXNBcnJheSApIHtcblx0XHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRcdFx0dmFsdWUgPSBjYWxsYmFjay5hcHBseSggb2JqWyBpIF0sIGFyZ3MgKTtcblxuXHRcdFx0XHRcdGlmICggdmFsdWUgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRmb3IgKCBpIGluIG9iaiApIHtcblx0XHRcdFx0XHR2YWx1ZSA9IGNhbGxiYWNrLmFwcGx5KCBvYmpbIGkgXSwgYXJncyApO1xuXG5cdFx0XHRcdFx0aWYgKCB2YWx1ZSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdC8vIEEgc3BlY2lhbCwgZmFzdCwgY2FzZSBmb3IgdGhlIG1vc3QgY29tbW9uIHVzZSBvZiBlYWNoXG5cdFx0fSBlbHNlIHtcblx0XHRcdGlmICggaXNBcnJheSApIHtcblx0XHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRcdFx0dmFsdWUgPSBjYWxsYmFjay5jYWxsKCBvYmpbIGkgXSwgaSwgb2JqWyBpIF0gKTtcblxuXHRcdFx0XHRcdGlmICggdmFsdWUgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRmb3IgKCBpIGluIG9iaiApIHtcblx0XHRcdFx0XHR2YWx1ZSA9IGNhbGxiYWNrLmNhbGwoIG9ialsgaSBdLCBpLCBvYmpbIGkgXSApO1xuXG5cdFx0XHRcdFx0aWYgKCB2YWx1ZSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gb2JqO1xuXHR9LFxuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQ8NC4xLCBJRTw5XG5cdHRyaW06IGZ1bmN0aW9uKCB0ZXh0ICkge1xuXHRcdHJldHVybiB0ZXh0ID09IG51bGwgP1xuXHRcdFx0XCJcIiA6XG5cdFx0XHQoIHRleHQgKyBcIlwiICkucmVwbGFjZSggcnRyaW0sIFwiXCIgKTtcblx0fSxcblxuXHQvLyByZXN1bHRzIGlzIGZvciBpbnRlcm5hbCB1c2FnZSBvbmx5XG5cdG1ha2VBcnJheTogZnVuY3Rpb24oIGFyciwgcmVzdWx0cyApIHtcblx0XHR2YXIgcmV0ID0gcmVzdWx0cyB8fCBbXTtcblxuXHRcdGlmICggYXJyICE9IG51bGwgKSB7XG5cdFx0XHRpZiAoIGlzQXJyYXlsaWtlKCBPYmplY3QoYXJyKSApICkge1xuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIHJldCxcblx0XHRcdFx0XHR0eXBlb2YgYXJyID09PSBcInN0cmluZ1wiID9cblx0XHRcdFx0XHRbIGFyciBdIDogYXJyXG5cdFx0XHRcdCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRwdXNoLmNhbGwoIHJldCwgYXJyICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJldDtcblx0fSxcblxuXHRpbkFycmF5OiBmdW5jdGlvbiggZWxlbSwgYXJyLCBpICkge1xuXHRcdHZhciBsZW47XG5cblx0XHRpZiAoIGFyciApIHtcblx0XHRcdGlmICggaW5kZXhPZiApIHtcblx0XHRcdFx0cmV0dXJuIGluZGV4T2YuY2FsbCggYXJyLCBlbGVtLCBpICk7XG5cdFx0XHR9XG5cblx0XHRcdGxlbiA9IGFyci5sZW5ndGg7XG5cdFx0XHRpID0gaSA/IGkgPCAwID8gTWF0aC5tYXgoIDAsIGxlbiArIGkgKSA6IGkgOiAwO1xuXG5cdFx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0Ly8gU2tpcCBhY2Nlc3NpbmcgaW4gc3BhcnNlIGFycmF5c1xuXHRcdFx0XHRpZiAoIGkgaW4gYXJyICYmIGFyclsgaSBdID09PSBlbGVtICkge1xuXHRcdFx0XHRcdHJldHVybiBpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIC0xO1xuXHR9LFxuXG5cdG1lcmdlOiBmdW5jdGlvbiggZmlyc3QsIHNlY29uZCApIHtcblx0XHR2YXIgbGVuID0gK3NlY29uZC5sZW5ndGgsXG5cdFx0XHRqID0gMCxcblx0XHRcdGkgPSBmaXJzdC5sZW5ndGg7XG5cblx0XHR3aGlsZSAoIGogPCBsZW4gKSB7XG5cdFx0XHRmaXJzdFsgaSsrIF0gPSBzZWNvbmRbIGorKyBdO1xuXHRcdH1cblxuXHRcdC8vIFN1cHBvcnQ6IElFPDlcblx0XHQvLyBXb3JrYXJvdW5kIGNhc3Rpbmcgb2YgLmxlbmd0aCB0byBOYU4gb24gb3RoZXJ3aXNlIGFycmF5bGlrZSBvYmplY3RzIChlLmcuLCBOb2RlTGlzdHMpXG5cdFx0aWYgKCBsZW4gIT09IGxlbiApIHtcblx0XHRcdHdoaWxlICggc2Vjb25kW2pdICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdGZpcnN0WyBpKysgXSA9IHNlY29uZFsgaisrIF07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Zmlyc3QubGVuZ3RoID0gaTtcblxuXHRcdHJldHVybiBmaXJzdDtcblx0fSxcblxuXHRncmVwOiBmdW5jdGlvbiggZWxlbXMsIGNhbGxiYWNrLCBpbnZlcnQgKSB7XG5cdFx0dmFyIGNhbGxiYWNrSW52ZXJzZSxcblx0XHRcdG1hdGNoZXMgPSBbXSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0bGVuZ3RoID0gZWxlbXMubGVuZ3RoLFxuXHRcdFx0Y2FsbGJhY2tFeHBlY3QgPSAhaW52ZXJ0O1xuXG5cdFx0Ly8gR28gdGhyb3VnaCB0aGUgYXJyYXksIG9ubHkgc2F2aW5nIHRoZSBpdGVtc1xuXHRcdC8vIHRoYXQgcGFzcyB0aGUgdmFsaWRhdG9yIGZ1bmN0aW9uXG5cdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRjYWxsYmFja0ludmVyc2UgPSAhY2FsbGJhY2soIGVsZW1zWyBpIF0sIGkgKTtcblx0XHRcdGlmICggY2FsbGJhY2tJbnZlcnNlICE9PSBjYWxsYmFja0V4cGVjdCApIHtcblx0XHRcdFx0bWF0Y2hlcy5wdXNoKCBlbGVtc1sgaSBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG1hdGNoZXM7XG5cdH0sXG5cblx0Ly8gYXJnIGlzIGZvciBpbnRlcm5hbCB1c2FnZSBvbmx5XG5cdG1hcDogZnVuY3Rpb24oIGVsZW1zLCBjYWxsYmFjaywgYXJnICkge1xuXHRcdHZhciB2YWx1ZSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0bGVuZ3RoID0gZWxlbXMubGVuZ3RoLFxuXHRcdFx0aXNBcnJheSA9IGlzQXJyYXlsaWtlKCBlbGVtcyApLFxuXHRcdFx0cmV0ID0gW107XG5cblx0XHQvLyBHbyB0aHJvdWdoIHRoZSBhcnJheSwgdHJhbnNsYXRpbmcgZWFjaCBvZiB0aGUgaXRlbXMgdG8gdGhlaXIgbmV3IHZhbHVlc1xuXHRcdGlmICggaXNBcnJheSApIHtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdFx0XHR2YWx1ZSA9IGNhbGxiYWNrKCBlbGVtc1sgaSBdLCBpLCBhcmcgKTtcblxuXHRcdFx0XHRpZiAoIHZhbHVlICE9IG51bGwgKSB7XG5cdFx0XHRcdFx0cmV0LnB1c2goIHZhbHVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdC8vIEdvIHRocm91Z2ggZXZlcnkga2V5IG9uIHRoZSBvYmplY3QsXG5cdFx0fSBlbHNlIHtcblx0XHRcdGZvciAoIGkgaW4gZWxlbXMgKSB7XG5cdFx0XHRcdHZhbHVlID0gY2FsbGJhY2soIGVsZW1zWyBpIF0sIGksIGFyZyApO1xuXG5cdFx0XHRcdGlmICggdmFsdWUgIT0gbnVsbCApIHtcblx0XHRcdFx0XHRyZXQucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEZsYXR0ZW4gYW55IG5lc3RlZCBhcnJheXNcblx0XHRyZXR1cm4gY29uY2F0LmFwcGx5KCBbXSwgcmV0ICk7XG5cdH0sXG5cblx0Ly8gQSBnbG9iYWwgR1VJRCBjb3VudGVyIGZvciBvYmplY3RzXG5cdGd1aWQ6IDEsXG5cblx0Ly8gQmluZCBhIGZ1bmN0aW9uIHRvIGEgY29udGV4dCwgb3B0aW9uYWxseSBwYXJ0aWFsbHkgYXBwbHlpbmcgYW55XG5cdC8vIGFyZ3VtZW50cy5cblx0cHJveHk6IGZ1bmN0aW9uKCBmbiwgY29udGV4dCApIHtcblx0XHR2YXIgYXJncywgcHJveHksIHRtcDtcblxuXHRcdGlmICggdHlwZW9mIGNvbnRleHQgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHR0bXAgPSBmblsgY29udGV4dCBdO1xuXHRcdFx0Y29udGV4dCA9IGZuO1xuXHRcdFx0Zm4gPSB0bXA7XG5cdFx0fVxuXG5cdFx0Ly8gUXVpY2sgY2hlY2sgdG8gZGV0ZXJtaW5lIGlmIHRhcmdldCBpcyBjYWxsYWJsZSwgaW4gdGhlIHNwZWNcblx0XHQvLyB0aGlzIHRocm93cyBhIFR5cGVFcnJvciwgYnV0IHdlIHdpbGwganVzdCByZXR1cm4gdW5kZWZpbmVkLlxuXHRcdGlmICggIWpRdWVyeS5pc0Z1bmN0aW9uKCBmbiApICkge1xuXHRcdFx0cmV0dXJuIHVuZGVmaW5lZDtcblx0XHR9XG5cblx0XHQvLyBTaW11bGF0ZWQgYmluZFxuXHRcdGFyZ3MgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMsIDIgKTtcblx0XHRwcm94eSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIGZuLmFwcGx5KCBjb250ZXh0IHx8IHRoaXMsIGFyZ3MuY29uY2F0KCBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSApICk7XG5cdFx0fTtcblxuXHRcdC8vIFNldCB0aGUgZ3VpZCBvZiB1bmlxdWUgaGFuZGxlciB0byB0aGUgc2FtZSBvZiBvcmlnaW5hbCBoYW5kbGVyLCBzbyBpdCBjYW4gYmUgcmVtb3ZlZFxuXHRcdHByb3h5Lmd1aWQgPSBmbi5ndWlkID0gZm4uZ3VpZCB8fCBqUXVlcnkuZ3VpZCsrO1xuXG5cdFx0cmV0dXJuIHByb3h5O1xuXHR9LFxuXG5cdG5vdzogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuICsoIG5ldyBEYXRlKCkgKTtcblx0fSxcblxuXHQvLyBqUXVlcnkuc3VwcG9ydCBpcyBub3QgdXNlZCBpbiBDb3JlIGJ1dCBvdGhlciBwcm9qZWN0cyBhdHRhY2ggdGhlaXJcblx0Ly8gcHJvcGVydGllcyB0byBpdCBzbyBpdCBuZWVkcyB0byBleGlzdC5cblx0c3VwcG9ydDogc3VwcG9ydFxufSk7XG5cbi8vIFBvcHVsYXRlIHRoZSBjbGFzczJ0eXBlIG1hcFxualF1ZXJ5LmVhY2goXCJCb29sZWFuIE51bWJlciBTdHJpbmcgRnVuY3Rpb24gQXJyYXkgRGF0ZSBSZWdFeHAgT2JqZWN0IEVycm9yXCIuc3BsaXQoXCIgXCIpLCBmdW5jdGlvbihpLCBuYW1lKSB7XG5cdGNsYXNzMnR5cGVbIFwiW29iamVjdCBcIiArIG5hbWUgKyBcIl1cIiBdID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xufSk7XG5cbmZ1bmN0aW9uIGlzQXJyYXlsaWtlKCBvYmogKSB7XG5cdHZhciBsZW5ndGggPSBvYmoubGVuZ3RoLFxuXHRcdHR5cGUgPSBqUXVlcnkudHlwZSggb2JqICk7XG5cblx0aWYgKCB0eXBlID09PSBcImZ1bmN0aW9uXCIgfHwgalF1ZXJ5LmlzV2luZG93KCBvYmogKSApIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRpZiAoIG9iai5ub2RlVHlwZSA9PT0gMSAmJiBsZW5ndGggKSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblxuXHRyZXR1cm4gdHlwZSA9PT0gXCJhcnJheVwiIHx8IGxlbmd0aCA9PT0gMCB8fFxuXHRcdHR5cGVvZiBsZW5ndGggPT09IFwibnVtYmVyXCIgJiYgbGVuZ3RoID4gMCAmJiAoIGxlbmd0aCAtIDEgKSBpbiBvYmo7XG59XG52YXIgU2l6emxlID1cbi8qIVxuICogU2l6emxlIENTUyBTZWxlY3RvciBFbmdpbmUgdjEuMTAuMTlcbiAqIGh0dHA6Ly9zaXp6bGVqcy5jb20vXG4gKlxuICogQ29weXJpZ2h0IDIwMTMgalF1ZXJ5IEZvdW5kYXRpb24sIEluYy4gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXG4gKiBodHRwOi8vanF1ZXJ5Lm9yZy9saWNlbnNlXG4gKlxuICogRGF0ZTogMjAxNC0wNC0xOFxuICovXG4oZnVuY3Rpb24oIHdpbmRvdyApIHtcblxudmFyIGksXG5cdHN1cHBvcnQsXG5cdEV4cHIsXG5cdGdldFRleHQsXG5cdGlzWE1MLFxuXHR0b2tlbml6ZSxcblx0Y29tcGlsZSxcblx0c2VsZWN0LFxuXHRvdXRlcm1vc3RDb250ZXh0LFxuXHRzb3J0SW5wdXQsXG5cdGhhc0R1cGxpY2F0ZSxcblxuXHQvLyBMb2NhbCBkb2N1bWVudCB2YXJzXG5cdHNldERvY3VtZW50LFxuXHRkb2N1bWVudCxcblx0ZG9jRWxlbSxcblx0ZG9jdW1lbnRJc0hUTUwsXG5cdHJidWdneVFTQSxcblx0cmJ1Z2d5TWF0Y2hlcyxcblx0bWF0Y2hlcyxcblx0Y29udGFpbnMsXG5cblx0Ly8gSW5zdGFuY2Utc3BlY2lmaWMgZGF0YVxuXHRleHBhbmRvID0gXCJzaXp6bGVcIiArIC0obmV3IERhdGUoKSksXG5cdHByZWZlcnJlZERvYyA9IHdpbmRvdy5kb2N1bWVudCxcblx0ZGlycnVucyA9IDAsXG5cdGRvbmUgPSAwLFxuXHRjbGFzc0NhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0dG9rZW5DYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdGNvbXBpbGVyQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHRzb3J0T3JkZXIgPSBmdW5jdGlvbiggYSwgYiApIHtcblx0XHRpZiAoIGEgPT09IGIgKSB7XG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdH1cblx0XHRyZXR1cm4gMDtcblx0fSxcblxuXHQvLyBHZW5lcmFsLXB1cnBvc2UgY29uc3RhbnRzXG5cdHN0cnVuZGVmaW5lZCA9IHR5cGVvZiB1bmRlZmluZWQsXG5cdE1BWF9ORUdBVElWRSA9IDEgPDwgMzEsXG5cblx0Ly8gSW5zdGFuY2UgbWV0aG9kc1xuXHRoYXNPd24gPSAoe30pLmhhc093blByb3BlcnR5LFxuXHRhcnIgPSBbXSxcblx0cG9wID0gYXJyLnBvcCxcblx0cHVzaF9uYXRpdmUgPSBhcnIucHVzaCxcblx0cHVzaCA9IGFyci5wdXNoLFxuXHRzbGljZSA9IGFyci5zbGljZSxcblx0Ly8gVXNlIGEgc3RyaXBwZWQtZG93biBpbmRleE9mIGlmIHdlIGNhbid0IHVzZSBhIG5hdGl2ZSBvbmVcblx0aW5kZXhPZiA9IGFyci5pbmRleE9mIHx8IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHZhciBpID0gMCxcblx0XHRcdGxlbiA9IHRoaXMubGVuZ3RoO1xuXHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0aWYgKCB0aGlzW2ldID09PSBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gaTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIC0xO1xuXHR9LFxuXG5cdGJvb2xlYW5zID0gXCJjaGVja2VkfHNlbGVjdGVkfGFzeW5jfGF1dG9mb2N1c3xhdXRvcGxheXxjb250cm9sc3xkZWZlcnxkaXNhYmxlZHxoaWRkZW58aXNtYXB8bG9vcHxtdWx0aXBsZXxvcGVufHJlYWRvbmx5fHJlcXVpcmVkfHNjb3BlZFwiLFxuXG5cdC8vIFJlZ3VsYXIgZXhwcmVzc2lvbnNcblxuXHQvLyBXaGl0ZXNwYWNlIGNoYXJhY3RlcnMgaHR0cDovL3d3dy53My5vcmcvVFIvY3NzMy1zZWxlY3RvcnMvI3doaXRlc3BhY2Vcblx0d2hpdGVzcGFjZSA9IFwiW1xcXFx4MjBcXFxcdFxcXFxyXFxcXG5cXFxcZl1cIixcblx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvY3NzMy1zeW50YXgvI2NoYXJhY3RlcnNcblx0Y2hhcmFjdGVyRW5jb2RpbmcgPSBcIig/OlxcXFxcXFxcLnxbXFxcXHctXXxbXlxcXFx4MDAtXFxcXHhhMF0pK1wiLFxuXG5cdC8vIExvb3NlbHkgbW9kZWxlZCBvbiBDU1MgaWRlbnRpZmllciBjaGFyYWN0ZXJzXG5cdC8vIEFuIHVucXVvdGVkIHZhbHVlIHNob3VsZCBiZSBhIENTUyBpZGVudGlmaWVyIGh0dHA6Ly93d3cudzMub3JnL1RSL2NzczMtc2VsZWN0b3JzLyNhdHRyaWJ1dGUtc2VsZWN0b3JzXG5cdC8vIFByb3BlciBzeW50YXg6IGh0dHA6Ly93d3cudzMub3JnL1RSL0NTUzIxL3N5bmRhdGEuaHRtbCN2YWx1ZS1kZWYtaWRlbnRpZmllclxuXHRpZGVudGlmaWVyID0gY2hhcmFjdGVyRW5jb2RpbmcucmVwbGFjZSggXCJ3XCIsIFwidyNcIiApLFxuXG5cdC8vIEF0dHJpYnV0ZSBzZWxlY3RvcnM6IGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jYXR0cmlidXRlLXNlbGVjdG9yc1xuXHRhdHRyaWJ1dGVzID0gXCJcXFxcW1wiICsgd2hpdGVzcGFjZSArIFwiKihcIiArIGNoYXJhY3RlckVuY29kaW5nICsgXCIpKD86XCIgKyB3aGl0ZXNwYWNlICtcblx0XHQvLyBPcGVyYXRvciAoY2FwdHVyZSAyKVxuXHRcdFwiKihbKl4kfCF+XT89KVwiICsgd2hpdGVzcGFjZSArXG5cdFx0Ly8gXCJBdHRyaWJ1dGUgdmFsdWVzIG11c3QgYmUgQ1NTIGlkZW50aWZpZXJzIFtjYXB0dXJlIDVdIG9yIHN0cmluZ3MgW2NhcHR1cmUgMyBvciBjYXB0dXJlIDRdXCJcblx0XHRcIiooPzonKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcJ10pKiknfFxcXCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFxcXFwiXSkqKVxcXCJ8KFwiICsgaWRlbnRpZmllciArIFwiKSl8KVwiICsgd2hpdGVzcGFjZSArXG5cdFx0XCIqXFxcXF1cIixcblxuXHRwc2V1ZG9zID0gXCI6KFwiICsgY2hhcmFjdGVyRW5jb2RpbmcgKyBcIikoPzpcXFxcKChcIiArXG5cdFx0Ly8gVG8gcmVkdWNlIHRoZSBudW1iZXIgb2Ygc2VsZWN0b3JzIG5lZWRpbmcgdG9rZW5pemUgaW4gdGhlIHByZUZpbHRlciwgcHJlZmVyIGFyZ3VtZW50czpcblx0XHQvLyAxLiBxdW90ZWQgKGNhcHR1cmUgMzsgY2FwdHVyZSA0IG9yIGNhcHR1cmUgNSlcblx0XHRcIignKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcJ10pKiknfFxcXCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFxcXFwiXSkqKVxcXCIpfFwiICtcblx0XHQvLyAyLiBzaW1wbGUgKGNhcHR1cmUgNilcblx0XHRcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXCgpW1xcXFxdXXxcIiArIGF0dHJpYnV0ZXMgKyBcIikqKXxcIiArXG5cdFx0Ly8gMy4gYW55dGhpbmcgZWxzZSAoY2FwdHVyZSAyKVxuXHRcdFwiLipcIiArXG5cdFx0XCIpXFxcXCl8KVwiLFxuXG5cdC8vIExlYWRpbmcgYW5kIG5vbi1lc2NhcGVkIHRyYWlsaW5nIHdoaXRlc3BhY2UsIGNhcHR1cmluZyBzb21lIG5vbi13aGl0ZXNwYWNlIGNoYXJhY3RlcnMgcHJlY2VkaW5nIHRoZSBsYXR0ZXJcblx0cnRyaW0gPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIit8KCg/Ol58W15cXFxcXFxcXF0pKD86XFxcXFxcXFwuKSopXCIgKyB3aGl0ZXNwYWNlICsgXCIrJFwiLCBcImdcIiApLFxuXG5cdHJjb21tYSA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiKixcIiArIHdoaXRlc3BhY2UgKyBcIipcIiApLFxuXHRyY29tYmluYXRvcnMgPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIiooWz4rfl18XCIgKyB3aGl0ZXNwYWNlICsgXCIpXCIgKyB3aGl0ZXNwYWNlICsgXCIqXCIgKSxcblxuXHRyYXR0cmlidXRlUXVvdGVzID0gbmV3IFJlZ0V4cCggXCI9XCIgKyB3aGl0ZXNwYWNlICsgXCIqKFteXFxcXF0nXFxcIl0qPylcIiArIHdoaXRlc3BhY2UgKyBcIipcXFxcXVwiLCBcImdcIiApLFxuXG5cdHJwc2V1ZG8gPSBuZXcgUmVnRXhwKCBwc2V1ZG9zICksXG5cdHJpZGVudGlmaWVyID0gbmV3IFJlZ0V4cCggXCJeXCIgKyBpZGVudGlmaWVyICsgXCIkXCIgKSxcblxuXHRtYXRjaEV4cHIgPSB7XG5cdFx0XCJJRFwiOiBuZXcgUmVnRXhwKCBcIl4jKFwiICsgY2hhcmFjdGVyRW5jb2RpbmcgKyBcIilcIiApLFxuXHRcdFwiQ0xBU1NcIjogbmV3IFJlZ0V4cCggXCJeXFxcXC4oXCIgKyBjaGFyYWN0ZXJFbmNvZGluZyArIFwiKVwiICksXG5cdFx0XCJUQUdcIjogbmV3IFJlZ0V4cCggXCJeKFwiICsgY2hhcmFjdGVyRW5jb2RpbmcucmVwbGFjZSggXCJ3XCIsIFwidypcIiApICsgXCIpXCIgKSxcblx0XHRcIkFUVFJcIjogbmV3IFJlZ0V4cCggXCJeXCIgKyBhdHRyaWJ1dGVzICksXG5cdFx0XCJQU0VVRE9cIjogbmV3IFJlZ0V4cCggXCJeXCIgKyBwc2V1ZG9zICksXG5cdFx0XCJDSElMRFwiOiBuZXcgUmVnRXhwKCBcIl46KG9ubHl8Zmlyc3R8bGFzdHxudGh8bnRoLWxhc3QpLShjaGlsZHxvZi10eXBlKSg/OlxcXFwoXCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcdFwiKihldmVufG9kZHwoKFsrLV18KShcXFxcZCopbnwpXCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86KFsrLV18KVwiICsgd2hpdGVzcGFjZSArXG5cdFx0XHRcIiooXFxcXGQrKXwpKVwiICsgd2hpdGVzcGFjZSArIFwiKlxcXFwpfClcIiwgXCJpXCIgKSxcblx0XHRcImJvb2xcIjogbmV3IFJlZ0V4cCggXCJeKD86XCIgKyBib29sZWFucyArIFwiKSRcIiwgXCJpXCIgKSxcblx0XHQvLyBGb3IgdXNlIGluIGxpYnJhcmllcyBpbXBsZW1lbnRpbmcgLmlzKClcblx0XHQvLyBXZSB1c2UgdGhpcyBmb3IgUE9TIG1hdGNoaW5nIGluIGBzZWxlY3RgXG5cdFx0XCJuZWVkc0NvbnRleHRcIjogbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIqWz4rfl18OihldmVufG9kZHxlcXxndHxsdHxudGh8Zmlyc3R8bGFzdCkoPzpcXFxcKFwiICtcblx0XHRcdHdoaXRlc3BhY2UgKyBcIiooKD86LVxcXFxkKT9cXFxcZCopXCIgKyB3aGl0ZXNwYWNlICsgXCIqXFxcXCl8KSg/PVteLV18JClcIiwgXCJpXCIgKVxuXHR9LFxuXG5cdHJpbnB1dHMgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b24pJC9pLFxuXHRyaGVhZGVyID0gL15oXFxkJC9pLFxuXG5cdHJuYXRpdmUgPSAvXltee10rXFx7XFxzKlxcW25hdGl2ZSBcXHcvLFxuXG5cdC8vIEVhc2lseS1wYXJzZWFibGUvcmV0cmlldmFibGUgSUQgb3IgVEFHIG9yIENMQVNTIHNlbGVjdG9yc1xuXHRycXVpY2tFeHByID0gL14oPzojKFtcXHctXSspfChcXHcrKXxcXC4oW1xcdy1dKykpJC8sXG5cblx0cnNpYmxpbmcgPSAvWyt+XS8sXG5cdHJlc2NhcGUgPSAvJ3xcXFxcL2csXG5cblx0Ly8gQ1NTIGVzY2FwZXMgaHR0cDovL3d3dy53My5vcmcvVFIvQ1NTMjEvc3luZGF0YS5odG1sI2VzY2FwZWQtY2hhcmFjdGVyc1xuXHRydW5lc2NhcGUgPSBuZXcgUmVnRXhwKCBcIlxcXFxcXFxcKFtcXFxcZGEtZl17MSw2fVwiICsgd2hpdGVzcGFjZSArIFwiP3woXCIgKyB3aGl0ZXNwYWNlICsgXCIpfC4pXCIsIFwiaWdcIiApLFxuXHRmdW5lc2NhcGUgPSBmdW5jdGlvbiggXywgZXNjYXBlZCwgZXNjYXBlZFdoaXRlc3BhY2UgKSB7XG5cdFx0dmFyIGhpZ2ggPSBcIjB4XCIgKyBlc2NhcGVkIC0gMHgxMDAwMDtcblx0XHQvLyBOYU4gbWVhbnMgbm9uLWNvZGVwb2ludFxuXHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3g8MjRcblx0XHQvLyBXb3JrYXJvdW5kIGVycm9uZW91cyBudW1lcmljIGludGVycHJldGF0aW9uIG9mICtcIjB4XCJcblx0XHRyZXR1cm4gaGlnaCAhPT0gaGlnaCB8fCBlc2NhcGVkV2hpdGVzcGFjZSA/XG5cdFx0XHRlc2NhcGVkIDpcblx0XHRcdGhpZ2ggPCAwID9cblx0XHRcdFx0Ly8gQk1QIGNvZGVwb2ludFxuXHRcdFx0XHRTdHJpbmcuZnJvbUNoYXJDb2RlKCBoaWdoICsgMHgxMDAwMCApIDpcblx0XHRcdFx0Ly8gU3VwcGxlbWVudGFsIFBsYW5lIGNvZGVwb2ludCAoc3Vycm9nYXRlIHBhaXIpXG5cdFx0XHRcdFN0cmluZy5mcm9tQ2hhckNvZGUoIGhpZ2ggPj4gMTAgfCAweEQ4MDAsIGhpZ2ggJiAweDNGRiB8IDB4REMwMCApO1xuXHR9O1xuXG4vLyBPcHRpbWl6ZSBmb3IgcHVzaC5hcHBseSggXywgTm9kZUxpc3QgKVxudHJ5IHtcblx0cHVzaC5hcHBseShcblx0XHQoYXJyID0gc2xpY2UuY2FsbCggcHJlZmVycmVkRG9jLmNoaWxkTm9kZXMgKSksXG5cdFx0cHJlZmVycmVkRG9jLmNoaWxkTm9kZXNcblx0KTtcblx0Ly8gU3VwcG9ydDogQW5kcm9pZDw0LjBcblx0Ly8gRGV0ZWN0IHNpbGVudGx5IGZhaWxpbmcgcHVzaC5hcHBseVxuXHRhcnJbIHByZWZlcnJlZERvYy5jaGlsZE5vZGVzLmxlbmd0aCBdLm5vZGVUeXBlO1xufSBjYXRjaCAoIGUgKSB7XG5cdHB1c2ggPSB7IGFwcGx5OiBhcnIubGVuZ3RoID9cblxuXHRcdC8vIExldmVyYWdlIHNsaWNlIGlmIHBvc3NpYmxlXG5cdFx0ZnVuY3Rpb24oIHRhcmdldCwgZWxzICkge1xuXHRcdFx0cHVzaF9uYXRpdmUuYXBwbHkoIHRhcmdldCwgc2xpY2UuY2FsbChlbHMpICk7XG5cdFx0fSA6XG5cblx0XHQvLyBTdXBwb3J0OiBJRTw5XG5cdFx0Ly8gT3RoZXJ3aXNlIGFwcGVuZCBkaXJlY3RseVxuXHRcdGZ1bmN0aW9uKCB0YXJnZXQsIGVscyApIHtcblx0XHRcdHZhciBqID0gdGFyZ2V0Lmxlbmd0aCxcblx0XHRcdFx0aSA9IDA7XG5cdFx0XHQvLyBDYW4ndCB0cnVzdCBOb2RlTGlzdC5sZW5ndGhcblx0XHRcdHdoaWxlICggKHRhcmdldFtqKytdID0gZWxzW2krK10pICkge31cblx0XHRcdHRhcmdldC5sZW5ndGggPSBqIC0gMTtcblx0XHR9XG5cdH07XG59XG5cbmZ1bmN0aW9uIFNpenpsZSggc2VsZWN0b3IsIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKSB7XG5cdHZhciBtYXRjaCwgZWxlbSwgbSwgbm9kZVR5cGUsXG5cdFx0Ly8gUVNBIHZhcnNcblx0XHRpLCBncm91cHMsIG9sZCwgbmlkLCBuZXdDb250ZXh0LCBuZXdTZWxlY3RvcjtcblxuXHRpZiAoICggY29udGV4dCA/IGNvbnRleHQub3duZXJEb2N1bWVudCB8fCBjb250ZXh0IDogcHJlZmVycmVkRG9jICkgIT09IGRvY3VtZW50ICkge1xuXHRcdHNldERvY3VtZW50KCBjb250ZXh0ICk7XG5cdH1cblxuXHRjb250ZXh0ID0gY29udGV4dCB8fCBkb2N1bWVudDtcblx0cmVzdWx0cyA9IHJlc3VsdHMgfHwgW107XG5cblx0aWYgKCAhc2VsZWN0b3IgfHwgdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiByZXN1bHRzO1xuXHR9XG5cblx0aWYgKCAobm9kZVR5cGUgPSBjb250ZXh0Lm5vZGVUeXBlKSAhPT0gMSAmJiBub2RlVHlwZSAhPT0gOSApIHtcblx0XHRyZXR1cm4gW107XG5cdH1cblxuXHRpZiAoIGRvY3VtZW50SXNIVE1MICYmICFzZWVkICkge1xuXG5cdFx0Ly8gU2hvcnRjdXRzXG5cdFx0aWYgKCAobWF0Y2ggPSBycXVpY2tFeHByLmV4ZWMoIHNlbGVjdG9yICkpICkge1xuXHRcdFx0Ly8gU3BlZWQtdXA6IFNpenpsZShcIiNJRFwiKVxuXHRcdFx0aWYgKCAobSA9IG1hdGNoWzFdKSApIHtcblx0XHRcdFx0aWYgKCBub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0XHRlbGVtID0gY29udGV4dC5nZXRFbGVtZW50QnlJZCggbSApO1xuXHRcdFx0XHRcdC8vIENoZWNrIHBhcmVudE5vZGUgdG8gY2F0Y2ggd2hlbiBCbGFja2JlcnJ5IDQuNiByZXR1cm5zXG5cdFx0XHRcdFx0Ly8gbm9kZXMgdGhhdCBhcmUgbm8gbG9uZ2VyIGluIHRoZSBkb2N1bWVudCAoalF1ZXJ5ICM2OTYzKVxuXHRcdFx0XHRcdGlmICggZWxlbSAmJiBlbGVtLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdFx0XHQvLyBIYW5kbGUgdGhlIGNhc2Ugd2hlcmUgSUUsIE9wZXJhLCBhbmQgV2Via2l0IHJldHVybiBpdGVtc1xuXHRcdFx0XHRcdFx0Ly8gYnkgbmFtZSBpbnN0ZWFkIG9mIElEXG5cdFx0XHRcdFx0XHRpZiAoIGVsZW0uaWQgPT09IG0gKSB7XG5cdFx0XHRcdFx0XHRcdHJlc3VsdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdC8vIENvbnRleHQgaXMgbm90IGEgZG9jdW1lbnRcblx0XHRcdFx0XHRpZiAoIGNvbnRleHQub3duZXJEb2N1bWVudCAmJiAoZWxlbSA9IGNvbnRleHQub3duZXJEb2N1bWVudC5nZXRFbGVtZW50QnlJZCggbSApKSAmJlxuXHRcdFx0XHRcdFx0Y29udGFpbnMoIGNvbnRleHQsIGVsZW0gKSAmJiBlbGVtLmlkID09PSBtICkge1xuXHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0Ly8gU3BlZWQtdXA6IFNpenpsZShcIlRBR1wiKVxuXHRcdFx0fSBlbHNlIGlmICggbWF0Y2hbMl0gKSB7XG5cdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHNlbGVjdG9yICkgKTtcblx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cblx0XHRcdC8vIFNwZWVkLXVwOiBTaXp6bGUoXCIuQ0xBU1NcIilcblx0XHRcdH0gZWxzZSBpZiAoIChtID0gbWF0Y2hbM10pICYmIHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAmJiBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgKSB7XG5cdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSggbSApICk7XG5cdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFFTQSBwYXRoXG5cdFx0aWYgKCBzdXBwb3J0LnFzYSAmJiAoIXJidWdneVFTQSB8fCAhcmJ1Z2d5UVNBLnRlc3QoIHNlbGVjdG9yICkpICkge1xuXHRcdFx0bmlkID0gb2xkID0gZXhwYW5kbztcblx0XHRcdG5ld0NvbnRleHQgPSBjb250ZXh0O1xuXHRcdFx0bmV3U2VsZWN0b3IgPSBub2RlVHlwZSA9PT0gOSAmJiBzZWxlY3RvcjtcblxuXHRcdFx0Ly8gcVNBIHdvcmtzIHN0cmFuZ2VseSBvbiBFbGVtZW50LXJvb3RlZCBxdWVyaWVzXG5cdFx0XHQvLyBXZSBjYW4gd29yayBhcm91bmQgdGhpcyBieSBzcGVjaWZ5aW5nIGFuIGV4dHJhIElEIG9uIHRoZSByb290XG5cdFx0XHQvLyBhbmQgd29ya2luZyB1cCBmcm9tIHRoZXJlIChUaGFua3MgdG8gQW5kcmV3IER1cG9udCBmb3IgdGhlIHRlY2huaXF1ZSlcblx0XHRcdC8vIElFIDggZG9lc24ndCB3b3JrIG9uIG9iamVjdCBlbGVtZW50c1xuXHRcdFx0aWYgKCBub2RlVHlwZSA9PT0gMSAmJiBjb250ZXh0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgIT09IFwib2JqZWN0XCIgKSB7XG5cdFx0XHRcdGdyb3VwcyA9IHRva2VuaXplKCBzZWxlY3RvciApO1xuXG5cdFx0XHRcdGlmICggKG9sZCA9IGNvbnRleHQuZ2V0QXR0cmlidXRlKFwiaWRcIikpICkge1xuXHRcdFx0XHRcdG5pZCA9IG9sZC5yZXBsYWNlKCByZXNjYXBlLCBcIlxcXFwkJlwiICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Y29udGV4dC5zZXRBdHRyaWJ1dGUoIFwiaWRcIiwgbmlkICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0bmlkID0gXCJbaWQ9J1wiICsgbmlkICsgXCInXSBcIjtcblxuXHRcdFx0XHRpID0gZ3JvdXBzLmxlbmd0aDtcblx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0Z3JvdXBzW2ldID0gbmlkICsgdG9TZWxlY3RvciggZ3JvdXBzW2ldICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0bmV3Q29udGV4dCA9IHJzaWJsaW5nLnRlc3QoIHNlbGVjdG9yICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8IGNvbnRleHQ7XG5cdFx0XHRcdG5ld1NlbGVjdG9yID0gZ3JvdXBzLmpvaW4oXCIsXCIpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIG5ld1NlbGVjdG9yICkge1xuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsXG5cdFx0XHRcdFx0XHRuZXdDb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIG5ld1NlbGVjdG9yIClcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHR9IGNhdGNoKHFzYUVycm9yKSB7XG5cdFx0XHRcdH0gZmluYWxseSB7XG5cdFx0XHRcdFx0aWYgKCAhb2xkICkge1xuXHRcdFx0XHRcdFx0Y29udGV4dC5yZW1vdmVBdHRyaWJ1dGUoXCJpZFwiKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBBbGwgb3RoZXJzXG5cdHJldHVybiBzZWxlY3QoIHNlbGVjdG9yLnJlcGxhY2UoIHJ0cmltLCBcIiQxXCIgKSwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApO1xufVxuXG4vKipcbiAqIENyZWF0ZSBrZXktdmFsdWUgY2FjaGVzIG9mIGxpbWl0ZWQgc2l6ZVxuICogQHJldHVybnMge0Z1bmN0aW9uKHN0cmluZywgT2JqZWN0KX0gUmV0dXJucyB0aGUgT2JqZWN0IGRhdGEgYWZ0ZXIgc3RvcmluZyBpdCBvbiBpdHNlbGYgd2l0aFxuICpcdHByb3BlcnR5IG5hbWUgdGhlIChzcGFjZS1zdWZmaXhlZCkgc3RyaW5nIGFuZCAoaWYgdGhlIGNhY2hlIGlzIGxhcmdlciB0aGFuIEV4cHIuY2FjaGVMZW5ndGgpXG4gKlx0ZGVsZXRpbmcgdGhlIG9sZGVzdCBlbnRyeVxuICovXG5mdW5jdGlvbiBjcmVhdGVDYWNoZSgpIHtcblx0dmFyIGtleXMgPSBbXTtcblxuXHRmdW5jdGlvbiBjYWNoZSgga2V5LCB2YWx1ZSApIHtcblx0XHQvLyBVc2UgKGtleSArIFwiIFwiKSB0byBhdm9pZCBjb2xsaXNpb24gd2l0aCBuYXRpdmUgcHJvdG90eXBlIHByb3BlcnRpZXMgKHNlZSBJc3N1ZSAjMTU3KVxuXHRcdGlmICgga2V5cy5wdXNoKCBrZXkgKyBcIiBcIiApID4gRXhwci5jYWNoZUxlbmd0aCApIHtcblx0XHRcdC8vIE9ubHkga2VlcCB0aGUgbW9zdCByZWNlbnQgZW50cmllc1xuXHRcdFx0ZGVsZXRlIGNhY2hlWyBrZXlzLnNoaWZ0KCkgXTtcblx0XHR9XG5cdFx0cmV0dXJuIChjYWNoZVsga2V5ICsgXCIgXCIgXSA9IHZhbHVlKTtcblx0fVxuXHRyZXR1cm4gY2FjaGU7XG59XG5cbi8qKlxuICogTWFyayBhIGZ1bmN0aW9uIGZvciBzcGVjaWFsIHVzZSBieSBTaXp6bGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBtYXJrXG4gKi9cbmZ1bmN0aW9uIG1hcmtGdW5jdGlvbiggZm4gKSB7XG5cdGZuWyBleHBhbmRvIF0gPSB0cnVlO1xuXHRyZXR1cm4gZm47XG59XG5cbi8qKlxuICogU3VwcG9ydCB0ZXN0aW5nIHVzaW5nIGFuIGVsZW1lbnRcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFBhc3NlZCB0aGUgY3JlYXRlZCBkaXYgYW5kIGV4cGVjdHMgYSBib29sZWFuIHJlc3VsdFxuICovXG5mdW5jdGlvbiBhc3NlcnQoIGZuICkge1xuXHR2YXIgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcblxuXHR0cnkge1xuXHRcdHJldHVybiAhIWZuKCBkaXYgKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fSBmaW5hbGx5IHtcblx0XHQvLyBSZW1vdmUgZnJvbSBpdHMgcGFyZW50IGJ5IGRlZmF1bHRcblx0XHRpZiAoIGRpdi5wYXJlbnROb2RlICkge1xuXHRcdFx0ZGl2LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIGRpdiApO1xuXHRcdH1cblx0XHQvLyByZWxlYXNlIG1lbW9yeSBpbiBJRVxuXHRcdGRpdiA9IG51bGw7XG5cdH1cbn1cblxuLyoqXG4gKiBBZGRzIHRoZSBzYW1lIGhhbmRsZXIgZm9yIGFsbCBvZiB0aGUgc3BlY2lmaWVkIGF0dHJzXG4gKiBAcGFyYW0ge1N0cmluZ30gYXR0cnMgUGlwZS1zZXBhcmF0ZWQgbGlzdCBvZiBhdHRyaWJ1dGVzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBoYW5kbGVyIFRoZSBtZXRob2QgdGhhdCB3aWxsIGJlIGFwcGxpZWRcbiAqL1xuZnVuY3Rpb24gYWRkSGFuZGxlKCBhdHRycywgaGFuZGxlciApIHtcblx0dmFyIGFyciA9IGF0dHJzLnNwbGl0KFwifFwiKSxcblx0XHRpID0gYXR0cnMubGVuZ3RoO1xuXG5cdHdoaWxlICggaS0tICkge1xuXHRcdEV4cHIuYXR0ckhhbmRsZVsgYXJyW2ldIF0gPSBoYW5kbGVyO1xuXHR9XG59XG5cbi8qKlxuICogQ2hlY2tzIGRvY3VtZW50IG9yZGVyIG9mIHR3byBzaWJsaW5nc1xuICogQHBhcmFtIHtFbGVtZW50fSBhXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGJcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IFJldHVybnMgbGVzcyB0aGFuIDAgaWYgYSBwcmVjZWRlcyBiLCBncmVhdGVyIHRoYW4gMCBpZiBhIGZvbGxvd3MgYlxuICovXG5mdW5jdGlvbiBzaWJsaW5nQ2hlY2soIGEsIGIgKSB7XG5cdHZhciBjdXIgPSBiICYmIGEsXG5cdFx0ZGlmZiA9IGN1ciAmJiBhLm5vZGVUeXBlID09PSAxICYmIGIubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdCggfmIuc291cmNlSW5kZXggfHwgTUFYX05FR0FUSVZFICkgLVxuXHRcdFx0KCB+YS5zb3VyY2VJbmRleCB8fCBNQVhfTkVHQVRJVkUgKTtcblxuXHQvLyBVc2UgSUUgc291cmNlSW5kZXggaWYgYXZhaWxhYmxlIG9uIGJvdGggbm9kZXNcblx0aWYgKCBkaWZmICkge1xuXHRcdHJldHVybiBkaWZmO1xuXHR9XG5cblx0Ly8gQ2hlY2sgaWYgYiBmb2xsb3dzIGFcblx0aWYgKCBjdXIgKSB7XG5cdFx0d2hpbGUgKCAoY3VyID0gY3VyLm5leHRTaWJsaW5nKSApIHtcblx0XHRcdGlmICggY3VyID09PSBiICkge1xuXHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGEgPyAxIDogLTE7XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciBpbnB1dCB0eXBlc1xuICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAqL1xuZnVuY3Rpb24gY3JlYXRlSW5wdXRQc2V1ZG8oIHR5cGUgKSB7XG5cdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHR2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRyZXR1cm4gbmFtZSA9PT0gXCJpbnB1dFwiICYmIGVsZW0udHlwZSA9PT0gdHlwZTtcblx0fTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIGJ1dHRvbnNcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUJ1dHRvblBzZXVkbyggdHlwZSApIHtcblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdHJldHVybiAobmFtZSA9PT0gXCJpbnB1dFwiIHx8IG5hbWUgPT09IFwiYnV0dG9uXCIpICYmIGVsZW0udHlwZSA9PT0gdHlwZTtcblx0fTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIHBvc2l0aW9uYWxzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxuICovXG5mdW5jdGlvbiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmbiApIHtcblx0cmV0dXJuIG1hcmtGdW5jdGlvbihmdW5jdGlvbiggYXJndW1lbnQgKSB7XG5cdFx0YXJndW1lbnQgPSArYXJndW1lbnQ7XG5cdFx0cmV0dXJuIG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcyApIHtcblx0XHRcdHZhciBqLFxuXHRcdFx0XHRtYXRjaEluZGV4ZXMgPSBmbiggW10sIHNlZWQubGVuZ3RoLCBhcmd1bWVudCApLFxuXHRcdFx0XHRpID0gbWF0Y2hJbmRleGVzLmxlbmd0aDtcblxuXHRcdFx0Ly8gTWF0Y2ggZWxlbWVudHMgZm91bmQgYXQgdGhlIHNwZWNpZmllZCBpbmRleGVzXG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0aWYgKCBzZWVkWyAoaiA9IG1hdGNoSW5kZXhlc1tpXSkgXSApIHtcblx0XHRcdFx0XHRzZWVkW2pdID0gIShtYXRjaGVzW2pdID0gc2VlZFtqXSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9KTtcblx0fSk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGEgbm9kZSBmb3IgdmFsaWRpdHkgYXMgYSBTaXp6bGUgY29udGV4dFxuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdD19IGNvbnRleHRcbiAqIEByZXR1cm5zIHtFbGVtZW50fE9iamVjdHxCb29sZWFufSBUaGUgaW5wdXQgbm9kZSBpZiBhY2NlcHRhYmxlLCBvdGhlcndpc2UgYSBmYWxzeSB2YWx1ZVxuICovXG5mdW5jdGlvbiB0ZXN0Q29udGV4dCggY29udGV4dCApIHtcblx0cmV0dXJuIGNvbnRleHQgJiYgdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IHN0cnVuZGVmaW5lZCAmJiBjb250ZXh0O1xufVxuXG4vLyBFeHBvc2Ugc3VwcG9ydCB2YXJzIGZvciBjb252ZW5pZW5jZVxuc3VwcG9ydCA9IFNpenpsZS5zdXBwb3J0ID0ge307XG5cbi8qKlxuICogRGV0ZWN0cyBYTUwgbm9kZXNcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3R9IGVsZW0gQW4gZWxlbWVudCBvciBhIGRvY3VtZW50XG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gVHJ1ZSBpZmYgZWxlbSBpcyBhIG5vbi1IVE1MIFhNTCBub2RlXG4gKi9cbmlzWE1MID0gU2l6emxlLmlzWE1MID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdC8vIGRvY3VtZW50RWxlbWVudCBpcyB2ZXJpZmllZCBmb3IgY2FzZXMgd2hlcmUgaXQgZG9lc24ndCB5ZXQgZXhpc3Rcblx0Ly8gKHN1Y2ggYXMgbG9hZGluZyBpZnJhbWVzIGluIElFIC0gIzQ4MzMpXG5cdHZhciBkb2N1bWVudEVsZW1lbnQgPSBlbGVtICYmIChlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSkuZG9jdW1lbnRFbGVtZW50O1xuXHRyZXR1cm4gZG9jdW1lbnRFbGVtZW50ID8gZG9jdW1lbnRFbGVtZW50Lm5vZGVOYW1lICE9PSBcIkhUTUxcIiA6IGZhbHNlO1xufTtcblxuLyoqXG4gKiBTZXRzIGRvY3VtZW50LXJlbGF0ZWQgdmFyaWFibGVzIG9uY2UgYmFzZWQgb24gdGhlIGN1cnJlbnQgZG9jdW1lbnRcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3R9IFtkb2NdIEFuIGVsZW1lbnQgb3IgZG9jdW1lbnQgb2JqZWN0IHRvIHVzZSB0byBzZXQgdGhlIGRvY3VtZW50XG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjdXJyZW50IGRvY3VtZW50XG4gKi9cbnNldERvY3VtZW50ID0gU2l6emxlLnNldERvY3VtZW50ID0gZnVuY3Rpb24oIG5vZGUgKSB7XG5cdHZhciBoYXNDb21wYXJlLFxuXHRcdGRvYyA9IG5vZGUgPyBub2RlLm93bmVyRG9jdW1lbnQgfHwgbm9kZSA6IHByZWZlcnJlZERvYyxcblx0XHRwYXJlbnQgPSBkb2MuZGVmYXVsdFZpZXc7XG5cblx0Ly8gSWYgbm8gZG9jdW1lbnQgYW5kIGRvY3VtZW50RWxlbWVudCBpcyBhdmFpbGFibGUsIHJldHVyblxuXHRpZiAoIGRvYyA9PT0gZG9jdW1lbnQgfHwgZG9jLm5vZGVUeXBlICE9PSA5IHx8ICFkb2MuZG9jdW1lbnRFbGVtZW50ICkge1xuXHRcdHJldHVybiBkb2N1bWVudDtcblx0fVxuXG5cdC8vIFNldCBvdXIgZG9jdW1lbnRcblx0ZG9jdW1lbnQgPSBkb2M7XG5cdGRvY0VsZW0gPSBkb2MuZG9jdW1lbnRFbGVtZW50O1xuXG5cdC8vIFN1cHBvcnQgdGVzdHNcblx0ZG9jdW1lbnRJc0hUTUwgPSAhaXNYTUwoIGRvYyApO1xuXG5cdC8vIFN1cHBvcnQ6IElFPjhcblx0Ly8gSWYgaWZyYW1lIGRvY3VtZW50IGlzIGFzc2lnbmVkIHRvIFwiZG9jdW1lbnRcIiB2YXJpYWJsZSBhbmQgaWYgaWZyYW1lIGhhcyBiZWVuIHJlbG9hZGVkLFxuXHQvLyBJRSB3aWxsIHRocm93IFwicGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIGFjY2Vzc2luZyBcImRvY3VtZW50XCIgdmFyaWFibGUsIHNlZSBqUXVlcnkgIzEzOTM2XG5cdC8vIElFNi04IGRvIG5vdCBzdXBwb3J0IHRoZSBkZWZhdWx0VmlldyBwcm9wZXJ0eSBzbyBwYXJlbnQgd2lsbCBiZSB1bmRlZmluZWRcblx0aWYgKCBwYXJlbnQgJiYgcGFyZW50ICE9PSBwYXJlbnQudG9wICkge1xuXHRcdC8vIElFMTEgZG9lcyBub3QgaGF2ZSBhdHRhY2hFdmVudCwgc28gYWxsIG11c3Qgc3VmZmVyXG5cdFx0aWYgKCBwYXJlbnQuYWRkRXZlbnRMaXN0ZW5lciApIHtcblx0XHRcdHBhcmVudC5hZGRFdmVudExpc3RlbmVyKCBcInVubG9hZFwiLCBmdW5jdGlvbigpIHtcblx0XHRcdFx0c2V0RG9jdW1lbnQoKTtcblx0XHRcdH0sIGZhbHNlICk7XG5cdFx0fSBlbHNlIGlmICggcGFyZW50LmF0dGFjaEV2ZW50ICkge1xuXHRcdFx0cGFyZW50LmF0dGFjaEV2ZW50KCBcIm9udW5sb2FkXCIsIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRzZXREb2N1bWVudCgpO1xuXHRcdFx0fSk7XG5cdFx0fVxuXHR9XG5cblx0LyogQXR0cmlidXRlc1xuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gU3VwcG9ydDogSUU8OFxuXHQvLyBWZXJpZnkgdGhhdCBnZXRBdHRyaWJ1dGUgcmVhbGx5IHJldHVybnMgYXR0cmlidXRlcyBhbmQgbm90IHByb3BlcnRpZXMgKGV4Y2VwdGluZyBJRTggYm9vbGVhbnMpXG5cdHN1cHBvcnQuYXR0cmlidXRlcyA9IGFzc2VydChmdW5jdGlvbiggZGl2ICkge1xuXHRcdGRpdi5jbGFzc05hbWUgPSBcImlcIjtcblx0XHRyZXR1cm4gIWRpdi5nZXRBdHRyaWJ1dGUoXCJjbGFzc05hbWVcIik7XG5cdH0pO1xuXG5cdC8qIGdldEVsZW1lbnQocylCeSpcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIENoZWNrIGlmIGdldEVsZW1lbnRzQnlUYWdOYW1lKFwiKlwiKSByZXR1cm5zIG9ubHkgZWxlbWVudHNcblx0c3VwcG9ydC5nZXRFbGVtZW50c0J5VGFnTmFtZSA9IGFzc2VydChmdW5jdGlvbiggZGl2ICkge1xuXHRcdGRpdi5hcHBlbmRDaGlsZCggZG9jLmNyZWF0ZUNvbW1lbnQoXCJcIikgKTtcblx0XHRyZXR1cm4gIWRpdi5nZXRFbGVtZW50c0J5VGFnTmFtZShcIipcIikubGVuZ3RoO1xuXHR9KTtcblxuXHQvLyBDaGVjayBpZiBnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIGNhbiBiZSB0cnVzdGVkXG5cdHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSA9IHJuYXRpdmUudGVzdCggZG9jLmdldEVsZW1lbnRzQnlDbGFzc05hbWUgKSAmJiBhc3NlcnQoZnVuY3Rpb24oIGRpdiApIHtcblx0XHRkaXYuaW5uZXJIVE1MID0gXCI8ZGl2IGNsYXNzPSdhJz48L2Rpdj48ZGl2IGNsYXNzPSdhIGknPjwvZGl2PlwiO1xuXG5cdFx0Ly8gU3VwcG9ydDogU2FmYXJpPDRcblx0XHQvLyBDYXRjaCBjbGFzcyBvdmVyLWNhY2hpbmdcblx0XHRkaXYuZmlyc3RDaGlsZC5jbGFzc05hbWUgPSBcImlcIjtcblx0XHQvLyBTdXBwb3J0OiBPcGVyYTwxMFxuXHRcdC8vIENhdGNoIGdFQkNOIGZhaWx1cmUgdG8gZmluZCBub24tbGVhZGluZyBjbGFzc2VzXG5cdFx0cmV0dXJuIGRpdi5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFwiaVwiKS5sZW5ndGggPT09IDI7XG5cdH0pO1xuXG5cdC8vIFN1cHBvcnQ6IElFPDEwXG5cdC8vIENoZWNrIGlmIGdldEVsZW1lbnRCeUlkIHJldHVybnMgZWxlbWVudHMgYnkgbmFtZVxuXHQvLyBUaGUgYnJva2VuIGdldEVsZW1lbnRCeUlkIG1ldGhvZHMgZG9uJ3QgcGljayB1cCBwcm9ncmFtYXRpY2FsbHktc2V0IG5hbWVzLFxuXHQvLyBzbyB1c2UgYSByb3VuZGFib3V0IGdldEVsZW1lbnRzQnlOYW1lIHRlc3Rcblx0c3VwcG9ydC5nZXRCeUlkID0gYXNzZXJ0KGZ1bmN0aW9uKCBkaXYgKSB7XG5cdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZGl2ICkuaWQgPSBleHBhbmRvO1xuXHRcdHJldHVybiAhZG9jLmdldEVsZW1lbnRzQnlOYW1lIHx8ICFkb2MuZ2V0RWxlbWVudHNCeU5hbWUoIGV4cGFuZG8gKS5sZW5ndGg7XG5cdH0pO1xuXG5cdC8vIElEIGZpbmQgYW5kIGZpbHRlclxuXHRpZiAoIHN1cHBvcnQuZ2V0QnlJZCApIHtcblx0XHRFeHByLmZpbmRbXCJJRFwiXSA9IGZ1bmN0aW9uKCBpZCwgY29udGV4dCApIHtcblx0XHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQgIT09IHN0cnVuZGVmaW5lZCAmJiBkb2N1bWVudElzSFRNTCApIHtcblx0XHRcdFx0dmFyIG0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBpZCApO1xuXHRcdFx0XHQvLyBDaGVjayBwYXJlbnROb2RlIHRvIGNhdGNoIHdoZW4gQmxhY2tiZXJyeSA0LjYgcmV0dXJuc1xuXHRcdFx0XHQvLyBub2RlcyB0aGF0IGFyZSBubyBsb25nZXIgaW4gdGhlIGRvY3VtZW50ICM2OTYzXG5cdFx0XHRcdHJldHVybiBtICYmIG0ucGFyZW50Tm9kZSA/IFsgbSBdIDogW107XG5cdFx0XHR9XG5cdFx0fTtcblx0XHRFeHByLmZpbHRlcltcIklEXCJdID0gZnVuY3Rpb24oIGlkICkge1xuXHRcdFx0dmFyIGF0dHJJZCA9IGlkLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZShcImlkXCIpID09PSBhdHRySWQ7XG5cdFx0XHR9O1xuXHRcdH07XG5cdH0gZWxzZSB7XG5cdFx0Ly8gU3VwcG9ydDogSUU2Lzdcblx0XHQvLyBnZXRFbGVtZW50QnlJZCBpcyBub3QgcmVsaWFibGUgYXMgYSBmaW5kIHNob3J0Y3V0XG5cdFx0ZGVsZXRlIEV4cHIuZmluZFtcIklEXCJdO1xuXG5cdFx0RXhwci5maWx0ZXJbXCJJRFwiXSA9ICBmdW5jdGlvbiggaWQgKSB7XG5cdFx0XHR2YXIgYXR0cklkID0gaWQucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIG5vZGUgPSB0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGVOb2RlICE9PSBzdHJ1bmRlZmluZWQgJiYgZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKFwiaWRcIik7XG5cdFx0XHRcdHJldHVybiBub2RlICYmIG5vZGUudmFsdWUgPT09IGF0dHJJZDtcblx0XHRcdH07XG5cdFx0fTtcblx0fVxuXG5cdC8vIFRhZ1xuXHRFeHByLmZpbmRbXCJUQUdcIl0gPSBzdXBwb3J0LmdldEVsZW1lbnRzQnlUYWdOYW1lID9cblx0XHRmdW5jdGlvbiggdGFnLCBjb250ZXh0ICkge1xuXHRcdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gc3RydW5kZWZpbmVkICkge1xuXHRcdFx0XHRyZXR1cm4gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnICk7XG5cdFx0XHR9XG5cdFx0fSA6XG5cdFx0ZnVuY3Rpb24oIHRhZywgY29udGV4dCApIHtcblx0XHRcdHZhciBlbGVtLFxuXHRcdFx0XHR0bXAgPSBbXSxcblx0XHRcdFx0aSA9IDAsXG5cdFx0XHRcdHJlc3VsdHMgPSBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCB0YWcgKTtcblxuXHRcdFx0Ly8gRmlsdGVyIG91dCBwb3NzaWJsZSBjb21tZW50c1xuXHRcdFx0aWYgKCB0YWcgPT09IFwiKlwiICkge1xuXHRcdFx0XHR3aGlsZSAoIChlbGVtID0gcmVzdWx0c1tpKytdKSApIHtcblx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdFx0XHR0bXAucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiB0bXA7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHR9O1xuXG5cdC8vIENsYXNzXG5cdEV4cHIuZmluZFtcIkNMQVNTXCJdID0gc3VwcG9ydC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICYmIGZ1bmN0aW9uKCBjbGFzc05hbWUsIGNvbnRleHQgKSB7XG5cdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICE9PSBzdHJ1bmRlZmluZWQgJiYgZG9jdW1lbnRJc0hUTUwgKSB7XG5cdFx0XHRyZXR1cm4gY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCBjbGFzc05hbWUgKTtcblx0XHR9XG5cdH07XG5cblx0LyogUVNBL21hdGNoZXNTZWxlY3RvclxuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gUVNBIGFuZCBtYXRjaGVzU2VsZWN0b3Igc3VwcG9ydFxuXG5cdC8vIG1hdGNoZXNTZWxlY3Rvcig6YWN0aXZlKSByZXBvcnRzIGZhbHNlIHdoZW4gdHJ1ZSAoSUU5L09wZXJhIDExLjUpXG5cdHJidWdneU1hdGNoZXMgPSBbXTtcblxuXHQvLyBxU2EoOmZvY3VzKSByZXBvcnRzIGZhbHNlIHdoZW4gdHJ1ZSAoQ2hyb21lIDIxKVxuXHQvLyBXZSBhbGxvdyB0aGlzIGJlY2F1c2Ugb2YgYSBidWcgaW4gSUU4LzkgdGhhdCB0aHJvd3MgYW4gZXJyb3Jcblx0Ly8gd2hlbmV2ZXIgYGRvY3VtZW50LmFjdGl2ZUVsZW1lbnRgIGlzIGFjY2Vzc2VkIG9uIGFuIGlmcmFtZVxuXHQvLyBTbywgd2UgYWxsb3cgOmZvY3VzIHRvIHBhc3MgdGhyb3VnaCBRU0EgYWxsIHRoZSB0aW1lIHRvIGF2b2lkIHRoZSBJRSBlcnJvclxuXHQvLyBTZWUgaHR0cDovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTMzNzhcblx0cmJ1Z2d5UVNBID0gW107XG5cblx0aWYgKCAoc3VwcG9ydC5xc2EgPSBybmF0aXZlLnRlc3QoIGRvYy5xdWVyeVNlbGVjdG9yQWxsICkpICkge1xuXHRcdC8vIEJ1aWxkIFFTQSByZWdleFxuXHRcdC8vIFJlZ2V4IHN0cmF0ZWd5IGFkb3B0ZWQgZnJvbSBEaWVnbyBQZXJpbmlcblx0XHRhc3NlcnQoZnVuY3Rpb24oIGRpdiApIHtcblx0XHRcdC8vIFNlbGVjdCBpcyBzZXQgdG8gZW1wdHkgc3RyaW5nIG9uIHB1cnBvc2Vcblx0XHRcdC8vIFRoaXMgaXMgdG8gdGVzdCBJRSdzIHRyZWF0bWVudCBvZiBub3QgZXhwbGljaXRseVxuXHRcdFx0Ly8gc2V0dGluZyBhIGJvb2xlYW4gY29udGVudCBhdHRyaWJ1dGUsXG5cdFx0XHQvLyBzaW5jZSBpdHMgcHJlc2VuY2Ugc2hvdWxkIGJlIGVub3VnaFxuXHRcdFx0Ly8gaHR0cDovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTIzNTlcblx0XHRcdGRpdi5pbm5lckhUTUwgPSBcIjxzZWxlY3QgbXNhbGxvd2NsaXA9Jyc+PG9wdGlvbiBzZWxlY3RlZD0nJz48L29wdGlvbj48L3NlbGVjdD5cIjtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4LCBPcGVyYSAxMS0xMi4xNlxuXHRcdFx0Ly8gTm90aGluZyBzaG91bGQgYmUgc2VsZWN0ZWQgd2hlbiBlbXB0eSBzdHJpbmdzIGZvbGxvdyBePSBvciAkPSBvciAqPVxuXHRcdFx0Ly8gVGhlIHRlc3QgYXR0cmlidXRlIG11c3QgYmUgdW5rbm93biBpbiBPcGVyYSBidXQgXCJzYWZlXCIgZm9yIFdpblJUXG5cdFx0XHQvLyBodHRwOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvaWUvaGg0NjUzODguYXNweCNhdHRyaWJ1dGVfc2VjdGlvblxuXHRcdFx0aWYgKCBkaXYucXVlcnlTZWxlY3RvckFsbChcIlttc2FsbG93Y2xpcF49JyddXCIpLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiWypeJF09XCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86Jyd8XFxcIlxcXCIpXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4XG5cdFx0XHQvLyBCb29sZWFuIGF0dHJpYnV0ZXMgYW5kIFwidmFsdWVcIiBhcmUgbm90IHRyZWF0ZWQgY29ycmVjdGx5XG5cdFx0XHRpZiAoICFkaXYucXVlcnlTZWxlY3RvckFsbChcIltzZWxlY3RlZF1cIikubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJcXFxcW1wiICsgd2hpdGVzcGFjZSArIFwiKig/OnZhbHVlfFwiICsgYm9vbGVhbnMgKyBcIilcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBXZWJraXQvT3BlcmEgLSA6Y2hlY2tlZCBzaG91bGQgcmV0dXJuIHNlbGVjdGVkIG9wdGlvbiBlbGVtZW50c1xuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvMjAxMS9SRUMtY3NzMy1zZWxlY3RvcnMtMjAxMTA5MjkvI2NoZWNrZWRcblx0XHRcdC8vIElFOCB0aHJvd3MgZXJyb3IgaGVyZSBhbmQgd2lsbCBub3Qgc2VlIGxhdGVyIHRlc3RzXG5cdFx0XHRpZiAoICFkaXYucXVlcnlTZWxlY3RvckFsbChcIjpjaGVja2VkXCIpLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCI6Y2hlY2tlZFwiKTtcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdGFzc2VydChmdW5jdGlvbiggZGl2ICkge1xuXHRcdFx0Ly8gU3VwcG9ydDogV2luZG93cyA4IE5hdGl2ZSBBcHBzXG5cdFx0XHQvLyBUaGUgdHlwZSBhbmQgbmFtZSBhdHRyaWJ1dGVzIGFyZSByZXN0cmljdGVkIGR1cmluZyAuaW5uZXJIVE1MIGFzc2lnbm1lbnRcblx0XHRcdHZhciBpbnB1dCA9IGRvYy5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG5cdFx0XHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCBcImhpZGRlblwiICk7XG5cdFx0XHRkaXYuYXBwZW5kQ2hpbGQoIGlucHV0ICkuc2V0QXR0cmlidXRlKCBcIm5hbWVcIiwgXCJEXCIgKTtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4XG5cdFx0XHQvLyBFbmZvcmNlIGNhc2Utc2Vuc2l0aXZpdHkgb2YgbmFtZSBhdHRyaWJ1dGVcblx0XHRcdGlmICggZGl2LnF1ZXJ5U2VsZWN0b3JBbGwoXCJbbmFtZT1kXVwiKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIm5hbWVcIiArIHdoaXRlc3BhY2UgKyBcIipbKl4kfCF+XT89XCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gRkYgMy41IC0gOmVuYWJsZWQvOmRpc2FibGVkIGFuZCBoaWRkZW4gZWxlbWVudHMgKGhpZGRlbiBlbGVtZW50cyBhcmUgc3RpbGwgZW5hYmxlZClcblx0XHRcdC8vIElFOCB0aHJvd3MgZXJyb3IgaGVyZSBhbmQgd2lsbCBub3Qgc2VlIGxhdGVyIHRlc3RzXG5cdFx0XHRpZiAoICFkaXYucXVlcnlTZWxlY3RvckFsbChcIjplbmFibGVkXCIpLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiOmVuYWJsZWRcIiwgXCI6ZGlzYWJsZWRcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBPcGVyYSAxMC0xMSBkb2VzIG5vdCB0aHJvdyBvbiBwb3N0LWNvbW1hIGludmFsaWQgcHNldWRvc1xuXHRcdFx0ZGl2LnF1ZXJ5U2VsZWN0b3JBbGwoXCIqLDp4XCIpO1xuXHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCIsLio6XCIpO1xuXHRcdH0pO1xuXHR9XG5cblx0aWYgKCAoc3VwcG9ydC5tYXRjaGVzU2VsZWN0b3IgPSBybmF0aXZlLnRlc3QoIChtYXRjaGVzID0gZG9jRWxlbS5tYXRjaGVzIHx8XG5cdFx0ZG9jRWxlbS53ZWJraXRNYXRjaGVzU2VsZWN0b3IgfHxcblx0XHRkb2NFbGVtLm1vek1hdGNoZXNTZWxlY3RvciB8fFxuXHRcdGRvY0VsZW0ub01hdGNoZXNTZWxlY3RvciB8fFxuXHRcdGRvY0VsZW0ubXNNYXRjaGVzU2VsZWN0b3IpICkpICkge1xuXG5cdFx0YXNzZXJ0KGZ1bmN0aW9uKCBkaXYgKSB7XG5cdFx0XHQvLyBDaGVjayB0byBzZWUgaWYgaXQncyBwb3NzaWJsZSB0byBkbyBtYXRjaGVzU2VsZWN0b3Jcblx0XHRcdC8vIG9uIGEgZGlzY29ubmVjdGVkIG5vZGUgKElFIDkpXG5cdFx0XHRzdXBwb3J0LmRpc2Nvbm5lY3RlZE1hdGNoID0gbWF0Y2hlcy5jYWxsKCBkaXYsIFwiZGl2XCIgKTtcblxuXHRcdFx0Ly8gVGhpcyBzaG91bGQgZmFpbCB3aXRoIGFuIGV4Y2VwdGlvblxuXHRcdFx0Ly8gR2Vja28gZG9lcyBub3QgZXJyb3IsIHJldHVybnMgZmFsc2UgaW5zdGVhZFxuXHRcdFx0bWF0Y2hlcy5jYWxsKCBkaXYsIFwiW3MhPScnXTp4XCIgKTtcblx0XHRcdHJidWdneU1hdGNoZXMucHVzaCggXCIhPVwiLCBwc2V1ZG9zICk7XG5cdFx0fSk7XG5cdH1cblxuXHRyYnVnZ3lRU0EgPSByYnVnZ3lRU0EubGVuZ3RoICYmIG5ldyBSZWdFeHAoIHJidWdneVFTQS5qb2luKFwifFwiKSApO1xuXHRyYnVnZ3lNYXRjaGVzID0gcmJ1Z2d5TWF0Y2hlcy5sZW5ndGggJiYgbmV3IFJlZ0V4cCggcmJ1Z2d5TWF0Y2hlcy5qb2luKFwifFwiKSApO1xuXG5cdC8qIENvbnRhaW5zXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblx0aGFzQ29tcGFyZSA9IHJuYXRpdmUudGVzdCggZG9jRWxlbS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiApO1xuXG5cdC8vIEVsZW1lbnQgY29udGFpbnMgYW5vdGhlclxuXHQvLyBQdXJwb3NlZnVsbHkgZG9lcyBub3QgaW1wbGVtZW50IGluY2x1c2l2ZSBkZXNjZW5kZW50XG5cdC8vIEFzIGluLCBhbiBlbGVtZW50IGRvZXMgbm90IGNvbnRhaW4gaXRzZWxmXG5cdGNvbnRhaW5zID0gaGFzQ29tcGFyZSB8fCBybmF0aXZlLnRlc3QoIGRvY0VsZW0uY29udGFpbnMgKSA/XG5cdFx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0XHR2YXIgYWRvd24gPSBhLm5vZGVUeXBlID09PSA5ID8gYS5kb2N1bWVudEVsZW1lbnQgOiBhLFxuXHRcdFx0XHRidXAgPSBiICYmIGIucGFyZW50Tm9kZTtcblx0XHRcdHJldHVybiBhID09PSBidXAgfHwgISEoIGJ1cCAmJiBidXAubm9kZVR5cGUgPT09IDEgJiYgKFxuXHRcdFx0XHRhZG93bi5jb250YWlucyA/XG5cdFx0XHRcdFx0YWRvd24uY29udGFpbnMoIGJ1cCApIDpcblx0XHRcdFx0XHRhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uICYmIGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGJ1cCApICYgMTZcblx0XHRcdCkpO1xuXHRcdH0gOlxuXHRcdGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdFx0aWYgKCBiICkge1xuXHRcdFx0XHR3aGlsZSAoIChiID0gYi5wYXJlbnROb2RlKSApIHtcblx0XHRcdFx0XHRpZiAoIGIgPT09IGEgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9O1xuXG5cdC8qIFNvcnRpbmdcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIERvY3VtZW50IG9yZGVyIHNvcnRpbmdcblx0c29ydE9yZGVyID0gaGFzQ29tcGFyZSA/XG5cdGZ1bmN0aW9uKCBhLCBiICkge1xuXG5cdFx0Ly8gRmxhZyBmb3IgZHVwbGljYXRlIHJlbW92YWxcblx0XHRpZiAoIGEgPT09IGIgKSB7XG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fVxuXG5cdFx0Ly8gU29ydCBvbiBtZXRob2QgZXhpc3RlbmNlIGlmIG9ubHkgb25lIGlucHV0IGhhcyBjb21wYXJlRG9jdW1lbnRQb3NpdGlvblxuXHRcdHZhciBjb21wYXJlID0gIWEuY29tcGFyZURvY3VtZW50UG9zaXRpb24gLSAhYi5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbjtcblx0XHRpZiAoIGNvbXBhcmUgKSB7XG5cdFx0XHRyZXR1cm4gY29tcGFyZTtcblx0XHR9XG5cblx0XHQvLyBDYWxjdWxhdGUgcG9zaXRpb24gaWYgYm90aCBpbnB1dHMgYmVsb25nIHRvIHRoZSBzYW1lIGRvY3VtZW50XG5cdFx0Y29tcGFyZSA9ICggYS5vd25lckRvY3VtZW50IHx8IGEgKSA9PT0gKCBiLm93bmVyRG9jdW1lbnQgfHwgYiApID9cblx0XHRcdGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGIgKSA6XG5cblx0XHRcdC8vIE90aGVyd2lzZSB3ZSBrbm93IHRoZXkgYXJlIGRpc2Nvbm5lY3RlZFxuXHRcdFx0MTtcblxuXHRcdC8vIERpc2Nvbm5lY3RlZCBub2Rlc1xuXHRcdGlmICggY29tcGFyZSAmIDEgfHxcblx0XHRcdCghc3VwcG9ydC5zb3J0RGV0YWNoZWQgJiYgYi5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggYSApID09PSBjb21wYXJlKSApIHtcblxuXHRcdFx0Ly8gQ2hvb3NlIHRoZSBmaXJzdCBlbGVtZW50IHRoYXQgaXMgcmVsYXRlZCB0byBvdXIgcHJlZmVycmVkIGRvY3VtZW50XG5cdFx0XHRpZiAoIGEgPT09IGRvYyB8fCBhLm93bmVyRG9jdW1lbnQgPT09IHByZWZlcnJlZERvYyAmJiBjb250YWlucyhwcmVmZXJyZWREb2MsIGEpICkge1xuXHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIGIgPT09IGRvYyB8fCBiLm93bmVyRG9jdW1lbnQgPT09IHByZWZlcnJlZERvYyAmJiBjb250YWlucyhwcmVmZXJyZWREb2MsIGIpICkge1xuXHRcdFx0XHRyZXR1cm4gMTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWFpbnRhaW4gb3JpZ2luYWwgb3JkZXJcblx0XHRcdHJldHVybiBzb3J0SW5wdXQgP1xuXHRcdFx0XHQoIGluZGV4T2YuY2FsbCggc29ydElucHV0LCBhICkgLSBpbmRleE9mLmNhbGwoIHNvcnRJbnB1dCwgYiApICkgOlxuXHRcdFx0XHQwO1xuXHRcdH1cblxuXHRcdHJldHVybiBjb21wYXJlICYgNCA/IC0xIDogMTtcblx0fSA6XG5cdGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdC8vIEV4aXQgZWFybHkgaWYgdGhlIG5vZGVzIGFyZSBpZGVudGljYWxcblx0XHRpZiAoIGEgPT09IGIgKSB7XG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fVxuXG5cdFx0dmFyIGN1cixcblx0XHRcdGkgPSAwLFxuXHRcdFx0YXVwID0gYS5wYXJlbnROb2RlLFxuXHRcdFx0YnVwID0gYi5wYXJlbnROb2RlLFxuXHRcdFx0YXAgPSBbIGEgXSxcblx0XHRcdGJwID0gWyBiIF07XG5cblx0XHQvLyBQYXJlbnRsZXNzIG5vZGVzIGFyZSBlaXRoZXIgZG9jdW1lbnRzIG9yIGRpc2Nvbm5lY3RlZFxuXHRcdGlmICggIWF1cCB8fCAhYnVwICkge1xuXHRcdFx0cmV0dXJuIGEgPT09IGRvYyA/IC0xIDpcblx0XHRcdFx0YiA9PT0gZG9jID8gMSA6XG5cdFx0XHRcdGF1cCA/IC0xIDpcblx0XHRcdFx0YnVwID8gMSA6XG5cdFx0XHRcdHNvcnRJbnB1dCA/XG5cdFx0XHRcdCggaW5kZXhPZi5jYWxsKCBzb3J0SW5wdXQsIGEgKSAtIGluZGV4T2YuY2FsbCggc29ydElucHV0LCBiICkgKSA6XG5cdFx0XHRcdDA7XG5cblx0XHQvLyBJZiB0aGUgbm9kZXMgYXJlIHNpYmxpbmdzLCB3ZSBjYW4gZG8gYSBxdWljayBjaGVja1xuXHRcdH0gZWxzZSBpZiAoIGF1cCA9PT0gYnVwICkge1xuXHRcdFx0cmV0dXJuIHNpYmxpbmdDaGVjayggYSwgYiApO1xuXHRcdH1cblxuXHRcdC8vIE90aGVyd2lzZSB3ZSBuZWVkIGZ1bGwgbGlzdHMgb2YgdGhlaXIgYW5jZXN0b3JzIGZvciBjb21wYXJpc29uXG5cdFx0Y3VyID0gYTtcblx0XHR3aGlsZSAoIChjdXIgPSBjdXIucGFyZW50Tm9kZSkgKSB7XG5cdFx0XHRhcC51bnNoaWZ0KCBjdXIgKTtcblx0XHR9XG5cdFx0Y3VyID0gYjtcblx0XHR3aGlsZSAoIChjdXIgPSBjdXIucGFyZW50Tm9kZSkgKSB7XG5cdFx0XHRicC51bnNoaWZ0KCBjdXIgKTtcblx0XHR9XG5cblx0XHQvLyBXYWxrIGRvd24gdGhlIHRyZWUgbG9va2luZyBmb3IgYSBkaXNjcmVwYW5jeVxuXHRcdHdoaWxlICggYXBbaV0gPT09IGJwW2ldICkge1xuXHRcdFx0aSsrO1xuXHRcdH1cblxuXHRcdHJldHVybiBpID9cblx0XHRcdC8vIERvIGEgc2libGluZyBjaGVjayBpZiB0aGUgbm9kZXMgaGF2ZSBhIGNvbW1vbiBhbmNlc3RvclxuXHRcdFx0c2libGluZ0NoZWNrKCBhcFtpXSwgYnBbaV0gKSA6XG5cblx0XHRcdC8vIE90aGVyd2lzZSBub2RlcyBpbiBvdXIgZG9jdW1lbnQgc29ydCBmaXJzdFxuXHRcdFx0YXBbaV0gPT09IHByZWZlcnJlZERvYyA/IC0xIDpcblx0XHRcdGJwW2ldID09PSBwcmVmZXJyZWREb2MgPyAxIDpcblx0XHRcdDA7XG5cdH07XG5cblx0cmV0dXJuIGRvYztcbn07XG5cblNpenpsZS5tYXRjaGVzID0gZnVuY3Rpb24oIGV4cHIsIGVsZW1lbnRzICkge1xuXHRyZXR1cm4gU2l6emxlKCBleHByLCBudWxsLCBudWxsLCBlbGVtZW50cyApO1xufTtcblxuU2l6emxlLm1hdGNoZXNTZWxlY3RvciA9IGZ1bmN0aW9uKCBlbGVtLCBleHByICkge1xuXHQvLyBTZXQgZG9jdW1lbnQgdmFycyBpZiBuZWVkZWRcblx0aWYgKCAoIGVsZW0ub3duZXJEb2N1bWVudCB8fCBlbGVtICkgIT09IGRvY3VtZW50ICkge1xuXHRcdHNldERvY3VtZW50KCBlbGVtICk7XG5cdH1cblxuXHQvLyBNYWtlIHN1cmUgdGhhdCBhdHRyaWJ1dGUgc2VsZWN0b3JzIGFyZSBxdW90ZWRcblx0ZXhwciA9IGV4cHIucmVwbGFjZSggcmF0dHJpYnV0ZVF1b3RlcywgXCI9JyQxJ11cIiApO1xuXG5cdGlmICggc3VwcG9ydC5tYXRjaGVzU2VsZWN0b3IgJiYgZG9jdW1lbnRJc0hUTUwgJiZcblx0XHQoICFyYnVnZ3lNYXRjaGVzIHx8ICFyYnVnZ3lNYXRjaGVzLnRlc3QoIGV4cHIgKSApICYmXG5cdFx0KCAhcmJ1Z2d5UVNBICAgICB8fCAhcmJ1Z2d5UVNBLnRlc3QoIGV4cHIgKSApICkge1xuXG5cdFx0dHJ5IHtcblx0XHRcdHZhciByZXQgPSBtYXRjaGVzLmNhbGwoIGVsZW0sIGV4cHIgKTtcblxuXHRcdFx0Ly8gSUUgOSdzIG1hdGNoZXNTZWxlY3RvciByZXR1cm5zIGZhbHNlIG9uIGRpc2Nvbm5lY3RlZCBub2Rlc1xuXHRcdFx0aWYgKCByZXQgfHwgc3VwcG9ydC5kaXNjb25uZWN0ZWRNYXRjaCB8fFxuXHRcdFx0XHRcdC8vIEFzIHdlbGwsIGRpc2Nvbm5lY3RlZCBub2RlcyBhcmUgc2FpZCB0byBiZSBpbiBhIGRvY3VtZW50XG5cdFx0XHRcdFx0Ly8gZnJhZ21lbnQgaW4gSUUgOVxuXHRcdFx0XHRcdGVsZW0uZG9jdW1lbnQgJiYgZWxlbS5kb2N1bWVudC5ub2RlVHlwZSAhPT0gMTEgKSB7XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cdFx0fSBjYXRjaChlKSB7fVxuXHR9XG5cblx0cmV0dXJuIFNpenpsZSggZXhwciwgZG9jdW1lbnQsIG51bGwsIFsgZWxlbSBdICkubGVuZ3RoID4gMDtcbn07XG5cblNpenpsZS5jb250YWlucyA9IGZ1bmN0aW9uKCBjb250ZXh0LCBlbGVtICkge1xuXHQvLyBTZXQgZG9jdW1lbnQgdmFycyBpZiBuZWVkZWRcblx0aWYgKCAoIGNvbnRleHQub3duZXJEb2N1bWVudCB8fCBjb250ZXh0ICkgIT09IGRvY3VtZW50ICkge1xuXHRcdHNldERvY3VtZW50KCBjb250ZXh0ICk7XG5cdH1cblx0cmV0dXJuIGNvbnRhaW5zKCBjb250ZXh0LCBlbGVtICk7XG59O1xuXG5TaXp6bGUuYXR0ciA9IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xuXHQvLyBTZXQgZG9jdW1lbnQgdmFycyBpZiBuZWVkZWRcblx0aWYgKCAoIGVsZW0ub3duZXJEb2N1bWVudCB8fCBlbGVtICkgIT09IGRvY3VtZW50ICkge1xuXHRcdHNldERvY3VtZW50KCBlbGVtICk7XG5cdH1cblxuXHR2YXIgZm4gPSBFeHByLmF0dHJIYW5kbGVbIG5hbWUudG9Mb3dlckNhc2UoKSBdLFxuXHRcdC8vIERvbid0IGdldCBmb29sZWQgYnkgT2JqZWN0LnByb3RvdHlwZSBwcm9wZXJ0aWVzIChqUXVlcnkgIzEzODA3KVxuXHRcdHZhbCA9IGZuICYmIGhhc093bi5jYWxsKCBFeHByLmF0dHJIYW5kbGUsIG5hbWUudG9Mb3dlckNhc2UoKSApID9cblx0XHRcdGZuKCBlbGVtLCBuYW1lLCAhZG9jdW1lbnRJc0hUTUwgKSA6XG5cdFx0XHR1bmRlZmluZWQ7XG5cblx0cmV0dXJuIHZhbCAhPT0gdW5kZWZpbmVkID9cblx0XHR2YWwgOlxuXHRcdHN1cHBvcnQuYXR0cmlidXRlcyB8fCAhZG9jdW1lbnRJc0hUTUwgP1xuXHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUgKSA6XG5cdFx0XHQodmFsID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKG5hbWUpKSAmJiB2YWwuc3BlY2lmaWVkID9cblx0XHRcdFx0dmFsLnZhbHVlIDpcblx0XHRcdFx0bnVsbDtcbn07XG5cblNpenpsZS5lcnJvciA9IGZ1bmN0aW9uKCBtc2cgKSB7XG5cdHRocm93IG5ldyBFcnJvciggXCJTeW50YXggZXJyb3IsIHVucmVjb2duaXplZCBleHByZXNzaW9uOiBcIiArIG1zZyApO1xufTtcblxuLyoqXG4gKiBEb2N1bWVudCBzb3J0aW5nIGFuZCByZW1vdmluZyBkdXBsaWNhdGVzXG4gKiBAcGFyYW0ge0FycmF5TGlrZX0gcmVzdWx0c1xuICovXG5TaXp6bGUudW5pcXVlU29ydCA9IGZ1bmN0aW9uKCByZXN1bHRzICkge1xuXHR2YXIgZWxlbSxcblx0XHRkdXBsaWNhdGVzID0gW10sXG5cdFx0aiA9IDAsXG5cdFx0aSA9IDA7XG5cblx0Ly8gVW5sZXNzIHdlICprbm93KiB3ZSBjYW4gZGV0ZWN0IGR1cGxpY2F0ZXMsIGFzc3VtZSB0aGVpciBwcmVzZW5jZVxuXHRoYXNEdXBsaWNhdGUgPSAhc3VwcG9ydC5kZXRlY3REdXBsaWNhdGVzO1xuXHRzb3J0SW5wdXQgPSAhc3VwcG9ydC5zb3J0U3RhYmxlICYmIHJlc3VsdHMuc2xpY2UoIDAgKTtcblx0cmVzdWx0cy5zb3J0KCBzb3J0T3JkZXIgKTtcblxuXHRpZiAoIGhhc0R1cGxpY2F0ZSApIHtcblx0XHR3aGlsZSAoIChlbGVtID0gcmVzdWx0c1tpKytdKSApIHtcblx0XHRcdGlmICggZWxlbSA9PT0gcmVzdWx0c1sgaSBdICkge1xuXHRcdFx0XHRqID0gZHVwbGljYXRlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHdoaWxlICggai0tICkge1xuXHRcdFx0cmVzdWx0cy5zcGxpY2UoIGR1cGxpY2F0ZXNbIGogXSwgMSApO1xuXHRcdH1cblx0fVxuXG5cdC8vIENsZWFyIGlucHV0IGFmdGVyIHNvcnRpbmcgdG8gcmVsZWFzZSBvYmplY3RzXG5cdC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L3NpenpsZS9wdWxsLzIyNVxuXHRzb3J0SW5wdXQgPSBudWxsO1xuXG5cdHJldHVybiByZXN1bHRzO1xufTtcblxuLyoqXG4gKiBVdGlsaXR5IGZ1bmN0aW9uIGZvciByZXRyaWV2aW5nIHRoZSB0ZXh0IHZhbHVlIG9mIGFuIGFycmF5IG9mIERPTSBub2Rlc1xuICogQHBhcmFtIHtBcnJheXxFbGVtZW50fSBlbGVtXG4gKi9cbmdldFRleHQgPSBTaXp6bGUuZ2V0VGV4dCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHR2YXIgbm9kZSxcblx0XHRyZXQgPSBcIlwiLFxuXHRcdGkgPSAwLFxuXHRcdG5vZGVUeXBlID0gZWxlbS5ub2RlVHlwZTtcblxuXHRpZiAoICFub2RlVHlwZSApIHtcblx0XHQvLyBJZiBubyBub2RlVHlwZSwgdGhpcyBpcyBleHBlY3RlZCB0byBiZSBhbiBhcnJheVxuXHRcdHdoaWxlICggKG5vZGUgPSBlbGVtW2krK10pICkge1xuXHRcdFx0Ly8gRG8gbm90IHRyYXZlcnNlIGNvbW1lbnQgbm9kZXNcblx0XHRcdHJldCArPSBnZXRUZXh0KCBub2RlICk7XG5cdFx0fVxuXHR9IGVsc2UgaWYgKCBub2RlVHlwZSA9PT0gMSB8fCBub2RlVHlwZSA9PT0gOSB8fCBub2RlVHlwZSA9PT0gMTEgKSB7XG5cdFx0Ly8gVXNlIHRleHRDb250ZW50IGZvciBlbGVtZW50c1xuXHRcdC8vIGlubmVyVGV4dCB1c2FnZSByZW1vdmVkIGZvciBjb25zaXN0ZW5jeSBvZiBuZXcgbGluZXMgKGpRdWVyeSAjMTExNTMpXG5cdFx0aWYgKCB0eXBlb2YgZWxlbS50ZXh0Q29udGVudCA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHJldHVybiBlbGVtLnRleHRDb250ZW50O1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBUcmF2ZXJzZSBpdHMgY2hpbGRyZW5cblx0XHRcdGZvciAoIGVsZW0gPSBlbGVtLmZpcnN0Q2hpbGQ7IGVsZW07IGVsZW0gPSBlbGVtLm5leHRTaWJsaW5nICkge1xuXHRcdFx0XHRyZXQgKz0gZ2V0VGV4dCggZWxlbSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fSBlbHNlIGlmICggbm9kZVR5cGUgPT09IDMgfHwgbm9kZVR5cGUgPT09IDQgKSB7XG5cdFx0cmV0dXJuIGVsZW0ubm9kZVZhbHVlO1xuXHR9XG5cdC8vIERvIG5vdCBpbmNsdWRlIGNvbW1lbnQgb3IgcHJvY2Vzc2luZyBpbnN0cnVjdGlvbiBub2Rlc1xuXG5cdHJldHVybiByZXQ7XG59O1xuXG5FeHByID0gU2l6emxlLnNlbGVjdG9ycyA9IHtcblxuXHQvLyBDYW4gYmUgYWRqdXN0ZWQgYnkgdGhlIHVzZXJcblx0Y2FjaGVMZW5ndGg6IDUwLFxuXG5cdGNyZWF0ZVBzZXVkbzogbWFya0Z1bmN0aW9uLFxuXG5cdG1hdGNoOiBtYXRjaEV4cHIsXG5cblx0YXR0ckhhbmRsZToge30sXG5cblx0ZmluZDoge30sXG5cblx0cmVsYXRpdmU6IHtcblx0XHRcIj5cIjogeyBkaXI6IFwicGFyZW50Tm9kZVwiLCBmaXJzdDogdHJ1ZSB9LFxuXHRcdFwiIFwiOiB7IGRpcjogXCJwYXJlbnROb2RlXCIgfSxcblx0XHRcIitcIjogeyBkaXI6IFwicHJldmlvdXNTaWJsaW5nXCIsIGZpcnN0OiB0cnVlIH0sXG5cdFx0XCJ+XCI6IHsgZGlyOiBcInByZXZpb3VzU2libGluZ1wiIH1cblx0fSxcblxuXHRwcmVGaWx0ZXI6IHtcblx0XHRcIkFUVFJcIjogZnVuY3Rpb24oIG1hdGNoICkge1xuXHRcdFx0bWF0Y2hbMV0gPSBtYXRjaFsxXS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXG5cdFx0XHQvLyBNb3ZlIHRoZSBnaXZlbiB2YWx1ZSB0byBtYXRjaFszXSB3aGV0aGVyIHF1b3RlZCBvciB1bnF1b3RlZFxuXHRcdFx0bWF0Y2hbM10gPSAoIG1hdGNoWzNdIHx8IG1hdGNoWzRdIHx8IG1hdGNoWzVdIHx8IFwiXCIgKS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXG5cdFx0XHRpZiAoIG1hdGNoWzJdID09PSBcIn49XCIgKSB7XG5cdFx0XHRcdG1hdGNoWzNdID0gXCIgXCIgKyBtYXRjaFszXSArIFwiIFwiO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbWF0Y2guc2xpY2UoIDAsIDQgKTtcblx0XHR9LFxuXG5cdFx0XCJDSElMRFwiOiBmdW5jdGlvbiggbWF0Y2ggKSB7XG5cdFx0XHQvKiBtYXRjaGVzIGZyb20gbWF0Y2hFeHByW1wiQ0hJTERcIl1cblx0XHRcdFx0MSB0eXBlIChvbmx5fG50aHwuLi4pXG5cdFx0XHRcdDIgd2hhdCAoY2hpbGR8b2YtdHlwZSlcblx0XHRcdFx0MyBhcmd1bWVudCAoZXZlbnxvZGR8XFxkKnxcXGQqbihbKy1dXFxkKyk/fC4uLilcblx0XHRcdFx0NCB4bi1jb21wb25lbnQgb2YgeG4reSBhcmd1bWVudCAoWystXT9cXGQqbnwpXG5cdFx0XHRcdDUgc2lnbiBvZiB4bi1jb21wb25lbnRcblx0XHRcdFx0NiB4IG9mIHhuLWNvbXBvbmVudFxuXHRcdFx0XHQ3IHNpZ24gb2YgeS1jb21wb25lbnRcblx0XHRcdFx0OCB5IG9mIHktY29tcG9uZW50XG5cdFx0XHQqL1xuXHRcdFx0bWF0Y2hbMV0gPSBtYXRjaFsxXS50b0xvd2VyQ2FzZSgpO1xuXG5cdFx0XHRpZiAoIG1hdGNoWzFdLnNsaWNlKCAwLCAzICkgPT09IFwibnRoXCIgKSB7XG5cdFx0XHRcdC8vIG50aC0qIHJlcXVpcmVzIGFyZ3VtZW50XG5cdFx0XHRcdGlmICggIW1hdGNoWzNdICkge1xuXHRcdFx0XHRcdFNpenpsZS5lcnJvciggbWF0Y2hbMF0gKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIG51bWVyaWMgeCBhbmQgeSBwYXJhbWV0ZXJzIGZvciBFeHByLmZpbHRlci5DSElMRFxuXHRcdFx0XHQvLyByZW1lbWJlciB0aGF0IGZhbHNlL3RydWUgY2FzdCByZXNwZWN0aXZlbHkgdG8gMC8xXG5cdFx0XHRcdG1hdGNoWzRdID0gKyggbWF0Y2hbNF0gPyBtYXRjaFs1XSArIChtYXRjaFs2XSB8fCAxKSA6IDIgKiAoIG1hdGNoWzNdID09PSBcImV2ZW5cIiB8fCBtYXRjaFszXSA9PT0gXCJvZGRcIiApICk7XG5cdFx0XHRcdG1hdGNoWzVdID0gKyggKCBtYXRjaFs3XSArIG1hdGNoWzhdICkgfHwgbWF0Y2hbM10gPT09IFwib2RkXCIgKTtcblxuXHRcdFx0Ly8gb3RoZXIgdHlwZXMgcHJvaGliaXQgYXJndW1lbnRzXG5cdFx0XHR9IGVsc2UgaWYgKCBtYXRjaFszXSApIHtcblx0XHRcdFx0U2l6emxlLmVycm9yKCBtYXRjaFswXSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbWF0Y2g7XG5cdFx0fSxcblxuXHRcdFwiUFNFVURPXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcblx0XHRcdHZhciBleGNlc3MsXG5cdFx0XHRcdHVucXVvdGVkID0gIW1hdGNoWzZdICYmIG1hdGNoWzJdO1xuXG5cdFx0XHRpZiAoIG1hdGNoRXhwcltcIkNISUxEXCJdLnRlc3QoIG1hdGNoWzBdICkgKSB7XG5cdFx0XHRcdHJldHVybiBudWxsO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBY2NlcHQgcXVvdGVkIGFyZ3VtZW50cyBhcy1pc1xuXHRcdFx0aWYgKCBtYXRjaFszXSApIHtcblx0XHRcdFx0bWF0Y2hbMl0gPSBtYXRjaFs0XSB8fCBtYXRjaFs1XSB8fCBcIlwiO1xuXG5cdFx0XHQvLyBTdHJpcCBleGNlc3MgY2hhcmFjdGVycyBmcm9tIHVucXVvdGVkIGFyZ3VtZW50c1xuXHRcdFx0fSBlbHNlIGlmICggdW5xdW90ZWQgJiYgcnBzZXVkby50ZXN0KCB1bnF1b3RlZCApICYmXG5cdFx0XHRcdC8vIEdldCBleGNlc3MgZnJvbSB0b2tlbml6ZSAocmVjdXJzaXZlbHkpXG5cdFx0XHRcdChleGNlc3MgPSB0b2tlbml6ZSggdW5xdW90ZWQsIHRydWUgKSkgJiZcblx0XHRcdFx0Ly8gYWR2YW5jZSB0byB0aGUgbmV4dCBjbG9zaW5nIHBhcmVudGhlc2lzXG5cdFx0XHRcdChleGNlc3MgPSB1bnF1b3RlZC5pbmRleE9mKCBcIilcIiwgdW5xdW90ZWQubGVuZ3RoIC0gZXhjZXNzICkgLSB1bnF1b3RlZC5sZW5ndGgpICkge1xuXG5cdFx0XHRcdC8vIGV4Y2VzcyBpcyBhIG5lZ2F0aXZlIGluZGV4XG5cdFx0XHRcdG1hdGNoWzBdID0gbWF0Y2hbMF0uc2xpY2UoIDAsIGV4Y2VzcyApO1xuXHRcdFx0XHRtYXRjaFsyXSA9IHVucXVvdGVkLnNsaWNlKCAwLCBleGNlc3MgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUmV0dXJuIG9ubHkgY2FwdHVyZXMgbmVlZGVkIGJ5IHRoZSBwc2V1ZG8gZmlsdGVyIG1ldGhvZCAodHlwZSBhbmQgYXJndW1lbnQpXG5cdFx0XHRyZXR1cm4gbWF0Y2guc2xpY2UoIDAsIDMgKTtcblx0XHR9XG5cdH0sXG5cblx0ZmlsdGVyOiB7XG5cblx0XHRcIlRBR1wiOiBmdW5jdGlvbiggbm9kZU5hbWVTZWxlY3RvciApIHtcblx0XHRcdHZhciBub2RlTmFtZSA9IG5vZGVOYW1lU2VsZWN0b3IucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIG5vZGVOYW1lU2VsZWN0b3IgPT09IFwiKlwiID9cblx0XHRcdFx0ZnVuY3Rpb24oKSB7IHJldHVybiB0cnVlOyB9IDpcblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGVsZW0ubm9kZU5hbWUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBub2RlTmFtZTtcblx0XHRcdFx0fTtcblx0XHR9LFxuXG5cdFx0XCJDTEFTU1wiOiBmdW5jdGlvbiggY2xhc3NOYW1lICkge1xuXHRcdFx0dmFyIHBhdHRlcm4gPSBjbGFzc0NhY2hlWyBjbGFzc05hbWUgKyBcIiBcIiBdO1xuXG5cdFx0XHRyZXR1cm4gcGF0dGVybiB8fFxuXHRcdFx0XHQocGF0dGVybiA9IG5ldyBSZWdFeHAoIFwiKF58XCIgKyB3aGl0ZXNwYWNlICsgXCIpXCIgKyBjbGFzc05hbWUgKyBcIihcIiArIHdoaXRlc3BhY2UgKyBcInwkKVwiICkpICYmXG5cdFx0XHRcdGNsYXNzQ2FjaGUoIGNsYXNzTmFtZSwgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHBhdHRlcm4udGVzdCggdHlwZW9mIGVsZW0uY2xhc3NOYW1lID09PSBcInN0cmluZ1wiICYmIGVsZW0uY2xhc3NOYW1lIHx8IHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZSAhPT0gc3RydW5kZWZpbmVkICYmIGVsZW0uZ2V0QXR0cmlidXRlKFwiY2xhc3NcIikgfHwgXCJcIiApO1xuXHRcdFx0XHR9KTtcblx0XHR9LFxuXG5cdFx0XCJBVFRSXCI6IGZ1bmN0aW9uKCBuYW1lLCBvcGVyYXRvciwgY2hlY2sgKSB7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciByZXN1bHQgPSBTaXp6bGUuYXR0ciggZWxlbSwgbmFtZSApO1xuXG5cdFx0XHRcdGlmICggcmVzdWx0ID09IG51bGwgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG9wZXJhdG9yID09PSBcIiE9XCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCAhb3BlcmF0b3IgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXN1bHQgKz0gXCJcIjtcblxuXHRcdFx0XHRyZXR1cm4gb3BlcmF0b3IgPT09IFwiPVwiID8gcmVzdWx0ID09PSBjaGVjayA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiIT1cIiA/IHJlc3VsdCAhPT0gY2hlY2sgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIl49XCIgPyBjaGVjayAmJiByZXN1bHQuaW5kZXhPZiggY2hlY2sgKSA9PT0gMCA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiKj1cIiA/IGNoZWNrICYmIHJlc3VsdC5pbmRleE9mKCBjaGVjayApID4gLTEgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIiQ9XCIgPyBjaGVjayAmJiByZXN1bHQuc2xpY2UoIC1jaGVjay5sZW5ndGggKSA9PT0gY2hlY2sgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIn49XCIgPyAoIFwiIFwiICsgcmVzdWx0ICsgXCIgXCIgKS5pbmRleE9mKCBjaGVjayApID4gLTEgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcInw9XCIgPyByZXN1bHQgPT09IGNoZWNrIHx8IHJlc3VsdC5zbGljZSggMCwgY2hlY2subGVuZ3RoICsgMSApID09PSBjaGVjayArIFwiLVwiIDpcblx0XHRcdFx0XHRmYWxzZTtcblx0XHRcdH07XG5cdFx0fSxcblxuXHRcdFwiQ0hJTERcIjogZnVuY3Rpb24oIHR5cGUsIHdoYXQsIGFyZ3VtZW50LCBmaXJzdCwgbGFzdCApIHtcblx0XHRcdHZhciBzaW1wbGUgPSB0eXBlLnNsaWNlKCAwLCAzICkgIT09IFwibnRoXCIsXG5cdFx0XHRcdGZvcndhcmQgPSB0eXBlLnNsaWNlKCAtNCApICE9PSBcImxhc3RcIixcblx0XHRcdFx0b2ZUeXBlID0gd2hhdCA9PT0gXCJvZi10eXBlXCI7XG5cblx0XHRcdHJldHVybiBmaXJzdCA9PT0gMSAmJiBsYXN0ID09PSAwID9cblxuXHRcdFx0XHQvLyBTaG9ydGN1dCBmb3IgOm50aC0qKG4pXG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdHJldHVybiAhIWVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdFx0fSA6XG5cblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0XHR2YXIgY2FjaGUsIG91dGVyQ2FjaGUsIG5vZGUsIGRpZmYsIG5vZGVJbmRleCwgc3RhcnQsXG5cdFx0XHRcdFx0XHRkaXIgPSBzaW1wbGUgIT09IGZvcndhcmQgPyBcIm5leHRTaWJsaW5nXCIgOiBcInByZXZpb3VzU2libGluZ1wiLFxuXHRcdFx0XHRcdFx0cGFyZW50ID0gZWxlbS5wYXJlbnROb2RlLFxuXHRcdFx0XHRcdFx0bmFtZSA9IG9mVHlwZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCksXG5cdFx0XHRcdFx0XHR1c2VDYWNoZSA9ICF4bWwgJiYgIW9mVHlwZTtcblxuXHRcdFx0XHRcdGlmICggcGFyZW50ICkge1xuXG5cdFx0XHRcdFx0XHQvLyA6KGZpcnN0fGxhc3R8b25seSktKGNoaWxkfG9mLXR5cGUpXG5cdFx0XHRcdFx0XHRpZiAoIHNpbXBsZSApIHtcblx0XHRcdFx0XHRcdFx0d2hpbGUgKCBkaXIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0bm9kZSA9IGVsZW07XG5cdFx0XHRcdFx0XHRcdFx0d2hpbGUgKCAobm9kZSA9IG5vZGVbIGRpciBdKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggb2ZUeXBlID8gbm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lIDogbm9kZS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHQvLyBSZXZlcnNlIGRpcmVjdGlvbiBmb3IgOm9ubHktKiAoaWYgd2UgaGF2ZW4ndCB5ZXQgZG9uZSBzbylcblx0XHRcdFx0XHRcdFx0XHRzdGFydCA9IGRpciA9IHR5cGUgPT09IFwib25seVwiICYmICFzdGFydCAmJiBcIm5leHRTaWJsaW5nXCI7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdHN0YXJ0ID0gWyBmb3J3YXJkID8gcGFyZW50LmZpcnN0Q2hpbGQgOiBwYXJlbnQubGFzdENoaWxkIF07XG5cblx0XHRcdFx0XHRcdC8vIG5vbi14bWwgOm50aC1jaGlsZCguLi4pIHN0b3JlcyBjYWNoZSBkYXRhIG9uIGBwYXJlbnRgXG5cdFx0XHRcdFx0XHRpZiAoIGZvcndhcmQgJiYgdXNlQ2FjaGUgKSB7XG5cdFx0XHRcdFx0XHRcdC8vIFNlZWsgYGVsZW1gIGZyb20gYSBwcmV2aW91c2x5LWNhY2hlZCBpbmRleFxuXHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gcGFyZW50WyBleHBhbmRvIF0gfHwgKHBhcmVudFsgZXhwYW5kbyBdID0ge30pO1xuXHRcdFx0XHRcdFx0XHRjYWNoZSA9IG91dGVyQ2FjaGVbIHR5cGUgXSB8fCBbXTtcblx0XHRcdFx0XHRcdFx0bm9kZUluZGV4ID0gY2FjaGVbMF0gPT09IGRpcnJ1bnMgJiYgY2FjaGVbMV07XG5cdFx0XHRcdFx0XHRcdGRpZmYgPSBjYWNoZVswXSA9PT0gZGlycnVucyAmJiBjYWNoZVsyXTtcblx0XHRcdFx0XHRcdFx0bm9kZSA9IG5vZGVJbmRleCAmJiBwYXJlbnQuY2hpbGROb2Rlc1sgbm9kZUluZGV4IF07XG5cblx0XHRcdFx0XHRcdFx0d2hpbGUgKCAobm9kZSA9ICsrbm9kZUluZGV4ICYmIG5vZGUgJiYgbm9kZVsgZGlyIF0gfHxcblxuXHRcdFx0XHRcdFx0XHRcdC8vIEZhbGxiYWNrIHRvIHNlZWtpbmcgYGVsZW1gIGZyb20gdGhlIHN0YXJ0XG5cdFx0XHRcdFx0XHRcdFx0KGRpZmYgPSBub2RlSW5kZXggPSAwKSB8fCBzdGFydC5wb3AoKSkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBXaGVuIGZvdW5kLCBjYWNoZSBpbmRleGVzIG9uIGBwYXJlbnRgIGFuZCBicmVha1xuXHRcdFx0XHRcdFx0XHRcdGlmICggbm9kZS5ub2RlVHlwZSA9PT0gMSAmJiArK2RpZmYgJiYgbm9kZSA9PT0gZWxlbSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGVbIHR5cGUgXSA9IFsgZGlycnVucywgbm9kZUluZGV4LCBkaWZmIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gVXNlIHByZXZpb3VzbHktY2FjaGVkIGVsZW1lbnQgaW5kZXggaWYgYXZhaWxhYmxlXG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCB1c2VDYWNoZSAmJiAoY2FjaGUgPSAoZWxlbVsgZXhwYW5kbyBdIHx8IChlbGVtWyBleHBhbmRvIF0gPSB7fSkpWyB0eXBlIF0pICYmIGNhY2hlWzBdID09PSBkaXJydW5zICkge1xuXHRcdFx0XHRcdFx0XHRkaWZmID0gY2FjaGVbMV07XG5cblx0XHRcdFx0XHRcdC8vIHhtbCA6bnRoLWNoaWxkKC4uLikgb3IgOm50aC1sYXN0LWNoaWxkKC4uLikgb3IgOm50aCgtbGFzdCk/LW9mLXR5cGUoLi4uKVxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0Ly8gVXNlIHRoZSBzYW1lIGxvb3AgYXMgYWJvdmUgdG8gc2VlayBgZWxlbWAgZnJvbSB0aGUgc3RhcnRcblx0XHRcdFx0XHRcdFx0d2hpbGUgKCAobm9kZSA9ICsrbm9kZUluZGV4ICYmIG5vZGUgJiYgbm9kZVsgZGlyIF0gfHxcblx0XHRcdFx0XHRcdFx0XHQoZGlmZiA9IG5vZGVJbmRleCA9IDApIHx8IHN0YXJ0LnBvcCgpKSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdGlmICggKCBvZlR5cGUgPyBub2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUgOiBub2RlLm5vZGVUeXBlID09PSAxICkgJiYgKytkaWZmICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gQ2FjaGUgdGhlIGluZGV4IG9mIGVhY2ggZW5jb3VudGVyZWQgZWxlbWVudFxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCB1c2VDYWNoZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0KG5vZGVbIGV4cGFuZG8gXSB8fCAobm9kZVsgZXhwYW5kbyBdID0ge30pKVsgdHlwZSBdID0gWyBkaXJydW5zLCBkaWZmIF07XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdGlmICggbm9kZSA9PT0gZWxlbSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIEluY29ycG9yYXRlIHRoZSBvZmZzZXQsIHRoZW4gY2hlY2sgYWdhaW5zdCBjeWNsZSBzaXplXG5cdFx0XHRcdFx0XHRkaWZmIC09IGxhc3Q7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZGlmZiA9PT0gZmlyc3QgfHwgKCBkaWZmICUgZmlyc3QgPT09IDAgJiYgZGlmZiAvIGZpcnN0ID49IDAgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH07XG5cdFx0fSxcblxuXHRcdFwiUFNFVURPXCI6IGZ1bmN0aW9uKCBwc2V1ZG8sIGFyZ3VtZW50ICkge1xuXHRcdFx0Ly8gcHNldWRvLWNsYXNzIG5hbWVzIGFyZSBjYXNlLWluc2Vuc2l0aXZlXG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI3BzZXVkby1jbGFzc2VzXG5cdFx0XHQvLyBQcmlvcml0aXplIGJ5IGNhc2Ugc2Vuc2l0aXZpdHkgaW4gY2FzZSBjdXN0b20gcHNldWRvcyBhcmUgYWRkZWQgd2l0aCB1cHBlcmNhc2UgbGV0dGVyc1xuXHRcdFx0Ly8gUmVtZW1iZXIgdGhhdCBzZXRGaWx0ZXJzIGluaGVyaXRzIGZyb20gcHNldWRvc1xuXHRcdFx0dmFyIGFyZ3MsXG5cdFx0XHRcdGZuID0gRXhwci5wc2V1ZG9zWyBwc2V1ZG8gXSB8fCBFeHByLnNldEZpbHRlcnNbIHBzZXVkby50b0xvd2VyQ2FzZSgpIF0gfHxcblx0XHRcdFx0XHRTaXp6bGUuZXJyb3IoIFwidW5zdXBwb3J0ZWQgcHNldWRvOiBcIiArIHBzZXVkbyApO1xuXG5cdFx0XHQvLyBUaGUgdXNlciBtYXkgdXNlIGNyZWF0ZVBzZXVkbyB0byBpbmRpY2F0ZSB0aGF0XG5cdFx0XHQvLyBhcmd1bWVudHMgYXJlIG5lZWRlZCB0byBjcmVhdGUgdGhlIGZpbHRlciBmdW5jdGlvblxuXHRcdFx0Ly8ganVzdCBhcyBTaXp6bGUgZG9lc1xuXHRcdFx0aWYgKCBmblsgZXhwYW5kbyBdICkge1xuXHRcdFx0XHRyZXR1cm4gZm4oIGFyZ3VtZW50ICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEJ1dCBtYWludGFpbiBzdXBwb3J0IGZvciBvbGQgc2lnbmF0dXJlc1xuXHRcdFx0aWYgKCBmbi5sZW5ndGggPiAxICkge1xuXHRcdFx0XHRhcmdzID0gWyBwc2V1ZG8sIHBzZXVkbywgXCJcIiwgYXJndW1lbnQgXTtcblx0XHRcdFx0cmV0dXJuIEV4cHIuc2V0RmlsdGVycy5oYXNPd25Qcm9wZXJ0eSggcHNldWRvLnRvTG93ZXJDYXNlKCkgKSA/XG5cdFx0XHRcdFx0bWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzICkge1xuXHRcdFx0XHRcdFx0dmFyIGlkeCxcblx0XHRcdFx0XHRcdFx0bWF0Y2hlZCA9IGZuKCBzZWVkLCBhcmd1bWVudCApLFxuXHRcdFx0XHRcdFx0XHRpID0gbWF0Y2hlZC5sZW5ndGg7XG5cdFx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdFx0aWR4ID0gaW5kZXhPZi5jYWxsKCBzZWVkLCBtYXRjaGVkW2ldICk7XG5cdFx0XHRcdFx0XHRcdHNlZWRbIGlkeCBdID0gISggbWF0Y2hlc1sgaWR4IF0gPSBtYXRjaGVkW2ldICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSkgOlxuXHRcdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGZuKCBlbGVtLCAwLCBhcmdzICk7XG5cdFx0XHRcdFx0fTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGZuO1xuXHRcdH1cblx0fSxcblxuXHRwc2V1ZG9zOiB7XG5cdFx0Ly8gUG90ZW50aWFsbHkgY29tcGxleCBwc2V1ZG9zXG5cdFx0XCJub3RcIjogbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRcdC8vIFRyaW0gdGhlIHNlbGVjdG9yIHBhc3NlZCB0byBjb21waWxlXG5cdFx0XHQvLyB0byBhdm9pZCB0cmVhdGluZyBsZWFkaW5nIGFuZCB0cmFpbGluZ1xuXHRcdFx0Ly8gc3BhY2VzIGFzIGNvbWJpbmF0b3JzXG5cdFx0XHR2YXIgaW5wdXQgPSBbXSxcblx0XHRcdFx0cmVzdWx0cyA9IFtdLFxuXHRcdFx0XHRtYXRjaGVyID0gY29tcGlsZSggc2VsZWN0b3IucmVwbGFjZSggcnRyaW0sIFwiJDFcIiApICk7XG5cblx0XHRcdHJldHVybiBtYXRjaGVyWyBleHBhbmRvIF0gP1xuXHRcdFx0XHRtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlZWQsIG1hdGNoZXMsIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0XHR2YXIgZWxlbSxcblx0XHRcdFx0XHRcdHVubWF0Y2hlZCA9IG1hdGNoZXIoIHNlZWQsIG51bGwsIHhtbCwgW10gKSxcblx0XHRcdFx0XHRcdGkgPSBzZWVkLmxlbmd0aDtcblxuXHRcdFx0XHRcdC8vIE1hdGNoIGVsZW1lbnRzIHVubWF0Y2hlZCBieSBgbWF0Y2hlcmBcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdGlmICggKGVsZW0gPSB1bm1hdGNoZWRbaV0pICkge1xuXHRcdFx0XHRcdFx0XHRzZWVkW2ldID0gIShtYXRjaGVzW2ldID0gZWxlbSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KSA6XG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHRcdFx0aW5wdXRbMF0gPSBlbGVtO1xuXHRcdFx0XHRcdG1hdGNoZXIoIGlucHV0LCBudWxsLCB4bWwsIHJlc3VsdHMgKTtcblx0XHRcdFx0XHRyZXR1cm4gIXJlc3VsdHMucG9wKCk7XG5cdFx0XHRcdH07XG5cdFx0fSksXG5cblx0XHRcImhhc1wiOiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gU2l6emxlKCBzZWxlY3RvciwgZWxlbSApLmxlbmd0aCA+IDA7XG5cdFx0XHR9O1xuXHRcdH0pLFxuXG5cdFx0XCJjb250YWluc1wiOiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHRleHQgKSB7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiAoIGVsZW0udGV4dENvbnRlbnQgfHwgZWxlbS5pbm5lclRleHQgfHwgZ2V0VGV4dCggZWxlbSApICkuaW5kZXhPZiggdGV4dCApID4gLTE7XG5cdFx0XHR9O1xuXHRcdH0pLFxuXG5cdFx0Ly8gXCJXaGV0aGVyIGFuIGVsZW1lbnQgaXMgcmVwcmVzZW50ZWQgYnkgYSA6bGFuZygpIHNlbGVjdG9yXG5cdFx0Ly8gaXMgYmFzZWQgc29sZWx5IG9uIHRoZSBlbGVtZW50J3MgbGFuZ3VhZ2UgdmFsdWVcblx0XHQvLyBiZWluZyBlcXVhbCB0byB0aGUgaWRlbnRpZmllciBDLFxuXHRcdC8vIG9yIGJlZ2lubmluZyB3aXRoIHRoZSBpZGVudGlmaWVyIEMgaW1tZWRpYXRlbHkgZm9sbG93ZWQgYnkgXCItXCIuXG5cdFx0Ly8gVGhlIG1hdGNoaW5nIG9mIEMgYWdhaW5zdCB0aGUgZWxlbWVudCdzIGxhbmd1YWdlIHZhbHVlIGlzIHBlcmZvcm1lZCBjYXNlLWluc2Vuc2l0aXZlbHkuXG5cdFx0Ly8gVGhlIGlkZW50aWZpZXIgQyBkb2VzIG5vdCBoYXZlIHRvIGJlIGEgdmFsaWQgbGFuZ3VhZ2UgbmFtZS5cIlxuXHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jbGFuZy1wc2V1ZG9cblx0XHRcImxhbmdcIjogbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggbGFuZyApIHtcblx0XHRcdC8vIGxhbmcgdmFsdWUgbXVzdCBiZSBhIHZhbGlkIGlkZW50aWZpZXJcblx0XHRcdGlmICggIXJpZGVudGlmaWVyLnRlc3QobGFuZyB8fCBcIlwiKSApIHtcblx0XHRcdFx0U2l6emxlLmVycm9yKCBcInVuc3VwcG9ydGVkIGxhbmc6IFwiICsgbGFuZyApO1xuXHRcdFx0fVxuXHRcdFx0bGFuZyA9IGxhbmcucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgZWxlbUxhbmc7XG5cdFx0XHRcdGRvIHtcblx0XHRcdFx0XHRpZiAoIChlbGVtTGFuZyA9IGRvY3VtZW50SXNIVE1MID9cblx0XHRcdFx0XHRcdGVsZW0ubGFuZyA6XG5cdFx0XHRcdFx0XHRlbGVtLmdldEF0dHJpYnV0ZShcInhtbDpsYW5nXCIpIHx8IGVsZW0uZ2V0QXR0cmlidXRlKFwibGFuZ1wiKSkgKSB7XG5cblx0XHRcdFx0XHRcdGVsZW1MYW5nID0gZWxlbUxhbmcudG9Mb3dlckNhc2UoKTtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtTGFuZyA9PT0gbGFuZyB8fCBlbGVtTGFuZy5pbmRleE9mKCBsYW5nICsgXCItXCIgKSA9PT0gMDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gd2hpbGUgKCAoZWxlbSA9IGVsZW0ucGFyZW50Tm9kZSkgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApO1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9O1xuXHRcdH0pLFxuXG5cdFx0Ly8gTWlzY2VsbGFuZW91c1xuXHRcdFwidGFyZ2V0XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIGhhc2ggPSB3aW5kb3cubG9jYXRpb24gJiYgd2luZG93LmxvY2F0aW9uLmhhc2g7XG5cdFx0XHRyZXR1cm4gaGFzaCAmJiBoYXNoLnNsaWNlKCAxICkgPT09IGVsZW0uaWQ7XG5cdFx0fSxcblxuXHRcdFwicm9vdFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtID09PSBkb2NFbGVtO1xuXHRcdH0sXG5cblx0XHRcImZvY3VzXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0gPT09IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgJiYgKCFkb2N1bWVudC5oYXNGb2N1cyB8fCBkb2N1bWVudC5oYXNGb2N1cygpKSAmJiAhIShlbGVtLnR5cGUgfHwgZWxlbS5ocmVmIHx8IH5lbGVtLnRhYkluZGV4KTtcblx0XHR9LFxuXG5cdFx0Ly8gQm9vbGVhbiBwcm9wZXJ0aWVzXG5cdFx0XCJlbmFibGVkXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IGZhbHNlO1xuXHRcdH0sXG5cblx0XHRcImRpc2FibGVkXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IHRydWU7XG5cdFx0fSxcblxuXHRcdFwiY2hlY2tlZFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdC8vIEluIENTUzMsIDpjaGVja2VkIHNob3VsZCByZXR1cm4gYm90aCBjaGVja2VkIGFuZCBzZWxlY3RlZCBlbGVtZW50c1xuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvMjAxMS9SRUMtY3NzMy1zZWxlY3RvcnMtMjAxMTA5MjkvI2NoZWNrZWRcblx0XHRcdHZhciBub2RlTmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiAobm9kZU5hbWUgPT09IFwiaW5wdXRcIiAmJiAhIWVsZW0uY2hlY2tlZCkgfHwgKG5vZGVOYW1lID09PSBcIm9wdGlvblwiICYmICEhZWxlbS5zZWxlY3RlZCk7XG5cdFx0fSxcblxuXHRcdFwic2VsZWN0ZWRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHQvLyBBY2Nlc3NpbmcgdGhpcyBwcm9wZXJ0eSBtYWtlcyBzZWxlY3RlZC1ieS1kZWZhdWx0XG5cdFx0XHQvLyBvcHRpb25zIGluIFNhZmFyaSB3b3JrIHByb3Blcmx5XG5cdFx0XHRpZiAoIGVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0ZWxlbS5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBlbGVtLnNlbGVjdGVkID09PSB0cnVlO1xuXHRcdH0sXG5cblx0XHQvLyBDb250ZW50c1xuXHRcdFwiZW1wdHlcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2VtcHR5LXBzZXVkb1xuXHRcdFx0Ly8gOmVtcHR5IGlzIG5lZ2F0ZWQgYnkgZWxlbWVudCAoMSkgb3IgY29udGVudCBub2RlcyAodGV4dDogMzsgY2RhdGE6IDQ7IGVudGl0eSByZWY6IDUpLFxuXHRcdFx0Ly8gICBidXQgbm90IGJ5IG90aGVycyAoY29tbWVudDogODsgcHJvY2Vzc2luZyBpbnN0cnVjdGlvbjogNzsgZXRjLilcblx0XHRcdC8vIG5vZGVUeXBlIDwgNiB3b3JrcyBiZWNhdXNlIGF0dHJpYnV0ZXMgKDIpIGRvIG5vdCBhcHBlYXIgYXMgY2hpbGRyZW5cblx0XHRcdGZvciAoIGVsZW0gPSBlbGVtLmZpcnN0Q2hpbGQ7IGVsZW07IGVsZW0gPSBlbGVtLm5leHRTaWJsaW5nICkge1xuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPCA2ICkge1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fSxcblxuXHRcdFwicGFyZW50XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuICFFeHByLnBzZXVkb3NbXCJlbXB0eVwiXSggZWxlbSApO1xuXHRcdH0sXG5cblx0XHQvLyBFbGVtZW50L2lucHV0IHR5cGVzXG5cdFx0XCJoZWFkZXJcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gcmhlYWRlci50ZXN0KCBlbGVtLm5vZGVOYW1lICk7XG5cdFx0fSxcblxuXHRcdFwiaW5wdXRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gcmlucHV0cy50ZXN0KCBlbGVtLm5vZGVOYW1lICk7XG5cdFx0fSxcblxuXHRcdFwiYnV0dG9uXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gbmFtZSA9PT0gXCJpbnB1dFwiICYmIGVsZW0udHlwZSA9PT0gXCJidXR0b25cIiB8fCBuYW1lID09PSBcImJ1dHRvblwiO1xuXHRcdH0sXG5cblx0XHRcInRleHRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgYXR0cjtcblx0XHRcdHJldHVybiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiaW5wdXRcIiAmJlxuXHRcdFx0XHRlbGVtLnR5cGUgPT09IFwidGV4dFwiICYmXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUU8OFxuXHRcdFx0XHQvLyBOZXcgSFRNTDUgYXR0cmlidXRlIHZhbHVlcyAoZS5nLiwgXCJzZWFyY2hcIikgYXBwZWFyIHdpdGggZWxlbS50eXBlID09PSBcInRleHRcIlxuXHRcdFx0XHQoIChhdHRyID0gZWxlbS5nZXRBdHRyaWJ1dGUoXCJ0eXBlXCIpKSA9PSBudWxsIHx8IGF0dHIudG9Mb3dlckNhc2UoKSA9PT0gXCJ0ZXh0XCIgKTtcblx0XHR9LFxuXG5cdFx0Ly8gUG9zaXRpb24taW4tY29sbGVjdGlvblxuXHRcdFwiZmlyc3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBbIDAgXTtcblx0XHR9KSxcblxuXHRcdFwibGFzdFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcblx0XHRcdHJldHVybiBbIGxlbmd0aCAtIDEgXTtcblx0XHR9KSxcblxuXHRcdFwiZXFcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xuXHRcdFx0cmV0dXJuIFsgYXJndW1lbnQgPCAwID8gYXJndW1lbnQgKyBsZW5ndGggOiBhcmd1bWVudCBdO1xuXHRcdH0pLFxuXG5cdFx0XCJldmVuXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xuXHRcdFx0dmFyIGkgPSAwO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpICs9IDIgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0pLFxuXG5cdFx0XCJvZGRcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7XG5cdFx0XHR2YXIgaSA9IDE7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkgKz0gMiApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSksXG5cblx0XHRcImx0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcblx0XHRcdHZhciBpID0gYXJndW1lbnQgPCAwID8gYXJndW1lbnQgKyBsZW5ndGggOiBhcmd1bWVudDtcblx0XHRcdGZvciAoIDsgLS1pID49IDA7ICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9KSxcblxuXHRcdFwiZ3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xuXHRcdFx0dmFyIGkgPSBhcmd1bWVudCA8IDAgPyBhcmd1bWVudCArIGxlbmd0aCA6IGFyZ3VtZW50O1xuXHRcdFx0Zm9yICggOyArK2kgPCBsZW5ndGg7ICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9KVxuXHR9XG59O1xuXG5FeHByLnBzZXVkb3NbXCJudGhcIl0gPSBFeHByLnBzZXVkb3NbXCJlcVwiXTtcblxuLy8gQWRkIGJ1dHRvbi9pbnB1dCB0eXBlIHBzZXVkb3NcbmZvciAoIGkgaW4geyByYWRpbzogdHJ1ZSwgY2hlY2tib3g6IHRydWUsIGZpbGU6IHRydWUsIHBhc3N3b3JkOiB0cnVlLCBpbWFnZTogdHJ1ZSB9ICkge1xuXHRFeHByLnBzZXVkb3NbIGkgXSA9IGNyZWF0ZUlucHV0UHNldWRvKCBpICk7XG59XG5mb3IgKCBpIGluIHsgc3VibWl0OiB0cnVlLCByZXNldDogdHJ1ZSB9ICkge1xuXHRFeHByLnBzZXVkb3NbIGkgXSA9IGNyZWF0ZUJ1dHRvblBzZXVkbyggaSApO1xufVxuXG4vLyBFYXN5IEFQSSBmb3IgY3JlYXRpbmcgbmV3IHNldEZpbHRlcnNcbmZ1bmN0aW9uIHNldEZpbHRlcnMoKSB7fVxuc2V0RmlsdGVycy5wcm90b3R5cGUgPSBFeHByLmZpbHRlcnMgPSBFeHByLnBzZXVkb3M7XG5FeHByLnNldEZpbHRlcnMgPSBuZXcgc2V0RmlsdGVycygpO1xuXG50b2tlbml6ZSA9IFNpenpsZS50b2tlbml6ZSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgcGFyc2VPbmx5ICkge1xuXHR2YXIgbWF0Y2hlZCwgbWF0Y2gsIHRva2VucywgdHlwZSxcblx0XHRzb0ZhciwgZ3JvdXBzLCBwcmVGaWx0ZXJzLFxuXHRcdGNhY2hlZCA9IHRva2VuQ2FjaGVbIHNlbGVjdG9yICsgXCIgXCIgXTtcblxuXHRpZiAoIGNhY2hlZCApIHtcblx0XHRyZXR1cm4gcGFyc2VPbmx5ID8gMCA6IGNhY2hlZC5zbGljZSggMCApO1xuXHR9XG5cblx0c29GYXIgPSBzZWxlY3Rvcjtcblx0Z3JvdXBzID0gW107XG5cdHByZUZpbHRlcnMgPSBFeHByLnByZUZpbHRlcjtcblxuXHR3aGlsZSAoIHNvRmFyICkge1xuXG5cdFx0Ly8gQ29tbWEgYW5kIGZpcnN0IHJ1blxuXHRcdGlmICggIW1hdGNoZWQgfHwgKG1hdGNoID0gcmNvbW1hLmV4ZWMoIHNvRmFyICkpICkge1xuXHRcdFx0aWYgKCBtYXRjaCApIHtcblx0XHRcdFx0Ly8gRG9uJ3QgY29uc3VtZSB0cmFpbGluZyBjb21tYXMgYXMgdmFsaWRcblx0XHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hbMF0ubGVuZ3RoICkgfHwgc29GYXI7XG5cdFx0XHR9XG5cdFx0XHRncm91cHMucHVzaCggKHRva2VucyA9IFtdKSApO1xuXHRcdH1cblxuXHRcdG1hdGNoZWQgPSBmYWxzZTtcblxuXHRcdC8vIENvbWJpbmF0b3JzXG5cdFx0aWYgKCAobWF0Y2ggPSByY29tYmluYXRvcnMuZXhlYyggc29GYXIgKSkgKSB7XG5cdFx0XHRtYXRjaGVkID0gbWF0Y2guc2hpZnQoKTtcblx0XHRcdHRva2Vucy5wdXNoKHtcblx0XHRcdFx0dmFsdWU6IG1hdGNoZWQsXG5cdFx0XHRcdC8vIENhc3QgZGVzY2VuZGFudCBjb21iaW5hdG9ycyB0byBzcGFjZVxuXHRcdFx0XHR0eXBlOiBtYXRjaFswXS5yZXBsYWNlKCBydHJpbSwgXCIgXCIgKVxuXHRcdFx0fSk7XG5cdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaGVkLmxlbmd0aCApO1xuXHRcdH1cblxuXHRcdC8vIEZpbHRlcnNcblx0XHRmb3IgKCB0eXBlIGluIEV4cHIuZmlsdGVyICkge1xuXHRcdFx0aWYgKCAobWF0Y2ggPSBtYXRjaEV4cHJbIHR5cGUgXS5leGVjKCBzb0ZhciApKSAmJiAoIXByZUZpbHRlcnNbIHR5cGUgXSB8fFxuXHRcdFx0XHQobWF0Y2ggPSBwcmVGaWx0ZXJzWyB0eXBlIF0oIG1hdGNoICkpKSApIHtcblx0XHRcdFx0bWF0Y2hlZCA9IG1hdGNoLnNoaWZ0KCk7XG5cdFx0XHRcdHRva2Vucy5wdXNoKHtcblx0XHRcdFx0XHR2YWx1ZTogbWF0Y2hlZCxcblx0XHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRcdG1hdGNoZXM6IG1hdGNoXG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaGVkLmxlbmd0aCApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICggIW1hdGNoZWQgKSB7XG5cdFx0XHRicmVhaztcblx0XHR9XG5cdH1cblxuXHQvLyBSZXR1cm4gdGhlIGxlbmd0aCBvZiB0aGUgaW52YWxpZCBleGNlc3Ncblx0Ly8gaWYgd2UncmUganVzdCBwYXJzaW5nXG5cdC8vIE90aGVyd2lzZSwgdGhyb3cgYW4gZXJyb3Igb3IgcmV0dXJuIHRva2Vuc1xuXHRyZXR1cm4gcGFyc2VPbmx5ID9cblx0XHRzb0Zhci5sZW5ndGggOlxuXHRcdHNvRmFyID9cblx0XHRcdFNpenpsZS5lcnJvciggc2VsZWN0b3IgKSA6XG5cdFx0XHQvLyBDYWNoZSB0aGUgdG9rZW5zXG5cdFx0XHR0b2tlbkNhY2hlKCBzZWxlY3RvciwgZ3JvdXBzICkuc2xpY2UoIDAgKTtcbn07XG5cbmZ1bmN0aW9uIHRvU2VsZWN0b3IoIHRva2VucyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGxlbiA9IHRva2Vucy5sZW5ndGgsXG5cdFx0c2VsZWN0b3IgPSBcIlwiO1xuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRzZWxlY3RvciArPSB0b2tlbnNbaV0udmFsdWU7XG5cdH1cblx0cmV0dXJuIHNlbGVjdG9yO1xufVxuXG5mdW5jdGlvbiBhZGRDb21iaW5hdG9yKCBtYXRjaGVyLCBjb21iaW5hdG9yLCBiYXNlICkge1xuXHR2YXIgZGlyID0gY29tYmluYXRvci5kaXIsXG5cdFx0Y2hlY2tOb25FbGVtZW50cyA9IGJhc2UgJiYgZGlyID09PSBcInBhcmVudE5vZGVcIixcblx0XHRkb25lTmFtZSA9IGRvbmUrKztcblxuXHRyZXR1cm4gY29tYmluYXRvci5maXJzdCA/XG5cdFx0Ly8gQ2hlY2sgYWdhaW5zdCBjbG9zZXN0IGFuY2VzdG9yL3ByZWNlZGluZyBlbGVtZW50XG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHdoaWxlICggKGVsZW0gPSBlbGVtWyBkaXIgXSkgKSB7XG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuXHRcdFx0XHRcdHJldHVybiBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gOlxuXG5cdFx0Ly8gQ2hlY2sgYWdhaW5zdCBhbGwgYW5jZXN0b3IvcHJlY2VkaW5nIGVsZW1lbnRzXG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHZhciBvbGRDYWNoZSwgb3V0ZXJDYWNoZSxcblx0XHRcdFx0bmV3Q2FjaGUgPSBbIGRpcnJ1bnMsIGRvbmVOYW1lIF07XG5cblx0XHRcdC8vIFdlIGNhbid0IHNldCBhcmJpdHJhcnkgZGF0YSBvbiBYTUwgbm9kZXMsIHNvIHRoZXkgZG9uJ3QgYmVuZWZpdCBmcm9tIGRpciBjYWNoaW5nXG5cdFx0XHRpZiAoIHhtbCApIHtcblx0XHRcdFx0d2hpbGUgKCAoZWxlbSA9IGVsZW1bIGRpciBdKSApIHtcblx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgY2hlY2tOb25FbGVtZW50cyApIHtcblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlciggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0d2hpbGUgKCAoZWxlbSA9IGVsZW1bIGRpciBdKSApIHtcblx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgY2hlY2tOb25FbGVtZW50cyApIHtcblx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBlbGVtWyBleHBhbmRvIF0gfHwgKGVsZW1bIGV4cGFuZG8gXSA9IHt9KTtcblx0XHRcdFx0XHRcdGlmICggKG9sZENhY2hlID0gb3V0ZXJDYWNoZVsgZGlyIF0pICYmXG5cdFx0XHRcdFx0XHRcdG9sZENhY2hlWyAwIF0gPT09IGRpcnJ1bnMgJiYgb2xkQ2FjaGVbIDEgXSA9PT0gZG9uZU5hbWUgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gQXNzaWduIHRvIG5ld0NhY2hlIHNvIHJlc3VsdHMgYmFjay1wcm9wYWdhdGUgdG8gcHJldmlvdXMgZWxlbWVudHNcblx0XHRcdFx0XHRcdFx0cmV0dXJuIChuZXdDYWNoZVsgMiBdID0gb2xkQ2FjaGVbIDIgXSk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHQvLyBSZXVzZSBuZXdjYWNoZSBzbyByZXN1bHRzIGJhY2stcHJvcGFnYXRlIHRvIHByZXZpb3VzIGVsZW1lbnRzXG5cdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGVbIGRpciBdID0gbmV3Q2FjaGU7XG5cblx0XHRcdFx0XHRcdFx0Ly8gQSBtYXRjaCBtZWFucyB3ZSdyZSBkb25lOyBhIGZhaWwgbWVhbnMgd2UgaGF2ZSB0byBrZWVwIGNoZWNraW5nXG5cdFx0XHRcdFx0XHRcdGlmICggKG5ld0NhY2hlWyAyIF0gPSBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xufVxuXG5mdW5jdGlvbiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSB7XG5cdHJldHVybiBtYXRjaGVycy5sZW5ndGggPiAxID9cblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0dmFyIGkgPSBtYXRjaGVycy5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0aWYgKCAhbWF0Y2hlcnNbaV0oIGVsZW0sIGNvbnRleHQsIHhtbCApICkge1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fSA6XG5cdFx0bWF0Y2hlcnNbMF07XG59XG5cbmZ1bmN0aW9uIG11bHRpcGxlQ29udGV4dHMoIHNlbGVjdG9yLCBjb250ZXh0cywgcmVzdWx0cyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGxlbiA9IGNvbnRleHRzLmxlbmd0aDtcblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0U2l6emxlKCBzZWxlY3RvciwgY29udGV4dHNbaV0sIHJlc3VsdHMgKTtcblx0fVxuXHRyZXR1cm4gcmVzdWx0cztcbn1cblxuZnVuY3Rpb24gY29uZGVuc2UoIHVubWF0Y2hlZCwgbWFwLCBmaWx0ZXIsIGNvbnRleHQsIHhtbCApIHtcblx0dmFyIGVsZW0sXG5cdFx0bmV3VW5tYXRjaGVkID0gW10sXG5cdFx0aSA9IDAsXG5cdFx0bGVuID0gdW5tYXRjaGVkLmxlbmd0aCxcblx0XHRtYXBwZWQgPSBtYXAgIT0gbnVsbDtcblxuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRpZiAoIChlbGVtID0gdW5tYXRjaGVkW2ldKSApIHtcblx0XHRcdGlmICggIWZpbHRlciB8fCBmaWx0ZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApICkge1xuXHRcdFx0XHRuZXdVbm1hdGNoZWQucHVzaCggZWxlbSApO1xuXHRcdFx0XHRpZiAoIG1hcHBlZCApIHtcblx0XHRcdFx0XHRtYXAucHVzaCggaSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIG5ld1VubWF0Y2hlZDtcbn1cblxuZnVuY3Rpb24gc2V0TWF0Y2hlciggcHJlRmlsdGVyLCBzZWxlY3RvciwgbWF0Y2hlciwgcG9zdEZpbHRlciwgcG9zdEZpbmRlciwgcG9zdFNlbGVjdG9yICkge1xuXHRpZiAoIHBvc3RGaWx0ZXIgJiYgIXBvc3RGaWx0ZXJbIGV4cGFuZG8gXSApIHtcblx0XHRwb3N0RmlsdGVyID0gc2V0TWF0Y2hlciggcG9zdEZpbHRlciApO1xuXHR9XG5cdGlmICggcG9zdEZpbmRlciAmJiAhcG9zdEZpbmRlclsgZXhwYW5kbyBdICkge1xuXHRcdHBvc3RGaW5kZXIgPSBzZXRNYXRjaGVyKCBwb3N0RmluZGVyLCBwb3N0U2VsZWN0b3IgKTtcblx0fVxuXHRyZXR1cm4gbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWVkLCByZXN1bHRzLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0dmFyIHRlbXAsIGksIGVsZW0sXG5cdFx0XHRwcmVNYXAgPSBbXSxcblx0XHRcdHBvc3RNYXAgPSBbXSxcblx0XHRcdHByZWV4aXN0aW5nID0gcmVzdWx0cy5sZW5ndGgsXG5cblx0XHRcdC8vIEdldCBpbml0aWFsIGVsZW1lbnRzIGZyb20gc2VlZCBvciBjb250ZXh0XG5cdFx0XHRlbGVtcyA9IHNlZWQgfHwgbXVsdGlwbGVDb250ZXh0cyggc2VsZWN0b3IgfHwgXCIqXCIsIGNvbnRleHQubm9kZVR5cGUgPyBbIGNvbnRleHQgXSA6IGNvbnRleHQsIFtdICksXG5cblx0XHRcdC8vIFByZWZpbHRlciB0byBnZXQgbWF0Y2hlciBpbnB1dCwgcHJlc2VydmluZyBhIG1hcCBmb3Igc2VlZC1yZXN1bHRzIHN5bmNocm9uaXphdGlvblxuXHRcdFx0bWF0Y2hlckluID0gcHJlRmlsdGVyICYmICggc2VlZCB8fCAhc2VsZWN0b3IgKSA/XG5cdFx0XHRcdGNvbmRlbnNlKCBlbGVtcywgcHJlTWFwLCBwcmVGaWx0ZXIsIGNvbnRleHQsIHhtbCApIDpcblx0XHRcdFx0ZWxlbXMsXG5cblx0XHRcdG1hdGNoZXJPdXQgPSBtYXRjaGVyID9cblx0XHRcdFx0Ly8gSWYgd2UgaGF2ZSBhIHBvc3RGaW5kZXIsIG9yIGZpbHRlcmVkIHNlZWQsIG9yIG5vbi1zZWVkIHBvc3RGaWx0ZXIgb3IgcHJlZXhpc3RpbmcgcmVzdWx0cyxcblx0XHRcdFx0cG9zdEZpbmRlciB8fCAoIHNlZWQgPyBwcmVGaWx0ZXIgOiBwcmVleGlzdGluZyB8fCBwb3N0RmlsdGVyICkgP1xuXG5cdFx0XHRcdFx0Ly8gLi4uaW50ZXJtZWRpYXRlIHByb2Nlc3NpbmcgaXMgbmVjZXNzYXJ5XG5cdFx0XHRcdFx0W10gOlxuXG5cdFx0XHRcdFx0Ly8gLi4ub3RoZXJ3aXNlIHVzZSByZXN1bHRzIGRpcmVjdGx5XG5cdFx0XHRcdFx0cmVzdWx0cyA6XG5cdFx0XHRcdG1hdGNoZXJJbjtcblxuXHRcdC8vIEZpbmQgcHJpbWFyeSBtYXRjaGVzXG5cdFx0aWYgKCBtYXRjaGVyICkge1xuXHRcdFx0bWF0Y2hlciggbWF0Y2hlckluLCBtYXRjaGVyT3V0LCBjb250ZXh0LCB4bWwgKTtcblx0XHR9XG5cblx0XHQvLyBBcHBseSBwb3N0RmlsdGVyXG5cdFx0aWYgKCBwb3N0RmlsdGVyICkge1xuXHRcdFx0dGVtcCA9IGNvbmRlbnNlKCBtYXRjaGVyT3V0LCBwb3N0TWFwICk7XG5cdFx0XHRwb3N0RmlsdGVyKCB0ZW1wLCBbXSwgY29udGV4dCwgeG1sICk7XG5cblx0XHRcdC8vIFVuLW1hdGNoIGZhaWxpbmcgZWxlbWVudHMgYnkgbW92aW5nIHRoZW0gYmFjayB0byBtYXRjaGVySW5cblx0XHRcdGkgPSB0ZW1wLmxlbmd0aDtcblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRpZiAoIChlbGVtID0gdGVtcFtpXSkgKSB7XG5cdFx0XHRcdFx0bWF0Y2hlck91dFsgcG9zdE1hcFtpXSBdID0gIShtYXRjaGVySW5bIHBvc3RNYXBbaV0gXSA9IGVsZW0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCBzZWVkICkge1xuXHRcdFx0aWYgKCBwb3N0RmluZGVyIHx8IHByZUZpbHRlciApIHtcblx0XHRcdFx0aWYgKCBwb3N0RmluZGVyICkge1xuXHRcdFx0XHRcdC8vIEdldCB0aGUgZmluYWwgbWF0Y2hlck91dCBieSBjb25kZW5zaW5nIHRoaXMgaW50ZXJtZWRpYXRlIGludG8gcG9zdEZpbmRlciBjb250ZXh0c1xuXHRcdFx0XHRcdHRlbXAgPSBbXTtcblx0XHRcdFx0XHRpID0gbWF0Y2hlck91dC5sZW5ndGg7XG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRpZiAoIChlbGVtID0gbWF0Y2hlck91dFtpXSkgKSB7XG5cdFx0XHRcdFx0XHRcdC8vIFJlc3RvcmUgbWF0Y2hlckluIHNpbmNlIGVsZW0gaXMgbm90IHlldCBhIGZpbmFsIG1hdGNoXG5cdFx0XHRcdFx0XHRcdHRlbXAucHVzaCggKG1hdGNoZXJJbltpXSA9IGVsZW0pICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHBvc3RGaW5kZXIoIG51bGwsIChtYXRjaGVyT3V0ID0gW10pLCB0ZW1wLCB4bWwgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIE1vdmUgbWF0Y2hlZCBlbGVtZW50cyBmcm9tIHNlZWQgdG8gcmVzdWx0cyB0byBrZWVwIHRoZW0gc3luY2hyb25pemVkXG5cdFx0XHRcdGkgPSBtYXRjaGVyT3V0Lmxlbmd0aDtcblx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0aWYgKCAoZWxlbSA9IG1hdGNoZXJPdXRbaV0pICYmXG5cdFx0XHRcdFx0XHQodGVtcCA9IHBvc3RGaW5kZXIgPyBpbmRleE9mLmNhbGwoIHNlZWQsIGVsZW0gKSA6IHByZU1hcFtpXSkgPiAtMSApIHtcblxuXHRcdFx0XHRcdFx0c2VlZFt0ZW1wXSA9ICEocmVzdWx0c1t0ZW1wXSA9IGVsZW0pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0Ly8gQWRkIGVsZW1lbnRzIHRvIHJlc3VsdHMsIHRocm91Z2ggcG9zdEZpbmRlciBpZiBkZWZpbmVkXG5cdFx0fSBlbHNlIHtcblx0XHRcdG1hdGNoZXJPdXQgPSBjb25kZW5zZShcblx0XHRcdFx0bWF0Y2hlck91dCA9PT0gcmVzdWx0cyA/XG5cdFx0XHRcdFx0bWF0Y2hlck91dC5zcGxpY2UoIHByZWV4aXN0aW5nLCBtYXRjaGVyT3V0Lmxlbmd0aCApIDpcblx0XHRcdFx0XHRtYXRjaGVyT3V0XG5cdFx0XHQpO1xuXHRcdFx0aWYgKCBwb3N0RmluZGVyICkge1xuXHRcdFx0XHRwb3N0RmluZGVyKCBudWxsLCByZXN1bHRzLCBtYXRjaGVyT3V0LCB4bWwgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIG1hdGNoZXJPdXQgKTtcblx0XHRcdH1cblx0XHR9XG5cdH0pO1xufVxuXG5mdW5jdGlvbiBtYXRjaGVyRnJvbVRva2VucyggdG9rZW5zICkge1xuXHR2YXIgY2hlY2tDb250ZXh0LCBtYXRjaGVyLCBqLFxuXHRcdGxlbiA9IHRva2Vucy5sZW5ndGgsXG5cdFx0bGVhZGluZ1JlbGF0aXZlID0gRXhwci5yZWxhdGl2ZVsgdG9rZW5zWzBdLnR5cGUgXSxcblx0XHRpbXBsaWNpdFJlbGF0aXZlID0gbGVhZGluZ1JlbGF0aXZlIHx8IEV4cHIucmVsYXRpdmVbXCIgXCJdLFxuXHRcdGkgPSBsZWFkaW5nUmVsYXRpdmUgPyAxIDogMCxcblxuXHRcdC8vIFRoZSBmb3VuZGF0aW9uYWwgbWF0Y2hlciBlbnN1cmVzIHRoYXQgZWxlbWVudHMgYXJlIHJlYWNoYWJsZSBmcm9tIHRvcC1sZXZlbCBjb250ZXh0KHMpXG5cdFx0bWF0Y2hDb250ZXh0ID0gYWRkQ29tYmluYXRvciggZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbSA9PT0gY2hlY2tDb250ZXh0O1xuXHRcdH0sIGltcGxpY2l0UmVsYXRpdmUsIHRydWUgKSxcblx0XHRtYXRjaEFueUNvbnRleHQgPSBhZGRDb21iaW5hdG9yKCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBpbmRleE9mLmNhbGwoIGNoZWNrQ29udGV4dCwgZWxlbSApID4gLTE7XG5cdFx0fSwgaW1wbGljaXRSZWxhdGl2ZSwgdHJ1ZSApLFxuXHRcdG1hdGNoZXJzID0gWyBmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0cmV0dXJuICggIWxlYWRpbmdSZWxhdGl2ZSAmJiAoIHhtbCB8fCBjb250ZXh0ICE9PSBvdXRlcm1vc3RDb250ZXh0ICkgKSB8fCAoXG5cdFx0XHRcdChjaGVja0NvbnRleHQgPSBjb250ZXh0KS5ub2RlVHlwZSA/XG5cdFx0XHRcdFx0bWF0Y2hDb250ZXh0KCBlbGVtLCBjb250ZXh0LCB4bWwgKSA6XG5cdFx0XHRcdFx0bWF0Y2hBbnlDb250ZXh0KCBlbGVtLCBjb250ZXh0LCB4bWwgKSApO1xuXHRcdH0gXTtcblxuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRpZiAoIChtYXRjaGVyID0gRXhwci5yZWxhdGl2ZVsgdG9rZW5zW2ldLnR5cGUgXSkgKSB7XG5cdFx0XHRtYXRjaGVycyA9IFsgYWRkQ29tYmluYXRvcihlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSwgbWF0Y2hlcikgXTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWF0Y2hlciA9IEV4cHIuZmlsdGVyWyB0b2tlbnNbaV0udHlwZSBdLmFwcGx5KCBudWxsLCB0b2tlbnNbaV0ubWF0Y2hlcyApO1xuXG5cdFx0XHQvLyBSZXR1cm4gc3BlY2lhbCB1cG9uIHNlZWluZyBhIHBvc2l0aW9uYWwgbWF0Y2hlclxuXHRcdFx0aWYgKCBtYXRjaGVyWyBleHBhbmRvIF0gKSB7XG5cdFx0XHRcdC8vIEZpbmQgdGhlIG5leHQgcmVsYXRpdmUgb3BlcmF0b3IgKGlmIGFueSkgZm9yIHByb3BlciBoYW5kbGluZ1xuXHRcdFx0XHRqID0gKytpO1xuXHRcdFx0XHRmb3IgKCA7IGogPCBsZW47IGorKyApIHtcblx0XHRcdFx0XHRpZiAoIEV4cHIucmVsYXRpdmVbIHRva2Vuc1tqXS50eXBlIF0gKSB7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHNldE1hdGNoZXIoXG5cdFx0XHRcdFx0aSA+IDEgJiYgZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICksXG5cdFx0XHRcdFx0aSA+IDEgJiYgdG9TZWxlY3Rvcihcblx0XHRcdFx0XHRcdC8vIElmIHRoZSBwcmVjZWRpbmcgdG9rZW4gd2FzIGEgZGVzY2VuZGFudCBjb21iaW5hdG9yLCBpbnNlcnQgYW4gaW1wbGljaXQgYW55LWVsZW1lbnQgYCpgXG5cdFx0XHRcdFx0XHR0b2tlbnMuc2xpY2UoIDAsIGkgLSAxICkuY29uY2F0KHsgdmFsdWU6IHRva2Vuc1sgaSAtIDIgXS50eXBlID09PSBcIiBcIiA/IFwiKlwiIDogXCJcIiB9KVxuXHRcdFx0XHRcdCkucmVwbGFjZSggcnRyaW0sIFwiJDFcIiApLFxuXHRcdFx0XHRcdG1hdGNoZXIsXG5cdFx0XHRcdFx0aSA8IGogJiYgbWF0Y2hlckZyb21Ub2tlbnMoIHRva2Vucy5zbGljZSggaSwgaiApICksXG5cdFx0XHRcdFx0aiA8IGxlbiAmJiBtYXRjaGVyRnJvbVRva2VucyggKHRva2VucyA9IHRva2Vucy5zbGljZSggaiApKSApLFxuXHRcdFx0XHRcdGogPCBsZW4gJiYgdG9TZWxlY3RvciggdG9rZW5zIClcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHRcdG1hdGNoZXJzLnB1c2goIG1hdGNoZXIgKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICk7XG59XG5cbmZ1bmN0aW9uIG1hdGNoZXJGcm9tR3JvdXBNYXRjaGVycyggZWxlbWVudE1hdGNoZXJzLCBzZXRNYXRjaGVycyApIHtcblx0dmFyIGJ5U2V0ID0gc2V0TWF0Y2hlcnMubGVuZ3RoID4gMCxcblx0XHRieUVsZW1lbnQgPSBlbGVtZW50TWF0Y2hlcnMubGVuZ3RoID4gMCxcblx0XHRzdXBlck1hdGNoZXIgPSBmdW5jdGlvbiggc2VlZCwgY29udGV4dCwgeG1sLCByZXN1bHRzLCBvdXRlcm1vc3QgKSB7XG5cdFx0XHR2YXIgZWxlbSwgaiwgbWF0Y2hlcixcblx0XHRcdFx0bWF0Y2hlZENvdW50ID0gMCxcblx0XHRcdFx0aSA9IFwiMFwiLFxuXHRcdFx0XHR1bm1hdGNoZWQgPSBzZWVkICYmIFtdLFxuXHRcdFx0XHRzZXRNYXRjaGVkID0gW10sXG5cdFx0XHRcdGNvbnRleHRCYWNrdXAgPSBvdXRlcm1vc3RDb250ZXh0LFxuXHRcdFx0XHQvLyBXZSBtdXN0IGFsd2F5cyBoYXZlIGVpdGhlciBzZWVkIGVsZW1lbnRzIG9yIG91dGVybW9zdCBjb250ZXh0XG5cdFx0XHRcdGVsZW1zID0gc2VlZCB8fCBieUVsZW1lbnQgJiYgRXhwci5maW5kW1wiVEFHXCJdKCBcIipcIiwgb3V0ZXJtb3N0ICksXG5cdFx0XHRcdC8vIFVzZSBpbnRlZ2VyIGRpcnJ1bnMgaWZmIHRoaXMgaXMgdGhlIG91dGVybW9zdCBtYXRjaGVyXG5cdFx0XHRcdGRpcnJ1bnNVbmlxdWUgPSAoZGlycnVucyArPSBjb250ZXh0QmFja3VwID09IG51bGwgPyAxIDogTWF0aC5yYW5kb20oKSB8fCAwLjEpLFxuXHRcdFx0XHRsZW4gPSBlbGVtcy5sZW5ndGg7XG5cblx0XHRcdGlmICggb3V0ZXJtb3N0ICkge1xuXHRcdFx0XHRvdXRlcm1vc3RDb250ZXh0ID0gY29udGV4dCAhPT0gZG9jdW1lbnQgJiYgY29udGV4dDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIGVsZW1lbnRzIHBhc3NpbmcgZWxlbWVudE1hdGNoZXJzIGRpcmVjdGx5IHRvIHJlc3VsdHNcblx0XHRcdC8vIEtlZXAgYGlgIGEgc3RyaW5nIGlmIHRoZXJlIGFyZSBubyBlbGVtZW50cyBzbyBgbWF0Y2hlZENvdW50YCB3aWxsIGJlIFwiMDBcIiBiZWxvd1xuXHRcdFx0Ly8gU3VwcG9ydDogSUU8OSwgU2FmYXJpXG5cdFx0XHQvLyBUb2xlcmF0ZSBOb2RlTGlzdCBwcm9wZXJ0aWVzIChJRTogXCJsZW5ndGhcIjsgU2FmYXJpOiA8bnVtYmVyPikgbWF0Y2hpbmcgZWxlbWVudHMgYnkgaWRcblx0XHRcdGZvciAoIDsgaSAhPT0gbGVuICYmIChlbGVtID0gZWxlbXNbaV0pICE9IG51bGw7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBieUVsZW1lbnQgJiYgZWxlbSApIHtcblx0XHRcdFx0XHRqID0gMDtcblx0XHRcdFx0XHR3aGlsZSAoIChtYXRjaGVyID0gZWxlbWVudE1hdGNoZXJzW2orK10pICkge1xuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIG91dGVybW9zdCApIHtcblx0XHRcdFx0XHRcdGRpcnJ1bnMgPSBkaXJydW5zVW5pcXVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFRyYWNrIHVubWF0Y2hlZCBlbGVtZW50cyBmb3Igc2V0IGZpbHRlcnNcblx0XHRcdFx0aWYgKCBieVNldCApIHtcblx0XHRcdFx0XHQvLyBUaGV5IHdpbGwgaGF2ZSBnb25lIHRocm91Z2ggYWxsIHBvc3NpYmxlIG1hdGNoZXJzXG5cdFx0XHRcdFx0aWYgKCAoZWxlbSA9ICFtYXRjaGVyICYmIGVsZW0pICkge1xuXHRcdFx0XHRcdFx0bWF0Y2hlZENvdW50LS07XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gTGVuZ3RoZW4gdGhlIGFycmF5IGZvciBldmVyeSBlbGVtZW50LCBtYXRjaGVkIG9yIG5vdFxuXHRcdFx0XHRcdGlmICggc2VlZCApIHtcblx0XHRcdFx0XHRcdHVubWF0Y2hlZC5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFwcGx5IHNldCBmaWx0ZXJzIHRvIHVubWF0Y2hlZCBlbGVtZW50c1xuXHRcdFx0bWF0Y2hlZENvdW50ICs9IGk7XG5cdFx0XHRpZiAoIGJ5U2V0ICYmIGkgIT09IG1hdGNoZWRDb3VudCApIHtcblx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdHdoaWxlICggKG1hdGNoZXIgPSBzZXRNYXRjaGVyc1tqKytdKSApIHtcblx0XHRcdFx0XHRtYXRjaGVyKCB1bm1hdGNoZWQsIHNldE1hdGNoZWQsIGNvbnRleHQsIHhtbCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCBzZWVkICkge1xuXHRcdFx0XHRcdC8vIFJlaW50ZWdyYXRlIGVsZW1lbnQgbWF0Y2hlcyB0byBlbGltaW5hdGUgdGhlIG5lZWQgZm9yIHNvcnRpbmdcblx0XHRcdFx0XHRpZiAoIG1hdGNoZWRDb3VudCA+IDAgKSB7XG5cdFx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCAhKHVubWF0Y2hlZFtpXSB8fCBzZXRNYXRjaGVkW2ldKSApIHtcblx0XHRcdFx0XHRcdFx0XHRzZXRNYXRjaGVkW2ldID0gcG9wLmNhbGwoIHJlc3VsdHMgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIERpc2NhcmQgaW5kZXggcGxhY2Vob2xkZXIgdmFsdWVzIHRvIGdldCBvbmx5IGFjdHVhbCBtYXRjaGVzXG5cdFx0XHRcdFx0c2V0TWF0Y2hlZCA9IGNvbmRlbnNlKCBzZXRNYXRjaGVkICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBZGQgbWF0Y2hlcyB0byByZXN1bHRzXG5cdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIHNldE1hdGNoZWQgKTtcblxuXHRcdFx0XHQvLyBTZWVkbGVzcyBzZXQgbWF0Y2hlcyBzdWNjZWVkaW5nIG11bHRpcGxlIHN1Y2Nlc3NmdWwgbWF0Y2hlcnMgc3RpcHVsYXRlIHNvcnRpbmdcblx0XHRcdFx0aWYgKCBvdXRlcm1vc3QgJiYgIXNlZWQgJiYgc2V0TWF0Y2hlZC5sZW5ndGggPiAwICYmXG5cdFx0XHRcdFx0KCBtYXRjaGVkQ291bnQgKyBzZXRNYXRjaGVycy5sZW5ndGggKSA+IDEgKSB7XG5cblx0XHRcdFx0XHRTaXp6bGUudW5pcXVlU29ydCggcmVzdWx0cyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIE92ZXJyaWRlIG1hbmlwdWxhdGlvbiBvZiBnbG9iYWxzIGJ5IG5lc3RlZCBtYXRjaGVyc1xuXHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XG5cdFx0XHRcdGRpcnJ1bnMgPSBkaXJydW5zVW5pcXVlO1xuXHRcdFx0XHRvdXRlcm1vc3RDb250ZXh0ID0gY29udGV4dEJhY2t1cDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHVubWF0Y2hlZDtcblx0XHR9O1xuXG5cdHJldHVybiBieVNldCA/XG5cdFx0bWFya0Z1bmN0aW9uKCBzdXBlck1hdGNoZXIgKSA6XG5cdFx0c3VwZXJNYXRjaGVyO1xufVxuXG5jb21waWxlID0gU2l6emxlLmNvbXBpbGUgPSBmdW5jdGlvbiggc2VsZWN0b3IsIG1hdGNoIC8qIEludGVybmFsIFVzZSBPbmx5ICovICkge1xuXHR2YXIgaSxcblx0XHRzZXRNYXRjaGVycyA9IFtdLFxuXHRcdGVsZW1lbnRNYXRjaGVycyA9IFtdLFxuXHRcdGNhY2hlZCA9IGNvbXBpbGVyQ2FjaGVbIHNlbGVjdG9yICsgXCIgXCIgXTtcblxuXHRpZiAoICFjYWNoZWQgKSB7XG5cdFx0Ly8gR2VuZXJhdGUgYSBmdW5jdGlvbiBvZiByZWN1cnNpdmUgZnVuY3Rpb25zIHRoYXQgY2FuIGJlIHVzZWQgdG8gY2hlY2sgZWFjaCBlbGVtZW50XG5cdFx0aWYgKCAhbWF0Y2ggKSB7XG5cdFx0XHRtYXRjaCA9IHRva2VuaXplKCBzZWxlY3RvciApO1xuXHRcdH1cblx0XHRpID0gbWF0Y2gubGVuZ3RoO1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0Y2FjaGVkID0gbWF0Y2hlckZyb21Ub2tlbnMoIG1hdGNoW2ldICk7XG5cdFx0XHRpZiAoIGNhY2hlZFsgZXhwYW5kbyBdICkge1xuXHRcdFx0XHRzZXRNYXRjaGVycy5wdXNoKCBjYWNoZWQgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGVsZW1lbnRNYXRjaGVycy5wdXNoKCBjYWNoZWQgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDYWNoZSB0aGUgY29tcGlsZWQgZnVuY3Rpb25cblx0XHRjYWNoZWQgPSBjb21waWxlckNhY2hlKCBzZWxlY3RvciwgbWF0Y2hlckZyb21Hcm91cE1hdGNoZXJzKCBlbGVtZW50TWF0Y2hlcnMsIHNldE1hdGNoZXJzICkgKTtcblxuXHRcdC8vIFNhdmUgc2VsZWN0b3IgYW5kIHRva2VuaXphdGlvblxuXHRcdGNhY2hlZC5zZWxlY3RvciA9IHNlbGVjdG9yO1xuXHR9XG5cdHJldHVybiBjYWNoZWQ7XG59O1xuXG4vKipcbiAqIEEgbG93LWxldmVsIHNlbGVjdGlvbiBmdW5jdGlvbiB0aGF0IHdvcmtzIHdpdGggU2l6emxlJ3MgY29tcGlsZWRcbiAqICBzZWxlY3RvciBmdW5jdGlvbnNcbiAqIEBwYXJhbSB7U3RyaW5nfEZ1bmN0aW9ufSBzZWxlY3RvciBBIHNlbGVjdG9yIG9yIGEgcHJlLWNvbXBpbGVkXG4gKiAgc2VsZWN0b3IgZnVuY3Rpb24gYnVpbHQgd2l0aCBTaXp6bGUuY29tcGlsZVxuICogQHBhcmFtIHtFbGVtZW50fSBjb250ZXh0XG4gKiBAcGFyYW0ge0FycmF5fSBbcmVzdWx0c11cbiAqIEBwYXJhbSB7QXJyYXl9IFtzZWVkXSBBIHNldCBvZiBlbGVtZW50cyB0byBtYXRjaCBhZ2FpbnN0XG4gKi9cbnNlbGVjdCA9IFNpenpsZS5zZWxlY3QgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKSB7XG5cdHZhciBpLCB0b2tlbnMsIHRva2VuLCB0eXBlLCBmaW5kLFxuXHRcdGNvbXBpbGVkID0gdHlwZW9mIHNlbGVjdG9yID09PSBcImZ1bmN0aW9uXCIgJiYgc2VsZWN0b3IsXG5cdFx0bWF0Y2ggPSAhc2VlZCAmJiB0b2tlbml6ZSggKHNlbGVjdG9yID0gY29tcGlsZWQuc2VsZWN0b3IgfHwgc2VsZWN0b3IpICk7XG5cblx0cmVzdWx0cyA9IHJlc3VsdHMgfHwgW107XG5cblx0Ly8gVHJ5IHRvIG1pbmltaXplIG9wZXJhdGlvbnMgaWYgdGhlcmUgaXMgbm8gc2VlZCBhbmQgb25seSBvbmUgZ3JvdXBcblx0aWYgKCBtYXRjaC5sZW5ndGggPT09IDEgKSB7XG5cblx0XHQvLyBUYWtlIGEgc2hvcnRjdXQgYW5kIHNldCB0aGUgY29udGV4dCBpZiB0aGUgcm9vdCBzZWxlY3RvciBpcyBhbiBJRFxuXHRcdHRva2VucyA9IG1hdGNoWzBdID0gbWF0Y2hbMF0uc2xpY2UoIDAgKTtcblx0XHRpZiAoIHRva2Vucy5sZW5ndGggPiAyICYmICh0b2tlbiA9IHRva2Vuc1swXSkudHlwZSA9PT0gXCJJRFwiICYmXG5cdFx0XHRcdHN1cHBvcnQuZ2V0QnlJZCAmJiBjb250ZXh0Lm5vZGVUeXBlID09PSA5ICYmIGRvY3VtZW50SXNIVE1MICYmXG5cdFx0XHRcdEV4cHIucmVsYXRpdmVbIHRva2Vuc1sxXS50eXBlIF0gKSB7XG5cblx0XHRcdGNvbnRleHQgPSAoIEV4cHIuZmluZFtcIklEXCJdKCB0b2tlbi5tYXRjaGVzWzBdLnJlcGxhY2UocnVuZXNjYXBlLCBmdW5lc2NhcGUpLCBjb250ZXh0ICkgfHwgW10gKVswXTtcblx0XHRcdGlmICggIWNvbnRleHQgKSB7XG5cdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXG5cdFx0XHQvLyBQcmVjb21waWxlZCBtYXRjaGVycyB3aWxsIHN0aWxsIHZlcmlmeSBhbmNlc3RyeSwgc28gc3RlcCB1cCBhIGxldmVsXG5cdFx0XHR9IGVsc2UgaWYgKCBjb21waWxlZCApIHtcblx0XHRcdFx0Y29udGV4dCA9IGNvbnRleHQucGFyZW50Tm9kZTtcblx0XHRcdH1cblxuXHRcdFx0c2VsZWN0b3IgPSBzZWxlY3Rvci5zbGljZSggdG9rZW5zLnNoaWZ0KCkudmFsdWUubGVuZ3RoICk7XG5cdFx0fVxuXG5cdFx0Ly8gRmV0Y2ggYSBzZWVkIHNldCBmb3IgcmlnaHQtdG8tbGVmdCBtYXRjaGluZ1xuXHRcdGkgPSBtYXRjaEV4cHJbXCJuZWVkc0NvbnRleHRcIl0udGVzdCggc2VsZWN0b3IgKSA/IDAgOiB0b2tlbnMubGVuZ3RoO1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0dG9rZW4gPSB0b2tlbnNbaV07XG5cblx0XHRcdC8vIEFib3J0IGlmIHdlIGhpdCBhIGNvbWJpbmF0b3Jcblx0XHRcdGlmICggRXhwci5yZWxhdGl2ZVsgKHR5cGUgPSB0b2tlbi50eXBlKSBdICkge1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdGlmICggKGZpbmQgPSBFeHByLmZpbmRbIHR5cGUgXSkgKSB7XG5cdFx0XHRcdC8vIFNlYXJjaCwgZXhwYW5kaW5nIGNvbnRleHQgZm9yIGxlYWRpbmcgc2libGluZyBjb21iaW5hdG9yc1xuXHRcdFx0XHRpZiAoIChzZWVkID0gZmluZChcblx0XHRcdFx0XHR0b2tlbi5tYXRjaGVzWzBdLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICksXG5cdFx0XHRcdFx0cnNpYmxpbmcudGVzdCggdG9rZW5zWzBdLnR5cGUgKSAmJiB0ZXN0Q29udGV4dCggY29udGV4dC5wYXJlbnROb2RlICkgfHwgY29udGV4dFxuXHRcdFx0XHQpKSApIHtcblxuXHRcdFx0XHRcdC8vIElmIHNlZWQgaXMgZW1wdHkgb3Igbm8gdG9rZW5zIHJlbWFpbiwgd2UgY2FuIHJldHVybiBlYXJseVxuXHRcdFx0XHRcdHRva2Vucy5zcGxpY2UoIGksIDEgKTtcblx0XHRcdFx0XHRzZWxlY3RvciA9IHNlZWQubGVuZ3RoICYmIHRvU2VsZWN0b3IoIHRva2VucyApO1xuXHRcdFx0XHRcdGlmICggIXNlbGVjdG9yICkge1xuXHRcdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgc2VlZCApO1xuXHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBDb21waWxlIGFuZCBleGVjdXRlIGEgZmlsdGVyaW5nIGZ1bmN0aW9uIGlmIG9uZSBpcyBub3QgcHJvdmlkZWRcblx0Ly8gUHJvdmlkZSBgbWF0Y2hgIHRvIGF2b2lkIHJldG9rZW5pemF0aW9uIGlmIHdlIG1vZGlmaWVkIHRoZSBzZWxlY3RvciBhYm92ZVxuXHQoIGNvbXBpbGVkIHx8IGNvbXBpbGUoIHNlbGVjdG9yLCBtYXRjaCApICkoXG5cdFx0c2VlZCxcblx0XHRjb250ZXh0LFxuXHRcdCFkb2N1bWVudElzSFRNTCxcblx0XHRyZXN1bHRzLFxuXHRcdHJzaWJsaW5nLnRlc3QoIHNlbGVjdG9yICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8IGNvbnRleHRcblx0KTtcblx0cmV0dXJuIHJlc3VsdHM7XG59O1xuXG4vLyBPbmUtdGltZSBhc3NpZ25tZW50c1xuXG4vLyBTb3J0IHN0YWJpbGl0eVxuc3VwcG9ydC5zb3J0U3RhYmxlID0gZXhwYW5kby5zcGxpdChcIlwiKS5zb3J0KCBzb3J0T3JkZXIgKS5qb2luKFwiXCIpID09PSBleHBhbmRvO1xuXG4vLyBTdXBwb3J0OiBDaHJvbWU8MTRcbi8vIEFsd2F5cyBhc3N1bWUgZHVwbGljYXRlcyBpZiB0aGV5IGFyZW4ndCBwYXNzZWQgdG8gdGhlIGNvbXBhcmlzb24gZnVuY3Rpb25cbnN1cHBvcnQuZGV0ZWN0RHVwbGljYXRlcyA9ICEhaGFzRHVwbGljYXRlO1xuXG4vLyBJbml0aWFsaXplIGFnYWluc3QgdGhlIGRlZmF1bHQgZG9jdW1lbnRcbnNldERvY3VtZW50KCk7XG5cbi8vIFN1cHBvcnQ6IFdlYmtpdDw1MzcuMzIgLSBTYWZhcmkgNi4wLjMvQ2hyb21lIDI1IChmaXhlZCBpbiBDaHJvbWUgMjcpXG4vLyBEZXRhY2hlZCBub2RlcyBjb25mb3VuZGluZ2x5IGZvbGxvdyAqZWFjaCBvdGhlcipcbnN1cHBvcnQuc29ydERldGFjaGVkID0gYXNzZXJ0KGZ1bmN0aW9uKCBkaXYxICkge1xuXHQvLyBTaG91bGQgcmV0dXJuIDEsIGJ1dCByZXR1cm5zIDQgKGZvbGxvd2luZylcblx0cmV0dXJuIGRpdjEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikgKSAmIDE7XG59KTtcblxuLy8gU3VwcG9ydDogSUU8OFxuLy8gUHJldmVudCBhdHRyaWJ1dGUvcHJvcGVydHkgXCJpbnRlcnBvbGF0aW9uXCJcbi8vIGh0dHA6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9tczUzNjQyOSUyOFZTLjg1JTI5LmFzcHhcbmlmICggIWFzc2VydChmdW5jdGlvbiggZGl2ICkge1xuXHRkaXYuaW5uZXJIVE1MID0gXCI8YSBocmVmPScjJz48L2E+XCI7XG5cdHJldHVybiBkaXYuZmlyc3RDaGlsZC5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpID09PSBcIiNcIiA7XG59KSApIHtcblx0YWRkSGFuZGxlKCBcInR5cGV8aHJlZnxoZWlnaHR8d2lkdGhcIiwgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdGlmICggIWlzWE1MICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lLCBuYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwidHlwZVwiID8gMSA6IDIgKTtcblx0XHR9XG5cdH0pO1xufVxuXG4vLyBTdXBwb3J0OiBJRTw5XG4vLyBVc2UgZGVmYXVsdFZhbHVlIGluIHBsYWNlIG9mIGdldEF0dHJpYnV0ZShcInZhbHVlXCIpXG5pZiAoICFzdXBwb3J0LmF0dHJpYnV0ZXMgfHwgIWFzc2VydChmdW5jdGlvbiggZGl2ICkge1xuXHRkaXYuaW5uZXJIVE1MID0gXCI8aW5wdXQvPlwiO1xuXHRkaXYuZmlyc3RDaGlsZC5zZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiwgXCJcIiApO1xuXHRyZXR1cm4gZGl2LmZpcnN0Q2hpbGQuZ2V0QXR0cmlidXRlKCBcInZhbHVlXCIgKSA9PT0gXCJcIjtcbn0pICkge1xuXHRhZGRIYW5kbGUoIFwidmFsdWVcIiwgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdGlmICggIWlzWE1MICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJpbnB1dFwiICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZGVmYXVsdFZhbHVlO1xuXHRcdH1cblx0fSk7XG59XG5cbi8vIFN1cHBvcnQ6IElFPDlcbi8vIFVzZSBnZXRBdHRyaWJ1dGVOb2RlIHRvIGZldGNoIGJvb2xlYW5zIHdoZW4gZ2V0QXR0cmlidXRlIGxpZXNcbmlmICggIWFzc2VydChmdW5jdGlvbiggZGl2ICkge1xuXHRyZXR1cm4gZGl2LmdldEF0dHJpYnV0ZShcImRpc2FibGVkXCIpID09IG51bGw7XG59KSApIHtcblx0YWRkSGFuZGxlKCBib29sZWFucywgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdHZhciB2YWw7XG5cdFx0aWYgKCAhaXNYTUwgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbVsgbmFtZSBdID09PSB0cnVlID8gbmFtZS50b0xvd2VyQ2FzZSgpIDpcblx0XHRcdFx0XHQodmFsID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKCBuYW1lICkpICYmIHZhbC5zcGVjaWZpZWQgP1xuXHRcdFx0XHRcdHZhbC52YWx1ZSA6XG5cdFx0XHRcdG51bGw7XG5cdFx0fVxuXHR9KTtcbn1cblxucmV0dXJuIFNpenpsZTtcblxufSkoIHdpbmRvdyApO1xuXG5cblxualF1ZXJ5LmZpbmQgPSBTaXp6bGU7XG5qUXVlcnkuZXhwciA9IFNpenpsZS5zZWxlY3RvcnM7XG5qUXVlcnkuZXhwcltcIjpcIl0gPSBqUXVlcnkuZXhwci5wc2V1ZG9zO1xualF1ZXJ5LnVuaXF1ZSA9IFNpenpsZS51bmlxdWVTb3J0O1xualF1ZXJ5LnRleHQgPSBTaXp6bGUuZ2V0VGV4dDtcbmpRdWVyeS5pc1hNTERvYyA9IFNpenpsZS5pc1hNTDtcbmpRdWVyeS5jb250YWlucyA9IFNpenpsZS5jb250YWlucztcblxuXG5cbnZhciBybmVlZHNDb250ZXh0ID0galF1ZXJ5LmV4cHIubWF0Y2gubmVlZHNDb250ZXh0O1xuXG52YXIgcnNpbmdsZVRhZyA9ICgvXjwoXFx3KylcXHMqXFwvPz4oPzo8XFwvXFwxPnwpJC8pO1xuXG5cblxudmFyIHJpc1NpbXBsZSA9IC9eLlteOiNcXFtcXC4sXSokLztcblxuLy8gSW1wbGVtZW50IHRoZSBpZGVudGljYWwgZnVuY3Rpb25hbGl0eSBmb3IgZmlsdGVyIGFuZCBub3RcbmZ1bmN0aW9uIHdpbm5vdyggZWxlbWVudHMsIHF1YWxpZmllciwgbm90ICkge1xuXHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBxdWFsaWZpZXIgKSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSwgaSApIHtcblx0XHRcdC8qIGpzaGludCAtVzAxOCAqL1xuXHRcdFx0cmV0dXJuICEhcXVhbGlmaWVyLmNhbGwoIGVsZW0sIGksIGVsZW0gKSAhPT0gbm90O1xuXHRcdH0pO1xuXG5cdH1cblxuXHRpZiAoIHF1YWxpZmllci5ub2RlVHlwZSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiAoIGVsZW0gPT09IHF1YWxpZmllciApICE9PSBub3Q7XG5cdFx0fSk7XG5cblx0fVxuXG5cdGlmICggdHlwZW9mIHF1YWxpZmllciA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRpZiAoIHJpc1NpbXBsZS50ZXN0KCBxdWFsaWZpZXIgKSApIHtcblx0XHRcdHJldHVybiBqUXVlcnkuZmlsdGVyKCBxdWFsaWZpZXIsIGVsZW1lbnRzLCBub3QgKTtcblx0XHR9XG5cblx0XHRxdWFsaWZpZXIgPSBqUXVlcnkuZmlsdGVyKCBxdWFsaWZpZXIsIGVsZW1lbnRzICk7XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gKCBqUXVlcnkuaW5BcnJheSggZWxlbSwgcXVhbGlmaWVyICkgPj0gMCApICE9PSBub3Q7XG5cdH0pO1xufVxuXG5qUXVlcnkuZmlsdGVyID0gZnVuY3Rpb24oIGV4cHIsIGVsZW1zLCBub3QgKSB7XG5cdHZhciBlbGVtID0gZWxlbXNbIDAgXTtcblxuXHRpZiAoIG5vdCApIHtcblx0XHRleHByID0gXCI6bm90KFwiICsgZXhwciArIFwiKVwiO1xuXHR9XG5cblx0cmV0dXJuIGVsZW1zLmxlbmd0aCA9PT0gMSAmJiBlbGVtLm5vZGVUeXBlID09PSAxID9cblx0XHRqUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoIGVsZW0sIGV4cHIgKSA/IFsgZWxlbSBdIDogW10gOlxuXHRcdGpRdWVyeS5maW5kLm1hdGNoZXMoIGV4cHIsIGpRdWVyeS5ncmVwKCBlbGVtcywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5ub2RlVHlwZSA9PT0gMTtcblx0XHR9KSk7XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKHtcblx0ZmluZDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHZhciBpLFxuXHRcdFx0cmV0ID0gW10sXG5cdFx0XHRzZWxmID0gdGhpcyxcblx0XHRcdGxlbiA9IHNlbGYubGVuZ3RoO1xuXG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeSggc2VsZWN0b3IgKS5maWx0ZXIoZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRcdFx0aWYgKCBqUXVlcnkuY29udGFpbnMoIHNlbGZbIGkgXSwgdGhpcyApICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9KSApO1xuXHRcdH1cblxuXHRcdGZvciAoIGkgPSAwOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRqUXVlcnkuZmluZCggc2VsZWN0b3IsIHNlbGZbIGkgXSwgcmV0ICk7XG5cdFx0fVxuXG5cdFx0Ly8gTmVlZGVkIGJlY2F1c2UgJCggc2VsZWN0b3IsIGNvbnRleHQgKSBiZWNvbWVzICQoIGNvbnRleHQgKS5maW5kKCBzZWxlY3RvciApXG5cdFx0cmV0ID0gdGhpcy5wdXNoU3RhY2soIGxlbiA+IDEgPyBqUXVlcnkudW5pcXVlKCByZXQgKSA6IHJldCApO1xuXHRcdHJldC5zZWxlY3RvciA9IHRoaXMuc2VsZWN0b3IgPyB0aGlzLnNlbGVjdG9yICsgXCIgXCIgKyBzZWxlY3RvciA6IHNlbGVjdG9yO1xuXHRcdHJldHVybiByZXQ7XG5cdH0sXG5cdGZpbHRlcjogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggd2lubm93KHRoaXMsIHNlbGVjdG9yIHx8IFtdLCBmYWxzZSkgKTtcblx0fSxcblx0bm90OiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCB3aW5ub3codGhpcywgc2VsZWN0b3IgfHwgW10sIHRydWUpICk7XG5cdH0sXG5cdGlzOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuICEhd2lubm93KFxuXHRcdFx0dGhpcyxcblxuXHRcdFx0Ly8gSWYgdGhpcyBpcyBhIHBvc2l0aW9uYWwvcmVsYXRpdmUgc2VsZWN0b3IsIGNoZWNrIG1lbWJlcnNoaXAgaW4gdGhlIHJldHVybmVkIHNldFxuXHRcdFx0Ly8gc28gJChcInA6Zmlyc3RcIikuaXMoXCJwOmxhc3RcIikgd29uJ3QgcmV0dXJuIHRydWUgZm9yIGEgZG9jIHdpdGggdHdvIFwicFwiLlxuXHRcdFx0dHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICYmIHJuZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3IgKSA/XG5cdFx0XHRcdGpRdWVyeSggc2VsZWN0b3IgKSA6XG5cdFx0XHRcdHNlbGVjdG9yIHx8IFtdLFxuXHRcdFx0ZmFsc2Vcblx0XHQpLmxlbmd0aDtcblx0fVxufSk7XG5cblxuLy8gSW5pdGlhbGl6ZSBhIGpRdWVyeSBvYmplY3RcblxuXG4vLyBBIGNlbnRyYWwgcmVmZXJlbmNlIHRvIHRoZSByb290IGpRdWVyeShkb2N1bWVudClcbnZhciByb290alF1ZXJ5LFxuXG5cdC8vIFVzZSB0aGUgY29ycmVjdCBkb2N1bWVudCBhY2NvcmRpbmdseSB3aXRoIHdpbmRvdyBhcmd1bWVudCAoc2FuZGJveClcblx0ZG9jdW1lbnQgPSB3aW5kb3cuZG9jdW1lbnQsXG5cblx0Ly8gQSBzaW1wbGUgd2F5IHRvIGNoZWNrIGZvciBIVE1MIHN0cmluZ3Ncblx0Ly8gUHJpb3JpdGl6ZSAjaWQgb3ZlciA8dGFnPiB0byBhdm9pZCBYU1MgdmlhIGxvY2F0aW9uLmhhc2ggKCM5NTIxKVxuXHQvLyBTdHJpY3QgSFRNTCByZWNvZ25pdGlvbiAoIzExMjkwOiBtdXN0IHN0YXJ0IHdpdGggPClcblx0cnF1aWNrRXhwciA9IC9eKD86XFxzKig8W1xcd1xcV10rPilbXj5dKnwjKFtcXHctXSopKSQvLFxuXG5cdGluaXQgPSBqUXVlcnkuZm4uaW5pdCA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCApIHtcblx0XHR2YXIgbWF0Y2gsIGVsZW07XG5cblx0XHQvLyBIQU5ETEU6ICQoXCJcIiksICQobnVsbCksICQodW5kZWZpbmVkKSwgJChmYWxzZSlcblx0XHRpZiAoICFzZWxlY3RvciApIHtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblxuXHRcdC8vIEhhbmRsZSBIVE1MIHN0cmluZ3Ncblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGlmICggc2VsZWN0b3IuY2hhckF0KDApID09PSBcIjxcIiAmJiBzZWxlY3Rvci5jaGFyQXQoIHNlbGVjdG9yLmxlbmd0aCAtIDEgKSA9PT0gXCI+XCIgJiYgc2VsZWN0b3IubGVuZ3RoID49IDMgKSB7XG5cdFx0XHRcdC8vIEFzc3VtZSB0aGF0IHN0cmluZ3MgdGhhdCBzdGFydCBhbmQgZW5kIHdpdGggPD4gYXJlIEhUTUwgYW5kIHNraXAgdGhlIHJlZ2V4IGNoZWNrXG5cdFx0XHRcdG1hdGNoID0gWyBudWxsLCBzZWxlY3RvciwgbnVsbCBdO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRtYXRjaCA9IHJxdWlja0V4cHIuZXhlYyggc2VsZWN0b3IgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWF0Y2ggaHRtbCBvciBtYWtlIHN1cmUgbm8gY29udGV4dCBpcyBzcGVjaWZpZWQgZm9yICNpZFxuXHRcdFx0aWYgKCBtYXRjaCAmJiAobWF0Y2hbMV0gfHwgIWNvbnRleHQpICkge1xuXG5cdFx0XHRcdC8vIEhBTkRMRTogJChodG1sKSAtPiAkKGFycmF5KVxuXHRcdFx0XHRpZiAoIG1hdGNoWzFdICkge1xuXHRcdFx0XHRcdGNvbnRleHQgPSBjb250ZXh0IGluc3RhbmNlb2YgalF1ZXJ5ID8gY29udGV4dFswXSA6IGNvbnRleHQ7XG5cblx0XHRcdFx0XHQvLyBzY3JpcHRzIGlzIHRydWUgZm9yIGJhY2stY29tcGF0XG5cdFx0XHRcdFx0Ly8gSW50ZW50aW9uYWxseSBsZXQgdGhlIGVycm9yIGJlIHRocm93biBpZiBwYXJzZUhUTUwgaXMgbm90IHByZXNlbnRcblx0XHRcdFx0XHRqUXVlcnkubWVyZ2UoIHRoaXMsIGpRdWVyeS5wYXJzZUhUTUwoXG5cdFx0XHRcdFx0XHRtYXRjaFsxXSxcblx0XHRcdFx0XHRcdGNvbnRleHQgJiYgY29udGV4dC5ub2RlVHlwZSA/IGNvbnRleHQub3duZXJEb2N1bWVudCB8fCBjb250ZXh0IDogZG9jdW1lbnQsXG5cdFx0XHRcdFx0XHR0cnVlXG5cdFx0XHRcdFx0KSApO1xuXG5cdFx0XHRcdFx0Ly8gSEFORExFOiAkKGh0bWwsIHByb3BzKVxuXHRcdFx0XHRcdGlmICggcnNpbmdsZVRhZy50ZXN0KCBtYXRjaFsxXSApICYmIGpRdWVyeS5pc1BsYWluT2JqZWN0KCBjb250ZXh0ICkgKSB7XG5cdFx0XHRcdFx0XHRmb3IgKCBtYXRjaCBpbiBjb250ZXh0ICkge1xuXHRcdFx0XHRcdFx0XHQvLyBQcm9wZXJ0aWVzIG9mIGNvbnRleHQgYXJlIGNhbGxlZCBhcyBtZXRob2RzIGlmIHBvc3NpYmxlXG5cdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHRoaXNbIG1hdGNoIF0gKSApIHtcblx0XHRcdFx0XHRcdFx0XHR0aGlzWyBtYXRjaCBdKCBjb250ZXh0WyBtYXRjaCBdICk7XG5cblx0XHRcdFx0XHRcdFx0Ly8gLi4uYW5kIG90aGVyd2lzZSBzZXQgYXMgYXR0cmlidXRlc1xuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdHRoaXMuYXR0ciggbWF0Y2gsIGNvbnRleHRbIG1hdGNoIF0gKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0XHRcdC8vIEhBTkRMRTogJCgjaWQpXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZWxlbSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCBtYXRjaFsyXSApO1xuXG5cdFx0XHRcdFx0Ly8gQ2hlY2sgcGFyZW50Tm9kZSB0byBjYXRjaCB3aGVuIEJsYWNrYmVycnkgNC42IHJldHVybnNcblx0XHRcdFx0XHQvLyBub2RlcyB0aGF0IGFyZSBubyBsb25nZXIgaW4gdGhlIGRvY3VtZW50ICM2OTYzXG5cdFx0XHRcdFx0aWYgKCBlbGVtICYmIGVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0XHRcdC8vIEhhbmRsZSB0aGUgY2FzZSB3aGVyZSBJRSBhbmQgT3BlcmEgcmV0dXJuIGl0ZW1zXG5cdFx0XHRcdFx0XHQvLyBieSBuYW1lIGluc3RlYWQgb2YgSURcblx0XHRcdFx0XHRcdGlmICggZWxlbS5pZCAhPT0gbWF0Y2hbMl0gKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiByb290alF1ZXJ5LmZpbmQoIHNlbGVjdG9yICk7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIE90aGVyd2lzZSwgd2UgaW5qZWN0IHRoZSBlbGVtZW50IGRpcmVjdGx5IGludG8gdGhlIGpRdWVyeSBvYmplY3Rcblx0XHRcdFx0XHRcdHRoaXMubGVuZ3RoID0gMTtcblx0XHRcdFx0XHRcdHRoaXNbMF0gPSBlbGVtO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHRoaXMuY29udGV4dCA9IGRvY3VtZW50O1xuXHRcdFx0XHRcdHRoaXMuc2VsZWN0b3IgPSBzZWxlY3Rvcjtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fVxuXG5cdFx0XHQvLyBIQU5ETEU6ICQoZXhwciwgJCguLi4pKVxuXHRcdFx0fSBlbHNlIGlmICggIWNvbnRleHQgfHwgY29udGV4dC5qcXVlcnkgKSB7XG5cdFx0XHRcdHJldHVybiAoIGNvbnRleHQgfHwgcm9vdGpRdWVyeSApLmZpbmQoIHNlbGVjdG9yICk7XG5cblx0XHRcdC8vIEhBTkRMRTogJChleHByLCBjb250ZXh0KVxuXHRcdFx0Ly8gKHdoaWNoIGlzIGp1c3QgZXF1aXZhbGVudCB0bzogJChjb250ZXh0KS5maW5kKGV4cHIpXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5jb25zdHJ1Y3RvciggY29udGV4dCApLmZpbmQoIHNlbGVjdG9yICk7XG5cdFx0XHR9XG5cblx0XHQvLyBIQU5ETEU6ICQoRE9NRWxlbWVudClcblx0XHR9IGVsc2UgaWYgKCBzZWxlY3Rvci5ub2RlVHlwZSApIHtcblx0XHRcdHRoaXMuY29udGV4dCA9IHRoaXNbMF0gPSBzZWxlY3Rvcjtcblx0XHRcdHRoaXMubGVuZ3RoID0gMTtcblx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0Ly8gSEFORExFOiAkKGZ1bmN0aW9uKVxuXHRcdC8vIFNob3J0Y3V0IGZvciBkb2N1bWVudCByZWFkeVxuXHRcdH0gZWxzZSBpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBzZWxlY3RvciApICkge1xuXHRcdFx0cmV0dXJuIHR5cGVvZiByb290alF1ZXJ5LnJlYWR5ICE9PSBcInVuZGVmaW5lZFwiID9cblx0XHRcdFx0cm9vdGpRdWVyeS5yZWFkeSggc2VsZWN0b3IgKSA6XG5cdFx0XHRcdC8vIEV4ZWN1dGUgaW1tZWRpYXRlbHkgaWYgcmVhZHkgaXMgbm90IHByZXNlbnRcblx0XHRcdFx0c2VsZWN0b3IoIGpRdWVyeSApO1xuXHRcdH1cblxuXHRcdGlmICggc2VsZWN0b3Iuc2VsZWN0b3IgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHRoaXMuc2VsZWN0b3IgPSBzZWxlY3Rvci5zZWxlY3Rvcjtcblx0XHRcdHRoaXMuY29udGV4dCA9IHNlbGVjdG9yLmNvbnRleHQ7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGpRdWVyeS5tYWtlQXJyYXkoIHNlbGVjdG9yLCB0aGlzICk7XG5cdH07XG5cbi8vIEdpdmUgdGhlIGluaXQgZnVuY3Rpb24gdGhlIGpRdWVyeSBwcm90b3R5cGUgZm9yIGxhdGVyIGluc3RhbnRpYXRpb25cbmluaXQucHJvdG90eXBlID0galF1ZXJ5LmZuO1xuXG4vLyBJbml0aWFsaXplIGNlbnRyYWwgcmVmZXJlbmNlXG5yb290alF1ZXJ5ID0galF1ZXJ5KCBkb2N1bWVudCApO1xuXG5cbnZhciBycGFyZW50c3ByZXYgPSAvXig/OnBhcmVudHN8cHJldig/OlVudGlsfEFsbCkpLyxcblx0Ly8gbWV0aG9kcyBndWFyYW50ZWVkIHRvIHByb2R1Y2UgYSB1bmlxdWUgc2V0IHdoZW4gc3RhcnRpbmcgZnJvbSBhIHVuaXF1ZSBzZXRcblx0Z3VhcmFudGVlZFVuaXF1ZSA9IHtcblx0XHRjaGlsZHJlbjogdHJ1ZSxcblx0XHRjb250ZW50czogdHJ1ZSxcblx0XHRuZXh0OiB0cnVlLFxuXHRcdHByZXY6IHRydWVcblx0fTtcblxualF1ZXJ5LmV4dGVuZCh7XG5cdGRpcjogZnVuY3Rpb24oIGVsZW0sIGRpciwgdW50aWwgKSB7XG5cdFx0dmFyIG1hdGNoZWQgPSBbXSxcblx0XHRcdGN1ciA9IGVsZW1bIGRpciBdO1xuXG5cdFx0d2hpbGUgKCBjdXIgJiYgY3VyLm5vZGVUeXBlICE9PSA5ICYmICh1bnRpbCA9PT0gdW5kZWZpbmVkIHx8IGN1ci5ub2RlVHlwZSAhPT0gMSB8fCAhalF1ZXJ5KCBjdXIgKS5pcyggdW50aWwgKSkgKSB7XG5cdFx0XHRpZiAoIGN1ci5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0bWF0Y2hlZC5wdXNoKCBjdXIgKTtcblx0XHRcdH1cblx0XHRcdGN1ciA9IGN1cltkaXJdO1xuXHRcdH1cblx0XHRyZXR1cm4gbWF0Y2hlZDtcblx0fSxcblxuXHRzaWJsaW5nOiBmdW5jdGlvbiggbiwgZWxlbSApIHtcblx0XHR2YXIgciA9IFtdO1xuXG5cdFx0Zm9yICggOyBuOyBuID0gbi5uZXh0U2libGluZyApIHtcblx0XHRcdGlmICggbi5ub2RlVHlwZSA9PT0gMSAmJiBuICE9PSBlbGVtICkge1xuXHRcdFx0XHRyLnB1c2goIG4gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gcjtcblx0fVxufSk7XG5cbmpRdWVyeS5mbi5leHRlbmQoe1xuXHRoYXM6IGZ1bmN0aW9uKCB0YXJnZXQgKSB7XG5cdFx0dmFyIGksXG5cdFx0XHR0YXJnZXRzID0galF1ZXJ5KCB0YXJnZXQsIHRoaXMgKSxcblx0XHRcdGxlbiA9IHRhcmdldHMubGVuZ3RoO1xuXG5cdFx0cmV0dXJuIHRoaXMuZmlsdGVyKGZ1bmN0aW9uKCkge1xuXHRcdFx0Zm9yICggaSA9IDA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0aWYgKCBqUXVlcnkuY29udGFpbnMoIHRoaXMsIHRhcmdldHNbaV0gKSApIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0pO1xuXHR9LFxuXG5cdGNsb3Nlc3Q6IGZ1bmN0aW9uKCBzZWxlY3RvcnMsIGNvbnRleHQgKSB7XG5cdFx0dmFyIGN1cixcblx0XHRcdGkgPSAwLFxuXHRcdFx0bCA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0bWF0Y2hlZCA9IFtdLFxuXHRcdFx0cG9zID0gcm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvcnMgKSB8fCB0eXBlb2Ygc2VsZWN0b3JzICE9PSBcInN0cmluZ1wiID9cblx0XHRcdFx0alF1ZXJ5KCBzZWxlY3RvcnMsIGNvbnRleHQgfHwgdGhpcy5jb250ZXh0ICkgOlxuXHRcdFx0XHQwO1xuXG5cdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0Zm9yICggY3VyID0gdGhpc1tpXTsgY3VyICYmIGN1ciAhPT0gY29udGV4dDsgY3VyID0gY3VyLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdC8vIEFsd2F5cyBza2lwIGRvY3VtZW50IGZyYWdtZW50c1xuXHRcdFx0XHRpZiAoIGN1ci5ub2RlVHlwZSA8IDExICYmIChwb3MgP1xuXHRcdFx0XHRcdHBvcy5pbmRleChjdXIpID4gLTEgOlxuXG5cdFx0XHRcdFx0Ly8gRG9uJ3QgcGFzcyBub24tZWxlbWVudHMgdG8gU2l6emxlXG5cdFx0XHRcdFx0Y3VyLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRcdFx0XHRqUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoY3VyLCBzZWxlY3RvcnMpKSApIHtcblxuXHRcdFx0XHRcdG1hdGNoZWQucHVzaCggY3VyICk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIG1hdGNoZWQubGVuZ3RoID4gMSA/IGpRdWVyeS51bmlxdWUoIG1hdGNoZWQgKSA6IG1hdGNoZWQgKTtcblx0fSxcblxuXHQvLyBEZXRlcm1pbmUgdGhlIHBvc2l0aW9uIG9mIGFuIGVsZW1lbnQgd2l0aGluXG5cdC8vIHRoZSBtYXRjaGVkIHNldCBvZiBlbGVtZW50c1xuXHRpbmRleDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHQvLyBObyBhcmd1bWVudCwgcmV0dXJuIGluZGV4IGluIHBhcmVudFxuXHRcdGlmICggIWVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gKCB0aGlzWzBdICYmIHRoaXNbMF0ucGFyZW50Tm9kZSApID8gdGhpcy5maXJzdCgpLnByZXZBbGwoKS5sZW5ndGggOiAtMTtcblx0XHR9XG5cblx0XHQvLyBpbmRleCBpbiBzZWxlY3RvclxuXHRcdGlmICggdHlwZW9mIGVsZW0gPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmluQXJyYXkoIHRoaXNbMF0sIGpRdWVyeSggZWxlbSApICk7XG5cdFx0fVxuXG5cdFx0Ly8gTG9jYXRlIHRoZSBwb3NpdGlvbiBvZiB0aGUgZGVzaXJlZCBlbGVtZW50XG5cdFx0cmV0dXJuIGpRdWVyeS5pbkFycmF5KFxuXHRcdFx0Ly8gSWYgaXQgcmVjZWl2ZXMgYSBqUXVlcnkgb2JqZWN0LCB0aGUgZmlyc3QgZWxlbWVudCBpcyB1c2VkXG5cdFx0XHRlbGVtLmpxdWVyeSA/IGVsZW1bMF0gOiBlbGVtLCB0aGlzICk7XG5cdH0sXG5cblx0YWRkOiBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKFxuXHRcdFx0alF1ZXJ5LnVuaXF1ZShcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCB0aGlzLmdldCgpLCBqUXVlcnkoIHNlbGVjdG9yLCBjb250ZXh0ICkgKVxuXHRcdFx0KVxuXHRcdCk7XG5cdH0sXG5cblx0YWRkQmFjazogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLmFkZCggc2VsZWN0b3IgPT0gbnVsbCA/XG5cdFx0XHR0aGlzLnByZXZPYmplY3QgOiB0aGlzLnByZXZPYmplY3QuZmlsdGVyKHNlbGVjdG9yKVxuXHRcdCk7XG5cdH1cbn0pO1xuXG5mdW5jdGlvbiBzaWJsaW5nKCBjdXIsIGRpciApIHtcblx0ZG8ge1xuXHRcdGN1ciA9IGN1clsgZGlyIF07XG5cdH0gd2hpbGUgKCBjdXIgJiYgY3VyLm5vZGVUeXBlICE9PSAxICk7XG5cblx0cmV0dXJuIGN1cjtcbn1cblxualF1ZXJ5LmVhY2goe1xuXHRwYXJlbnQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cdFx0cmV0dXJuIHBhcmVudCAmJiBwYXJlbnQubm9kZVR5cGUgIT09IDExID8gcGFyZW50IDogbnVsbDtcblx0fSxcblx0cGFyZW50czogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5kaXIoIGVsZW0sIFwicGFyZW50Tm9kZVwiICk7XG5cdH0sXG5cdHBhcmVudHNVbnRpbDogZnVuY3Rpb24oIGVsZW0sIGksIHVudGlsICkge1xuXHRcdHJldHVybiBqUXVlcnkuZGlyKCBlbGVtLCBcInBhcmVudE5vZGVcIiwgdW50aWwgKTtcblx0fSxcblx0bmV4dDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmcoIGVsZW0sIFwibmV4dFNpYmxpbmdcIiApO1xuXHR9LFxuXHRwcmV2OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZyggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiApO1xuXHR9LFxuXHRuZXh0QWxsOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmRpciggZWxlbSwgXCJuZXh0U2libGluZ1wiICk7XG5cdH0sXG5cdHByZXZBbGw6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBqUXVlcnkuZGlyKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiICk7XG5cdH0sXG5cdG5leHRVbnRpbDogZnVuY3Rpb24oIGVsZW0sIGksIHVudGlsICkge1xuXHRcdHJldHVybiBqUXVlcnkuZGlyKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIsIHVudGlsICk7XG5cdH0sXG5cdHByZXZVbnRpbDogZnVuY3Rpb24oIGVsZW0sIGksIHVudGlsICkge1xuXHRcdHJldHVybiBqUXVlcnkuZGlyKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiLCB1bnRpbCApO1xuXHR9LFxuXHRzaWJsaW5nczogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5zaWJsaW5nKCAoIGVsZW0ucGFyZW50Tm9kZSB8fCB7fSApLmZpcnN0Q2hpbGQsIGVsZW0gKTtcblx0fSxcblx0Y2hpbGRyZW46IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBqUXVlcnkuc2libGluZyggZWxlbS5maXJzdENoaWxkICk7XG5cdH0sXG5cdGNvbnRlbnRzOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4galF1ZXJ5Lm5vZGVOYW1lKCBlbGVtLCBcImlmcmFtZVwiICkgP1xuXHRcdFx0ZWxlbS5jb250ZW50RG9jdW1lbnQgfHwgZWxlbS5jb250ZW50V2luZG93LmRvY3VtZW50IDpcblx0XHRcdGpRdWVyeS5tZXJnZSggW10sIGVsZW0uY2hpbGROb2RlcyApO1xuXHR9XG59LCBmdW5jdGlvbiggbmFtZSwgZm4gKSB7XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHVudGlsLCBzZWxlY3RvciApIHtcblx0XHR2YXIgcmV0ID0galF1ZXJ5Lm1hcCggdGhpcywgZm4sIHVudGlsICk7XG5cblx0XHRpZiAoIG5hbWUuc2xpY2UoIC01ICkgIT09IFwiVW50aWxcIiApIHtcblx0XHRcdHNlbGVjdG9yID0gdW50aWw7XG5cdFx0fVxuXG5cdFx0aWYgKCBzZWxlY3RvciAmJiB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXQgPSBqUXVlcnkuZmlsdGVyKCBzZWxlY3RvciwgcmV0ICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLmxlbmd0aCA+IDEgKSB7XG5cdFx0XHQvLyBSZW1vdmUgZHVwbGljYXRlc1xuXHRcdFx0aWYgKCAhZ3VhcmFudGVlZFVuaXF1ZVsgbmFtZSBdICkge1xuXHRcdFx0XHRyZXQgPSBqUXVlcnkudW5pcXVlKCByZXQgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUmV2ZXJzZSBvcmRlciBmb3IgcGFyZW50cyogYW5kIHByZXYtZGVyaXZhdGl2ZXNcblx0XHRcdGlmICggcnBhcmVudHNwcmV2LnRlc3QoIG5hbWUgKSApIHtcblx0XHRcdFx0cmV0ID0gcmV0LnJldmVyc2UoKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHJldCApO1xuXHR9O1xufSk7XG52YXIgcm5vdHdoaXRlID0gKC9cXFMrL2cpO1xuXG5cblxuLy8gU3RyaW5nIHRvIE9iamVjdCBvcHRpb25zIGZvcm1hdCBjYWNoZVxudmFyIG9wdGlvbnNDYWNoZSA9IHt9O1xuXG4vLyBDb252ZXJ0IFN0cmluZy1mb3JtYXR0ZWQgb3B0aW9ucyBpbnRvIE9iamVjdC1mb3JtYXR0ZWQgb25lcyBhbmQgc3RvcmUgaW4gY2FjaGVcbmZ1bmN0aW9uIGNyZWF0ZU9wdGlvbnMoIG9wdGlvbnMgKSB7XG5cdHZhciBvYmplY3QgPSBvcHRpb25zQ2FjaGVbIG9wdGlvbnMgXSA9IHt9O1xuXHRqUXVlcnkuZWFjaCggb3B0aW9ucy5tYXRjaCggcm5vdHdoaXRlICkgfHwgW10sIGZ1bmN0aW9uKCBfLCBmbGFnICkge1xuXHRcdG9iamVjdFsgZmxhZyBdID0gdHJ1ZTtcblx0fSk7XG5cdHJldHVybiBvYmplY3Q7XG59XG5cbi8qXG4gKiBDcmVhdGUgYSBjYWxsYmFjayBsaXN0IHVzaW5nIHRoZSBmb2xsb3dpbmcgcGFyYW1ldGVyczpcbiAqXG4gKlx0b3B0aW9uczogYW4gb3B0aW9uYWwgbGlzdCBvZiBzcGFjZS1zZXBhcmF0ZWQgb3B0aW9ucyB0aGF0IHdpbGwgY2hhbmdlIGhvd1xuICpcdFx0XHR0aGUgY2FsbGJhY2sgbGlzdCBiZWhhdmVzIG9yIGEgbW9yZSB0cmFkaXRpb25hbCBvcHRpb24gb2JqZWN0XG4gKlxuICogQnkgZGVmYXVsdCBhIGNhbGxiYWNrIGxpc3Qgd2lsbCBhY3QgbGlrZSBhbiBldmVudCBjYWxsYmFjayBsaXN0IGFuZCBjYW4gYmVcbiAqIFwiZmlyZWRcIiBtdWx0aXBsZSB0aW1lcy5cbiAqXG4gKiBQb3NzaWJsZSBvcHRpb25zOlxuICpcbiAqXHRvbmNlOlx0XHRcdHdpbGwgZW5zdXJlIHRoZSBjYWxsYmFjayBsaXN0IGNhbiBvbmx5IGJlIGZpcmVkIG9uY2UgKGxpa2UgYSBEZWZlcnJlZClcbiAqXG4gKlx0bWVtb3J5Olx0XHRcdHdpbGwga2VlcCB0cmFjayBvZiBwcmV2aW91cyB2YWx1ZXMgYW5kIHdpbGwgY2FsbCBhbnkgY2FsbGJhY2sgYWRkZWRcbiAqXHRcdFx0XHRcdGFmdGVyIHRoZSBsaXN0IGhhcyBiZWVuIGZpcmVkIHJpZ2h0IGF3YXkgd2l0aCB0aGUgbGF0ZXN0IFwibWVtb3JpemVkXCJcbiAqXHRcdFx0XHRcdHZhbHVlcyAobGlrZSBhIERlZmVycmVkKVxuICpcbiAqXHR1bmlxdWU6XHRcdFx0d2lsbCBlbnN1cmUgYSBjYWxsYmFjayBjYW4gb25seSBiZSBhZGRlZCBvbmNlIChubyBkdXBsaWNhdGUgaW4gdGhlIGxpc3QpXG4gKlxuICpcdHN0b3BPbkZhbHNlOlx0aW50ZXJydXB0IGNhbGxpbmdzIHdoZW4gYSBjYWxsYmFjayByZXR1cm5zIGZhbHNlXG4gKlxuICovXG5qUXVlcnkuQ2FsbGJhY2tzID0gZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cblx0Ly8gQ29udmVydCBvcHRpb25zIGZyb20gU3RyaW5nLWZvcm1hdHRlZCB0byBPYmplY3QtZm9ybWF0dGVkIGlmIG5lZWRlZFxuXHQvLyAod2UgY2hlY2sgaW4gY2FjaGUgZmlyc3QpXG5cdG9wdGlvbnMgPSB0eXBlb2Ygb3B0aW9ucyA9PT0gXCJzdHJpbmdcIiA/XG5cdFx0KCBvcHRpb25zQ2FjaGVbIG9wdGlvbnMgXSB8fCBjcmVhdGVPcHRpb25zKCBvcHRpb25zICkgKSA6XG5cdFx0alF1ZXJ5LmV4dGVuZCgge30sIG9wdGlvbnMgKTtcblxuXHR2YXIgLy8gRmxhZyB0byBrbm93IGlmIGxpc3QgaXMgY3VycmVudGx5IGZpcmluZ1xuXHRcdGZpcmluZyxcblx0XHQvLyBMYXN0IGZpcmUgdmFsdWUgKGZvciBub24tZm9yZ2V0dGFibGUgbGlzdHMpXG5cdFx0bWVtb3J5LFxuXHRcdC8vIEZsYWcgdG8ga25vdyBpZiBsaXN0IHdhcyBhbHJlYWR5IGZpcmVkXG5cdFx0ZmlyZWQsXG5cdFx0Ly8gRW5kIG9mIHRoZSBsb29wIHdoZW4gZmlyaW5nXG5cdFx0ZmlyaW5nTGVuZ3RoLFxuXHRcdC8vIEluZGV4IG9mIGN1cnJlbnRseSBmaXJpbmcgY2FsbGJhY2sgKG1vZGlmaWVkIGJ5IHJlbW92ZSBpZiBuZWVkZWQpXG5cdFx0ZmlyaW5nSW5kZXgsXG5cdFx0Ly8gRmlyc3QgY2FsbGJhY2sgdG8gZmlyZSAodXNlZCBpbnRlcm5hbGx5IGJ5IGFkZCBhbmQgZmlyZVdpdGgpXG5cdFx0ZmlyaW5nU3RhcnQsXG5cdFx0Ly8gQWN0dWFsIGNhbGxiYWNrIGxpc3Rcblx0XHRsaXN0ID0gW10sXG5cdFx0Ly8gU3RhY2sgb2YgZmlyZSBjYWxscyBmb3IgcmVwZWF0YWJsZSBsaXN0c1xuXHRcdHN0YWNrID0gIW9wdGlvbnMub25jZSAmJiBbXSxcblx0XHQvLyBGaXJlIGNhbGxiYWNrc1xuXHRcdGZpcmUgPSBmdW5jdGlvbiggZGF0YSApIHtcblx0XHRcdG1lbW9yeSA9IG9wdGlvbnMubWVtb3J5ICYmIGRhdGE7XG5cdFx0XHRmaXJlZCA9IHRydWU7XG5cdFx0XHRmaXJpbmdJbmRleCA9IGZpcmluZ1N0YXJ0IHx8IDA7XG5cdFx0XHRmaXJpbmdTdGFydCA9IDA7XG5cdFx0XHRmaXJpbmdMZW5ndGggPSBsaXN0Lmxlbmd0aDtcblx0XHRcdGZpcmluZyA9IHRydWU7XG5cdFx0XHRmb3IgKCA7IGxpc3QgJiYgZmlyaW5nSW5kZXggPCBmaXJpbmdMZW5ndGg7IGZpcmluZ0luZGV4KysgKSB7XG5cdFx0XHRcdGlmICggbGlzdFsgZmlyaW5nSW5kZXggXS5hcHBseSggZGF0YVsgMCBdLCBkYXRhWyAxIF0gKSA9PT0gZmFsc2UgJiYgb3B0aW9ucy5zdG9wT25GYWxzZSApIHtcblx0XHRcdFx0XHRtZW1vcnkgPSBmYWxzZTsgLy8gVG8gcHJldmVudCBmdXJ0aGVyIGNhbGxzIHVzaW5nIGFkZFxuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRmaXJpbmcgPSBmYWxzZTtcblx0XHRcdGlmICggbGlzdCApIHtcblx0XHRcdFx0aWYgKCBzdGFjayApIHtcblx0XHRcdFx0XHRpZiAoIHN0YWNrLmxlbmd0aCApIHtcblx0XHRcdFx0XHRcdGZpcmUoIHN0YWNrLnNoaWZ0KCkgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gZWxzZSBpZiAoIG1lbW9yeSApIHtcblx0XHRcdFx0XHRsaXN0ID0gW107XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0c2VsZi5kaXNhYmxlKCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXHRcdC8vIEFjdHVhbCBDYWxsYmFja3Mgb2JqZWN0XG5cdFx0c2VsZiA9IHtcblx0XHRcdC8vIEFkZCBhIGNhbGxiYWNrIG9yIGEgY29sbGVjdGlvbiBvZiBjYWxsYmFja3MgdG8gdGhlIGxpc3Rcblx0XHRcdGFkZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggbGlzdCApIHtcblx0XHRcdFx0XHQvLyBGaXJzdCwgd2Ugc2F2ZSB0aGUgY3VycmVudCBsZW5ndGhcblx0XHRcdFx0XHR2YXIgc3RhcnQgPSBsaXN0Lmxlbmd0aDtcblx0XHRcdFx0XHQoZnVuY3Rpb24gYWRkKCBhcmdzICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5LmVhY2goIGFyZ3MsIGZ1bmN0aW9uKCBfLCBhcmcgKSB7XG5cdFx0XHRcdFx0XHRcdHZhciB0eXBlID0galF1ZXJ5LnR5cGUoIGFyZyApO1xuXHRcdFx0XHRcdFx0XHRpZiAoIHR5cGUgPT09IFwiZnVuY3Rpb25cIiApIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoICFvcHRpb25zLnVuaXF1ZSB8fCAhc2VsZi5oYXMoIGFyZyApICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0bGlzdC5wdXNoKCBhcmcgKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIGFyZyAmJiBhcmcubGVuZ3RoICYmIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0Ly8gSW5zcGVjdCByZWN1cnNpdmVseVxuXHRcdFx0XHRcdFx0XHRcdGFkZCggYXJnICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdH0pKCBhcmd1bWVudHMgKTtcblx0XHRcdFx0XHQvLyBEbyB3ZSBuZWVkIHRvIGFkZCB0aGUgY2FsbGJhY2tzIHRvIHRoZVxuXHRcdFx0XHRcdC8vIGN1cnJlbnQgZmlyaW5nIGJhdGNoP1xuXHRcdFx0XHRcdGlmICggZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0ZmlyaW5nTGVuZ3RoID0gbGlzdC5sZW5ndGg7XG5cdFx0XHRcdFx0Ly8gV2l0aCBtZW1vcnksIGlmIHdlJ3JlIG5vdCBmaXJpbmcgdGhlblxuXHRcdFx0XHRcdC8vIHdlIHNob3VsZCBjYWxsIHJpZ2h0IGF3YXlcblx0XHRcdFx0XHR9IGVsc2UgaWYgKCBtZW1vcnkgKSB7XG5cdFx0XHRcdFx0XHRmaXJpbmdTdGFydCA9IHN0YXJ0O1xuXHRcdFx0XHRcdFx0ZmlyZSggbWVtb3J5ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblx0XHRcdC8vIFJlbW92ZSBhIGNhbGxiYWNrIGZyb20gdGhlIGxpc3Rcblx0XHRcdHJlbW92ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggbGlzdCApIHtcblx0XHRcdFx0XHRqUXVlcnkuZWFjaCggYXJndW1lbnRzLCBmdW5jdGlvbiggXywgYXJnICkge1xuXHRcdFx0XHRcdFx0dmFyIGluZGV4O1xuXHRcdFx0XHRcdFx0d2hpbGUgKCAoIGluZGV4ID0galF1ZXJ5LmluQXJyYXkoIGFyZywgbGlzdCwgaW5kZXggKSApID4gLTEgKSB7XG5cdFx0XHRcdFx0XHRcdGxpc3Quc3BsaWNlKCBpbmRleCwgMSApO1xuXHRcdFx0XHRcdFx0XHQvLyBIYW5kbGUgZmlyaW5nIGluZGV4ZXNcblx0XHRcdFx0XHRcdFx0aWYgKCBmaXJpbmcgKSB7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBpbmRleCA8PSBmaXJpbmdMZW5ndGggKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRmaXJpbmdMZW5ndGgtLTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBpbmRleCA8PSBmaXJpbmdJbmRleCApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGZpcmluZ0luZGV4LS07XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXHRcdFx0Ly8gQ2hlY2sgaWYgYSBnaXZlbiBjYWxsYmFjayBpcyBpbiB0aGUgbGlzdC5cblx0XHRcdC8vIElmIG5vIGFyZ3VtZW50IGlzIGdpdmVuLCByZXR1cm4gd2hldGhlciBvciBub3QgbGlzdCBoYXMgY2FsbGJhY2tzIGF0dGFjaGVkLlxuXHRcdFx0aGFzOiBmdW5jdGlvbiggZm4gKSB7XG5cdFx0XHRcdHJldHVybiBmbiA/IGpRdWVyeS5pbkFycmF5KCBmbiwgbGlzdCApID4gLTEgOiAhISggbGlzdCAmJiBsaXN0Lmxlbmd0aCApO1xuXHRcdFx0fSxcblx0XHRcdC8vIFJlbW92ZSBhbGwgY2FsbGJhY2tzIGZyb20gdGhlIGxpc3Rcblx0XHRcdGVtcHR5OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0bGlzdCA9IFtdO1xuXHRcdFx0XHRmaXJpbmdMZW5ndGggPSAwO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cdFx0XHQvLyBIYXZlIHRoZSBsaXN0IGRvIG5vdGhpbmcgYW55bW9yZVxuXHRcdFx0ZGlzYWJsZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGxpc3QgPSBzdGFjayA9IG1lbW9yeSA9IHVuZGVmaW5lZDtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXHRcdFx0Ly8gSXMgaXQgZGlzYWJsZWQ/XG5cdFx0XHRkaXNhYmxlZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAhbGlzdDtcblx0XHRcdH0sXG5cdFx0XHQvLyBMb2NrIHRoZSBsaXN0IGluIGl0cyBjdXJyZW50IHN0YXRlXG5cdFx0XHRsb2NrOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0c3RhY2sgPSB1bmRlZmluZWQ7XG5cdFx0XHRcdGlmICggIW1lbW9yeSApIHtcblx0XHRcdFx0XHRzZWxmLmRpc2FibGUoKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cdFx0XHQvLyBJcyBpdCBsb2NrZWQ/XG5cdFx0XHRsb2NrZWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gIXN0YWNrO1xuXHRcdFx0fSxcblx0XHRcdC8vIENhbGwgYWxsIGNhbGxiYWNrcyB3aXRoIHRoZSBnaXZlbiBjb250ZXh0IGFuZCBhcmd1bWVudHNcblx0XHRcdGZpcmVXaXRoOiBmdW5jdGlvbiggY29udGV4dCwgYXJncyApIHtcblx0XHRcdFx0aWYgKCBsaXN0ICYmICggIWZpcmVkIHx8IHN0YWNrICkgKSB7XG5cdFx0XHRcdFx0YXJncyA9IGFyZ3MgfHwgW107XG5cdFx0XHRcdFx0YXJncyA9IFsgY29udGV4dCwgYXJncy5zbGljZSA/IGFyZ3Muc2xpY2UoKSA6IGFyZ3MgXTtcblx0XHRcdFx0XHRpZiAoIGZpcmluZyApIHtcblx0XHRcdFx0XHRcdHN0YWNrLnB1c2goIGFyZ3MgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0ZmlyZSggYXJncyApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cdFx0XHQvLyBDYWxsIGFsbCB0aGUgY2FsbGJhY2tzIHdpdGggdGhlIGdpdmVuIGFyZ3VtZW50c1xuXHRcdFx0ZmlyZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHNlbGYuZmlyZVdpdGgoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cdFx0XHQvLyBUbyBrbm93IGlmIHRoZSBjYWxsYmFja3MgaGF2ZSBhbHJlYWR5IGJlZW4gY2FsbGVkIGF0IGxlYXN0IG9uY2Vcblx0XHRcdGZpcmVkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICEhZmlyZWQ7XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRyZXR1cm4gc2VsZjtcbn07XG5cblxualF1ZXJ5LmV4dGVuZCh7XG5cblx0RGVmZXJyZWQ6IGZ1bmN0aW9uKCBmdW5jICkge1xuXHRcdHZhciB0dXBsZXMgPSBbXG5cdFx0XHRcdC8vIGFjdGlvbiwgYWRkIGxpc3RlbmVyLCBsaXN0ZW5lciBsaXN0LCBmaW5hbCBzdGF0ZVxuXHRcdFx0XHRbIFwicmVzb2x2ZVwiLCBcImRvbmVcIiwgalF1ZXJ5LkNhbGxiYWNrcyhcIm9uY2UgbWVtb3J5XCIpLCBcInJlc29sdmVkXCIgXSxcblx0XHRcdFx0WyBcInJlamVjdFwiLCBcImZhaWxcIiwgalF1ZXJ5LkNhbGxiYWNrcyhcIm9uY2UgbWVtb3J5XCIpLCBcInJlamVjdGVkXCIgXSxcblx0XHRcdFx0WyBcIm5vdGlmeVwiLCBcInByb2dyZXNzXCIsIGpRdWVyeS5DYWxsYmFja3MoXCJtZW1vcnlcIikgXVxuXHRcdFx0XSxcblx0XHRcdHN0YXRlID0gXCJwZW5kaW5nXCIsXG5cdFx0XHRwcm9taXNlID0ge1xuXHRcdFx0XHRzdGF0ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHN0YXRlO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRhbHdheXM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGRlZmVycmVkLmRvbmUoIGFyZ3VtZW50cyApLmZhaWwoIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHR0aGVuOiBmdW5jdGlvbiggLyogZm5Eb25lLCBmbkZhaWwsIGZuUHJvZ3Jlc3MgKi8gKSB7XG5cdFx0XHRcdFx0dmFyIGZucyA9IGFyZ3VtZW50cztcblx0XHRcdFx0XHRyZXR1cm4galF1ZXJ5LkRlZmVycmVkKGZ1bmN0aW9uKCBuZXdEZWZlciApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5lYWNoKCB0dXBsZXMsIGZ1bmN0aW9uKCBpLCB0dXBsZSApIHtcblx0XHRcdFx0XHRcdFx0dmFyIGZuID0galF1ZXJ5LmlzRnVuY3Rpb24oIGZuc1sgaSBdICkgJiYgZm5zWyBpIF07XG5cdFx0XHRcdFx0XHRcdC8vIGRlZmVycmVkWyBkb25lIHwgZmFpbCB8IHByb2dyZXNzIF0gZm9yIGZvcndhcmRpbmcgYWN0aW9ucyB0byBuZXdEZWZlclxuXHRcdFx0XHRcdFx0XHRkZWZlcnJlZFsgdHVwbGVbMV0gXShmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHR2YXIgcmV0dXJuZWQgPSBmbiAmJiBmbi5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCByZXR1cm5lZCAmJiBqUXVlcnkuaXNGdW5jdGlvbiggcmV0dXJuZWQucHJvbWlzZSApICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQucHJvbWlzZSgpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5kb25lKCBuZXdEZWZlci5yZXNvbHZlIClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LmZhaWwoIG5ld0RlZmVyLnJlamVjdCApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5wcm9ncmVzcyggbmV3RGVmZXIubm90aWZ5ICk7XG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyWyB0dXBsZVsgMCBdICsgXCJXaXRoXCIgXSggdGhpcyA9PT0gcHJvbWlzZSA/IG5ld0RlZmVyLnByb21pc2UoKSA6IHRoaXMsIGZuID8gWyByZXR1cm5lZCBdIDogYXJndW1lbnRzICk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0Zm5zID0gbnVsbDtcblx0XHRcdFx0XHR9KS5wcm9taXNlKCk7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdC8vIEdldCBhIHByb21pc2UgZm9yIHRoaXMgZGVmZXJyZWRcblx0XHRcdFx0Ly8gSWYgb2JqIGlzIHByb3ZpZGVkLCB0aGUgcHJvbWlzZSBhc3BlY3QgaXMgYWRkZWQgdG8gdGhlIG9iamVjdFxuXHRcdFx0XHRwcm9taXNlOiBmdW5jdGlvbiggb2JqICkge1xuXHRcdFx0XHRcdHJldHVybiBvYmogIT0gbnVsbCA/IGpRdWVyeS5leHRlbmQoIG9iaiwgcHJvbWlzZSApIDogcHJvbWlzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdGRlZmVycmVkID0ge307XG5cblx0XHQvLyBLZWVwIHBpcGUgZm9yIGJhY2stY29tcGF0XG5cdFx0cHJvbWlzZS5waXBlID0gcHJvbWlzZS50aGVuO1xuXG5cdFx0Ly8gQWRkIGxpc3Qtc3BlY2lmaWMgbWV0aG9kc1xuXHRcdGpRdWVyeS5lYWNoKCB0dXBsZXMsIGZ1bmN0aW9uKCBpLCB0dXBsZSApIHtcblx0XHRcdHZhciBsaXN0ID0gdHVwbGVbIDIgXSxcblx0XHRcdFx0c3RhdGVTdHJpbmcgPSB0dXBsZVsgMyBdO1xuXG5cdFx0XHQvLyBwcm9taXNlWyBkb25lIHwgZmFpbCB8IHByb2dyZXNzIF0gPSBsaXN0LmFkZFxuXHRcdFx0cHJvbWlzZVsgdHVwbGVbMV0gXSA9IGxpc3QuYWRkO1xuXG5cdFx0XHQvLyBIYW5kbGUgc3RhdGVcblx0XHRcdGlmICggc3RhdGVTdHJpbmcgKSB7XG5cdFx0XHRcdGxpc3QuYWRkKGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdC8vIHN0YXRlID0gWyByZXNvbHZlZCB8IHJlamVjdGVkIF1cblx0XHRcdFx0XHRzdGF0ZSA9IHN0YXRlU3RyaW5nO1xuXG5cdFx0XHRcdC8vIFsgcmVqZWN0X2xpc3QgfCByZXNvbHZlX2xpc3QgXS5kaXNhYmxlOyBwcm9ncmVzc19saXN0LmxvY2tcblx0XHRcdFx0fSwgdHVwbGVzWyBpIF4gMSBdWyAyIF0uZGlzYWJsZSwgdHVwbGVzWyAyIF1bIDIgXS5sb2NrICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIGRlZmVycmVkWyByZXNvbHZlIHwgcmVqZWN0IHwgbm90aWZ5IF1cblx0XHRcdGRlZmVycmVkWyB0dXBsZVswXSBdID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGRlZmVycmVkWyB0dXBsZVswXSArIFwiV2l0aFwiIF0oIHRoaXMgPT09IGRlZmVycmVkID8gcHJvbWlzZSA6IHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH07XG5cdFx0XHRkZWZlcnJlZFsgdHVwbGVbMF0gKyBcIldpdGhcIiBdID0gbGlzdC5maXJlV2l0aDtcblx0XHR9KTtcblxuXHRcdC8vIE1ha2UgdGhlIGRlZmVycmVkIGEgcHJvbWlzZVxuXHRcdHByb21pc2UucHJvbWlzZSggZGVmZXJyZWQgKTtcblxuXHRcdC8vIENhbGwgZ2l2ZW4gZnVuYyBpZiBhbnlcblx0XHRpZiAoIGZ1bmMgKSB7XG5cdFx0XHRmdW5jLmNhbGwoIGRlZmVycmVkLCBkZWZlcnJlZCApO1xuXHRcdH1cblxuXHRcdC8vIEFsbCBkb25lIVxuXHRcdHJldHVybiBkZWZlcnJlZDtcblx0fSxcblxuXHQvLyBEZWZlcnJlZCBoZWxwZXJcblx0d2hlbjogZnVuY3Rpb24oIHN1Ym9yZGluYXRlIC8qICwgLi4uLCBzdWJvcmRpbmF0ZU4gKi8gKSB7XG5cdFx0dmFyIGkgPSAwLFxuXHRcdFx0cmVzb2x2ZVZhbHVlcyA9IHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApLFxuXHRcdFx0bGVuZ3RoID0gcmVzb2x2ZVZhbHVlcy5sZW5ndGgsXG5cblx0XHRcdC8vIHRoZSBjb3VudCBvZiB1bmNvbXBsZXRlZCBzdWJvcmRpbmF0ZXNcblx0XHRcdHJlbWFpbmluZyA9IGxlbmd0aCAhPT0gMSB8fCAoIHN1Ym9yZGluYXRlICYmIGpRdWVyeS5pc0Z1bmN0aW9uKCBzdWJvcmRpbmF0ZS5wcm9taXNlICkgKSA/IGxlbmd0aCA6IDAsXG5cblx0XHRcdC8vIHRoZSBtYXN0ZXIgRGVmZXJyZWQuIElmIHJlc29sdmVWYWx1ZXMgY29uc2lzdCBvZiBvbmx5IGEgc2luZ2xlIERlZmVycmVkLCBqdXN0IHVzZSB0aGF0LlxuXHRcdFx0ZGVmZXJyZWQgPSByZW1haW5pbmcgPT09IDEgPyBzdWJvcmRpbmF0ZSA6IGpRdWVyeS5EZWZlcnJlZCgpLFxuXG5cdFx0XHQvLyBVcGRhdGUgZnVuY3Rpb24gZm9yIGJvdGggcmVzb2x2ZSBhbmQgcHJvZ3Jlc3MgdmFsdWVzXG5cdFx0XHR1cGRhdGVGdW5jID0gZnVuY3Rpb24oIGksIGNvbnRleHRzLCB2YWx1ZXMgKSB7XG5cdFx0XHRcdHJldHVybiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRcdFx0Y29udGV4dHNbIGkgXSA9IHRoaXM7XG5cdFx0XHRcdFx0dmFsdWVzWyBpIF0gPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApIDogdmFsdWU7XG5cdFx0XHRcdFx0aWYgKCB2YWx1ZXMgPT09IHByb2dyZXNzVmFsdWVzICkge1xuXHRcdFx0XHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCggY29udGV4dHMsIHZhbHVlcyApO1xuXG5cdFx0XHRcdFx0fSBlbHNlIGlmICggISgtLXJlbWFpbmluZykgKSB7XG5cdFx0XHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggY29udGV4dHMsIHZhbHVlcyApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fTtcblx0XHRcdH0sXG5cblx0XHRcdHByb2dyZXNzVmFsdWVzLCBwcm9ncmVzc0NvbnRleHRzLCByZXNvbHZlQ29udGV4dHM7XG5cblx0XHQvLyBhZGQgbGlzdGVuZXJzIHRvIERlZmVycmVkIHN1Ym9yZGluYXRlczsgdHJlYXQgb3RoZXJzIGFzIHJlc29sdmVkXG5cdFx0aWYgKCBsZW5ndGggPiAxICkge1xuXHRcdFx0cHJvZ3Jlc3NWYWx1ZXMgPSBuZXcgQXJyYXkoIGxlbmd0aCApO1xuXHRcdFx0cHJvZ3Jlc3NDb250ZXh0cyA9IG5ldyBBcnJheSggbGVuZ3RoICk7XG5cdFx0XHRyZXNvbHZlQ29udGV4dHMgPSBuZXcgQXJyYXkoIGxlbmd0aCApO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRcdGlmICggcmVzb2x2ZVZhbHVlc1sgaSBdICYmIGpRdWVyeS5pc0Z1bmN0aW9uKCByZXNvbHZlVmFsdWVzWyBpIF0ucHJvbWlzZSApICkge1xuXHRcdFx0XHRcdHJlc29sdmVWYWx1ZXNbIGkgXS5wcm9taXNlKClcblx0XHRcdFx0XHRcdC5kb25lKCB1cGRhdGVGdW5jKCBpLCByZXNvbHZlQ29udGV4dHMsIHJlc29sdmVWYWx1ZXMgKSApXG5cdFx0XHRcdFx0XHQuZmFpbCggZGVmZXJyZWQucmVqZWN0IClcblx0XHRcdFx0XHRcdC5wcm9ncmVzcyggdXBkYXRlRnVuYyggaSwgcHJvZ3Jlc3NDb250ZXh0cywgcHJvZ3Jlc3NWYWx1ZXMgKSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdC0tcmVtYWluaW5nO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gaWYgd2UncmUgbm90IHdhaXRpbmcgb24gYW55dGhpbmcsIHJlc29sdmUgdGhlIG1hc3RlclxuXHRcdGlmICggIXJlbWFpbmluZyApIHtcblx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCByZXNvbHZlQ29udGV4dHMsIHJlc29sdmVWYWx1ZXMgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZGVmZXJyZWQucHJvbWlzZSgpO1xuXHR9XG59KTtcblxuXG4vLyBUaGUgZGVmZXJyZWQgdXNlZCBvbiBET00gcmVhZHlcbnZhciByZWFkeUxpc3Q7XG5cbmpRdWVyeS5mbi5yZWFkeSA9IGZ1bmN0aW9uKCBmbiApIHtcblx0Ly8gQWRkIHRoZSBjYWxsYmFja1xuXHRqUXVlcnkucmVhZHkucHJvbWlzZSgpLmRvbmUoIGZuICk7XG5cblx0cmV0dXJuIHRoaXM7XG59O1xuXG5qUXVlcnkuZXh0ZW5kKHtcblx0Ly8gSXMgdGhlIERPTSByZWFkeSB0byBiZSB1c2VkPyBTZXQgdG8gdHJ1ZSBvbmNlIGl0IG9jY3Vycy5cblx0aXNSZWFkeTogZmFsc2UsXG5cblx0Ly8gQSBjb3VudGVyIHRvIHRyYWNrIGhvdyBtYW55IGl0ZW1zIHRvIHdhaXQgZm9yIGJlZm9yZVxuXHQvLyB0aGUgcmVhZHkgZXZlbnQgZmlyZXMuIFNlZSAjNjc4MVxuXHRyZWFkeVdhaXQ6IDEsXG5cblx0Ly8gSG9sZCAob3IgcmVsZWFzZSkgdGhlIHJlYWR5IGV2ZW50XG5cdGhvbGRSZWFkeTogZnVuY3Rpb24oIGhvbGQgKSB7XG5cdFx0aWYgKCBob2xkICkge1xuXHRcdFx0alF1ZXJ5LnJlYWR5V2FpdCsrO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRqUXVlcnkucmVhZHkoIHRydWUgKTtcblx0XHR9XG5cdH0sXG5cblx0Ly8gSGFuZGxlIHdoZW4gdGhlIERPTSBpcyByZWFkeVxuXHRyZWFkeTogZnVuY3Rpb24oIHdhaXQgKSB7XG5cblx0XHQvLyBBYm9ydCBpZiB0aGVyZSBhcmUgcGVuZGluZyBob2xkcyBvciB3ZSdyZSBhbHJlYWR5IHJlYWR5XG5cdFx0aWYgKCB3YWl0ID09PSB0cnVlID8gLS1qUXVlcnkucmVhZHlXYWl0IDogalF1ZXJ5LmlzUmVhZHkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gTWFrZSBzdXJlIGJvZHkgZXhpc3RzLCBhdCBsZWFzdCwgaW4gY2FzZSBJRSBnZXRzIGEgbGl0dGxlIG92ZXJ6ZWFsb3VzICh0aWNrZXQgIzU0NDMpLlxuXHRcdGlmICggIWRvY3VtZW50LmJvZHkgKSB7XG5cdFx0XHRyZXR1cm4gc2V0VGltZW91dCggalF1ZXJ5LnJlYWR5ICk7XG5cdFx0fVxuXG5cdFx0Ly8gUmVtZW1iZXIgdGhhdCB0aGUgRE9NIGlzIHJlYWR5XG5cdFx0alF1ZXJ5LmlzUmVhZHkgPSB0cnVlO1xuXG5cdFx0Ly8gSWYgYSBub3JtYWwgRE9NIFJlYWR5IGV2ZW50IGZpcmVkLCBkZWNyZW1lbnQsIGFuZCB3YWl0IGlmIG5lZWQgYmVcblx0XHRpZiAoIHdhaXQgIT09IHRydWUgJiYgLS1qUXVlcnkucmVhZHlXYWl0ID4gMCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBJZiB0aGVyZSBhcmUgZnVuY3Rpb25zIGJvdW5kLCB0byBleGVjdXRlXG5cdFx0cmVhZHlMaXN0LnJlc29sdmVXaXRoKCBkb2N1bWVudCwgWyBqUXVlcnkgXSApO1xuXG5cdFx0Ly8gVHJpZ2dlciBhbnkgYm91bmQgcmVhZHkgZXZlbnRzXG5cdFx0aWYgKCBqUXVlcnkuZm4udHJpZ2dlckhhbmRsZXIgKSB7XG5cdFx0XHRqUXVlcnkoIGRvY3VtZW50ICkudHJpZ2dlckhhbmRsZXIoIFwicmVhZHlcIiApO1xuXHRcdFx0alF1ZXJ5KCBkb2N1bWVudCApLm9mZiggXCJyZWFkeVwiICk7XG5cdFx0fVxuXHR9XG59KTtcblxuLyoqXG4gKiBDbGVhbi11cCBtZXRob2QgZm9yIGRvbSByZWFkeSBldmVudHNcbiAqL1xuZnVuY3Rpb24gZGV0YWNoKCkge1xuXHRpZiAoIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIgKSB7XG5cdFx0ZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggXCJET01Db250ZW50TG9hZGVkXCIsIGNvbXBsZXRlZCwgZmFsc2UgKTtcblx0XHR3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lciggXCJsb2FkXCIsIGNvbXBsZXRlZCwgZmFsc2UgKTtcblxuXHR9IGVsc2Uge1xuXHRcdGRvY3VtZW50LmRldGFjaEV2ZW50KCBcIm9ucmVhZHlzdGF0ZWNoYW5nZVwiLCBjb21wbGV0ZWQgKTtcblx0XHR3aW5kb3cuZGV0YWNoRXZlbnQoIFwib25sb2FkXCIsIGNvbXBsZXRlZCApO1xuXHR9XG59XG5cbi8qKlxuICogVGhlIHJlYWR5IGV2ZW50IGhhbmRsZXIgYW5kIHNlbGYgY2xlYW51cCBtZXRob2RcbiAqL1xuZnVuY3Rpb24gY29tcGxldGVkKCkge1xuXHQvLyByZWFkeVN0YXRlID09PSBcImNvbXBsZXRlXCIgaXMgZ29vZCBlbm91Z2ggZm9yIHVzIHRvIGNhbGwgdGhlIGRvbSByZWFkeSBpbiBvbGRJRVxuXHRpZiAoIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIgfHwgZXZlbnQudHlwZSA9PT0gXCJsb2FkXCIgfHwgZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gXCJjb21wbGV0ZVwiICkge1xuXHRcdGRldGFjaCgpO1xuXHRcdGpRdWVyeS5yZWFkeSgpO1xuXHR9XG59XG5cbmpRdWVyeS5yZWFkeS5wcm9taXNlID0gZnVuY3Rpb24oIG9iaiApIHtcblx0aWYgKCAhcmVhZHlMaXN0ICkge1xuXG5cdFx0cmVhZHlMaXN0ID0galF1ZXJ5LkRlZmVycmVkKCk7XG5cblx0XHQvLyBDYXRjaCBjYXNlcyB3aGVyZSAkKGRvY3VtZW50KS5yZWFkeSgpIGlzIGNhbGxlZCBhZnRlciB0aGUgYnJvd3NlciBldmVudCBoYXMgYWxyZWFkeSBvY2N1cnJlZC5cblx0XHQvLyB3ZSBvbmNlIHRyaWVkIHRvIHVzZSByZWFkeVN0YXRlIFwiaW50ZXJhY3RpdmVcIiBoZXJlLCBidXQgaXQgY2F1c2VkIGlzc3VlcyBsaWtlIHRoZSBvbmVcblx0XHQvLyBkaXNjb3ZlcmVkIGJ5IENocmlzUyBoZXJlOiBodHRwOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xMjI4MiNjb21tZW50OjE1XG5cdFx0aWYgKCBkb2N1bWVudC5yZWFkeVN0YXRlID09PSBcImNvbXBsZXRlXCIgKSB7XG5cdFx0XHQvLyBIYW5kbGUgaXQgYXN5bmNocm9ub3VzbHkgdG8gYWxsb3cgc2NyaXB0cyB0aGUgb3Bwb3J0dW5pdHkgdG8gZGVsYXkgcmVhZHlcblx0XHRcdHNldFRpbWVvdXQoIGpRdWVyeS5yZWFkeSApO1xuXG5cdFx0Ly8gU3RhbmRhcmRzLWJhc2VkIGJyb3dzZXJzIHN1cHBvcnQgRE9NQ29udGVudExvYWRlZFxuXHRcdH0gZWxzZSBpZiAoIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIgKSB7XG5cdFx0XHQvLyBVc2UgdGhlIGhhbmR5IGV2ZW50IGNhbGxiYWNrXG5cdFx0XHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCBcIkRPTUNvbnRlbnRMb2FkZWRcIiwgY29tcGxldGVkLCBmYWxzZSApO1xuXG5cdFx0XHQvLyBBIGZhbGxiYWNrIHRvIHdpbmRvdy5vbmxvYWQsIHRoYXQgd2lsbCBhbHdheXMgd29ya1xuXHRcdFx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoIFwibG9hZFwiLCBjb21wbGV0ZWQsIGZhbHNlICk7XG5cblx0XHQvLyBJZiBJRSBldmVudCBtb2RlbCBpcyB1c2VkXG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIEVuc3VyZSBmaXJpbmcgYmVmb3JlIG9ubG9hZCwgbWF5YmUgbGF0ZSBidXQgc2FmZSBhbHNvIGZvciBpZnJhbWVzXG5cdFx0XHRkb2N1bWVudC5hdHRhY2hFdmVudCggXCJvbnJlYWR5c3RhdGVjaGFuZ2VcIiwgY29tcGxldGVkICk7XG5cblx0XHRcdC8vIEEgZmFsbGJhY2sgdG8gd2luZG93Lm9ubG9hZCwgdGhhdCB3aWxsIGFsd2F5cyB3b3JrXG5cdFx0XHR3aW5kb3cuYXR0YWNoRXZlbnQoIFwib25sb2FkXCIsIGNvbXBsZXRlZCApO1xuXG5cdFx0XHQvLyBJZiBJRSBhbmQgbm90IGEgZnJhbWVcblx0XHRcdC8vIGNvbnRpbnVhbGx5IGNoZWNrIHRvIHNlZSBpZiB0aGUgZG9jdW1lbnQgaXMgcmVhZHlcblx0XHRcdHZhciB0b3AgPSBmYWxzZTtcblxuXHRcdFx0dHJ5IHtcblx0XHRcdFx0dG9wID0gd2luZG93LmZyYW1lRWxlbWVudCA9PSBudWxsICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcblx0XHRcdH0gY2F0Y2goZSkge31cblxuXHRcdFx0aWYgKCB0b3AgJiYgdG9wLmRvU2Nyb2xsICkge1xuXHRcdFx0XHQoZnVuY3Rpb24gZG9TY3JvbGxDaGVjaygpIHtcblx0XHRcdFx0XHRpZiAoICFqUXVlcnkuaXNSZWFkeSApIHtcblxuXHRcdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdFx0Ly8gVXNlIHRoZSB0cmljayBieSBEaWVnbyBQZXJpbmlcblx0XHRcdFx0XHRcdFx0Ly8gaHR0cDovL2phdmFzY3JpcHQubndib3guY29tL0lFQ29udGVudExvYWRlZC9cblx0XHRcdFx0XHRcdFx0dG9wLmRvU2Nyb2xsKFwibGVmdFwiKTtcblx0XHRcdFx0XHRcdH0gY2F0Y2goZSkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gc2V0VGltZW91dCggZG9TY3JvbGxDaGVjaywgNTAgKTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gZGV0YWNoIGFsbCBkb20gcmVhZHkgZXZlbnRzXG5cdFx0XHRcdFx0XHRkZXRhY2goKTtcblxuXHRcdFx0XHRcdFx0Ly8gYW5kIGV4ZWN1dGUgYW55IHdhaXRpbmcgZnVuY3Rpb25zXG5cdFx0XHRcdFx0XHRqUXVlcnkucmVhZHkoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pKCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdHJldHVybiByZWFkeUxpc3QucHJvbWlzZSggb2JqICk7XG59O1xuXG5cbnZhciBzdHJ1bmRlZmluZWQgPSB0eXBlb2YgdW5kZWZpbmVkO1xuXG5cblxuLy8gU3VwcG9ydDogSUU8OVxuLy8gSXRlcmF0aW9uIG92ZXIgb2JqZWN0J3MgaW5oZXJpdGVkIHByb3BlcnRpZXMgYmVmb3JlIGl0cyBvd25cbnZhciBpO1xuZm9yICggaSBpbiBqUXVlcnkoIHN1cHBvcnQgKSApIHtcblx0YnJlYWs7XG59XG5zdXBwb3J0Lm93bkxhc3QgPSBpICE9PSBcIjBcIjtcblxuLy8gTm90ZTogbW9zdCBzdXBwb3J0IHRlc3RzIGFyZSBkZWZpbmVkIGluIHRoZWlyIHJlc3BlY3RpdmUgbW9kdWxlcy5cbi8vIGZhbHNlIHVudGlsIHRoZSB0ZXN0IGlzIHJ1blxuc3VwcG9ydC5pbmxpbmVCbG9ja05lZWRzTGF5b3V0ID0gZmFsc2U7XG5cbi8vIEV4ZWN1dGUgQVNBUCBpbiBjYXNlIHdlIG5lZWQgdG8gc2V0IGJvZHkuc3R5bGUuem9vbVxualF1ZXJ5KGZ1bmN0aW9uKCkge1xuXHQvLyBNaW5pZmllZDogdmFyIGEsYixjLGRcblx0dmFyIHZhbCwgZGl2LCBib2R5LCBjb250YWluZXI7XG5cblx0Ym9keSA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCBcImJvZHlcIiApWyAwIF07XG5cdGlmICggIWJvZHkgfHwgIWJvZHkuc3R5bGUgKSB7XG5cdFx0Ly8gUmV0dXJuIGZvciBmcmFtZXNldCBkb2NzIHRoYXQgZG9uJ3QgaGF2ZSBhIGJvZHlcblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyBTZXR1cFxuXHRkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICk7XG5cdGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKTtcblx0Y29udGFpbmVyLnN0eWxlLmNzc1RleHQgPSBcInBvc2l0aW9uOmFic29sdXRlO2JvcmRlcjowO3dpZHRoOjA7aGVpZ2h0OjA7dG9wOjA7bGVmdDotOTk5OXB4XCI7XG5cdGJvZHkuYXBwZW5kQ2hpbGQoIGNvbnRhaW5lciApLmFwcGVuZENoaWxkKCBkaXYgKTtcblxuXHRpZiAoIHR5cGVvZiBkaXYuc3R5bGUuem9vbSAhPT0gc3RydW5kZWZpbmVkICkge1xuXHRcdC8vIFN1cHBvcnQ6IElFPDhcblx0XHQvLyBDaGVjayBpZiBuYXRpdmVseSBibG9jay1sZXZlbCBlbGVtZW50cyBhY3QgbGlrZSBpbmxpbmUtYmxvY2tcblx0XHQvLyBlbGVtZW50cyB3aGVuIHNldHRpbmcgdGhlaXIgZGlzcGxheSB0byAnaW5saW5lJyBhbmQgZ2l2aW5nXG5cdFx0Ly8gdGhlbSBsYXlvdXRcblx0XHRkaXYuc3R5bGUuY3NzVGV4dCA9IFwiZGlzcGxheTppbmxpbmU7bWFyZ2luOjA7Ym9yZGVyOjA7cGFkZGluZzoxcHg7d2lkdGg6MXB4O3pvb206MVwiO1xuXG5cdFx0c3VwcG9ydC5pbmxpbmVCbG9ja05lZWRzTGF5b3V0ID0gdmFsID0gZGl2Lm9mZnNldFdpZHRoID09PSAzO1xuXHRcdGlmICggdmFsICkge1xuXHRcdFx0Ly8gUHJldmVudCBJRSA2IGZyb20gYWZmZWN0aW5nIGxheW91dCBmb3IgcG9zaXRpb25lZCBlbGVtZW50cyAjMTEwNDhcblx0XHRcdC8vIFByZXZlbnQgSUUgZnJvbSBzaHJpbmtpbmcgdGhlIGJvZHkgaW4gSUUgNyBtb2RlICMxMjg2OVxuXHRcdFx0Ly8gU3VwcG9ydDogSUU8OFxuXHRcdFx0Ym9keS5zdHlsZS56b29tID0gMTtcblx0XHR9XG5cdH1cblxuXHRib2R5LnJlbW92ZUNoaWxkKCBjb250YWluZXIgKTtcbn0pO1xuXG5cblxuXG4oZnVuY3Rpb24oKSB7XG5cdHZhciBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICk7XG5cblx0Ly8gRXhlY3V0ZSB0aGUgdGVzdCBvbmx5IGlmIG5vdCBhbHJlYWR5IGV4ZWN1dGVkIGluIGFub3RoZXIgbW9kdWxlLlxuXHRpZiAoc3VwcG9ydC5kZWxldGVFeHBhbmRvID09IG51bGwpIHtcblx0XHQvLyBTdXBwb3J0OiBJRTw5XG5cdFx0c3VwcG9ydC5kZWxldGVFeHBhbmRvID0gdHJ1ZTtcblx0XHR0cnkge1xuXHRcdFx0ZGVsZXRlIGRpdi50ZXN0O1xuXHRcdH0gY2F0Y2goIGUgKSB7XG5cdFx0XHRzdXBwb3J0LmRlbGV0ZUV4cGFuZG8gPSBmYWxzZTtcblx0XHR9XG5cdH1cblxuXHQvLyBOdWxsIGVsZW1lbnRzIHRvIGF2b2lkIGxlYWtzIGluIElFLlxuXHRkaXYgPSBudWxsO1xufSkoKTtcblxuXG4vKipcbiAqIERldGVybWluZXMgd2hldGhlciBhbiBvYmplY3QgY2FuIGhhdmUgZGF0YVxuICovXG5qUXVlcnkuYWNjZXB0RGF0YSA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHR2YXIgbm9EYXRhID0galF1ZXJ5Lm5vRGF0YVsgKGVsZW0ubm9kZU5hbWUgKyBcIiBcIikudG9Mb3dlckNhc2UoKSBdLFxuXHRcdG5vZGVUeXBlID0gK2VsZW0ubm9kZVR5cGUgfHwgMTtcblxuXHQvLyBEbyBub3Qgc2V0IGRhdGEgb24gbm9uLWVsZW1lbnQgRE9NIG5vZGVzIGJlY2F1c2UgaXQgd2lsbCBub3QgYmUgY2xlYXJlZCAoIzgzMzUpLlxuXHRyZXR1cm4gbm9kZVR5cGUgIT09IDEgJiYgbm9kZVR5cGUgIT09IDkgP1xuXHRcdGZhbHNlIDpcblxuXHRcdC8vIE5vZGVzIGFjY2VwdCBkYXRhIHVubGVzcyBvdGhlcndpc2Ugc3BlY2lmaWVkOyByZWplY3Rpb24gY2FuIGJlIGNvbmRpdGlvbmFsXG5cdFx0IW5vRGF0YSB8fCBub0RhdGEgIT09IHRydWUgJiYgZWxlbS5nZXRBdHRyaWJ1dGUoXCJjbGFzc2lkXCIpID09PSBub0RhdGE7XG59O1xuXG5cbnZhciByYnJhY2UgPSAvXig/Olxce1tcXHdcXFddKlxcfXxcXFtbXFx3XFxXXSpcXF0pJC8sXG5cdHJtdWx0aURhc2ggPSAvKFtBLVpdKS9nO1xuXG5mdW5jdGlvbiBkYXRhQXR0ciggZWxlbSwga2V5LCBkYXRhICkge1xuXHQvLyBJZiBub3RoaW5nIHdhcyBmb3VuZCBpbnRlcm5hbGx5LCB0cnkgdG8gZmV0Y2ggYW55XG5cdC8vIGRhdGEgZnJvbSB0aGUgSFRNTDUgZGF0YS0qIGF0dHJpYnV0ZVxuXHRpZiAoIGRhdGEgPT09IHVuZGVmaW5lZCAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXG5cdFx0dmFyIG5hbWUgPSBcImRhdGEtXCIgKyBrZXkucmVwbGFjZSggcm11bHRpRGFzaCwgXCItJDFcIiApLnRvTG93ZXJDYXNlKCk7XG5cblx0XHRkYXRhID0gZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUgKTtcblxuXHRcdGlmICggdHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHRkYXRhID0gZGF0YSA9PT0gXCJ0cnVlXCIgPyB0cnVlIDpcblx0XHRcdFx0XHRkYXRhID09PSBcImZhbHNlXCIgPyBmYWxzZSA6XG5cdFx0XHRcdFx0ZGF0YSA9PT0gXCJudWxsXCIgPyBudWxsIDpcblx0XHRcdFx0XHQvLyBPbmx5IGNvbnZlcnQgdG8gYSBudW1iZXIgaWYgaXQgZG9lc24ndCBjaGFuZ2UgdGhlIHN0cmluZ1xuXHRcdFx0XHRcdCtkYXRhICsgXCJcIiA9PT0gZGF0YSA/ICtkYXRhIDpcblx0XHRcdFx0XHRyYnJhY2UudGVzdCggZGF0YSApID8galF1ZXJ5LnBhcnNlSlNPTiggZGF0YSApIDpcblx0XHRcdFx0XHRkYXRhO1xuXHRcdFx0fSBjYXRjaCggZSApIHt9XG5cblx0XHRcdC8vIE1ha2Ugc3VyZSB3ZSBzZXQgdGhlIGRhdGEgc28gaXQgaXNuJ3QgY2hhbmdlZCBsYXRlclxuXHRcdFx0alF1ZXJ5LmRhdGEoIGVsZW0sIGtleSwgZGF0YSApO1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGRhdGE7XG59XG5cbi8vIGNoZWNrcyBhIGNhY2hlIG9iamVjdCBmb3IgZW1wdGluZXNzXG5mdW5jdGlvbiBpc0VtcHR5RGF0YU9iamVjdCggb2JqICkge1xuXHR2YXIgbmFtZTtcblx0Zm9yICggbmFtZSBpbiBvYmogKSB7XG5cblx0XHQvLyBpZiB0aGUgcHVibGljIGRhdGEgb2JqZWN0IGlzIGVtcHR5LCB0aGUgcHJpdmF0ZSBpcyBzdGlsbCBlbXB0eVxuXHRcdGlmICggbmFtZSA9PT0gXCJkYXRhXCIgJiYgalF1ZXJ5LmlzRW1wdHlPYmplY3QoIG9ialtuYW1lXSApICkge1xuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXHRcdGlmICggbmFtZSAhPT0gXCJ0b0pTT05cIiApIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gaW50ZXJuYWxEYXRhKCBlbGVtLCBuYW1lLCBkYXRhLCBwdnQgLyogSW50ZXJuYWwgVXNlIE9ubHkgKi8gKSB7XG5cdGlmICggIWpRdWVyeS5hY2NlcHREYXRhKCBlbGVtICkgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0dmFyIHJldCwgdGhpc0NhY2hlLFxuXHRcdGludGVybmFsS2V5ID0galF1ZXJ5LmV4cGFuZG8sXG5cblx0XHQvLyBXZSBoYXZlIHRvIGhhbmRsZSBET00gbm9kZXMgYW5kIEpTIG9iamVjdHMgZGlmZmVyZW50bHkgYmVjYXVzZSBJRTYtN1xuXHRcdC8vIGNhbid0IEdDIG9iamVjdCByZWZlcmVuY2VzIHByb3Blcmx5IGFjcm9zcyB0aGUgRE9NLUpTIGJvdW5kYXJ5XG5cdFx0aXNOb2RlID0gZWxlbS5ub2RlVHlwZSxcblxuXHRcdC8vIE9ubHkgRE9NIG5vZGVzIG5lZWQgdGhlIGdsb2JhbCBqUXVlcnkgY2FjaGU7IEpTIG9iamVjdCBkYXRhIGlzXG5cdFx0Ly8gYXR0YWNoZWQgZGlyZWN0bHkgdG8gdGhlIG9iamVjdCBzbyBHQyBjYW4gb2NjdXIgYXV0b21hdGljYWxseVxuXHRcdGNhY2hlID0gaXNOb2RlID8galF1ZXJ5LmNhY2hlIDogZWxlbSxcblxuXHRcdC8vIE9ubHkgZGVmaW5pbmcgYW4gSUQgZm9yIEpTIG9iamVjdHMgaWYgaXRzIGNhY2hlIGFscmVhZHkgZXhpc3RzIGFsbG93c1xuXHRcdC8vIHRoZSBjb2RlIHRvIHNob3J0Y3V0IG9uIHRoZSBzYW1lIHBhdGggYXMgYSBET00gbm9kZSB3aXRoIG5vIGNhY2hlXG5cdFx0aWQgPSBpc05vZGUgPyBlbGVtWyBpbnRlcm5hbEtleSBdIDogZWxlbVsgaW50ZXJuYWxLZXkgXSAmJiBpbnRlcm5hbEtleTtcblxuXHQvLyBBdm9pZCBkb2luZyBhbnkgbW9yZSB3b3JrIHRoYW4gd2UgbmVlZCB0byB3aGVuIHRyeWluZyB0byBnZXQgZGF0YSBvbiBhblxuXHQvLyBvYmplY3QgdGhhdCBoYXMgbm8gZGF0YSBhdCBhbGxcblx0aWYgKCAoIWlkIHx8ICFjYWNoZVtpZF0gfHwgKCFwdnQgJiYgIWNhY2hlW2lkXS5kYXRhKSkgJiYgZGF0YSA9PT0gdW5kZWZpbmVkICYmIHR5cGVvZiBuYW1lID09PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdGlmICggIWlkICkge1xuXHRcdC8vIE9ubHkgRE9NIG5vZGVzIG5lZWQgYSBuZXcgdW5pcXVlIElEIGZvciBlYWNoIGVsZW1lbnQgc2luY2UgdGhlaXIgZGF0YVxuXHRcdC8vIGVuZHMgdXAgaW4gdGhlIGdsb2JhbCBjYWNoZVxuXHRcdGlmICggaXNOb2RlICkge1xuXHRcdFx0aWQgPSBlbGVtWyBpbnRlcm5hbEtleSBdID0gZGVsZXRlZElkcy5wb3AoKSB8fCBqUXVlcnkuZ3VpZCsrO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRpZCA9IGludGVybmFsS2V5O1xuXHRcdH1cblx0fVxuXG5cdGlmICggIWNhY2hlWyBpZCBdICkge1xuXHRcdC8vIEF2b2lkIGV4cG9zaW5nIGpRdWVyeSBtZXRhZGF0YSBvbiBwbGFpbiBKUyBvYmplY3RzIHdoZW4gdGhlIG9iamVjdFxuXHRcdC8vIGlzIHNlcmlhbGl6ZWQgdXNpbmcgSlNPTi5zdHJpbmdpZnlcblx0XHRjYWNoZVsgaWQgXSA9IGlzTm9kZSA/IHt9IDogeyB0b0pTT046IGpRdWVyeS5ub29wIH07XG5cdH1cblxuXHQvLyBBbiBvYmplY3QgY2FuIGJlIHBhc3NlZCB0byBqUXVlcnkuZGF0YSBpbnN0ZWFkIG9mIGEga2V5L3ZhbHVlIHBhaXI7IHRoaXMgZ2V0c1xuXHQvLyBzaGFsbG93IGNvcGllZCBvdmVyIG9udG8gdGhlIGV4aXN0aW5nIGNhY2hlXG5cdGlmICggdHlwZW9mIG5hbWUgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIG5hbWUgPT09IFwiZnVuY3Rpb25cIiApIHtcblx0XHRpZiAoIHB2dCApIHtcblx0XHRcdGNhY2hlWyBpZCBdID0galF1ZXJ5LmV4dGVuZCggY2FjaGVbIGlkIF0sIG5hbWUgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Y2FjaGVbIGlkIF0uZGF0YSA9IGpRdWVyeS5leHRlbmQoIGNhY2hlWyBpZCBdLmRhdGEsIG5hbWUgKTtcblx0XHR9XG5cdH1cblxuXHR0aGlzQ2FjaGUgPSBjYWNoZVsgaWQgXTtcblxuXHQvLyBqUXVlcnkgZGF0YSgpIGlzIHN0b3JlZCBpbiBhIHNlcGFyYXRlIG9iamVjdCBpbnNpZGUgdGhlIG9iamVjdCdzIGludGVybmFsIGRhdGFcblx0Ly8gY2FjaGUgaW4gb3JkZXIgdG8gYXZvaWQga2V5IGNvbGxpc2lvbnMgYmV0d2VlbiBpbnRlcm5hbCBkYXRhIGFuZCB1c2VyLWRlZmluZWRcblx0Ly8gZGF0YS5cblx0aWYgKCAhcHZ0ICkge1xuXHRcdGlmICggIXRoaXNDYWNoZS5kYXRhICkge1xuXHRcdFx0dGhpc0NhY2hlLmRhdGEgPSB7fTtcblx0XHR9XG5cblx0XHR0aGlzQ2FjaGUgPSB0aGlzQ2FjaGUuZGF0YTtcblx0fVxuXG5cdGlmICggZGF0YSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdHRoaXNDYWNoZVsgalF1ZXJ5LmNhbWVsQ2FzZSggbmFtZSApIF0gPSBkYXRhO1xuXHR9XG5cblx0Ly8gQ2hlY2sgZm9yIGJvdGggY29udmVydGVkLXRvLWNhbWVsIGFuZCBub24tY29udmVydGVkIGRhdGEgcHJvcGVydHkgbmFtZXNcblx0Ly8gSWYgYSBkYXRhIHByb3BlcnR5IHdhcyBzcGVjaWZpZWRcblx0aWYgKCB0eXBlb2YgbmFtZSA9PT0gXCJzdHJpbmdcIiApIHtcblxuXHRcdC8vIEZpcnN0IFRyeSB0byBmaW5kIGFzLWlzIHByb3BlcnR5IGRhdGFcblx0XHRyZXQgPSB0aGlzQ2FjaGVbIG5hbWUgXTtcblxuXHRcdC8vIFRlc3QgZm9yIG51bGx8dW5kZWZpbmVkIHByb3BlcnR5IGRhdGFcblx0XHRpZiAoIHJldCA9PSBudWxsICkge1xuXG5cdFx0XHQvLyBUcnkgdG8gZmluZCB0aGUgY2FtZWxDYXNlZCBwcm9wZXJ0eVxuXHRcdFx0cmV0ID0gdGhpc0NhY2hlWyBqUXVlcnkuY2FtZWxDYXNlKCBuYW1lICkgXTtcblx0XHR9XG5cdH0gZWxzZSB7XG5cdFx0cmV0ID0gdGhpc0NhY2hlO1xuXHR9XG5cblx0cmV0dXJuIHJldDtcbn1cblxuZnVuY3Rpb24gaW50ZXJuYWxSZW1vdmVEYXRhKCBlbGVtLCBuYW1lLCBwdnQgKSB7XG5cdGlmICggIWpRdWVyeS5hY2NlcHREYXRhKCBlbGVtICkgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0dmFyIHRoaXNDYWNoZSwgaSxcblx0XHRpc05vZGUgPSBlbGVtLm5vZGVUeXBlLFxuXG5cdFx0Ly8gU2VlIGpRdWVyeS5kYXRhIGZvciBtb3JlIGluZm9ybWF0aW9uXG5cdFx0Y2FjaGUgPSBpc05vZGUgPyBqUXVlcnkuY2FjaGUgOiBlbGVtLFxuXHRcdGlkID0gaXNOb2RlID8gZWxlbVsgalF1ZXJ5LmV4cGFuZG8gXSA6IGpRdWVyeS5leHBhbmRvO1xuXG5cdC8vIElmIHRoZXJlIGlzIGFscmVhZHkgbm8gY2FjaGUgZW50cnkgZm9yIHRoaXMgb2JqZWN0LCB0aGVyZSBpcyBub1xuXHQvLyBwdXJwb3NlIGluIGNvbnRpbnVpbmdcblx0aWYgKCAhY2FjaGVbIGlkIF0gKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0aWYgKCBuYW1lICkge1xuXG5cdFx0dGhpc0NhY2hlID0gcHZ0ID8gY2FjaGVbIGlkIF0gOiBjYWNoZVsgaWQgXS5kYXRhO1xuXG5cdFx0aWYgKCB0aGlzQ2FjaGUgKSB7XG5cblx0XHRcdC8vIFN1cHBvcnQgYXJyYXkgb3Igc3BhY2Ugc2VwYXJhdGVkIHN0cmluZyBuYW1lcyBmb3IgZGF0YSBrZXlzXG5cdFx0XHRpZiAoICFqUXVlcnkuaXNBcnJheSggbmFtZSApICkge1xuXG5cdFx0XHRcdC8vIHRyeSB0aGUgc3RyaW5nIGFzIGEga2V5IGJlZm9yZSBhbnkgbWFuaXB1bGF0aW9uXG5cdFx0XHRcdGlmICggbmFtZSBpbiB0aGlzQ2FjaGUgKSB7XG5cdFx0XHRcdFx0bmFtZSA9IFsgbmFtZSBdO1xuXHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0Ly8gc3BsaXQgdGhlIGNhbWVsIGNhc2VkIHZlcnNpb24gYnkgc3BhY2VzIHVubGVzcyBhIGtleSB3aXRoIHRoZSBzcGFjZXMgZXhpc3RzXG5cdFx0XHRcdFx0bmFtZSA9IGpRdWVyeS5jYW1lbENhc2UoIG5hbWUgKTtcblx0XHRcdFx0XHRpZiAoIG5hbWUgaW4gdGhpc0NhY2hlICkge1xuXHRcdFx0XHRcdFx0bmFtZSA9IFsgbmFtZSBdO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRuYW1lID0gbmFtZS5zcGxpdChcIiBcIik7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHQvLyBJZiBcIm5hbWVcIiBpcyBhbiBhcnJheSBvZiBrZXlzLi4uXG5cdFx0XHRcdC8vIFdoZW4gZGF0YSBpcyBpbml0aWFsbHkgY3JlYXRlZCwgdmlhIChcImtleVwiLCBcInZhbFwiKSBzaWduYXR1cmUsXG5cdFx0XHRcdC8vIGtleXMgd2lsbCBiZSBjb252ZXJ0ZWQgdG8gY2FtZWxDYXNlLlxuXHRcdFx0XHQvLyBTaW5jZSB0aGVyZSBpcyBubyB3YXkgdG8gdGVsbCBfaG93XyBhIGtleSB3YXMgYWRkZWQsIHJlbW92ZVxuXHRcdFx0XHQvLyBib3RoIHBsYWluIGtleSBhbmQgY2FtZWxDYXNlIGtleS4gIzEyNzg2XG5cdFx0XHRcdC8vIFRoaXMgd2lsbCBvbmx5IHBlbmFsaXplIHRoZSBhcnJheSBhcmd1bWVudCBwYXRoLlxuXHRcdFx0XHRuYW1lID0gbmFtZS5jb25jYXQoIGpRdWVyeS5tYXAoIG5hbWUsIGpRdWVyeS5jYW1lbENhc2UgKSApO1xuXHRcdFx0fVxuXG5cdFx0XHRpID0gbmFtZS5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0ZGVsZXRlIHRoaXNDYWNoZVsgbmFtZVtpXSBdO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiB0aGVyZSBpcyBubyBkYXRhIGxlZnQgaW4gdGhlIGNhY2hlLCB3ZSB3YW50IHRvIGNvbnRpbnVlXG5cdFx0XHQvLyBhbmQgbGV0IHRoZSBjYWNoZSBvYmplY3QgaXRzZWxmIGdldCBkZXN0cm95ZWRcblx0XHRcdGlmICggcHZ0ID8gIWlzRW1wdHlEYXRhT2JqZWN0KHRoaXNDYWNoZSkgOiAhalF1ZXJ5LmlzRW1wdHlPYmplY3QodGhpc0NhY2hlKSApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFNlZSBqUXVlcnkuZGF0YSBmb3IgbW9yZSBpbmZvcm1hdGlvblxuXHRpZiAoICFwdnQgKSB7XG5cdFx0ZGVsZXRlIGNhY2hlWyBpZCBdLmRhdGE7XG5cblx0XHQvLyBEb24ndCBkZXN0cm95IHRoZSBwYXJlbnQgY2FjaGUgdW5sZXNzIHRoZSBpbnRlcm5hbCBkYXRhIG9iamVjdFxuXHRcdC8vIGhhZCBiZWVuIHRoZSBvbmx5IHRoaW5nIGxlZnQgaW4gaXRcblx0XHRpZiAoICFpc0VtcHR5RGF0YU9iamVjdCggY2FjaGVbIGlkIF0gKSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdH1cblxuXHQvLyBEZXN0cm95IHRoZSBjYWNoZVxuXHRpZiAoIGlzTm9kZSApIHtcblx0XHRqUXVlcnkuY2xlYW5EYXRhKCBbIGVsZW0gXSwgdHJ1ZSApO1xuXG5cdC8vIFVzZSBkZWxldGUgd2hlbiBzdXBwb3J0ZWQgZm9yIGV4cGFuZG9zIG9yIGBjYWNoZWAgaXMgbm90IGEgd2luZG93IHBlciBpc1dpbmRvdyAoIzEwMDgwKVxuXHQvKiBqc2hpbnQgZXFlcWVxOiBmYWxzZSAqL1xuXHR9IGVsc2UgaWYgKCBzdXBwb3J0LmRlbGV0ZUV4cGFuZG8gfHwgY2FjaGUgIT0gY2FjaGUud2luZG93ICkge1xuXHRcdC8qIGpzaGludCBlcWVxZXE6IHRydWUgKi9cblx0XHRkZWxldGUgY2FjaGVbIGlkIF07XG5cblx0Ly8gV2hlbiBhbGwgZWxzZSBmYWlscywgbnVsbFxuXHR9IGVsc2Uge1xuXHRcdGNhY2hlWyBpZCBdID0gbnVsbDtcblx0fVxufVxuXG5qUXVlcnkuZXh0ZW5kKHtcblx0Y2FjaGU6IHt9LFxuXG5cdC8vIFRoZSBmb2xsb3dpbmcgZWxlbWVudHMgKHNwYWNlLXN1ZmZpeGVkIHRvIGF2b2lkIE9iamVjdC5wcm90b3R5cGUgY29sbGlzaW9ucylcblx0Ly8gdGhyb3cgdW5jYXRjaGFibGUgZXhjZXB0aW9ucyBpZiB5b3UgYXR0ZW1wdCB0byBzZXQgZXhwYW5kbyBwcm9wZXJ0aWVzXG5cdG5vRGF0YToge1xuXHRcdFwiYXBwbGV0IFwiOiB0cnVlLFxuXHRcdFwiZW1iZWQgXCI6IHRydWUsXG5cdFx0Ly8gLi4uYnV0IEZsYXNoIG9iamVjdHMgKHdoaWNoIGhhdmUgdGhpcyBjbGFzc2lkKSAqY2FuKiBoYW5kbGUgZXhwYW5kb3Ncblx0XHRcIm9iamVjdCBcIjogXCJjbHNpZDpEMjdDREI2RS1BRTZELTExY2YtOTZCOC00NDQ1NTM1NDAwMDBcIlxuXHR9LFxuXG5cdGhhc0RhdGE6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdGVsZW0gPSBlbGVtLm5vZGVUeXBlID8galF1ZXJ5LmNhY2hlWyBlbGVtW2pRdWVyeS5leHBhbmRvXSBdIDogZWxlbVsgalF1ZXJ5LmV4cGFuZG8gXTtcblx0XHRyZXR1cm4gISFlbGVtICYmICFpc0VtcHR5RGF0YU9iamVjdCggZWxlbSApO1xuXHR9LFxuXG5cdGRhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBkYXRhICkge1xuXHRcdHJldHVybiBpbnRlcm5hbERhdGEoIGVsZW0sIG5hbWUsIGRhdGEgKTtcblx0fSxcblxuXHRyZW1vdmVEYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblx0XHRyZXR1cm4gaW50ZXJuYWxSZW1vdmVEYXRhKCBlbGVtLCBuYW1lICk7XG5cdH0sXG5cblx0Ly8gRm9yIGludGVybmFsIHVzZSBvbmx5LlxuXHRfZGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGRhdGEgKSB7XG5cdFx0cmV0dXJuIGludGVybmFsRGF0YSggZWxlbSwgbmFtZSwgZGF0YSwgdHJ1ZSApO1xuXHR9LFxuXG5cdF9yZW1vdmVEYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblx0XHRyZXR1cm4gaW50ZXJuYWxSZW1vdmVEYXRhKCBlbGVtLCBuYW1lLCB0cnVlICk7XG5cdH1cbn0pO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKHtcblx0ZGF0YTogZnVuY3Rpb24oIGtleSwgdmFsdWUgKSB7XG5cdFx0dmFyIGksIG5hbWUsIGRhdGEsXG5cdFx0XHRlbGVtID0gdGhpc1swXSxcblx0XHRcdGF0dHJzID0gZWxlbSAmJiBlbGVtLmF0dHJpYnV0ZXM7XG5cblx0XHQvLyBTcGVjaWFsIGV4cGVjdGlvbnMgb2YgLmRhdGEgYmFzaWNhbGx5IHRod2FydCBqUXVlcnkuYWNjZXNzLFxuXHRcdC8vIHNvIGltcGxlbWVudCB0aGUgcmVsZXZhbnQgYmVoYXZpb3Igb3Vyc2VsdmVzXG5cblx0XHQvLyBHZXRzIGFsbCB2YWx1ZXNcblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0aWYgKCB0aGlzLmxlbmd0aCApIHtcblx0XHRcdFx0ZGF0YSA9IGpRdWVyeS5kYXRhKCBlbGVtICk7XG5cblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICYmICFqUXVlcnkuX2RhdGEoIGVsZW0sIFwicGFyc2VkQXR0cnNcIiApICkge1xuXHRcdFx0XHRcdGkgPSBhdHRycy5sZW5ndGg7XG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFMTErXG5cdFx0XHRcdFx0XHQvLyBUaGUgYXR0cnMgZWxlbWVudHMgY2FuIGJlIG51bGwgKCMxNDg5NClcblx0XHRcdFx0XHRcdGlmICggYXR0cnNbIGkgXSApIHtcblx0XHRcdFx0XHRcdFx0bmFtZSA9IGF0dHJzWyBpIF0ubmFtZTtcblx0XHRcdFx0XHRcdFx0aWYgKCBuYW1lLmluZGV4T2YoIFwiZGF0YS1cIiApID09PSAwICkge1xuXHRcdFx0XHRcdFx0XHRcdG5hbWUgPSBqUXVlcnkuY2FtZWxDYXNlKCBuYW1lLnNsaWNlKDUpICk7XG5cdFx0XHRcdFx0XHRcdFx0ZGF0YUF0dHIoIGVsZW0sIG5hbWUsIGRhdGFbIG5hbWUgXSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGpRdWVyeS5fZGF0YSggZWxlbSwgXCJwYXJzZWRBdHRyc1wiLCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0fVxuXG5cdFx0Ly8gU2V0cyBtdWx0aXBsZSB2YWx1ZXNcblx0XHRpZiAoIHR5cGVvZiBrZXkgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRqUXVlcnkuZGF0YSggdGhpcywga2V5ICk7XG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHRyZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA+IDEgP1xuXG5cdFx0XHQvLyBTZXRzIG9uZSB2YWx1ZVxuXHRcdFx0dGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRqUXVlcnkuZGF0YSggdGhpcywga2V5LCB2YWx1ZSApO1xuXHRcdFx0fSkgOlxuXG5cdFx0XHQvLyBHZXRzIG9uZSB2YWx1ZVxuXHRcdFx0Ly8gVHJ5IHRvIGZldGNoIGFueSBpbnRlcm5hbGx5IHN0b3JlZCBkYXRhIGZpcnN0XG5cdFx0XHRlbGVtID8gZGF0YUF0dHIoIGVsZW0sIGtleSwgalF1ZXJ5LmRhdGEoIGVsZW0sIGtleSApICkgOiB1bmRlZmluZWQ7XG5cdH0sXG5cblx0cmVtb3ZlRGF0YTogZnVuY3Rpb24oIGtleSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LnJlbW92ZURhdGEoIHRoaXMsIGtleSApO1xuXHRcdH0pO1xuXHR9XG59KTtcblxuXG5qUXVlcnkuZXh0ZW5kKHtcblx0cXVldWU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCBkYXRhICkge1xuXHRcdHZhciBxdWV1ZTtcblxuXHRcdGlmICggZWxlbSApIHtcblx0XHRcdHR5cGUgPSAoIHR5cGUgfHwgXCJmeFwiICkgKyBcInF1ZXVlXCI7XG5cdFx0XHRxdWV1ZSA9IGpRdWVyeS5fZGF0YSggZWxlbSwgdHlwZSApO1xuXG5cdFx0XHQvLyBTcGVlZCB1cCBkZXF1ZXVlIGJ5IGdldHRpbmcgb3V0IHF1aWNrbHkgaWYgdGhpcyBpcyBqdXN0IGEgbG9va3VwXG5cdFx0XHRpZiAoIGRhdGEgKSB7XG5cdFx0XHRcdGlmICggIXF1ZXVlIHx8IGpRdWVyeS5pc0FycmF5KGRhdGEpICkge1xuXHRcdFx0XHRcdHF1ZXVlID0galF1ZXJ5Ll9kYXRhKCBlbGVtLCB0eXBlLCBqUXVlcnkubWFrZUFycmF5KGRhdGEpICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0cXVldWUucHVzaCggZGF0YSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcXVldWUgfHwgW107XG5cdFx0fVxuXHR9LFxuXG5cdGRlcXVldWU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlICkge1xuXHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblxuXHRcdHZhciBxdWV1ZSA9IGpRdWVyeS5xdWV1ZSggZWxlbSwgdHlwZSApLFxuXHRcdFx0c3RhcnRMZW5ndGggPSBxdWV1ZS5sZW5ndGgsXG5cdFx0XHRmbiA9IHF1ZXVlLnNoaWZ0KCksXG5cdFx0XHRob29rcyA9IGpRdWVyeS5fcXVldWVIb29rcyggZWxlbSwgdHlwZSApLFxuXHRcdFx0bmV4dCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggZWxlbSwgdHlwZSApO1xuXHRcdFx0fTtcblxuXHRcdC8vIElmIHRoZSBmeCBxdWV1ZSBpcyBkZXF1ZXVlZCwgYWx3YXlzIHJlbW92ZSB0aGUgcHJvZ3Jlc3Mgc2VudGluZWxcblx0XHRpZiAoIGZuID09PSBcImlucHJvZ3Jlc3NcIiApIHtcblx0XHRcdGZuID0gcXVldWUuc2hpZnQoKTtcblx0XHRcdHN0YXJ0TGVuZ3RoLS07XG5cdFx0fVxuXG5cdFx0aWYgKCBmbiApIHtcblxuXHRcdFx0Ly8gQWRkIGEgcHJvZ3Jlc3Mgc2VudGluZWwgdG8gcHJldmVudCB0aGUgZnggcXVldWUgZnJvbSBiZWluZ1xuXHRcdFx0Ly8gYXV0b21hdGljYWxseSBkZXF1ZXVlZFxuXHRcdFx0aWYgKCB0eXBlID09PSBcImZ4XCIgKSB7XG5cdFx0XHRcdHF1ZXVlLnVuc2hpZnQoIFwiaW5wcm9ncmVzc1wiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIGNsZWFyIHVwIHRoZSBsYXN0IHF1ZXVlIHN0b3AgZnVuY3Rpb25cblx0XHRcdGRlbGV0ZSBob29rcy5zdG9wO1xuXHRcdFx0Zm4uY2FsbCggZWxlbSwgbmV4dCwgaG9va3MgKTtcblx0XHR9XG5cblx0XHRpZiAoICFzdGFydExlbmd0aCAmJiBob29rcyApIHtcblx0XHRcdGhvb2tzLmVtcHR5LmZpcmUoKTtcblx0XHR9XG5cdH0sXG5cblx0Ly8gbm90IGludGVuZGVkIGZvciBwdWJsaWMgY29uc3VtcHRpb24gLSBnZW5lcmF0ZXMgYSBxdWV1ZUhvb2tzIG9iamVjdCwgb3IgcmV0dXJucyB0aGUgY3VycmVudCBvbmVcblx0X3F1ZXVlSG9va3M6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlICkge1xuXHRcdHZhciBrZXkgPSB0eXBlICsgXCJxdWV1ZUhvb2tzXCI7XG5cdFx0cmV0dXJuIGpRdWVyeS5fZGF0YSggZWxlbSwga2V5ICkgfHwgalF1ZXJ5Ll9kYXRhKCBlbGVtLCBrZXksIHtcblx0XHRcdGVtcHR5OiBqUXVlcnkuQ2FsbGJhY2tzKFwib25jZSBtZW1vcnlcIikuYWRkKGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRqUXVlcnkuX3JlbW92ZURhdGEoIGVsZW0sIHR5cGUgKyBcInF1ZXVlXCIgKTtcblx0XHRcdFx0alF1ZXJ5Ll9yZW1vdmVEYXRhKCBlbGVtLCBrZXkgKTtcblx0XHRcdH0pXG5cdFx0fSk7XG5cdH1cbn0pO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKHtcblx0cXVldWU6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xuXHRcdHZhciBzZXR0ZXIgPSAyO1xuXG5cdFx0aWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGRhdGEgPSB0eXBlO1xuXHRcdFx0dHlwZSA9IFwiZnhcIjtcblx0XHRcdHNldHRlci0tO1xuXHRcdH1cblxuXHRcdGlmICggYXJndW1lbnRzLmxlbmd0aCA8IHNldHRlciApIHtcblx0XHRcdHJldHVybiBqUXVlcnkucXVldWUoIHRoaXNbMF0sIHR5cGUgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZGF0YSA9PT0gdW5kZWZpbmVkID9cblx0XHRcdHRoaXMgOlxuXHRcdFx0dGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgcXVldWUgPSBqUXVlcnkucXVldWUoIHRoaXMsIHR5cGUsIGRhdGEgKTtcblxuXHRcdFx0XHQvLyBlbnN1cmUgYSBob29rcyBmb3IgdGhpcyBxdWV1ZVxuXHRcdFx0XHRqUXVlcnkuX3F1ZXVlSG9va3MoIHRoaXMsIHR5cGUgKTtcblxuXHRcdFx0XHRpZiAoIHR5cGUgPT09IFwiZnhcIiAmJiBxdWV1ZVswXSAhPT0gXCJpbnByb2dyZXNzXCIgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdH0sXG5cdGRlcXVldWU6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgdHlwZSApO1xuXHRcdH0pO1xuXHR9LFxuXHRjbGVhclF1ZXVlOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRyZXR1cm4gdGhpcy5xdWV1ZSggdHlwZSB8fCBcImZ4XCIsIFtdICk7XG5cdH0sXG5cdC8vIEdldCBhIHByb21pc2UgcmVzb2x2ZWQgd2hlbiBxdWV1ZXMgb2YgYSBjZXJ0YWluIHR5cGVcblx0Ly8gYXJlIGVtcHRpZWQgKGZ4IGlzIHRoZSB0eXBlIGJ5IGRlZmF1bHQpXG5cdHByb21pc2U6IGZ1bmN0aW9uKCB0eXBlLCBvYmogKSB7XG5cdFx0dmFyIHRtcCxcblx0XHRcdGNvdW50ID0gMSxcblx0XHRcdGRlZmVyID0galF1ZXJ5LkRlZmVycmVkKCksXG5cdFx0XHRlbGVtZW50cyA9IHRoaXMsXG5cdFx0XHRpID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRyZXNvbHZlID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggISggLS1jb3VudCApICkge1xuXHRcdFx0XHRcdGRlZmVyLnJlc29sdmVXaXRoKCBlbGVtZW50cywgWyBlbGVtZW50cyBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cblx0XHRpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0b2JqID0gdHlwZTtcblx0XHRcdHR5cGUgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblxuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0dG1wID0galF1ZXJ5Ll9kYXRhKCBlbGVtZW50c1sgaSBdLCB0eXBlICsgXCJxdWV1ZUhvb2tzXCIgKTtcblx0XHRcdGlmICggdG1wICYmIHRtcC5lbXB0eSApIHtcblx0XHRcdFx0Y291bnQrKztcblx0XHRcdFx0dG1wLmVtcHR5LmFkZCggcmVzb2x2ZSApO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXNvbHZlKCk7XG5cdFx0cmV0dXJuIGRlZmVyLnByb21pc2UoIG9iaiApO1xuXHR9XG59KTtcbnZhciBwbnVtID0gKC9bKy1dPyg/OlxcZCpcXC58KVxcZCsoPzpbZUVdWystXT9cXGQrfCkvKS5zb3VyY2U7XG5cbnZhciBjc3NFeHBhbmQgPSBbIFwiVG9wXCIsIFwiUmlnaHRcIiwgXCJCb3R0b21cIiwgXCJMZWZ0XCIgXTtcblxudmFyIGlzSGlkZGVuID0gZnVuY3Rpb24oIGVsZW0sIGVsICkge1xuXHRcdC8vIGlzSGlkZGVuIG1pZ2h0IGJlIGNhbGxlZCBmcm9tIGpRdWVyeSNmaWx0ZXIgZnVuY3Rpb247XG5cdFx0Ly8gaW4gdGhhdCBjYXNlLCBlbGVtZW50IHdpbGwgYmUgc2Vjb25kIGFyZ3VtZW50XG5cdFx0ZWxlbSA9IGVsIHx8IGVsZW07XG5cdFx0cmV0dXJuIGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICkgPT09IFwibm9uZVwiIHx8ICFqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApO1xuXHR9O1xuXG5cblxuLy8gTXVsdGlmdW5jdGlvbmFsIG1ldGhvZCB0byBnZXQgYW5kIHNldCB2YWx1ZXMgb2YgYSBjb2xsZWN0aW9uXG4vLyBUaGUgdmFsdWUvcyBjYW4gb3B0aW9uYWxseSBiZSBleGVjdXRlZCBpZiBpdCdzIGEgZnVuY3Rpb25cbnZhciBhY2Nlc3MgPSBqUXVlcnkuYWNjZXNzID0gZnVuY3Rpb24oIGVsZW1zLCBmbiwga2V5LCB2YWx1ZSwgY2hhaW5hYmxlLCBlbXB0eUdldCwgcmF3ICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bGVuZ3RoID0gZWxlbXMubGVuZ3RoLFxuXHRcdGJ1bGsgPSBrZXkgPT0gbnVsbDtcblxuXHQvLyBTZXRzIG1hbnkgdmFsdWVzXG5cdGlmICggalF1ZXJ5LnR5cGUoIGtleSApID09PSBcIm9iamVjdFwiICkge1xuXHRcdGNoYWluYWJsZSA9IHRydWU7XG5cdFx0Zm9yICggaSBpbiBrZXkgKSB7XG5cdFx0XHRqUXVlcnkuYWNjZXNzKCBlbGVtcywgZm4sIGksIGtleVtpXSwgdHJ1ZSwgZW1wdHlHZXQsIHJhdyApO1xuXHRcdH1cblxuXHQvLyBTZXRzIG9uZSB2YWx1ZVxuXHR9IGVsc2UgaWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdGNoYWluYWJsZSA9IHRydWU7XG5cblx0XHRpZiAoICFqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJhdyA9IHRydWU7XG5cdFx0fVxuXG5cdFx0aWYgKCBidWxrICkge1xuXHRcdFx0Ly8gQnVsayBvcGVyYXRpb25zIHJ1biBhZ2FpbnN0IHRoZSBlbnRpcmUgc2V0XG5cdFx0XHRpZiAoIHJhdyApIHtcblx0XHRcdFx0Zm4uY2FsbCggZWxlbXMsIHZhbHVlICk7XG5cdFx0XHRcdGZuID0gbnVsbDtcblxuXHRcdFx0Ly8gLi4uZXhjZXB0IHdoZW4gZXhlY3V0aW5nIGZ1bmN0aW9uIHZhbHVlc1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0YnVsayA9IGZuO1xuXHRcdFx0XHRmbiA9IGZ1bmN0aW9uKCBlbGVtLCBrZXksIHZhbHVlICkge1xuXHRcdFx0XHRcdHJldHVybiBidWxrLmNhbGwoIGpRdWVyeSggZWxlbSApLCB2YWx1ZSApO1xuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICggZm4gKSB7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblx0XHRcdFx0Zm4oIGVsZW1zW2ldLCBrZXksIHJhdyA/IHZhbHVlIDogdmFsdWUuY2FsbCggZWxlbXNbaV0sIGksIGZuKCBlbGVtc1tpXSwga2V5ICkgKSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBjaGFpbmFibGUgP1xuXHRcdGVsZW1zIDpcblxuXHRcdC8vIEdldHNcblx0XHRidWxrID9cblx0XHRcdGZuLmNhbGwoIGVsZW1zICkgOlxuXHRcdFx0bGVuZ3RoID8gZm4oIGVsZW1zWzBdLCBrZXkgKSA6IGVtcHR5R2V0O1xufTtcbnZhciByY2hlY2thYmxlVHlwZSA9ICgvXig/OmNoZWNrYm94fHJhZGlvKSQvaSk7XG5cblxuXG4oZnVuY3Rpb24oKSB7XG5cdC8vIE1pbmlmaWVkOiB2YXIgYSxiLGNcblx0dmFyIGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICksXG5cdFx0ZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApLFxuXHRcdGZyYWdtZW50ID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xuXG5cdC8vIFNldHVwXG5cdGRpdi5pbm5lckhUTUwgPSBcIiAgPGxpbmsvPjx0YWJsZT48L3RhYmxlPjxhIGhyZWY9Jy9hJz5hPC9hPjxpbnB1dCB0eXBlPSdjaGVja2JveCcvPlwiO1xuXG5cdC8vIElFIHN0cmlwcyBsZWFkaW5nIHdoaXRlc3BhY2Ugd2hlbiAuaW5uZXJIVE1MIGlzIHVzZWRcblx0c3VwcG9ydC5sZWFkaW5nV2hpdGVzcGFjZSA9IGRpdi5maXJzdENoaWxkLm5vZGVUeXBlID09PSAzO1xuXG5cdC8vIE1ha2Ugc3VyZSB0aGF0IHRib2R5IGVsZW1lbnRzIGFyZW4ndCBhdXRvbWF0aWNhbGx5IGluc2VydGVkXG5cdC8vIElFIHdpbGwgaW5zZXJ0IHRoZW0gaW50byBlbXB0eSB0YWJsZXNcblx0c3VwcG9ydC50Ym9keSA9ICFkaXYuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIFwidGJvZHlcIiApLmxlbmd0aDtcblxuXHQvLyBNYWtlIHN1cmUgdGhhdCBsaW5rIGVsZW1lbnRzIGdldCBzZXJpYWxpemVkIGNvcnJlY3RseSBieSBpbm5lckhUTUxcblx0Ly8gVGhpcyByZXF1aXJlcyBhIHdyYXBwZXIgZWxlbWVudCBpbiBJRVxuXHRzdXBwb3J0Lmh0bWxTZXJpYWxpemUgPSAhIWRpdi5nZXRFbGVtZW50c0J5VGFnTmFtZSggXCJsaW5rXCIgKS5sZW5ndGg7XG5cblx0Ly8gTWFrZXMgc3VyZSBjbG9uaW5nIGFuIGh0bWw1IGVsZW1lbnQgZG9lcyBub3QgY2F1c2UgcHJvYmxlbXNcblx0Ly8gV2hlcmUgb3V0ZXJIVE1MIGlzIHVuZGVmaW5lZCwgdGhpcyBzdGlsbCB3b3Jrc1xuXHRzdXBwb3J0Lmh0bWw1Q2xvbmUgPVxuXHRcdGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwibmF2XCIgKS5jbG9uZU5vZGUoIHRydWUgKS5vdXRlckhUTUwgIT09IFwiPDpuYXY+PC86bmF2PlwiO1xuXG5cdC8vIENoZWNrIGlmIGEgZGlzY29ubmVjdGVkIGNoZWNrYm94IHdpbGwgcmV0YWluIGl0cyBjaGVja2VkXG5cdC8vIHZhbHVlIG9mIHRydWUgYWZ0ZXIgYXBwZW5kZWQgdG8gdGhlIERPTSAoSUU2LzcpXG5cdGlucHV0LnR5cGUgPSBcImNoZWNrYm94XCI7XG5cdGlucHV0LmNoZWNrZWQgPSB0cnVlO1xuXHRmcmFnbWVudC5hcHBlbmRDaGlsZCggaW5wdXQgKTtcblx0c3VwcG9ydC5hcHBlbmRDaGVja2VkID0gaW5wdXQuY2hlY2tlZDtcblxuXHQvLyBNYWtlIHN1cmUgdGV4dGFyZWEgKGFuZCBjaGVja2JveCkgZGVmYXVsdFZhbHVlIGlzIHByb3Blcmx5IGNsb25lZFxuXHQvLyBTdXBwb3J0OiBJRTYtSUUxMStcblx0ZGl2LmlubmVySFRNTCA9IFwiPHRleHRhcmVhPng8L3RleHRhcmVhPlwiO1xuXHRzdXBwb3J0Lm5vQ2xvbmVDaGVja2VkID0gISFkaXYuY2xvbmVOb2RlKCB0cnVlICkubGFzdENoaWxkLmRlZmF1bHRWYWx1ZTtcblxuXHQvLyAjMTEyMTcgLSBXZWJLaXQgbG9zZXMgY2hlY2sgd2hlbiB0aGUgbmFtZSBpcyBhZnRlciB0aGUgY2hlY2tlZCBhdHRyaWJ1dGVcblx0ZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGRpdiApO1xuXHRkaXYuaW5uZXJIVE1MID0gXCI8aW5wdXQgdHlwZT0ncmFkaW8nIGNoZWNrZWQ9J2NoZWNrZWQnIG5hbWU9J3QnLz5cIjtcblxuXHQvLyBTdXBwb3J0OiBTYWZhcmkgNS4xLCBpT1MgNS4xLCBBbmRyb2lkIDQueCwgQW5kcm9pZCAyLjNcblx0Ly8gb2xkIFdlYktpdCBkb2Vzbid0IGNsb25lIGNoZWNrZWQgc3RhdGUgY29ycmVjdGx5IGluIGZyYWdtZW50c1xuXHRzdXBwb3J0LmNoZWNrQ2xvbmUgPSBkaXYuY2xvbmVOb2RlKCB0cnVlICkuY2xvbmVOb2RlKCB0cnVlICkubGFzdENoaWxkLmNoZWNrZWQ7XG5cblx0Ly8gU3VwcG9ydDogSUU8OVxuXHQvLyBPcGVyYSBkb2VzIG5vdCBjbG9uZSBldmVudHMgKGFuZCB0eXBlb2YgZGl2LmF0dGFjaEV2ZW50ID09PSB1bmRlZmluZWQpLlxuXHQvLyBJRTktMTAgY2xvbmVzIGV2ZW50cyBib3VuZCB2aWEgYXR0YWNoRXZlbnQsIGJ1dCB0aGV5IGRvbid0IHRyaWdnZXIgd2l0aCAuY2xpY2soKVxuXHRzdXBwb3J0Lm5vQ2xvbmVFdmVudCA9IHRydWU7XG5cdGlmICggZGl2LmF0dGFjaEV2ZW50ICkge1xuXHRcdGRpdi5hdHRhY2hFdmVudCggXCJvbmNsaWNrXCIsIGZ1bmN0aW9uKCkge1xuXHRcdFx0c3VwcG9ydC5ub0Nsb25lRXZlbnQgPSBmYWxzZTtcblx0XHR9KTtcblxuXHRcdGRpdi5jbG9uZU5vZGUoIHRydWUgKS5jbGljaygpO1xuXHR9XG5cblx0Ly8gRXhlY3V0ZSB0aGUgdGVzdCBvbmx5IGlmIG5vdCBhbHJlYWR5IGV4ZWN1dGVkIGluIGFub3RoZXIgbW9kdWxlLlxuXHRpZiAoc3VwcG9ydC5kZWxldGVFeHBhbmRvID09IG51bGwpIHtcblx0XHQvLyBTdXBwb3J0OiBJRTw5XG5cdFx0c3VwcG9ydC5kZWxldGVFeHBhbmRvID0gdHJ1ZTtcblx0XHR0cnkge1xuXHRcdFx0ZGVsZXRlIGRpdi50ZXN0O1xuXHRcdH0gY2F0Y2goIGUgKSB7XG5cdFx0XHRzdXBwb3J0LmRlbGV0ZUV4cGFuZG8gPSBmYWxzZTtcblx0XHR9XG5cdH1cbn0pKCk7XG5cblxuKGZ1bmN0aW9uKCkge1xuXHR2YXIgaSwgZXZlbnROYW1lLFxuXHRcdGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKTtcblxuXHQvLyBTdXBwb3J0OiBJRTw5IChsYWNrIHN1Ym1pdC9jaGFuZ2UgYnViYmxlKSwgRmlyZWZveCAyMysgKGxhY2sgZm9jdXNpbiBldmVudClcblx0Zm9yICggaSBpbiB7IHN1Ym1pdDogdHJ1ZSwgY2hhbmdlOiB0cnVlLCBmb2N1c2luOiB0cnVlIH0pIHtcblx0XHRldmVudE5hbWUgPSBcIm9uXCIgKyBpO1xuXG5cdFx0aWYgKCAhKHN1cHBvcnRbIGkgKyBcIkJ1YmJsZXNcIiBdID0gZXZlbnROYW1lIGluIHdpbmRvdykgKSB7XG5cdFx0XHQvLyBCZXdhcmUgb2YgQ1NQIHJlc3RyaWN0aW9ucyAoaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vU2VjdXJpdHkvQ1NQKVxuXHRcdFx0ZGl2LnNldEF0dHJpYnV0ZSggZXZlbnROYW1lLCBcInRcIiApO1xuXHRcdFx0c3VwcG9ydFsgaSArIFwiQnViYmxlc1wiIF0gPSBkaXYuYXR0cmlidXRlc1sgZXZlbnROYW1lIF0uZXhwYW5kbyA9PT0gZmFsc2U7XG5cdFx0fVxuXHR9XG5cblx0Ly8gTnVsbCBlbGVtZW50cyB0byBhdm9pZCBsZWFrcyBpbiBJRS5cblx0ZGl2ID0gbnVsbDtcbn0pKCk7XG5cblxudmFyIHJmb3JtRWxlbXMgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYSkkL2ksXG5cdHJrZXlFdmVudCA9IC9ea2V5Lyxcblx0cm1vdXNlRXZlbnQgPSAvXig/Om1vdXNlfHBvaW50ZXJ8Y29udGV4dG1lbnUpfGNsaWNrLyxcblx0cmZvY3VzTW9ycGggPSAvXig/OmZvY3VzaW5mb2N1c3xmb2N1c291dGJsdXIpJC8sXG5cdHJ0eXBlbmFtZXNwYWNlID0gL14oW14uXSopKD86XFwuKC4rKXwpJC87XG5cbmZ1bmN0aW9uIHJldHVyblRydWUoKSB7XG5cdHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiByZXR1cm5GYWxzZSgpIHtcblx0cmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBzYWZlQWN0aXZlRWxlbWVudCgpIHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gZG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcblx0fSBjYXRjaCAoIGVyciApIHsgfVxufVxuXG4vKlxuICogSGVscGVyIGZ1bmN0aW9ucyBmb3IgbWFuYWdpbmcgZXZlbnRzIC0tIG5vdCBwYXJ0IG9mIHRoZSBwdWJsaWMgaW50ZXJmYWNlLlxuICogUHJvcHMgdG8gRGVhbiBFZHdhcmRzJyBhZGRFdmVudCBsaWJyYXJ5IGZvciBtYW55IG9mIHRoZSBpZGVhcy5cbiAqL1xualF1ZXJ5LmV2ZW50ID0ge1xuXG5cdGdsb2JhbDoge30sXG5cblx0YWRkOiBmdW5jdGlvbiggZWxlbSwgdHlwZXMsIGhhbmRsZXIsIGRhdGEsIHNlbGVjdG9yICkge1xuXHRcdHZhciB0bXAsIGV2ZW50cywgdCwgaGFuZGxlT2JqSW4sXG5cdFx0XHRzcGVjaWFsLCBldmVudEhhbmRsZSwgaGFuZGxlT2JqLFxuXHRcdFx0aGFuZGxlcnMsIHR5cGUsIG5hbWVzcGFjZXMsIG9yaWdUeXBlLFxuXHRcdFx0ZWxlbURhdGEgPSBqUXVlcnkuX2RhdGEoIGVsZW0gKTtcblxuXHRcdC8vIERvbid0IGF0dGFjaCBldmVudHMgdG8gbm9EYXRhIG9yIHRleHQvY29tbWVudCBub2RlcyAoYnV0IGFsbG93IHBsYWluIG9iamVjdHMpXG5cdFx0aWYgKCAhZWxlbURhdGEgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsbGVyIGNhbiBwYXNzIGluIGFuIG9iamVjdCBvZiBjdXN0b20gZGF0YSBpbiBsaWV1IG9mIHRoZSBoYW5kbGVyXG5cdFx0aWYgKCBoYW5kbGVyLmhhbmRsZXIgKSB7XG5cdFx0XHRoYW5kbGVPYmpJbiA9IGhhbmRsZXI7XG5cdFx0XHRoYW5kbGVyID0gaGFuZGxlT2JqSW4uaGFuZGxlcjtcblx0XHRcdHNlbGVjdG9yID0gaGFuZGxlT2JqSW4uc2VsZWN0b3I7XG5cdFx0fVxuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgdGhlIGhhbmRsZXIgaGFzIGEgdW5pcXVlIElELCB1c2VkIHRvIGZpbmQvcmVtb3ZlIGl0IGxhdGVyXG5cdFx0aWYgKCAhaGFuZGxlci5ndWlkICkge1xuXHRcdFx0aGFuZGxlci5ndWlkID0galF1ZXJ5Lmd1aWQrKztcblx0XHR9XG5cblx0XHQvLyBJbml0IHRoZSBlbGVtZW50J3MgZXZlbnQgc3RydWN0dXJlIGFuZCBtYWluIGhhbmRsZXIsIGlmIHRoaXMgaXMgdGhlIGZpcnN0XG5cdFx0aWYgKCAhKGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cykgKSB7XG5cdFx0XHRldmVudHMgPSBlbGVtRGF0YS5ldmVudHMgPSB7fTtcblx0XHR9XG5cdFx0aWYgKCAhKGV2ZW50SGFuZGxlID0gZWxlbURhdGEuaGFuZGxlKSApIHtcblx0XHRcdGV2ZW50SGFuZGxlID0gZWxlbURhdGEuaGFuZGxlID0gZnVuY3Rpb24oIGUgKSB7XG5cdFx0XHRcdC8vIERpc2NhcmQgdGhlIHNlY29uZCBldmVudCBvZiBhIGpRdWVyeS5ldmVudC50cmlnZ2VyKCkgYW5kXG5cdFx0XHRcdC8vIHdoZW4gYW4gZXZlbnQgaXMgY2FsbGVkIGFmdGVyIGEgcGFnZSBoYXMgdW5sb2FkZWRcblx0XHRcdFx0cmV0dXJuIHR5cGVvZiBqUXVlcnkgIT09IHN0cnVuZGVmaW5lZCAmJiAoIWUgfHwgalF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCAhPT0gZS50eXBlKSA/XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LmRpc3BhdGNoLmFwcGx5KCBldmVudEhhbmRsZS5lbGVtLCBhcmd1bWVudHMgKSA6XG5cdFx0XHRcdFx0dW5kZWZpbmVkO1xuXHRcdFx0fTtcblx0XHRcdC8vIEFkZCBlbGVtIGFzIGEgcHJvcGVydHkgb2YgdGhlIGhhbmRsZSBmbiB0byBwcmV2ZW50IGEgbWVtb3J5IGxlYWsgd2l0aCBJRSBub24tbmF0aXZlIGV2ZW50c1xuXHRcdFx0ZXZlbnRIYW5kbGUuZWxlbSA9IGVsZW07XG5cdFx0fVxuXG5cdFx0Ly8gSGFuZGxlIG11bHRpcGxlIGV2ZW50cyBzZXBhcmF0ZWQgYnkgYSBzcGFjZVxuXHRcdHR5cGVzID0gKCB0eXBlcyB8fCBcIlwiICkubWF0Y2goIHJub3R3aGl0ZSApIHx8IFsgXCJcIiBdO1xuXHRcdHQgPSB0eXBlcy5sZW5ndGg7XG5cdFx0d2hpbGUgKCB0LS0gKSB7XG5cdFx0XHR0bXAgPSBydHlwZW5hbWVzcGFjZS5leGVjKCB0eXBlc1t0XSApIHx8IFtdO1xuXHRcdFx0dHlwZSA9IG9yaWdUeXBlID0gdG1wWzFdO1xuXHRcdFx0bmFtZXNwYWNlcyA9ICggdG1wWzJdIHx8IFwiXCIgKS5zcGxpdCggXCIuXCIgKS5zb3J0KCk7XG5cblx0XHRcdC8vIFRoZXJlICptdXN0KiBiZSBhIHR5cGUsIG5vIGF0dGFjaGluZyBuYW1lc3BhY2Utb25seSBoYW5kbGVyc1xuXHRcdFx0aWYgKCAhdHlwZSApIHtcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIGV2ZW50IGNoYW5nZXMgaXRzIHR5cGUsIHVzZSB0aGUgc3BlY2lhbCBldmVudCBoYW5kbGVycyBmb3IgdGhlIGNoYW5nZWQgdHlwZVxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cblx0XHRcdC8vIElmIHNlbGVjdG9yIGRlZmluZWQsIGRldGVybWluZSBzcGVjaWFsIGV2ZW50IGFwaSB0eXBlLCBvdGhlcndpc2UgZ2l2ZW4gdHlwZVxuXHRcdFx0dHlwZSA9ICggc2VsZWN0b3IgPyBzcGVjaWFsLmRlbGVnYXRlVHlwZSA6IHNwZWNpYWwuYmluZFR5cGUgKSB8fCB0eXBlO1xuXG5cdFx0XHQvLyBVcGRhdGUgc3BlY2lhbCBiYXNlZCBvbiBuZXdseSByZXNldCB0eXBlXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblxuXHRcdFx0Ly8gaGFuZGxlT2JqIGlzIHBhc3NlZCB0byBhbGwgZXZlbnQgaGFuZGxlcnNcblx0XHRcdGhhbmRsZU9iaiA9IGpRdWVyeS5leHRlbmQoe1xuXHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRvcmlnVHlwZTogb3JpZ1R5cGUsXG5cdFx0XHRcdGRhdGE6IGRhdGEsXG5cdFx0XHRcdGhhbmRsZXI6IGhhbmRsZXIsXG5cdFx0XHRcdGd1aWQ6IGhhbmRsZXIuZ3VpZCxcblx0XHRcdFx0c2VsZWN0b3I6IHNlbGVjdG9yLFxuXHRcdFx0XHRuZWVkc0NvbnRleHQ6IHNlbGVjdG9yICYmIGpRdWVyeS5leHByLm1hdGNoLm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvciApLFxuXHRcdFx0XHRuYW1lc3BhY2U6IG5hbWVzcGFjZXMuam9pbihcIi5cIilcblx0XHRcdH0sIGhhbmRsZU9iakluICk7XG5cblx0XHRcdC8vIEluaXQgdGhlIGV2ZW50IGhhbmRsZXIgcXVldWUgaWYgd2UncmUgdGhlIGZpcnN0XG5cdFx0XHRpZiAoICEoaGFuZGxlcnMgPSBldmVudHNbIHR5cGUgXSkgKSB7XG5cdFx0XHRcdGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gPSBbXTtcblx0XHRcdFx0aGFuZGxlcnMuZGVsZWdhdGVDb3VudCA9IDA7XG5cblx0XHRcdFx0Ly8gT25seSB1c2UgYWRkRXZlbnRMaXN0ZW5lci9hdHRhY2hFdmVudCBpZiB0aGUgc3BlY2lhbCBldmVudHMgaGFuZGxlciByZXR1cm5zIGZhbHNlXG5cdFx0XHRcdGlmICggIXNwZWNpYWwuc2V0dXAgfHwgc3BlY2lhbC5zZXR1cC5jYWxsKCBlbGVtLCBkYXRhLCBuYW1lc3BhY2VzLCBldmVudEhhbmRsZSApID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHQvLyBCaW5kIHRoZSBnbG9iYWwgZXZlbnQgaGFuZGxlciB0byB0aGUgZWxlbWVudFxuXHRcdFx0XHRcdGlmICggZWxlbS5hZGRFdmVudExpc3RlbmVyICkge1xuXHRcdFx0XHRcdFx0ZWxlbS5hZGRFdmVudExpc3RlbmVyKCB0eXBlLCBldmVudEhhbmRsZSwgZmFsc2UgKTtcblxuXHRcdFx0XHRcdH0gZWxzZSBpZiAoIGVsZW0uYXR0YWNoRXZlbnQgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLmF0dGFjaEV2ZW50KCBcIm9uXCIgKyB0eXBlLCBldmVudEhhbmRsZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHNwZWNpYWwuYWRkICkge1xuXHRcdFx0XHRzcGVjaWFsLmFkZC5jYWxsKCBlbGVtLCBoYW5kbGVPYmogKTtcblxuXHRcdFx0XHRpZiAoICFoYW5kbGVPYmouaGFuZGxlci5ndWlkICkge1xuXHRcdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyLmd1aWQgPSBoYW5kbGVyLmd1aWQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIHRvIHRoZSBlbGVtZW50J3MgaGFuZGxlciBsaXN0LCBkZWxlZ2F0ZXMgaW4gZnJvbnRcblx0XHRcdGlmICggc2VsZWN0b3IgKSB7XG5cdFx0XHRcdGhhbmRsZXJzLnNwbGljZSggaGFuZGxlcnMuZGVsZWdhdGVDb3VudCsrLCAwLCBoYW5kbGVPYmogKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGhhbmRsZXJzLnB1c2goIGhhbmRsZU9iaiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBLZWVwIHRyYWNrIG9mIHdoaWNoIGV2ZW50cyBoYXZlIGV2ZXIgYmVlbiB1c2VkLCBmb3IgZXZlbnQgb3B0aW1pemF0aW9uXG5cdFx0XHRqUXVlcnkuZXZlbnQuZ2xvYmFsWyB0eXBlIF0gPSB0cnVlO1xuXHRcdH1cblxuXHRcdC8vIE51bGxpZnkgZWxlbSB0byBwcmV2ZW50IG1lbW9yeSBsZWFrcyBpbiBJRVxuXHRcdGVsZW0gPSBudWxsO1xuXHR9LFxuXG5cdC8vIERldGFjaCBhbiBldmVudCBvciBzZXQgb2YgZXZlbnRzIGZyb20gYW4gZWxlbWVudFxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlcywgaGFuZGxlciwgc2VsZWN0b3IsIG1hcHBlZFR5cGVzICkge1xuXHRcdHZhciBqLCBoYW5kbGVPYmosIHRtcCxcblx0XHRcdG9yaWdDb3VudCwgdCwgZXZlbnRzLFxuXHRcdFx0c3BlY2lhbCwgaGFuZGxlcnMsIHR5cGUsXG5cdFx0XHRuYW1lc3BhY2VzLCBvcmlnVHlwZSxcblx0XHRcdGVsZW1EYXRhID0galF1ZXJ5Lmhhc0RhdGEoIGVsZW0gKSAmJiBqUXVlcnkuX2RhdGEoIGVsZW0gKTtcblxuXHRcdGlmICggIWVsZW1EYXRhIHx8ICEoZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzKSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBPbmNlIGZvciBlYWNoIHR5cGUubmFtZXNwYWNlIGluIHR5cGVzOyB0eXBlIG1heSBiZSBvbWl0dGVkXG5cdFx0dHlwZXMgPSAoIHR5cGVzIHx8IFwiXCIgKS5tYXRjaCggcm5vdHdoaXRlICkgfHwgWyBcIlwiIF07XG5cdFx0dCA9IHR5cGVzLmxlbmd0aDtcblx0XHR3aGlsZSAoIHQtLSApIHtcblx0XHRcdHRtcCA9IHJ0eXBlbmFtZXNwYWNlLmV4ZWMoIHR5cGVzW3RdICkgfHwgW107XG5cdFx0XHR0eXBlID0gb3JpZ1R5cGUgPSB0bXBbMV07XG5cdFx0XHRuYW1lc3BhY2VzID0gKCB0bXBbMl0gfHwgXCJcIiApLnNwbGl0KCBcIi5cIiApLnNvcnQoKTtcblxuXHRcdFx0Ly8gVW5iaW5kIGFsbCBldmVudHMgKG9uIHRoaXMgbmFtZXNwYWNlLCBpZiBwcm92aWRlZCkgZm9yIHRoZSBlbGVtZW50XG5cdFx0XHRpZiAoICF0eXBlICkge1xuXHRcdFx0XHRmb3IgKCB0eXBlIGluIGV2ZW50cyApIHtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCBlbGVtLCB0eXBlICsgdHlwZXNbIHQgXSwgaGFuZGxlciwgc2VsZWN0b3IsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cdFx0XHR0eXBlID0gKCBzZWxlY3RvciA/IHNwZWNpYWwuZGVsZWdhdGVUeXBlIDogc3BlY2lhbC5iaW5kVHlwZSApIHx8IHR5cGU7XG5cdFx0XHRoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdIHx8IFtdO1xuXHRcdFx0dG1wID0gdG1wWzJdICYmIG5ldyBSZWdFeHAoIFwiKF58XFxcXC4pXCIgKyBuYW1lc3BhY2VzLmpvaW4oXCJcXFxcLig/Oi4qXFxcXC58KVwiKSArIFwiKFxcXFwufCQpXCIgKTtcblxuXHRcdFx0Ly8gUmVtb3ZlIG1hdGNoaW5nIGV2ZW50c1xuXHRcdFx0b3JpZ0NvdW50ID0gaiA9IGhhbmRsZXJzLmxlbmd0aDtcblx0XHRcdHdoaWxlICggai0tICkge1xuXHRcdFx0XHRoYW5kbGVPYmogPSBoYW5kbGVyc1sgaiBdO1xuXG5cdFx0XHRcdGlmICggKCBtYXBwZWRUeXBlcyB8fCBvcmlnVHlwZSA9PT0gaGFuZGxlT2JqLm9yaWdUeXBlICkgJiZcblx0XHRcdFx0XHQoICFoYW5kbGVyIHx8IGhhbmRsZXIuZ3VpZCA9PT0gaGFuZGxlT2JqLmd1aWQgKSAmJlxuXHRcdFx0XHRcdCggIXRtcCB8fCB0bXAudGVzdCggaGFuZGxlT2JqLm5hbWVzcGFjZSApICkgJiZcblx0XHRcdFx0XHQoICFzZWxlY3RvciB8fCBzZWxlY3RvciA9PT0gaGFuZGxlT2JqLnNlbGVjdG9yIHx8IHNlbGVjdG9yID09PSBcIioqXCIgJiYgaGFuZGxlT2JqLnNlbGVjdG9yICkgKSB7XG5cdFx0XHRcdFx0aGFuZGxlcnMuc3BsaWNlKCBqLCAxICk7XG5cblx0XHRcdFx0XHRpZiAoIGhhbmRsZU9iai5zZWxlY3RvciApIHtcblx0XHRcdFx0XHRcdGhhbmRsZXJzLmRlbGVnYXRlQ291bnQtLTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBzcGVjaWFsLnJlbW92ZSApIHtcblx0XHRcdFx0XHRcdHNwZWNpYWwucmVtb3ZlLmNhbGwoIGVsZW0sIGhhbmRsZU9iaiApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZW1vdmUgZ2VuZXJpYyBldmVudCBoYW5kbGVyIGlmIHdlIHJlbW92ZWQgc29tZXRoaW5nIGFuZCBubyBtb3JlIGhhbmRsZXJzIGV4aXN0XG5cdFx0XHQvLyAoYXZvaWRzIHBvdGVudGlhbCBmb3IgZW5kbGVzcyByZWN1cnNpb24gZHVyaW5nIHJlbW92YWwgb2Ygc3BlY2lhbCBldmVudCBoYW5kbGVycylcblx0XHRcdGlmICggb3JpZ0NvdW50ICYmICFoYW5kbGVycy5sZW5ndGggKSB7XG5cdFx0XHRcdGlmICggIXNwZWNpYWwudGVhcmRvd24gfHwgc3BlY2lhbC50ZWFyZG93bi5jYWxsKCBlbGVtLCBuYW1lc3BhY2VzLCBlbGVtRGF0YS5oYW5kbGUgKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LnJlbW92ZUV2ZW50KCBlbGVtLCB0eXBlLCBlbGVtRGF0YS5oYW5kbGUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGRlbGV0ZSBldmVudHNbIHR5cGUgXTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBSZW1vdmUgdGhlIGV4cGFuZG8gaWYgaXQncyBubyBsb25nZXIgdXNlZFxuXHRcdGlmICggalF1ZXJ5LmlzRW1wdHlPYmplY3QoIGV2ZW50cyApICkge1xuXHRcdFx0ZGVsZXRlIGVsZW1EYXRhLmhhbmRsZTtcblxuXHRcdFx0Ly8gcmVtb3ZlRGF0YSBhbHNvIGNoZWNrcyBmb3IgZW1wdGluZXNzIGFuZCBjbGVhcnMgdGhlIGV4cGFuZG8gaWYgZW1wdHlcblx0XHRcdC8vIHNvIHVzZSBpdCBpbnN0ZWFkIG9mIGRlbGV0ZVxuXHRcdFx0alF1ZXJ5Ll9yZW1vdmVEYXRhKCBlbGVtLCBcImV2ZW50c1wiICk7XG5cdFx0fVxuXHR9LFxuXG5cdHRyaWdnZXI6IGZ1bmN0aW9uKCBldmVudCwgZGF0YSwgZWxlbSwgb25seUhhbmRsZXJzICkge1xuXHRcdHZhciBoYW5kbGUsIG9udHlwZSwgY3VyLFxuXHRcdFx0YnViYmxlVHlwZSwgc3BlY2lhbCwgdG1wLCBpLFxuXHRcdFx0ZXZlbnRQYXRoID0gWyBlbGVtIHx8IGRvY3VtZW50IF0sXG5cdFx0XHR0eXBlID0gaGFzT3duLmNhbGwoIGV2ZW50LCBcInR5cGVcIiApID8gZXZlbnQudHlwZSA6IGV2ZW50LFxuXHRcdFx0bmFtZXNwYWNlcyA9IGhhc093bi5jYWxsKCBldmVudCwgXCJuYW1lc3BhY2VcIiApID8gZXZlbnQubmFtZXNwYWNlLnNwbGl0KFwiLlwiKSA6IFtdO1xuXG5cdFx0Y3VyID0gdG1wID0gZWxlbSA9IGVsZW0gfHwgZG9jdW1lbnQ7XG5cblx0XHQvLyBEb24ndCBkbyBldmVudHMgb24gdGV4dCBhbmQgY29tbWVudCBub2Rlc1xuXHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMyB8fCBlbGVtLm5vZGVUeXBlID09PSA4ICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIGZvY3VzL2JsdXIgbW9ycGhzIHRvIGZvY3VzaW4vb3V0OyBlbnN1cmUgd2UncmUgbm90IGZpcmluZyB0aGVtIHJpZ2h0IG5vd1xuXHRcdGlmICggcmZvY3VzTW9ycGgudGVzdCggdHlwZSArIGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgKSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIHR5cGUuaW5kZXhPZihcIi5cIikgPj0gMCApIHtcblx0XHRcdC8vIE5hbWVzcGFjZWQgdHJpZ2dlcjsgY3JlYXRlIGEgcmVnZXhwIHRvIG1hdGNoIGV2ZW50IHR5cGUgaW4gaGFuZGxlKClcblx0XHRcdG5hbWVzcGFjZXMgPSB0eXBlLnNwbGl0KFwiLlwiKTtcblx0XHRcdHR5cGUgPSBuYW1lc3BhY2VzLnNoaWZ0KCk7XG5cdFx0XHRuYW1lc3BhY2VzLnNvcnQoKTtcblx0XHR9XG5cdFx0b250eXBlID0gdHlwZS5pbmRleE9mKFwiOlwiKSA8IDAgJiYgXCJvblwiICsgdHlwZTtcblxuXHRcdC8vIENhbGxlciBjYW4gcGFzcyBpbiBhIGpRdWVyeS5FdmVudCBvYmplY3QsIE9iamVjdCwgb3IganVzdCBhbiBldmVudCB0eXBlIHN0cmluZ1xuXHRcdGV2ZW50ID0gZXZlbnRbIGpRdWVyeS5leHBhbmRvIF0gP1xuXHRcdFx0ZXZlbnQgOlxuXHRcdFx0bmV3IGpRdWVyeS5FdmVudCggdHlwZSwgdHlwZW9mIGV2ZW50ID09PSBcIm9iamVjdFwiICYmIGV2ZW50ICk7XG5cblx0XHQvLyBUcmlnZ2VyIGJpdG1hc2s6ICYgMSBmb3IgbmF0aXZlIGhhbmRsZXJzOyAmIDIgZm9yIGpRdWVyeSAoYWx3YXlzIHRydWUpXG5cdFx0ZXZlbnQuaXNUcmlnZ2VyID0gb25seUhhbmRsZXJzID8gMiA6IDM7XG5cdFx0ZXZlbnQubmFtZXNwYWNlID0gbmFtZXNwYWNlcy5qb2luKFwiLlwiKTtcblx0XHRldmVudC5uYW1lc3BhY2VfcmUgPSBldmVudC5uYW1lc3BhY2UgP1xuXHRcdFx0bmV3IFJlZ0V4cCggXCIoXnxcXFxcLilcIiArIG5hbWVzcGFjZXMuam9pbihcIlxcXFwuKD86LipcXFxcLnwpXCIpICsgXCIoXFxcXC58JClcIiApIDpcblx0XHRcdG51bGw7XG5cblx0XHQvLyBDbGVhbiB1cCB0aGUgZXZlbnQgaW4gY2FzZSBpdCBpcyBiZWluZyByZXVzZWRcblx0XHRldmVudC5yZXN1bHQgPSB1bmRlZmluZWQ7XG5cdFx0aWYgKCAhZXZlbnQudGFyZ2V0ICkge1xuXHRcdFx0ZXZlbnQudGFyZ2V0ID0gZWxlbTtcblx0XHR9XG5cblx0XHQvLyBDbG9uZSBhbnkgaW5jb21pbmcgZGF0YSBhbmQgcHJlcGVuZCB0aGUgZXZlbnQsIGNyZWF0aW5nIHRoZSBoYW5kbGVyIGFyZyBsaXN0XG5cdFx0ZGF0YSA9IGRhdGEgPT0gbnVsbCA/XG5cdFx0XHRbIGV2ZW50IF0gOlxuXHRcdFx0alF1ZXJ5Lm1ha2VBcnJheSggZGF0YSwgWyBldmVudCBdICk7XG5cblx0XHQvLyBBbGxvdyBzcGVjaWFsIGV2ZW50cyB0byBkcmF3IG91dHNpZGUgdGhlIGxpbmVzXG5cdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cdFx0aWYgKCAhb25seUhhbmRsZXJzICYmIHNwZWNpYWwudHJpZ2dlciAmJiBzcGVjaWFsLnRyaWdnZXIuYXBwbHkoIGVsZW0sIGRhdGEgKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZXJtaW5lIGV2ZW50IHByb3BhZ2F0aW9uIHBhdGggaW4gYWR2YW5jZSwgcGVyIFczQyBldmVudHMgc3BlYyAoIzk5NTEpXG5cdFx0Ly8gQnViYmxlIHVwIHRvIGRvY3VtZW50LCB0aGVuIHRvIHdpbmRvdzsgd2F0Y2ggZm9yIGEgZ2xvYmFsIG93bmVyRG9jdW1lbnQgdmFyICgjOTcyNClcblx0XHRpZiAoICFvbmx5SGFuZGxlcnMgJiYgIXNwZWNpYWwubm9CdWJibGUgJiYgIWpRdWVyeS5pc1dpbmRvdyggZWxlbSApICkge1xuXG5cdFx0XHRidWJibGVUeXBlID0gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgfHwgdHlwZTtcblx0XHRcdGlmICggIXJmb2N1c01vcnBoLnRlc3QoIGJ1YmJsZVR5cGUgKyB0eXBlICkgKSB7XG5cdFx0XHRcdGN1ciA9IGN1ci5wYXJlbnROb2RlO1xuXHRcdFx0fVxuXHRcdFx0Zm9yICggOyBjdXI7IGN1ciA9IGN1ci5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRldmVudFBhdGgucHVzaCggY3VyICk7XG5cdFx0XHRcdHRtcCA9IGN1cjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gT25seSBhZGQgd2luZG93IGlmIHdlIGdvdCB0byBkb2N1bWVudCAoZS5nLiwgbm90IHBsYWluIG9iaiBvciBkZXRhY2hlZCBET00pXG5cdFx0XHRpZiAoIHRtcCA9PT0gKGVsZW0ub3duZXJEb2N1bWVudCB8fCBkb2N1bWVudCkgKSB7XG5cdFx0XHRcdGV2ZW50UGF0aC5wdXNoKCB0bXAuZGVmYXVsdFZpZXcgfHwgdG1wLnBhcmVudFdpbmRvdyB8fCB3aW5kb3cgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBGaXJlIGhhbmRsZXJzIG9uIHRoZSBldmVudCBwYXRoXG5cdFx0aSA9IDA7XG5cdFx0d2hpbGUgKCAoY3VyID0gZXZlbnRQYXRoW2krK10pICYmICFldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXG5cdFx0XHRldmVudC50eXBlID0gaSA+IDEgP1xuXHRcdFx0XHRidWJibGVUeXBlIDpcblx0XHRcdFx0c3BlY2lhbC5iaW5kVHlwZSB8fCB0eXBlO1xuXG5cdFx0XHQvLyBqUXVlcnkgaGFuZGxlclxuXHRcdFx0aGFuZGxlID0gKCBqUXVlcnkuX2RhdGEoIGN1ciwgXCJldmVudHNcIiApIHx8IHt9IClbIGV2ZW50LnR5cGUgXSAmJiBqUXVlcnkuX2RhdGEoIGN1ciwgXCJoYW5kbGVcIiApO1xuXHRcdFx0aWYgKCBoYW5kbGUgKSB7XG5cdFx0XHRcdGhhbmRsZS5hcHBseSggY3VyLCBkYXRhICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE5hdGl2ZSBoYW5kbGVyXG5cdFx0XHRoYW5kbGUgPSBvbnR5cGUgJiYgY3VyWyBvbnR5cGUgXTtcblx0XHRcdGlmICggaGFuZGxlICYmIGhhbmRsZS5hcHBseSAmJiBqUXVlcnkuYWNjZXB0RGF0YSggY3VyICkgKSB7XG5cdFx0XHRcdGV2ZW50LnJlc3VsdCA9IGhhbmRsZS5hcHBseSggY3VyLCBkYXRhICk7XG5cdFx0XHRcdGlmICggZXZlbnQucmVzdWx0ID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGV2ZW50LnR5cGUgPSB0eXBlO1xuXG5cdFx0Ly8gSWYgbm9ib2R5IHByZXZlbnRlZCB0aGUgZGVmYXVsdCBhY3Rpb24sIGRvIGl0IG5vd1xuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiAhZXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkgKSB7XG5cblx0XHRcdGlmICggKCFzcGVjaWFsLl9kZWZhdWx0IHx8IHNwZWNpYWwuX2RlZmF1bHQuYXBwbHkoIGV2ZW50UGF0aC5wb3AoKSwgZGF0YSApID09PSBmYWxzZSkgJiZcblx0XHRcdFx0alF1ZXJ5LmFjY2VwdERhdGEoIGVsZW0gKSApIHtcblxuXHRcdFx0XHQvLyBDYWxsIGEgbmF0aXZlIERPTSBtZXRob2Qgb24gdGhlIHRhcmdldCB3aXRoIHRoZSBzYW1lIG5hbWUgbmFtZSBhcyB0aGUgZXZlbnQuXG5cdFx0XHRcdC8vIENhbid0IHVzZSBhbiAuaXNGdW5jdGlvbigpIGNoZWNrIGhlcmUgYmVjYXVzZSBJRTYvNyBmYWlscyB0aGF0IHRlc3QuXG5cdFx0XHRcdC8vIERvbid0IGRvIGRlZmF1bHQgYWN0aW9ucyBvbiB3aW5kb3csIHRoYXQncyB3aGVyZSBnbG9iYWwgdmFyaWFibGVzIGJlICgjNjE3MClcblx0XHRcdFx0aWYgKCBvbnR5cGUgJiYgZWxlbVsgdHlwZSBdICYmICFqUXVlcnkuaXNXaW5kb3coIGVsZW0gKSApIHtcblxuXHRcdFx0XHRcdC8vIERvbid0IHJlLXRyaWdnZXIgYW4gb25GT08gZXZlbnQgd2hlbiB3ZSBjYWxsIGl0cyBGT08oKSBtZXRob2Rcblx0XHRcdFx0XHR0bXAgPSBlbGVtWyBvbnR5cGUgXTtcblxuXHRcdFx0XHRcdGlmICggdG1wICkge1xuXHRcdFx0XHRcdFx0ZWxlbVsgb250eXBlIF0gPSBudWxsO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFByZXZlbnQgcmUtdHJpZ2dlcmluZyBvZiB0aGUgc2FtZSBldmVudCwgc2luY2Ugd2UgYWxyZWFkeSBidWJibGVkIGl0IGFib3ZlXG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCA9IHR5cGU7XG5cdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdGVsZW1bIHR5cGUgXSgpO1xuXHRcdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXHRcdFx0XHRcdFx0Ly8gSUU8OSBkaWVzIG9uIGZvY3VzL2JsdXIgdG8gaGlkZGVuIGVsZW1lbnQgKCMxNDg2LCMxMjUxOClcblx0XHRcdFx0XHRcdC8vIG9ubHkgcmVwcm9kdWNpYmxlIG9uIHdpblhQIElFOCBuYXRpdmUsIG5vdCBJRTkgaW4gSUU4IG1vZGVcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCA9IHVuZGVmaW5lZDtcblxuXHRcdFx0XHRcdGlmICggdG1wICkge1xuXHRcdFx0XHRcdFx0ZWxlbVsgb250eXBlIF0gPSB0bXA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGV2ZW50LnJlc3VsdDtcblx0fSxcblxuXHRkaXNwYXRjaDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXG5cdFx0Ly8gTWFrZSBhIHdyaXRhYmxlIGpRdWVyeS5FdmVudCBmcm9tIHRoZSBuYXRpdmUgZXZlbnQgb2JqZWN0XG5cdFx0ZXZlbnQgPSBqUXVlcnkuZXZlbnQuZml4KCBldmVudCApO1xuXG5cdFx0dmFyIGksIHJldCwgaGFuZGxlT2JqLCBtYXRjaGVkLCBqLFxuXHRcdFx0aGFuZGxlclF1ZXVlID0gW10sXG5cdFx0XHRhcmdzID0gc2xpY2UuY2FsbCggYXJndW1lbnRzICksXG5cdFx0XHRoYW5kbGVycyA9ICggalF1ZXJ5Ll9kYXRhKCB0aGlzLCBcImV2ZW50c1wiICkgfHwge30gKVsgZXZlbnQudHlwZSBdIHx8IFtdLFxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyBldmVudC50eXBlIF0gfHwge307XG5cblx0XHQvLyBVc2UgdGhlIGZpeC1lZCBqUXVlcnkuRXZlbnQgcmF0aGVyIHRoYW4gdGhlIChyZWFkLW9ubHkpIG5hdGl2ZSBldmVudFxuXHRcdGFyZ3NbMF0gPSBldmVudDtcblx0XHRldmVudC5kZWxlZ2F0ZVRhcmdldCA9IHRoaXM7XG5cblx0XHQvLyBDYWxsIHRoZSBwcmVEaXNwYXRjaCBob29rIGZvciB0aGUgbWFwcGVkIHR5cGUsIGFuZCBsZXQgaXQgYmFpbCBpZiBkZXNpcmVkXG5cdFx0aWYgKCBzcGVjaWFsLnByZURpc3BhdGNoICYmIHNwZWNpYWwucHJlRGlzcGF0Y2guY2FsbCggdGhpcywgZXZlbnQgKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZXJtaW5lIGhhbmRsZXJzXG5cdFx0aGFuZGxlclF1ZXVlID0galF1ZXJ5LmV2ZW50LmhhbmRsZXJzLmNhbGwoIHRoaXMsIGV2ZW50LCBoYW5kbGVycyApO1xuXG5cdFx0Ly8gUnVuIGRlbGVnYXRlcyBmaXJzdDsgdGhleSBtYXkgd2FudCB0byBzdG9wIHByb3BhZ2F0aW9uIGJlbmVhdGggdXNcblx0XHRpID0gMDtcblx0XHR3aGlsZSAoIChtYXRjaGVkID0gaGFuZGxlclF1ZXVlWyBpKysgXSkgJiYgIWV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cdFx0XHRldmVudC5jdXJyZW50VGFyZ2V0ID0gbWF0Y2hlZC5lbGVtO1xuXG5cdFx0XHRqID0gMDtcblx0XHRcdHdoaWxlICggKGhhbmRsZU9iaiA9IG1hdGNoZWQuaGFuZGxlcnNbIGorKyBdKSAmJiAhZXZlbnQuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblxuXHRcdFx0XHQvLyBUcmlnZ2VyZWQgZXZlbnQgbXVzdCBlaXRoZXIgMSkgaGF2ZSBubyBuYW1lc3BhY2UsIG9yXG5cdFx0XHRcdC8vIDIpIGhhdmUgbmFtZXNwYWNlKHMpIGEgc3Vic2V0IG9yIGVxdWFsIHRvIHRob3NlIGluIHRoZSBib3VuZCBldmVudCAoYm90aCBjYW4gaGF2ZSBubyBuYW1lc3BhY2UpLlxuXHRcdFx0XHRpZiAoICFldmVudC5uYW1lc3BhY2VfcmUgfHwgZXZlbnQubmFtZXNwYWNlX3JlLnRlc3QoIGhhbmRsZU9iai5uYW1lc3BhY2UgKSApIHtcblxuXHRcdFx0XHRcdGV2ZW50LmhhbmRsZU9iaiA9IGhhbmRsZU9iajtcblx0XHRcdFx0XHRldmVudC5kYXRhID0gaGFuZGxlT2JqLmRhdGE7XG5cblx0XHRcdFx0XHRyZXQgPSAoIChqUXVlcnkuZXZlbnQuc3BlY2lhbFsgaGFuZGxlT2JqLm9yaWdUeXBlIF0gfHwge30pLmhhbmRsZSB8fCBoYW5kbGVPYmouaGFuZGxlciApXG5cdFx0XHRcdFx0XHRcdC5hcHBseSggbWF0Y2hlZC5lbGVtLCBhcmdzICk7XG5cblx0XHRcdFx0XHRpZiAoIHJldCAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoZXZlbnQucmVzdWx0ID0gcmV0KSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdFx0XHRcdGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENhbGwgdGhlIHBvc3REaXNwYXRjaCBob29rIGZvciB0aGUgbWFwcGVkIHR5cGVcblx0XHRpZiAoIHNwZWNpYWwucG9zdERpc3BhdGNoICkge1xuXHRcdFx0c3BlY2lhbC5wb3N0RGlzcGF0Y2guY2FsbCggdGhpcywgZXZlbnQgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZXZlbnQucmVzdWx0O1xuXHR9LFxuXG5cdGhhbmRsZXJzOiBmdW5jdGlvbiggZXZlbnQsIGhhbmRsZXJzICkge1xuXHRcdHZhciBzZWwsIGhhbmRsZU9iaiwgbWF0Y2hlcywgaSxcblx0XHRcdGhhbmRsZXJRdWV1ZSA9IFtdLFxuXHRcdFx0ZGVsZWdhdGVDb3VudCA9IGhhbmRsZXJzLmRlbGVnYXRlQ291bnQsXG5cdFx0XHRjdXIgPSBldmVudC50YXJnZXQ7XG5cblx0XHQvLyBGaW5kIGRlbGVnYXRlIGhhbmRsZXJzXG5cdFx0Ly8gQmxhY2staG9sZSBTVkcgPHVzZT4gaW5zdGFuY2UgdHJlZXMgKCMxMzE4MClcblx0XHQvLyBBdm9pZCBub24tbGVmdC1jbGljayBidWJibGluZyBpbiBGaXJlZm94ICgjMzg2MSlcblx0XHRpZiAoIGRlbGVnYXRlQ291bnQgJiYgY3VyLm5vZGVUeXBlICYmICghZXZlbnQuYnV0dG9uIHx8IGV2ZW50LnR5cGUgIT09IFwiY2xpY2tcIikgKSB7XG5cblx0XHRcdC8qIGpzaGludCBlcWVxZXE6IGZhbHNlICovXG5cdFx0XHRmb3IgKCA7IGN1ciAhPSB0aGlzOyBjdXIgPSBjdXIucGFyZW50Tm9kZSB8fCB0aGlzICkge1xuXHRcdFx0XHQvKiBqc2hpbnQgZXFlcWVxOiB0cnVlICovXG5cblx0XHRcdFx0Ly8gRG9uJ3QgY2hlY2sgbm9uLWVsZW1lbnRzICgjMTMyMDgpXG5cdFx0XHRcdC8vIERvbid0IHByb2Nlc3MgY2xpY2tzIG9uIGRpc2FibGVkIGVsZW1lbnRzICgjNjkxMSwgIzgxNjUsICMxMTM4MiwgIzExNzY0KVxuXHRcdFx0XHRpZiAoIGN1ci5ub2RlVHlwZSA9PT0gMSAmJiAoY3VyLmRpc2FibGVkICE9PSB0cnVlIHx8IGV2ZW50LnR5cGUgIT09IFwiY2xpY2tcIikgKSB7XG5cdFx0XHRcdFx0bWF0Y2hlcyA9IFtdO1xuXHRcdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgZGVsZWdhdGVDb3VudDsgaSsrICkge1xuXHRcdFx0XHRcdFx0aGFuZGxlT2JqID0gaGFuZGxlcnNbIGkgXTtcblxuXHRcdFx0XHRcdFx0Ly8gRG9uJ3QgY29uZmxpY3Qgd2l0aCBPYmplY3QucHJvdG90eXBlIHByb3BlcnRpZXMgKCMxMzIwMylcblx0XHRcdFx0XHRcdHNlbCA9IGhhbmRsZU9iai5zZWxlY3RvciArIFwiIFwiO1xuXG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZXNbIHNlbCBdID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0XHRcdG1hdGNoZXNbIHNlbCBdID0gaGFuZGxlT2JqLm5lZWRzQ29udGV4dCA/XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5KCBzZWwsIHRoaXMgKS5pbmRleCggY3VyICkgPj0gMCA6XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LmZpbmQoIHNlbCwgdGhpcywgbnVsbCwgWyBjdXIgXSApLmxlbmd0aDtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlc1sgc2VsIF0gKSB7XG5cdFx0XHRcdFx0XHRcdG1hdGNoZXMucHVzaCggaGFuZGxlT2JqICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggbWF0Y2hlcy5sZW5ndGggKSB7XG5cdFx0XHRcdFx0XHRoYW5kbGVyUXVldWUucHVzaCh7IGVsZW06IGN1ciwgaGFuZGxlcnM6IG1hdGNoZXMgfSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQWRkIHRoZSByZW1haW5pbmcgKGRpcmVjdGx5LWJvdW5kKSBoYW5kbGVyc1xuXHRcdGlmICggZGVsZWdhdGVDb3VudCA8IGhhbmRsZXJzLmxlbmd0aCApIHtcblx0XHRcdGhhbmRsZXJRdWV1ZS5wdXNoKHsgZWxlbTogdGhpcywgaGFuZGxlcnM6IGhhbmRsZXJzLnNsaWNlKCBkZWxlZ2F0ZUNvdW50ICkgfSk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGhhbmRsZXJRdWV1ZTtcblx0fSxcblxuXHRmaXg6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRpZiAoIGV2ZW50WyBqUXVlcnkuZXhwYW5kbyBdICkge1xuXHRcdFx0cmV0dXJuIGV2ZW50O1xuXHRcdH1cblxuXHRcdC8vIENyZWF0ZSBhIHdyaXRhYmxlIGNvcHkgb2YgdGhlIGV2ZW50IG9iamVjdCBhbmQgbm9ybWFsaXplIHNvbWUgcHJvcGVydGllc1xuXHRcdHZhciBpLCBwcm9wLCBjb3B5LFxuXHRcdFx0dHlwZSA9IGV2ZW50LnR5cGUsXG5cdFx0XHRvcmlnaW5hbEV2ZW50ID0gZXZlbnQsXG5cdFx0XHRmaXhIb29rID0gdGhpcy5maXhIb29rc1sgdHlwZSBdO1xuXG5cdFx0aWYgKCAhZml4SG9vayApIHtcblx0XHRcdHRoaXMuZml4SG9va3NbIHR5cGUgXSA9IGZpeEhvb2sgPVxuXHRcdFx0XHRybW91c2VFdmVudC50ZXN0KCB0eXBlICkgPyB0aGlzLm1vdXNlSG9va3MgOlxuXHRcdFx0XHRya2V5RXZlbnQudGVzdCggdHlwZSApID8gdGhpcy5rZXlIb29rcyA6XG5cdFx0XHRcdHt9O1xuXHRcdH1cblx0XHRjb3B5ID0gZml4SG9vay5wcm9wcyA/IHRoaXMucHJvcHMuY29uY2F0KCBmaXhIb29rLnByb3BzICkgOiB0aGlzLnByb3BzO1xuXG5cdFx0ZXZlbnQgPSBuZXcgalF1ZXJ5LkV2ZW50KCBvcmlnaW5hbEV2ZW50ICk7XG5cblx0XHRpID0gY29weS5sZW5ndGg7XG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRwcm9wID0gY29weVsgaSBdO1xuXHRcdFx0ZXZlbnRbIHByb3AgXSA9IG9yaWdpbmFsRXZlbnRbIHByb3AgXTtcblx0XHR9XG5cblx0XHQvLyBTdXBwb3J0OiBJRTw5XG5cdFx0Ly8gRml4IHRhcmdldCBwcm9wZXJ0eSAoIzE5MjUpXG5cdFx0aWYgKCAhZXZlbnQudGFyZ2V0ICkge1xuXHRcdFx0ZXZlbnQudGFyZ2V0ID0gb3JpZ2luYWxFdmVudC5zcmNFbGVtZW50IHx8IGRvY3VtZW50O1xuXHRcdH1cblxuXHRcdC8vIFN1cHBvcnQ6IENocm9tZSAyMyssIFNhZmFyaT9cblx0XHQvLyBUYXJnZXQgc2hvdWxkIG5vdCBiZSBhIHRleHQgbm9kZSAoIzUwNCwgIzEzMTQzKVxuXHRcdGlmICggZXZlbnQudGFyZ2V0Lm5vZGVUeXBlID09PSAzICkge1xuXHRcdFx0ZXZlbnQudGFyZ2V0ID0gZXZlbnQudGFyZ2V0LnBhcmVudE5vZGU7XG5cdFx0fVxuXG5cdFx0Ly8gU3VwcG9ydDogSUU8OVxuXHRcdC8vIEZvciBtb3VzZS9rZXkgZXZlbnRzLCBtZXRhS2V5PT1mYWxzZSBpZiBpdCdzIHVuZGVmaW5lZCAoIzMzNjgsICMxMTMyOClcblx0XHRldmVudC5tZXRhS2V5ID0gISFldmVudC5tZXRhS2V5O1xuXG5cdFx0cmV0dXJuIGZpeEhvb2suZmlsdGVyID8gZml4SG9vay5maWx0ZXIoIGV2ZW50LCBvcmlnaW5hbEV2ZW50ICkgOiBldmVudDtcblx0fSxcblxuXHQvLyBJbmNsdWRlcyBzb21lIGV2ZW50IHByb3BzIHNoYXJlZCBieSBLZXlFdmVudCBhbmQgTW91c2VFdmVudFxuXHRwcm9wczogXCJhbHRLZXkgYnViYmxlcyBjYW5jZWxhYmxlIGN0cmxLZXkgY3VycmVudFRhcmdldCBldmVudFBoYXNlIG1ldGFLZXkgcmVsYXRlZFRhcmdldCBzaGlmdEtleSB0YXJnZXQgdGltZVN0YW1wIHZpZXcgd2hpY2hcIi5zcGxpdChcIiBcIiksXG5cblx0Zml4SG9va3M6IHt9LFxuXG5cdGtleUhvb2tzOiB7XG5cdFx0cHJvcHM6IFwiY2hhciBjaGFyQ29kZSBrZXkga2V5Q29kZVwiLnNwbGl0KFwiIFwiKSxcblx0XHRmaWx0ZXI6IGZ1bmN0aW9uKCBldmVudCwgb3JpZ2luYWwgKSB7XG5cblx0XHRcdC8vIEFkZCB3aGljaCBmb3Iga2V5IGV2ZW50c1xuXHRcdFx0aWYgKCBldmVudC53aGljaCA9PSBudWxsICkge1xuXHRcdFx0XHRldmVudC53aGljaCA9IG9yaWdpbmFsLmNoYXJDb2RlICE9IG51bGwgPyBvcmlnaW5hbC5jaGFyQ29kZSA6IG9yaWdpbmFsLmtleUNvZGU7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBldmVudDtcblx0XHR9XG5cdH0sXG5cblx0bW91c2VIb29rczoge1xuXHRcdHByb3BzOiBcImJ1dHRvbiBidXR0b25zIGNsaWVudFggY2xpZW50WSBmcm9tRWxlbWVudCBvZmZzZXRYIG9mZnNldFkgcGFnZVggcGFnZVkgc2NyZWVuWCBzY3JlZW5ZIHRvRWxlbWVudFwiLnNwbGl0KFwiIFwiKSxcblx0XHRmaWx0ZXI6IGZ1bmN0aW9uKCBldmVudCwgb3JpZ2luYWwgKSB7XG5cdFx0XHR2YXIgYm9keSwgZXZlbnREb2MsIGRvYyxcblx0XHRcdFx0YnV0dG9uID0gb3JpZ2luYWwuYnV0dG9uLFxuXHRcdFx0XHRmcm9tRWxlbWVudCA9IG9yaWdpbmFsLmZyb21FbGVtZW50O1xuXG5cdFx0XHQvLyBDYWxjdWxhdGUgcGFnZVgvWSBpZiBtaXNzaW5nIGFuZCBjbGllbnRYL1kgYXZhaWxhYmxlXG5cdFx0XHRpZiAoIGV2ZW50LnBhZ2VYID09IG51bGwgJiYgb3JpZ2luYWwuY2xpZW50WCAhPSBudWxsICkge1xuXHRcdFx0XHRldmVudERvYyA9IGV2ZW50LnRhcmdldC5vd25lckRvY3VtZW50IHx8IGRvY3VtZW50O1xuXHRcdFx0XHRkb2MgPSBldmVudERvYy5kb2N1bWVudEVsZW1lbnQ7XG5cdFx0XHRcdGJvZHkgPSBldmVudERvYy5ib2R5O1xuXG5cdFx0XHRcdGV2ZW50LnBhZ2VYID0gb3JpZ2luYWwuY2xpZW50WCArICggZG9jICYmIGRvYy5zY3JvbGxMZWZ0IHx8IGJvZHkgJiYgYm9keS5zY3JvbGxMZWZ0IHx8IDAgKSAtICggZG9jICYmIGRvYy5jbGllbnRMZWZ0IHx8IGJvZHkgJiYgYm9keS5jbGllbnRMZWZ0IHx8IDAgKTtcblx0XHRcdFx0ZXZlbnQucGFnZVkgPSBvcmlnaW5hbC5jbGllbnRZICsgKCBkb2MgJiYgZG9jLnNjcm9sbFRvcCAgfHwgYm9keSAmJiBib2R5LnNjcm9sbFRvcCAgfHwgMCApIC0gKCBkb2MgJiYgZG9jLmNsaWVudFRvcCAgfHwgYm9keSAmJiBib2R5LmNsaWVudFRvcCAgfHwgMCApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgcmVsYXRlZFRhcmdldCwgaWYgbmVjZXNzYXJ5XG5cdFx0XHRpZiAoICFldmVudC5yZWxhdGVkVGFyZ2V0ICYmIGZyb21FbGVtZW50ICkge1xuXHRcdFx0XHRldmVudC5yZWxhdGVkVGFyZ2V0ID0gZnJvbUVsZW1lbnQgPT09IGV2ZW50LnRhcmdldCA/IG9yaWdpbmFsLnRvRWxlbWVudCA6IGZyb21FbGVtZW50O1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgd2hpY2ggZm9yIGNsaWNrOiAxID09PSBsZWZ0OyAyID09PSBtaWRkbGU7IDMgPT09IHJpZ2h0XG5cdFx0XHQvLyBOb3RlOiBidXR0b24gaXMgbm90IG5vcm1hbGl6ZWQsIHNvIGRvbid0IHVzZSBpdFxuXHRcdFx0aWYgKCAhZXZlbnQud2hpY2ggJiYgYnV0dG9uICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdGV2ZW50LndoaWNoID0gKCBidXR0b24gJiAxID8gMSA6ICggYnV0dG9uICYgMiA/IDMgOiAoIGJ1dHRvbiAmIDQgPyAyIDogMCApICkgKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGV2ZW50O1xuXHRcdH1cblx0fSxcblxuXHRzcGVjaWFsOiB7XG5cdFx0bG9hZDoge1xuXHRcdFx0Ly8gUHJldmVudCB0cmlnZ2VyZWQgaW1hZ2UubG9hZCBldmVudHMgZnJvbSBidWJibGluZyB0byB3aW5kb3cubG9hZFxuXHRcdFx0bm9CdWJibGU6IHRydWVcblx0XHR9LFxuXHRcdGZvY3VzOiB7XG5cdFx0XHQvLyBGaXJlIG5hdGl2ZSBldmVudCBpZiBwb3NzaWJsZSBzbyBibHVyL2ZvY3VzIHNlcXVlbmNlIGlzIGNvcnJlY3Rcblx0XHRcdHRyaWdnZXI6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIHRoaXMgIT09IHNhZmVBY3RpdmVFbGVtZW50KCkgJiYgdGhpcy5mb2N1cyApIHtcblx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0dGhpcy5mb2N1cygpO1xuXHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUU8OVxuXHRcdFx0XHRcdFx0Ly8gSWYgd2UgZXJyb3Igb24gZm9jdXMgdG8gaGlkZGVuIGVsZW1lbnQgKCMxNDg2LCAjMTI1MTgpLFxuXHRcdFx0XHRcdFx0Ly8gbGV0IC50cmlnZ2VyKCkgcnVuIHRoZSBoYW5kbGVyc1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdGRlbGVnYXRlVHlwZTogXCJmb2N1c2luXCJcblx0XHR9LFxuXHRcdGJsdXI6IHtcblx0XHRcdHRyaWdnZXI6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIHRoaXMgPT09IHNhZmVBY3RpdmVFbGVtZW50KCkgJiYgdGhpcy5ibHVyICkge1xuXHRcdFx0XHRcdHRoaXMuYmx1cigpO1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdGRlbGVnYXRlVHlwZTogXCJmb2N1c291dFwiXG5cdFx0fSxcblx0XHRjbGljazoge1xuXHRcdFx0Ly8gRm9yIGNoZWNrYm94LCBmaXJlIG5hdGl2ZSBldmVudCBzbyBjaGVja2VkIHN0YXRlIHdpbGwgYmUgcmlnaHRcblx0XHRcdHRyaWdnZXI6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGpRdWVyeS5ub2RlTmFtZSggdGhpcywgXCJpbnB1dFwiICkgJiYgdGhpcy50eXBlID09PSBcImNoZWNrYm94XCIgJiYgdGhpcy5jbGljayApIHtcblx0XHRcdFx0XHR0aGlzLmNsaWNrKCk7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBGb3IgY3Jvc3MtYnJvd3NlciBjb25zaXN0ZW5jeSwgZG9uJ3QgZmlyZSBuYXRpdmUgLmNsaWNrKCkgb24gbGlua3Ncblx0XHRcdF9kZWZhdWx0OiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRcdHJldHVybiBqUXVlcnkubm9kZU5hbWUoIGV2ZW50LnRhcmdldCwgXCJhXCIgKTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0YmVmb3JldW5sb2FkOiB7XG5cdFx0XHRwb3N0RGlzcGF0Y2g6IGZ1bmN0aW9uKCBldmVudCApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDIwK1xuXHRcdFx0XHQvLyBGaXJlZm94IGRvZXNuJ3QgYWxlcnQgaWYgdGhlIHJldHVyblZhbHVlIGZpZWxkIGlzIG5vdCBzZXQuXG5cdFx0XHRcdGlmICggZXZlbnQucmVzdWx0ICE9PSB1bmRlZmluZWQgJiYgZXZlbnQub3JpZ2luYWxFdmVudCApIHtcblx0XHRcdFx0XHRldmVudC5vcmlnaW5hbEV2ZW50LnJldHVyblZhbHVlID0gZXZlbnQucmVzdWx0O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdHNpbXVsYXRlOiBmdW5jdGlvbiggdHlwZSwgZWxlbSwgZXZlbnQsIGJ1YmJsZSApIHtcblx0XHQvLyBQaWdneWJhY2sgb24gYSBkb25vciBldmVudCB0byBzaW11bGF0ZSBhIGRpZmZlcmVudCBvbmUuXG5cdFx0Ly8gRmFrZSBvcmlnaW5hbEV2ZW50IHRvIGF2b2lkIGRvbm9yJ3Mgc3RvcFByb3BhZ2F0aW9uLCBidXQgaWYgdGhlXG5cdFx0Ly8gc2ltdWxhdGVkIGV2ZW50IHByZXZlbnRzIGRlZmF1bHQgdGhlbiB3ZSBkbyB0aGUgc2FtZSBvbiB0aGUgZG9ub3IuXG5cdFx0dmFyIGUgPSBqUXVlcnkuZXh0ZW5kKFxuXHRcdFx0bmV3IGpRdWVyeS5FdmVudCgpLFxuXHRcdFx0ZXZlbnQsXG5cdFx0XHR7XG5cdFx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRcdGlzU2ltdWxhdGVkOiB0cnVlLFxuXHRcdFx0XHRvcmlnaW5hbEV2ZW50OiB7fVxuXHRcdFx0fVxuXHRcdCk7XG5cdFx0aWYgKCBidWJibGUgKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggZSwgbnVsbCwgZWxlbSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQuZGlzcGF0Y2guY2FsbCggZWxlbSwgZSApO1xuXHRcdH1cblx0XHRpZiAoIGUuaXNEZWZhdWx0UHJldmVudGVkKCkgKSB7XG5cdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdH1cblx0fVxufTtcblxualF1ZXJ5LnJlbW92ZUV2ZW50ID0gZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciA/XG5cdGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCBoYW5kbGUgKSB7XG5cdFx0aWYgKCBlbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIgKSB7XG5cdFx0XHRlbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIoIHR5cGUsIGhhbmRsZSwgZmFsc2UgKTtcblx0XHR9XG5cdH0gOlxuXHRmdW5jdGlvbiggZWxlbSwgdHlwZSwgaGFuZGxlICkge1xuXHRcdHZhciBuYW1lID0gXCJvblwiICsgdHlwZTtcblxuXHRcdGlmICggZWxlbS5kZXRhY2hFdmVudCApIHtcblxuXHRcdFx0Ly8gIzg1NDUsICM3MDU0LCBwcmV2ZW50aW5nIG1lbW9yeSBsZWFrcyBmb3IgY3VzdG9tIGV2ZW50cyBpbiBJRTYtOFxuXHRcdFx0Ly8gZGV0YWNoRXZlbnQgbmVlZGVkIHByb3BlcnR5IG9uIGVsZW1lbnQsIGJ5IG5hbWUgb2YgdGhhdCBldmVudCwgdG8gcHJvcGVybHkgZXhwb3NlIGl0IHRvIEdDXG5cdFx0XHRpZiAoIHR5cGVvZiBlbGVtWyBuYW1lIF0gPT09IHN0cnVuZGVmaW5lZCApIHtcblx0XHRcdFx0ZWxlbVsgbmFtZSBdID0gbnVsbDtcblx0XHRcdH1cblxuXHRcdFx0ZWxlbS5kZXRhY2hFdmVudCggbmFtZSwgaGFuZGxlICk7XG5cdFx0fVxuXHR9O1xuXG5qUXVlcnkuRXZlbnQgPSBmdW5jdGlvbiggc3JjLCBwcm9wcyApIHtcblx0Ly8gQWxsb3cgaW5zdGFudGlhdGlvbiB3aXRob3V0IHRoZSAnbmV3JyBrZXl3b3JkXG5cdGlmICggISh0aGlzIGluc3RhbmNlb2YgalF1ZXJ5LkV2ZW50KSApIHtcblx0XHRyZXR1cm4gbmV3IGpRdWVyeS5FdmVudCggc3JjLCBwcm9wcyApO1xuXHR9XG5cblx0Ly8gRXZlbnQgb2JqZWN0XG5cdGlmICggc3JjICYmIHNyYy50eXBlICkge1xuXHRcdHRoaXMub3JpZ2luYWxFdmVudCA9IHNyYztcblx0XHR0aGlzLnR5cGUgPSBzcmMudHlwZTtcblxuXHRcdC8vIEV2ZW50cyBidWJibGluZyB1cCB0aGUgZG9jdW1lbnQgbWF5IGhhdmUgYmVlbiBtYXJrZWQgYXMgcHJldmVudGVkXG5cdFx0Ly8gYnkgYSBoYW5kbGVyIGxvd2VyIGRvd24gdGhlIHRyZWU7IHJlZmxlY3QgdGhlIGNvcnJlY3QgdmFsdWUuXG5cdFx0dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSBzcmMuZGVmYXVsdFByZXZlbnRlZCB8fFxuXHRcdFx0XHRzcmMuZGVmYXVsdFByZXZlbnRlZCA9PT0gdW5kZWZpbmVkICYmXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDwgOSwgQW5kcm9pZCA8IDQuMFxuXHRcdFx0XHRzcmMucmV0dXJuVmFsdWUgPT09IGZhbHNlID9cblx0XHRcdHJldHVyblRydWUgOlxuXHRcdFx0cmV0dXJuRmFsc2U7XG5cblx0Ly8gRXZlbnQgdHlwZVxuXHR9IGVsc2Uge1xuXHRcdHRoaXMudHlwZSA9IHNyYztcblx0fVxuXG5cdC8vIFB1dCBleHBsaWNpdGx5IHByb3ZpZGVkIHByb3BlcnRpZXMgb250byB0aGUgZXZlbnQgb2JqZWN0XG5cdGlmICggcHJvcHMgKSB7XG5cdFx0alF1ZXJ5LmV4dGVuZCggdGhpcywgcHJvcHMgKTtcblx0fVxuXG5cdC8vIENyZWF0ZSBhIHRpbWVzdGFtcCBpZiBpbmNvbWluZyBldmVudCBkb2Vzbid0IGhhdmUgb25lXG5cdHRoaXMudGltZVN0YW1wID0gc3JjICYmIHNyYy50aW1lU3RhbXAgfHwgalF1ZXJ5Lm5vdygpO1xuXG5cdC8vIE1hcmsgaXQgYXMgZml4ZWRcblx0dGhpc1sgalF1ZXJ5LmV4cGFuZG8gXSA9IHRydWU7XG59O1xuXG4vLyBqUXVlcnkuRXZlbnQgaXMgYmFzZWQgb24gRE9NMyBFdmVudHMgYXMgc3BlY2lmaWVkIGJ5IHRoZSBFQ01BU2NyaXB0IExhbmd1YWdlIEJpbmRpbmdcbi8vIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMDMvV0QtRE9NLUxldmVsLTMtRXZlbnRzLTIwMDMwMzMxL2VjbWEtc2NyaXB0LWJpbmRpbmcuaHRtbFxualF1ZXJ5LkV2ZW50LnByb3RvdHlwZSA9IHtcblx0aXNEZWZhdWx0UHJldmVudGVkOiByZXR1cm5GYWxzZSxcblx0aXNQcm9wYWdhdGlvblN0b3BwZWQ6IHJldHVybkZhbHNlLFxuXHRpc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZDogcmV0dXJuRmFsc2UsXG5cblx0cHJldmVudERlZmF1bHQ6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xuXG5cdFx0dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSByZXR1cm5UcnVlO1xuXHRcdGlmICggIWUgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gSWYgcHJldmVudERlZmF1bHQgZXhpc3RzLCBydW4gaXQgb24gdGhlIG9yaWdpbmFsIGV2ZW50XG5cdFx0aWYgKCBlLnByZXZlbnREZWZhdWx0ICkge1xuXHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG5cdFx0Ly8gU3VwcG9ydDogSUVcblx0XHQvLyBPdGhlcndpc2Ugc2V0IHRoZSByZXR1cm5WYWx1ZSBwcm9wZXJ0eSBvZiB0aGUgb3JpZ2luYWwgZXZlbnQgdG8gZmFsc2Vcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZS5yZXR1cm5WYWx1ZSA9IGZhbHNlO1xuXHRcdH1cblx0fSxcblx0c3RvcFByb3BhZ2F0aW9uOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcblxuXHRcdHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQgPSByZXR1cm5UcnVlO1xuXHRcdGlmICggIWUgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdC8vIElmIHN0b3BQcm9wYWdhdGlvbiBleGlzdHMsIHJ1biBpdCBvbiB0aGUgb3JpZ2luYWwgZXZlbnRcblx0XHRpZiAoIGUuc3RvcFByb3BhZ2F0aW9uICkge1xuXHRcdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHR9XG5cblx0XHQvLyBTdXBwb3J0OiBJRVxuXHRcdC8vIFNldCB0aGUgY2FuY2VsQnViYmxlIHByb3BlcnR5IG9mIHRoZSBvcmlnaW5hbCBldmVudCB0byB0cnVlXG5cdFx0ZS5jYW5jZWxCdWJibGUgPSB0cnVlO1xuXHR9LFxuXHRzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xuXG5cdFx0dGhpcy5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCA9IHJldHVyblRydWU7XG5cblx0XHRpZiAoIGUgJiYgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24gKSB7XG5cdFx0XHRlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuXHRcdH1cblxuXHRcdHRoaXMuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdH1cbn07XG5cbi8vIENyZWF0ZSBtb3VzZWVudGVyL2xlYXZlIGV2ZW50cyB1c2luZyBtb3VzZW92ZXIvb3V0IGFuZCBldmVudC10aW1lIGNoZWNrc1xualF1ZXJ5LmVhY2goe1xuXHRtb3VzZWVudGVyOiBcIm1vdXNlb3ZlclwiLFxuXHRtb3VzZWxlYXZlOiBcIm1vdXNlb3V0XCIsXG5cdHBvaW50ZXJlbnRlcjogXCJwb2ludGVyb3ZlclwiLFxuXHRwb2ludGVybGVhdmU6IFwicG9pbnRlcm91dFwiXG59LCBmdW5jdGlvbiggb3JpZywgZml4ICkge1xuXHRqUXVlcnkuZXZlbnQuc3BlY2lhbFsgb3JpZyBdID0ge1xuXHRcdGRlbGVnYXRlVHlwZTogZml4LFxuXHRcdGJpbmRUeXBlOiBmaXgsXG5cblx0XHRoYW5kbGU6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdHZhciByZXQsXG5cdFx0XHRcdHRhcmdldCA9IHRoaXMsXG5cdFx0XHRcdHJlbGF0ZWQgPSBldmVudC5yZWxhdGVkVGFyZ2V0LFxuXHRcdFx0XHRoYW5kbGVPYmogPSBldmVudC5oYW5kbGVPYmo7XG5cblx0XHRcdC8vIEZvciBtb3VzZW50ZXIvbGVhdmUgY2FsbCB0aGUgaGFuZGxlciBpZiByZWxhdGVkIGlzIG91dHNpZGUgdGhlIHRhcmdldC5cblx0XHRcdC8vIE5COiBObyByZWxhdGVkVGFyZ2V0IGlmIHRoZSBtb3VzZSBsZWZ0L2VudGVyZWQgdGhlIGJyb3dzZXIgd2luZG93XG5cdFx0XHRpZiAoICFyZWxhdGVkIHx8IChyZWxhdGVkICE9PSB0YXJnZXQgJiYgIWpRdWVyeS5jb250YWlucyggdGFyZ2V0LCByZWxhdGVkICkpICkge1xuXHRcdFx0XHRldmVudC50eXBlID0gaGFuZGxlT2JqLm9yaWdUeXBlO1xuXHRcdFx0XHRyZXQgPSBoYW5kbGVPYmouaGFuZGxlci5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdGV2ZW50LnR5cGUgPSBmaXg7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH1cblx0fTtcbn0pO1xuXG4vLyBJRSBzdWJtaXQgZGVsZWdhdGlvblxuaWYgKCAhc3VwcG9ydC5zdWJtaXRCdWJibGVzICkge1xuXG5cdGpRdWVyeS5ldmVudC5zcGVjaWFsLnN1Ym1pdCA9IHtcblx0XHRzZXR1cDogZnVuY3Rpb24oKSB7XG5cdFx0XHQvLyBPbmx5IG5lZWQgdGhpcyBmb3IgZGVsZWdhdGVkIGZvcm0gc3VibWl0IGV2ZW50c1xuXHRcdFx0aWYgKCBqUXVlcnkubm9kZU5hbWUoIHRoaXMsIFwiZm9ybVwiICkgKSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTGF6eS1hZGQgYSBzdWJtaXQgaGFuZGxlciB3aGVuIGEgZGVzY2VuZGFudCBmb3JtIG1heSBwb3RlbnRpYWxseSBiZSBzdWJtaXR0ZWRcblx0XHRcdGpRdWVyeS5ldmVudC5hZGQoIHRoaXMsIFwiY2xpY2suX3N1Ym1pdCBrZXlwcmVzcy5fc3VibWl0XCIsIGZ1bmN0aW9uKCBlICkge1xuXHRcdFx0XHQvLyBOb2RlIG5hbWUgY2hlY2sgYXZvaWRzIGEgVk1MLXJlbGF0ZWQgY3Jhc2ggaW4gSUUgKCM5ODA3KVxuXHRcdFx0XHR2YXIgZWxlbSA9IGUudGFyZ2V0LFxuXHRcdFx0XHRcdGZvcm0gPSBqUXVlcnkubm9kZU5hbWUoIGVsZW0sIFwiaW5wdXRcIiApIHx8IGpRdWVyeS5ub2RlTmFtZSggZWxlbSwgXCJidXR0b25cIiApID8gZWxlbS5mb3JtIDogdW5kZWZpbmVkO1xuXHRcdFx0XHRpZiAoIGZvcm0gJiYgIWpRdWVyeS5fZGF0YSggZm9ybSwgXCJzdWJtaXRCdWJibGVzXCIgKSApIHtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQuYWRkKCBmb3JtLCBcInN1Ym1pdC5fc3VibWl0XCIsIGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdFx0XHRcdGV2ZW50Ll9zdWJtaXRfYnViYmxlID0gdHJ1ZTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRqUXVlcnkuX2RhdGEoIGZvcm0sIFwic3VibWl0QnViYmxlc1wiLCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdFx0Ly8gcmV0dXJuIHVuZGVmaW5lZCBzaW5jZSB3ZSBkb24ndCBuZWVkIGFuIGV2ZW50IGxpc3RlbmVyXG5cdFx0fSxcblxuXHRcdHBvc3REaXNwYXRjaDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0Ly8gSWYgZm9ybSB3YXMgc3VibWl0dGVkIGJ5IHRoZSB1c2VyLCBidWJibGUgdGhlIGV2ZW50IHVwIHRoZSB0cmVlXG5cdFx0XHRpZiAoIGV2ZW50Ll9zdWJtaXRfYnViYmxlICkge1xuXHRcdFx0XHRkZWxldGUgZXZlbnQuX3N1Ym1pdF9idWJibGU7XG5cdFx0XHRcdGlmICggdGhpcy5wYXJlbnROb2RlICYmICFldmVudC5pc1RyaWdnZXIgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnNpbXVsYXRlKCBcInN1Ym1pdFwiLCB0aGlzLnBhcmVudE5vZGUsIGV2ZW50LCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0dGVhcmRvd246IGZ1bmN0aW9uKCkge1xuXHRcdFx0Ly8gT25seSBuZWVkIHRoaXMgZm9yIGRlbGVnYXRlZCBmb3JtIHN1Ym1pdCBldmVudHNcblx0XHRcdGlmICggalF1ZXJ5Lm5vZGVOYW1lKCB0aGlzLCBcImZvcm1cIiApICkge1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJlbW92ZSBkZWxlZ2F0ZWQgaGFuZGxlcnM7IGNsZWFuRGF0YSBldmVudHVhbGx5IHJlYXBzIHN1Ym1pdCBoYW5kbGVycyBhdHRhY2hlZCBhYm92ZVxuXHRcdFx0alF1ZXJ5LmV2ZW50LnJlbW92ZSggdGhpcywgXCIuX3N1Ym1pdFwiICk7XG5cdFx0fVxuXHR9O1xufVxuXG4vLyBJRSBjaGFuZ2UgZGVsZWdhdGlvbiBhbmQgY2hlY2tib3gvcmFkaW8gZml4XG5pZiAoICFzdXBwb3J0LmNoYW5nZUJ1YmJsZXMgKSB7XG5cblx0alF1ZXJ5LmV2ZW50LnNwZWNpYWwuY2hhbmdlID0ge1xuXG5cdFx0c2V0dXA6IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRpZiAoIHJmb3JtRWxlbXMudGVzdCggdGhpcy5ub2RlTmFtZSApICkge1xuXHRcdFx0XHQvLyBJRSBkb2Vzbid0IGZpcmUgY2hhbmdlIG9uIGEgY2hlY2svcmFkaW8gdW50aWwgYmx1cjsgdHJpZ2dlciBpdCBvbiBjbGlja1xuXHRcdFx0XHQvLyBhZnRlciBhIHByb3BlcnR5Y2hhbmdlLiBFYXQgdGhlIGJsdXItY2hhbmdlIGluIHNwZWNpYWwuY2hhbmdlLmhhbmRsZS5cblx0XHRcdFx0Ly8gVGhpcyBzdGlsbCBmaXJlcyBvbmNoYW5nZSBhIHNlY29uZCB0aW1lIGZvciBjaGVjay9yYWRpbyBhZnRlciBibHVyLlxuXHRcdFx0XHRpZiAoIHRoaXMudHlwZSA9PT0gXCJjaGVja2JveFwiIHx8IHRoaXMudHlwZSA9PT0gXCJyYWRpb1wiICkge1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5hZGQoIHRoaXMsIFwicHJvcGVydHljaGFuZ2UuX2NoYW5nZVwiLCBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIGV2ZW50Lm9yaWdpbmFsRXZlbnQucHJvcGVydHlOYW1lID09PSBcImNoZWNrZWRcIiApIHtcblx0XHRcdFx0XHRcdFx0dGhpcy5fanVzdF9jaGFuZ2VkID0gdHJ1ZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQuYWRkKCB0aGlzLCBcImNsaWNrLl9jaGFuZ2VcIiwgZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0XHRcdFx0aWYgKCB0aGlzLl9qdXN0X2NoYW5nZWQgJiYgIWV2ZW50LmlzVHJpZ2dlciApIHtcblx0XHRcdFx0XHRcdFx0dGhpcy5fanVzdF9jaGFuZ2VkID0gZmFsc2U7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHQvLyBBbGxvdyB0cmlnZ2VyZWQsIHNpbXVsYXRlZCBjaGFuZ2UgZXZlbnRzICgjMTE1MDApXG5cdFx0XHRcdFx0XHRqUXVlcnkuZXZlbnQuc2ltdWxhdGUoIFwiY2hhbmdlXCIsIHRoaXMsIGV2ZW50LCB0cnVlICk7XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fVxuXHRcdFx0Ly8gRGVsZWdhdGVkIGV2ZW50OyBsYXp5LWFkZCBhIGNoYW5nZSBoYW5kbGVyIG9uIGRlc2NlbmRhbnQgaW5wdXRzXG5cdFx0XHRqUXVlcnkuZXZlbnQuYWRkKCB0aGlzLCBcImJlZm9yZWFjdGl2YXRlLl9jaGFuZ2VcIiwgZnVuY3Rpb24oIGUgKSB7XG5cdFx0XHRcdHZhciBlbGVtID0gZS50YXJnZXQ7XG5cblx0XHRcdFx0aWYgKCByZm9ybUVsZW1zLnRlc3QoIGVsZW0ubm9kZU5hbWUgKSAmJiAhalF1ZXJ5Ll9kYXRhKCBlbGVtLCBcImNoYW5nZUJ1YmJsZXNcIiApICkge1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5hZGQoIGVsZW0sIFwiY2hhbmdlLl9jaGFuZ2VcIiwgZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0XHRcdFx0aWYgKCB0aGlzLnBhcmVudE5vZGUgJiYgIWV2ZW50LmlzU2ltdWxhdGVkICYmICFldmVudC5pc1RyaWdnZXIgKSB7XG5cdFx0XHRcdFx0XHRcdGpRdWVyeS5ldmVudC5zaW11bGF0ZSggXCJjaGFuZ2VcIiwgdGhpcy5wYXJlbnROb2RlLCBldmVudCwgdHJ1ZSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdGpRdWVyeS5fZGF0YSggZWxlbSwgXCJjaGFuZ2VCdWJibGVzXCIsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fSxcblxuXHRcdGhhbmRsZTogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0dmFyIGVsZW0gPSBldmVudC50YXJnZXQ7XG5cblx0XHRcdC8vIFN3YWxsb3cgbmF0aXZlIGNoYW5nZSBldmVudHMgZnJvbSBjaGVja2JveC9yYWRpbywgd2UgYWxyZWFkeSB0cmlnZ2VyZWQgdGhlbSBhYm92ZVxuXHRcdFx0aWYgKCB0aGlzICE9PSBlbGVtIHx8IGV2ZW50LmlzU2ltdWxhdGVkIHx8IGV2ZW50LmlzVHJpZ2dlciB8fCAoZWxlbS50eXBlICE9PSBcInJhZGlvXCIgJiYgZWxlbS50eXBlICE9PSBcImNoZWNrYm94XCIpICkge1xuXHRcdFx0XHRyZXR1cm4gZXZlbnQuaGFuZGxlT2JqLmhhbmRsZXIuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHR0ZWFyZG93bjogZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCB0aGlzLCBcIi5fY2hhbmdlXCIgKTtcblxuXHRcdFx0cmV0dXJuICFyZm9ybUVsZW1zLnRlc3QoIHRoaXMubm9kZU5hbWUgKTtcblx0XHR9XG5cdH07XG59XG5cbi8vIENyZWF0ZSBcImJ1YmJsaW5nXCIgZm9jdXMgYW5kIGJsdXIgZXZlbnRzXG5pZiAoICFzdXBwb3J0LmZvY3VzaW5CdWJibGVzICkge1xuXHRqUXVlcnkuZWFjaCh7IGZvY3VzOiBcImZvY3VzaW5cIiwgYmx1cjogXCJmb2N1c291dFwiIH0sIGZ1bmN0aW9uKCBvcmlnLCBmaXggKSB7XG5cblx0XHQvLyBBdHRhY2ggYSBzaW5nbGUgY2FwdHVyaW5nIGhhbmRsZXIgb24gdGhlIGRvY3VtZW50IHdoaWxlIHNvbWVvbmUgd2FudHMgZm9jdXNpbi9mb2N1c291dFxuXHRcdHZhciBoYW5kbGVyID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0XHRqUXVlcnkuZXZlbnQuc2ltdWxhdGUoIGZpeCwgZXZlbnQudGFyZ2V0LCBqUXVlcnkuZXZlbnQuZml4KCBldmVudCApLCB0cnVlICk7XG5cdFx0XHR9O1xuXG5cdFx0alF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGZpeCBdID0ge1xuXHRcdFx0c2V0dXA6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgZG9jID0gdGhpcy5vd25lckRvY3VtZW50IHx8IHRoaXMsXG5cdFx0XHRcdFx0YXR0YWNoZXMgPSBqUXVlcnkuX2RhdGEoIGRvYywgZml4ICk7XG5cblx0XHRcdFx0aWYgKCAhYXR0YWNoZXMgKSB7XG5cdFx0XHRcdFx0ZG9jLmFkZEV2ZW50TGlzdGVuZXIoIG9yaWcsIGhhbmRsZXIsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRqUXVlcnkuX2RhdGEoIGRvYywgZml4LCAoIGF0dGFjaGVzIHx8IDAgKSArIDEgKTtcblx0XHRcdH0sXG5cdFx0XHR0ZWFyZG93bjogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBkb2MgPSB0aGlzLm93bmVyRG9jdW1lbnQgfHwgdGhpcyxcblx0XHRcdFx0XHRhdHRhY2hlcyA9IGpRdWVyeS5fZGF0YSggZG9jLCBmaXggKSAtIDE7XG5cblx0XHRcdFx0aWYgKCAhYXR0YWNoZXMgKSB7XG5cdFx0XHRcdFx0ZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIoIG9yaWcsIGhhbmRsZXIsIHRydWUgKTtcblx0XHRcdFx0XHRqUXVlcnkuX3JlbW92ZURhdGEoIGRvYywgZml4ICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0alF1ZXJ5Ll9kYXRhKCBkb2MsIGZpeCwgYXR0YWNoZXMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH0pO1xufVxuXG5qUXVlcnkuZm4uZXh0ZW5kKHtcblxuXHRvbjogZnVuY3Rpb24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4sIC8qSU5URVJOQUwqLyBvbmUgKSB7XG5cdFx0dmFyIHR5cGUsIG9yaWdGbjtcblxuXHRcdC8vIFR5cGVzIGNhbiBiZSBhIG1hcCBvZiB0eXBlcy9oYW5kbGVyc1xuXHRcdGlmICggdHlwZW9mIHR5cGVzID09PSBcIm9iamVjdFwiICkge1xuXHRcdFx0Ly8gKCB0eXBlcy1PYmplY3QsIHNlbGVjdG9yLCBkYXRhIClcblx0XHRcdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0XHQvLyAoIHR5cGVzLU9iamVjdCwgZGF0YSApXG5cdFx0XHRcdGRhdGEgPSBkYXRhIHx8IHNlbGVjdG9yO1xuXHRcdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHRcdH1cblx0XHRcdGZvciAoIHR5cGUgaW4gdHlwZXMgKSB7XG5cdFx0XHRcdHRoaXMub24oIHR5cGUsIHNlbGVjdG9yLCBkYXRhLCB0eXBlc1sgdHlwZSBdLCBvbmUgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblxuXHRcdGlmICggZGF0YSA9PSBudWxsICYmIGZuID09IG51bGwgKSB7XG5cdFx0XHQvLyAoIHR5cGVzLCBmbiApXG5cdFx0XHRmbiA9IHNlbGVjdG9yO1xuXHRcdFx0ZGF0YSA9IHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHRcdH0gZWxzZSBpZiAoIGZuID09IG51bGwgKSB7XG5cdFx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdFx0Ly8gKCB0eXBlcywgc2VsZWN0b3IsIGZuIClcblx0XHRcdFx0Zm4gPSBkYXRhO1xuXHRcdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Ly8gKCB0eXBlcywgZGF0YSwgZm4gKVxuXHRcdFx0XHRmbiA9IGRhdGE7XG5cdFx0XHRcdGRhdGEgPSBzZWxlY3Rvcjtcblx0XHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGlmICggZm4gPT09IGZhbHNlICkge1xuXHRcdFx0Zm4gPSByZXR1cm5GYWxzZTtcblx0XHR9IGVsc2UgaWYgKCAhZm4gKSB7XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cblx0XHRpZiAoIG9uZSA9PT0gMSApIHtcblx0XHRcdG9yaWdGbiA9IGZuO1xuXHRcdFx0Zm4gPSBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRcdC8vIENhbiB1c2UgYW4gZW1wdHkgc2V0LCBzaW5jZSBldmVudCBjb250YWlucyB0aGUgaW5mb1xuXHRcdFx0XHRqUXVlcnkoKS5vZmYoIGV2ZW50ICk7XG5cdFx0XHRcdHJldHVybiBvcmlnRm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0fTtcblx0XHRcdC8vIFVzZSBzYW1lIGd1aWQgc28gY2FsbGVyIGNhbiByZW1vdmUgdXNpbmcgb3JpZ0ZuXG5cdFx0XHRmbi5ndWlkID0gb3JpZ0ZuLmd1aWQgfHwgKCBvcmlnRm4uZ3VpZCA9IGpRdWVyeS5ndWlkKysgKTtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQuYWRkKCB0aGlzLCB0eXBlcywgZm4sIGRhdGEsIHNlbGVjdG9yICk7XG5cdFx0fSk7XG5cdH0sXG5cdG9uZTogZnVuY3Rpb24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4sIDEgKTtcblx0fSxcblx0b2ZmOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBmbiApIHtcblx0XHR2YXIgaGFuZGxlT2JqLCB0eXBlO1xuXHRcdGlmICggdHlwZXMgJiYgdHlwZXMucHJldmVudERlZmF1bHQgJiYgdHlwZXMuaGFuZGxlT2JqICkge1xuXHRcdFx0Ly8gKCBldmVudCApICBkaXNwYXRjaGVkIGpRdWVyeS5FdmVudFxuXHRcdFx0aGFuZGxlT2JqID0gdHlwZXMuaGFuZGxlT2JqO1xuXHRcdFx0alF1ZXJ5KCB0eXBlcy5kZWxlZ2F0ZVRhcmdldCApLm9mZihcblx0XHRcdFx0aGFuZGxlT2JqLm5hbWVzcGFjZSA/IGhhbmRsZU9iai5vcmlnVHlwZSArIFwiLlwiICsgaGFuZGxlT2JqLm5hbWVzcGFjZSA6IGhhbmRsZU9iai5vcmlnVHlwZSxcblx0XHRcdFx0aGFuZGxlT2JqLnNlbGVjdG9yLFxuXHRcdFx0XHRoYW5kbGVPYmouaGFuZGxlclxuXHRcdFx0KTtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblx0XHRpZiAoIHR5cGVvZiB0eXBlcyA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRcdC8vICggdHlwZXMtb2JqZWN0IFssIHNlbGVjdG9yXSApXG5cdFx0XHRmb3IgKCB0eXBlIGluIHR5cGVzICkge1xuXHRcdFx0XHR0aGlzLm9mZiggdHlwZSwgc2VsZWN0b3IsIHR5cGVzWyB0eXBlIF0gKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblx0XHRpZiAoIHNlbGVjdG9yID09PSBmYWxzZSB8fCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwiZnVuY3Rpb25cIiApIHtcblx0XHRcdC8vICggdHlwZXMgWywgZm5dIClcblx0XHRcdGZuID0gc2VsZWN0b3I7XG5cdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0aWYgKCBmbiA9PT0gZmFsc2UgKSB7XG5cdFx0XHRmbiA9IHJldHVybkZhbHNlO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnJlbW92ZSggdGhpcywgdHlwZXMsIGZuLCBzZWxlY3RvciApO1xuXHRcdH0pO1xuXHR9LFxuXG5cdHRyaWdnZXI6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggdHlwZSwgZGF0YSwgdGhpcyApO1xuXHRcdH0pO1xuXHR9LFxuXHR0cmlnZ2VySGFuZGxlcjogZnVuY3Rpb24oIHR5cGUsIGRhdGEgKSB7XG5cdFx0dmFyIGVsZW0gPSB0aGlzWzBdO1xuXHRcdGlmICggZWxlbSApIHtcblx0XHRcdHJldHVybiBqUXVlcnkuZXZlbnQudHJpZ2dlciggdHlwZSwgZGF0YSwgZWxlbSwgdHJ1ZSApO1xuXHRcdH1cblx0fVxufSk7XG5cblxuZnVuY3Rpb24gY3JlYXRlU2FmZUZyYWdtZW50KCBkb2N1bWVudCApIHtcblx0dmFyIGxpc3QgPSBub2RlTmFtZXMuc3BsaXQoIFwifFwiICksXG5cdFx0c2FmZUZyYWcgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7XG5cblx0aWYgKCBzYWZlRnJhZy5jcmVhdGVFbGVtZW50ICkge1xuXHRcdHdoaWxlICggbGlzdC5sZW5ndGggKSB7XG5cdFx0XHRzYWZlRnJhZy5jcmVhdGVFbGVtZW50KFxuXHRcdFx0XHRsaXN0LnBvcCgpXG5cdFx0XHQpO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gc2FmZUZyYWc7XG59XG5cbnZhciBub2RlTmFtZXMgPSBcImFiYnJ8YXJ0aWNsZXxhc2lkZXxhdWRpb3xiZGl8Y2FudmFzfGRhdGF8ZGF0YWxpc3R8ZGV0YWlsc3xmaWdjYXB0aW9ufGZpZ3VyZXxmb290ZXJ8XCIgK1xuXHRcdFwiaGVhZGVyfGhncm91cHxtYXJrfG1ldGVyfG5hdnxvdXRwdXR8cHJvZ3Jlc3N8c2VjdGlvbnxzdW1tYXJ5fHRpbWV8dmlkZW9cIixcblx0cmlubGluZWpRdWVyeSA9IC8galF1ZXJ5XFxkKz1cIig/Om51bGx8XFxkKylcIi9nLFxuXHRybm9zaGltY2FjaGUgPSBuZXcgUmVnRXhwKFwiPCg/OlwiICsgbm9kZU5hbWVzICsgXCIpW1xcXFxzLz5dXCIsIFwiaVwiKSxcblx0cmxlYWRpbmdXaGl0ZXNwYWNlID0gL15cXHMrLyxcblx0cnhodG1sVGFnID0gLzwoPyFhcmVhfGJyfGNvbHxlbWJlZHxocnxpbWd8aW5wdXR8bGlua3xtZXRhfHBhcmFtKSgoW1xcdzpdKylbXj5dKilcXC8+L2dpLFxuXHRydGFnTmFtZSA9IC88KFtcXHc6XSspLyxcblx0cnRib2R5ID0gLzx0Ym9keS9pLFxuXHRyaHRtbCA9IC88fCYjP1xcdys7Lyxcblx0cm5vSW5uZXJodG1sID0gLzwoPzpzY3JpcHR8c3R5bGV8bGluaykvaSxcblx0Ly8gY2hlY2tlZD1cImNoZWNrZWRcIiBvciBjaGVja2VkXG5cdHJjaGVja2VkID0gL2NoZWNrZWRcXHMqKD86W149XXw9XFxzKi5jaGVja2VkLikvaSxcblx0cnNjcmlwdFR5cGUgPSAvXiR8XFwvKD86amF2YXxlY21hKXNjcmlwdC9pLFxuXHRyc2NyaXB0VHlwZU1hc2tlZCA9IC9edHJ1ZVxcLyguKikvLFxuXHRyY2xlYW5TY3JpcHQgPSAvXlxccyo8ISg/OlxcW0NEQVRBXFxbfC0tKXwoPzpcXF1cXF18LS0pPlxccyokL2csXG5cblx0Ly8gV2UgaGF2ZSB0byBjbG9zZSB0aGVzZSB0YWdzIHRvIHN1cHBvcnQgWEhUTUwgKCMxMzIwMClcblx0d3JhcE1hcCA9IHtcblx0XHRvcHRpb246IFsgMSwgXCI8c2VsZWN0IG11bHRpcGxlPSdtdWx0aXBsZSc+XCIsIFwiPC9zZWxlY3Q+XCIgXSxcblx0XHRsZWdlbmQ6IFsgMSwgXCI8ZmllbGRzZXQ+XCIsIFwiPC9maWVsZHNldD5cIiBdLFxuXHRcdGFyZWE6IFsgMSwgXCI8bWFwPlwiLCBcIjwvbWFwPlwiIF0sXG5cdFx0cGFyYW06IFsgMSwgXCI8b2JqZWN0PlwiLCBcIjwvb2JqZWN0PlwiIF0sXG5cdFx0dGhlYWQ6IFsgMSwgXCI8dGFibGU+XCIsIFwiPC90YWJsZT5cIiBdLFxuXHRcdHRyOiBbIDIsIFwiPHRhYmxlPjx0Ym9keT5cIiwgXCI8L3Rib2R5PjwvdGFibGU+XCIgXSxcblx0XHRjb2w6IFsgMiwgXCI8dGFibGU+PHRib2R5PjwvdGJvZHk+PGNvbGdyb3VwPlwiLCBcIjwvY29sZ3JvdXA+PC90YWJsZT5cIiBdLFxuXHRcdHRkOiBbIDMsIFwiPHRhYmxlPjx0Ym9keT48dHI+XCIsIFwiPC90cj48L3Rib2R5PjwvdGFibGU+XCIgXSxcblxuXHRcdC8vIElFNi04IGNhbid0IHNlcmlhbGl6ZSBsaW5rLCBzY3JpcHQsIHN0eWxlLCBvciBhbnkgaHRtbDUgKE5vU2NvcGUpIHRhZ3MsXG5cdFx0Ly8gdW5sZXNzIHdyYXBwZWQgaW4gYSBkaXYgd2l0aCBub24tYnJlYWtpbmcgY2hhcmFjdGVycyBpbiBmcm9udCBvZiBpdC5cblx0XHRfZGVmYXVsdDogc3VwcG9ydC5odG1sU2VyaWFsaXplID8gWyAwLCBcIlwiLCBcIlwiIF0gOiBbIDEsIFwiWDxkaXY+XCIsIFwiPC9kaXY+XCIgIF1cblx0fSxcblx0c2FmZUZyYWdtZW50ID0gY3JlYXRlU2FmZUZyYWdtZW50KCBkb2N1bWVudCApLFxuXHRmcmFnbWVudERpdiA9IHNhZmVGcmFnbWVudC5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSApO1xuXG53cmFwTWFwLm9wdGdyb3VwID0gd3JhcE1hcC5vcHRpb247XG53cmFwTWFwLnRib2R5ID0gd3JhcE1hcC50Zm9vdCA9IHdyYXBNYXAuY29sZ3JvdXAgPSB3cmFwTWFwLmNhcHRpb24gPSB3cmFwTWFwLnRoZWFkO1xud3JhcE1hcC50aCA9IHdyYXBNYXAudGQ7XG5cbmZ1bmN0aW9uIGdldEFsbCggY29udGV4dCwgdGFnICkge1xuXHR2YXIgZWxlbXMsIGVsZW0sXG5cdFx0aSA9IDAsXG5cdFx0Zm91bmQgPSB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gc3RydW5kZWZpbmVkID8gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnIHx8IFwiKlwiICkgOlxuXHRcdFx0dHlwZW9mIGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCAhPT0gc3RydW5kZWZpbmVkID8gY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCB0YWcgfHwgXCIqXCIgKSA6XG5cdFx0XHR1bmRlZmluZWQ7XG5cblx0aWYgKCAhZm91bmQgKSB7XG5cdFx0Zm9yICggZm91bmQgPSBbXSwgZWxlbXMgPSBjb250ZXh0LmNoaWxkTm9kZXMgfHwgY29udGV4dDsgKGVsZW0gPSBlbGVtc1tpXSkgIT0gbnVsbDsgaSsrICkge1xuXHRcdFx0aWYgKCAhdGFnIHx8IGpRdWVyeS5ub2RlTmFtZSggZWxlbSwgdGFnICkgKSB7XG5cdFx0XHRcdGZvdW5kLnB1c2goIGVsZW0gKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggZm91bmQsIGdldEFsbCggZWxlbSwgdGFnICkgKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gdGFnID09PSB1bmRlZmluZWQgfHwgdGFnICYmIGpRdWVyeS5ub2RlTmFtZSggY29udGV4dCwgdGFnICkgP1xuXHRcdGpRdWVyeS5tZXJnZSggWyBjb250ZXh0IF0sIGZvdW5kICkgOlxuXHRcdGZvdW5kO1xufVxuXG4vLyBVc2VkIGluIGJ1aWxkRnJhZ21lbnQsIGZpeGVzIHRoZSBkZWZhdWx0Q2hlY2tlZCBwcm9wZXJ0eVxuZnVuY3Rpb24gZml4RGVmYXVsdENoZWNrZWQoIGVsZW0gKSB7XG5cdGlmICggcmNoZWNrYWJsZVR5cGUudGVzdCggZWxlbS50eXBlICkgKSB7XG5cdFx0ZWxlbS5kZWZhdWx0Q2hlY2tlZCA9IGVsZW0uY2hlY2tlZDtcblx0fVxufVxuXG4vLyBTdXBwb3J0OiBJRTw4XG4vLyBNYW5pcHVsYXRpbmcgdGFibGVzIHJlcXVpcmVzIGEgdGJvZHlcbmZ1bmN0aW9uIG1hbmlwdWxhdGlvblRhcmdldCggZWxlbSwgY29udGVudCApIHtcblx0cmV0dXJuIGpRdWVyeS5ub2RlTmFtZSggZWxlbSwgXCJ0YWJsZVwiICkgJiZcblx0XHRqUXVlcnkubm9kZU5hbWUoIGNvbnRlbnQubm9kZVR5cGUgIT09IDExID8gY29udGVudCA6IGNvbnRlbnQuZmlyc3RDaGlsZCwgXCJ0clwiICkgP1xuXG5cdFx0ZWxlbS5nZXRFbGVtZW50c0J5VGFnTmFtZShcInRib2R5XCIpWzBdIHx8XG5cdFx0XHRlbGVtLmFwcGVuZENoaWxkKCBlbGVtLm93bmVyRG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRib2R5XCIpICkgOlxuXHRcdGVsZW07XG59XG5cbi8vIFJlcGxhY2UvcmVzdG9yZSB0aGUgdHlwZSBhdHRyaWJ1dGUgb2Ygc2NyaXB0IGVsZW1lbnRzIGZvciBzYWZlIERPTSBtYW5pcHVsYXRpb25cbmZ1bmN0aW9uIGRpc2FibGVTY3JpcHQoIGVsZW0gKSB7XG5cdGVsZW0udHlwZSA9IChqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBcInR5cGVcIiApICE9PSBudWxsKSArIFwiL1wiICsgZWxlbS50eXBlO1xuXHRyZXR1cm4gZWxlbTtcbn1cbmZ1bmN0aW9uIHJlc3RvcmVTY3JpcHQoIGVsZW0gKSB7XG5cdHZhciBtYXRjaCA9IHJzY3JpcHRUeXBlTWFza2VkLmV4ZWMoIGVsZW0udHlwZSApO1xuXHRpZiAoIG1hdGNoICkge1xuXHRcdGVsZW0udHlwZSA9IG1hdGNoWzFdO1xuXHR9IGVsc2Uge1xuXHRcdGVsZW0ucmVtb3ZlQXR0cmlidXRlKFwidHlwZVwiKTtcblx0fVxuXHRyZXR1cm4gZWxlbTtcbn1cblxuLy8gTWFyayBzY3JpcHRzIGFzIGhhdmluZyBhbHJlYWR5IGJlZW4gZXZhbHVhdGVkXG5mdW5jdGlvbiBzZXRHbG9iYWxFdmFsKCBlbGVtcywgcmVmRWxlbWVudHMgKSB7XG5cdHZhciBlbGVtLFxuXHRcdGkgPSAwO1xuXHRmb3IgKCA7IChlbGVtID0gZWxlbXNbaV0pICE9IG51bGw7IGkrKyApIHtcblx0XHRqUXVlcnkuX2RhdGEoIGVsZW0sIFwiZ2xvYmFsRXZhbFwiLCAhcmVmRWxlbWVudHMgfHwgalF1ZXJ5Ll9kYXRhKCByZWZFbGVtZW50c1tpXSwgXCJnbG9iYWxFdmFsXCIgKSApO1xuXHR9XG59XG5cbmZ1bmN0aW9uIGNsb25lQ29weUV2ZW50KCBzcmMsIGRlc3QgKSB7XG5cblx0aWYgKCBkZXN0Lm5vZGVUeXBlICE9PSAxIHx8ICFqUXVlcnkuaGFzRGF0YSggc3JjICkgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0dmFyIHR5cGUsIGksIGwsXG5cdFx0b2xkRGF0YSA9IGpRdWVyeS5fZGF0YSggc3JjICksXG5cdFx0Y3VyRGF0YSA9IGpRdWVyeS5fZGF0YSggZGVzdCwgb2xkRGF0YSApLFxuXHRcdGV2ZW50cyA9IG9sZERhdGEuZXZlbnRzO1xuXG5cdGlmICggZXZlbnRzICkge1xuXHRcdGRlbGV0ZSBjdXJEYXRhLmhhbmRsZTtcblx0XHRjdXJEYXRhLmV2ZW50cyA9IHt9O1xuXG5cdFx0Zm9yICggdHlwZSBpbiBldmVudHMgKSB7XG5cdFx0XHRmb3IgKCBpID0gMCwgbCA9IGV2ZW50c1sgdHlwZSBdLmxlbmd0aDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0alF1ZXJ5LmV2ZW50LmFkZCggZGVzdCwgdHlwZSwgZXZlbnRzWyB0eXBlIF1bIGkgXSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIG1ha2UgdGhlIGNsb25lZCBwdWJsaWMgZGF0YSBvYmplY3QgYSBjb3B5IGZyb20gdGhlIG9yaWdpbmFsXG5cdGlmICggY3VyRGF0YS5kYXRhICkge1xuXHRcdGN1ckRhdGEuZGF0YSA9IGpRdWVyeS5leHRlbmQoIHt9LCBjdXJEYXRhLmRhdGEgKTtcblx0fVxufVxuXG5mdW5jdGlvbiBmaXhDbG9uZU5vZGVJc3N1ZXMoIHNyYywgZGVzdCApIHtcblx0dmFyIG5vZGVOYW1lLCBlLCBkYXRhO1xuXG5cdC8vIFdlIGRvIG5vdCBuZWVkIHRvIGRvIGFueXRoaW5nIGZvciBub24tRWxlbWVudHNcblx0aWYgKCBkZXN0Lm5vZGVUeXBlICE9PSAxICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdG5vZGVOYW1lID0gZGVzdC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXG5cdC8vIElFNi04IGNvcGllcyBldmVudHMgYm91bmQgdmlhIGF0dGFjaEV2ZW50IHdoZW4gdXNpbmcgY2xvbmVOb2RlLlxuXHRpZiAoICFzdXBwb3J0Lm5vQ2xvbmVFdmVudCAmJiBkZXN0WyBqUXVlcnkuZXhwYW5kbyBdICkge1xuXHRcdGRhdGEgPSBqUXVlcnkuX2RhdGEoIGRlc3QgKTtcblxuXHRcdGZvciAoIGUgaW4gZGF0YS5ldmVudHMgKSB7XG5cdFx0XHRqUXVlcnkucmVtb3ZlRXZlbnQoIGRlc3QsIGUsIGRhdGEuaGFuZGxlICk7XG5cdFx0fVxuXG5cdFx0Ly8gRXZlbnQgZGF0YSBnZXRzIHJlZmVyZW5jZWQgaW5zdGVhZCBvZiBjb3BpZWQgaWYgdGhlIGV4cGFuZG8gZ2V0cyBjb3BpZWQgdG9vXG5cdFx0ZGVzdC5yZW1vdmVBdHRyaWJ1dGUoIGpRdWVyeS5leHBhbmRvICk7XG5cdH1cblxuXHQvLyBJRSBibGFua3MgY29udGVudHMgd2hlbiBjbG9uaW5nIHNjcmlwdHMsIGFuZCB0cmllcyB0byBldmFsdWF0ZSBuZXdseS1zZXQgdGV4dFxuXHRpZiAoIG5vZGVOYW1lID09PSBcInNjcmlwdFwiICYmIGRlc3QudGV4dCAhPT0gc3JjLnRleHQgKSB7XG5cdFx0ZGlzYWJsZVNjcmlwdCggZGVzdCApLnRleHQgPSBzcmMudGV4dDtcblx0XHRyZXN0b3JlU2NyaXB0KCBkZXN0ICk7XG5cblx0Ly8gSUU2LTEwIGltcHJvcGVybHkgY2xvbmVzIGNoaWxkcmVuIG9mIG9iamVjdCBlbGVtZW50cyB1c2luZyBjbGFzc2lkLlxuXHQvLyBJRTEwIHRocm93cyBOb01vZGlmaWNhdGlvbkFsbG93ZWRFcnJvciBpZiBwYXJlbnQgaXMgbnVsbCwgIzEyMTMyLlxuXHR9IGVsc2UgaWYgKCBub2RlTmFtZSA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRpZiAoIGRlc3QucGFyZW50Tm9kZSApIHtcblx0XHRcdGRlc3Qub3V0ZXJIVE1MID0gc3JjLm91dGVySFRNTDtcblx0XHR9XG5cblx0XHQvLyBUaGlzIHBhdGggYXBwZWFycyB1bmF2b2lkYWJsZSBmb3IgSUU5LiBXaGVuIGNsb25pbmcgYW4gb2JqZWN0XG5cdFx0Ly8gZWxlbWVudCBpbiBJRTksIHRoZSBvdXRlckhUTUwgc3RyYXRlZ3kgYWJvdmUgaXMgbm90IHN1ZmZpY2llbnQuXG5cdFx0Ly8gSWYgdGhlIHNyYyBoYXMgaW5uZXJIVE1MIGFuZCB0aGUgZGVzdGluYXRpb24gZG9lcyBub3QsXG5cdFx0Ly8gY29weSB0aGUgc3JjLmlubmVySFRNTCBpbnRvIHRoZSBkZXN0LmlubmVySFRNTC4gIzEwMzI0XG5cdFx0aWYgKCBzdXBwb3J0Lmh0bWw1Q2xvbmUgJiYgKCBzcmMuaW5uZXJIVE1MICYmICFqUXVlcnkudHJpbShkZXN0LmlubmVySFRNTCkgKSApIHtcblx0XHRcdGRlc3QuaW5uZXJIVE1MID0gc3JjLmlubmVySFRNTDtcblx0XHR9XG5cblx0fSBlbHNlIGlmICggbm9kZU5hbWUgPT09IFwiaW5wdXRcIiAmJiByY2hlY2thYmxlVHlwZS50ZXN0KCBzcmMudHlwZSApICkge1xuXHRcdC8vIElFNi04IGZhaWxzIHRvIHBlcnNpc3QgdGhlIGNoZWNrZWQgc3RhdGUgb2YgYSBjbG9uZWQgY2hlY2tib3hcblx0XHQvLyBvciByYWRpbyBidXR0b24uIFdvcnNlLCBJRTYtNyBmYWlsIHRvIGdpdmUgdGhlIGNsb25lZCBlbGVtZW50XG5cdFx0Ly8gYSBjaGVja2VkIGFwcGVhcmFuY2UgaWYgdGhlIGRlZmF1bHRDaGVja2VkIHZhbHVlIGlzbid0IGFsc28gc2V0XG5cblx0XHRkZXN0LmRlZmF1bHRDaGVja2VkID0gZGVzdC5jaGVja2VkID0gc3JjLmNoZWNrZWQ7XG5cblx0XHQvLyBJRTYtNyBnZXQgY29uZnVzZWQgYW5kIGVuZCB1cCBzZXR0aW5nIHRoZSB2YWx1ZSBvZiBhIGNsb25lZFxuXHRcdC8vIGNoZWNrYm94L3JhZGlvIGJ1dHRvbiB0byBhbiBlbXB0eSBzdHJpbmcgaW5zdGVhZCBvZiBcIm9uXCJcblx0XHRpZiAoIGRlc3QudmFsdWUgIT09IHNyYy52YWx1ZSApIHtcblx0XHRcdGRlc3QudmFsdWUgPSBzcmMudmFsdWU7XG5cdFx0fVxuXG5cdC8vIElFNi04IGZhaWxzIHRvIHJldHVybiB0aGUgc2VsZWN0ZWQgb3B0aW9uIHRvIHRoZSBkZWZhdWx0IHNlbGVjdGVkXG5cdC8vIHN0YXRlIHdoZW4gY2xvbmluZyBvcHRpb25zXG5cdH0gZWxzZSBpZiAoIG5vZGVOYW1lID09PSBcIm9wdGlvblwiICkge1xuXHRcdGRlc3QuZGVmYXVsdFNlbGVjdGVkID0gZGVzdC5zZWxlY3RlZCA9IHNyYy5kZWZhdWx0U2VsZWN0ZWQ7XG5cblx0Ly8gSUU2LTggZmFpbHMgdG8gc2V0IHRoZSBkZWZhdWx0VmFsdWUgdG8gdGhlIGNvcnJlY3QgdmFsdWUgd2hlblxuXHQvLyBjbG9uaW5nIG90aGVyIHR5cGVzIG9mIGlucHV0IGZpZWxkc1xuXHR9IGVsc2UgaWYgKCBub2RlTmFtZSA9PT0gXCJpbnB1dFwiIHx8IG5vZGVOYW1lID09PSBcInRleHRhcmVhXCIgKSB7XG5cdFx0ZGVzdC5kZWZhdWx0VmFsdWUgPSBzcmMuZGVmYXVsdFZhbHVlO1xuXHR9XG59XG5cbmpRdWVyeS5leHRlbmQoe1xuXHRjbG9uZTogZnVuY3Rpb24oIGVsZW0sIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuXHRcdHZhciBkZXN0RWxlbWVudHMsIG5vZGUsIGNsb25lLCBpLCBzcmNFbGVtZW50cyxcblx0XHRcdGluUGFnZSA9IGpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICk7XG5cblx0XHRpZiAoIHN1cHBvcnQuaHRtbDVDbG9uZSB8fCBqUXVlcnkuaXNYTUxEb2MoZWxlbSkgfHwgIXJub3NoaW1jYWNoZS50ZXN0KCBcIjxcIiArIGVsZW0ubm9kZU5hbWUgKyBcIj5cIiApICkge1xuXHRcdFx0Y2xvbmUgPSBlbGVtLmNsb25lTm9kZSggdHJ1ZSApO1xuXG5cdFx0Ly8gSUU8PTggZG9lcyBub3QgcHJvcGVybHkgY2xvbmUgZGV0YWNoZWQsIHVua25vd24gZWxlbWVudCBub2Rlc1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRmcmFnbWVudERpdi5pbm5lckhUTUwgPSBlbGVtLm91dGVySFRNTDtcblx0XHRcdGZyYWdtZW50RGl2LnJlbW92ZUNoaWxkKCBjbG9uZSA9IGZyYWdtZW50RGl2LmZpcnN0Q2hpbGQgKTtcblx0XHR9XG5cblx0XHRpZiAoICghc3VwcG9ydC5ub0Nsb25lRXZlbnQgfHwgIXN1cHBvcnQubm9DbG9uZUNoZWNrZWQpICYmXG5cdFx0XHRcdChlbGVtLm5vZGVUeXBlID09PSAxIHx8IGVsZW0ubm9kZVR5cGUgPT09IDExKSAmJiAhalF1ZXJ5LmlzWE1MRG9jKGVsZW0pICkge1xuXG5cdFx0XHQvLyBXZSBlc2NoZXcgU2l6emxlIGhlcmUgZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnM6IGh0dHA6Ly9qc3BlcmYuY29tL2dldGFsbC12cy1zaXp6bGUvMlxuXHRcdFx0ZGVzdEVsZW1lbnRzID0gZ2V0QWxsKCBjbG9uZSApO1xuXHRcdFx0c3JjRWxlbWVudHMgPSBnZXRBbGwoIGVsZW0gKTtcblxuXHRcdFx0Ly8gRml4IGFsbCBJRSBjbG9uaW5nIGlzc3Vlc1xuXHRcdFx0Zm9yICggaSA9IDA7IChub2RlID0gc3JjRWxlbWVudHNbaV0pICE9IG51bGw7ICsraSApIHtcblx0XHRcdFx0Ly8gRW5zdXJlIHRoYXQgdGhlIGRlc3RpbmF0aW9uIG5vZGUgaXMgbm90IG51bGw7IEZpeGVzICM5NTg3XG5cdFx0XHRcdGlmICggZGVzdEVsZW1lbnRzW2ldICkge1xuXHRcdFx0XHRcdGZpeENsb25lTm9kZUlzc3Vlcyggbm9kZSwgZGVzdEVsZW1lbnRzW2ldICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDb3B5IHRoZSBldmVudHMgZnJvbSB0aGUgb3JpZ2luYWwgdG8gdGhlIGNsb25lXG5cdFx0aWYgKCBkYXRhQW5kRXZlbnRzICkge1xuXHRcdFx0aWYgKCBkZWVwRGF0YUFuZEV2ZW50cyApIHtcblx0XHRcdFx0c3JjRWxlbWVudHMgPSBzcmNFbGVtZW50cyB8fCBnZXRBbGwoIGVsZW0gKTtcblx0XHRcdFx0ZGVzdEVsZW1lbnRzID0gZGVzdEVsZW1lbnRzIHx8IGdldEFsbCggY2xvbmUgKTtcblxuXHRcdFx0XHRmb3IgKCBpID0gMDsgKG5vZGUgPSBzcmNFbGVtZW50c1tpXSkgIT0gbnVsbDsgaSsrICkge1xuXHRcdFx0XHRcdGNsb25lQ29weUV2ZW50KCBub2RlLCBkZXN0RWxlbWVudHNbaV0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y2xvbmVDb3B5RXZlbnQoIGVsZW0sIGNsb25lICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gUHJlc2VydmUgc2NyaXB0IGV2YWx1YXRpb24gaGlzdG9yeVxuXHRcdGRlc3RFbGVtZW50cyA9IGdldEFsbCggY2xvbmUsIFwic2NyaXB0XCIgKTtcblx0XHRpZiAoIGRlc3RFbGVtZW50cy5sZW5ndGggPiAwICkge1xuXHRcdFx0c2V0R2xvYmFsRXZhbCggZGVzdEVsZW1lbnRzLCAhaW5QYWdlICYmIGdldEFsbCggZWxlbSwgXCJzY3JpcHRcIiApICk7XG5cdFx0fVxuXG5cdFx0ZGVzdEVsZW1lbnRzID0gc3JjRWxlbWVudHMgPSBub2RlID0gbnVsbDtcblxuXHRcdC8vIFJldHVybiB0aGUgY2xvbmVkIHNldFxuXHRcdHJldHVybiBjbG9uZTtcblx0fSxcblxuXHRidWlsZEZyYWdtZW50OiBmdW5jdGlvbiggZWxlbXMsIGNvbnRleHQsIHNjcmlwdHMsIHNlbGVjdGlvbiApIHtcblx0XHR2YXIgaiwgZWxlbSwgY29udGFpbnMsXG5cdFx0XHR0bXAsIHRhZywgdGJvZHksIHdyYXAsXG5cdFx0XHRsID0gZWxlbXMubGVuZ3RoLFxuXG5cdFx0XHQvLyBFbnN1cmUgYSBzYWZlIGZyYWdtZW50XG5cdFx0XHRzYWZlID0gY3JlYXRlU2FmZUZyYWdtZW50KCBjb250ZXh0ICksXG5cblx0XHRcdG5vZGVzID0gW10sXG5cdFx0XHRpID0gMDtcblxuXHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdGVsZW0gPSBlbGVtc1sgaSBdO1xuXG5cdFx0XHRpZiAoIGVsZW0gfHwgZWxlbSA9PT0gMCApIHtcblxuXHRcdFx0XHQvLyBBZGQgbm9kZXMgZGlyZWN0bHlcblx0XHRcdFx0aWYgKCBqUXVlcnkudHlwZSggZWxlbSApID09PSBcIm9iamVjdFwiICkge1xuXHRcdFx0XHRcdGpRdWVyeS5tZXJnZSggbm9kZXMsIGVsZW0ubm9kZVR5cGUgPyBbIGVsZW0gXSA6IGVsZW0gKTtcblxuXHRcdFx0XHQvLyBDb252ZXJ0IG5vbi1odG1sIGludG8gYSB0ZXh0IG5vZGVcblx0XHRcdFx0fSBlbHNlIGlmICggIXJodG1sLnRlc3QoIGVsZW0gKSApIHtcblx0XHRcdFx0XHRub2Rlcy5wdXNoKCBjb250ZXh0LmNyZWF0ZVRleHROb2RlKCBlbGVtICkgKTtcblxuXHRcdFx0XHQvLyBDb252ZXJ0IGh0bWwgaW50byBET00gbm9kZXNcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR0bXAgPSB0bXAgfHwgc2FmZS5hcHBlbmRDaGlsZCggY29udGV4dC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpICk7XG5cblx0XHRcdFx0XHQvLyBEZXNlcmlhbGl6ZSBhIHN0YW5kYXJkIHJlcHJlc2VudGF0aW9uXG5cdFx0XHRcdFx0dGFnID0gKHJ0YWdOYW1lLmV4ZWMoIGVsZW0gKSB8fCBbIFwiXCIsIFwiXCIgXSlbIDEgXS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0XHRcdHdyYXAgPSB3cmFwTWFwWyB0YWcgXSB8fCB3cmFwTWFwLl9kZWZhdWx0O1xuXG5cdFx0XHRcdFx0dG1wLmlubmVySFRNTCA9IHdyYXBbMV0gKyBlbGVtLnJlcGxhY2UoIHJ4aHRtbFRhZywgXCI8JDE+PC8kMj5cIiApICsgd3JhcFsyXTtcblxuXHRcdFx0XHRcdC8vIERlc2NlbmQgdGhyb3VnaCB3cmFwcGVycyB0byB0aGUgcmlnaHQgY29udGVudFxuXHRcdFx0XHRcdGogPSB3cmFwWzBdO1xuXHRcdFx0XHRcdHdoaWxlICggai0tICkge1xuXHRcdFx0XHRcdFx0dG1wID0gdG1wLmxhc3RDaGlsZDtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBNYW51YWxseSBhZGQgbGVhZGluZyB3aGl0ZXNwYWNlIHJlbW92ZWQgYnkgSUVcblx0XHRcdFx0XHRpZiAoICFzdXBwb3J0LmxlYWRpbmdXaGl0ZXNwYWNlICYmIHJsZWFkaW5nV2hpdGVzcGFjZS50ZXN0KCBlbGVtICkgKSB7XG5cdFx0XHRcdFx0XHRub2Rlcy5wdXNoKCBjb250ZXh0LmNyZWF0ZVRleHROb2RlKCBybGVhZGluZ1doaXRlc3BhY2UuZXhlYyggZWxlbSApWzBdICkgKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBSZW1vdmUgSUUncyBhdXRvaW5zZXJ0ZWQgPHRib2R5PiBmcm9tIHRhYmxlIGZyYWdtZW50c1xuXHRcdFx0XHRcdGlmICggIXN1cHBvcnQudGJvZHkgKSB7XG5cblx0XHRcdFx0XHRcdC8vIFN0cmluZyB3YXMgYSA8dGFibGU+LCAqbWF5KiBoYXZlIHNwdXJpb3VzIDx0Ym9keT5cblx0XHRcdFx0XHRcdGVsZW0gPSB0YWcgPT09IFwidGFibGVcIiAmJiAhcnRib2R5LnRlc3QoIGVsZW0gKSA/XG5cdFx0XHRcdFx0XHRcdHRtcC5maXJzdENoaWxkIDpcblxuXHRcdFx0XHRcdFx0XHQvLyBTdHJpbmcgd2FzIGEgYmFyZSA8dGhlYWQ+IG9yIDx0Zm9vdD5cblx0XHRcdFx0XHRcdFx0d3JhcFsxXSA9PT0gXCI8dGFibGU+XCIgJiYgIXJ0Ym9keS50ZXN0KCBlbGVtICkgP1xuXHRcdFx0XHRcdFx0XHRcdHRtcCA6XG5cdFx0XHRcdFx0XHRcdFx0MDtcblxuXHRcdFx0XHRcdFx0aiA9IGVsZW0gJiYgZWxlbS5jaGlsZE5vZGVzLmxlbmd0aDtcblx0XHRcdFx0XHRcdHdoaWxlICggai0tICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5ub2RlTmFtZSggKHRib2R5ID0gZWxlbS5jaGlsZE5vZGVzW2pdKSwgXCJ0Ym9keVwiICkgJiYgIXRib2R5LmNoaWxkTm9kZXMubGVuZ3RoICkge1xuXHRcdFx0XHRcdFx0XHRcdGVsZW0ucmVtb3ZlQ2hpbGQoIHRib2R5ICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRqUXVlcnkubWVyZ2UoIG5vZGVzLCB0bXAuY2hpbGROb2RlcyApO1xuXG5cdFx0XHRcdFx0Ly8gRml4ICMxMjM5MiBmb3IgV2ViS2l0IGFuZCBJRSA+IDlcblx0XHRcdFx0XHR0bXAudGV4dENvbnRlbnQgPSBcIlwiO1xuXG5cdFx0XHRcdFx0Ly8gRml4ICMxMjM5MiBmb3Igb2xkSUVcblx0XHRcdFx0XHR3aGlsZSAoIHRtcC5maXJzdENoaWxkICkge1xuXHRcdFx0XHRcdFx0dG1wLnJlbW92ZUNoaWxkKCB0bXAuZmlyc3RDaGlsZCApO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFJlbWVtYmVyIHRoZSB0b3AtbGV2ZWwgY29udGFpbmVyIGZvciBwcm9wZXIgY2xlYW51cFxuXHRcdFx0XHRcdHRtcCA9IHNhZmUubGFzdENoaWxkO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gRml4ICMxMTM1NjogQ2xlYXIgZWxlbWVudHMgZnJvbSBmcmFnbWVudFxuXHRcdGlmICggdG1wICkge1xuXHRcdFx0c2FmZS5yZW1vdmVDaGlsZCggdG1wICk7XG5cdFx0fVxuXG5cdFx0Ly8gUmVzZXQgZGVmYXVsdENoZWNrZWQgZm9yIGFueSByYWRpb3MgYW5kIGNoZWNrYm94ZXNcblx0XHQvLyBhYm91dCB0byBiZSBhcHBlbmRlZCB0byB0aGUgRE9NIGluIElFIDYvNyAoIzgwNjApXG5cdFx0aWYgKCAhc3VwcG9ydC5hcHBlbmRDaGVja2VkICkge1xuXHRcdFx0alF1ZXJ5LmdyZXAoIGdldEFsbCggbm9kZXMsIFwiaW5wdXRcIiApLCBmaXhEZWZhdWx0Q2hlY2tlZCApO1xuXHRcdH1cblxuXHRcdGkgPSAwO1xuXHRcdHdoaWxlICggKGVsZW0gPSBub2Rlc1sgaSsrIF0pICkge1xuXG5cdFx0XHQvLyAjNDA4NyAtIElmIG9yaWdpbiBhbmQgZGVzdGluYXRpb24gZWxlbWVudHMgYXJlIHRoZSBzYW1lLCBhbmQgdGhpcyBpc1xuXHRcdFx0Ly8gdGhhdCBlbGVtZW50LCBkbyBub3QgZG8gYW55dGhpbmdcblx0XHRcdGlmICggc2VsZWN0aW9uICYmIGpRdWVyeS5pbkFycmF5KCBlbGVtLCBzZWxlY3Rpb24gKSAhPT0gLTEgKSB7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHRjb250YWlucyA9IGpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICk7XG5cblx0XHRcdC8vIEFwcGVuZCB0byBmcmFnbWVudFxuXHRcdFx0dG1wID0gZ2V0QWxsKCBzYWZlLmFwcGVuZENoaWxkKCBlbGVtICksIFwic2NyaXB0XCIgKTtcblxuXHRcdFx0Ly8gUHJlc2VydmUgc2NyaXB0IGV2YWx1YXRpb24gaGlzdG9yeVxuXHRcdFx0aWYgKCBjb250YWlucyApIHtcblx0XHRcdFx0c2V0R2xvYmFsRXZhbCggdG1wICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENhcHR1cmUgZXhlY3V0YWJsZXNcblx0XHRcdGlmICggc2NyaXB0cyApIHtcblx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdHdoaWxlICggKGVsZW0gPSB0bXBbIGorKyBdKSApIHtcblx0XHRcdFx0XHRpZiAoIHJzY3JpcHRUeXBlLnRlc3QoIGVsZW0udHlwZSB8fCBcIlwiICkgKSB7XG5cdFx0XHRcdFx0XHRzY3JpcHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHR0bXAgPSBudWxsO1xuXG5cdFx0cmV0dXJuIHNhZmU7XG5cdH0sXG5cblx0Y2xlYW5EYXRhOiBmdW5jdGlvbiggZWxlbXMsIC8qIGludGVybmFsICovIGFjY2VwdERhdGEgKSB7XG5cdFx0dmFyIGVsZW0sIHR5cGUsIGlkLCBkYXRhLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRpbnRlcm5hbEtleSA9IGpRdWVyeS5leHBhbmRvLFxuXHRcdFx0Y2FjaGUgPSBqUXVlcnkuY2FjaGUsXG5cdFx0XHRkZWxldGVFeHBhbmRvID0gc3VwcG9ydC5kZWxldGVFeHBhbmRvLFxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsO1xuXG5cdFx0Zm9yICggOyAoZWxlbSA9IGVsZW1zW2ldKSAhPSBudWxsOyBpKysgKSB7XG5cdFx0XHRpZiAoIGFjY2VwdERhdGEgfHwgalF1ZXJ5LmFjY2VwdERhdGEoIGVsZW0gKSApIHtcblxuXHRcdFx0XHRpZCA9IGVsZW1bIGludGVybmFsS2V5IF07XG5cdFx0XHRcdGRhdGEgPSBpZCAmJiBjYWNoZVsgaWQgXTtcblxuXHRcdFx0XHRpZiAoIGRhdGEgKSB7XG5cdFx0XHRcdFx0aWYgKCBkYXRhLmV2ZW50cyApIHtcblx0XHRcdFx0XHRcdGZvciAoIHR5cGUgaW4gZGF0YS5ldmVudHMgKSB7XG5cdFx0XHRcdFx0XHRcdGlmICggc3BlY2lhbFsgdHlwZSBdICkge1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIGVsZW0sIHR5cGUgKTtcblxuXHRcdFx0XHRcdFx0XHQvLyBUaGlzIGlzIGEgc2hvcnRjdXQgdG8gYXZvaWQgalF1ZXJ5LmV2ZW50LnJlbW92ZSdzIG92ZXJoZWFkXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LnJlbW92ZUV2ZW50KCBlbGVtLCB0eXBlLCBkYXRhLmhhbmRsZSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gUmVtb3ZlIGNhY2hlIG9ubHkgaWYgaXQgd2FzIG5vdCBhbHJlYWR5IHJlbW92ZWQgYnkgalF1ZXJ5LmV2ZW50LnJlbW92ZVxuXHRcdFx0XHRcdGlmICggY2FjaGVbIGlkIF0gKSB7XG5cblx0XHRcdFx0XHRcdGRlbGV0ZSBjYWNoZVsgaWQgXTtcblxuXHRcdFx0XHRcdFx0Ly8gSUUgZG9lcyBub3QgYWxsb3cgdXMgdG8gZGVsZXRlIGV4cGFuZG8gcHJvcGVydGllcyBmcm9tIG5vZGVzLFxuXHRcdFx0XHRcdFx0Ly8gbm9yIGRvZXMgaXQgaGF2ZSBhIHJlbW92ZUF0dHJpYnV0ZSBmdW5jdGlvbiBvbiBEb2N1bWVudCBub2Rlcztcblx0XHRcdFx0XHRcdC8vIHdlIG11c3QgaGFuZGxlIGFsbCBvZiB0aGVzZSBjYXNlc1xuXHRcdFx0XHRcdFx0aWYgKCBkZWxldGVFeHBhbmRvICkge1xuXHRcdFx0XHRcdFx0XHRkZWxldGUgZWxlbVsgaW50ZXJuYWxLZXkgXTtcblxuXHRcdFx0XHRcdFx0fSBlbHNlIGlmICggdHlwZW9mIGVsZW0ucmVtb3ZlQXR0cmlidXRlICE9PSBzdHJ1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0XHRcdGVsZW0ucmVtb3ZlQXR0cmlidXRlKCBpbnRlcm5hbEtleSApO1xuXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRlbGVtWyBpbnRlcm5hbEtleSBdID0gbnVsbDtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0ZGVsZXRlZElkcy5wdXNoKCBpZCApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxufSk7XG5cbmpRdWVyeS5mbi5leHRlbmQoe1xuXHR0ZXh0OiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0cmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRqUXVlcnkudGV4dCggdGhpcyApIDpcblx0XHRcdFx0dGhpcy5lbXB0eSgpLmFwcGVuZCggKCB0aGlzWzBdICYmIHRoaXNbMF0ub3duZXJEb2N1bWVudCB8fCBkb2N1bWVudCApLmNyZWF0ZVRleHROb2RlKCB2YWx1ZSApICk7XG5cdFx0fSwgbnVsbCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggKTtcblx0fSxcblxuXHRhcHBlbmQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmRvbU1hbmlwKCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdHZhciB0YXJnZXQgPSBtYW5pcHVsYXRpb25UYXJnZXQoIHRoaXMsIGVsZW0gKTtcblx0XHRcdFx0dGFyZ2V0LmFwcGVuZENoaWxkKCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH0sXG5cblx0cHJlcGVuZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuZG9tTWFuaXAoIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0dmFyIHRhcmdldCA9IG1hbmlwdWxhdGlvblRhcmdldCggdGhpcywgZWxlbSApO1xuXHRcdFx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0YXJnZXQuZmlyc3RDaGlsZCApO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9LFxuXG5cdGJlZm9yZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuZG9tTWFuaXAoIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0dGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSggZWxlbSwgdGhpcyApO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHR9LFxuXG5cdGFmdGVyOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5kb21NYW5pcCggYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5wYXJlbnROb2RlICkge1xuXHRcdFx0XHR0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0aGlzLm5leHRTaWJsaW5nICk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH0sXG5cblx0cmVtb3ZlOiBmdW5jdGlvbiggc2VsZWN0b3IsIGtlZXBEYXRhIC8qIEludGVybmFsIFVzZSBPbmx5ICovICkge1xuXHRcdHZhciBlbGVtLFxuXHRcdFx0ZWxlbXMgPSBzZWxlY3RvciA/IGpRdWVyeS5maWx0ZXIoIHNlbGVjdG9yLCB0aGlzICkgOiB0aGlzLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRmb3IgKCA7IChlbGVtID0gZWxlbXNbaV0pICE9IG51bGw7IGkrKyApIHtcblxuXHRcdFx0aWYgKCAha2VlcERhdGEgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCBlbGVtICkgKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBlbGVtLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdGlmICgga2VlcERhdGEgJiYgalF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKSApIHtcblx0XHRcdFx0XHRzZXRHbG9iYWxFdmFsKCBnZXRBbGwoIGVsZW0sIFwic2NyaXB0XCIgKSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGVsZW0ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggZWxlbSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdGVtcHR5OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZWxlbSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Zm9yICggOyAoZWxlbSA9IHRoaXNbaV0pICE9IG51bGw7IGkrKyApIHtcblx0XHRcdC8vIFJlbW92ZSBlbGVtZW50IG5vZGVzIGFuZCBwcmV2ZW50IG1lbW9yeSBsZWFrc1xuXHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIGVsZW0sIGZhbHNlICkgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUmVtb3ZlIGFueSByZW1haW5pbmcgbm9kZXNcblx0XHRcdHdoaWxlICggZWxlbS5maXJzdENoaWxkICkge1xuXHRcdFx0XHRlbGVtLnJlbW92ZUNoaWxkKCBlbGVtLmZpcnN0Q2hpbGQgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgdGhpcyBpcyBhIHNlbGVjdCwgZW5zdXJlIHRoYXQgaXQgZGlzcGxheXMgZW1wdHkgKCMxMjMzNilcblx0XHRcdC8vIFN1cHBvcnQ6IElFPDlcblx0XHRcdGlmICggZWxlbS5vcHRpb25zICYmIGpRdWVyeS5ub2RlTmFtZSggZWxlbSwgXCJzZWxlY3RcIiApICkge1xuXHRcdFx0XHRlbGVtLm9wdGlvbnMubGVuZ3RoID0gMDtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24oIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuXHRcdGRhdGFBbmRFdmVudHMgPSBkYXRhQW5kRXZlbnRzID09IG51bGwgPyBmYWxzZSA6IGRhdGFBbmRFdmVudHM7XG5cdFx0ZGVlcERhdGFBbmRFdmVudHMgPSBkZWVwRGF0YUFuZEV2ZW50cyA9PSBudWxsID8gZGF0YUFuZEV2ZW50cyA6IGRlZXBEYXRhQW5kRXZlbnRzO1xuXG5cdFx0cmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5jbG9uZSggdGhpcywgZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKTtcblx0XHR9KTtcblx0fSxcblxuXHRodG1sOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0dmFyIGVsZW0gPSB0aGlzWyAwIF0gfHwge30sXG5cdFx0XHRcdGkgPSAwLFxuXHRcdFx0XHRsID0gdGhpcy5sZW5ndGg7XG5cblx0XHRcdGlmICggdmFsdWUgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0cmV0dXJuIGVsZW0ubm9kZVR5cGUgPT09IDEgP1xuXHRcdFx0XHRcdGVsZW0uaW5uZXJIVE1MLnJlcGxhY2UoIHJpbmxpbmVqUXVlcnksIFwiXCIgKSA6XG5cdFx0XHRcdFx0dW5kZWZpbmVkO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZWUgaWYgd2UgY2FuIHRha2UgYSBzaG9ydGN1dCBhbmQganVzdCB1c2UgaW5uZXJIVE1MXG5cdFx0XHRpZiAoIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJiAhcm5vSW5uZXJodG1sLnRlc3QoIHZhbHVlICkgJiZcblx0XHRcdFx0KCBzdXBwb3J0Lmh0bWxTZXJpYWxpemUgfHwgIXJub3NoaW1jYWNoZS50ZXN0KCB2YWx1ZSApICApICYmXG5cdFx0XHRcdCggc3VwcG9ydC5sZWFkaW5nV2hpdGVzcGFjZSB8fCAhcmxlYWRpbmdXaGl0ZXNwYWNlLnRlc3QoIHZhbHVlICkgKSAmJlxuXHRcdFx0XHQhd3JhcE1hcFsgKHJ0YWdOYW1lLmV4ZWMoIHZhbHVlICkgfHwgWyBcIlwiLCBcIlwiIF0pWyAxIF0udG9Mb3dlckNhc2UoKSBdICkge1xuXG5cdFx0XHRcdHZhbHVlID0gdmFsdWUucmVwbGFjZSggcnhodG1sVGFnLCBcIjwkMT48LyQyPlwiICk7XG5cblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRmb3IgKDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0XHRcdC8vIFJlbW92ZSBlbGVtZW50IG5vZGVzIGFuZCBwcmV2ZW50IG1lbW9yeSBsZWFrc1xuXHRcdFx0XHRcdFx0ZWxlbSA9IHRoaXNbaV0gfHwge307XG5cdFx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggZWxlbSwgZmFsc2UgKSApO1xuXHRcdFx0XHRcdFx0XHRlbGVtLmlubmVySFRNTCA9IHZhbHVlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGVsZW0gPSAwO1xuXG5cdFx0XHRcdC8vIElmIHVzaW5nIGlubmVySFRNTCB0aHJvd3MgYW4gZXhjZXB0aW9uLCB1c2UgdGhlIGZhbGxiYWNrIG1ldGhvZFxuXHRcdFx0XHR9IGNhdGNoKGUpIHt9XG5cdFx0XHR9XG5cblx0XHRcdGlmICggZWxlbSApIHtcblx0XHRcdFx0dGhpcy5lbXB0eSgpLmFwcGVuZCggdmFsdWUgKTtcblx0XHRcdH1cblx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCApO1xuXHR9LFxuXG5cdHJlcGxhY2VXaXRoOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgYXJnID0gYXJndW1lbnRzWyAwIF07XG5cblx0XHQvLyBNYWtlIHRoZSBjaGFuZ2VzLCByZXBsYWNpbmcgZWFjaCBjb250ZXh0IGVsZW1lbnQgd2l0aCB0aGUgbmV3IGNvbnRlbnRcblx0XHR0aGlzLmRvbU1hbmlwKCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0YXJnID0gdGhpcy5wYXJlbnROb2RlO1xuXG5cdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIHRoaXMgKSApO1xuXG5cdFx0XHRpZiAoIGFyZyApIHtcblx0XHRcdFx0YXJnLnJlcGxhY2VDaGlsZCggZWxlbSwgdGhpcyApO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0Ly8gRm9yY2UgcmVtb3ZhbCBpZiB0aGVyZSB3YXMgbm8gbmV3IGNvbnRlbnQgKGUuZy4sIGZyb20gZW1wdHkgYXJndW1lbnRzKVxuXHRcdHJldHVybiBhcmcgJiYgKGFyZy5sZW5ndGggfHwgYXJnLm5vZGVUeXBlKSA/IHRoaXMgOiB0aGlzLnJlbW92ZSgpO1xuXHR9LFxuXG5cdGRldGFjaDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLnJlbW92ZSggc2VsZWN0b3IsIHRydWUgKTtcblx0fSxcblxuXHRkb21NYW5pcDogZnVuY3Rpb24oIGFyZ3MsIGNhbGxiYWNrICkge1xuXG5cdFx0Ly8gRmxhdHRlbiBhbnkgbmVzdGVkIGFycmF5c1xuXHRcdGFyZ3MgPSBjb25jYXQuYXBwbHkoIFtdLCBhcmdzICk7XG5cblx0XHR2YXIgZmlyc3QsIG5vZGUsIGhhc1NjcmlwdHMsXG5cdFx0XHRzY3JpcHRzLCBkb2MsIGZyYWdtZW50LFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRsID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRzZXQgPSB0aGlzLFxuXHRcdFx0aU5vQ2xvbmUgPSBsIC0gMSxcblx0XHRcdHZhbHVlID0gYXJnc1swXSxcblx0XHRcdGlzRnVuY3Rpb24gPSBqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKTtcblxuXHRcdC8vIFdlIGNhbid0IGNsb25lTm9kZSBmcmFnbWVudHMgdGhhdCBjb250YWluIGNoZWNrZWQsIGluIFdlYktpdFxuXHRcdGlmICggaXNGdW5jdGlvbiB8fFxuXHRcdFx0XHQoIGwgPiAxICYmIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJlxuXHRcdFx0XHRcdCFzdXBwb3J0LmNoZWNrQ2xvbmUgJiYgcmNoZWNrZWQudGVzdCggdmFsdWUgKSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiggaW5kZXggKSB7XG5cdFx0XHRcdHZhciBzZWxmID0gc2V0LmVxKCBpbmRleCApO1xuXHRcdFx0XHRpZiAoIGlzRnVuY3Rpb24gKSB7XG5cdFx0XHRcdFx0YXJnc1swXSA9IHZhbHVlLmNhbGwoIHRoaXMsIGluZGV4LCBzZWxmLmh0bWwoKSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHNlbGYuZG9tTWFuaXAoIGFyZ3MsIGNhbGxiYWNrICk7XG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHRpZiAoIGwgKSB7XG5cdFx0XHRmcmFnbWVudCA9IGpRdWVyeS5idWlsZEZyYWdtZW50KCBhcmdzLCB0aGlzWyAwIF0ub3duZXJEb2N1bWVudCwgZmFsc2UsIHRoaXMgKTtcblx0XHRcdGZpcnN0ID0gZnJhZ21lbnQuZmlyc3RDaGlsZDtcblxuXHRcdFx0aWYgKCBmcmFnbWVudC5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMSApIHtcblx0XHRcdFx0ZnJhZ21lbnQgPSBmaXJzdDtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBmaXJzdCApIHtcblx0XHRcdFx0c2NyaXB0cyA9IGpRdWVyeS5tYXAoIGdldEFsbCggZnJhZ21lbnQsIFwic2NyaXB0XCIgKSwgZGlzYWJsZVNjcmlwdCApO1xuXHRcdFx0XHRoYXNTY3JpcHRzID0gc2NyaXB0cy5sZW5ndGg7XG5cblx0XHRcdFx0Ly8gVXNlIHRoZSBvcmlnaW5hbCBmcmFnbWVudCBmb3IgdGhlIGxhc3QgaXRlbSBpbnN0ZWFkIG9mIHRoZSBmaXJzdCBiZWNhdXNlIGl0IGNhbiBlbmQgdXBcblx0XHRcdFx0Ly8gYmVpbmcgZW1wdGllZCBpbmNvcnJlY3RseSBpbiBjZXJ0YWluIHNpdHVhdGlvbnMgKCM4MDcwKS5cblx0XHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRcdG5vZGUgPSBmcmFnbWVudDtcblxuXHRcdFx0XHRcdGlmICggaSAhPT0gaU5vQ2xvbmUgKSB7XG5cdFx0XHRcdFx0XHRub2RlID0galF1ZXJ5LmNsb25lKCBub2RlLCB0cnVlLCB0cnVlICk7XG5cblx0XHRcdFx0XHRcdC8vIEtlZXAgcmVmZXJlbmNlcyB0byBjbG9uZWQgc2NyaXB0cyBmb3IgbGF0ZXIgcmVzdG9yYXRpb25cblx0XHRcdFx0XHRcdGlmICggaGFzU2NyaXB0cyApIHtcblx0XHRcdFx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBzY3JpcHRzLCBnZXRBbGwoIG5vZGUsIFwic2NyaXB0XCIgKSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGNhbGxiYWNrLmNhbGwoIHRoaXNbaV0sIG5vZGUsIGkgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggaGFzU2NyaXB0cyApIHtcblx0XHRcdFx0XHRkb2MgPSBzY3JpcHRzWyBzY3JpcHRzLmxlbmd0aCAtIDEgXS5vd25lckRvY3VtZW50O1xuXG5cdFx0XHRcdFx0Ly8gUmVlbmFibGUgc2NyaXB0c1xuXHRcdFx0XHRcdGpRdWVyeS5tYXAoIHNjcmlwdHMsIHJlc3RvcmVTY3JpcHQgKTtcblxuXHRcdFx0XHRcdC8vIEV2YWx1YXRlIGV4ZWN1dGFibGUgc2NyaXB0cyBvbiBmaXJzdCBkb2N1bWVudCBpbnNlcnRpb25cblx0XHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGhhc1NjcmlwdHM7IGkrKyApIHtcblx0XHRcdFx0XHRcdG5vZGUgPSBzY3JpcHRzWyBpIF07XG5cdFx0XHRcdFx0XHRpZiAoIHJzY3JpcHRUeXBlLnRlc3QoIG5vZGUudHlwZSB8fCBcIlwiICkgJiZcblx0XHRcdFx0XHRcdFx0IWpRdWVyeS5fZGF0YSggbm9kZSwgXCJnbG9iYWxFdmFsXCIgKSAmJiBqUXVlcnkuY29udGFpbnMoIGRvYywgbm9kZSApICkge1xuXG5cdFx0XHRcdFx0XHRcdGlmICggbm9kZS5zcmMgKSB7XG5cdFx0XHRcdFx0XHRcdFx0Ly8gT3B0aW9uYWwgQUpBWCBkZXBlbmRlbmN5LCBidXQgd29uJ3QgcnVuIHNjcmlwdHMgaWYgbm90IHByZXNlbnRcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5fZXZhbFVybCApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5fZXZhbFVybCggbm9kZS5zcmMgKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5Lmdsb2JhbEV2YWwoICggbm9kZS50ZXh0IHx8IG5vZGUudGV4dENvbnRlbnQgfHwgbm9kZS5pbm5lckhUTUwgfHwgXCJcIiApLnJlcGxhY2UoIHJjbGVhblNjcmlwdCwgXCJcIiApICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBGaXggIzExODA5OiBBdm9pZCBsZWFraW5nIG1lbW9yeVxuXHRcdFx0XHRmcmFnbWVudCA9IGZpcnN0ID0gbnVsbDtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fVxufSk7XG5cbmpRdWVyeS5lYWNoKHtcblx0YXBwZW5kVG86IFwiYXBwZW5kXCIsXG5cdHByZXBlbmRUbzogXCJwcmVwZW5kXCIsXG5cdGluc2VydEJlZm9yZTogXCJiZWZvcmVcIixcblx0aW5zZXJ0QWZ0ZXI6IFwiYWZ0ZXJcIixcblx0cmVwbGFjZUFsbDogXCJyZXBsYWNlV2l0aFwiXG59LCBmdW5jdGlvbiggbmFtZSwgb3JpZ2luYWwgKSB7XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHZhciBlbGVtcyxcblx0XHRcdGkgPSAwLFxuXHRcdFx0cmV0ID0gW10sXG5cdFx0XHRpbnNlcnQgPSBqUXVlcnkoIHNlbGVjdG9yICksXG5cdFx0XHRsYXN0ID0gaW5zZXJ0Lmxlbmd0aCAtIDE7XG5cblx0XHRmb3IgKCA7IGkgPD0gbGFzdDsgaSsrICkge1xuXHRcdFx0ZWxlbXMgPSBpID09PSBsYXN0ID8gdGhpcyA6IHRoaXMuY2xvbmUodHJ1ZSk7XG5cdFx0XHRqUXVlcnkoIGluc2VydFtpXSApWyBvcmlnaW5hbCBdKCBlbGVtcyApO1xuXG5cdFx0XHQvLyBNb2Rlcm4gYnJvd3NlcnMgY2FuIGFwcGx5IGpRdWVyeSBjb2xsZWN0aW9ucyBhcyBhcnJheXMsIGJ1dCBvbGRJRSBuZWVkcyBhIC5nZXQoKVxuXHRcdFx0cHVzaC5hcHBseSggcmV0LCBlbGVtcy5nZXQoKSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggcmV0ICk7XG5cdH07XG59KTtcblxuXG52YXIgaWZyYW1lLFxuXHRlbGVtZGlzcGxheSA9IHt9O1xuXG4vKipcbiAqIFJldHJpZXZlIHRoZSBhY3R1YWwgZGlzcGxheSBvZiBhIGVsZW1lbnRcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lIG5vZGVOYW1lIG9mIHRoZSBlbGVtZW50XG4gKiBAcGFyYW0ge09iamVjdH0gZG9jIERvY3VtZW50IG9iamVjdFxuICovXG4vLyBDYWxsZWQgb25seSBmcm9tIHdpdGhpbiBkZWZhdWx0RGlzcGxheVxuZnVuY3Rpb24gYWN0dWFsRGlzcGxheSggbmFtZSwgZG9jICkge1xuXHR2YXIgc3R5bGUsXG5cdFx0ZWxlbSA9IGpRdWVyeSggZG9jLmNyZWF0ZUVsZW1lbnQoIG5hbWUgKSApLmFwcGVuZFRvKCBkb2MuYm9keSApLFxuXG5cdFx0Ly8gZ2V0RGVmYXVsdENvbXB1dGVkU3R5bGUgbWlnaHQgYmUgcmVsaWFibHkgdXNlZCBvbmx5IG9uIGF0dGFjaGVkIGVsZW1lbnRcblx0XHRkaXNwbGF5ID0gd2luZG93LmdldERlZmF1bHRDb21wdXRlZFN0eWxlICYmICggc3R5bGUgPSB3aW5kb3cuZ2V0RGVmYXVsdENvbXB1dGVkU3R5bGUoIGVsZW1bIDAgXSApICkgP1xuXG5cdFx0XHQvLyBVc2Ugb2YgdGhpcyBtZXRob2QgaXMgYSB0ZW1wb3JhcnkgZml4IChtb3JlIGxpa2Ugb3B0bWl6YXRpb24pIHVudGlsIHNvbWV0aGluZyBiZXR0ZXIgY29tZXMgYWxvbmcsXG5cdFx0XHQvLyBzaW5jZSBpdCB3YXMgcmVtb3ZlZCBmcm9tIHNwZWNpZmljYXRpb24gYW5kIHN1cHBvcnRlZCBvbmx5IGluIEZGXG5cdFx0XHRzdHlsZS5kaXNwbGF5IDogalF1ZXJ5LmNzcyggZWxlbVsgMCBdLCBcImRpc3BsYXlcIiApO1xuXG5cdC8vIFdlIGRvbid0IGhhdmUgYW55IGRhdGEgc3RvcmVkIG9uIHRoZSBlbGVtZW50LFxuXHQvLyBzbyB1c2UgXCJkZXRhY2hcIiBtZXRob2QgYXMgZmFzdCB3YXkgdG8gZ2V0IHJpZCBvZiB0aGUgZWxlbWVudFxuXHRlbGVtLmRldGFjaCgpO1xuXG5cdHJldHVybiBkaXNwbGF5O1xufVxuXG4vKipcbiAqIFRyeSB0byBkZXRlcm1pbmUgdGhlIGRlZmF1bHQgZGlzcGxheSB2YWx1ZSBvZiBhbiBlbGVtZW50XG4gKiBAcGFyYW0ge1N0cmluZ30gbm9kZU5hbWVcbiAqL1xuZnVuY3Rpb24gZGVmYXVsdERpc3BsYXkoIG5vZGVOYW1lICkge1xuXHR2YXIgZG9jID0gZG9jdW1lbnQsXG5cdFx0ZGlzcGxheSA9IGVsZW1kaXNwbGF5WyBub2RlTmFtZSBdO1xuXG5cdGlmICggIWRpc3BsYXkgKSB7XG5cdFx0ZGlzcGxheSA9IGFjdHVhbERpc3BsYXkoIG5vZGVOYW1lLCBkb2MgKTtcblxuXHRcdC8vIElmIHRoZSBzaW1wbGUgd2F5IGZhaWxzLCByZWFkIGZyb20gaW5zaWRlIGFuIGlmcmFtZVxuXHRcdGlmICggZGlzcGxheSA9PT0gXCJub25lXCIgfHwgIWRpc3BsYXkgKSB7XG5cblx0XHRcdC8vIFVzZSB0aGUgYWxyZWFkeS1jcmVhdGVkIGlmcmFtZSBpZiBwb3NzaWJsZVxuXHRcdFx0aWZyYW1lID0gKGlmcmFtZSB8fCBqUXVlcnkoIFwiPGlmcmFtZSBmcmFtZWJvcmRlcj0nMCcgd2lkdGg9JzAnIGhlaWdodD0nMCcvPlwiICkpLmFwcGVuZFRvKCBkb2MuZG9jdW1lbnRFbGVtZW50ICk7XG5cblx0XHRcdC8vIEFsd2F5cyB3cml0ZSBhIG5ldyBIVE1MIHNrZWxldG9uIHNvIFdlYmtpdCBhbmQgRmlyZWZveCBkb24ndCBjaG9rZSBvbiByZXVzZVxuXHRcdFx0ZG9jID0gKCBpZnJhbWVbIDAgXS5jb250ZW50V2luZG93IHx8IGlmcmFtZVsgMCBdLmNvbnRlbnREb2N1bWVudCApLmRvY3VtZW50O1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRVxuXHRcdFx0ZG9jLndyaXRlKCk7XG5cdFx0XHRkb2MuY2xvc2UoKTtcblxuXHRcdFx0ZGlzcGxheSA9IGFjdHVhbERpc3BsYXkoIG5vZGVOYW1lLCBkb2MgKTtcblx0XHRcdGlmcmFtZS5kZXRhY2goKTtcblx0XHR9XG5cblx0XHQvLyBTdG9yZSB0aGUgY29ycmVjdCBkZWZhdWx0IGRpc3BsYXlcblx0XHRlbGVtZGlzcGxheVsgbm9kZU5hbWUgXSA9IGRpc3BsYXk7XG5cdH1cblxuXHRyZXR1cm4gZGlzcGxheTtcbn1cblxuXG4oZnVuY3Rpb24oKSB7XG5cdHZhciBzaHJpbmtXcmFwQmxvY2tzVmFsO1xuXG5cdHN1cHBvcnQuc2hyaW5rV3JhcEJsb2NrcyA9IGZ1bmN0aW9uKCkge1xuXHRcdGlmICggc2hyaW5rV3JhcEJsb2Nrc1ZhbCAhPSBudWxsICkge1xuXHRcdFx0cmV0dXJuIHNocmlua1dyYXBCbG9ja3NWYWw7XG5cdFx0fVxuXG5cdFx0Ly8gV2lsbCBiZSBjaGFuZ2VkIGxhdGVyIGlmIG5lZWRlZC5cblx0XHRzaHJpbmtXcmFwQmxvY2tzVmFsID0gZmFsc2U7XG5cblx0XHQvLyBNaW5pZmllZDogdmFyIGIsYyxkXG5cdFx0dmFyIGRpdiwgYm9keSwgY29udGFpbmVyO1xuXG5cdFx0Ym9keSA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCBcImJvZHlcIiApWyAwIF07XG5cdFx0aWYgKCAhYm9keSB8fCAhYm9keS5zdHlsZSApIHtcblx0XHRcdC8vIFRlc3QgZmlyZWQgdG9vIGVhcmx5IG9yIGluIGFuIHVuc3VwcG9ydGVkIGVudmlyb25tZW50LCBleGl0LlxuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIFNldHVwXG5cdFx0ZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApO1xuXHRcdGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKTtcblx0XHRjb250YWluZXIuc3R5bGUuY3NzVGV4dCA9IFwicG9zaXRpb246YWJzb2x1dGU7Ym9yZGVyOjA7d2lkdGg6MDtoZWlnaHQ6MDt0b3A6MDtsZWZ0Oi05OTk5cHhcIjtcblx0XHRib2R5LmFwcGVuZENoaWxkKCBjb250YWluZXIgKS5hcHBlbmRDaGlsZCggZGl2ICk7XG5cblx0XHQvLyBTdXBwb3J0OiBJRTZcblx0XHQvLyBDaGVjayBpZiBlbGVtZW50cyB3aXRoIGxheW91dCBzaHJpbmstd3JhcCB0aGVpciBjaGlsZHJlblxuXHRcdGlmICggdHlwZW9mIGRpdi5zdHlsZS56b29tICE9PSBzdHJ1bmRlZmluZWQgKSB7XG5cdFx0XHQvLyBSZXNldCBDU1M6IGJveC1zaXppbmc7IGRpc3BsYXk7IG1hcmdpbjsgYm9yZGVyXG5cdFx0XHRkaXYuc3R5bGUuY3NzVGV4dCA9XG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3g8MjksIEFuZHJvaWQgMi4zXG5cdFx0XHRcdC8vIFZlbmRvci1wcmVmaXggYm94LXNpemluZ1xuXHRcdFx0XHRcIi13ZWJraXQtYm94LXNpemluZzpjb250ZW50LWJveDstbW96LWJveC1zaXppbmc6Y29udGVudC1ib3g7XCIgK1xuXHRcdFx0XHRcImJveC1zaXppbmc6Y29udGVudC1ib3g7ZGlzcGxheTpibG9jazttYXJnaW46MDtib3JkZXI6MDtcIiArXG5cdFx0XHRcdFwicGFkZGluZzoxcHg7d2lkdGg6MXB4O3pvb206MVwiO1xuXHRcdFx0ZGl2LmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkgKS5zdHlsZS53aWR0aCA9IFwiNXB4XCI7XG5cdFx0XHRzaHJpbmtXcmFwQmxvY2tzVmFsID0gZGl2Lm9mZnNldFdpZHRoICE9PSAzO1xuXHRcdH1cblxuXHRcdGJvZHkucmVtb3ZlQ2hpbGQoIGNvbnRhaW5lciApO1xuXG5cdFx0cmV0dXJuIHNocmlua1dyYXBCbG9ja3NWYWw7XG5cdH07XG5cbn0pKCk7XG52YXIgcm1hcmdpbiA9ICgvXm1hcmdpbi8pO1xuXG52YXIgcm51bW5vbnB4ID0gbmV3IFJlZ0V4cCggXCJeKFwiICsgcG51bSArIFwiKSg/IXB4KVthLXolXSskXCIsIFwiaVwiICk7XG5cblxuXG52YXIgZ2V0U3R5bGVzLCBjdXJDU1MsXG5cdHJwb3NpdGlvbiA9IC9eKHRvcHxyaWdodHxib3R0b218bGVmdCkkLztcblxuaWYgKCB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSApIHtcblx0Z2V0U3R5bGVzID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGVsZW0ub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlKCBlbGVtLCBudWxsICk7XG5cdH07XG5cblx0Y3VyQ1NTID0gZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGNvbXB1dGVkICkge1xuXHRcdHZhciB3aWR0aCwgbWluV2lkdGgsIG1heFdpZHRoLCByZXQsXG5cdFx0XHRzdHlsZSA9IGVsZW0uc3R5bGU7XG5cblx0XHRjb21wdXRlZCA9IGNvbXB1dGVkIHx8IGdldFN0eWxlcyggZWxlbSApO1xuXG5cdFx0Ly8gZ2V0UHJvcGVydHlWYWx1ZSBpcyBvbmx5IG5lZWRlZCBmb3IgLmNzcygnZmlsdGVyJykgaW4gSUU5LCBzZWUgIzEyNTM3XG5cdFx0cmV0ID0gY29tcHV0ZWQgPyBjb21wdXRlZC5nZXRQcm9wZXJ0eVZhbHVlKCBuYW1lICkgfHwgY29tcHV0ZWRbIG5hbWUgXSA6IHVuZGVmaW5lZDtcblxuXHRcdGlmICggY29tcHV0ZWQgKSB7XG5cblx0XHRcdGlmICggcmV0ID09PSBcIlwiICYmICFqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApICkge1xuXHRcdFx0XHRyZXQgPSBqUXVlcnkuc3R5bGUoIGVsZW0sIG5hbWUgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQSB0cmlidXRlIHRvIHRoZSBcImF3ZXNvbWUgaGFjayBieSBEZWFuIEVkd2FyZHNcIlxuXHRcdFx0Ly8gQ2hyb21lIDwgMTcgYW5kIFNhZmFyaSA1LjAgdXNlcyBcImNvbXB1dGVkIHZhbHVlXCIgaW5zdGVhZCBvZiBcInVzZWQgdmFsdWVcIiBmb3IgbWFyZ2luLXJpZ2h0XG5cdFx0XHQvLyBTYWZhcmkgNS4xLjcgKGF0IGxlYXN0KSByZXR1cm5zIHBlcmNlbnRhZ2UgZm9yIGEgbGFyZ2VyIHNldCBvZiB2YWx1ZXMsIGJ1dCB3aWR0aCBzZWVtcyB0byBiZSByZWxpYWJseSBwaXhlbHNcblx0XHRcdC8vIHRoaXMgaXMgYWdhaW5zdCB0aGUgQ1NTT00gZHJhZnQgc3BlYzogaHR0cDovL2Rldi53My5vcmcvY3Nzd2cvY3Nzb20vI3Jlc29sdmVkLXZhbHVlc1xuXHRcdFx0aWYgKCBybnVtbm9ucHgudGVzdCggcmV0ICkgJiYgcm1hcmdpbi50ZXN0KCBuYW1lICkgKSB7XG5cblx0XHRcdFx0Ly8gUmVtZW1iZXIgdGhlIG9yaWdpbmFsIHZhbHVlc1xuXHRcdFx0XHR3aWR0aCA9IHN0eWxlLndpZHRoO1xuXHRcdFx0XHRtaW5XaWR0aCA9IHN0eWxlLm1pbldpZHRoO1xuXHRcdFx0XHRtYXhXaWR0aCA9IHN0eWxlLm1heFdpZHRoO1xuXG5cdFx0XHRcdC8vIFB1dCBpbiB0aGUgbmV3IHZhbHVlcyB0byBnZXQgYSBjb21wdXRlZCB2YWx1ZSBvdXRcblx0XHRcdFx0c3R5bGUubWluV2lkdGggPSBzdHlsZS5tYXhXaWR0aCA9IHN0eWxlLndpZHRoID0gcmV0O1xuXHRcdFx0XHRyZXQgPSBjb21wdXRlZC53aWR0aDtcblxuXHRcdFx0XHQvLyBSZXZlcnQgdGhlIGNoYW5nZWQgdmFsdWVzXG5cdFx0XHRcdHN0eWxlLndpZHRoID0gd2lkdGg7XG5cdFx0XHRcdHN0eWxlLm1pbldpZHRoID0gbWluV2lkdGg7XG5cdFx0XHRcdHN0eWxlLm1heFdpZHRoID0gbWF4V2lkdGg7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gU3VwcG9ydDogSUVcblx0XHQvLyBJRSByZXR1cm5zIHpJbmRleCB2YWx1ZSBhcyBhbiBpbnRlZ2VyLlxuXHRcdHJldHVybiByZXQgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHRyZXQgOlxuXHRcdFx0cmV0ICsgXCJcIjtcblx0fTtcbn0gZWxzZSBpZiAoIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jdXJyZW50U3R5bGUgKSB7XG5cdGdldFN0eWxlcyA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBlbGVtLmN1cnJlbnRTdHlsZTtcblx0fTtcblxuXHRjdXJDU1MgPSBmdW5jdGlvbiggZWxlbSwgbmFtZSwgY29tcHV0ZWQgKSB7XG5cdFx0dmFyIGxlZnQsIHJzLCByc0xlZnQsIHJldCxcblx0XHRcdHN0eWxlID0gZWxlbS5zdHlsZTtcblxuXHRcdGNvbXB1dGVkID0gY29tcHV0ZWQgfHwgZ2V0U3R5bGVzKCBlbGVtICk7XG5cdFx0cmV0ID0gY29tcHV0ZWQgPyBjb21wdXRlZFsgbmFtZSBdIDogdW5kZWZpbmVkO1xuXG5cdFx0Ly8gQXZvaWQgc2V0dGluZyByZXQgdG8gZW1wdHkgc3RyaW5nIGhlcmVcblx0XHQvLyBzbyB3ZSBkb24ndCBkZWZhdWx0IHRvIGF1dG9cblx0XHRpZiAoIHJldCA9PSBudWxsICYmIHN0eWxlICYmIHN0eWxlWyBuYW1lIF0gKSB7XG5cdFx0XHRyZXQgPSBzdHlsZVsgbmFtZSBdO1xuXHRcdH1cblxuXHRcdC8vIEZyb20gdGhlIGF3ZXNvbWUgaGFjayBieSBEZWFuIEVkd2FyZHNcblx0XHQvLyBodHRwOi8vZXJpay5lYWUubmV0L2FyY2hpdmVzLzIwMDcvMDcvMjcvMTguNTQuMTUvI2NvbW1lbnQtMTAyMjkxXG5cblx0XHQvLyBJZiB3ZSdyZSBub3QgZGVhbGluZyB3aXRoIGEgcmVndWxhciBwaXhlbCBudW1iZXJcblx0XHQvLyBidXQgYSBudW1iZXIgdGhhdCBoYXMgYSB3ZWlyZCBlbmRpbmcsIHdlIG5lZWQgdG8gY29udmVydCBpdCB0byBwaXhlbHNcblx0XHQvLyBidXQgbm90IHBvc2l0aW9uIGNzcyBhdHRyaWJ1dGVzLCBhcyB0aG9zZSBhcmUgcHJvcG9ydGlvbmFsIHRvIHRoZSBwYXJlbnQgZWxlbWVudCBpbnN0ZWFkXG5cdFx0Ly8gYW5kIHdlIGNhbid0IG1lYXN1cmUgdGhlIHBhcmVudCBpbnN0ZWFkIGJlY2F1c2UgaXQgbWlnaHQgdHJpZ2dlciBhIFwic3RhY2tpbmcgZG9sbHNcIiBwcm9ibGVtXG5cdFx0aWYgKCBybnVtbm9ucHgudGVzdCggcmV0ICkgJiYgIXJwb3NpdGlvbi50ZXN0KCBuYW1lICkgKSB7XG5cblx0XHRcdC8vIFJlbWVtYmVyIHRoZSBvcmlnaW5hbCB2YWx1ZXNcblx0XHRcdGxlZnQgPSBzdHlsZS5sZWZ0O1xuXHRcdFx0cnMgPSBlbGVtLnJ1bnRpbWVTdHlsZTtcblx0XHRcdHJzTGVmdCA9IHJzICYmIHJzLmxlZnQ7XG5cblx0XHRcdC8vIFB1dCBpbiB0aGUgbmV3IHZhbHVlcyB0byBnZXQgYSBjb21wdXRlZCB2YWx1ZSBvdXRcblx0XHRcdGlmICggcnNMZWZ0ICkge1xuXHRcdFx0XHRycy5sZWZ0ID0gZWxlbS5jdXJyZW50U3R5bGUubGVmdDtcblx0XHRcdH1cblx0XHRcdHN0eWxlLmxlZnQgPSBuYW1lID09PSBcImZvbnRTaXplXCIgPyBcIjFlbVwiIDogcmV0O1xuXHRcdFx0cmV0ID0gc3R5bGUucGl4ZWxMZWZ0ICsgXCJweFwiO1xuXG5cdFx0XHQvLyBSZXZlcnQgdGhlIGNoYW5nZWQgdmFsdWVzXG5cdFx0XHRzdHlsZS5sZWZ0ID0gbGVmdDtcblx0XHRcdGlmICggcnNMZWZ0ICkge1xuXHRcdFx0XHRycy5sZWZ0ID0gcnNMZWZ0O1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFN1cHBvcnQ6IElFXG5cdFx0Ly8gSUUgcmV0dXJucyB6SW5kZXggdmFsdWUgYXMgYW4gaW50ZWdlci5cblx0XHRyZXR1cm4gcmV0ID09PSB1bmRlZmluZWQgP1xuXHRcdFx0cmV0IDpcblx0XHRcdHJldCArIFwiXCIgfHwgXCJhdXRvXCI7XG5cdH07XG59XG5cblxuXG5cbmZ1bmN0aW9uIGFkZEdldEhvb2tJZiggY29uZGl0aW9uRm4sIGhvb2tGbiApIHtcblx0Ly8gRGVmaW5lIHRoZSBob29rLCB3ZSdsbCBjaGVjayBvbiB0aGUgZmlyc3QgcnVuIGlmIGl0J3MgcmVhbGx5IG5lZWRlZC5cblx0cmV0dXJuIHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGNvbmRpdGlvbiA9IGNvbmRpdGlvbkZuKCk7XG5cblx0XHRcdGlmICggY29uZGl0aW9uID09IG51bGwgKSB7XG5cdFx0XHRcdC8vIFRoZSB0ZXN0IHdhcyBub3QgcmVhZHkgYXQgdGhpcyBwb2ludDsgc2NyZXcgdGhlIGhvb2sgdGhpcyB0aW1lXG5cdFx0XHRcdC8vIGJ1dCBjaGVjayBhZ2FpbiB3aGVuIG5lZWRlZCBuZXh0IHRpbWUuXG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBjb25kaXRpb24gKSB7XG5cdFx0XHRcdC8vIEhvb2sgbm90IG5lZWRlZCAob3IgaXQncyBub3QgcG9zc2libGUgdG8gdXNlIGl0IGR1ZSB0byBtaXNzaW5nIGRlcGVuZGVuY3kpLFxuXHRcdFx0XHQvLyByZW1vdmUgaXQuXG5cdFx0XHRcdC8vIFNpbmNlIHRoZXJlIGFyZSBubyBvdGhlciBob29rcyBmb3IgbWFyZ2luUmlnaHQsIHJlbW92ZSB0aGUgd2hvbGUgb2JqZWN0LlxuXHRcdFx0XHRkZWxldGUgdGhpcy5nZXQ7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSG9vayBuZWVkZWQ7IHJlZGVmaW5lIGl0IHNvIHRoYXQgdGhlIHN1cHBvcnQgdGVzdCBpcyBub3QgZXhlY3V0ZWQgYWdhaW4uXG5cblx0XHRcdHJldHVybiAodGhpcy5nZXQgPSBob29rRm4pLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHR9XG5cdH07XG59XG5cblxuKGZ1bmN0aW9uKCkge1xuXHQvLyBNaW5pZmllZDogdmFyIGIsYyxkLGUsZixnLCBoLGlcblx0dmFyIGRpdiwgc3R5bGUsIGEsIHBpeGVsUG9zaXRpb25WYWwsIGJveFNpemluZ1JlbGlhYmxlVmFsLFxuXHRcdHJlbGlhYmxlSGlkZGVuT2Zmc2V0c1ZhbCwgcmVsaWFibGVNYXJnaW5SaWdodFZhbDtcblxuXHQvLyBTZXR1cFxuXHRkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICk7XG5cdGRpdi5pbm5lckhUTUwgPSBcIiAgPGxpbmsvPjx0YWJsZT48L3RhYmxlPjxhIGhyZWY9Jy9hJz5hPC9hPjxpbnB1dCB0eXBlPSdjaGVja2JveCcvPlwiO1xuXHRhID0gZGl2LmdldEVsZW1lbnRzQnlUYWdOYW1lKCBcImFcIiApWyAwIF07XG5cdHN0eWxlID0gYSAmJiBhLnN0eWxlO1xuXG5cdC8vIEZpbmlzaCBlYXJseSBpbiBsaW1pdGVkIChub24tYnJvd3NlcikgZW52aXJvbm1lbnRzXG5cdGlmICggIXN0eWxlICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdHN0eWxlLmNzc1RleHQgPSBcImZsb2F0OmxlZnQ7b3BhY2l0eTouNVwiO1xuXG5cdC8vIFN1cHBvcnQ6IElFPDlcblx0Ly8gTWFrZSBzdXJlIHRoYXQgZWxlbWVudCBvcGFjaXR5IGV4aXN0cyAoYXMgb3Bwb3NlZCB0byBmaWx0ZXIpXG5cdHN1cHBvcnQub3BhY2l0eSA9IHN0eWxlLm9wYWNpdHkgPT09IFwiMC41XCI7XG5cblx0Ly8gVmVyaWZ5IHN0eWxlIGZsb2F0IGV4aXN0ZW5jZVxuXHQvLyAoSUUgdXNlcyBzdHlsZUZsb2F0IGluc3RlYWQgb2YgY3NzRmxvYXQpXG5cdHN1cHBvcnQuY3NzRmxvYXQgPSAhIXN0eWxlLmNzc0Zsb2F0O1xuXG5cdGRpdi5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9IFwiY29udGVudC1ib3hcIjtcblx0ZGl2LmNsb25lTm9kZSggdHJ1ZSApLnN0eWxlLmJhY2tncm91bmRDbGlwID0gXCJcIjtcblx0c3VwcG9ydC5jbGVhckNsb25lU3R5bGUgPSBkaXYuc3R5bGUuYmFja2dyb3VuZENsaXAgPT09IFwiY29udGVudC1ib3hcIjtcblxuXHQvLyBTdXBwb3J0OiBGaXJlZm94PDI5LCBBbmRyb2lkIDIuM1xuXHQvLyBWZW5kb3ItcHJlZml4IGJveC1zaXppbmdcblx0c3VwcG9ydC5ib3hTaXppbmcgPSBzdHlsZS5ib3hTaXppbmcgPT09IFwiXCIgfHwgc3R5bGUuTW96Qm94U2l6aW5nID09PSBcIlwiIHx8XG5cdFx0c3R5bGUuV2Via2l0Qm94U2l6aW5nID09PSBcIlwiO1xuXG5cdGpRdWVyeS5leHRlbmQoc3VwcG9ydCwge1xuXHRcdHJlbGlhYmxlSGlkZGVuT2Zmc2V0czogZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIHJlbGlhYmxlSGlkZGVuT2Zmc2V0c1ZhbCA9PSBudWxsICkge1xuXHRcdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlbGlhYmxlSGlkZGVuT2Zmc2V0c1ZhbDtcblx0XHR9LFxuXG5cdFx0Ym94U2l6aW5nUmVsaWFibGU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBib3hTaXppbmdSZWxpYWJsZVZhbCA9PSBudWxsICkge1xuXHRcdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGJveFNpemluZ1JlbGlhYmxlVmFsO1xuXHRcdH0sXG5cblx0XHRwaXhlbFBvc2l0aW9uOiBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggcGl4ZWxQb3NpdGlvblZhbCA9PSBudWxsICkge1xuXHRcdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHBpeGVsUG9zaXRpb25WYWw7XG5cdFx0fSxcblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgMi4zXG5cdFx0cmVsaWFibGVNYXJnaW5SaWdodDogZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIHJlbGlhYmxlTWFyZ2luUmlnaHRWYWwgPT0gbnVsbCApIHtcblx0XHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZWxpYWJsZU1hcmdpblJpZ2h0VmFsO1xuXHRcdH1cblx0fSk7XG5cblx0ZnVuY3Rpb24gY29tcHV0ZVN0eWxlVGVzdHMoKSB7XG5cdFx0Ly8gTWluaWZpZWQ6IHZhciBiLGMsZCxqXG5cdFx0dmFyIGRpdiwgYm9keSwgY29udGFpbmVyLCBjb250ZW50cztcblxuXHRcdGJvZHkgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSggXCJib2R5XCIgKVsgMCBdO1xuXHRcdGlmICggIWJvZHkgfHwgIWJvZHkuc3R5bGUgKSB7XG5cdFx0XHQvLyBUZXN0IGZpcmVkIHRvbyBlYXJseSBvciBpbiBhbiB1bnN1cHBvcnRlZCBlbnZpcm9ubWVudCwgZXhpdC5cblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBTZXR1cFxuXHRcdGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKTtcblx0XHRjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICk7XG5cdFx0Y29udGFpbmVyLnN0eWxlLmNzc1RleHQgPSBcInBvc2l0aW9uOmFic29sdXRlO2JvcmRlcjowO3dpZHRoOjA7aGVpZ2h0OjA7dG9wOjA7bGVmdDotOTk5OXB4XCI7XG5cdFx0Ym9keS5hcHBlbmRDaGlsZCggY29udGFpbmVyICkuYXBwZW5kQ2hpbGQoIGRpdiApO1xuXG5cdFx0ZGl2LnN0eWxlLmNzc1RleHQgPVxuXHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveDwyOSwgQW5kcm9pZCAyLjNcblx0XHRcdC8vIFZlbmRvci1wcmVmaXggYm94LXNpemluZ1xuXHRcdFx0XCItd2Via2l0LWJveC1zaXppbmc6Ym9yZGVyLWJveDstbW96LWJveC1zaXppbmc6Ym9yZGVyLWJveDtcIiArXG5cdFx0XHRcImJveC1zaXppbmc6Ym9yZGVyLWJveDtkaXNwbGF5OmJsb2NrO21hcmdpbi10b3A6MSU7dG9wOjElO1wiICtcblx0XHRcdFwiYm9yZGVyOjFweDtwYWRkaW5nOjFweDt3aWR0aDo0cHg7cG9zaXRpb246YWJzb2x1dGVcIjtcblxuXHRcdC8vIFN1cHBvcnQ6IElFPDlcblx0XHQvLyBBc3N1bWUgcmVhc29uYWJsZSB2YWx1ZXMgaW4gdGhlIGFic2VuY2Ugb2YgZ2V0Q29tcHV0ZWRTdHlsZVxuXHRcdHBpeGVsUG9zaXRpb25WYWwgPSBib3hTaXppbmdSZWxpYWJsZVZhbCA9IGZhbHNlO1xuXHRcdHJlbGlhYmxlTWFyZ2luUmlnaHRWYWwgPSB0cnVlO1xuXG5cdFx0Ly8gQ2hlY2sgZm9yIGdldENvbXB1dGVkU3R5bGUgc28gdGhhdCB0aGlzIGNvZGUgaXMgbm90IHJ1biBpbiBJRTw5LlxuXHRcdGlmICggd2luZG93LmdldENvbXB1dGVkU3R5bGUgKSB7XG5cdFx0XHRwaXhlbFBvc2l0aW9uVmFsID0gKCB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSggZGl2LCBudWxsICkgfHwge30gKS50b3AgIT09IFwiMSVcIjtcblx0XHRcdGJveFNpemluZ1JlbGlhYmxlVmFsID1cblx0XHRcdFx0KCB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSggZGl2LCBudWxsICkgfHwgeyB3aWR0aDogXCI0cHhcIiB9ICkud2lkdGggPT09IFwiNHB4XCI7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgMi4zXG5cdFx0XHQvLyBEaXYgd2l0aCBleHBsaWNpdCB3aWR0aCBhbmQgbm8gbWFyZ2luLXJpZ2h0IGluY29ycmVjdGx5XG5cdFx0XHQvLyBnZXRzIGNvbXB1dGVkIG1hcmdpbi1yaWdodCBiYXNlZCBvbiB3aWR0aCBvZiBjb250YWluZXIgKCMzMzMzKVxuXHRcdFx0Ly8gV2ViS2l0IEJ1ZyAxMzM0MyAtIGdldENvbXB1dGVkU3R5bGUgcmV0dXJucyB3cm9uZyB2YWx1ZSBmb3IgbWFyZ2luLXJpZ2h0XG5cdFx0XHRjb250ZW50cyA9IGRpdi5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApICk7XG5cblx0XHRcdC8vIFJlc2V0IENTUzogYm94LXNpemluZzsgZGlzcGxheTsgbWFyZ2luOyBib3JkZXI7IHBhZGRpbmdcblx0XHRcdGNvbnRlbnRzLnN0eWxlLmNzc1RleHQgPSBkaXYuc3R5bGUuY3NzVGV4dCA9XG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3g8MjksIEFuZHJvaWQgMi4zXG5cdFx0XHRcdC8vIFZlbmRvci1wcmVmaXggYm94LXNpemluZ1xuXHRcdFx0XHRcIi13ZWJraXQtYm94LXNpemluZzpjb250ZW50LWJveDstbW96LWJveC1zaXppbmc6Y29udGVudC1ib3g7XCIgK1xuXHRcdFx0XHRcImJveC1zaXppbmc6Y29udGVudC1ib3g7ZGlzcGxheTpibG9jazttYXJnaW46MDtib3JkZXI6MDtwYWRkaW5nOjBcIjtcblx0XHRcdGNvbnRlbnRzLnN0eWxlLm1hcmdpblJpZ2h0ID0gY29udGVudHMuc3R5bGUud2lkdGggPSBcIjBcIjtcblx0XHRcdGRpdi5zdHlsZS53aWR0aCA9IFwiMXB4XCI7XG5cblx0XHRcdHJlbGlhYmxlTWFyZ2luUmlnaHRWYWwgPVxuXHRcdFx0XHQhcGFyc2VGbG9hdCggKCB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSggY29udGVudHMsIG51bGwgKSB8fCB7fSApLm1hcmdpblJpZ2h0ICk7XG5cdFx0fVxuXG5cdFx0Ly8gU3VwcG9ydDogSUU4XG5cdFx0Ly8gQ2hlY2sgaWYgdGFibGUgY2VsbHMgc3RpbGwgaGF2ZSBvZmZzZXRXaWR0aC9IZWlnaHQgd2hlbiB0aGV5IGFyZSBzZXRcblx0XHQvLyB0byBkaXNwbGF5Om5vbmUgYW5kIHRoZXJlIGFyZSBzdGlsbCBvdGhlciB2aXNpYmxlIHRhYmxlIGNlbGxzIGluIGFcblx0XHQvLyB0YWJsZSByb3c7IGlmIHNvLCBvZmZzZXRXaWR0aC9IZWlnaHQgYXJlIG5vdCByZWxpYWJsZSBmb3IgdXNlIHdoZW5cblx0XHQvLyBkZXRlcm1pbmluZyBpZiBhbiBlbGVtZW50IGhhcyBiZWVuIGhpZGRlbiBkaXJlY3RseSB1c2luZ1xuXHRcdC8vIGRpc3BsYXk6bm9uZSAoaXQgaXMgc3RpbGwgc2FmZSB0byB1c2Ugb2Zmc2V0cyBpZiBhIHBhcmVudCBlbGVtZW50IGlzXG5cdFx0Ly8gaGlkZGVuOyBkb24gc2FmZXR5IGdvZ2dsZXMgYW5kIHNlZSBidWcgIzQ1MTIgZm9yIG1vcmUgaW5mb3JtYXRpb24pLlxuXHRcdGRpdi5pbm5lckhUTUwgPSBcIjx0YWJsZT48dHI+PHRkPjwvdGQ+PHRkPnQ8L3RkPjwvdHI+PC90YWJsZT5cIjtcblx0XHRjb250ZW50cyA9IGRpdi5nZXRFbGVtZW50c0J5VGFnTmFtZSggXCJ0ZFwiICk7XG5cdFx0Y29udGVudHNbIDAgXS5zdHlsZS5jc3NUZXh0ID0gXCJtYXJnaW46MDtib3JkZXI6MDtwYWRkaW5nOjA7ZGlzcGxheTpub25lXCI7XG5cdFx0cmVsaWFibGVIaWRkZW5PZmZzZXRzVmFsID0gY29udGVudHNbIDAgXS5vZmZzZXRIZWlnaHQgPT09IDA7XG5cdFx0aWYgKCByZWxpYWJsZUhpZGRlbk9mZnNldHNWYWwgKSB7XG5cdFx0XHRjb250ZW50c1sgMCBdLnN0eWxlLmRpc3BsYXkgPSBcIlwiO1xuXHRcdFx0Y29udGVudHNbIDEgXS5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG5cdFx0XHRyZWxpYWJsZUhpZGRlbk9mZnNldHNWYWwgPSBjb250ZW50c1sgMCBdLm9mZnNldEhlaWdodCA9PT0gMDtcblx0XHR9XG5cblx0XHRib2R5LnJlbW92ZUNoaWxkKCBjb250YWluZXIgKTtcblx0fVxuXG59KSgpO1xuXG5cbi8vIEEgbWV0aG9kIGZvciBxdWlja2x5IHN3YXBwaW5nIGluL291dCBDU1MgcHJvcGVydGllcyB0byBnZXQgY29ycmVjdCBjYWxjdWxhdGlvbnMuXG5qUXVlcnkuc3dhcCA9IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBjYWxsYmFjaywgYXJncyApIHtcblx0dmFyIHJldCwgbmFtZSxcblx0XHRvbGQgPSB7fTtcblxuXHQvLyBSZW1lbWJlciB0aGUgb2xkIHZhbHVlcywgYW5kIGluc2VydCB0aGUgbmV3IG9uZXNcblx0Zm9yICggbmFtZSBpbiBvcHRpb25zICkge1xuXHRcdG9sZFsgbmFtZSBdID0gZWxlbS5zdHlsZVsgbmFtZSBdO1xuXHRcdGVsZW0uc3R5bGVbIG5hbWUgXSA9IG9wdGlvbnNbIG5hbWUgXTtcblx0fVxuXG5cdHJldCA9IGNhbGxiYWNrLmFwcGx5KCBlbGVtLCBhcmdzIHx8IFtdICk7XG5cblx0Ly8gUmV2ZXJ0IHRoZSBvbGQgdmFsdWVzXG5cdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRlbGVtLnN0eWxlWyBuYW1lIF0gPSBvbGRbIG5hbWUgXTtcblx0fVxuXG5cdHJldHVybiByZXQ7XG59O1xuXG5cbnZhclxuXHRcdHJhbHBoYSA9IC9hbHBoYVxcKFteKV0qXFwpL2ksXG5cdHJvcGFjaXR5ID0gL29wYWNpdHlcXHMqPVxccyooW14pXSopLyxcblxuXHQvLyBzd2FwcGFibGUgaWYgZGlzcGxheSBpcyBub25lIG9yIHN0YXJ0cyB3aXRoIHRhYmxlIGV4Y2VwdCBcInRhYmxlXCIsIFwidGFibGUtY2VsbFwiLCBvciBcInRhYmxlLWNhcHRpb25cIlxuXHQvLyBzZWUgaGVyZSBmb3IgZGlzcGxheSB2YWx1ZXM6IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvQ1NTL2Rpc3BsYXlcblx0cmRpc3BsYXlzd2FwID0gL14obm9uZXx0YWJsZSg/IS1jW2VhXSkuKykvLFxuXHRybnVtc3BsaXQgPSBuZXcgUmVnRXhwKCBcIl4oXCIgKyBwbnVtICsgXCIpKC4qKSRcIiwgXCJpXCIgKSxcblx0cnJlbE51bSA9IG5ldyBSZWdFeHAoIFwiXihbKy1dKT0oXCIgKyBwbnVtICsgXCIpXCIsIFwiaVwiICksXG5cblx0Y3NzU2hvdyA9IHsgcG9zaXRpb246IFwiYWJzb2x1dGVcIiwgdmlzaWJpbGl0eTogXCJoaWRkZW5cIiwgZGlzcGxheTogXCJibG9ja1wiIH0sXG5cdGNzc05vcm1hbFRyYW5zZm9ybSA9IHtcblx0XHRsZXR0ZXJTcGFjaW5nOiBcIjBcIixcblx0XHRmb250V2VpZ2h0OiBcIjQwMFwiXG5cdH0sXG5cblx0Y3NzUHJlZml4ZXMgPSBbIFwiV2Via2l0XCIsIFwiT1wiLCBcIk1velwiLCBcIm1zXCIgXTtcblxuXG4vLyByZXR1cm4gYSBjc3MgcHJvcGVydHkgbWFwcGVkIHRvIGEgcG90ZW50aWFsbHkgdmVuZG9yIHByZWZpeGVkIHByb3BlcnR5XG5mdW5jdGlvbiB2ZW5kb3JQcm9wTmFtZSggc3R5bGUsIG5hbWUgKSB7XG5cblx0Ly8gc2hvcnRjdXQgZm9yIG5hbWVzIHRoYXQgYXJlIG5vdCB2ZW5kb3IgcHJlZml4ZWRcblx0aWYgKCBuYW1lIGluIHN0eWxlICkge1xuXHRcdHJldHVybiBuYW1lO1xuXHR9XG5cblx0Ly8gY2hlY2sgZm9yIHZlbmRvciBwcmVmaXhlZCBuYW1lc1xuXHR2YXIgY2FwTmFtZSA9IG5hbWUuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBuYW1lLnNsaWNlKDEpLFxuXHRcdG9yaWdOYW1lID0gbmFtZSxcblx0XHRpID0gY3NzUHJlZml4ZXMubGVuZ3RoO1xuXG5cdHdoaWxlICggaS0tICkge1xuXHRcdG5hbWUgPSBjc3NQcmVmaXhlc1sgaSBdICsgY2FwTmFtZTtcblx0XHRpZiAoIG5hbWUgaW4gc3R5bGUgKSB7XG5cdFx0XHRyZXR1cm4gbmFtZTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gb3JpZ05hbWU7XG59XG5cbmZ1bmN0aW9uIHNob3dIaWRlKCBlbGVtZW50cywgc2hvdyApIHtcblx0dmFyIGRpc3BsYXksIGVsZW0sIGhpZGRlbixcblx0XHR2YWx1ZXMgPSBbXSxcblx0XHRpbmRleCA9IDAsXG5cdFx0bGVuZ3RoID0gZWxlbWVudHMubGVuZ3RoO1xuXG5cdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0ZWxlbSA9IGVsZW1lbnRzWyBpbmRleCBdO1xuXHRcdGlmICggIWVsZW0uc3R5bGUgKSB7XG5cdFx0XHRjb250aW51ZTtcblx0XHR9XG5cblx0XHR2YWx1ZXNbIGluZGV4IF0gPSBqUXVlcnkuX2RhdGEoIGVsZW0sIFwib2xkZGlzcGxheVwiICk7XG5cdFx0ZGlzcGxheSA9IGVsZW0uc3R5bGUuZGlzcGxheTtcblx0XHRpZiAoIHNob3cgKSB7XG5cdFx0XHQvLyBSZXNldCB0aGUgaW5saW5lIGRpc3BsYXkgb2YgdGhpcyBlbGVtZW50IHRvIGxlYXJuIGlmIGl0IGlzXG5cdFx0XHQvLyBiZWluZyBoaWRkZW4gYnkgY2FzY2FkZWQgcnVsZXMgb3Igbm90XG5cdFx0XHRpZiAoICF2YWx1ZXNbIGluZGV4IF0gJiYgZGlzcGxheSA9PT0gXCJub25lXCIgKSB7XG5cdFx0XHRcdGVsZW0uc3R5bGUuZGlzcGxheSA9IFwiXCI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNldCBlbGVtZW50cyB3aGljaCBoYXZlIGJlZW4gb3ZlcnJpZGRlbiB3aXRoIGRpc3BsYXk6IG5vbmVcblx0XHRcdC8vIGluIGEgc3R5bGVzaGVldCB0byB3aGF0ZXZlciB0aGUgZGVmYXVsdCBicm93c2VyIHN0eWxlIGlzXG5cdFx0XHQvLyBmb3Igc3VjaCBhbiBlbGVtZW50XG5cdFx0XHRpZiAoIGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJcIiAmJiBpc0hpZGRlbiggZWxlbSApICkge1xuXHRcdFx0XHR2YWx1ZXNbIGluZGV4IF0gPSBqUXVlcnkuX2RhdGEoIGVsZW0sIFwib2xkZGlzcGxheVwiLCBkZWZhdWx0RGlzcGxheShlbGVtLm5vZGVOYW1lKSApO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRoaWRkZW4gPSBpc0hpZGRlbiggZWxlbSApO1xuXG5cdFx0XHRpZiAoIGRpc3BsYXkgJiYgZGlzcGxheSAhPT0gXCJub25lXCIgfHwgIWhpZGRlbiApIHtcblx0XHRcdFx0alF1ZXJ5Ll9kYXRhKCBlbGVtLCBcIm9sZGRpc3BsYXlcIiwgaGlkZGVuID8gZGlzcGxheSA6IGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICkgKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBTZXQgdGhlIGRpc3BsYXkgb2YgbW9zdCBvZiB0aGUgZWxlbWVudHMgaW4gYSBzZWNvbmQgbG9vcFxuXHQvLyB0byBhdm9pZCB0aGUgY29uc3RhbnQgcmVmbG93XG5cdGZvciAoIGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0ZWxlbSA9IGVsZW1lbnRzWyBpbmRleCBdO1xuXHRcdGlmICggIWVsZW0uc3R5bGUgKSB7XG5cdFx0XHRjb250aW51ZTtcblx0XHR9XG5cdFx0aWYgKCAhc2hvdyB8fCBlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwibm9uZVwiIHx8IGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJcIiApIHtcblx0XHRcdGVsZW0uc3R5bGUuZGlzcGxheSA9IHNob3cgPyB2YWx1ZXNbIGluZGV4IF0gfHwgXCJcIiA6IFwibm9uZVwiO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBlbGVtZW50cztcbn1cblxuZnVuY3Rpb24gc2V0UG9zaXRpdmVOdW1iZXIoIGVsZW0sIHZhbHVlLCBzdWJ0cmFjdCApIHtcblx0dmFyIG1hdGNoZXMgPSBybnVtc3BsaXQuZXhlYyggdmFsdWUgKTtcblx0cmV0dXJuIG1hdGNoZXMgP1xuXHRcdC8vIEd1YXJkIGFnYWluc3QgdW5kZWZpbmVkIFwic3VidHJhY3RcIiwgZS5nLiwgd2hlbiB1c2VkIGFzIGluIGNzc0hvb2tzXG5cdFx0TWF0aC5tYXgoIDAsIG1hdGNoZXNbIDEgXSAtICggc3VidHJhY3QgfHwgMCApICkgKyAoIG1hdGNoZXNbIDIgXSB8fCBcInB4XCIgKSA6XG5cdFx0dmFsdWU7XG59XG5cbmZ1bmN0aW9uIGF1Z21lbnRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBuYW1lLCBleHRyYSwgaXNCb3JkZXJCb3gsIHN0eWxlcyApIHtcblx0dmFyIGkgPSBleHRyYSA9PT0gKCBpc0JvcmRlckJveCA/IFwiYm9yZGVyXCIgOiBcImNvbnRlbnRcIiApID9cblx0XHQvLyBJZiB3ZSBhbHJlYWR5IGhhdmUgdGhlIHJpZ2h0IG1lYXN1cmVtZW50LCBhdm9pZCBhdWdtZW50YXRpb25cblx0XHQ0IDpcblx0XHQvLyBPdGhlcndpc2UgaW5pdGlhbGl6ZSBmb3IgaG9yaXpvbnRhbCBvciB2ZXJ0aWNhbCBwcm9wZXJ0aWVzXG5cdFx0bmFtZSA9PT0gXCJ3aWR0aFwiID8gMSA6IDAsXG5cblx0XHR2YWwgPSAwO1xuXG5cdGZvciAoIDsgaSA8IDQ7IGkgKz0gMiApIHtcblx0XHQvLyBib3RoIGJveCBtb2RlbHMgZXhjbHVkZSBtYXJnaW4sIHNvIGFkZCBpdCBpZiB3ZSB3YW50IGl0XG5cdFx0aWYgKCBleHRyYSA9PT0gXCJtYXJnaW5cIiApIHtcblx0XHRcdHZhbCArPSBqUXVlcnkuY3NzKCBlbGVtLCBleHRyYSArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblx0XHR9XG5cblx0XHRpZiAoIGlzQm9yZGVyQm94ICkge1xuXHRcdFx0Ly8gYm9yZGVyLWJveCBpbmNsdWRlcyBwYWRkaW5nLCBzbyByZW1vdmUgaXQgaWYgd2Ugd2FudCBjb250ZW50XG5cdFx0XHRpZiAoIGV4dHJhID09PSBcImNvbnRlbnRcIiApIHtcblx0XHRcdFx0dmFsIC09IGpRdWVyeS5jc3MoIGVsZW0sIFwicGFkZGluZ1wiICsgY3NzRXhwYW5kWyBpIF0sIHRydWUsIHN0eWxlcyApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBhdCB0aGlzIHBvaW50LCBleHRyYSBpc24ndCBib3JkZXIgbm9yIG1hcmdpbiwgc28gcmVtb3ZlIGJvcmRlclxuXHRcdFx0aWYgKCBleHRyYSAhPT0gXCJtYXJnaW5cIiApIHtcblx0XHRcdFx0dmFsIC09IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm9yZGVyXCIgKyBjc3NFeHBhbmRbIGkgXSArIFwiV2lkdGhcIiwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIGF0IHRoaXMgcG9pbnQsIGV4dHJhIGlzbid0IGNvbnRlbnQsIHNvIGFkZCBwYWRkaW5nXG5cdFx0XHR2YWwgKz0galF1ZXJ5LmNzcyggZWxlbSwgXCJwYWRkaW5nXCIgKyBjc3NFeHBhbmRbIGkgXSwgdHJ1ZSwgc3R5bGVzICk7XG5cblx0XHRcdC8vIGF0IHRoaXMgcG9pbnQsIGV4dHJhIGlzbid0IGNvbnRlbnQgbm9yIHBhZGRpbmcsIHNvIGFkZCBib3JkZXJcblx0XHRcdGlmICggZXh0cmEgIT09IFwicGFkZGluZ1wiICkge1xuXHRcdFx0XHR2YWwgKz0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3JkZXJcIiArIGNzc0V4cGFuZFsgaSBdICsgXCJXaWR0aFwiLCB0cnVlLCBzdHlsZXMgKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gdmFsO1xufVxuXG5mdW5jdGlvbiBnZXRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBuYW1lLCBleHRyYSApIHtcblxuXHQvLyBTdGFydCB3aXRoIG9mZnNldCBwcm9wZXJ0eSwgd2hpY2ggaXMgZXF1aXZhbGVudCB0byB0aGUgYm9yZGVyLWJveCB2YWx1ZVxuXHR2YXIgdmFsdWVJc0JvcmRlckJveCA9IHRydWUsXG5cdFx0dmFsID0gbmFtZSA9PT0gXCJ3aWR0aFwiID8gZWxlbS5vZmZzZXRXaWR0aCA6IGVsZW0ub2Zmc2V0SGVpZ2h0LFxuXHRcdHN0eWxlcyA9IGdldFN0eWxlcyggZWxlbSApLFxuXHRcdGlzQm9yZGVyQm94ID0gc3VwcG9ydC5ib3hTaXppbmcgJiYgalF1ZXJ5LmNzcyggZWxlbSwgXCJib3hTaXppbmdcIiwgZmFsc2UsIHN0eWxlcyApID09PSBcImJvcmRlci1ib3hcIjtcblxuXHQvLyBzb21lIG5vbi1odG1sIGVsZW1lbnRzIHJldHVybiB1bmRlZmluZWQgZm9yIG9mZnNldFdpZHRoLCBzbyBjaGVjayBmb3IgbnVsbC91bmRlZmluZWRcblx0Ly8gc3ZnIC0gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9NjQ5Mjg1XG5cdC8vIE1hdGhNTCAtIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTQ5MTY2OFxuXHRpZiAoIHZhbCA8PSAwIHx8IHZhbCA9PSBudWxsICkge1xuXHRcdC8vIEZhbGwgYmFjayB0byBjb21wdXRlZCB0aGVuIHVuY29tcHV0ZWQgY3NzIGlmIG5lY2Vzc2FyeVxuXHRcdHZhbCA9IGN1ckNTUyggZWxlbSwgbmFtZSwgc3R5bGVzICk7XG5cdFx0aWYgKCB2YWwgPCAwIHx8IHZhbCA9PSBudWxsICkge1xuXHRcdFx0dmFsID0gZWxlbS5zdHlsZVsgbmFtZSBdO1xuXHRcdH1cblxuXHRcdC8vIENvbXB1dGVkIHVuaXQgaXMgbm90IHBpeGVscy4gU3RvcCBoZXJlIGFuZCByZXR1cm4uXG5cdFx0aWYgKCBybnVtbm9ucHgudGVzdCh2YWwpICkge1xuXHRcdFx0cmV0dXJuIHZhbDtcblx0XHR9XG5cblx0XHQvLyB3ZSBuZWVkIHRoZSBjaGVjayBmb3Igc3R5bGUgaW4gY2FzZSBhIGJyb3dzZXIgd2hpY2ggcmV0dXJucyB1bnJlbGlhYmxlIHZhbHVlc1xuXHRcdC8vIGZvciBnZXRDb21wdXRlZFN0eWxlIHNpbGVudGx5IGZhbGxzIGJhY2sgdG8gdGhlIHJlbGlhYmxlIGVsZW0uc3R5bGVcblx0XHR2YWx1ZUlzQm9yZGVyQm94ID0gaXNCb3JkZXJCb3ggJiYgKCBzdXBwb3J0LmJveFNpemluZ1JlbGlhYmxlKCkgfHwgdmFsID09PSBlbGVtLnN0eWxlWyBuYW1lIF0gKTtcblxuXHRcdC8vIE5vcm1hbGl6ZSBcIlwiLCBhdXRvLCBhbmQgcHJlcGFyZSBmb3IgZXh0cmFcblx0XHR2YWwgPSBwYXJzZUZsb2F0KCB2YWwgKSB8fCAwO1xuXHR9XG5cblx0Ly8gdXNlIHRoZSBhY3RpdmUgYm94LXNpemluZyBtb2RlbCB0byBhZGQvc3VidHJhY3QgaXJyZWxldmFudCBzdHlsZXNcblx0cmV0dXJuICggdmFsICtcblx0XHRhdWdtZW50V2lkdGhPckhlaWdodChcblx0XHRcdGVsZW0sXG5cdFx0XHRuYW1lLFxuXHRcdFx0ZXh0cmEgfHwgKCBpc0JvcmRlckJveCA/IFwiYm9yZGVyXCIgOiBcImNvbnRlbnRcIiApLFxuXHRcdFx0dmFsdWVJc0JvcmRlckJveCxcblx0XHRcdHN0eWxlc1xuXHRcdClcblx0KSArIFwicHhcIjtcbn1cblxualF1ZXJ5LmV4dGVuZCh7XG5cdC8vIEFkZCBpbiBzdHlsZSBwcm9wZXJ0eSBob29rcyBmb3Igb3ZlcnJpZGluZyB0aGUgZGVmYXVsdFxuXHQvLyBiZWhhdmlvciBvZiBnZXR0aW5nIGFuZCBzZXR0aW5nIGEgc3R5bGUgcHJvcGVydHlcblx0Y3NzSG9va3M6IHtcblx0XHRvcGFjaXR5OiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRcdFx0aWYgKCBjb21wdXRlZCApIHtcblx0XHRcdFx0XHQvLyBXZSBzaG91bGQgYWx3YXlzIGdldCBhIG51bWJlciBiYWNrIGZyb20gb3BhY2l0eVxuXHRcdFx0XHRcdHZhciByZXQgPSBjdXJDU1MoIGVsZW0sIFwib3BhY2l0eVwiICk7XG5cdFx0XHRcdFx0cmV0dXJuIHJldCA9PT0gXCJcIiA/IFwiMVwiIDogcmV0O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdC8vIERvbid0IGF1dG9tYXRpY2FsbHkgYWRkIFwicHhcIiB0byB0aGVzZSBwb3NzaWJseS11bml0bGVzcyBwcm9wZXJ0aWVzXG5cdGNzc051bWJlcjoge1xuXHRcdFwiY29sdW1uQ291bnRcIjogdHJ1ZSxcblx0XHRcImZpbGxPcGFjaXR5XCI6IHRydWUsXG5cdFx0XCJmbGV4R3Jvd1wiOiB0cnVlLFxuXHRcdFwiZmxleFNocmlua1wiOiB0cnVlLFxuXHRcdFwiZm9udFdlaWdodFwiOiB0cnVlLFxuXHRcdFwibGluZUhlaWdodFwiOiB0cnVlLFxuXHRcdFwib3BhY2l0eVwiOiB0cnVlLFxuXHRcdFwib3JkZXJcIjogdHJ1ZSxcblx0XHRcIm9ycGhhbnNcIjogdHJ1ZSxcblx0XHRcIndpZG93c1wiOiB0cnVlLFxuXHRcdFwiekluZGV4XCI6IHRydWUsXG5cdFx0XCJ6b29tXCI6IHRydWVcblx0fSxcblxuXHQvLyBBZGQgaW4gcHJvcGVydGllcyB3aG9zZSBuYW1lcyB5b3Ugd2lzaCB0byBmaXggYmVmb3JlXG5cdC8vIHNldHRpbmcgb3IgZ2V0dGluZyB0aGUgdmFsdWVcblx0Y3NzUHJvcHM6IHtcblx0XHQvLyBub3JtYWxpemUgZmxvYXQgY3NzIHByb3BlcnR5XG5cdFx0XCJmbG9hdFwiOiBzdXBwb3J0LmNzc0Zsb2F0ID8gXCJjc3NGbG9hdFwiIDogXCJzdHlsZUZsb2F0XCJcblx0fSxcblxuXHQvLyBHZXQgYW5kIHNldCB0aGUgc3R5bGUgcHJvcGVydHkgb24gYSBET00gTm9kZVxuXHRzdHlsZTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlLCBleHRyYSApIHtcblx0XHQvLyBEb24ndCBzZXQgc3R5bGVzIG9uIHRleHQgYW5kIGNvbW1lbnQgbm9kZXNcblx0XHRpZiAoICFlbGVtIHx8IGVsZW0ubm9kZVR5cGUgPT09IDMgfHwgZWxlbS5ub2RlVHlwZSA9PT0gOCB8fCAhZWxlbS5zdHlsZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWVcblx0XHR2YXIgcmV0LCB0eXBlLCBob29rcyxcblx0XHRcdG9yaWdOYW1lID0galF1ZXJ5LmNhbWVsQ2FzZSggbmFtZSApLFxuXHRcdFx0c3R5bGUgPSBlbGVtLnN0eWxlO1xuXG5cdFx0bmFtZSA9IGpRdWVyeS5jc3NQcm9wc1sgb3JpZ05hbWUgXSB8fCAoIGpRdWVyeS5jc3NQcm9wc1sgb3JpZ05hbWUgXSA9IHZlbmRvclByb3BOYW1lKCBzdHlsZSwgb3JpZ05hbWUgKSApO1xuXG5cdFx0Ly8gZ2V0cyBob29rIGZvciB0aGUgcHJlZml4ZWQgdmVyc2lvblxuXHRcdC8vIGZvbGxvd2VkIGJ5IHRoZSB1bnByZWZpeGVkIHZlcnNpb25cblx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdIHx8IGpRdWVyeS5jc3NIb29rc1sgb3JpZ05hbWUgXTtcblxuXHRcdC8vIENoZWNrIGlmIHdlJ3JlIHNldHRpbmcgYSB2YWx1ZVxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHR5cGUgPSB0eXBlb2YgdmFsdWU7XG5cblx0XHRcdC8vIGNvbnZlcnQgcmVsYXRpdmUgbnVtYmVyIHN0cmluZ3MgKCs9IG9yIC09KSB0byByZWxhdGl2ZSBudW1iZXJzLiAjNzM0NVxuXHRcdFx0aWYgKCB0eXBlID09PSBcInN0cmluZ1wiICYmIChyZXQgPSBycmVsTnVtLmV4ZWMoIHZhbHVlICkpICkge1xuXHRcdFx0XHR2YWx1ZSA9ICggcmV0WzFdICsgMSApICogcmV0WzJdICsgcGFyc2VGbG9hdCggalF1ZXJ5LmNzcyggZWxlbSwgbmFtZSApICk7XG5cdFx0XHRcdC8vIEZpeGVzIGJ1ZyAjOTIzN1xuXHRcdFx0XHR0eXBlID0gXCJudW1iZXJcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWFrZSBzdXJlIHRoYXQgbnVsbCBhbmQgTmFOIHZhbHVlcyBhcmVuJ3Qgc2V0LiBTZWU6ICM3MTE2XG5cdFx0XHRpZiAoIHZhbHVlID09IG51bGwgfHwgdmFsdWUgIT09IHZhbHVlICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIGEgbnVtYmVyIHdhcyBwYXNzZWQgaW4sIGFkZCAncHgnIHRvIHRoZSAoZXhjZXB0IGZvciBjZXJ0YWluIENTUyBwcm9wZXJ0aWVzKVxuXHRcdFx0aWYgKCB0eXBlID09PSBcIm51bWJlclwiICYmICFqUXVlcnkuY3NzTnVtYmVyWyBvcmlnTmFtZSBdICkge1xuXHRcdFx0XHR2YWx1ZSArPSBcInB4XCI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEZpeGVzICM4OTA4LCBpdCBjYW4gYmUgZG9uZSBtb3JlIGNvcnJlY3RseSBieSBzcGVjaWZpbmcgc2V0dGVycyBpbiBjc3NIb29rcyxcblx0XHRcdC8vIGJ1dCBpdCB3b3VsZCBtZWFuIHRvIGRlZmluZSBlaWdodCAoZm9yIGV2ZXJ5IHByb2JsZW1hdGljIHByb3BlcnR5KSBpZGVudGljYWwgZnVuY3Rpb25zXG5cdFx0XHRpZiAoICFzdXBwb3J0LmNsZWFyQ2xvbmVTdHlsZSAmJiB2YWx1ZSA9PT0gXCJcIiAmJiBuYW1lLmluZGV4T2YoXCJiYWNrZ3JvdW5kXCIpID09PSAwICkge1xuXHRcdFx0XHRzdHlsZVsgbmFtZSBdID0gXCJpbmhlcml0XCI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQsIHVzZSB0aGF0IHZhbHVlLCBvdGhlcndpc2UganVzdCBzZXQgdGhlIHNwZWNpZmllZCB2YWx1ZVxuXHRcdFx0aWYgKCAhaG9va3MgfHwgIShcInNldFwiIGluIGhvb2tzKSB8fCAodmFsdWUgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBleHRyYSApKSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFXG5cdFx0XHRcdC8vIFN3YWxsb3cgZXJyb3JzIGZyb20gJ2ludmFsaWQnIENTUyB2YWx1ZXMgKCM1NTA5KVxuXHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdHN0eWxlWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdFx0fSBjYXRjaChlKSB7fVxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQgZ2V0IHRoZSBub24tY29tcHV0ZWQgdmFsdWUgZnJvbSB0aGVyZVxuXHRcdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmIChyZXQgPSBob29rcy5nZXQoIGVsZW0sIGZhbHNlLCBleHRyYSApKSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBPdGhlcndpc2UganVzdCBnZXQgdGhlIHZhbHVlIGZyb20gdGhlIHN0eWxlIG9iamVjdFxuXHRcdFx0cmV0dXJuIHN0eWxlWyBuYW1lIF07XG5cdFx0fVxuXHR9LFxuXG5cdGNzczogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGV4dHJhLCBzdHlsZXMgKSB7XG5cdFx0dmFyIG51bSwgdmFsLCBob29rcyxcblx0XHRcdG9yaWdOYW1lID0galF1ZXJ5LmNhbWVsQ2FzZSggbmFtZSApO1xuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgd2UncmUgd29ya2luZyB3aXRoIHRoZSByaWdodCBuYW1lXG5cdFx0bmFtZSA9IGpRdWVyeS5jc3NQcm9wc1sgb3JpZ05hbWUgXSB8fCAoIGpRdWVyeS5jc3NQcm9wc1sgb3JpZ05hbWUgXSA9IHZlbmRvclByb3BOYW1lKCBlbGVtLnN0eWxlLCBvcmlnTmFtZSApICk7XG5cblx0XHQvLyBnZXRzIGhvb2sgZm9yIHRoZSBwcmVmaXhlZCB2ZXJzaW9uXG5cdFx0Ly8gZm9sbG93ZWQgYnkgdGhlIHVucHJlZml4ZWQgdmVyc2lvblxuXHRcdGhvb2tzID0galF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF0gfHwgalF1ZXJ5LmNzc0hvb2tzWyBvcmlnTmFtZSBdO1xuXG5cdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCBnZXQgdGhlIGNvbXB1dGVkIHZhbHVlIGZyb20gdGhlcmVcblx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgKSB7XG5cdFx0XHR2YWwgPSBob29rcy5nZXQoIGVsZW0sIHRydWUsIGV4dHJhICk7XG5cdFx0fVxuXG5cdFx0Ly8gT3RoZXJ3aXNlLCBpZiBhIHdheSB0byBnZXQgdGhlIGNvbXB1dGVkIHZhbHVlIGV4aXN0cywgdXNlIHRoYXRcblx0XHRpZiAoIHZhbCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0dmFsID0gY3VyQ1NTKCBlbGVtLCBuYW1lLCBzdHlsZXMgKTtcblx0XHR9XG5cblx0XHQvL2NvbnZlcnQgXCJub3JtYWxcIiB0byBjb21wdXRlZCB2YWx1ZVxuXHRcdGlmICggdmFsID09PSBcIm5vcm1hbFwiICYmIG5hbWUgaW4gY3NzTm9ybWFsVHJhbnNmb3JtICkge1xuXHRcdFx0dmFsID0gY3NzTm9ybWFsVHJhbnNmb3JtWyBuYW1lIF07XG5cdFx0fVxuXG5cdFx0Ly8gUmV0dXJuLCBjb252ZXJ0aW5nIHRvIG51bWJlciBpZiBmb3JjZWQgb3IgYSBxdWFsaWZpZXIgd2FzIHByb3ZpZGVkIGFuZCB2YWwgbG9va3MgbnVtZXJpY1xuXHRcdGlmICggZXh0cmEgPT09IFwiXCIgfHwgZXh0cmEgKSB7XG5cdFx0XHRudW0gPSBwYXJzZUZsb2F0KCB2YWwgKTtcblx0XHRcdHJldHVybiBleHRyYSA9PT0gdHJ1ZSB8fCBqUXVlcnkuaXNOdW1lcmljKCBudW0gKSA/IG51bSB8fCAwIDogdmFsO1xuXHRcdH1cblx0XHRyZXR1cm4gdmFsO1xuXHR9XG59KTtcblxualF1ZXJ5LmVhY2goWyBcImhlaWdodFwiLCBcIndpZHRoXCIgXSwgZnVuY3Rpb24oIGksIG5hbWUgKSB7XG5cdGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdID0ge1xuXHRcdGdldDogZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkLCBleHRyYSApIHtcblx0XHRcdGlmICggY29tcHV0ZWQgKSB7XG5cdFx0XHRcdC8vIGNlcnRhaW4gZWxlbWVudHMgY2FuIGhhdmUgZGltZW5zaW9uIGluZm8gaWYgd2UgaW52aXNpYmx5IHNob3cgdGhlbVxuXHRcdFx0XHQvLyBob3dldmVyLCBpdCBtdXN0IGhhdmUgYSBjdXJyZW50IGRpc3BsYXkgc3R5bGUgdGhhdCB3b3VsZCBiZW5lZml0IGZyb20gdGhpc1xuXHRcdFx0XHRyZXR1cm4gcmRpc3BsYXlzd2FwLnRlc3QoIGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICkgKSAmJiBlbGVtLm9mZnNldFdpZHRoID09PSAwID9cblx0XHRcdFx0XHRqUXVlcnkuc3dhcCggZWxlbSwgY3NzU2hvdywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZ2V0V2lkdGhPckhlaWdodCggZWxlbSwgbmFtZSwgZXh0cmEgKTtcblx0XHRcdFx0XHR9KSA6XG5cdFx0XHRcdFx0Z2V0V2lkdGhPckhlaWdodCggZWxlbSwgbmFtZSwgZXh0cmEgKTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUsIGV4dHJhICkge1xuXHRcdFx0dmFyIHN0eWxlcyA9IGV4dHJhICYmIGdldFN0eWxlcyggZWxlbSApO1xuXHRcdFx0cmV0dXJuIHNldFBvc2l0aXZlTnVtYmVyKCBlbGVtLCB2YWx1ZSwgZXh0cmEgP1xuXHRcdFx0XHRhdWdtZW50V2lkdGhPckhlaWdodChcblx0XHRcdFx0XHRlbGVtLFxuXHRcdFx0XHRcdG5hbWUsXG5cdFx0XHRcdFx0ZXh0cmEsXG5cdFx0XHRcdFx0c3VwcG9ydC5ib3hTaXppbmcgJiYgalF1ZXJ5LmNzcyggZWxlbSwgXCJib3hTaXppbmdcIiwgZmFsc2UsIHN0eWxlcyApID09PSBcImJvcmRlci1ib3hcIixcblx0XHRcdFx0XHRzdHlsZXNcblx0XHRcdFx0KSA6IDBcblx0XHRcdCk7XG5cdFx0fVxuXHR9O1xufSk7XG5cbmlmICggIXN1cHBvcnQub3BhY2l0eSApIHtcblx0alF1ZXJ5LmNzc0hvb2tzLm9wYWNpdHkgPSB7XG5cdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQgKSB7XG5cdFx0XHQvLyBJRSB1c2VzIGZpbHRlcnMgZm9yIG9wYWNpdHlcblx0XHRcdHJldHVybiByb3BhY2l0eS50ZXN0KCAoY29tcHV0ZWQgJiYgZWxlbS5jdXJyZW50U3R5bGUgPyBlbGVtLmN1cnJlbnRTdHlsZS5maWx0ZXIgOiBlbGVtLnN0eWxlLmZpbHRlcikgfHwgXCJcIiApID9cblx0XHRcdFx0KCAwLjAxICogcGFyc2VGbG9hdCggUmVnRXhwLiQxICkgKSArIFwiXCIgOlxuXHRcdFx0XHRjb21wdXRlZCA/IFwiMVwiIDogXCJcIjtcblx0XHR9LFxuXG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0XHR2YXIgc3R5bGUgPSBlbGVtLnN0eWxlLFxuXHRcdFx0XHRjdXJyZW50U3R5bGUgPSBlbGVtLmN1cnJlbnRTdHlsZSxcblx0XHRcdFx0b3BhY2l0eSA9IGpRdWVyeS5pc051bWVyaWMoIHZhbHVlICkgPyBcImFscGhhKG9wYWNpdHk9XCIgKyB2YWx1ZSAqIDEwMCArIFwiKVwiIDogXCJcIixcblx0XHRcdFx0ZmlsdGVyID0gY3VycmVudFN0eWxlICYmIGN1cnJlbnRTdHlsZS5maWx0ZXIgfHwgc3R5bGUuZmlsdGVyIHx8IFwiXCI7XG5cblx0XHRcdC8vIElFIGhhcyB0cm91YmxlIHdpdGggb3BhY2l0eSBpZiBpdCBkb2VzIG5vdCBoYXZlIGxheW91dFxuXHRcdFx0Ly8gRm9yY2UgaXQgYnkgc2V0dGluZyB0aGUgem9vbSBsZXZlbFxuXHRcdFx0c3R5bGUuem9vbSA9IDE7XG5cblx0XHRcdC8vIGlmIHNldHRpbmcgb3BhY2l0eSB0byAxLCBhbmQgbm8gb3RoZXIgZmlsdGVycyBleGlzdCAtIGF0dGVtcHQgdG8gcmVtb3ZlIGZpbHRlciBhdHRyaWJ1dGUgIzY2NTJcblx0XHRcdC8vIGlmIHZhbHVlID09PSBcIlwiLCB0aGVuIHJlbW92ZSBpbmxpbmUgb3BhY2l0eSAjMTI2ODVcblx0XHRcdGlmICggKCB2YWx1ZSA+PSAxIHx8IHZhbHVlID09PSBcIlwiICkgJiZcblx0XHRcdFx0XHRqUXVlcnkudHJpbSggZmlsdGVyLnJlcGxhY2UoIHJhbHBoYSwgXCJcIiApICkgPT09IFwiXCIgJiZcblx0XHRcdFx0XHRzdHlsZS5yZW1vdmVBdHRyaWJ1dGUgKSB7XG5cblx0XHRcdFx0Ly8gU2V0dGluZyBzdHlsZS5maWx0ZXIgdG8gbnVsbCwgXCJcIiAmIFwiIFwiIHN0aWxsIGxlYXZlIFwiZmlsdGVyOlwiIGluIHRoZSBjc3NUZXh0XG5cdFx0XHRcdC8vIGlmIFwiZmlsdGVyOlwiIGlzIHByZXNlbnQgYXQgYWxsLCBjbGVhclR5cGUgaXMgZGlzYWJsZWQsIHdlIHdhbnQgdG8gYXZvaWQgdGhpc1xuXHRcdFx0XHQvLyBzdHlsZS5yZW1vdmVBdHRyaWJ1dGUgaXMgSUUgT25seSwgYnV0IHNvIGFwcGFyZW50bHkgaXMgdGhpcyBjb2RlIHBhdGguLi5cblx0XHRcdFx0c3R5bGUucmVtb3ZlQXR0cmlidXRlKCBcImZpbHRlclwiICk7XG5cblx0XHRcdFx0Ly8gaWYgdGhlcmUgaXMgbm8gZmlsdGVyIHN0eWxlIGFwcGxpZWQgaW4gYSBjc3MgcnVsZSBvciB1bnNldCBpbmxpbmUgb3BhY2l0eSwgd2UgYXJlIGRvbmVcblx0XHRcdFx0aWYgKCB2YWx1ZSA9PT0gXCJcIiB8fCBjdXJyZW50U3R5bGUgJiYgIWN1cnJlbnRTdHlsZS5maWx0ZXIgKSB7XG5cdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIG90aGVyd2lzZSwgc2V0IG5ldyBmaWx0ZXIgdmFsdWVzXG5cdFx0XHRzdHlsZS5maWx0ZXIgPSByYWxwaGEudGVzdCggZmlsdGVyICkgP1xuXHRcdFx0XHRmaWx0ZXIucmVwbGFjZSggcmFscGhhLCBvcGFjaXR5ICkgOlxuXHRcdFx0XHRmaWx0ZXIgKyBcIiBcIiArIG9wYWNpdHk7XG5cdFx0fVxuXHR9O1xufVxuXG5qUXVlcnkuY3NzSG9va3MubWFyZ2luUmlnaHQgPSBhZGRHZXRIb29rSWYoIHN1cHBvcnQucmVsaWFibGVNYXJnaW5SaWdodCxcblx0ZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xuXHRcdGlmICggY29tcHV0ZWQgKSB7XG5cdFx0XHQvLyBXZWJLaXQgQnVnIDEzMzQzIC0gZ2V0Q29tcHV0ZWRTdHlsZSByZXR1cm5zIHdyb25nIHZhbHVlIGZvciBtYXJnaW4tcmlnaHRcblx0XHRcdC8vIFdvcmsgYXJvdW5kIGJ5IHRlbXBvcmFyaWx5IHNldHRpbmcgZWxlbWVudCBkaXNwbGF5IHRvIGlubGluZS1ibG9ja1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5zd2FwKCBlbGVtLCB7IFwiZGlzcGxheVwiOiBcImlubGluZS1ibG9ja1wiIH0sXG5cdFx0XHRcdGN1ckNTUywgWyBlbGVtLCBcIm1hcmdpblJpZ2h0XCIgXSApO1xuXHRcdH1cblx0fVxuKTtcblxuLy8gVGhlc2UgaG9va3MgYXJlIHVzZWQgYnkgYW5pbWF0ZSB0byBleHBhbmQgcHJvcGVydGllc1xualF1ZXJ5LmVhY2goe1xuXHRtYXJnaW46IFwiXCIsXG5cdHBhZGRpbmc6IFwiXCIsXG5cdGJvcmRlcjogXCJXaWR0aFwiXG59LCBmdW5jdGlvbiggcHJlZml4LCBzdWZmaXggKSB7XG5cdGpRdWVyeS5jc3NIb29rc1sgcHJlZml4ICsgc3VmZml4IF0gPSB7XG5cdFx0ZXhwYW5kOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHR2YXIgaSA9IDAsXG5cdFx0XHRcdGV4cGFuZGVkID0ge30sXG5cblx0XHRcdFx0Ly8gYXNzdW1lcyBhIHNpbmdsZSBudW1iZXIgaWYgbm90IGEgc3RyaW5nXG5cdFx0XHRcdHBhcnRzID0gdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiID8gdmFsdWUuc3BsaXQoXCIgXCIpIDogWyB2YWx1ZSBdO1xuXG5cdFx0XHRmb3IgKCA7IGkgPCA0OyBpKysgKSB7XG5cdFx0XHRcdGV4cGFuZGVkWyBwcmVmaXggKyBjc3NFeHBhbmRbIGkgXSArIHN1ZmZpeCBdID1cblx0XHRcdFx0XHRwYXJ0c1sgaSBdIHx8IHBhcnRzWyBpIC0gMiBdIHx8IHBhcnRzWyAwIF07XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBleHBhbmRlZDtcblx0XHR9XG5cdH07XG5cblx0aWYgKCAhcm1hcmdpbi50ZXN0KCBwcmVmaXggKSApIHtcblx0XHRqUXVlcnkuY3NzSG9va3NbIHByZWZpeCArIHN1ZmZpeCBdLnNldCA9IHNldFBvc2l0aXZlTnVtYmVyO1xuXHR9XG59KTtcblxualF1ZXJ5LmZuLmV4dGVuZCh7XG5cdGNzczogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcblx0XHRcdHZhciBzdHlsZXMsIGxlbixcblx0XHRcdFx0bWFwID0ge30sXG5cdFx0XHRcdGkgPSAwO1xuXG5cdFx0XHRpZiAoIGpRdWVyeS5pc0FycmF5KCBuYW1lICkgKSB7XG5cdFx0XHRcdHN0eWxlcyA9IGdldFN0eWxlcyggZWxlbSApO1xuXHRcdFx0XHRsZW4gPSBuYW1lLmxlbmd0aDtcblxuXHRcdFx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0XHRtYXBbIG5hbWVbIGkgXSBdID0galF1ZXJ5LmNzcyggZWxlbSwgbmFtZVsgaSBdLCBmYWxzZSwgc3R5bGVzICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gbWFwO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdmFsdWUgIT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgbmFtZSwgdmFsdWUgKSA6XG5cdFx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIG5hbWUgKTtcblx0XHR9LCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcblx0fSxcblx0c2hvdzogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHNob3dIaWRlKCB0aGlzLCB0cnVlICk7XG5cdH0sXG5cdGhpZGU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBzaG93SGlkZSggdGhpcyApO1xuXHR9LFxuXHR0b2dnbGU6IGZ1bmN0aW9uKCBzdGF0ZSApIHtcblx0XHRpZiAoIHR5cGVvZiBzdGF0ZSA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0XHRyZXR1cm4gc3RhdGUgPyB0aGlzLnNob3coKSA6IHRoaXMuaGlkZSgpO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIGlzSGlkZGVuKCB0aGlzICkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnNob3coKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLmhpZGUoKTtcblx0XHRcdH1cblx0XHR9KTtcblx0fVxufSk7XG5cblxuZnVuY3Rpb24gVHdlZW4oIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nICkge1xuXHRyZXR1cm4gbmV3IFR3ZWVuLnByb3RvdHlwZS5pbml0KCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZyApO1xufVxualF1ZXJ5LlR3ZWVuID0gVHdlZW47XG5cblR3ZWVuLnByb3RvdHlwZSA9IHtcblx0Y29uc3RydWN0b3I6IFR3ZWVuLFxuXHRpbml0OiBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcsIHVuaXQgKSB7XG5cdFx0dGhpcy5lbGVtID0gZWxlbTtcblx0XHR0aGlzLnByb3AgPSBwcm9wO1xuXHRcdHRoaXMuZWFzaW5nID0gZWFzaW5nIHx8IFwic3dpbmdcIjtcblx0XHR0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuXHRcdHRoaXMuc3RhcnQgPSB0aGlzLm5vdyA9IHRoaXMuY3VyKCk7XG5cdFx0dGhpcy5lbmQgPSBlbmQ7XG5cdFx0dGhpcy51bml0ID0gdW5pdCB8fCAoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSA/IFwiXCIgOiBcInB4XCIgKTtcblx0fSxcblx0Y3VyOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgaG9va3MgPSBUd2Vlbi5wcm9wSG9va3NbIHRoaXMucHJvcCBdO1xuXG5cdFx0cmV0dXJuIGhvb2tzICYmIGhvb2tzLmdldCA/XG5cdFx0XHRob29rcy5nZXQoIHRoaXMgKSA6XG5cdFx0XHRUd2Vlbi5wcm9wSG9va3MuX2RlZmF1bHQuZ2V0KCB0aGlzICk7XG5cdH0sXG5cdHJ1bjogZnVuY3Rpb24oIHBlcmNlbnQgKSB7XG5cdFx0dmFyIGVhc2VkLFxuXHRcdFx0aG9va3MgPSBUd2Vlbi5wcm9wSG9va3NbIHRoaXMucHJvcCBdO1xuXG5cdFx0aWYgKCB0aGlzLm9wdGlvbnMuZHVyYXRpb24gKSB7XG5cdFx0XHR0aGlzLnBvcyA9IGVhc2VkID0galF1ZXJ5LmVhc2luZ1sgdGhpcy5lYXNpbmcgXShcblx0XHRcdFx0cGVyY2VudCwgdGhpcy5vcHRpb25zLmR1cmF0aW9uICogcGVyY2VudCwgMCwgMSwgdGhpcy5vcHRpb25zLmR1cmF0aW9uXG5cdFx0XHQpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLnBvcyA9IGVhc2VkID0gcGVyY2VudDtcblx0XHR9XG5cdFx0dGhpcy5ub3cgPSAoIHRoaXMuZW5kIC0gdGhpcy5zdGFydCApICogZWFzZWQgKyB0aGlzLnN0YXJ0O1xuXG5cdFx0aWYgKCB0aGlzLm9wdGlvbnMuc3RlcCApIHtcblx0XHRcdHRoaXMub3B0aW9ucy5zdGVwLmNhbGwoIHRoaXMuZWxlbSwgdGhpcy5ub3csIHRoaXMgKTtcblx0XHR9XG5cblx0XHRpZiAoIGhvb2tzICYmIGhvb2tzLnNldCApIHtcblx0XHRcdGhvb2tzLnNldCggdGhpcyApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRUd2Vlbi5wcm9wSG9va3MuX2RlZmF1bHQuc2V0KCB0aGlzICk7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzO1xuXHR9XG59O1xuXG5Ud2Vlbi5wcm90b3R5cGUuaW5pdC5wcm90b3R5cGUgPSBUd2Vlbi5wcm90b3R5cGU7XG5cblR3ZWVuLnByb3BIb29rcyA9IHtcblx0X2RlZmF1bHQ6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCB0d2VlbiApIHtcblx0XHRcdHZhciByZXN1bHQ7XG5cblx0XHRcdGlmICggdHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdICE9IG51bGwgJiZcblx0XHRcdFx0KCF0d2Vlbi5lbGVtLnN0eWxlIHx8IHR3ZWVuLmVsZW0uc3R5bGVbIHR3ZWVuLnByb3AgXSA9PSBudWxsKSApIHtcblx0XHRcdFx0cmV0dXJuIHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gcGFzc2luZyBhbiBlbXB0eSBzdHJpbmcgYXMgYSAzcmQgcGFyYW1ldGVyIHRvIC5jc3Mgd2lsbCBhdXRvbWF0aWNhbGx5XG5cdFx0XHQvLyBhdHRlbXB0IGEgcGFyc2VGbG9hdCBhbmQgZmFsbGJhY2sgdG8gYSBzdHJpbmcgaWYgdGhlIHBhcnNlIGZhaWxzXG5cdFx0XHQvLyBzbywgc2ltcGxlIHZhbHVlcyBzdWNoIGFzIFwiMTBweFwiIGFyZSBwYXJzZWQgdG8gRmxvYXQuXG5cdFx0XHQvLyBjb21wbGV4IHZhbHVlcyBzdWNoIGFzIFwicm90YXRlKDFyYWQpXCIgYXJlIHJldHVybmVkIGFzIGlzLlxuXHRcdFx0cmVzdWx0ID0galF1ZXJ5LmNzcyggdHdlZW4uZWxlbSwgdHdlZW4ucHJvcCwgXCJcIiApO1xuXHRcdFx0Ly8gRW1wdHkgc3RyaW5ncywgbnVsbCwgdW5kZWZpbmVkIGFuZCBcImF1dG9cIiBhcmUgY29udmVydGVkIHRvIDAuXG5cdFx0XHRyZXR1cm4gIXJlc3VsdCB8fCByZXN1bHQgPT09IFwiYXV0b1wiID8gMCA6IHJlc3VsdDtcblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24oIHR3ZWVuICkge1xuXHRcdFx0Ly8gdXNlIHN0ZXAgaG9vayBmb3IgYmFjayBjb21wYXQgLSB1c2UgY3NzSG9vayBpZiBpdHMgdGhlcmUgLSB1c2UgLnN0eWxlIGlmIGl0c1xuXHRcdFx0Ly8gYXZhaWxhYmxlIGFuZCB1c2UgcGxhaW4gcHJvcGVydGllcyB3aGVyZSBhdmFpbGFibGVcblx0XHRcdGlmICggalF1ZXJ5LmZ4LnN0ZXBbIHR3ZWVuLnByb3AgXSApIHtcblx0XHRcdFx0alF1ZXJ5LmZ4LnN0ZXBbIHR3ZWVuLnByb3AgXSggdHdlZW4gKTtcblx0XHRcdH0gZWxzZSBpZiAoIHR3ZWVuLmVsZW0uc3R5bGUgJiYgKCB0d2Vlbi5lbGVtLnN0eWxlWyBqUXVlcnkuY3NzUHJvcHNbIHR3ZWVuLnByb3AgXSBdICE9IG51bGwgfHwgalF1ZXJ5LmNzc0hvb2tzWyB0d2Vlbi5wcm9wIF0gKSApIHtcblx0XHRcdFx0alF1ZXJ5LnN0eWxlKCB0d2Vlbi5lbGVtLCB0d2Vlbi5wcm9wLCB0d2Vlbi5ub3cgKyB0d2Vlbi51bml0ICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gPSB0d2Vlbi5ub3c7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59O1xuXG4vLyBTdXBwb3J0OiBJRSA8PTlcbi8vIFBhbmljIGJhc2VkIGFwcHJvYWNoIHRvIHNldHRpbmcgdGhpbmdzIG9uIGRpc2Nvbm5lY3RlZCBub2Rlc1xuXG5Ud2Vlbi5wcm9wSG9va3Muc2Nyb2xsVG9wID0gVHdlZW4ucHJvcEhvb2tzLnNjcm9sbExlZnQgPSB7XG5cdHNldDogZnVuY3Rpb24oIHR3ZWVuICkge1xuXHRcdGlmICggdHdlZW4uZWxlbS5ub2RlVHlwZSAmJiB0d2Vlbi5lbGVtLnBhcmVudE5vZGUgKSB7XG5cdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gPSB0d2Vlbi5ub3c7XG5cdFx0fVxuXHR9XG59O1xuXG5qUXVlcnkuZWFzaW5nID0ge1xuXHRsaW5lYXI6IGZ1bmN0aW9uKCBwICkge1xuXHRcdHJldHVybiBwO1xuXHR9LFxuXHRzd2luZzogZnVuY3Rpb24oIHAgKSB7XG5cdFx0cmV0dXJuIDAuNSAtIE1hdGguY29zKCBwICogTWF0aC5QSSApIC8gMjtcblx0fVxufTtcblxualF1ZXJ5LmZ4ID0gVHdlZW4ucHJvdG90eXBlLmluaXQ7XG5cbi8vIEJhY2sgQ29tcGF0IDwxLjggZXh0ZW5zaW9uIHBvaW50XG5qUXVlcnkuZnguc3RlcCA9IHt9O1xuXG5cblxuXG52YXJcblx0ZnhOb3csIHRpbWVySWQsXG5cdHJmeHR5cGVzID0gL14oPzp0b2dnbGV8c2hvd3xoaWRlKSQvLFxuXHRyZnhudW0gPSBuZXcgUmVnRXhwKCBcIl4oPzooWystXSk9fCkoXCIgKyBwbnVtICsgXCIpKFthLXolXSopJFwiLCBcImlcIiApLFxuXHRycnVuID0gL3F1ZXVlSG9va3MkLyxcblx0YW5pbWF0aW9uUHJlZmlsdGVycyA9IFsgZGVmYXVsdFByZWZpbHRlciBdLFxuXHR0d2VlbmVycyA9IHtcblx0XHRcIipcIjogWyBmdW5jdGlvbiggcHJvcCwgdmFsdWUgKSB7XG5cdFx0XHR2YXIgdHdlZW4gPSB0aGlzLmNyZWF0ZVR3ZWVuKCBwcm9wLCB2YWx1ZSApLFxuXHRcdFx0XHR0YXJnZXQgPSB0d2Vlbi5jdXIoKSxcblx0XHRcdFx0cGFydHMgPSByZnhudW0uZXhlYyggdmFsdWUgKSxcblx0XHRcdFx0dW5pdCA9IHBhcnRzICYmIHBhcnRzWyAzIF0gfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gPyBcIlwiIDogXCJweFwiICksXG5cblx0XHRcdFx0Ly8gU3RhcnRpbmcgdmFsdWUgY29tcHV0YXRpb24gaXMgcmVxdWlyZWQgZm9yIHBvdGVudGlhbCB1bml0IG1pc21hdGNoZXNcblx0XHRcdFx0c3RhcnQgPSAoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSB8fCB1bml0ICE9PSBcInB4XCIgJiYgK3RhcmdldCApICYmXG5cdFx0XHRcdFx0cmZ4bnVtLmV4ZWMoIGpRdWVyeS5jc3MoIHR3ZWVuLmVsZW0sIHByb3AgKSApLFxuXHRcdFx0XHRzY2FsZSA9IDEsXG5cdFx0XHRcdG1heEl0ZXJhdGlvbnMgPSAyMDtcblxuXHRcdFx0aWYgKCBzdGFydCAmJiBzdGFydFsgMyBdICE9PSB1bml0ICkge1xuXHRcdFx0XHQvLyBUcnVzdCB1bml0cyByZXBvcnRlZCBieSBqUXVlcnkuY3NzXG5cdFx0XHRcdHVuaXQgPSB1bml0IHx8IHN0YXJ0WyAzIF07XG5cblx0XHRcdFx0Ly8gTWFrZSBzdXJlIHdlIHVwZGF0ZSB0aGUgdHdlZW4gcHJvcGVydGllcyBsYXRlciBvblxuXHRcdFx0XHRwYXJ0cyA9IHBhcnRzIHx8IFtdO1xuXG5cdFx0XHRcdC8vIEl0ZXJhdGl2ZWx5IGFwcHJveGltYXRlIGZyb20gYSBub256ZXJvIHN0YXJ0aW5nIHBvaW50XG5cdFx0XHRcdHN0YXJ0ID0gK3RhcmdldCB8fCAxO1xuXG5cdFx0XHRcdGRvIHtcblx0XHRcdFx0XHQvLyBJZiBwcmV2aW91cyBpdGVyYXRpb24gemVyb2VkIG91dCwgZG91YmxlIHVudGlsIHdlIGdldCAqc29tZXRoaW5nKlxuXHRcdFx0XHRcdC8vIFVzZSBhIHN0cmluZyBmb3IgZG91YmxpbmcgZmFjdG9yIHNvIHdlIGRvbid0IGFjY2lkZW50YWxseSBzZWUgc2NhbGUgYXMgdW5jaGFuZ2VkIGJlbG93XG5cdFx0XHRcdFx0c2NhbGUgPSBzY2FsZSB8fCBcIi41XCI7XG5cblx0XHRcdFx0XHQvLyBBZGp1c3QgYW5kIGFwcGx5XG5cdFx0XHRcdFx0c3RhcnQgPSBzdGFydCAvIHNjYWxlO1xuXHRcdFx0XHRcdGpRdWVyeS5zdHlsZSggdHdlZW4uZWxlbSwgcHJvcCwgc3RhcnQgKyB1bml0ICk7XG5cblx0XHRcdFx0Ly8gVXBkYXRlIHNjYWxlLCB0b2xlcmF0aW5nIHplcm8gb3IgTmFOIGZyb20gdHdlZW4uY3VyKClcblx0XHRcdFx0Ly8gQW5kIGJyZWFraW5nIHRoZSBsb29wIGlmIHNjYWxlIGlzIHVuY2hhbmdlZCBvciBwZXJmZWN0LCBvciBpZiB3ZSd2ZSBqdXN0IGhhZCBlbm91Z2hcblx0XHRcdFx0fSB3aGlsZSAoIHNjYWxlICE9PSAoc2NhbGUgPSB0d2Vlbi5jdXIoKSAvIHRhcmdldCkgJiYgc2NhbGUgIT09IDEgJiYgLS1tYXhJdGVyYXRpb25zICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFVwZGF0ZSB0d2VlbiBwcm9wZXJ0aWVzXG5cdFx0XHRpZiAoIHBhcnRzICkge1xuXHRcdFx0XHRzdGFydCA9IHR3ZWVuLnN0YXJ0ID0gK3N0YXJ0IHx8ICt0YXJnZXQgfHwgMDtcblx0XHRcdFx0dHdlZW4udW5pdCA9IHVuaXQ7XG5cdFx0XHRcdC8vIElmIGEgKz0vLT0gdG9rZW4gd2FzIHByb3ZpZGVkLCB3ZSdyZSBkb2luZyBhIHJlbGF0aXZlIGFuaW1hdGlvblxuXHRcdFx0XHR0d2Vlbi5lbmQgPSBwYXJ0c1sgMSBdID9cblx0XHRcdFx0XHRzdGFydCArICggcGFydHNbIDEgXSArIDEgKSAqIHBhcnRzWyAyIF0gOlxuXHRcdFx0XHRcdCtwYXJ0c1sgMiBdO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdHdlZW47XG5cdFx0fSBdXG5cdH07XG5cbi8vIEFuaW1hdGlvbnMgY3JlYXRlZCBzeW5jaHJvbm91c2x5IHdpbGwgcnVuIHN5bmNocm9ub3VzbHlcbmZ1bmN0aW9uIGNyZWF0ZUZ4Tm93KCkge1xuXHRzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuXHRcdGZ4Tm93ID0gdW5kZWZpbmVkO1xuXHR9KTtcblx0cmV0dXJuICggZnhOb3cgPSBqUXVlcnkubm93KCkgKTtcbn1cblxuLy8gR2VuZXJhdGUgcGFyYW1ldGVycyB0byBjcmVhdGUgYSBzdGFuZGFyZCBhbmltYXRpb25cbmZ1bmN0aW9uIGdlbkZ4KCB0eXBlLCBpbmNsdWRlV2lkdGggKSB7XG5cdHZhciB3aGljaCxcblx0XHRhdHRycyA9IHsgaGVpZ2h0OiB0eXBlIH0sXG5cdFx0aSA9IDA7XG5cblx0Ly8gaWYgd2UgaW5jbHVkZSB3aWR0aCwgc3RlcCB2YWx1ZSBpcyAxIHRvIGRvIGFsbCBjc3NFeHBhbmQgdmFsdWVzLFxuXHQvLyBpZiB3ZSBkb24ndCBpbmNsdWRlIHdpZHRoLCBzdGVwIHZhbHVlIGlzIDIgdG8gc2tpcCBvdmVyIExlZnQgYW5kIFJpZ2h0XG5cdGluY2x1ZGVXaWR0aCA9IGluY2x1ZGVXaWR0aCA/IDEgOiAwO1xuXHRmb3IgKCA7IGkgPCA0IDsgaSArPSAyIC0gaW5jbHVkZVdpZHRoICkge1xuXHRcdHdoaWNoID0gY3NzRXhwYW5kWyBpIF07XG5cdFx0YXR0cnNbIFwibWFyZ2luXCIgKyB3aGljaCBdID0gYXR0cnNbIFwicGFkZGluZ1wiICsgd2hpY2ggXSA9IHR5cGU7XG5cdH1cblxuXHRpZiAoIGluY2x1ZGVXaWR0aCApIHtcblx0XHRhdHRycy5vcGFjaXR5ID0gYXR0cnMud2lkdGggPSB0eXBlO1xuXHR9XG5cblx0cmV0dXJuIGF0dHJzO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVUd2VlbiggdmFsdWUsIHByb3AsIGFuaW1hdGlvbiApIHtcblx0dmFyIHR3ZWVuLFxuXHRcdGNvbGxlY3Rpb24gPSAoIHR3ZWVuZXJzWyBwcm9wIF0gfHwgW10gKS5jb25jYXQoIHR3ZWVuZXJzWyBcIipcIiBdICksXG5cdFx0aW5kZXggPSAwLFxuXHRcdGxlbmd0aCA9IGNvbGxlY3Rpb24ubGVuZ3RoO1xuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdGlmICggKHR3ZWVuID0gY29sbGVjdGlvblsgaW5kZXggXS5jYWxsKCBhbmltYXRpb24sIHByb3AsIHZhbHVlICkpICkge1xuXG5cdFx0XHQvLyB3ZSdyZSBkb25lIHdpdGggdGhpcyBwcm9wZXJ0eVxuXHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBkZWZhdWx0UHJlZmlsdGVyKCBlbGVtLCBwcm9wcywgb3B0cyApIHtcblx0LyoganNoaW50IHZhbGlkdGhpczogdHJ1ZSAqL1xuXHR2YXIgcHJvcCwgdmFsdWUsIHRvZ2dsZSwgdHdlZW4sIGhvb2tzLCBvbGRmaXJlLCBkaXNwbGF5LCBjaGVja0Rpc3BsYXksXG5cdFx0YW5pbSA9IHRoaXMsXG5cdFx0b3JpZyA9IHt9LFxuXHRcdHN0eWxlID0gZWxlbS5zdHlsZSxcblx0XHRoaWRkZW4gPSBlbGVtLm5vZGVUeXBlICYmIGlzSGlkZGVuKCBlbGVtICksXG5cdFx0ZGF0YVNob3cgPSBqUXVlcnkuX2RhdGEoIGVsZW0sIFwiZnhzaG93XCIgKTtcblxuXHQvLyBoYW5kbGUgcXVldWU6IGZhbHNlIHByb21pc2VzXG5cdGlmICggIW9wdHMucXVldWUgKSB7XG5cdFx0aG9va3MgPSBqUXVlcnkuX3F1ZXVlSG9va3MoIGVsZW0sIFwiZnhcIiApO1xuXHRcdGlmICggaG9va3MudW5xdWV1ZWQgPT0gbnVsbCApIHtcblx0XHRcdGhvb2tzLnVucXVldWVkID0gMDtcblx0XHRcdG9sZGZpcmUgPSBob29rcy5lbXB0eS5maXJlO1xuXHRcdFx0aG9va3MuZW1wdHkuZmlyZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoICFob29rcy51bnF1ZXVlZCApIHtcblx0XHRcdFx0XHRvbGRmaXJlKCk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0fVxuXHRcdGhvb2tzLnVucXVldWVkKys7XG5cblx0XHRhbmltLmFsd2F5cyhmdW5jdGlvbigpIHtcblx0XHRcdC8vIGRvaW5nIHRoaXMgbWFrZXMgc3VyZSB0aGF0IHRoZSBjb21wbGV0ZSBoYW5kbGVyIHdpbGwgYmUgY2FsbGVkXG5cdFx0XHQvLyBiZWZvcmUgdGhpcyBjb21wbGV0ZXNcblx0XHRcdGFuaW0uYWx3YXlzKGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRob29rcy51bnF1ZXVlZC0tO1xuXHRcdFx0XHRpZiAoICFqUXVlcnkucXVldWUoIGVsZW0sIFwiZnhcIiApLmxlbmd0aCApIHtcblx0XHRcdFx0XHRob29rcy5lbXB0eS5maXJlKCk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdH0pO1xuXHR9XG5cblx0Ly8gaGVpZ2h0L3dpZHRoIG92ZXJmbG93IHBhc3Ncblx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICYmICggXCJoZWlnaHRcIiBpbiBwcm9wcyB8fCBcIndpZHRoXCIgaW4gcHJvcHMgKSApIHtcblx0XHQvLyBNYWtlIHN1cmUgdGhhdCBub3RoaW5nIHNuZWFrcyBvdXRcblx0XHQvLyBSZWNvcmQgYWxsIDMgb3ZlcmZsb3cgYXR0cmlidXRlcyBiZWNhdXNlIElFIGRvZXMgbm90XG5cdFx0Ly8gY2hhbmdlIHRoZSBvdmVyZmxvdyBhdHRyaWJ1dGUgd2hlbiBvdmVyZmxvd1ggYW5kXG5cdFx0Ly8gb3ZlcmZsb3dZIGFyZSBzZXQgdG8gdGhlIHNhbWUgdmFsdWVcblx0XHRvcHRzLm92ZXJmbG93ID0gWyBzdHlsZS5vdmVyZmxvdywgc3R5bGUub3ZlcmZsb3dYLCBzdHlsZS5vdmVyZmxvd1kgXTtcblxuXHRcdC8vIFNldCBkaXNwbGF5IHByb3BlcnR5IHRvIGlubGluZS1ibG9jayBmb3IgaGVpZ2h0L3dpZHRoXG5cdFx0Ly8gYW5pbWF0aW9ucyBvbiBpbmxpbmUgZWxlbWVudHMgdGhhdCBhcmUgaGF2aW5nIHdpZHRoL2hlaWdodCBhbmltYXRlZFxuXHRcdGRpc3BsYXkgPSBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApO1xuXG5cdFx0Ly8gVGVzdCBkZWZhdWx0IGRpc3BsYXkgaWYgZGlzcGxheSBpcyBjdXJyZW50bHkgXCJub25lXCJcblx0XHRjaGVja0Rpc3BsYXkgPSBkaXNwbGF5ID09PSBcIm5vbmVcIiA/XG5cdFx0XHRqUXVlcnkuX2RhdGEoIGVsZW0sIFwib2xkZGlzcGxheVwiICkgfHwgZGVmYXVsdERpc3BsYXkoIGVsZW0ubm9kZU5hbWUgKSA6IGRpc3BsYXk7XG5cblx0XHRpZiAoIGNoZWNrRGlzcGxheSA9PT0gXCJpbmxpbmVcIiAmJiBqUXVlcnkuY3NzKCBlbGVtLCBcImZsb2F0XCIgKSA9PT0gXCJub25lXCIgKSB7XG5cblx0XHRcdC8vIGlubGluZS1sZXZlbCBlbGVtZW50cyBhY2NlcHQgaW5saW5lLWJsb2NrO1xuXHRcdFx0Ly8gYmxvY2stbGV2ZWwgZWxlbWVudHMgbmVlZCB0byBiZSBpbmxpbmUgd2l0aCBsYXlvdXRcblx0XHRcdGlmICggIXN1cHBvcnQuaW5saW5lQmxvY2tOZWVkc0xheW91dCB8fCBkZWZhdWx0RGlzcGxheSggZWxlbS5ub2RlTmFtZSApID09PSBcImlubGluZVwiICkge1xuXHRcdFx0XHRzdHlsZS5kaXNwbGF5ID0gXCJpbmxpbmUtYmxvY2tcIjtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHN0eWxlLnpvb20gPSAxO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGlmICggb3B0cy5vdmVyZmxvdyApIHtcblx0XHRzdHlsZS5vdmVyZmxvdyA9IFwiaGlkZGVuXCI7XG5cdFx0aWYgKCAhc3VwcG9ydC5zaHJpbmtXcmFwQmxvY2tzKCkgKSB7XG5cdFx0XHRhbmltLmFsd2F5cyhmdW5jdGlvbigpIHtcblx0XHRcdFx0c3R5bGUub3ZlcmZsb3cgPSBvcHRzLm92ZXJmbG93WyAwIF07XG5cdFx0XHRcdHN0eWxlLm92ZXJmbG93WCA9IG9wdHMub3ZlcmZsb3dbIDEgXTtcblx0XHRcdFx0c3R5bGUub3ZlcmZsb3dZID0gb3B0cy5vdmVyZmxvd1sgMiBdO1xuXHRcdFx0fSk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gc2hvdy9oaWRlIHBhc3Ncblx0Zm9yICggcHJvcCBpbiBwcm9wcyApIHtcblx0XHR2YWx1ZSA9IHByb3BzWyBwcm9wIF07XG5cdFx0aWYgKCByZnh0eXBlcy5leGVjKCB2YWx1ZSApICkge1xuXHRcdFx0ZGVsZXRlIHByb3BzWyBwcm9wIF07XG5cdFx0XHR0b2dnbGUgPSB0b2dnbGUgfHwgdmFsdWUgPT09IFwidG9nZ2xlXCI7XG5cdFx0XHRpZiAoIHZhbHVlID09PSAoIGhpZGRlbiA/IFwiaGlkZVwiIDogXCJzaG93XCIgKSApIHtcblxuXHRcdFx0XHQvLyBJZiB0aGVyZSBpcyBkYXRhU2hvdyBsZWZ0IG92ZXIgZnJvbSBhIHN0b3BwZWQgaGlkZSBvciBzaG93IGFuZCB3ZSBhcmUgZ29pbmcgdG8gcHJvY2VlZCB3aXRoIHNob3csIHdlIHNob3VsZCBwcmV0ZW5kIHRvIGJlIGhpZGRlblxuXHRcdFx0XHRpZiAoIHZhbHVlID09PSBcInNob3dcIiAmJiBkYXRhU2hvdyAmJiBkYXRhU2hvd1sgcHJvcCBdICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0aGlkZGVuID0gdHJ1ZTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0b3JpZ1sgcHJvcCBdID0gZGF0YVNob3cgJiYgZGF0YVNob3dbIHByb3AgXSB8fCBqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AgKTtcblxuXHRcdC8vIEFueSBub24tZnggdmFsdWUgc3RvcHMgdXMgZnJvbSByZXN0b3JpbmcgdGhlIG9yaWdpbmFsIGRpc3BsYXkgdmFsdWVcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZGlzcGxheSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdH1cblxuXHRpZiAoICFqUXVlcnkuaXNFbXB0eU9iamVjdCggb3JpZyApICkge1xuXHRcdGlmICggZGF0YVNob3cgKSB7XG5cdFx0XHRpZiAoIFwiaGlkZGVuXCIgaW4gZGF0YVNob3cgKSB7XG5cdFx0XHRcdGhpZGRlbiA9IGRhdGFTaG93LmhpZGRlbjtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0ZGF0YVNob3cgPSBqUXVlcnkuX2RhdGEoIGVsZW0sIFwiZnhzaG93XCIsIHt9ICk7XG5cdFx0fVxuXG5cdFx0Ly8gc3RvcmUgc3RhdGUgaWYgaXRzIHRvZ2dsZSAtIGVuYWJsZXMgLnN0b3AoKS50b2dnbGUoKSB0byBcInJldmVyc2VcIlxuXHRcdGlmICggdG9nZ2xlICkge1xuXHRcdFx0ZGF0YVNob3cuaGlkZGVuID0gIWhpZGRlbjtcblx0XHR9XG5cdFx0aWYgKCBoaWRkZW4gKSB7XG5cdFx0XHRqUXVlcnkoIGVsZW0gKS5zaG93KCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGFuaW0uZG9uZShmdW5jdGlvbigpIHtcblx0XHRcdFx0alF1ZXJ5KCBlbGVtICkuaGlkZSgpO1xuXHRcdFx0fSk7XG5cdFx0fVxuXHRcdGFuaW0uZG9uZShmdW5jdGlvbigpIHtcblx0XHRcdHZhciBwcm9wO1xuXHRcdFx0alF1ZXJ5Ll9yZW1vdmVEYXRhKCBlbGVtLCBcImZ4c2hvd1wiICk7XG5cdFx0XHRmb3IgKCBwcm9wIGluIG9yaWcgKSB7XG5cdFx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCwgb3JpZ1sgcHJvcCBdICk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0Zm9yICggcHJvcCBpbiBvcmlnICkge1xuXHRcdFx0dHdlZW4gPSBjcmVhdGVUd2VlbiggaGlkZGVuID8gZGF0YVNob3dbIHByb3AgXSA6IDAsIHByb3AsIGFuaW0gKTtcblxuXHRcdFx0aWYgKCAhKCBwcm9wIGluIGRhdGFTaG93ICkgKSB7XG5cdFx0XHRcdGRhdGFTaG93WyBwcm9wIF0gPSB0d2Vlbi5zdGFydDtcblx0XHRcdFx0aWYgKCBoaWRkZW4gKSB7XG5cdFx0XHRcdFx0dHdlZW4uZW5kID0gdHdlZW4uc3RhcnQ7XG5cdFx0XHRcdFx0dHdlZW4uc3RhcnQgPSBwcm9wID09PSBcIndpZHRoXCIgfHwgcHJvcCA9PT0gXCJoZWlnaHRcIiA/IDEgOiAwO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdC8vIElmIHRoaXMgaXMgYSBub29wIGxpa2UgLmhpZGUoKS5oaWRlKCksIHJlc3RvcmUgYW4gb3ZlcndyaXR0ZW4gZGlzcGxheSB2YWx1ZVxuXHR9IGVsc2UgaWYgKCAoZGlzcGxheSA9PT0gXCJub25lXCIgPyBkZWZhdWx0RGlzcGxheSggZWxlbS5ub2RlTmFtZSApIDogZGlzcGxheSkgPT09IFwiaW5saW5lXCIgKSB7XG5cdFx0c3R5bGUuZGlzcGxheSA9IGRpc3BsYXk7XG5cdH1cbn1cblxuZnVuY3Rpb24gcHJvcEZpbHRlciggcHJvcHMsIHNwZWNpYWxFYXNpbmcgKSB7XG5cdHZhciBpbmRleCwgbmFtZSwgZWFzaW5nLCB2YWx1ZSwgaG9va3M7XG5cblx0Ly8gY2FtZWxDYXNlLCBzcGVjaWFsRWFzaW5nIGFuZCBleHBhbmQgY3NzSG9vayBwYXNzXG5cdGZvciAoIGluZGV4IGluIHByb3BzICkge1xuXHRcdG5hbWUgPSBqUXVlcnkuY2FtZWxDYXNlKCBpbmRleCApO1xuXHRcdGVhc2luZyA9IHNwZWNpYWxFYXNpbmdbIG5hbWUgXTtcblx0XHR2YWx1ZSA9IHByb3BzWyBpbmRleCBdO1xuXHRcdGlmICggalF1ZXJ5LmlzQXJyYXkoIHZhbHVlICkgKSB7XG5cdFx0XHRlYXNpbmcgPSB2YWx1ZVsgMSBdO1xuXHRcdFx0dmFsdWUgPSBwcm9wc1sgaW5kZXggXSA9IHZhbHVlWyAwIF07XG5cdFx0fVxuXG5cdFx0aWYgKCBpbmRleCAhPT0gbmFtZSApIHtcblx0XHRcdHByb3BzWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdGRlbGV0ZSBwcm9wc1sgaW5kZXggXTtcblx0XHR9XG5cblx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdO1xuXHRcdGlmICggaG9va3MgJiYgXCJleHBhbmRcIiBpbiBob29rcyApIHtcblx0XHRcdHZhbHVlID0gaG9va3MuZXhwYW5kKCB2YWx1ZSApO1xuXHRcdFx0ZGVsZXRlIHByb3BzWyBuYW1lIF07XG5cblx0XHRcdC8vIG5vdCBxdWl0ZSAkLmV4dGVuZCwgdGhpcyB3b250IG92ZXJ3cml0ZSBrZXlzIGFscmVhZHkgcHJlc2VudC5cblx0XHRcdC8vIGFsc28gLSByZXVzaW5nICdpbmRleCcgZnJvbSBhYm92ZSBiZWNhdXNlIHdlIGhhdmUgdGhlIGNvcnJlY3QgXCJuYW1lXCJcblx0XHRcdGZvciAoIGluZGV4IGluIHZhbHVlICkge1xuXHRcdFx0XHRpZiAoICEoIGluZGV4IGluIHByb3BzICkgKSB7XG5cdFx0XHRcdFx0cHJvcHNbIGluZGV4IF0gPSB2YWx1ZVsgaW5kZXggXTtcblx0XHRcdFx0XHRzcGVjaWFsRWFzaW5nWyBpbmRleCBdID0gZWFzaW5nO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdHNwZWNpYWxFYXNpbmdbIG5hbWUgXSA9IGVhc2luZztcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gQW5pbWF0aW9uKCBlbGVtLCBwcm9wZXJ0aWVzLCBvcHRpb25zICkge1xuXHR2YXIgcmVzdWx0LFxuXHRcdHN0b3BwZWQsXG5cdFx0aW5kZXggPSAwLFxuXHRcdGxlbmd0aCA9IGFuaW1hdGlvblByZWZpbHRlcnMubGVuZ3RoLFxuXHRcdGRlZmVycmVkID0galF1ZXJ5LkRlZmVycmVkKCkuYWx3YXlzKCBmdW5jdGlvbigpIHtcblx0XHRcdC8vIGRvbid0IG1hdGNoIGVsZW0gaW4gdGhlIDphbmltYXRlZCBzZWxlY3RvclxuXHRcdFx0ZGVsZXRlIHRpY2suZWxlbTtcblx0XHR9KSxcblx0XHR0aWNrID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIHN0b3BwZWQgKSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHRcdHZhciBjdXJyZW50VGltZSA9IGZ4Tm93IHx8IGNyZWF0ZUZ4Tm93KCksXG5cdFx0XHRcdHJlbWFpbmluZyA9IE1hdGgubWF4KCAwLCBhbmltYXRpb24uc3RhcnRUaW1lICsgYW5pbWF0aW9uLmR1cmF0aW9uIC0gY3VycmVudFRpbWUgKSxcblx0XHRcdFx0Ly8gYXJjaGFpYyBjcmFzaCBidWcgd29uJ3QgYWxsb3cgdXMgdG8gdXNlIDEgLSAoIDAuNSB8fCAwICkgKCMxMjQ5Nylcblx0XHRcdFx0dGVtcCA9IHJlbWFpbmluZyAvIGFuaW1hdGlvbi5kdXJhdGlvbiB8fCAwLFxuXHRcdFx0XHRwZXJjZW50ID0gMSAtIHRlbXAsXG5cdFx0XHRcdGluZGV4ID0gMCxcblx0XHRcdFx0bGVuZ3RoID0gYW5pbWF0aW9uLnR3ZWVucy5sZW5ndGg7XG5cblx0XHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGggOyBpbmRleCsrICkge1xuXHRcdFx0XHRhbmltYXRpb24udHdlZW5zWyBpbmRleCBdLnJ1biggcGVyY2VudCApO1xuXHRcdFx0fVxuXG5cdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgcGVyY2VudCwgcmVtYWluaW5nIF0pO1xuXG5cdFx0XHRpZiAoIHBlcmNlbnQgPCAxICYmIGxlbmd0aCApIHtcblx0XHRcdFx0cmV0dXJuIHJlbWFpbmluZztcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiBdICk7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdGFuaW1hdGlvbiA9IGRlZmVycmVkLnByb21pc2Uoe1xuXHRcdFx0ZWxlbTogZWxlbSxcblx0XHRcdHByb3BzOiBqUXVlcnkuZXh0ZW5kKCB7fSwgcHJvcGVydGllcyApLFxuXHRcdFx0b3B0czogalF1ZXJ5LmV4dGVuZCggdHJ1ZSwgeyBzcGVjaWFsRWFzaW5nOiB7fSB9LCBvcHRpb25zICksXG5cdFx0XHRvcmlnaW5hbFByb3BlcnRpZXM6IHByb3BlcnRpZXMsXG5cdFx0XHRvcmlnaW5hbE9wdGlvbnM6IG9wdGlvbnMsXG5cdFx0XHRzdGFydFRpbWU6IGZ4Tm93IHx8IGNyZWF0ZUZ4Tm93KCksXG5cdFx0XHRkdXJhdGlvbjogb3B0aW9ucy5kdXJhdGlvbixcblx0XHRcdHR3ZWVuczogW10sXG5cdFx0XHRjcmVhdGVUd2VlbjogZnVuY3Rpb24oIHByb3AsIGVuZCApIHtcblx0XHRcdFx0dmFyIHR3ZWVuID0galF1ZXJ5LlR3ZWVuKCBlbGVtLCBhbmltYXRpb24ub3B0cywgcHJvcCwgZW5kLFxuXHRcdFx0XHRcdFx0YW5pbWF0aW9uLm9wdHMuc3BlY2lhbEVhc2luZ1sgcHJvcCBdIHx8IGFuaW1hdGlvbi5vcHRzLmVhc2luZyApO1xuXHRcdFx0XHRhbmltYXRpb24udHdlZW5zLnB1c2goIHR3ZWVuICk7XG5cdFx0XHRcdHJldHVybiB0d2Vlbjtcblx0XHRcdH0sXG5cdFx0XHRzdG9wOiBmdW5jdGlvbiggZ290b0VuZCApIHtcblx0XHRcdFx0dmFyIGluZGV4ID0gMCxcblx0XHRcdFx0XHQvLyBpZiB3ZSBhcmUgZ29pbmcgdG8gdGhlIGVuZCwgd2Ugd2FudCB0byBydW4gYWxsIHRoZSB0d2VlbnNcblx0XHRcdFx0XHQvLyBvdGhlcndpc2Ugd2Ugc2tpcCB0aGlzIHBhcnRcblx0XHRcdFx0XHRsZW5ndGggPSBnb3RvRW5kID8gYW5pbWF0aW9uLnR3ZWVucy5sZW5ndGggOiAwO1xuXHRcdFx0XHRpZiAoIHN0b3BwZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH1cblx0XHRcdFx0c3RvcHBlZCA9IHRydWU7XG5cdFx0XHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGggOyBpbmRleCsrICkge1xuXHRcdFx0XHRcdGFuaW1hdGlvbi50d2VlbnNbIGluZGV4IF0ucnVuKCAxICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyByZXNvbHZlIHdoZW4gd2UgcGxheWVkIHRoZSBsYXN0IGZyYW1lXG5cdFx0XHRcdC8vIG90aGVyd2lzZSwgcmVqZWN0XG5cdFx0XHRcdGlmICggZ290b0VuZCApIHtcblx0XHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggZWxlbSwgWyBhbmltYXRpb24sIGdvdG9FbmQgXSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGRlZmVycmVkLnJlamVjdFdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBnb3RvRW5kIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH1cblx0XHR9KSxcblx0XHRwcm9wcyA9IGFuaW1hdGlvbi5wcm9wcztcblxuXHRwcm9wRmlsdGVyKCBwcm9wcywgYW5pbWF0aW9uLm9wdHMuc3BlY2lhbEVhc2luZyApO1xuXG5cdGZvciAoIDsgaW5kZXggPCBsZW5ndGggOyBpbmRleCsrICkge1xuXHRcdHJlc3VsdCA9IGFuaW1hdGlvblByZWZpbHRlcnNbIGluZGV4IF0uY2FsbCggYW5pbWF0aW9uLCBlbGVtLCBwcm9wcywgYW5pbWF0aW9uLm9wdHMgKTtcblx0XHRpZiAoIHJlc3VsdCApIHtcblx0XHRcdHJldHVybiByZXN1bHQ7XG5cdFx0fVxuXHR9XG5cblx0alF1ZXJ5Lm1hcCggcHJvcHMsIGNyZWF0ZVR3ZWVuLCBhbmltYXRpb24gKTtcblxuXHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBhbmltYXRpb24ub3B0cy5zdGFydCApICkge1xuXHRcdGFuaW1hdGlvbi5vcHRzLnN0YXJ0LmNhbGwoIGVsZW0sIGFuaW1hdGlvbiApO1xuXHR9XG5cblx0alF1ZXJ5LmZ4LnRpbWVyKFxuXHRcdGpRdWVyeS5leHRlbmQoIHRpY2ssIHtcblx0XHRcdGVsZW06IGVsZW0sXG5cdFx0XHRhbmltOiBhbmltYXRpb24sXG5cdFx0XHRxdWV1ZTogYW5pbWF0aW9uLm9wdHMucXVldWVcblx0XHR9KVxuXHQpO1xuXG5cdC8vIGF0dGFjaCBjYWxsYmFja3MgZnJvbSBvcHRpb25zXG5cdHJldHVybiBhbmltYXRpb24ucHJvZ3Jlc3MoIGFuaW1hdGlvbi5vcHRzLnByb2dyZXNzIClcblx0XHQuZG9uZSggYW5pbWF0aW9uLm9wdHMuZG9uZSwgYW5pbWF0aW9uLm9wdHMuY29tcGxldGUgKVxuXHRcdC5mYWlsKCBhbmltYXRpb24ub3B0cy5mYWlsIClcblx0XHQuYWx3YXlzKCBhbmltYXRpb24ub3B0cy5hbHdheXMgKTtcbn1cblxualF1ZXJ5LkFuaW1hdGlvbiA9IGpRdWVyeS5leHRlbmQoIEFuaW1hdGlvbiwge1xuXHR0d2VlbmVyOiBmdW5jdGlvbiggcHJvcHMsIGNhbGxiYWNrICkge1xuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHByb3BzICkgKSB7XG5cdFx0XHRjYWxsYmFjayA9IHByb3BzO1xuXHRcdFx0cHJvcHMgPSBbIFwiKlwiIF07XG5cdFx0fSBlbHNlIHtcblx0XHRcdHByb3BzID0gcHJvcHMuc3BsaXQoXCIgXCIpO1xuXHRcdH1cblxuXHRcdHZhciBwcm9wLFxuXHRcdFx0aW5kZXggPSAwLFxuXHRcdFx0bGVuZ3RoID0gcHJvcHMubGVuZ3RoO1xuXG5cdFx0Zm9yICggOyBpbmRleCA8IGxlbmd0aCA7IGluZGV4KysgKSB7XG5cdFx0XHRwcm9wID0gcHJvcHNbIGluZGV4IF07XG5cdFx0XHR0d2VlbmVyc1sgcHJvcCBdID0gdHdlZW5lcnNbIHByb3AgXSB8fCBbXTtcblx0XHRcdHR3ZWVuZXJzWyBwcm9wIF0udW5zaGlmdCggY2FsbGJhY2sgKTtcblx0XHR9XG5cdH0sXG5cblx0cHJlZmlsdGVyOiBmdW5jdGlvbiggY2FsbGJhY2ssIHByZXBlbmQgKSB7XG5cdFx0aWYgKCBwcmVwZW5kICkge1xuXHRcdFx0YW5pbWF0aW9uUHJlZmlsdGVycy51bnNoaWZ0KCBjYWxsYmFjayApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRhbmltYXRpb25QcmVmaWx0ZXJzLnB1c2goIGNhbGxiYWNrICk7XG5cdFx0fVxuXHR9XG59KTtcblxualF1ZXJ5LnNwZWVkID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGZuICkge1xuXHR2YXIgb3B0ID0gc3BlZWQgJiYgdHlwZW9mIHNwZWVkID09PSBcIm9iamVjdFwiID8galF1ZXJ5LmV4dGVuZCgge30sIHNwZWVkICkgOiB7XG5cdFx0Y29tcGxldGU6IGZuIHx8ICFmbiAmJiBlYXNpbmcgfHxcblx0XHRcdGpRdWVyeS5pc0Z1bmN0aW9uKCBzcGVlZCApICYmIHNwZWVkLFxuXHRcdGR1cmF0aW9uOiBzcGVlZCxcblx0XHRlYXNpbmc6IGZuICYmIGVhc2luZyB8fCBlYXNpbmcgJiYgIWpRdWVyeS5pc0Z1bmN0aW9uKCBlYXNpbmcgKSAmJiBlYXNpbmdcblx0fTtcblxuXHRvcHQuZHVyYXRpb24gPSBqUXVlcnkuZngub2ZmID8gMCA6IHR5cGVvZiBvcHQuZHVyYXRpb24gPT09IFwibnVtYmVyXCIgPyBvcHQuZHVyYXRpb24gOlxuXHRcdG9wdC5kdXJhdGlvbiBpbiBqUXVlcnkuZnguc3BlZWRzID8galF1ZXJ5LmZ4LnNwZWVkc1sgb3B0LmR1cmF0aW9uIF0gOiBqUXVlcnkuZnguc3BlZWRzLl9kZWZhdWx0O1xuXG5cdC8vIG5vcm1hbGl6ZSBvcHQucXVldWUgLSB0cnVlL3VuZGVmaW5lZC9udWxsIC0+IFwiZnhcIlxuXHRpZiAoIG9wdC5xdWV1ZSA9PSBudWxsIHx8IG9wdC5xdWV1ZSA9PT0gdHJ1ZSApIHtcblx0XHRvcHQucXVldWUgPSBcImZ4XCI7XG5cdH1cblxuXHQvLyBRdWV1ZWluZ1xuXHRvcHQub2xkID0gb3B0LmNvbXBsZXRlO1xuXG5cdG9wdC5jb21wbGV0ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIG9wdC5vbGQgKSApIHtcblx0XHRcdG9wdC5vbGQuY2FsbCggdGhpcyApO1xuXHRcdH1cblxuXHRcdGlmICggb3B0LnF1ZXVlICkge1xuXHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIG9wdC5xdWV1ZSApO1xuXHRcdH1cblx0fTtcblxuXHRyZXR1cm4gb3B0O1xufTtcblxualF1ZXJ5LmZuLmV4dGVuZCh7XG5cdGZhZGVUbzogZnVuY3Rpb24oIHNwZWVkLCB0bywgZWFzaW5nLCBjYWxsYmFjayApIHtcblxuXHRcdC8vIHNob3cgYW55IGhpZGRlbiBlbGVtZW50cyBhZnRlciBzZXR0aW5nIG9wYWNpdHkgdG8gMFxuXHRcdHJldHVybiB0aGlzLmZpbHRlciggaXNIaWRkZW4gKS5jc3MoIFwib3BhY2l0eVwiLCAwICkuc2hvdygpXG5cblx0XHRcdC8vIGFuaW1hdGUgdG8gdGhlIHZhbHVlIHNwZWNpZmllZFxuXHRcdFx0LmVuZCgpLmFuaW1hdGUoeyBvcGFjaXR5OiB0byB9LCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApO1xuXHR9LFxuXHRhbmltYXRlOiBmdW5jdGlvbiggcHJvcCwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cdFx0dmFyIGVtcHR5ID0galF1ZXJ5LmlzRW1wdHlPYmplY3QoIHByb3AgKSxcblx0XHRcdG9wdGFsbCA9IGpRdWVyeS5zcGVlZCggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSxcblx0XHRcdGRvQW5pbWF0aW9uID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdC8vIE9wZXJhdGUgb24gYSBjb3B5IG9mIHByb3Agc28gcGVyLXByb3BlcnR5IGVhc2luZyB3b24ndCBiZSBsb3N0XG5cdFx0XHRcdHZhciBhbmltID0gQW5pbWF0aW9uKCB0aGlzLCBqUXVlcnkuZXh0ZW5kKCB7fSwgcHJvcCApLCBvcHRhbGwgKTtcblxuXHRcdFx0XHQvLyBFbXB0eSBhbmltYXRpb25zLCBvciBmaW5pc2hpbmcgcmVzb2x2ZXMgaW1tZWRpYXRlbHlcblx0XHRcdFx0aWYgKCBlbXB0eSB8fCBqUXVlcnkuX2RhdGEoIHRoaXMsIFwiZmluaXNoXCIgKSApIHtcblx0XHRcdFx0XHRhbmltLnN0b3AoIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHRcdGRvQW5pbWF0aW9uLmZpbmlzaCA9IGRvQW5pbWF0aW9uO1xuXG5cdFx0cmV0dXJuIGVtcHR5IHx8IG9wdGFsbC5xdWV1ZSA9PT0gZmFsc2UgP1xuXHRcdFx0dGhpcy5lYWNoKCBkb0FuaW1hdGlvbiApIDpcblx0XHRcdHRoaXMucXVldWUoIG9wdGFsbC5xdWV1ZSwgZG9BbmltYXRpb24gKTtcblx0fSxcblx0c3RvcDogZnVuY3Rpb24oIHR5cGUsIGNsZWFyUXVldWUsIGdvdG9FbmQgKSB7XG5cdFx0dmFyIHN0b3BRdWV1ZSA9IGZ1bmN0aW9uKCBob29rcyApIHtcblx0XHRcdHZhciBzdG9wID0gaG9va3Muc3RvcDtcblx0XHRcdGRlbGV0ZSBob29rcy5zdG9wO1xuXHRcdFx0c3RvcCggZ290b0VuZCApO1xuXHRcdH07XG5cblx0XHRpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0Z290b0VuZCA9IGNsZWFyUXVldWU7XG5cdFx0XHRjbGVhclF1ZXVlID0gdHlwZTtcblx0XHRcdHR5cGUgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGlmICggY2xlYXJRdWV1ZSAmJiB0eXBlICE9PSBmYWxzZSApIHtcblx0XHRcdHRoaXMucXVldWUoIHR5cGUgfHwgXCJmeFwiLCBbXSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgZGVxdWV1ZSA9IHRydWUsXG5cdFx0XHRcdGluZGV4ID0gdHlwZSAhPSBudWxsICYmIHR5cGUgKyBcInF1ZXVlSG9va3NcIixcblx0XHRcdFx0dGltZXJzID0galF1ZXJ5LnRpbWVycyxcblx0XHRcdFx0ZGF0YSA9IGpRdWVyeS5fZGF0YSggdGhpcyApO1xuXG5cdFx0XHRpZiAoIGluZGV4ICkge1xuXHRcdFx0XHRpZiAoIGRhdGFbIGluZGV4IF0gJiYgZGF0YVsgaW5kZXggXS5zdG9wICkge1xuXHRcdFx0XHRcdHN0b3BRdWV1ZSggZGF0YVsgaW5kZXggXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRmb3IgKCBpbmRleCBpbiBkYXRhICkge1xuXHRcdFx0XHRcdGlmICggZGF0YVsgaW5kZXggXSAmJiBkYXRhWyBpbmRleCBdLnN0b3AgJiYgcnJ1bi50ZXN0KCBpbmRleCApICkge1xuXHRcdFx0XHRcdFx0c3RvcFF1ZXVlKCBkYXRhWyBpbmRleCBdICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGZvciAoIGluZGV4ID0gdGltZXJzLmxlbmd0aDsgaW5kZXgtLTsgKSB7XG5cdFx0XHRcdGlmICggdGltZXJzWyBpbmRleCBdLmVsZW0gPT09IHRoaXMgJiYgKHR5cGUgPT0gbnVsbCB8fCB0aW1lcnNbIGluZGV4IF0ucXVldWUgPT09IHR5cGUpICkge1xuXHRcdFx0XHRcdHRpbWVyc1sgaW5kZXggXS5hbmltLnN0b3AoIGdvdG9FbmQgKTtcblx0XHRcdFx0XHRkZXF1ZXVlID0gZmFsc2U7XG5cdFx0XHRcdFx0dGltZXJzLnNwbGljZSggaW5kZXgsIDEgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBzdGFydCB0aGUgbmV4dCBpbiB0aGUgcXVldWUgaWYgdGhlIGxhc3Qgc3RlcCB3YXNuJ3QgZm9yY2VkXG5cdFx0XHQvLyB0aW1lcnMgY3VycmVudGx5IHdpbGwgY2FsbCB0aGVpciBjb21wbGV0ZSBjYWxsYmFja3MsIHdoaWNoIHdpbGwgZGVxdWV1ZVxuXHRcdFx0Ly8gYnV0IG9ubHkgaWYgdGhleSB3ZXJlIGdvdG9FbmRcblx0XHRcdGlmICggZGVxdWV1ZSB8fCAhZ290b0VuZCApIHtcblx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHRcdH1cblx0XHR9KTtcblx0fSxcblx0ZmluaXNoOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRpZiAoIHR5cGUgIT09IGZhbHNlICkge1xuXHRcdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGluZGV4LFxuXHRcdFx0XHRkYXRhID0galF1ZXJ5Ll9kYXRhKCB0aGlzICksXG5cdFx0XHRcdHF1ZXVlID0gZGF0YVsgdHlwZSArIFwicXVldWVcIiBdLFxuXHRcdFx0XHRob29rcyA9IGRhdGFbIHR5cGUgKyBcInF1ZXVlSG9va3NcIiBdLFxuXHRcdFx0XHR0aW1lcnMgPSBqUXVlcnkudGltZXJzLFxuXHRcdFx0XHRsZW5ndGggPSBxdWV1ZSA/IHF1ZXVlLmxlbmd0aCA6IDA7XG5cblx0XHRcdC8vIGVuYWJsZSBmaW5pc2hpbmcgZmxhZyBvbiBwcml2YXRlIGRhdGFcblx0XHRcdGRhdGEuZmluaXNoID0gdHJ1ZTtcblxuXHRcdFx0Ly8gZW1wdHkgdGhlIHF1ZXVlIGZpcnN0XG5cdFx0XHRqUXVlcnkucXVldWUoIHRoaXMsIHR5cGUsIFtdICk7XG5cblx0XHRcdGlmICggaG9va3MgJiYgaG9va3Muc3RvcCApIHtcblx0XHRcdFx0aG9va3Muc3RvcC5jYWxsKCB0aGlzLCB0cnVlICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIGxvb2sgZm9yIGFueSBhY3RpdmUgYW5pbWF0aW9ucywgYW5kIGZpbmlzaCB0aGVtXG5cdFx0XHRmb3IgKCBpbmRleCA9IHRpbWVycy5sZW5ndGg7IGluZGV4LS07ICkge1xuXHRcdFx0XHRpZiAoIHRpbWVyc1sgaW5kZXggXS5lbGVtID09PSB0aGlzICYmIHRpbWVyc1sgaW5kZXggXS5xdWV1ZSA9PT0gdHlwZSApIHtcblx0XHRcdFx0XHR0aW1lcnNbIGluZGV4IF0uYW5pbS5zdG9wKCB0cnVlICk7XG5cdFx0XHRcdFx0dGltZXJzLnNwbGljZSggaW5kZXgsIDEgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBsb29rIGZvciBhbnkgYW5pbWF0aW9ucyBpbiB0aGUgb2xkIHF1ZXVlIGFuZCBmaW5pc2ggdGhlbVxuXHRcdFx0Zm9yICggaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdFx0aWYgKCBxdWV1ZVsgaW5kZXggXSAmJiBxdWV1ZVsgaW5kZXggXS5maW5pc2ggKSB7XG5cdFx0XHRcdFx0cXVldWVbIGluZGV4IF0uZmluaXNoLmNhbGwoIHRoaXMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyB0dXJuIG9mZiBmaW5pc2hpbmcgZmxhZ1xuXHRcdFx0ZGVsZXRlIGRhdGEuZmluaXNoO1xuXHRcdH0pO1xuXHR9XG59KTtcblxualF1ZXJ5LmVhY2goWyBcInRvZ2dsZVwiLCBcInNob3dcIiwgXCJoaWRlXCIgXSwgZnVuY3Rpb24oIGksIG5hbWUgKSB7XG5cdHZhciBjc3NGbiA9IGpRdWVyeS5mblsgbmFtZSBdO1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4gc3BlZWQgPT0gbnVsbCB8fCB0eXBlb2Ygc3BlZWQgPT09IFwiYm9vbGVhblwiID9cblx0XHRcdGNzc0ZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKSA6XG5cdFx0XHR0aGlzLmFuaW1hdGUoIGdlbkZ4KCBuYW1lLCB0cnVlICksIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7XG5cdH07XG59KTtcblxuLy8gR2VuZXJhdGUgc2hvcnRjdXRzIGZvciBjdXN0b20gYW5pbWF0aW9uc1xualF1ZXJ5LmVhY2goe1xuXHRzbGlkZURvd246IGdlbkZ4KFwic2hvd1wiKSxcblx0c2xpZGVVcDogZ2VuRngoXCJoaWRlXCIpLFxuXHRzbGlkZVRvZ2dsZTogZ2VuRngoXCJ0b2dnbGVcIiksXG5cdGZhZGVJbjogeyBvcGFjaXR5OiBcInNob3dcIiB9LFxuXHRmYWRlT3V0OiB7IG9wYWNpdHk6IFwiaGlkZVwiIH0sXG5cdGZhZGVUb2dnbGU6IHsgb3BhY2l0eTogXCJ0b2dnbGVcIiB9XG59LCBmdW5jdGlvbiggbmFtZSwgcHJvcHMgKSB7XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiB0aGlzLmFuaW1hdGUoIHByb3BzLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApO1xuXHR9O1xufSk7XG5cbmpRdWVyeS50aW1lcnMgPSBbXTtcbmpRdWVyeS5meC50aWNrID0gZnVuY3Rpb24oKSB7XG5cdHZhciB0aW1lcixcblx0XHR0aW1lcnMgPSBqUXVlcnkudGltZXJzLFxuXHRcdGkgPSAwO1xuXG5cdGZ4Tm93ID0galF1ZXJ5Lm5vdygpO1xuXG5cdGZvciAoIDsgaSA8IHRpbWVycy5sZW5ndGg7IGkrKyApIHtcblx0XHR0aW1lciA9IHRpbWVyc1sgaSBdO1xuXHRcdC8vIENoZWNrcyB0aGUgdGltZXIgaGFzIG5vdCBhbHJlYWR5IGJlZW4gcmVtb3ZlZFxuXHRcdGlmICggIXRpbWVyKCkgJiYgdGltZXJzWyBpIF0gPT09IHRpbWVyICkge1xuXHRcdFx0dGltZXJzLnNwbGljZSggaS0tLCAxICk7XG5cdFx0fVxuXHR9XG5cblx0aWYgKCAhdGltZXJzLmxlbmd0aCApIHtcblx0XHRqUXVlcnkuZnguc3RvcCgpO1xuXHR9XG5cdGZ4Tm93ID0gdW5kZWZpbmVkO1xufTtcblxualF1ZXJ5LmZ4LnRpbWVyID0gZnVuY3Rpb24oIHRpbWVyICkge1xuXHRqUXVlcnkudGltZXJzLnB1c2goIHRpbWVyICk7XG5cdGlmICggdGltZXIoKSApIHtcblx0XHRqUXVlcnkuZnguc3RhcnQoKTtcblx0fSBlbHNlIHtcblx0XHRqUXVlcnkudGltZXJzLnBvcCgpO1xuXHR9XG59O1xuXG5qUXVlcnkuZnguaW50ZXJ2YWwgPSAxMztcblxualF1ZXJ5LmZ4LnN0YXJ0ID0gZnVuY3Rpb24oKSB7XG5cdGlmICggIXRpbWVySWQgKSB7XG5cdFx0dGltZXJJZCA9IHNldEludGVydmFsKCBqUXVlcnkuZngudGljaywgalF1ZXJ5LmZ4LmludGVydmFsICk7XG5cdH1cbn07XG5cbmpRdWVyeS5meC5zdG9wID0gZnVuY3Rpb24oKSB7XG5cdGNsZWFySW50ZXJ2YWwoIHRpbWVySWQgKTtcblx0dGltZXJJZCA9IG51bGw7XG59O1xuXG5qUXVlcnkuZnguc3BlZWRzID0ge1xuXHRzbG93OiA2MDAsXG5cdGZhc3Q6IDIwMCxcblx0Ly8gRGVmYXVsdCBzcGVlZFxuXHRfZGVmYXVsdDogNDAwXG59O1xuXG5cbi8vIEJhc2VkIG9mZiBvZiB0aGUgcGx1Z2luIGJ5IENsaW50IEhlbGZlcnMsIHdpdGggcGVybWlzc2lvbi5cbi8vIGh0dHA6Ly9ibGluZHNpZ25hbHMuY29tL2luZGV4LnBocC8yMDA5LzA3L2pxdWVyeS1kZWxheS9cbmpRdWVyeS5mbi5kZWxheSA9IGZ1bmN0aW9uKCB0aW1lLCB0eXBlICkge1xuXHR0aW1lID0galF1ZXJ5LmZ4ID8galF1ZXJ5LmZ4LnNwZWVkc1sgdGltZSBdIHx8IHRpbWUgOiB0aW1lO1xuXHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cblx0cmV0dXJuIHRoaXMucXVldWUoIHR5cGUsIGZ1bmN0aW9uKCBuZXh0LCBob29rcyApIHtcblx0XHR2YXIgdGltZW91dCA9IHNldFRpbWVvdXQoIG5leHQsIHRpbWUgKTtcblx0XHRob29rcy5zdG9wID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRjbGVhclRpbWVvdXQoIHRpbWVvdXQgKTtcblx0XHR9O1xuXHR9KTtcbn07XG5cblxuKGZ1bmN0aW9uKCkge1xuXHQvLyBNaW5pZmllZDogdmFyIGEsYixjLGQsZVxuXHR2YXIgaW5wdXQsIGRpdiwgc2VsZWN0LCBhLCBvcHQ7XG5cblx0Ly8gU2V0dXBcblx0ZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApO1xuXHRkaXYuc2V0QXR0cmlidXRlKCBcImNsYXNzTmFtZVwiLCBcInRcIiApO1xuXHRkaXYuaW5uZXJIVE1MID0gXCIgIDxsaW5rLz48dGFibGU+PC90YWJsZT48YSBocmVmPScvYSc+YTwvYT48aW5wdXQgdHlwZT0nY2hlY2tib3gnLz5cIjtcblx0YSA9IGRpdi5nZXRFbGVtZW50c0J5VGFnTmFtZShcImFcIilbIDAgXTtcblxuXHQvLyBGaXJzdCBiYXRjaCBvZiB0ZXN0cy5cblx0c2VsZWN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNlbGVjdFwiKTtcblx0b3B0ID0gc2VsZWN0LmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwib3B0aW9uXCIpICk7XG5cdGlucHV0ID0gZGl2LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiaW5wdXRcIilbIDAgXTtcblxuXHRhLnN0eWxlLmNzc1RleHQgPSBcInRvcDoxcHhcIjtcblxuXHQvLyBUZXN0IHNldEF0dHJpYnV0ZSBvbiBjYW1lbENhc2UgY2xhc3MuIElmIGl0IHdvcmtzLCB3ZSBuZWVkIGF0dHJGaXhlcyB3aGVuIGRvaW5nIGdldC9zZXRBdHRyaWJ1dGUgKGllNi83KVxuXHRzdXBwb3J0LmdldFNldEF0dHJpYnV0ZSA9IGRpdi5jbGFzc05hbWUgIT09IFwidFwiO1xuXG5cdC8vIEdldCB0aGUgc3R5bGUgaW5mb3JtYXRpb24gZnJvbSBnZXRBdHRyaWJ1dGVcblx0Ly8gKElFIHVzZXMgLmNzc1RleHQgaW5zdGVhZClcblx0c3VwcG9ydC5zdHlsZSA9IC90b3AvLnRlc3QoIGEuZ2V0QXR0cmlidXRlKFwic3R5bGVcIikgKTtcblxuXHQvLyBNYWtlIHN1cmUgdGhhdCBVUkxzIGFyZW4ndCBtYW5pcHVsYXRlZFxuXHQvLyAoSUUgbm9ybWFsaXplcyBpdCBieSBkZWZhdWx0KVxuXHRzdXBwb3J0LmhyZWZOb3JtYWxpemVkID0gYS5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpID09PSBcIi9hXCI7XG5cblx0Ly8gQ2hlY2sgdGhlIGRlZmF1bHQgY2hlY2tib3gvcmFkaW8gdmFsdWUgKFwiXCIgb24gV2ViS2l0OyBcIm9uXCIgZWxzZXdoZXJlKVxuXHRzdXBwb3J0LmNoZWNrT24gPSAhIWlucHV0LnZhbHVlO1xuXG5cdC8vIE1ha2Ugc3VyZSB0aGF0IGEgc2VsZWN0ZWQtYnktZGVmYXVsdCBvcHRpb24gaGFzIGEgd29ya2luZyBzZWxlY3RlZCBwcm9wZXJ0eS5cblx0Ly8gKFdlYktpdCBkZWZhdWx0cyB0byBmYWxzZSBpbnN0ZWFkIG9mIHRydWUsIElFIHRvbywgaWYgaXQncyBpbiBhbiBvcHRncm91cClcblx0c3VwcG9ydC5vcHRTZWxlY3RlZCA9IG9wdC5zZWxlY3RlZDtcblxuXHQvLyBUZXN0cyBmb3IgZW5jdHlwZSBzdXBwb3J0IG9uIGEgZm9ybSAoIzY3NDMpXG5cdHN1cHBvcnQuZW5jdHlwZSA9ICEhZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImZvcm1cIikuZW5jdHlwZTtcblxuXHQvLyBNYWtlIHN1cmUgdGhhdCB0aGUgb3B0aW9ucyBpbnNpZGUgZGlzYWJsZWQgc2VsZWN0cyBhcmVuJ3QgbWFya2VkIGFzIGRpc2FibGVkXG5cdC8vIChXZWJLaXQgbWFya3MgdGhlbSBhcyBkaXNhYmxlZClcblx0c2VsZWN0LmRpc2FibGVkID0gdHJ1ZTtcblx0c3VwcG9ydC5vcHREaXNhYmxlZCA9ICFvcHQuZGlzYWJsZWQ7XG5cblx0Ly8gU3VwcG9ydDogSUU4IG9ubHlcblx0Ly8gQ2hlY2sgaWYgd2UgY2FuIHRydXN0IGdldEF0dHJpYnV0ZShcInZhbHVlXCIpXG5cdGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICk7XG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJ2YWx1ZVwiLCBcIlwiICk7XG5cdHN1cHBvcnQuaW5wdXQgPSBpbnB1dC5nZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiApID09PSBcIlwiO1xuXG5cdC8vIENoZWNrIGlmIGFuIGlucHV0IG1haW50YWlucyBpdHMgdmFsdWUgYWZ0ZXIgYmVjb21pbmcgYSByYWRpb1xuXHRpbnB1dC52YWx1ZSA9IFwidFwiO1xuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCBcInJhZGlvXCIgKTtcblx0c3VwcG9ydC5yYWRpb1ZhbHVlID0gaW5wdXQudmFsdWUgPT09IFwidFwiO1xufSkoKTtcblxuXG52YXIgcnJldHVybiA9IC9cXHIvZztcblxualF1ZXJ5LmZuLmV4dGVuZCh7XG5cdHZhbDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHZhciBob29rcywgcmV0LCBpc0Z1bmN0aW9uLFxuXHRcdFx0ZWxlbSA9IHRoaXNbMF07XG5cblx0XHRpZiAoICFhcmd1bWVudHMubGVuZ3RoICkge1xuXHRcdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0XHRob29rcyA9IGpRdWVyeS52YWxIb29rc1sgZWxlbS50eXBlIF0gfHwgalF1ZXJ5LnZhbEhvb2tzWyBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgXTtcblxuXHRcdFx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiYgKHJldCA9IGhvb2tzLmdldCggZWxlbSwgXCJ2YWx1ZVwiICkpICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldCA9IGVsZW0udmFsdWU7XG5cblx0XHRcdFx0cmV0dXJuIHR5cGVvZiByZXQgPT09IFwic3RyaW5nXCIgP1xuXHRcdFx0XHRcdC8vIGhhbmRsZSBtb3N0IGNvbW1vbiBzdHJpbmcgY2FzZXNcblx0XHRcdFx0XHRyZXQucmVwbGFjZShycmV0dXJuLCBcIlwiKSA6XG5cdFx0XHRcdFx0Ly8gaGFuZGxlIGNhc2VzIHdoZXJlIHZhbHVlIGlzIG51bGwvdW5kZWYgb3IgbnVtYmVyXG5cdFx0XHRcdFx0cmV0ID09IG51bGwgPyBcIlwiIDogcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aXNGdW5jdGlvbiA9IGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApO1xuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiggaSApIHtcblx0XHRcdHZhciB2YWw7XG5cblx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSAhPT0gMSApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGlzRnVuY3Rpb24gKSB7XG5cdFx0XHRcdHZhbCA9IHZhbHVlLmNhbGwoIHRoaXMsIGksIGpRdWVyeSggdGhpcyApLnZhbCgpICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR2YWwgPSB2YWx1ZTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVHJlYXQgbnVsbC91bmRlZmluZWQgYXMgXCJcIjsgY29udmVydCBudW1iZXJzIHRvIHN0cmluZ1xuXHRcdFx0aWYgKCB2YWwgPT0gbnVsbCApIHtcblx0XHRcdFx0dmFsID0gXCJcIjtcblx0XHRcdH0gZWxzZSBpZiAoIHR5cGVvZiB2YWwgPT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRcdHZhbCArPSBcIlwiO1xuXHRcdFx0fSBlbHNlIGlmICggalF1ZXJ5LmlzQXJyYXkoIHZhbCApICkge1xuXHRcdFx0XHR2YWwgPSBqUXVlcnkubWFwKCB2YWwsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdFx0XHRyZXR1cm4gdmFsdWUgPT0gbnVsbCA/IFwiXCIgOiB2YWx1ZSArIFwiXCI7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXG5cdFx0XHRob29rcyA9IGpRdWVyeS52YWxIb29rc1sgdGhpcy50eXBlIF0gfHwgalF1ZXJ5LnZhbEhvb2tzWyB0aGlzLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgXTtcblxuXHRcdFx0Ly8gSWYgc2V0IHJldHVybnMgdW5kZWZpbmVkLCBmYWxsIGJhY2sgdG8gbm9ybWFsIHNldHRpbmdcblx0XHRcdGlmICggIWhvb2tzIHx8ICEoXCJzZXRcIiBpbiBob29rcykgfHwgaG9va3Muc2V0KCB0aGlzLCB2YWwsIFwidmFsdWVcIiApID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHRoaXMudmFsdWUgPSB2YWw7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH1cbn0pO1xuXG5qUXVlcnkuZXh0ZW5kKHtcblx0dmFsSG9va3M6IHtcblx0XHRvcHRpb246IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciB2YWwgPSBqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBcInZhbHVlXCIgKTtcblx0XHRcdFx0cmV0dXJuIHZhbCAhPSBudWxsID9cblx0XHRcdFx0XHR2YWwgOlxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFMTAtMTErXG5cdFx0XHRcdFx0Ly8gb3B0aW9uLnRleHQgdGhyb3dzIGV4Y2VwdGlvbnMgKCMxNDY4NiwgIzE0ODU4KVxuXHRcdFx0XHRcdGpRdWVyeS50cmltKCBqUXVlcnkudGV4dCggZWxlbSApICk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRzZWxlY3Q6IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciB2YWx1ZSwgb3B0aW9uLFxuXHRcdFx0XHRcdG9wdGlvbnMgPSBlbGVtLm9wdGlvbnMsXG5cdFx0XHRcdFx0aW5kZXggPSBlbGVtLnNlbGVjdGVkSW5kZXgsXG5cdFx0XHRcdFx0b25lID0gZWxlbS50eXBlID09PSBcInNlbGVjdC1vbmVcIiB8fCBpbmRleCA8IDAsXG5cdFx0XHRcdFx0dmFsdWVzID0gb25lID8gbnVsbCA6IFtdLFxuXHRcdFx0XHRcdG1heCA9IG9uZSA/IGluZGV4ICsgMSA6IG9wdGlvbnMubGVuZ3RoLFxuXHRcdFx0XHRcdGkgPSBpbmRleCA8IDAgP1xuXHRcdFx0XHRcdFx0bWF4IDpcblx0XHRcdFx0XHRcdG9uZSA/IGluZGV4IDogMDtcblxuXHRcdFx0XHQvLyBMb29wIHRocm91Z2ggYWxsIHRoZSBzZWxlY3RlZCBvcHRpb25zXG5cdFx0XHRcdGZvciAoIDsgaSA8IG1heDsgaSsrICkge1xuXHRcdFx0XHRcdG9wdGlvbiA9IG9wdGlvbnNbIGkgXTtcblxuXHRcdFx0XHRcdC8vIG9sZElFIGRvZXNuJ3QgdXBkYXRlIHNlbGVjdGVkIGFmdGVyIGZvcm0gcmVzZXQgKCMyNTUxKVxuXHRcdFx0XHRcdGlmICggKCBvcHRpb24uc2VsZWN0ZWQgfHwgaSA9PT0gaW5kZXggKSAmJlxuXHRcdFx0XHRcdFx0XHQvLyBEb24ndCByZXR1cm4gb3B0aW9ucyB0aGF0IGFyZSBkaXNhYmxlZCBvciBpbiBhIGRpc2FibGVkIG9wdGdyb3VwXG5cdFx0XHRcdFx0XHRcdCggc3VwcG9ydC5vcHREaXNhYmxlZCA/ICFvcHRpb24uZGlzYWJsZWQgOiBvcHRpb24uZ2V0QXR0cmlidXRlKFwiZGlzYWJsZWRcIikgPT09IG51bGwgKSAmJlxuXHRcdFx0XHRcdFx0XHQoICFvcHRpb24ucGFyZW50Tm9kZS5kaXNhYmxlZCB8fCAhalF1ZXJ5Lm5vZGVOYW1lKCBvcHRpb24ucGFyZW50Tm9kZSwgXCJvcHRncm91cFwiICkgKSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gR2V0IHRoZSBzcGVjaWZpYyB2YWx1ZSBmb3IgdGhlIG9wdGlvblxuXHRcdFx0XHRcdFx0dmFsdWUgPSBqUXVlcnkoIG9wdGlvbiApLnZhbCgpO1xuXG5cdFx0XHRcdFx0XHQvLyBXZSBkb24ndCBuZWVkIGFuIGFycmF5IGZvciBvbmUgc2VsZWN0c1xuXHRcdFx0XHRcdFx0aWYgKCBvbmUgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gTXVsdGktU2VsZWN0cyByZXR1cm4gYW4gYXJyYXlcblx0XHRcdFx0XHRcdHZhbHVlcy5wdXNoKCB2YWx1ZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiB2YWx1ZXM7XG5cdFx0XHR9LFxuXG5cdFx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHRcdFx0dmFyIG9wdGlvblNldCwgb3B0aW9uLFxuXHRcdFx0XHRcdG9wdGlvbnMgPSBlbGVtLm9wdGlvbnMsXG5cdFx0XHRcdFx0dmFsdWVzID0galF1ZXJ5Lm1ha2VBcnJheSggdmFsdWUgKSxcblx0XHRcdFx0XHRpID0gb3B0aW9ucy5sZW5ndGg7XG5cblx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0b3B0aW9uID0gb3B0aW9uc1sgaSBdO1xuXG5cdFx0XHRcdFx0aWYgKCBqUXVlcnkuaW5BcnJheSggalF1ZXJ5LnZhbEhvb2tzLm9wdGlvbi5nZXQoIG9wdGlvbiApLCB2YWx1ZXMgKSA+PSAwICkge1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRTZcblx0XHRcdFx0XHRcdC8vIFdoZW4gbmV3IG9wdGlvbiBlbGVtZW50IGlzIGFkZGVkIHRvIHNlbGVjdCBib3ggd2UgbmVlZCB0b1xuXHRcdFx0XHRcdFx0Ly8gZm9yY2UgcmVmbG93IG9mIG5ld2x5IGFkZGVkIG5vZGUgaW4gb3JkZXIgdG8gd29ya2Fyb3VuZCBkZWxheVxuXHRcdFx0XHRcdFx0Ly8gb2YgaW5pdGlhbGl6YXRpb24gcHJvcGVydGllc1xuXHRcdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdFx0b3B0aW9uLnNlbGVjdGVkID0gb3B0aW9uU2V0ID0gdHJ1ZTtcblxuXHRcdFx0XHRcdFx0fSBjYXRjaCAoIF8gKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gV2lsbCBiZSBleGVjdXRlZCBvbmx5IGluIElFNlxuXHRcdFx0XHRcdFx0XHRvcHRpb24uc2Nyb2xsSGVpZ2h0O1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdG9wdGlvbi5zZWxlY3RlZCA9IGZhbHNlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEZvcmNlIGJyb3dzZXJzIHRvIGJlaGF2ZSBjb25zaXN0ZW50bHkgd2hlbiBub24tbWF0Y2hpbmcgdmFsdWUgaXMgc2V0XG5cdFx0XHRcdGlmICggIW9wdGlvblNldCApIHtcblx0XHRcdFx0XHRlbGVtLnNlbGVjdGVkSW5kZXggPSAtMTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBvcHRpb25zO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufSk7XG5cbi8vIFJhZGlvcyBhbmQgY2hlY2tib3hlcyBnZXR0ZXIvc2V0dGVyXG5qUXVlcnkuZWFjaChbIFwicmFkaW9cIiwgXCJjaGVja2JveFwiIF0sIGZ1bmN0aW9uKCkge1xuXHRqUXVlcnkudmFsSG9va3NbIHRoaXMgXSA9IHtcblx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHRcdGlmICggalF1ZXJ5LmlzQXJyYXkoIHZhbHVlICkgKSB7XG5cdFx0XHRcdHJldHVybiAoIGVsZW0uY2hlY2tlZCA9IGpRdWVyeS5pbkFycmF5KCBqUXVlcnkoZWxlbSkudmFsKCksIHZhbHVlICkgPj0gMCApO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcblx0aWYgKCAhc3VwcG9ydC5jaGVja09uICkge1xuXHRcdGpRdWVyeS52YWxIb29rc1sgdGhpcyBdLmdldCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0Ly8gU3VwcG9ydDogV2Via2l0XG5cdFx0XHQvLyBcIlwiIGlzIHJldHVybmVkIGluc3RlYWQgb2YgXCJvblwiIGlmIGEgdmFsdWUgaXNuJ3Qgc3BlY2lmaWVkXG5cdFx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiKSA9PT0gbnVsbCA/IFwib25cIiA6IGVsZW0udmFsdWU7XG5cdFx0fTtcblx0fVxufSk7XG5cblxuXG5cbnZhciBub2RlSG9vaywgYm9vbEhvb2ssXG5cdGF0dHJIYW5kbGUgPSBqUXVlcnkuZXhwci5hdHRySGFuZGxlLFxuXHRydXNlRGVmYXVsdCA9IC9eKD86Y2hlY2tlZHxzZWxlY3RlZCkkL2ksXG5cdGdldFNldEF0dHJpYnV0ZSA9IHN1cHBvcnQuZ2V0U2V0QXR0cmlidXRlLFxuXHRnZXRTZXRJbnB1dCA9IHN1cHBvcnQuaW5wdXQ7XG5cbmpRdWVyeS5mbi5leHRlbmQoe1xuXHRhdHRyOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgalF1ZXJ5LmF0dHIsIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xuXHR9LFxuXG5cdHJlbW92ZUF0dHI6IGZ1bmN0aW9uKCBuYW1lICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkucmVtb3ZlQXR0ciggdGhpcywgbmFtZSApO1xuXHRcdH0pO1xuXHR9XG59KTtcblxualF1ZXJ5LmV4dGVuZCh7XG5cdGF0dHI6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcblx0XHR2YXIgaG9va3MsIHJldCxcblx0XHRcdG5UeXBlID0gZWxlbS5ub2RlVHlwZTtcblxuXHRcdC8vIGRvbid0IGdldC9zZXQgYXR0cmlidXRlcyBvbiB0ZXh0LCBjb21tZW50IGFuZCBhdHRyaWJ1dGUgbm9kZXNcblx0XHRpZiAoICFlbGVtIHx8IG5UeXBlID09PSAzIHx8IG5UeXBlID09PSA4IHx8IG5UeXBlID09PSAyICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIEZhbGxiYWNrIHRvIHByb3Agd2hlbiBhdHRyaWJ1dGVzIGFyZSBub3Qgc3VwcG9ydGVkXG5cdFx0aWYgKCB0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGUgPT09IHN0cnVuZGVmaW5lZCApIHtcblx0XHRcdHJldHVybiBqUXVlcnkucHJvcCggZWxlbSwgbmFtZSwgdmFsdWUgKTtcblx0XHR9XG5cblx0XHQvLyBBbGwgYXR0cmlidXRlcyBhcmUgbG93ZXJjYXNlXG5cdFx0Ly8gR3JhYiBuZWNlc3NhcnkgaG9vayBpZiBvbmUgaXMgZGVmaW5lZFxuXHRcdGlmICggblR5cGUgIT09IDEgfHwgIWpRdWVyeS5pc1hNTERvYyggZWxlbSApICkge1xuXHRcdFx0bmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRcdGhvb2tzID0galF1ZXJ5LmF0dHJIb29rc1sgbmFtZSBdIHx8XG5cdFx0XHRcdCggalF1ZXJ5LmV4cHIubWF0Y2guYm9vbC50ZXN0KCBuYW1lICkgPyBib29sSG9vayA6IG5vZGVIb29rICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRpZiAoIHZhbHVlID09PSBudWxsICkge1xuXHRcdFx0XHRqUXVlcnkucmVtb3ZlQXR0ciggZWxlbSwgbmFtZSApO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBob29rcyAmJiBcInNldFwiIGluIGhvb2tzICYmIChyZXQgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBuYW1lICkpICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBuYW1lLCB2YWx1ZSArIFwiXCIgKTtcblx0XHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJiAocmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBuYW1lICkpICE9PSBudWxsICkge1xuXHRcdFx0cmV0dXJuIHJldDtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXQgPSBqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBuYW1lICk7XG5cblx0XHRcdC8vIE5vbi1leGlzdGVudCBhdHRyaWJ1dGVzIHJldHVybiBudWxsLCB3ZSBub3JtYWxpemUgdG8gdW5kZWZpbmVkXG5cdFx0XHRyZXR1cm4gcmV0ID09IG51bGwgP1xuXHRcdFx0XHR1bmRlZmluZWQgOlxuXHRcdFx0XHRyZXQ7XG5cdFx0fVxuXHR9LFxuXG5cdHJlbW92ZUF0dHI6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHR2YXIgbmFtZSwgcHJvcE5hbWUsXG5cdFx0XHRpID0gMCxcblx0XHRcdGF0dHJOYW1lcyA9IHZhbHVlICYmIHZhbHVlLm1hdGNoKCBybm90d2hpdGUgKTtcblxuXHRcdGlmICggYXR0ck5hbWVzICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHR3aGlsZSAoIChuYW1lID0gYXR0ck5hbWVzW2krK10pICkge1xuXHRcdFx0XHRwcm9wTmFtZSA9IGpRdWVyeS5wcm9wRml4WyBuYW1lIF0gfHwgbmFtZTtcblxuXHRcdFx0XHQvLyBCb29sZWFuIGF0dHJpYnV0ZXMgZ2V0IHNwZWNpYWwgdHJlYXRtZW50ICgjMTA4NzApXG5cdFx0XHRcdGlmICggalF1ZXJ5LmV4cHIubWF0Y2guYm9vbC50ZXN0KCBuYW1lICkgKSB7XG5cdFx0XHRcdFx0Ly8gU2V0IGNvcnJlc3BvbmRpbmcgcHJvcGVydHkgdG8gZmFsc2Vcblx0XHRcdFx0XHRpZiAoIGdldFNldElucHV0ICYmIGdldFNldEF0dHJpYnV0ZSB8fCAhcnVzZURlZmF1bHQudGVzdCggbmFtZSApICkge1xuXHRcdFx0XHRcdFx0ZWxlbVsgcHJvcE5hbWUgXSA9IGZhbHNlO1xuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFPDlcblx0XHRcdFx0XHQvLyBBbHNvIGNsZWFyIGRlZmF1bHRDaGVja2VkL2RlZmF1bHRTZWxlY3RlZCAoaWYgYXBwcm9wcmlhdGUpXG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGVsZW1bIGpRdWVyeS5jYW1lbENhc2UoIFwiZGVmYXVsdC1cIiArIG5hbWUgKSBdID1cblx0XHRcdFx0XHRcdFx0ZWxlbVsgcHJvcE5hbWUgXSA9IGZhbHNlO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBTZWUgIzk2OTkgZm9yIGV4cGxhbmF0aW9uIG9mIHRoaXMgYXBwcm9hY2ggKHNldHRpbmcgZmlyc3QsIHRoZW4gcmVtb3ZhbClcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRqUXVlcnkuYXR0ciggZWxlbSwgbmFtZSwgXCJcIiApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0ZWxlbS5yZW1vdmVBdHRyaWJ1dGUoIGdldFNldEF0dHJpYnV0ZSA/IG5hbWUgOiBwcm9wTmFtZSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHRhdHRySG9va3M6IHtcblx0XHR0eXBlOiB7XG5cdFx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHRcdFx0aWYgKCAhc3VwcG9ydC5yYWRpb1ZhbHVlICYmIHZhbHVlID09PSBcInJhZGlvXCIgJiYgalF1ZXJ5Lm5vZGVOYW1lKGVsZW0sIFwiaW5wdXRcIikgKSB7XG5cdFx0XHRcdFx0Ly8gU2V0dGluZyB0aGUgdHlwZSBvbiBhIHJhZGlvIGJ1dHRvbiBhZnRlciB0aGUgdmFsdWUgcmVzZXRzIHRoZSB2YWx1ZSBpbiBJRTYtOVxuXHRcdFx0XHRcdC8vIFJlc2V0IHZhbHVlIHRvIGRlZmF1bHQgaW4gY2FzZSB0eXBlIGlzIHNldCBhZnRlciB2YWx1ZSBkdXJpbmcgY3JlYXRpb25cblx0XHRcdFx0XHR2YXIgdmFsID0gZWxlbS52YWx1ZTtcblx0XHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIHZhbHVlICk7XG5cdFx0XHRcdFx0aWYgKCB2YWwgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLnZhbHVlID0gdmFsO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cbn0pO1xuXG4vLyBIb29rIGZvciBib29sZWFuIGF0dHJpYnV0ZXNcbmJvb2xIb29rID0ge1xuXHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSwgbmFtZSApIHtcblx0XHRpZiAoIHZhbHVlID09PSBmYWxzZSApIHtcblx0XHRcdC8vIFJlbW92ZSBib29sZWFuIGF0dHJpYnV0ZXMgd2hlbiBzZXQgdG8gZmFsc2Vcblx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCBlbGVtLCBuYW1lICk7XG5cdFx0fSBlbHNlIGlmICggZ2V0U2V0SW5wdXQgJiYgZ2V0U2V0QXR0cmlidXRlIHx8ICFydXNlRGVmYXVsdC50ZXN0KCBuYW1lICkgKSB7XG5cdFx0XHQvLyBJRTw4IG5lZWRzIHRoZSAqcHJvcGVydHkqIG5hbWVcblx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCAhZ2V0U2V0QXR0cmlidXRlICYmIGpRdWVyeS5wcm9wRml4WyBuYW1lIF0gfHwgbmFtZSwgbmFtZSApO1xuXG5cdFx0Ly8gVXNlIGRlZmF1bHRDaGVja2VkIGFuZCBkZWZhdWx0U2VsZWN0ZWQgZm9yIG9sZElFXG5cdFx0fSBlbHNlIHtcblx0XHRcdGVsZW1bIGpRdWVyeS5jYW1lbENhc2UoIFwiZGVmYXVsdC1cIiArIG5hbWUgKSBdID0gZWxlbVsgbmFtZSBdID0gdHJ1ZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gbmFtZTtcblx0fVxufTtcblxuLy8gUmV0cmlldmUgYm9vbGVhbnMgc3BlY2lhbGx5XG5qUXVlcnkuZWFjaCggalF1ZXJ5LmV4cHIubWF0Y2guYm9vbC5zb3VyY2UubWF0Y2goIC9cXHcrL2cgKSwgZnVuY3Rpb24oIGksIG5hbWUgKSB7XG5cblx0dmFyIGdldHRlciA9IGF0dHJIYW5kbGVbIG5hbWUgXSB8fCBqUXVlcnkuZmluZC5hdHRyO1xuXG5cdGF0dHJIYW5kbGVbIG5hbWUgXSA9IGdldFNldElucHV0ICYmIGdldFNldEF0dHJpYnV0ZSB8fCAhcnVzZURlZmF1bHQudGVzdCggbmFtZSApID9cblx0XHRmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0XHR2YXIgcmV0LCBoYW5kbGU7XG5cdFx0XHRpZiAoICFpc1hNTCApIHtcblx0XHRcdFx0Ly8gQXZvaWQgYW4gaW5maW5pdGUgbG9vcCBieSB0ZW1wb3JhcmlseSByZW1vdmluZyB0aGlzIGZ1bmN0aW9uIGZyb20gdGhlIGdldHRlclxuXHRcdFx0XHRoYW5kbGUgPSBhdHRySGFuZGxlWyBuYW1lIF07XG5cdFx0XHRcdGF0dHJIYW5kbGVbIG5hbWUgXSA9IHJldDtcblx0XHRcdFx0cmV0ID0gZ2V0dGVyKCBlbGVtLCBuYW1lLCBpc1hNTCApICE9IG51bGwgP1xuXHRcdFx0XHRcdG5hbWUudG9Mb3dlckNhc2UoKSA6XG5cdFx0XHRcdFx0bnVsbDtcblx0XHRcdFx0YXR0ckhhbmRsZVsgbmFtZSBdID0gaGFuZGxlO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9IDpcblx0XHRmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0XHRpZiAoICFpc1hNTCApIHtcblx0XHRcdFx0cmV0dXJuIGVsZW1bIGpRdWVyeS5jYW1lbENhc2UoIFwiZGVmYXVsdC1cIiArIG5hbWUgKSBdID9cblx0XHRcdFx0XHRuYW1lLnRvTG93ZXJDYXNlKCkgOlxuXHRcdFx0XHRcdG51bGw7XG5cdFx0XHR9XG5cdFx0fTtcbn0pO1xuXG4vLyBmaXggb2xkSUUgYXR0cm9wZXJ0aWVzXG5pZiAoICFnZXRTZXRJbnB1dCB8fCAhZ2V0U2V0QXR0cmlidXRlICkge1xuXHRqUXVlcnkuYXR0ckhvb2tzLnZhbHVlID0ge1xuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlLCBuYW1lICkge1xuXHRcdFx0aWYgKCBqUXVlcnkubm9kZU5hbWUoIGVsZW0sIFwiaW5wdXRcIiApICkge1xuXHRcdFx0XHQvLyBEb2VzIG5vdCByZXR1cm4gc28gdGhhdCBzZXRBdHRyaWJ1dGUgaXMgYWxzbyB1c2VkXG5cdFx0XHRcdGVsZW0uZGVmYXVsdFZhbHVlID0gdmFsdWU7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHQvLyBVc2Ugbm9kZUhvb2sgaWYgZGVmaW5lZCAoIzE5NTQpOyBvdGhlcndpc2Ugc2V0QXR0cmlidXRlIGlzIGZpbmVcblx0XHRcdFx0cmV0dXJuIG5vZGVIb29rICYmIG5vZGVIb29rLnNldCggZWxlbSwgdmFsdWUsIG5hbWUgKTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG59XG5cbi8vIElFNi83IGRvIG5vdCBzdXBwb3J0IGdldHRpbmcvc2V0dGluZyBzb21lIGF0dHJpYnV0ZXMgd2l0aCBnZXQvc2V0QXR0cmlidXRlXG5pZiAoICFnZXRTZXRBdHRyaWJ1dGUgKSB7XG5cblx0Ly8gVXNlIHRoaXMgZm9yIGFueSBhdHRyaWJ1dGUgaW4gSUU2Lzdcblx0Ly8gVGhpcyBmaXhlcyBhbG1vc3QgZXZlcnkgSUU2LzcgaXNzdWVcblx0bm9kZUhvb2sgPSB7XG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUsIG5hbWUgKSB7XG5cdFx0XHQvLyBTZXQgdGhlIGV4aXN0aW5nIG9yIGNyZWF0ZSBhIG5ldyBhdHRyaWJ1dGUgbm9kZVxuXHRcdFx0dmFyIHJldCA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZSggbmFtZSApO1xuXHRcdFx0aWYgKCAhcmV0ICkge1xuXHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZU5vZGUoXG5cdFx0XHRcdFx0KHJldCA9IGVsZW0ub3duZXJEb2N1bWVudC5jcmVhdGVBdHRyaWJ1dGUoIG5hbWUgKSlcblx0XHRcdFx0KTtcblx0XHRcdH1cblxuXHRcdFx0cmV0LnZhbHVlID0gdmFsdWUgKz0gXCJcIjtcblxuXHRcdFx0Ly8gQnJlYWsgYXNzb2NpYXRpb24gd2l0aCBjbG9uZWQgZWxlbWVudHMgYnkgYWxzbyB1c2luZyBzZXRBdHRyaWJ1dGUgKCM5NjQ2KVxuXHRcdFx0aWYgKCBuYW1lID09PSBcInZhbHVlXCIgfHwgdmFsdWUgPT09IGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lICkgKSB7XG5cdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cblx0Ly8gU29tZSBhdHRyaWJ1dGVzIGFyZSBjb25zdHJ1Y3RlZCB3aXRoIGVtcHR5LXN0cmluZyB2YWx1ZXMgd2hlbiBub3QgZGVmaW5lZFxuXHRhdHRySGFuZGxlLmlkID0gYXR0ckhhbmRsZS5uYW1lID0gYXR0ckhhbmRsZS5jb29yZHMgPVxuXHRcdGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHRcdHZhciByZXQ7XG5cdFx0XHRpZiAoICFpc1hNTCApIHtcblx0XHRcdFx0cmV0dXJuIChyZXQgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoIG5hbWUgKSkgJiYgcmV0LnZhbHVlICE9PSBcIlwiID9cblx0XHRcdFx0XHRyZXQudmFsdWUgOlxuXHRcdFx0XHRcdG51bGw7XG5cdFx0XHR9XG5cdFx0fTtcblxuXHQvLyBGaXhpbmcgdmFsdWUgcmV0cmlldmFsIG9uIGEgYnV0dG9uIHJlcXVpcmVzIHRoaXMgbW9kdWxlXG5cdGpRdWVyeS52YWxIb29rcy5idXR0b24gPSB7XG5cdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblx0XHRcdHZhciByZXQgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoIG5hbWUgKTtcblx0XHRcdGlmICggcmV0ICYmIHJldC5zcGVjaWZpZWQgKSB7XG5cdFx0XHRcdHJldHVybiByZXQudmFsdWU7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRzZXQ6IG5vZGVIb29rLnNldFxuXHR9O1xuXG5cdC8vIFNldCBjb250ZW50ZWRpdGFibGUgdG8gZmFsc2Ugb24gcmVtb3ZhbHMoIzEwNDI5KVxuXHQvLyBTZXR0aW5nIHRvIGVtcHR5IHN0cmluZyB0aHJvd3MgYW4gZXJyb3IgYXMgYW4gaW52YWxpZCB2YWx1ZVxuXHRqUXVlcnkuYXR0ckhvb2tzLmNvbnRlbnRlZGl0YWJsZSA9IHtcblx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSwgbmFtZSApIHtcblx0XHRcdG5vZGVIb29rLnNldCggZWxlbSwgdmFsdWUgPT09IFwiXCIgPyBmYWxzZSA6IHZhbHVlLCBuYW1lICk7XG5cdFx0fVxuXHR9O1xuXG5cdC8vIFNldCB3aWR0aCBhbmQgaGVpZ2h0IHRvIGF1dG8gaW5zdGVhZCBvZiAwIG9uIGVtcHR5IHN0cmluZyggQnVnICM4MTUwIClcblx0Ly8gVGhpcyBpcyBmb3IgcmVtb3ZhbHNcblx0alF1ZXJ5LmVhY2goWyBcIndpZHRoXCIsIFwiaGVpZ2h0XCIgXSwgZnVuY3Rpb24oIGksIG5hbWUgKSB7XG5cdFx0alF1ZXJ5LmF0dHJIb29rc1sgbmFtZSBdID0ge1xuXHRcdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0XHRcdGlmICggdmFsdWUgPT09IFwiXCIgKSB7XG5cdFx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIG5hbWUsIFwiYXV0b1wiICk7XG5cdFx0XHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblx0fSk7XG59XG5cbmlmICggIXN1cHBvcnQuc3R5bGUgKSB7XG5cdGpRdWVyeS5hdHRySG9va3Muc3R5bGUgPSB7XG5cdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdC8vIFJldHVybiB1bmRlZmluZWQgaW4gdGhlIGNhc2Ugb2YgZW1wdHkgc3RyaW5nXG5cdFx0XHQvLyBOb3RlOiBJRSB1cHBlcmNhc2VzIGNzcyBwcm9wZXJ0eSBuYW1lcywgYnV0IGlmIHdlIHdlcmUgdG8gLnRvTG93ZXJDYXNlKClcblx0XHRcdC8vIC5jc3NUZXh0LCB0aGF0IHdvdWxkIGRlc3Ryb3kgY2FzZSBzZW5zdGl0aXZpdHkgaW4gVVJMJ3MsIGxpa2UgaW4gXCJiYWNrZ3JvdW5kXCJcblx0XHRcdHJldHVybiBlbGVtLnN0eWxlLmNzc1RleHQgfHwgdW5kZWZpbmVkO1xuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0XHRyZXR1cm4gKCBlbGVtLnN0eWxlLmNzc1RleHQgPSB2YWx1ZSArIFwiXCIgKTtcblx0XHR9XG5cdH07XG59XG5cblxuXG5cbnZhciByZm9jdXNhYmxlID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8YnV0dG9ufG9iamVjdCkkL2ksXG5cdHJjbGlja2FibGUgPSAvXig/OmF8YXJlYSkkL2k7XG5cbmpRdWVyeS5mbi5leHRlbmQoe1xuXHRwcm9wOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgalF1ZXJ5LnByb3AsIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xuXHR9LFxuXG5cdHJlbW92ZVByb3A6IGZ1bmN0aW9uKCBuYW1lICkge1xuXHRcdG5hbWUgPSBqUXVlcnkucHJvcEZpeFsgbmFtZSBdIHx8IG5hbWU7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcblx0XHRcdC8vIHRyeS9jYXRjaCBoYW5kbGVzIGNhc2VzIHdoZXJlIElFIGJhbGtzIChzdWNoIGFzIHJlbW92aW5nIGEgcHJvcGVydHkgb24gd2luZG93KVxuXHRcdFx0dHJ5IHtcblx0XHRcdFx0dGhpc1sgbmFtZSBdID0gdW5kZWZpbmVkO1xuXHRcdFx0XHRkZWxldGUgdGhpc1sgbmFtZSBdO1xuXHRcdFx0fSBjYXRjaCggZSApIHt9XG5cdFx0fSk7XG5cdH1cbn0pO1xuXG5qUXVlcnkuZXh0ZW5kKHtcblx0cHJvcEZpeDoge1xuXHRcdFwiZm9yXCI6IFwiaHRtbEZvclwiLFxuXHRcdFwiY2xhc3NcIjogXCJjbGFzc05hbWVcIlxuXHR9LFxuXG5cdHByb3A6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcblx0XHR2YXIgcmV0LCBob29rcywgbm90eG1sLFxuXHRcdFx0blR5cGUgPSBlbGVtLm5vZGVUeXBlO1xuXG5cdFx0Ly8gZG9uJ3QgZ2V0L3NldCBwcm9wZXJ0aWVzIG9uIHRleHQsIGNvbW1lbnQgYW5kIGF0dHJpYnV0ZSBub2Rlc1xuXHRcdGlmICggIWVsZW0gfHwgblR5cGUgPT09IDMgfHwgblR5cGUgPT09IDggfHwgblR5cGUgPT09IDIgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0bm90eG1sID0gblR5cGUgIT09IDEgfHwgIWpRdWVyeS5pc1hNTERvYyggZWxlbSApO1xuXG5cdFx0aWYgKCBub3R4bWwgKSB7XG5cdFx0XHQvLyBGaXggbmFtZSBhbmQgYXR0YWNoIGhvb2tzXG5cdFx0XHRuYW1lID0galF1ZXJ5LnByb3BGaXhbIG5hbWUgXSB8fCBuYW1lO1xuXHRcdFx0aG9va3MgPSBqUXVlcnkucHJvcEhvb2tzWyBuYW1lIF07XG5cdFx0fVxuXG5cdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0cmV0dXJuIGhvb2tzICYmIFwic2V0XCIgaW4gaG9va3MgJiYgKHJldCA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIG5hbWUgKSkgIT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdHJldCA6XG5cdFx0XHRcdCggZWxlbVsgbmFtZSBdID0gdmFsdWUgKTtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXR1cm4gaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJiAocmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBuYW1lICkpICE9PSBudWxsID9cblx0XHRcdFx0cmV0IDpcblx0XHRcdFx0ZWxlbVsgbmFtZSBdO1xuXHRcdH1cblx0fSxcblxuXHRwcm9wSG9va3M6IHtcblx0XHR0YWJJbmRleDoge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0Ly8gZWxlbS50YWJJbmRleCBkb2Vzbid0IGFsd2F5cyByZXR1cm4gdGhlIGNvcnJlY3QgdmFsdWUgd2hlbiBpdCBoYXNuJ3QgYmVlbiBleHBsaWNpdGx5IHNldFxuXHRcdFx0XHQvLyBodHRwOi8vZmx1aWRwcm9qZWN0Lm9yZy9ibG9nLzIwMDgvMDEvMDkvZ2V0dGluZy1zZXR0aW5nLWFuZC1yZW1vdmluZy10YWJpbmRleC12YWx1ZXMtd2l0aC1qYXZhc2NyaXB0L1xuXHRcdFx0XHQvLyBVc2UgcHJvcGVyIGF0dHJpYnV0ZSByZXRyaWV2YWwoIzEyMDcyKVxuXHRcdFx0XHR2YXIgdGFiaW5kZXggPSBqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBcInRhYmluZGV4XCIgKTtcblxuXHRcdFx0XHRyZXR1cm4gdGFiaW5kZXggP1xuXHRcdFx0XHRcdHBhcnNlSW50KCB0YWJpbmRleCwgMTAgKSA6XG5cdFx0XHRcdFx0cmZvY3VzYWJsZS50ZXN0KCBlbGVtLm5vZGVOYW1lICkgfHwgcmNsaWNrYWJsZS50ZXN0KCBlbGVtLm5vZGVOYW1lICkgJiYgZWxlbS5ocmVmID9cblx0XHRcdFx0XHRcdDAgOlxuXHRcdFx0XHRcdFx0LTE7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59KTtcblxuLy8gU29tZSBhdHRyaWJ1dGVzIHJlcXVpcmUgYSBzcGVjaWFsIGNhbGwgb24gSUVcbi8vIGh0dHA6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9tczUzNjQyOSUyOFZTLjg1JTI5LmFzcHhcbmlmICggIXN1cHBvcnQuaHJlZk5vcm1hbGl6ZWQgKSB7XG5cdC8vIGhyZWYvc3JjIHByb3BlcnR5IHNob3VsZCBnZXQgdGhlIGZ1bGwgbm9ybWFsaXplZCBVUkwgKCMxMDI5OS8jMTI5MTUpXG5cdGpRdWVyeS5lYWNoKFsgXCJocmVmXCIsIFwic3JjXCIgXSwgZnVuY3Rpb24oIGksIG5hbWUgKSB7XG5cdFx0alF1ZXJ5LnByb3BIb29rc1sgbmFtZSBdID0ge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lLCA0ICk7XG5cdFx0XHR9XG5cdFx0fTtcblx0fSk7XG59XG5cbi8vIFN1cHBvcnQ6IFNhZmFyaSwgSUU5K1xuLy8gbWlzLXJlcG9ydHMgdGhlIGRlZmF1bHQgc2VsZWN0ZWQgcHJvcGVydHkgb2YgYW4gb3B0aW9uXG4vLyBBY2Nlc3NpbmcgdGhlIHBhcmVudCdzIHNlbGVjdGVkSW5kZXggcHJvcGVydHkgZml4ZXMgaXRcbmlmICggIXN1cHBvcnQub3B0U2VsZWN0ZWQgKSB7XG5cdGpRdWVyeS5wcm9wSG9va3Muc2VsZWN0ZWQgPSB7XG5cdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cblx0XHRcdGlmICggcGFyZW50ICkge1xuXHRcdFx0XHRwYXJlbnQuc2VsZWN0ZWRJbmRleDtcblxuXHRcdFx0XHQvLyBNYWtlIHN1cmUgdGhhdCBpdCBhbHNvIHdvcmtzIHdpdGggb3B0Z3JvdXBzLCBzZWUgIzU3MDFcblx0XHRcdFx0aWYgKCBwYXJlbnQucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0XHRwYXJlbnQucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR9XG5cdH07XG59XG5cbmpRdWVyeS5lYWNoKFtcblx0XCJ0YWJJbmRleFwiLFxuXHRcInJlYWRPbmx5XCIsXG5cdFwibWF4TGVuZ3RoXCIsXG5cdFwiY2VsbFNwYWNpbmdcIixcblx0XCJjZWxsUGFkZGluZ1wiLFxuXHRcInJvd1NwYW5cIixcblx0XCJjb2xTcGFuXCIsXG5cdFwidXNlTWFwXCIsXG5cdFwiZnJhbWVCb3JkZXJcIixcblx0XCJjb250ZW50RWRpdGFibGVcIlxuXSwgZnVuY3Rpb24oKSB7XG5cdGpRdWVyeS5wcm9wRml4WyB0aGlzLnRvTG93ZXJDYXNlKCkgXSA9IHRoaXM7XG59KTtcblxuLy8gSUU2LzcgY2FsbCBlbmN0eXBlIGVuY29kaW5nXG5pZiAoICFzdXBwb3J0LmVuY3R5cGUgKSB7XG5cdGpRdWVyeS5wcm9wRml4LmVuY3R5cGUgPSBcImVuY29kaW5nXCI7XG59XG5cblxuXG5cbnZhciByY2xhc3MgPSAvW1xcdFxcclxcblxcZl0vZztcblxualF1ZXJ5LmZuLmV4dGVuZCh7XG5cdGFkZENsYXNzOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0dmFyIGNsYXNzZXMsIGVsZW0sIGN1ciwgY2xhenosIGosIGZpbmFsVmFsdWUsXG5cdFx0XHRpID0gMCxcblx0XHRcdGxlbiA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0cHJvY2VlZCA9IHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJiB2YWx1ZTtcblxuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCBqICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5hZGRDbGFzcyggdmFsdWUuY2FsbCggdGhpcywgaiwgdGhpcy5jbGFzc05hbWUgKSApO1xuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0aWYgKCBwcm9jZWVkICkge1xuXHRcdFx0Ly8gVGhlIGRpc2p1bmN0aW9uIGhlcmUgaXMgZm9yIGJldHRlciBjb21wcmVzc2liaWxpdHkgKHNlZSByZW1vdmVDbGFzcylcblx0XHRcdGNsYXNzZXMgPSAoIHZhbHVlIHx8IFwiXCIgKS5tYXRjaCggcm5vdHdoaXRlICkgfHwgW107XG5cblx0XHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRlbGVtID0gdGhpc1sgaSBdO1xuXHRcdFx0XHRjdXIgPSBlbGVtLm5vZGVUeXBlID09PSAxICYmICggZWxlbS5jbGFzc05hbWUgP1xuXHRcdFx0XHRcdCggXCIgXCIgKyBlbGVtLmNsYXNzTmFtZSArIFwiIFwiICkucmVwbGFjZSggcmNsYXNzLCBcIiBcIiApIDpcblx0XHRcdFx0XHRcIiBcIlxuXHRcdFx0XHQpO1xuXG5cdFx0XHRcdGlmICggY3VyICkge1xuXHRcdFx0XHRcdGogPSAwO1xuXHRcdFx0XHRcdHdoaWxlICggKGNsYXp6ID0gY2xhc3Nlc1tqKytdKSApIHtcblx0XHRcdFx0XHRcdGlmICggY3VyLmluZGV4T2YoIFwiIFwiICsgY2xhenogKyBcIiBcIiApIDwgMCApIHtcblx0XHRcdFx0XHRcdFx0Y3VyICs9IGNsYXp6ICsgXCIgXCI7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gb25seSBhc3NpZ24gaWYgZGlmZmVyZW50IHRvIGF2b2lkIHVubmVlZGVkIHJlbmRlcmluZy5cblx0XHRcdFx0XHRmaW5hbFZhbHVlID0galF1ZXJ5LnRyaW0oIGN1ciApO1xuXHRcdFx0XHRcdGlmICggZWxlbS5jbGFzc05hbWUgIT09IGZpbmFsVmFsdWUgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLmNsYXNzTmFtZSA9IGZpbmFsVmFsdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0cmVtb3ZlQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHR2YXIgY2xhc3NlcywgZWxlbSwgY3VyLCBjbGF6eiwgaiwgZmluYWxWYWx1ZSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0bGVuID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRwcm9jZWVkID0gYXJndW1lbnRzLmxlbmd0aCA9PT0gMCB8fCB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiYgdmFsdWU7XG5cblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiggaiApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkucmVtb3ZlQ2xhc3MoIHZhbHVlLmNhbGwoIHRoaXMsIGosIHRoaXMuY2xhc3NOYW1lICkgKTtcblx0XHRcdH0pO1xuXHRcdH1cblx0XHRpZiAoIHByb2NlZWQgKSB7XG5cdFx0XHRjbGFzc2VzID0gKCB2YWx1ZSB8fCBcIlwiICkubWF0Y2goIHJub3R3aGl0ZSApIHx8IFtdO1xuXG5cdFx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0ZWxlbSA9IHRoaXNbIGkgXTtcblx0XHRcdFx0Ly8gVGhpcyBleHByZXNzaW9uIGlzIGhlcmUgZm9yIGJldHRlciBjb21wcmVzc2liaWxpdHkgKHNlZSBhZGRDbGFzcylcblx0XHRcdFx0Y3VyID0gZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAoIGVsZW0uY2xhc3NOYW1lID9cblx0XHRcdFx0XHQoIFwiIFwiICsgZWxlbS5jbGFzc05hbWUgKyBcIiBcIiApLnJlcGxhY2UoIHJjbGFzcywgXCIgXCIgKSA6XG5cdFx0XHRcdFx0XCJcIlxuXHRcdFx0XHQpO1xuXG5cdFx0XHRcdGlmICggY3VyICkge1xuXHRcdFx0XHRcdGogPSAwO1xuXHRcdFx0XHRcdHdoaWxlICggKGNsYXp6ID0gY2xhc3Nlc1tqKytdKSApIHtcblx0XHRcdFx0XHRcdC8vIFJlbW92ZSAqYWxsKiBpbnN0YW5jZXNcblx0XHRcdFx0XHRcdHdoaWxlICggY3VyLmluZGV4T2YoIFwiIFwiICsgY2xhenogKyBcIiBcIiApID49IDAgKSB7XG5cdFx0XHRcdFx0XHRcdGN1ciA9IGN1ci5yZXBsYWNlKCBcIiBcIiArIGNsYXp6ICsgXCIgXCIsIFwiIFwiICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gb25seSBhc3NpZ24gaWYgZGlmZmVyZW50IHRvIGF2b2lkIHVubmVlZGVkIHJlbmRlcmluZy5cblx0XHRcdFx0XHRmaW5hbFZhbHVlID0gdmFsdWUgPyBqUXVlcnkudHJpbSggY3VyICkgOiBcIlwiO1xuXHRcdFx0XHRcdGlmICggZWxlbS5jbGFzc05hbWUgIT09IGZpbmFsVmFsdWUgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLmNsYXNzTmFtZSA9IGZpbmFsVmFsdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0dG9nZ2xlQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSwgc3RhdGVWYWwgKSB7XG5cdFx0dmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG5cblx0XHRpZiAoIHR5cGVvZiBzdGF0ZVZhbCA9PT0gXCJib29sZWFuXCIgJiYgdHlwZSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHJldHVybiBzdGF0ZVZhbCA/IHRoaXMuYWRkQ2xhc3MoIHZhbHVlICkgOiB0aGlzLnJlbW92ZUNsYXNzKCB2YWx1ZSApO1xuXHRcdH1cblxuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS50b2dnbGVDbGFzcyggdmFsdWUuY2FsbCh0aGlzLCBpLCB0aGlzLmNsYXNzTmFtZSwgc3RhdGVWYWwpLCBzdGF0ZVZhbCApO1xuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcblx0XHRcdGlmICggdHlwZSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdFx0Ly8gdG9nZ2xlIGluZGl2aWR1YWwgY2xhc3MgbmFtZXNcblx0XHRcdFx0dmFyIGNsYXNzTmFtZSxcblx0XHRcdFx0XHRpID0gMCxcblx0XHRcdFx0XHRzZWxmID0galF1ZXJ5KCB0aGlzICksXG5cdFx0XHRcdFx0Y2xhc3NOYW1lcyA9IHZhbHVlLm1hdGNoKCBybm90d2hpdGUgKSB8fCBbXTtcblxuXHRcdFx0XHR3aGlsZSAoIChjbGFzc05hbWUgPSBjbGFzc05hbWVzWyBpKysgXSkgKSB7XG5cdFx0XHRcdFx0Ly8gY2hlY2sgZWFjaCBjbGFzc05hbWUgZ2l2ZW4sIHNwYWNlIHNlcGFyYXRlZCBsaXN0XG5cdFx0XHRcdFx0aWYgKCBzZWxmLmhhc0NsYXNzKCBjbGFzc05hbWUgKSApIHtcblx0XHRcdFx0XHRcdHNlbGYucmVtb3ZlQ2xhc3MoIGNsYXNzTmFtZSApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRzZWxmLmFkZENsYXNzKCBjbGFzc05hbWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0Ly8gVG9nZ2xlIHdob2xlIGNsYXNzIG5hbWVcblx0XHRcdH0gZWxzZSBpZiAoIHR5cGUgPT09IHN0cnVuZGVmaW5lZCB8fCB0eXBlID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRcdFx0aWYgKCB0aGlzLmNsYXNzTmFtZSApIHtcblx0XHRcdFx0XHQvLyBzdG9yZSBjbGFzc05hbWUgaWYgc2V0XG5cdFx0XHRcdFx0alF1ZXJ5Ll9kYXRhKCB0aGlzLCBcIl9fY2xhc3NOYW1lX19cIiwgdGhpcy5jbGFzc05hbWUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIElmIHRoZSBlbGVtZW50IGhhcyBhIGNsYXNzIG5hbWUgb3IgaWYgd2UncmUgcGFzc2VkIFwiZmFsc2VcIixcblx0XHRcdFx0Ly8gdGhlbiByZW1vdmUgdGhlIHdob2xlIGNsYXNzbmFtZSAoaWYgdGhlcmUgd2FzIG9uZSwgdGhlIGFib3ZlIHNhdmVkIGl0KS5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIGJyaW5nIGJhY2sgd2hhdGV2ZXIgd2FzIHByZXZpb3VzbHkgc2F2ZWQgKGlmIGFueXRoaW5nKSxcblx0XHRcdFx0Ly8gZmFsbGluZyBiYWNrIHRvIHRoZSBlbXB0eSBzdHJpbmcgaWYgbm90aGluZyB3YXMgc3RvcmVkLlxuXHRcdFx0XHR0aGlzLmNsYXNzTmFtZSA9IHRoaXMuY2xhc3NOYW1lIHx8IHZhbHVlID09PSBmYWxzZSA/IFwiXCIgOiBqUXVlcnkuX2RhdGEoIHRoaXMsIFwiX19jbGFzc05hbWVfX1wiICkgfHwgXCJcIjtcblx0XHRcdH1cblx0XHR9KTtcblx0fSxcblxuXHRoYXNDbGFzczogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHZhciBjbGFzc05hbWUgPSBcIiBcIiArIHNlbGVjdG9yICsgXCIgXCIsXG5cdFx0XHRpID0gMCxcblx0XHRcdGwgPSB0aGlzLmxlbmd0aDtcblx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRpZiAoIHRoaXNbaV0ubm9kZVR5cGUgPT09IDEgJiYgKFwiIFwiICsgdGhpc1tpXS5jbGFzc05hbWUgKyBcIiBcIikucmVwbGFjZShyY2xhc3MsIFwiIFwiKS5pbmRleE9mKCBjbGFzc05hbWUgKSA+PSAwICkge1xuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn0pO1xuXG5cblxuXG4vLyBSZXR1cm4galF1ZXJ5IGZvciBhdHRyaWJ1dGVzLW9ubHkgaW5jbHVzaW9uXG5cblxualF1ZXJ5LmVhY2goIChcImJsdXIgZm9jdXMgZm9jdXNpbiBmb2N1c291dCBsb2FkIHJlc2l6ZSBzY3JvbGwgdW5sb2FkIGNsaWNrIGRibGNsaWNrIFwiICtcblx0XCJtb3VzZWRvd24gbW91c2V1cCBtb3VzZW1vdmUgbW91c2VvdmVyIG1vdXNlb3V0IG1vdXNlZW50ZXIgbW91c2VsZWF2ZSBcIiArXG5cdFwiY2hhbmdlIHNlbGVjdCBzdWJtaXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBlcnJvciBjb250ZXh0bWVudVwiKS5zcGxpdChcIiBcIiksIGZ1bmN0aW9uKCBpLCBuYW1lICkge1xuXG5cdC8vIEhhbmRsZSBldmVudCBiaW5kaW5nXG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiBhcmd1bWVudHMubGVuZ3RoID4gMCA/XG5cdFx0XHR0aGlzLm9uKCBuYW1lLCBudWxsLCBkYXRhLCBmbiApIDpcblx0XHRcdHRoaXMudHJpZ2dlciggbmFtZSApO1xuXHR9O1xufSk7XG5cbmpRdWVyeS5mbi5leHRlbmQoe1xuXHRob3ZlcjogZnVuY3Rpb24oIGZuT3ZlciwgZm5PdXQgKSB7XG5cdFx0cmV0dXJuIHRoaXMubW91c2VlbnRlciggZm5PdmVyICkubW91c2VsZWF2ZSggZm5PdXQgfHwgZm5PdmVyICk7XG5cdH0sXG5cblx0YmluZDogZnVuY3Rpb24oIHR5cGVzLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZXMsIG51bGwsIGRhdGEsIGZuICk7XG5cdH0sXG5cdHVuYmluZDogZnVuY3Rpb24oIHR5cGVzLCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vZmYoIHR5cGVzLCBudWxsLCBmbiApO1xuXHR9LFxuXG5cdGRlbGVnYXRlOiBmdW5jdGlvbiggc2VsZWN0b3IsIHR5cGVzLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApO1xuXHR9LFxuXHR1bmRlbGVnYXRlOiBmdW5jdGlvbiggc2VsZWN0b3IsIHR5cGVzLCBmbiApIHtcblx0XHQvLyAoIG5hbWVzcGFjZSApIG9yICggc2VsZWN0b3IsIHR5cGVzIFssIGZuXSApXG5cdFx0cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgPyB0aGlzLm9mZiggc2VsZWN0b3IsIFwiKipcIiApIDogdGhpcy5vZmYoIHR5cGVzLCBzZWxlY3RvciB8fCBcIioqXCIsIGZuICk7XG5cdH1cbn0pO1xuXG5cbnZhciBub25jZSA9IGpRdWVyeS5ub3coKTtcblxudmFyIHJxdWVyeSA9ICgvXFw/Lyk7XG5cblxuXG52YXIgcnZhbGlkdG9rZW5zID0gLygsKXwoXFxbfHspfCh9fF0pfFwiKD86W15cIlxcXFxcXHJcXG5dfFxcXFxbXCJcXFxcXFwvYmZucnRdfFxcXFx1W1xcZGEtZkEtRl17NH0pKlwiXFxzKjo/fHRydWV8ZmFsc2V8bnVsbHwtPyg/ITBcXGQpXFxkKyg/OlxcLlxcZCt8KSg/OltlRV1bKy1dP1xcZCt8KS9nO1xuXG5qUXVlcnkucGFyc2VKU09OID0gZnVuY3Rpb24oIGRhdGEgKSB7XG5cdC8vIEF0dGVtcHQgdG8gcGFyc2UgdXNpbmcgdGhlIG5hdGl2ZSBKU09OIHBhcnNlciBmaXJzdFxuXHRpZiAoIHdpbmRvdy5KU09OICYmIHdpbmRvdy5KU09OLnBhcnNlICkge1xuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgMi4zXG5cdFx0Ly8gV29ya2Fyb3VuZCBmYWlsdXJlIHRvIHN0cmluZy1jYXN0IG51bGwgaW5wdXRcblx0XHRyZXR1cm4gd2luZG93LkpTT04ucGFyc2UoIGRhdGEgKyBcIlwiICk7XG5cdH1cblxuXHR2YXIgcmVxdWlyZU5vbkNvbW1hLFxuXHRcdGRlcHRoID0gbnVsbCxcblx0XHRzdHIgPSBqUXVlcnkudHJpbSggZGF0YSArIFwiXCIgKTtcblxuXHQvLyBHdWFyZCBhZ2FpbnN0IGludmFsaWQgKGFuZCBwb3NzaWJseSBkYW5nZXJvdXMpIGlucHV0IGJ5IGVuc3VyaW5nIHRoYXQgbm90aGluZyByZW1haW5zXG5cdC8vIGFmdGVyIHJlbW92aW5nIHZhbGlkIHRva2Vuc1xuXHRyZXR1cm4gc3RyICYmICFqUXVlcnkudHJpbSggc3RyLnJlcGxhY2UoIHJ2YWxpZHRva2VucywgZnVuY3Rpb24oIHRva2VuLCBjb21tYSwgb3BlbiwgY2xvc2UgKSB7XG5cblx0XHQvLyBGb3JjZSB0ZXJtaW5hdGlvbiBpZiB3ZSBzZWUgYSBtaXNwbGFjZWQgY29tbWFcblx0XHRpZiAoIHJlcXVpcmVOb25Db21tYSAmJiBjb21tYSApIHtcblx0XHRcdGRlcHRoID0gMDtcblx0XHR9XG5cblx0XHQvLyBQZXJmb3JtIG5vIG1vcmUgcmVwbGFjZW1lbnRzIGFmdGVyIHJldHVybmluZyB0byBvdXRlcm1vc3QgZGVwdGhcblx0XHRpZiAoIGRlcHRoID09PSAwICkge1xuXHRcdFx0cmV0dXJuIHRva2VuO1xuXHRcdH1cblxuXHRcdC8vIENvbW1hcyBtdXN0IG5vdCBmb2xsb3cgXCJbXCIsIFwie1wiLCBvciBcIixcIlxuXHRcdHJlcXVpcmVOb25Db21tYSA9IG9wZW4gfHwgY29tbWE7XG5cblx0XHQvLyBEZXRlcm1pbmUgbmV3IGRlcHRoXG5cdFx0Ly8gYXJyYXkvb2JqZWN0IG9wZW4gKFwiW1wiIG9yIFwie1wiKTogZGVwdGggKz0gdHJ1ZSAtIGZhbHNlIChpbmNyZW1lbnQpXG5cdFx0Ly8gYXJyYXkvb2JqZWN0IGNsb3NlIChcIl1cIiBvciBcIn1cIik6IGRlcHRoICs9IGZhbHNlIC0gdHJ1ZSAoZGVjcmVtZW50KVxuXHRcdC8vIG90aGVyIGNhc2VzIChcIixcIiBvciBwcmltaXRpdmUpOiBkZXB0aCArPSB0cnVlIC0gdHJ1ZSAobnVtZXJpYyBjYXN0KVxuXHRcdGRlcHRoICs9ICFjbG9zZSAtICFvcGVuO1xuXG5cdFx0Ly8gUmVtb3ZlIHRoaXMgdG9rZW5cblx0XHRyZXR1cm4gXCJcIjtcblx0fSkgKSA/XG5cdFx0KCBGdW5jdGlvbiggXCJyZXR1cm4gXCIgKyBzdHIgKSApKCkgOlxuXHRcdGpRdWVyeS5lcnJvciggXCJJbnZhbGlkIEpTT046IFwiICsgZGF0YSApO1xufTtcblxuXG4vLyBDcm9zcy1icm93c2VyIHhtbCBwYXJzaW5nXG5qUXVlcnkucGFyc2VYTUwgPSBmdW5jdGlvbiggZGF0YSApIHtcblx0dmFyIHhtbCwgdG1wO1xuXHRpZiAoICFkYXRhIHx8IHR5cGVvZiBkYXRhICE9PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cdHRyeSB7XG5cdFx0aWYgKCB3aW5kb3cuRE9NUGFyc2VyICkgeyAvLyBTdGFuZGFyZFxuXHRcdFx0dG1wID0gbmV3IERPTVBhcnNlcigpO1xuXHRcdFx0eG1sID0gdG1wLnBhcnNlRnJvbVN0cmluZyggZGF0YSwgXCJ0ZXh0L3htbFwiICk7XG5cdFx0fSBlbHNlIHsgLy8gSUVcblx0XHRcdHhtbCA9IG5ldyBBY3RpdmVYT2JqZWN0KCBcIk1pY3Jvc29mdC5YTUxET01cIiApO1xuXHRcdFx0eG1sLmFzeW5jID0gXCJmYWxzZVwiO1xuXHRcdFx0eG1sLmxvYWRYTUwoIGRhdGEgKTtcblx0XHR9XG5cdH0gY2F0Y2goIGUgKSB7XG5cdFx0eG1sID0gdW5kZWZpbmVkO1xuXHR9XG5cdGlmICggIXhtbCB8fCAheG1sLmRvY3VtZW50RWxlbWVudCB8fCB4bWwuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIFwicGFyc2VyZXJyb3JcIiApLmxlbmd0aCApIHtcblx0XHRqUXVlcnkuZXJyb3IoIFwiSW52YWxpZCBYTUw6IFwiICsgZGF0YSApO1xuXHR9XG5cdHJldHVybiB4bWw7XG59O1xuXG5cbnZhclxuXHQvLyBEb2N1bWVudCBsb2NhdGlvblxuXHRhamF4TG9jUGFydHMsXG5cdGFqYXhMb2NhdGlvbixcblxuXHRyaGFzaCA9IC8jLiokLyxcblx0cnRzID0gLyhbPyZdKV89W14mXSovLFxuXHRyaGVhZGVycyA9IC9eKC4qPyk6WyBcXHRdKihbXlxcclxcbl0qKVxccj8kL21nLCAvLyBJRSBsZWF2ZXMgYW4gXFxyIGNoYXJhY3RlciBhdCBFT0xcblx0Ly8gIzc2NTMsICM4MTI1LCAjODE1MjogbG9jYWwgcHJvdG9jb2wgZGV0ZWN0aW9uXG5cdHJsb2NhbFByb3RvY29sID0gL14oPzphYm91dHxhcHB8YXBwLXN0b3JhZ2V8ListZXh0ZW5zaW9ufGZpbGV8cmVzfHdpZGdldCk6JC8sXG5cdHJub0NvbnRlbnQgPSAvXig/OkdFVHxIRUFEKSQvLFxuXHRycHJvdG9jb2wgPSAvXlxcL1xcLy8sXG5cdHJ1cmwgPSAvXihbXFx3ListXSs6KSg/OlxcL1xcLyg/OlteXFwvPyNdKkB8KShbXlxcLz8jOl0qKSg/OjooXFxkKyl8KXwpLyxcblxuXHQvKiBQcmVmaWx0ZXJzXG5cdCAqIDEpIFRoZXkgYXJlIHVzZWZ1bCB0byBpbnRyb2R1Y2UgY3VzdG9tIGRhdGFUeXBlcyAoc2VlIGFqYXgvanNvbnAuanMgZm9yIGFuIGV4YW1wbGUpXG5cdCAqIDIpIFRoZXNlIGFyZSBjYWxsZWQ6XG5cdCAqICAgIC0gQkVGT1JFIGFza2luZyBmb3IgYSB0cmFuc3BvcnRcblx0ICogICAgLSBBRlRFUiBwYXJhbSBzZXJpYWxpemF0aW9uIChzLmRhdGEgaXMgYSBzdHJpbmcgaWYgcy5wcm9jZXNzRGF0YSBpcyB0cnVlKVxuXHQgKiAzKSBrZXkgaXMgdGhlIGRhdGFUeXBlXG5cdCAqIDQpIHRoZSBjYXRjaGFsbCBzeW1ib2wgXCIqXCIgY2FuIGJlIHVzZWRcblx0ICogNSkgZXhlY3V0aW9uIHdpbGwgc3RhcnQgd2l0aCB0cmFuc3BvcnQgZGF0YVR5cGUgYW5kIFRIRU4gY29udGludWUgZG93biB0byBcIipcIiBpZiBuZWVkZWRcblx0ICovXG5cdHByZWZpbHRlcnMgPSB7fSxcblxuXHQvKiBUcmFuc3BvcnRzIGJpbmRpbmdzXG5cdCAqIDEpIGtleSBpcyB0aGUgZGF0YVR5cGVcblx0ICogMikgdGhlIGNhdGNoYWxsIHN5bWJvbCBcIipcIiBjYW4gYmUgdXNlZFxuXHQgKiAzKSBzZWxlY3Rpb24gd2lsbCBzdGFydCB3aXRoIHRyYW5zcG9ydCBkYXRhVHlwZSBhbmQgVEhFTiBnbyB0byBcIipcIiBpZiBuZWVkZWRcblx0ICovXG5cdHRyYW5zcG9ydHMgPSB7fSxcblxuXHQvLyBBdm9pZCBjb21tZW50LXByb2xvZyBjaGFyIHNlcXVlbmNlICgjMTAwOTgpOyBtdXN0IGFwcGVhc2UgbGludCBhbmQgZXZhZGUgY29tcHJlc3Npb25cblx0YWxsVHlwZXMgPSBcIiovXCIuY29uY2F0KFwiKlwiKTtcblxuLy8gIzgxMzgsIElFIG1heSB0aHJvdyBhbiBleGNlcHRpb24gd2hlbiBhY2Nlc3Npbmdcbi8vIGEgZmllbGQgZnJvbSB3aW5kb3cubG9jYXRpb24gaWYgZG9jdW1lbnQuZG9tYWluIGhhcyBiZWVuIHNldFxudHJ5IHtcblx0YWpheExvY2F0aW9uID0gbG9jYXRpb24uaHJlZjtcbn0gY2F0Y2goIGUgKSB7XG5cdC8vIFVzZSB0aGUgaHJlZiBhdHRyaWJ1dGUgb2YgYW4gQSBlbGVtZW50XG5cdC8vIHNpbmNlIElFIHdpbGwgbW9kaWZ5IGl0IGdpdmVuIGRvY3VtZW50LmxvY2F0aW9uXG5cdGFqYXhMb2NhdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiYVwiICk7XG5cdGFqYXhMb2NhdGlvbi5ocmVmID0gXCJcIjtcblx0YWpheExvY2F0aW9uID0gYWpheExvY2F0aW9uLmhyZWY7XG59XG5cbi8vIFNlZ21lbnQgbG9jYXRpb24gaW50byBwYXJ0c1xuYWpheExvY1BhcnRzID0gcnVybC5leGVjKCBhamF4TG9jYXRpb24udG9Mb3dlckNhc2UoKSApIHx8IFtdO1xuXG4vLyBCYXNlIFwiY29uc3RydWN0b3JcIiBmb3IgalF1ZXJ5LmFqYXhQcmVmaWx0ZXIgYW5kIGpRdWVyeS5hamF4VHJhbnNwb3J0XG5mdW5jdGlvbiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHN0cnVjdHVyZSApIHtcblxuXHQvLyBkYXRhVHlwZUV4cHJlc3Npb24gaXMgb3B0aW9uYWwgYW5kIGRlZmF1bHRzIHRvIFwiKlwiXG5cdHJldHVybiBmdW5jdGlvbiggZGF0YVR5cGVFeHByZXNzaW9uLCBmdW5jICkge1xuXG5cdFx0aWYgKCB0eXBlb2YgZGF0YVR5cGVFeHByZXNzaW9uICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0ZnVuYyA9IGRhdGFUeXBlRXhwcmVzc2lvbjtcblx0XHRcdGRhdGFUeXBlRXhwcmVzc2lvbiA9IFwiKlwiO1xuXHRcdH1cblxuXHRcdHZhciBkYXRhVHlwZSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0ZGF0YVR5cGVzID0gZGF0YVR5cGVFeHByZXNzaW9uLnRvTG93ZXJDYXNlKCkubWF0Y2goIHJub3R3aGl0ZSApIHx8IFtdO1xuXG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggZnVuYyApICkge1xuXHRcdFx0Ly8gRm9yIGVhY2ggZGF0YVR5cGUgaW4gdGhlIGRhdGFUeXBlRXhwcmVzc2lvblxuXHRcdFx0d2hpbGUgKCAoZGF0YVR5cGUgPSBkYXRhVHlwZXNbaSsrXSkgKSB7XG5cdFx0XHRcdC8vIFByZXBlbmQgaWYgcmVxdWVzdGVkXG5cdFx0XHRcdGlmICggZGF0YVR5cGUuY2hhckF0KCAwICkgPT09IFwiK1wiICkge1xuXHRcdFx0XHRcdGRhdGFUeXBlID0gZGF0YVR5cGUuc2xpY2UoIDEgKSB8fCBcIipcIjtcblx0XHRcdFx0XHQoc3RydWN0dXJlWyBkYXRhVHlwZSBdID0gc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdKS51bnNoaWZ0KCBmdW5jICk7XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIGFwcGVuZFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdChzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gPSBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gfHwgW10pLnB1c2goIGZ1bmMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn1cblxuLy8gQmFzZSBpbnNwZWN0aW9uIGZ1bmN0aW9uIGZvciBwcmVmaWx0ZXJzIGFuZCB0cmFuc3BvcnRzXG5mdW5jdGlvbiBpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggc3RydWN0dXJlLCBvcHRpb25zLCBvcmlnaW5hbE9wdGlvbnMsIGpxWEhSICkge1xuXG5cdHZhciBpbnNwZWN0ZWQgPSB7fSxcblx0XHRzZWVraW5nVHJhbnNwb3J0ID0gKCBzdHJ1Y3R1cmUgPT09IHRyYW5zcG9ydHMgKTtcblxuXHRmdW5jdGlvbiBpbnNwZWN0KCBkYXRhVHlwZSApIHtcblx0XHR2YXIgc2VsZWN0ZWQ7XG5cdFx0aW5zcGVjdGVkWyBkYXRhVHlwZSBdID0gdHJ1ZTtcblx0XHRqUXVlcnkuZWFjaCggc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdLCBmdW5jdGlvbiggXywgcHJlZmlsdGVyT3JGYWN0b3J5ICkge1xuXHRcdFx0dmFyIGRhdGFUeXBlT3JUcmFuc3BvcnQgPSBwcmVmaWx0ZXJPckZhY3RvcnkoIG9wdGlvbnMsIG9yaWdpbmFsT3B0aW9ucywganFYSFIgKTtcblx0XHRcdGlmICggdHlwZW9mIGRhdGFUeXBlT3JUcmFuc3BvcnQgPT09IFwic3RyaW5nXCIgJiYgIXNlZWtpbmdUcmFuc3BvcnQgJiYgIWluc3BlY3RlZFsgZGF0YVR5cGVPclRyYW5zcG9ydCBdICkge1xuXHRcdFx0XHRvcHRpb25zLmRhdGFUeXBlcy51bnNoaWZ0KCBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XG5cdFx0XHRcdGluc3BlY3QoIGRhdGFUeXBlT3JUcmFuc3BvcnQgKTtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fSBlbHNlIGlmICggc2Vla2luZ1RyYW5zcG9ydCApIHtcblx0XHRcdFx0cmV0dXJuICEoIHNlbGVjdGVkID0gZGF0YVR5cGVPclRyYW5zcG9ydCApO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdHJldHVybiBzZWxlY3RlZDtcblx0fVxuXG5cdHJldHVybiBpbnNwZWN0KCBvcHRpb25zLmRhdGFUeXBlc1sgMCBdICkgfHwgIWluc3BlY3RlZFsgXCIqXCIgXSAmJiBpbnNwZWN0KCBcIipcIiApO1xufVxuXG4vLyBBIHNwZWNpYWwgZXh0ZW5kIGZvciBhamF4IG9wdGlvbnNcbi8vIHRoYXQgdGFrZXMgXCJmbGF0XCIgb3B0aW9ucyAobm90IHRvIGJlIGRlZXAgZXh0ZW5kZWQpXG4vLyBGaXhlcyAjOTg4N1xuZnVuY3Rpb24gYWpheEV4dGVuZCggdGFyZ2V0LCBzcmMgKSB7XG5cdHZhciBkZWVwLCBrZXksXG5cdFx0ZmxhdE9wdGlvbnMgPSBqUXVlcnkuYWpheFNldHRpbmdzLmZsYXRPcHRpb25zIHx8IHt9O1xuXG5cdGZvciAoIGtleSBpbiBzcmMgKSB7XG5cdFx0aWYgKCBzcmNbIGtleSBdICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHQoIGZsYXRPcHRpb25zWyBrZXkgXSA/IHRhcmdldCA6ICggZGVlcCB8fCAoZGVlcCA9IHt9KSApIClbIGtleSBdID0gc3JjWyBrZXkgXTtcblx0XHR9XG5cdH1cblx0aWYgKCBkZWVwICkge1xuXHRcdGpRdWVyeS5leHRlbmQoIHRydWUsIHRhcmdldCwgZGVlcCApO1xuXHR9XG5cblx0cmV0dXJuIHRhcmdldDtcbn1cblxuLyogSGFuZGxlcyByZXNwb25zZXMgdG8gYW4gYWpheCByZXF1ZXN0OlxuICogLSBmaW5kcyB0aGUgcmlnaHQgZGF0YVR5cGUgKG1lZGlhdGVzIGJldHdlZW4gY29udGVudC10eXBlIGFuZCBleHBlY3RlZCBkYXRhVHlwZSlcbiAqIC0gcmV0dXJucyB0aGUgY29ycmVzcG9uZGluZyByZXNwb25zZVxuICovXG5mdW5jdGlvbiBhamF4SGFuZGxlUmVzcG9uc2VzKCBzLCBqcVhIUiwgcmVzcG9uc2VzICkge1xuXHR2YXIgZmlyc3REYXRhVHlwZSwgY3QsIGZpbmFsRGF0YVR5cGUsIHR5cGUsXG5cdFx0Y29udGVudHMgPSBzLmNvbnRlbnRzLFxuXHRcdGRhdGFUeXBlcyA9IHMuZGF0YVR5cGVzO1xuXG5cdC8vIFJlbW92ZSBhdXRvIGRhdGFUeXBlIGFuZCBnZXQgY29udGVudC10eXBlIGluIHRoZSBwcm9jZXNzXG5cdHdoaWxlICggZGF0YVR5cGVzWyAwIF0gPT09IFwiKlwiICkge1xuXHRcdGRhdGFUeXBlcy5zaGlmdCgpO1xuXHRcdGlmICggY3QgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGN0ID0gcy5taW1lVHlwZSB8fCBqcVhIUi5nZXRSZXNwb25zZUhlYWRlcihcIkNvbnRlbnQtVHlwZVwiKTtcblx0XHR9XG5cdH1cblxuXHQvLyBDaGVjayBpZiB3ZSdyZSBkZWFsaW5nIHdpdGggYSBrbm93biBjb250ZW50LXR5cGVcblx0aWYgKCBjdCApIHtcblx0XHRmb3IgKCB0eXBlIGluIGNvbnRlbnRzICkge1xuXHRcdFx0aWYgKCBjb250ZW50c1sgdHlwZSBdICYmIGNvbnRlbnRzWyB0eXBlIF0udGVzdCggY3QgKSApIHtcblx0XHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQoIHR5cGUgKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ2hlY2sgdG8gc2VlIGlmIHdlIGhhdmUgYSByZXNwb25zZSBmb3IgdGhlIGV4cGVjdGVkIGRhdGFUeXBlXG5cdGlmICggZGF0YVR5cGVzWyAwIF0gaW4gcmVzcG9uc2VzICkge1xuXHRcdGZpbmFsRGF0YVR5cGUgPSBkYXRhVHlwZXNbIDAgXTtcblx0fSBlbHNlIHtcblx0XHQvLyBUcnkgY29udmVydGlibGUgZGF0YVR5cGVzXG5cdFx0Zm9yICggdHlwZSBpbiByZXNwb25zZXMgKSB7XG5cdFx0XHRpZiAoICFkYXRhVHlwZXNbIDAgXSB8fCBzLmNvbnZlcnRlcnNbIHR5cGUgKyBcIiBcIiArIGRhdGFUeXBlc1swXSBdICkge1xuXHRcdFx0XHRmaW5hbERhdGFUeXBlID0gdHlwZTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRpZiAoICFmaXJzdERhdGFUeXBlICkge1xuXHRcdFx0XHRmaXJzdERhdGFUeXBlID0gdHlwZTtcblx0XHRcdH1cblx0XHR9XG5cdFx0Ly8gT3IganVzdCB1c2UgZmlyc3Qgb25lXG5cdFx0ZmluYWxEYXRhVHlwZSA9IGZpbmFsRGF0YVR5cGUgfHwgZmlyc3REYXRhVHlwZTtcblx0fVxuXG5cdC8vIElmIHdlIGZvdW5kIGEgZGF0YVR5cGVcblx0Ly8gV2UgYWRkIHRoZSBkYXRhVHlwZSB0byB0aGUgbGlzdCBpZiBuZWVkZWRcblx0Ly8gYW5kIHJldHVybiB0aGUgY29ycmVzcG9uZGluZyByZXNwb25zZVxuXHRpZiAoIGZpbmFsRGF0YVR5cGUgKSB7XG5cdFx0aWYgKCBmaW5hbERhdGFUeXBlICE9PSBkYXRhVHlwZXNbIDAgXSApIHtcblx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCBmaW5hbERhdGFUeXBlICk7XG5cdFx0fVxuXHRcdHJldHVybiByZXNwb25zZXNbIGZpbmFsRGF0YVR5cGUgXTtcblx0fVxufVxuXG4vKiBDaGFpbiBjb252ZXJzaW9ucyBnaXZlbiB0aGUgcmVxdWVzdCBhbmQgdGhlIG9yaWdpbmFsIHJlc3BvbnNlXG4gKiBBbHNvIHNldHMgdGhlIHJlc3BvbnNlWFhYIGZpZWxkcyBvbiB0aGUganFYSFIgaW5zdGFuY2VcbiAqL1xuZnVuY3Rpb24gYWpheENvbnZlcnQoIHMsIHJlc3BvbnNlLCBqcVhIUiwgaXNTdWNjZXNzICkge1xuXHR2YXIgY29udjIsIGN1cnJlbnQsIGNvbnYsIHRtcCwgcHJldixcblx0XHRjb252ZXJ0ZXJzID0ge30sXG5cdFx0Ly8gV29yayB3aXRoIGEgY29weSBvZiBkYXRhVHlwZXMgaW4gY2FzZSB3ZSBuZWVkIHRvIG1vZGlmeSBpdCBmb3IgY29udmVyc2lvblxuXHRcdGRhdGFUeXBlcyA9IHMuZGF0YVR5cGVzLnNsaWNlKCk7XG5cblx0Ly8gQ3JlYXRlIGNvbnZlcnRlcnMgbWFwIHdpdGggbG93ZXJjYXNlZCBrZXlzXG5cdGlmICggZGF0YVR5cGVzWyAxIF0gKSB7XG5cdFx0Zm9yICggY29udiBpbiBzLmNvbnZlcnRlcnMgKSB7XG5cdFx0XHRjb252ZXJ0ZXJzWyBjb252LnRvTG93ZXJDYXNlKCkgXSA9IHMuY29udmVydGVyc1sgY29udiBdO1xuXHRcdH1cblx0fVxuXG5cdGN1cnJlbnQgPSBkYXRhVHlwZXMuc2hpZnQoKTtcblxuXHQvLyBDb252ZXJ0IHRvIGVhY2ggc2VxdWVudGlhbCBkYXRhVHlwZVxuXHR3aGlsZSAoIGN1cnJlbnQgKSB7XG5cblx0XHRpZiAoIHMucmVzcG9uc2VGaWVsZHNbIGN1cnJlbnQgXSApIHtcblx0XHRcdGpxWEhSWyBzLnJlc3BvbnNlRmllbGRzWyBjdXJyZW50IF0gXSA9IHJlc3BvbnNlO1xuXHRcdH1cblxuXHRcdC8vIEFwcGx5IHRoZSBkYXRhRmlsdGVyIGlmIHByb3ZpZGVkXG5cdFx0aWYgKCAhcHJldiAmJiBpc1N1Y2Nlc3MgJiYgcy5kYXRhRmlsdGVyICkge1xuXHRcdFx0cmVzcG9uc2UgPSBzLmRhdGFGaWx0ZXIoIHJlc3BvbnNlLCBzLmRhdGFUeXBlICk7XG5cdFx0fVxuXG5cdFx0cHJldiA9IGN1cnJlbnQ7XG5cdFx0Y3VycmVudCA9IGRhdGFUeXBlcy5zaGlmdCgpO1xuXG5cdFx0aWYgKCBjdXJyZW50ICkge1xuXG5cdFx0XHQvLyBUaGVyZSdzIG9ubHkgd29yayB0byBkbyBpZiBjdXJyZW50IGRhdGFUeXBlIGlzIG5vbi1hdXRvXG5cdFx0XHRpZiAoIGN1cnJlbnQgPT09IFwiKlwiICkge1xuXG5cdFx0XHRcdGN1cnJlbnQgPSBwcmV2O1xuXG5cdFx0XHQvLyBDb252ZXJ0IHJlc3BvbnNlIGlmIHByZXYgZGF0YVR5cGUgaXMgbm9uLWF1dG8gYW5kIGRpZmZlcnMgZnJvbSBjdXJyZW50XG5cdFx0XHR9IGVsc2UgaWYgKCBwcmV2ICE9PSBcIipcIiAmJiBwcmV2ICE9PSBjdXJyZW50ICkge1xuXG5cdFx0XHRcdC8vIFNlZWsgYSBkaXJlY3QgY29udmVydGVyXG5cdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBwcmV2ICsgXCIgXCIgKyBjdXJyZW50IF0gfHwgY29udmVydGVyc1sgXCIqIFwiICsgY3VycmVudCBdO1xuXG5cdFx0XHRcdC8vIElmIG5vbmUgZm91bmQsIHNlZWsgYSBwYWlyXG5cdFx0XHRcdGlmICggIWNvbnYgKSB7XG5cdFx0XHRcdFx0Zm9yICggY29udjIgaW4gY29udmVydGVycyApIHtcblxuXHRcdFx0XHRcdFx0Ly8gSWYgY29udjIgb3V0cHV0cyBjdXJyZW50XG5cdFx0XHRcdFx0XHR0bXAgPSBjb252Mi5zcGxpdCggXCIgXCIgKTtcblx0XHRcdFx0XHRcdGlmICggdG1wWyAxIF0gPT09IGN1cnJlbnQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gSWYgcHJldiBjYW4gYmUgY29udmVydGVkIHRvIGFjY2VwdGVkIGlucHV0XG5cdFx0XHRcdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBwcmV2ICsgXCIgXCIgKyB0bXBbIDAgXSBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0Y29udmVydGVyc1sgXCIqIFwiICsgdG1wWyAwIF0gXTtcblx0XHRcdFx0XHRcdFx0aWYgKCBjb252ICkge1xuXHRcdFx0XHRcdFx0XHRcdC8vIENvbmRlbnNlIGVxdWl2YWxlbmNlIGNvbnZlcnRlcnNcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGNvbnYgPT09IHRydWUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjb252ID0gY29udmVydGVyc1sgY29udjIgXTtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIE90aGVyd2lzZSwgaW5zZXJ0IHRoZSBpbnRlcm1lZGlhdGUgZGF0YVR5cGVcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCBjb252ZXJ0ZXJzWyBjb252MiBdICE9PSB0cnVlICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y3VycmVudCA9IHRtcFsgMCBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQoIHRtcFsgMSBdICk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQXBwbHkgY29udmVydGVyIChpZiBub3QgYW4gZXF1aXZhbGVuY2UpXG5cdFx0XHRcdGlmICggY29udiAhPT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRcdC8vIFVubGVzcyBlcnJvcnMgYXJlIGFsbG93ZWQgdG8gYnViYmxlLCBjYXRjaCBhbmQgcmV0dXJuIHRoZW1cblx0XHRcdFx0XHRpZiAoIGNvbnYgJiYgc1sgXCJ0aHJvd3NcIiBdICkge1xuXHRcdFx0XHRcdFx0cmVzcG9uc2UgPSBjb252KCByZXNwb25zZSApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0XHRyZXNwb25zZSA9IGNvbnYoIHJlc3BvbnNlICk7XG5cdFx0XHRcdFx0XHR9IGNhdGNoICggZSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHsgc3RhdGU6IFwicGFyc2VyZXJyb3JcIiwgZXJyb3I6IGNvbnYgPyBlIDogXCJObyBjb252ZXJzaW9uIGZyb20gXCIgKyBwcmV2ICsgXCIgdG8gXCIgKyBjdXJyZW50IH07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHsgc3RhdGU6IFwic3VjY2Vzc1wiLCBkYXRhOiByZXNwb25zZSB9O1xufVxuXG5qUXVlcnkuZXh0ZW5kKHtcblxuXHQvLyBDb3VudGVyIGZvciBob2xkaW5nIHRoZSBudW1iZXIgb2YgYWN0aXZlIHF1ZXJpZXNcblx0YWN0aXZlOiAwLFxuXG5cdC8vIExhc3QtTW9kaWZpZWQgaGVhZGVyIGNhY2hlIGZvciBuZXh0IHJlcXVlc3Rcblx0bGFzdE1vZGlmaWVkOiB7fSxcblx0ZXRhZzoge30sXG5cblx0YWpheFNldHRpbmdzOiB7XG5cdFx0dXJsOiBhamF4TG9jYXRpb24sXG5cdFx0dHlwZTogXCJHRVRcIixcblx0XHRpc0xvY2FsOiBybG9jYWxQcm90b2NvbC50ZXN0KCBhamF4TG9jUGFydHNbIDEgXSApLFxuXHRcdGdsb2JhbDogdHJ1ZSxcblx0XHRwcm9jZXNzRGF0YTogdHJ1ZSxcblx0XHRhc3luYzogdHJ1ZSxcblx0XHRjb250ZW50VHlwZTogXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7IGNoYXJzZXQ9VVRGLThcIixcblx0XHQvKlxuXHRcdHRpbWVvdXQ6IDAsXG5cdFx0ZGF0YTogbnVsbCxcblx0XHRkYXRhVHlwZTogbnVsbCxcblx0XHR1c2VybmFtZTogbnVsbCxcblx0XHRwYXNzd29yZDogbnVsbCxcblx0XHRjYWNoZTogbnVsbCxcblx0XHR0aHJvd3M6IGZhbHNlLFxuXHRcdHRyYWRpdGlvbmFsOiBmYWxzZSxcblx0XHRoZWFkZXJzOiB7fSxcblx0XHQqL1xuXG5cdFx0YWNjZXB0czoge1xuXHRcdFx0XCIqXCI6IGFsbFR5cGVzLFxuXHRcdFx0dGV4dDogXCJ0ZXh0L3BsYWluXCIsXG5cdFx0XHRodG1sOiBcInRleHQvaHRtbFwiLFxuXHRcdFx0eG1sOiBcImFwcGxpY2F0aW9uL3htbCwgdGV4dC94bWxcIixcblx0XHRcdGpzb246IFwiYXBwbGljYXRpb24vanNvbiwgdGV4dC9qYXZhc2NyaXB0XCJcblx0XHR9LFxuXG5cdFx0Y29udGVudHM6IHtcblx0XHRcdHhtbDogL3htbC8sXG5cdFx0XHRodG1sOiAvaHRtbC8sXG5cdFx0XHRqc29uOiAvanNvbi9cblx0XHR9LFxuXG5cdFx0cmVzcG9uc2VGaWVsZHM6IHtcblx0XHRcdHhtbDogXCJyZXNwb25zZVhNTFwiLFxuXHRcdFx0dGV4dDogXCJyZXNwb25zZVRleHRcIixcblx0XHRcdGpzb246IFwicmVzcG9uc2VKU09OXCJcblx0XHR9LFxuXG5cdFx0Ly8gRGF0YSBjb252ZXJ0ZXJzXG5cdFx0Ly8gS2V5cyBzZXBhcmF0ZSBzb3VyY2UgKG9yIGNhdGNoYWxsIFwiKlwiKSBhbmQgZGVzdGluYXRpb24gdHlwZXMgd2l0aCBhIHNpbmdsZSBzcGFjZVxuXHRcdGNvbnZlcnRlcnM6IHtcblxuXHRcdFx0Ly8gQ29udmVydCBhbnl0aGluZyB0byB0ZXh0XG5cdFx0XHRcIiogdGV4dFwiOiBTdHJpbmcsXG5cblx0XHRcdC8vIFRleHQgdG8gaHRtbCAodHJ1ZSA9IG5vIHRyYW5zZm9ybWF0aW9uKVxuXHRcdFx0XCJ0ZXh0IGh0bWxcIjogdHJ1ZSxcblxuXHRcdFx0Ly8gRXZhbHVhdGUgdGV4dCBhcyBhIGpzb24gZXhwcmVzc2lvblxuXHRcdFx0XCJ0ZXh0IGpzb25cIjogalF1ZXJ5LnBhcnNlSlNPTixcblxuXHRcdFx0Ly8gUGFyc2UgdGV4dCBhcyB4bWxcblx0XHRcdFwidGV4dCB4bWxcIjogalF1ZXJ5LnBhcnNlWE1MXG5cdFx0fSxcblxuXHRcdC8vIEZvciBvcHRpb25zIHRoYXQgc2hvdWxkbid0IGJlIGRlZXAgZXh0ZW5kZWQ6XG5cdFx0Ly8geW91IGNhbiBhZGQgeW91ciBvd24gY3VzdG9tIG9wdGlvbnMgaGVyZSBpZlxuXHRcdC8vIGFuZCB3aGVuIHlvdSBjcmVhdGUgb25lIHRoYXQgc2hvdWxkbid0IGJlXG5cdFx0Ly8gZGVlcCBleHRlbmRlZCAoc2VlIGFqYXhFeHRlbmQpXG5cdFx0ZmxhdE9wdGlvbnM6IHtcblx0XHRcdHVybDogdHJ1ZSxcblx0XHRcdGNvbnRleHQ6IHRydWVcblx0XHR9XG5cdH0sXG5cblx0Ly8gQ3JlYXRlcyBhIGZ1bGwgZmxlZGdlZCBzZXR0aW5ncyBvYmplY3QgaW50byB0YXJnZXRcblx0Ly8gd2l0aCBib3RoIGFqYXhTZXR0aW5ncyBhbmQgc2V0dGluZ3MgZmllbGRzLlxuXHQvLyBJZiB0YXJnZXQgaXMgb21pdHRlZCwgd3JpdGVzIGludG8gYWpheFNldHRpbmdzLlxuXHRhamF4U2V0dXA6IGZ1bmN0aW9uKCB0YXJnZXQsIHNldHRpbmdzICkge1xuXHRcdHJldHVybiBzZXR0aW5ncyA/XG5cblx0XHRcdC8vIEJ1aWxkaW5nIGEgc2V0dGluZ3Mgb2JqZWN0XG5cdFx0XHRhamF4RXh0ZW5kKCBhamF4RXh0ZW5kKCB0YXJnZXQsIGpRdWVyeS5hamF4U2V0dGluZ3MgKSwgc2V0dGluZ3MgKSA6XG5cblx0XHRcdC8vIEV4dGVuZGluZyBhamF4U2V0dGluZ3Ncblx0XHRcdGFqYXhFeHRlbmQoIGpRdWVyeS5hamF4U2V0dGluZ3MsIHRhcmdldCApO1xuXHR9LFxuXG5cdGFqYXhQcmVmaWx0ZXI6IGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyggcHJlZmlsdGVycyApLFxuXHRhamF4VHJhbnNwb3J0OiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHRyYW5zcG9ydHMgKSxcblxuXHQvLyBNYWluIG1ldGhvZFxuXHRhamF4OiBmdW5jdGlvbiggdXJsLCBvcHRpb25zICkge1xuXG5cdFx0Ly8gSWYgdXJsIGlzIGFuIG9iamVjdCwgc2ltdWxhdGUgcHJlLTEuNSBzaWduYXR1cmVcblx0XHRpZiAoIHR5cGVvZiB1cmwgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0XHRvcHRpb25zID0gdXJsO1xuXHRcdFx0dXJsID0gdW5kZWZpbmVkO1xuXHRcdH1cblxuXHRcdC8vIEZvcmNlIG9wdGlvbnMgdG8gYmUgYW4gb2JqZWN0XG5cdFx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cblx0XHR2YXIgLy8gQ3Jvc3MtZG9tYWluIGRldGVjdGlvbiB2YXJzXG5cdFx0XHRwYXJ0cyxcblx0XHRcdC8vIExvb3AgdmFyaWFibGVcblx0XHRcdGksXG5cdFx0XHQvLyBVUkwgd2l0aG91dCBhbnRpLWNhY2hlIHBhcmFtXG5cdFx0XHRjYWNoZVVSTCxcblx0XHRcdC8vIFJlc3BvbnNlIGhlYWRlcnMgYXMgc3RyaW5nXG5cdFx0XHRyZXNwb25zZUhlYWRlcnNTdHJpbmcsXG5cdFx0XHQvLyB0aW1lb3V0IGhhbmRsZVxuXHRcdFx0dGltZW91dFRpbWVyLFxuXG5cdFx0XHQvLyBUbyBrbm93IGlmIGdsb2JhbCBldmVudHMgYXJlIHRvIGJlIGRpc3BhdGNoZWRcblx0XHRcdGZpcmVHbG9iYWxzLFxuXG5cdFx0XHR0cmFuc3BvcnQsXG5cdFx0XHQvLyBSZXNwb25zZSBoZWFkZXJzXG5cdFx0XHRyZXNwb25zZUhlYWRlcnMsXG5cdFx0XHQvLyBDcmVhdGUgdGhlIGZpbmFsIG9wdGlvbnMgb2JqZWN0XG5cdFx0XHRzID0galF1ZXJ5LmFqYXhTZXR1cCgge30sIG9wdGlvbnMgKSxcblx0XHRcdC8vIENhbGxiYWNrcyBjb250ZXh0XG5cdFx0XHRjYWxsYmFja0NvbnRleHQgPSBzLmNvbnRleHQgfHwgcyxcblx0XHRcdC8vIENvbnRleHQgZm9yIGdsb2JhbCBldmVudHMgaXMgY2FsbGJhY2tDb250ZXh0IGlmIGl0IGlzIGEgRE9NIG5vZGUgb3IgalF1ZXJ5IGNvbGxlY3Rpb25cblx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dCA9IHMuY29udGV4dCAmJiAoIGNhbGxiYWNrQ29udGV4dC5ub2RlVHlwZSB8fCBjYWxsYmFja0NvbnRleHQuanF1ZXJ5ICkgP1xuXHRcdFx0XHRqUXVlcnkoIGNhbGxiYWNrQ29udGV4dCApIDpcblx0XHRcdFx0alF1ZXJ5LmV2ZW50LFxuXHRcdFx0Ly8gRGVmZXJyZWRzXG5cdFx0XHRkZWZlcnJlZCA9IGpRdWVyeS5EZWZlcnJlZCgpLFxuXHRcdFx0Y29tcGxldGVEZWZlcnJlZCA9IGpRdWVyeS5DYWxsYmFja3MoXCJvbmNlIG1lbW9yeVwiKSxcblx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXG5cdFx0XHRzdGF0dXNDb2RlID0gcy5zdGF0dXNDb2RlIHx8IHt9LFxuXHRcdFx0Ly8gSGVhZGVycyAodGhleSBhcmUgc2VudCBhbGwgYXQgb25jZSlcblx0XHRcdHJlcXVlc3RIZWFkZXJzID0ge30sXG5cdFx0XHRyZXF1ZXN0SGVhZGVyc05hbWVzID0ge30sXG5cdFx0XHQvLyBUaGUganFYSFIgc3RhdGVcblx0XHRcdHN0YXRlID0gMCxcblx0XHRcdC8vIERlZmF1bHQgYWJvcnQgbWVzc2FnZVxuXHRcdFx0c3RyQWJvcnQgPSBcImNhbmNlbGVkXCIsXG5cdFx0XHQvLyBGYWtlIHhoclxuXHRcdFx0anFYSFIgPSB7XG5cdFx0XHRcdHJlYWR5U3RhdGU6IDAsXG5cblx0XHRcdFx0Ly8gQnVpbGRzIGhlYWRlcnMgaGFzaHRhYmxlIGlmIG5lZWRlZFxuXHRcdFx0XHRnZXRSZXNwb25zZUhlYWRlcjogZnVuY3Rpb24oIGtleSApIHtcblx0XHRcdFx0XHR2YXIgbWF0Y2g7XG5cdFx0XHRcdFx0aWYgKCBzdGF0ZSA9PT0gMiApIHtcblx0XHRcdFx0XHRcdGlmICggIXJlc3BvbnNlSGVhZGVycyApIHtcblx0XHRcdFx0XHRcdFx0cmVzcG9uc2VIZWFkZXJzID0ge307XG5cdFx0XHRcdFx0XHRcdHdoaWxlICggKG1hdGNoID0gcmhlYWRlcnMuZXhlYyggcmVzcG9uc2VIZWFkZXJzU3RyaW5nICkpICkge1xuXHRcdFx0XHRcdFx0XHRcdHJlc3BvbnNlSGVhZGVyc1sgbWF0Y2hbMV0udG9Mb3dlckNhc2UoKSBdID0gbWF0Y2hbIDIgXTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0bWF0Y2ggPSByZXNwb25zZUhlYWRlcnNbIGtleS50b0xvd2VyQ2FzZSgpIF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiBtYXRjaCA9PSBudWxsID8gbnVsbCA6IG1hdGNoO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIFJhdyBzdHJpbmdcblx0XHRcdFx0Z2V0QWxsUmVzcG9uc2VIZWFkZXJzOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRyZXR1cm4gc3RhdGUgPT09IDIgPyByZXNwb25zZUhlYWRlcnNTdHJpbmcgOiBudWxsO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIENhY2hlcyB0aGUgaGVhZGVyXG5cdFx0XHRcdHNldFJlcXVlc3RIZWFkZXI6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRcdFx0XHR2YXIgbG5hbWUgPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRcdFx0aWYgKCAhc3RhdGUgKSB7XG5cdFx0XHRcdFx0XHRuYW1lID0gcmVxdWVzdEhlYWRlcnNOYW1lc1sgbG5hbWUgXSA9IHJlcXVlc3RIZWFkZXJzTmFtZXNbIGxuYW1lIF0gfHwgbmFtZTtcblx0XHRcdFx0XHRcdHJlcXVlc3RIZWFkZXJzWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gT3ZlcnJpZGVzIHJlc3BvbnNlIGNvbnRlbnQtdHlwZSBoZWFkZXJcblx0XHRcdFx0b3ZlcnJpZGVNaW1lVHlwZTogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0XHRcdFx0aWYgKCAhc3RhdGUgKSB7XG5cdFx0XHRcdFx0XHRzLm1pbWVUeXBlID0gdHlwZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3Ncblx0XHRcdFx0c3RhdHVzQ29kZTogZnVuY3Rpb24oIG1hcCApIHtcblx0XHRcdFx0XHR2YXIgY29kZTtcblx0XHRcdFx0XHRpZiAoIG1hcCApIHtcblx0XHRcdFx0XHRcdGlmICggc3RhdGUgPCAyICkge1xuXHRcdFx0XHRcdFx0XHRmb3IgKCBjb2RlIGluIG1hcCApIHtcblx0XHRcdFx0XHRcdFx0XHQvLyBMYXp5LWFkZCB0aGUgbmV3IGNhbGxiYWNrIGluIGEgd2F5IHRoYXQgcHJlc2VydmVzIG9sZCBvbmVzXG5cdFx0XHRcdFx0XHRcdFx0c3RhdHVzQ29kZVsgY29kZSBdID0gWyBzdGF0dXNDb2RlWyBjb2RlIF0sIG1hcFsgY29kZSBdIF07XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdC8vIEV4ZWN1dGUgdGhlIGFwcHJvcHJpYXRlIGNhbGxiYWNrc1xuXHRcdFx0XHRcdFx0XHRqcVhIUi5hbHdheXMoIG1hcFsganFYSFIuc3RhdHVzIF0gKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gQ2FuY2VsIHRoZSByZXF1ZXN0XG5cdFx0XHRcdGFib3J0OiBmdW5jdGlvbiggc3RhdHVzVGV4dCApIHtcblx0XHRcdFx0XHR2YXIgZmluYWxUZXh0ID0gc3RhdHVzVGV4dCB8fCBzdHJBYm9ydDtcblx0XHRcdFx0XHRpZiAoIHRyYW5zcG9ydCApIHtcblx0XHRcdFx0XHRcdHRyYW5zcG9ydC5hYm9ydCggZmluYWxUZXh0ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGRvbmUoIDAsIGZpbmFsVGV4dCApO1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXG5cdFx0Ly8gQXR0YWNoIGRlZmVycmVkc1xuXHRcdGRlZmVycmVkLnByb21pc2UoIGpxWEhSICkuY29tcGxldGUgPSBjb21wbGV0ZURlZmVycmVkLmFkZDtcblx0XHRqcVhIUi5zdWNjZXNzID0ganFYSFIuZG9uZTtcblx0XHRqcVhIUi5lcnJvciA9IGpxWEhSLmZhaWw7XG5cblx0XHQvLyBSZW1vdmUgaGFzaCBjaGFyYWN0ZXIgKCM3NTMxOiBhbmQgc3RyaW5nIHByb21vdGlvbilcblx0XHQvLyBBZGQgcHJvdG9jb2wgaWYgbm90IHByb3ZpZGVkICgjNTg2NjogSUU3IGlzc3VlIHdpdGggcHJvdG9jb2wtbGVzcyB1cmxzKVxuXHRcdC8vIEhhbmRsZSBmYWxzeSB1cmwgaW4gdGhlIHNldHRpbmdzIG9iamVjdCAoIzEwMDkzOiBjb25zaXN0ZW5jeSB3aXRoIG9sZCBzaWduYXR1cmUpXG5cdFx0Ly8gV2UgYWxzbyB1c2UgdGhlIHVybCBwYXJhbWV0ZXIgaWYgYXZhaWxhYmxlXG5cdFx0cy51cmwgPSAoICggdXJsIHx8IHMudXJsIHx8IGFqYXhMb2NhdGlvbiApICsgXCJcIiApLnJlcGxhY2UoIHJoYXNoLCBcIlwiICkucmVwbGFjZSggcnByb3RvY29sLCBhamF4TG9jUGFydHNbIDEgXSArIFwiLy9cIiApO1xuXG5cdFx0Ly8gQWxpYXMgbWV0aG9kIG9wdGlvbiB0byB0eXBlIGFzIHBlciB0aWNrZXQgIzEyMDA0XG5cdFx0cy50eXBlID0gb3B0aW9ucy5tZXRob2QgfHwgb3B0aW9ucy50eXBlIHx8IHMubWV0aG9kIHx8IHMudHlwZTtcblxuXHRcdC8vIEV4dHJhY3QgZGF0YVR5cGVzIGxpc3Rcblx0XHRzLmRhdGFUeXBlcyA9IGpRdWVyeS50cmltKCBzLmRhdGFUeXBlIHx8IFwiKlwiICkudG9Mb3dlckNhc2UoKS5tYXRjaCggcm5vdHdoaXRlICkgfHwgWyBcIlwiIF07XG5cblx0XHQvLyBBIGNyb3NzLWRvbWFpbiByZXF1ZXN0IGlzIGluIG9yZGVyIHdoZW4gd2UgaGF2ZSBhIHByb3RvY29sOmhvc3Q6cG9ydCBtaXNtYXRjaFxuXHRcdGlmICggcy5jcm9zc0RvbWFpbiA9PSBudWxsICkge1xuXHRcdFx0cGFydHMgPSBydXJsLmV4ZWMoIHMudXJsLnRvTG93ZXJDYXNlKCkgKTtcblx0XHRcdHMuY3Jvc3NEb21haW4gPSAhISggcGFydHMgJiZcblx0XHRcdFx0KCBwYXJ0c1sgMSBdICE9PSBhamF4TG9jUGFydHNbIDEgXSB8fCBwYXJ0c1sgMiBdICE9PSBhamF4TG9jUGFydHNbIDIgXSB8fFxuXHRcdFx0XHRcdCggcGFydHNbIDMgXSB8fCAoIHBhcnRzWyAxIF0gPT09IFwiaHR0cDpcIiA/IFwiODBcIiA6IFwiNDQzXCIgKSApICE9PVxuXHRcdFx0XHRcdFx0KCBhamF4TG9jUGFydHNbIDMgXSB8fCAoIGFqYXhMb2NQYXJ0c1sgMSBdID09PSBcImh0dHA6XCIgPyBcIjgwXCIgOiBcIjQ0M1wiICkgKSApXG5cdFx0XHQpO1xuXHRcdH1cblxuXHRcdC8vIENvbnZlcnQgZGF0YSBpZiBub3QgYWxyZWFkeSBhIHN0cmluZ1xuXHRcdGlmICggcy5kYXRhICYmIHMucHJvY2Vzc0RhdGEgJiYgdHlwZW9mIHMuZGF0YSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHMuZGF0YSA9IGpRdWVyeS5wYXJhbSggcy5kYXRhLCBzLnRyYWRpdGlvbmFsICk7XG5cdFx0fVxuXG5cdFx0Ly8gQXBwbHkgcHJlZmlsdGVyc1xuXHRcdGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBwcmVmaWx0ZXJzLCBzLCBvcHRpb25zLCBqcVhIUiApO1xuXG5cdFx0Ly8gSWYgcmVxdWVzdCB3YXMgYWJvcnRlZCBpbnNpZGUgYSBwcmVmaWx0ZXIsIHN0b3AgdGhlcmVcblx0XHRpZiAoIHN0YXRlID09PSAyICkge1xuXHRcdFx0cmV0dXJuIGpxWEhSO1xuXHRcdH1cblxuXHRcdC8vIFdlIGNhbiBmaXJlIGdsb2JhbCBldmVudHMgYXMgb2Ygbm93IGlmIGFza2VkIHRvXG5cdFx0ZmlyZUdsb2JhbHMgPSBzLmdsb2JhbDtcblxuXHRcdC8vIFdhdGNoIGZvciBhIG5ldyBzZXQgb2YgcmVxdWVzdHNcblx0XHRpZiAoIGZpcmVHbG9iYWxzICYmIGpRdWVyeS5hY3RpdmUrKyA9PT0gMCApIHtcblx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKFwiYWpheFN0YXJ0XCIpO1xuXHRcdH1cblxuXHRcdC8vIFVwcGVyY2FzZSB0aGUgdHlwZVxuXHRcdHMudHlwZSA9IHMudHlwZS50b1VwcGVyQ2FzZSgpO1xuXG5cdFx0Ly8gRGV0ZXJtaW5lIGlmIHJlcXVlc3QgaGFzIGNvbnRlbnRcblx0XHRzLmhhc0NvbnRlbnQgPSAhcm5vQ29udGVudC50ZXN0KCBzLnR5cGUgKTtcblxuXHRcdC8vIFNhdmUgdGhlIFVSTCBpbiBjYXNlIHdlJ3JlIHRveWluZyB3aXRoIHRoZSBJZi1Nb2RpZmllZC1TaW5jZVxuXHRcdC8vIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciBsYXRlciBvblxuXHRcdGNhY2hlVVJMID0gcy51cmw7XG5cblx0XHQvLyBNb3JlIG9wdGlvbnMgaGFuZGxpbmcgZm9yIHJlcXVlc3RzIHdpdGggbm8gY29udGVudFxuXHRcdGlmICggIXMuaGFzQ29udGVudCApIHtcblxuXHRcdFx0Ly8gSWYgZGF0YSBpcyBhdmFpbGFibGUsIGFwcGVuZCBkYXRhIHRvIHVybFxuXHRcdFx0aWYgKCBzLmRhdGEgKSB7XG5cdFx0XHRcdGNhY2hlVVJMID0gKCBzLnVybCArPSAoIHJxdWVyeS50ZXN0KCBjYWNoZVVSTCApID8gXCImXCIgOiBcIj9cIiApICsgcy5kYXRhICk7XG5cdFx0XHRcdC8vICM5NjgyOiByZW1vdmUgZGF0YSBzbyB0aGF0IGl0J3Mgbm90IHVzZWQgaW4gYW4gZXZlbnR1YWwgcmV0cnlcblx0XHRcdFx0ZGVsZXRlIHMuZGF0YTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIGFudGktY2FjaGUgaW4gdXJsIGlmIG5lZWRlZFxuXHRcdFx0aWYgKCBzLmNhY2hlID09PSBmYWxzZSApIHtcblx0XHRcdFx0cy51cmwgPSBydHMudGVzdCggY2FjaGVVUkwgKSA/XG5cblx0XHRcdFx0XHQvLyBJZiB0aGVyZSBpcyBhbHJlYWR5IGEgJ18nIHBhcmFtZXRlciwgc2V0IGl0cyB2YWx1ZVxuXHRcdFx0XHRcdGNhY2hlVVJMLnJlcGxhY2UoIHJ0cywgXCIkMV89XCIgKyBub25jZSsrICkgOlxuXG5cdFx0XHRcdFx0Ly8gT3RoZXJ3aXNlIGFkZCBvbmUgdG8gdGhlIGVuZFxuXHRcdFx0XHRcdGNhY2hlVVJMICsgKCBycXVlcnkudGVzdCggY2FjaGVVUkwgKSA/IFwiJlwiIDogXCI/XCIgKSArIFwiXz1cIiArIG5vbmNlKys7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gU2V0IHRoZSBJZi1Nb2RpZmllZC1TaW5jZSBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIsIGlmIGluIGlmTW9kaWZpZWQgbW9kZS5cblx0XHRpZiAoIHMuaWZNb2RpZmllZCApIHtcblx0XHRcdGlmICggalF1ZXJ5Lmxhc3RNb2RpZmllZFsgY2FjaGVVUkwgXSApIHtcblx0XHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJJZi1Nb2RpZmllZC1TaW5jZVwiLCBqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdICk7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIGpRdWVyeS5ldGFnWyBjYWNoZVVSTCBdICkge1xuXHRcdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIklmLU5vbmUtTWF0Y2hcIiwgalF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBTZXQgdGhlIGNvcnJlY3QgaGVhZGVyLCBpZiBkYXRhIGlzIGJlaW5nIHNlbnRcblx0XHRpZiAoIHMuZGF0YSAmJiBzLmhhc0NvbnRlbnQgJiYgcy5jb250ZW50VHlwZSAhPT0gZmFsc2UgfHwgb3B0aW9ucy5jb250ZW50VHlwZSApIHtcblx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiQ29udGVudC1UeXBlXCIsIHMuY29udGVudFR5cGUgKTtcblx0XHR9XG5cblx0XHQvLyBTZXQgdGhlIEFjY2VwdHMgaGVhZGVyIGZvciB0aGUgc2VydmVyLCBkZXBlbmRpbmcgb24gdGhlIGRhdGFUeXBlXG5cdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlcihcblx0XHRcdFwiQWNjZXB0XCIsXG5cdFx0XHRzLmRhdGFUeXBlc1sgMCBdICYmIHMuYWNjZXB0c1sgcy5kYXRhVHlwZXNbMF0gXSA/XG5cdFx0XHRcdHMuYWNjZXB0c1sgcy5kYXRhVHlwZXNbMF0gXSArICggcy5kYXRhVHlwZXNbIDAgXSAhPT0gXCIqXCIgPyBcIiwgXCIgKyBhbGxUeXBlcyArIFwiOyBxPTAuMDFcIiA6IFwiXCIgKSA6XG5cdFx0XHRcdHMuYWNjZXB0c1sgXCIqXCIgXVxuXHRcdCk7XG5cblx0XHQvLyBDaGVjayBmb3IgaGVhZGVycyBvcHRpb25cblx0XHRmb3IgKCBpIGluIHMuaGVhZGVycyApIHtcblx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIGksIHMuaGVhZGVyc1sgaSBdICk7XG5cdFx0fVxuXG5cdFx0Ly8gQWxsb3cgY3VzdG9tIGhlYWRlcnMvbWltZXR5cGVzIGFuZCBlYXJseSBhYm9ydFxuXHRcdGlmICggcy5iZWZvcmVTZW5kICYmICggcy5iZWZvcmVTZW5kLmNhbGwoIGNhbGxiYWNrQ29udGV4dCwganFYSFIsIHMgKSA9PT0gZmFsc2UgfHwgc3RhdGUgPT09IDIgKSApIHtcblx0XHRcdC8vIEFib3J0IGlmIG5vdCBkb25lIGFscmVhZHkgYW5kIHJldHVyblxuXHRcdFx0cmV0dXJuIGpxWEhSLmFib3J0KCk7XG5cdFx0fVxuXG5cdFx0Ly8gYWJvcnRpbmcgaXMgbm8gbG9uZ2VyIGEgY2FuY2VsbGF0aW9uXG5cdFx0c3RyQWJvcnQgPSBcImFib3J0XCI7XG5cblx0XHQvLyBJbnN0YWxsIGNhbGxiYWNrcyBvbiBkZWZlcnJlZHNcblx0XHRmb3IgKCBpIGluIHsgc3VjY2VzczogMSwgZXJyb3I6IDEsIGNvbXBsZXRlOiAxIH0gKSB7XG5cdFx0XHRqcVhIUlsgaSBdKCBzWyBpIF0gKTtcblx0XHR9XG5cblx0XHQvLyBHZXQgdHJhbnNwb3J0XG5cdFx0dHJhbnNwb3J0ID0gaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHRyYW5zcG9ydHMsIHMsIG9wdGlvbnMsIGpxWEhSICk7XG5cblx0XHQvLyBJZiBubyB0cmFuc3BvcnQsIHdlIGF1dG8tYWJvcnRcblx0XHRpZiAoICF0cmFuc3BvcnQgKSB7XG5cdFx0XHRkb25lKCAtMSwgXCJObyBUcmFuc3BvcnRcIiApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRqcVhIUi5yZWFkeVN0YXRlID0gMTtcblxuXHRcdFx0Ly8gU2VuZCBnbG9iYWwgZXZlbnRcblx0XHRcdGlmICggZmlyZUdsb2JhbHMgKSB7XG5cdFx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBcImFqYXhTZW5kXCIsIFsganFYSFIsIHMgXSApO1xuXHRcdFx0fVxuXHRcdFx0Ly8gVGltZW91dFxuXHRcdFx0aWYgKCBzLmFzeW5jICYmIHMudGltZW91dCA+IDAgKSB7XG5cdFx0XHRcdHRpbWVvdXRUaW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0anFYSFIuYWJvcnQoXCJ0aW1lb3V0XCIpO1xuXHRcdFx0XHR9LCBzLnRpbWVvdXQgKTtcblx0XHRcdH1cblxuXHRcdFx0dHJ5IHtcblx0XHRcdFx0c3RhdGUgPSAxO1xuXHRcdFx0XHR0cmFuc3BvcnQuc2VuZCggcmVxdWVzdEhlYWRlcnMsIGRvbmUgKTtcblx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXHRcdFx0XHQvLyBQcm9wYWdhdGUgZXhjZXB0aW9uIGFzIGVycm9yIGlmIG5vdCBkb25lXG5cdFx0XHRcdGlmICggc3RhdGUgPCAyICkge1xuXHRcdFx0XHRcdGRvbmUoIC0xLCBlICk7XG5cdFx0XHRcdC8vIFNpbXBseSByZXRocm93IG90aGVyd2lzZVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHRocm93IGU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDYWxsYmFjayBmb3Igd2hlbiBldmVyeXRoaW5nIGlzIGRvbmVcblx0XHRmdW5jdGlvbiBkb25lKCBzdGF0dXMsIG5hdGl2ZVN0YXR1c1RleHQsIHJlc3BvbnNlcywgaGVhZGVycyApIHtcblx0XHRcdHZhciBpc1N1Y2Nlc3MsIHN1Y2Nlc3MsIGVycm9yLCByZXNwb25zZSwgbW9kaWZpZWQsXG5cdFx0XHRcdHN0YXR1c1RleHQgPSBuYXRpdmVTdGF0dXNUZXh0O1xuXG5cdFx0XHQvLyBDYWxsZWQgb25jZVxuXHRcdFx0aWYgKCBzdGF0ZSA9PT0gMiApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdGF0ZSBpcyBcImRvbmVcIiBub3dcblx0XHRcdHN0YXRlID0gMjtcblxuXHRcdFx0Ly8gQ2xlYXIgdGltZW91dCBpZiBpdCBleGlzdHNcblx0XHRcdGlmICggdGltZW91dFRpbWVyICkge1xuXHRcdFx0XHRjbGVhclRpbWVvdXQoIHRpbWVvdXRUaW1lciApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBEZXJlZmVyZW5jZSB0cmFuc3BvcnQgZm9yIGVhcmx5IGdhcmJhZ2UgY29sbGVjdGlvblxuXHRcdFx0Ly8gKG5vIG1hdHRlciBob3cgbG9uZyB0aGUganFYSFIgb2JqZWN0IHdpbGwgYmUgdXNlZClcblx0XHRcdHRyYW5zcG9ydCA9IHVuZGVmaW5lZDtcblxuXHRcdFx0Ly8gQ2FjaGUgcmVzcG9uc2UgaGVhZGVyc1xuXHRcdFx0cmVzcG9uc2VIZWFkZXJzU3RyaW5nID0gaGVhZGVycyB8fCBcIlwiO1xuXG5cdFx0XHQvLyBTZXQgcmVhZHlTdGF0ZVxuXHRcdFx0anFYSFIucmVhZHlTdGF0ZSA9IHN0YXR1cyA+IDAgPyA0IDogMDtcblxuXHRcdFx0Ly8gRGV0ZXJtaW5lIGlmIHN1Y2Nlc3NmdWxcblx0XHRcdGlzU3VjY2VzcyA9IHN0YXR1cyA+PSAyMDAgJiYgc3RhdHVzIDwgMzAwIHx8IHN0YXR1cyA9PT0gMzA0O1xuXG5cdFx0XHQvLyBHZXQgcmVzcG9uc2UgZGF0YVxuXHRcdFx0aWYgKCByZXNwb25zZXMgKSB7XG5cdFx0XHRcdHJlc3BvbnNlID0gYWpheEhhbmRsZVJlc3BvbnNlcyggcywganFYSFIsIHJlc3BvbnNlcyApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb252ZXJ0IG5vIG1hdHRlciB3aGF0ICh0aGF0IHdheSByZXNwb25zZVhYWCBmaWVsZHMgYXJlIGFsd2F5cyBzZXQpXG5cdFx0XHRyZXNwb25zZSA9IGFqYXhDb252ZXJ0KCBzLCByZXNwb25zZSwganFYSFIsIGlzU3VjY2VzcyApO1xuXG5cdFx0XHQvLyBJZiBzdWNjZXNzZnVsLCBoYW5kbGUgdHlwZSBjaGFpbmluZ1xuXHRcdFx0aWYgKCBpc1N1Y2Nlc3MgKSB7XG5cblx0XHRcdFx0Ly8gU2V0IHRoZSBJZi1Nb2RpZmllZC1TaW5jZSBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIsIGlmIGluIGlmTW9kaWZpZWQgbW9kZS5cblx0XHRcdFx0aWYgKCBzLmlmTW9kaWZpZWQgKSB7XG5cdFx0XHRcdFx0bW9kaWZpZWQgPSBqcVhIUi5nZXRSZXNwb25zZUhlYWRlcihcIkxhc3QtTW9kaWZpZWRcIik7XG5cdFx0XHRcdFx0aWYgKCBtb2RpZmllZCApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gPSBtb2RpZmllZDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0bW9kaWZpZWQgPSBqcVhIUi5nZXRSZXNwb25zZUhlYWRlcihcImV0YWdcIik7XG5cdFx0XHRcdFx0aWYgKCBtb2RpZmllZCApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5ldGFnWyBjYWNoZVVSTCBdID0gbW9kaWZpZWQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gaWYgbm8gY29udGVudFxuXHRcdFx0XHRpZiAoIHN0YXR1cyA9PT0gMjA0IHx8IHMudHlwZSA9PT0gXCJIRUFEXCIgKSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwibm9jb250ZW50XCI7XG5cblx0XHRcdFx0Ly8gaWYgbm90IG1vZGlmaWVkXG5cdFx0XHRcdH0gZWxzZSBpZiAoIHN0YXR1cyA9PT0gMzA0ICkge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcIm5vdG1vZGlmaWVkXCI7XG5cblx0XHRcdFx0Ly8gSWYgd2UgaGF2ZSBkYXRhLCBsZXQncyBjb252ZXJ0IGl0XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IHJlc3BvbnNlLnN0YXRlO1xuXHRcdFx0XHRcdHN1Y2Nlc3MgPSByZXNwb25zZS5kYXRhO1xuXHRcdFx0XHRcdGVycm9yID0gcmVzcG9uc2UuZXJyb3I7XG5cdFx0XHRcdFx0aXNTdWNjZXNzID0gIWVycm9yO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHQvLyBXZSBleHRyYWN0IGVycm9yIGZyb20gc3RhdHVzVGV4dFxuXHRcdFx0XHQvLyB0aGVuIG5vcm1hbGl6ZSBzdGF0dXNUZXh0IGFuZCBzdGF0dXMgZm9yIG5vbi1hYm9ydHNcblx0XHRcdFx0ZXJyb3IgPSBzdGF0dXNUZXh0O1xuXHRcdFx0XHRpZiAoIHN0YXR1cyB8fCAhc3RhdHVzVGV4dCApIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJlcnJvclwiO1xuXHRcdFx0XHRcdGlmICggc3RhdHVzIDwgMCApIHtcblx0XHRcdFx0XHRcdHN0YXR1cyA9IDA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNldCBkYXRhIGZvciB0aGUgZmFrZSB4aHIgb2JqZWN0XG5cdFx0XHRqcVhIUi5zdGF0dXMgPSBzdGF0dXM7XG5cdFx0XHRqcVhIUi5zdGF0dXNUZXh0ID0gKCBuYXRpdmVTdGF0dXNUZXh0IHx8IHN0YXR1c1RleHQgKSArIFwiXCI7XG5cblx0XHRcdC8vIFN1Y2Nlc3MvRXJyb3Jcblx0XHRcdGlmICggaXNTdWNjZXNzICkge1xuXHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggY2FsbGJhY2tDb250ZXh0LCBbIHN1Y2Nlc3MsIHN0YXR1c1RleHQsIGpxWEhSIF0gKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRlZmVycmVkLnJlamVjdFdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBqcVhIUiwgc3RhdHVzVGV4dCwgZXJyb3IgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xuXHRcdFx0anFYSFIuc3RhdHVzQ29kZSggc3RhdHVzQ29kZSApO1xuXHRcdFx0c3RhdHVzQ29kZSA9IHVuZGVmaW5lZDtcblxuXHRcdFx0aWYgKCBmaXJlR2xvYmFscyApIHtcblx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoIGlzU3VjY2VzcyA/IFwiYWpheFN1Y2Nlc3NcIiA6IFwiYWpheEVycm9yXCIsXG5cdFx0XHRcdFx0WyBqcVhIUiwgcywgaXNTdWNjZXNzID8gc3VjY2VzcyA6IGVycm9yIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29tcGxldGVcblx0XHRcdGNvbXBsZXRlRGVmZXJyZWQuZmlyZVdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBqcVhIUiwgc3RhdHVzVGV4dCBdICk7XG5cblx0XHRcdGlmICggZmlyZUdsb2JhbHMgKSB7XG5cdFx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBcImFqYXhDb21wbGV0ZVwiLCBbIGpxWEhSLCBzIF0gKTtcblx0XHRcdFx0Ly8gSGFuZGxlIHRoZSBnbG9iYWwgQUpBWCBjb3VudGVyXG5cdFx0XHRcdGlmICggISggLS1qUXVlcnkuYWN0aXZlICkgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoXCJhamF4U3RvcFwiKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBqcVhIUjtcblx0fSxcblxuXHRnZXRKU09OOiBmdW5jdGlvbiggdXJsLCBkYXRhLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdldCggdXJsLCBkYXRhLCBjYWxsYmFjaywgXCJqc29uXCIgKTtcblx0fSxcblxuXHRnZXRTY3JpcHQ6IGZ1bmN0aW9uKCB1cmwsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ2V0KCB1cmwsIHVuZGVmaW5lZCwgY2FsbGJhY2ssIFwic2NyaXB0XCIgKTtcblx0fVxufSk7XG5cbmpRdWVyeS5lYWNoKCBbIFwiZ2V0XCIsIFwicG9zdFwiIF0sIGZ1bmN0aW9uKCBpLCBtZXRob2QgKSB7XG5cdGpRdWVyeVsgbWV0aG9kIF0gPSBmdW5jdGlvbiggdXJsLCBkYXRhLCBjYWxsYmFjaywgdHlwZSApIHtcblx0XHQvLyBzaGlmdCBhcmd1bWVudHMgaWYgZGF0YSBhcmd1bWVudCB3YXMgb21pdHRlZFxuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIGRhdGEgKSApIHtcblx0XHRcdHR5cGUgPSB0eXBlIHx8IGNhbGxiYWNrO1xuXHRcdFx0Y2FsbGJhY2sgPSBkYXRhO1xuXHRcdFx0ZGF0YSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cblx0XHRyZXR1cm4galF1ZXJ5LmFqYXgoe1xuXHRcdFx0dXJsOiB1cmwsXG5cdFx0XHR0eXBlOiBtZXRob2QsXG5cdFx0XHRkYXRhVHlwZTogdHlwZSxcblx0XHRcdGRhdGE6IGRhdGEsXG5cdFx0XHRzdWNjZXNzOiBjYWxsYmFja1xuXHRcdH0pO1xuXHR9O1xufSk7XG5cbi8vIEF0dGFjaCBhIGJ1bmNoIG9mIGZ1bmN0aW9ucyBmb3IgaGFuZGxpbmcgY29tbW9uIEFKQVggZXZlbnRzXG5qUXVlcnkuZWFjaCggWyBcImFqYXhTdGFydFwiLCBcImFqYXhTdG9wXCIsIFwiYWpheENvbXBsZXRlXCIsIFwiYWpheEVycm9yXCIsIFwiYWpheFN1Y2Nlc3NcIiwgXCJhamF4U2VuZFwiIF0sIGZ1bmN0aW9uKCBpLCB0eXBlICkge1xuXHRqUXVlcnkuZm5bIHR5cGUgXSA9IGZ1bmN0aW9uKCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZSwgZm4gKTtcblx0fTtcbn0pO1xuXG5cbmpRdWVyeS5fZXZhbFVybCA9IGZ1bmN0aW9uKCB1cmwgKSB7XG5cdHJldHVybiBqUXVlcnkuYWpheCh7XG5cdFx0dXJsOiB1cmwsXG5cdFx0dHlwZTogXCJHRVRcIixcblx0XHRkYXRhVHlwZTogXCJzY3JpcHRcIixcblx0XHRhc3luYzogZmFsc2UsXG5cdFx0Z2xvYmFsOiBmYWxzZSxcblx0XHRcInRocm93c1wiOiB0cnVlXG5cdH0pO1xufTtcblxuXG5qUXVlcnkuZm4uZXh0ZW5kKHtcblx0d3JhcEFsbDogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggaHRtbCApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbihpKSB7XG5cdFx0XHRcdGpRdWVyeSh0aGlzKS53cmFwQWxsKCBodG1sLmNhbGwodGhpcywgaSkgKTtcblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdGlmICggdGhpc1swXSApIHtcblx0XHRcdC8vIFRoZSBlbGVtZW50cyB0byB3cmFwIHRoZSB0YXJnZXQgYXJvdW5kXG5cdFx0XHR2YXIgd3JhcCA9IGpRdWVyeSggaHRtbCwgdGhpc1swXS5vd25lckRvY3VtZW50ICkuZXEoMCkuY2xvbmUodHJ1ZSk7XG5cblx0XHRcdGlmICggdGhpc1swXS5wYXJlbnROb2RlICkge1xuXHRcdFx0XHR3cmFwLmluc2VydEJlZm9yZSggdGhpc1swXSApO1xuXHRcdFx0fVxuXG5cdFx0XHR3cmFwLm1hcChmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIGVsZW0gPSB0aGlzO1xuXG5cdFx0XHRcdHdoaWxlICggZWxlbS5maXJzdENoaWxkICYmIGVsZW0uZmlyc3RDaGlsZC5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0XHRlbGVtID0gZWxlbS5maXJzdENoaWxkO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIGVsZW07XG5cdFx0XHR9KS5hcHBlbmQoIHRoaXMgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHR3cmFwSW5uZXI6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIGh0bWwgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oaSkge1xuXHRcdFx0XHRqUXVlcnkodGhpcykud3JhcElubmVyKCBodG1sLmNhbGwodGhpcywgaSkgKTtcblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgc2VsZiA9IGpRdWVyeSggdGhpcyApLFxuXHRcdFx0XHRjb250ZW50cyA9IHNlbGYuY29udGVudHMoKTtcblxuXHRcdFx0aWYgKCBjb250ZW50cy5sZW5ndGggKSB7XG5cdFx0XHRcdGNvbnRlbnRzLndyYXBBbGwoIGh0bWwgKTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0c2VsZi5hcHBlbmQoIGh0bWwgKTtcblx0XHRcdH1cblx0XHR9KTtcblx0fSxcblxuXHR3cmFwOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHR2YXIgaXNGdW5jdGlvbiA9IGpRdWVyeS5pc0Z1bmN0aW9uKCBodG1sICk7XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKGkpIHtcblx0XHRcdGpRdWVyeSggdGhpcyApLndyYXBBbGwoIGlzRnVuY3Rpb24gPyBodG1sLmNhbGwodGhpcywgaSkgOiBodG1sICk7XG5cdFx0fSk7XG5cdH0sXG5cblx0dW53cmFwOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5wYXJlbnQoKS5lYWNoKGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCAhalF1ZXJ5Lm5vZGVOYW1lKCB0aGlzLCBcImJvZHlcIiApICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5yZXBsYWNlV2l0aCggdGhpcy5jaGlsZE5vZGVzICk7XG5cdFx0XHR9XG5cdFx0fSkuZW5kKCk7XG5cdH1cbn0pO1xuXG5cbmpRdWVyeS5leHByLmZpbHRlcnMuaGlkZGVuID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdC8vIFN1cHBvcnQ6IE9wZXJhIDw9IDEyLjEyXG5cdC8vIE9wZXJhIHJlcG9ydHMgb2Zmc2V0V2lkdGhzIGFuZCBvZmZzZXRIZWlnaHRzIGxlc3MgdGhhbiB6ZXJvIG9uIHNvbWUgZWxlbWVudHNcblx0cmV0dXJuIGVsZW0ub2Zmc2V0V2lkdGggPD0gMCAmJiBlbGVtLm9mZnNldEhlaWdodCA8PSAwIHx8XG5cdFx0KCFzdXBwb3J0LnJlbGlhYmxlSGlkZGVuT2Zmc2V0cygpICYmXG5cdFx0XHQoKGVsZW0uc3R5bGUgJiYgZWxlbS5zdHlsZS5kaXNwbGF5KSB8fCBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApKSA9PT0gXCJub25lXCIpO1xufTtcblxualF1ZXJ5LmV4cHIuZmlsdGVycy52aXNpYmxlID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHJldHVybiAhalF1ZXJ5LmV4cHIuZmlsdGVycy5oaWRkZW4oIGVsZW0gKTtcbn07XG5cblxuXG5cbnZhciByMjAgPSAvJTIwL2csXG5cdHJicmFja2V0ID0gL1xcW1xcXSQvLFxuXHRyQ1JMRiA9IC9cXHI/XFxuL2csXG5cdHJzdWJtaXR0ZXJUeXBlcyA9IC9eKD86c3VibWl0fGJ1dHRvbnxpbWFnZXxyZXNldHxmaWxlKSQvaSxcblx0cnN1Ym1pdHRhYmxlID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8a2V5Z2VuKS9pO1xuXG5mdW5jdGlvbiBidWlsZFBhcmFtcyggcHJlZml4LCBvYmosIHRyYWRpdGlvbmFsLCBhZGQgKSB7XG5cdHZhciBuYW1lO1xuXG5cdGlmICggalF1ZXJ5LmlzQXJyYXkoIG9iaiApICkge1xuXHRcdC8vIFNlcmlhbGl6ZSBhcnJheSBpdGVtLlxuXHRcdGpRdWVyeS5lYWNoKCBvYmosIGZ1bmN0aW9uKCBpLCB2ICkge1xuXHRcdFx0aWYgKCB0cmFkaXRpb25hbCB8fCByYnJhY2tldC50ZXN0KCBwcmVmaXggKSApIHtcblx0XHRcdFx0Ly8gVHJlYXQgZWFjaCBhcnJheSBpdGVtIGFzIGEgc2NhbGFyLlxuXHRcdFx0XHRhZGQoIHByZWZpeCwgdiApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHQvLyBJdGVtIGlzIG5vbi1zY2FsYXIgKGFycmF5IG9yIG9iamVjdCksIGVuY29kZSBpdHMgbnVtZXJpYyBpbmRleC5cblx0XHRcdFx0YnVpbGRQYXJhbXMoIHByZWZpeCArIFwiW1wiICsgKCB0eXBlb2YgdiA9PT0gXCJvYmplY3RcIiA/IGkgOiBcIlwiICkgKyBcIl1cIiwgdiwgdHJhZGl0aW9uYWwsIGFkZCApO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdH0gZWxzZSBpZiAoICF0cmFkaXRpb25hbCAmJiBqUXVlcnkudHlwZSggb2JqICkgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0Ly8gU2VyaWFsaXplIG9iamVjdCBpdGVtLlxuXHRcdGZvciAoIG5hbWUgaW4gb2JqICkge1xuXHRcdFx0YnVpbGRQYXJhbXMoIHByZWZpeCArIFwiW1wiICsgbmFtZSArIFwiXVwiLCBvYmpbIG5hbWUgXSwgdHJhZGl0aW9uYWwsIGFkZCApO1xuXHRcdH1cblxuXHR9IGVsc2Uge1xuXHRcdC8vIFNlcmlhbGl6ZSBzY2FsYXIgaXRlbS5cblx0XHRhZGQoIHByZWZpeCwgb2JqICk7XG5cdH1cbn1cblxuLy8gU2VyaWFsaXplIGFuIGFycmF5IG9mIGZvcm0gZWxlbWVudHMgb3IgYSBzZXQgb2Zcbi8vIGtleS92YWx1ZXMgaW50byBhIHF1ZXJ5IHN0cmluZ1xualF1ZXJ5LnBhcmFtID0gZnVuY3Rpb24oIGEsIHRyYWRpdGlvbmFsICkge1xuXHR2YXIgcHJlZml4LFxuXHRcdHMgPSBbXSxcblx0XHRhZGQgPSBmdW5jdGlvbigga2V5LCB2YWx1ZSApIHtcblx0XHRcdC8vIElmIHZhbHVlIGlzIGEgZnVuY3Rpb24sIGludm9rZSBpdCBhbmQgcmV0dXJuIGl0cyB2YWx1ZVxuXHRcdFx0dmFsdWUgPSBqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKSA/IHZhbHVlKCkgOiAoIHZhbHVlID09IG51bGwgPyBcIlwiIDogdmFsdWUgKTtcblx0XHRcdHNbIHMubGVuZ3RoIF0gPSBlbmNvZGVVUklDb21wb25lbnQoIGtleSApICsgXCI9XCIgKyBlbmNvZGVVUklDb21wb25lbnQoIHZhbHVlICk7XG5cdFx0fTtcblxuXHQvLyBTZXQgdHJhZGl0aW9uYWwgdG8gdHJ1ZSBmb3IgalF1ZXJ5IDw9IDEuMy4yIGJlaGF2aW9yLlxuXHRpZiAoIHRyYWRpdGlvbmFsID09PSB1bmRlZmluZWQgKSB7XG5cdFx0dHJhZGl0aW9uYWwgPSBqUXVlcnkuYWpheFNldHRpbmdzICYmIGpRdWVyeS5hamF4U2V0dGluZ3MudHJhZGl0aW9uYWw7XG5cdH1cblxuXHQvLyBJZiBhbiBhcnJheSB3YXMgcGFzc2VkIGluLCBhc3N1bWUgdGhhdCBpdCBpcyBhbiBhcnJheSBvZiBmb3JtIGVsZW1lbnRzLlxuXHRpZiAoIGpRdWVyeS5pc0FycmF5KCBhICkgfHwgKCBhLmpxdWVyeSAmJiAhalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGEgKSApICkge1xuXHRcdC8vIFNlcmlhbGl6ZSB0aGUgZm9ybSBlbGVtZW50c1xuXHRcdGpRdWVyeS5lYWNoKCBhLCBmdW5jdGlvbigpIHtcblx0XHRcdGFkZCggdGhpcy5uYW1lLCB0aGlzLnZhbHVlICk7XG5cdFx0fSk7XG5cblx0fSBlbHNlIHtcblx0XHQvLyBJZiB0cmFkaXRpb25hbCwgZW5jb2RlIHRoZSBcIm9sZFwiIHdheSAodGhlIHdheSAxLjMuMiBvciBvbGRlclxuXHRcdC8vIGRpZCBpdCksIG90aGVyd2lzZSBlbmNvZGUgcGFyYW1zIHJlY3Vyc2l2ZWx5LlxuXHRcdGZvciAoIHByZWZpeCBpbiBhICkge1xuXHRcdFx0YnVpbGRQYXJhbXMoIHByZWZpeCwgYVsgcHJlZml4IF0sIHRyYWRpdGlvbmFsLCBhZGQgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBSZXR1cm4gdGhlIHJlc3VsdGluZyBzZXJpYWxpemF0aW9uXG5cdHJldHVybiBzLmpvaW4oIFwiJlwiICkucmVwbGFjZSggcjIwLCBcIitcIiApO1xufTtcblxualF1ZXJ5LmZuLmV4dGVuZCh7XG5cdHNlcmlhbGl6ZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5wYXJhbSggdGhpcy5zZXJpYWxpemVBcnJheSgpICk7XG5cdH0sXG5cdHNlcmlhbGl6ZUFycmF5OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24oKSB7XG5cdFx0XHQvLyBDYW4gYWRkIHByb3BIb29rIGZvciBcImVsZW1lbnRzXCIgdG8gZmlsdGVyIG9yIGFkZCBmb3JtIGVsZW1lbnRzXG5cdFx0XHR2YXIgZWxlbWVudHMgPSBqUXVlcnkucHJvcCggdGhpcywgXCJlbGVtZW50c1wiICk7XG5cdFx0XHRyZXR1cm4gZWxlbWVudHMgPyBqUXVlcnkubWFrZUFycmF5KCBlbGVtZW50cyApIDogdGhpcztcblx0XHR9KVxuXHRcdC5maWx0ZXIoZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgdHlwZSA9IHRoaXMudHlwZTtcblx0XHRcdC8vIFVzZSAuaXMoXCI6ZGlzYWJsZWRcIikgc28gdGhhdCBmaWVsZHNldFtkaXNhYmxlZF0gd29ya3Ncblx0XHRcdHJldHVybiB0aGlzLm5hbWUgJiYgIWpRdWVyeSggdGhpcyApLmlzKCBcIjpkaXNhYmxlZFwiICkgJiZcblx0XHRcdFx0cnN1Ym1pdHRhYmxlLnRlc3QoIHRoaXMubm9kZU5hbWUgKSAmJiAhcnN1Ym1pdHRlclR5cGVzLnRlc3QoIHR5cGUgKSAmJlxuXHRcdFx0XHQoIHRoaXMuY2hlY2tlZCB8fCAhcmNoZWNrYWJsZVR5cGUudGVzdCggdHlwZSApICk7XG5cdFx0fSlcblx0XHQubWFwKGZ1bmN0aW9uKCBpLCBlbGVtICkge1xuXHRcdFx0dmFyIHZhbCA9IGpRdWVyeSggdGhpcyApLnZhbCgpO1xuXG5cdFx0XHRyZXR1cm4gdmFsID09IG51bGwgP1xuXHRcdFx0XHRudWxsIDpcblx0XHRcdFx0alF1ZXJ5LmlzQXJyYXkoIHZhbCApID9cblx0XHRcdFx0XHRqUXVlcnkubWFwKCB2YWwsIGZ1bmN0aW9uKCB2YWwgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4geyBuYW1lOiBlbGVtLm5hbWUsIHZhbHVlOiB2YWwucmVwbGFjZSggckNSTEYsIFwiXFxyXFxuXCIgKSB9O1xuXHRcdFx0XHRcdH0pIDpcblx0XHRcdFx0XHR7IG5hbWU6IGVsZW0ubmFtZSwgdmFsdWU6IHZhbC5yZXBsYWNlKCByQ1JMRiwgXCJcXHJcXG5cIiApIH07XG5cdFx0fSkuZ2V0KCk7XG5cdH1cbn0pO1xuXG5cbi8vIENyZWF0ZSB0aGUgcmVxdWVzdCBvYmplY3Rcbi8vIChUaGlzIGlzIHN0aWxsIGF0dGFjaGVkIHRvIGFqYXhTZXR0aW5ncyBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eSlcbmpRdWVyeS5hamF4U2V0dGluZ3MueGhyID0gd2luZG93LkFjdGl2ZVhPYmplY3QgIT09IHVuZGVmaW5lZCA/XG5cdC8vIFN1cHBvcnQ6IElFNitcblx0ZnVuY3Rpb24oKSB7XG5cblx0XHQvLyBYSFIgY2Fubm90IGFjY2VzcyBsb2NhbCBmaWxlcywgYWx3YXlzIHVzZSBBY3RpdmVYIGZvciB0aGF0IGNhc2Vcblx0XHRyZXR1cm4gIXRoaXMuaXNMb2NhbCAmJlxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRTctOFxuXHRcdFx0Ly8gb2xkSUUgWEhSIGRvZXMgbm90IHN1cHBvcnQgbm9uLVJGQzI2MTYgbWV0aG9kcyAoIzEzMjQwKVxuXHRcdFx0Ly8gU2VlIGh0dHA6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9pZS9tczUzNjY0OCh2PXZzLjg1KS5hc3B4XG5cdFx0XHQvLyBhbmQgaHR0cDovL3d3dy53My5vcmcvUHJvdG9jb2xzL3JmYzI2MTYvcmZjMjYxNi1zZWM5Lmh0bWwjc2VjOVxuXHRcdFx0Ly8gQWx0aG91Z2ggdGhpcyBjaGVjayBmb3Igc2l4IG1ldGhvZHMgaW5zdGVhZCBvZiBlaWdodFxuXHRcdFx0Ly8gc2luY2UgSUUgYWxzbyBkb2VzIG5vdCBzdXBwb3J0IFwidHJhY2VcIiBhbmQgXCJjb25uZWN0XCJcblx0XHRcdC9eKGdldHxwb3N0fGhlYWR8cHV0fGRlbGV0ZXxvcHRpb25zKSQvaS50ZXN0KCB0aGlzLnR5cGUgKSAmJlxuXG5cdFx0XHRjcmVhdGVTdGFuZGFyZFhIUigpIHx8IGNyZWF0ZUFjdGl2ZVhIUigpO1xuXHR9IDpcblx0Ly8gRm9yIGFsbCBvdGhlciBicm93c2VycywgdXNlIHRoZSBzdGFuZGFyZCBYTUxIdHRwUmVxdWVzdCBvYmplY3Rcblx0Y3JlYXRlU3RhbmRhcmRYSFI7XG5cbnZhciB4aHJJZCA9IDAsXG5cdHhockNhbGxiYWNrcyA9IHt9LFxuXHR4aHJTdXBwb3J0ZWQgPSBqUXVlcnkuYWpheFNldHRpbmdzLnhocigpO1xuXG4vLyBTdXBwb3J0OiBJRTwxMFxuLy8gT3BlbiByZXF1ZXN0cyBtdXN0IGJlIG1hbnVhbGx5IGFib3J0ZWQgb24gdW5sb2FkICgjNTI4MClcbmlmICggd2luZG93LkFjdGl2ZVhPYmplY3QgKSB7XG5cdGpRdWVyeSggd2luZG93ICkub24oIFwidW5sb2FkXCIsIGZ1bmN0aW9uKCkge1xuXHRcdGZvciAoIHZhciBrZXkgaW4geGhyQ2FsbGJhY2tzICkge1xuXHRcdFx0eGhyQ2FsbGJhY2tzWyBrZXkgXSggdW5kZWZpbmVkLCB0cnVlICk7XG5cdFx0fVxuXHR9KTtcbn1cblxuLy8gRGV0ZXJtaW5lIHN1cHBvcnQgcHJvcGVydGllc1xuc3VwcG9ydC5jb3JzID0gISF4aHJTdXBwb3J0ZWQgJiYgKCBcIndpdGhDcmVkZW50aWFsc1wiIGluIHhoclN1cHBvcnRlZCApO1xueGhyU3VwcG9ydGVkID0gc3VwcG9ydC5hamF4ID0gISF4aHJTdXBwb3J0ZWQ7XG5cbi8vIENyZWF0ZSB0cmFuc3BvcnQgaWYgdGhlIGJyb3dzZXIgY2FuIHByb3ZpZGUgYW4geGhyXG5pZiAoIHhoclN1cHBvcnRlZCApIHtcblxuXHRqUXVlcnkuYWpheFRyYW5zcG9ydChmdW5jdGlvbiggb3B0aW9ucyApIHtcblx0XHQvLyBDcm9zcyBkb21haW4gb25seSBhbGxvd2VkIGlmIHN1cHBvcnRlZCB0aHJvdWdoIFhNTEh0dHBSZXF1ZXN0XG5cdFx0aWYgKCAhb3B0aW9ucy5jcm9zc0RvbWFpbiB8fCBzdXBwb3J0LmNvcnMgKSB7XG5cblx0XHRcdHZhciBjYWxsYmFjaztcblxuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0c2VuZDogZnVuY3Rpb24oIGhlYWRlcnMsIGNvbXBsZXRlICkge1xuXHRcdFx0XHRcdHZhciBpLFxuXHRcdFx0XHRcdFx0eGhyID0gb3B0aW9ucy54aHIoKSxcblx0XHRcdFx0XHRcdGlkID0gKyt4aHJJZDtcblxuXHRcdFx0XHRcdC8vIE9wZW4gdGhlIHNvY2tldFxuXHRcdFx0XHRcdHhoci5vcGVuKCBvcHRpb25zLnR5cGUsIG9wdGlvbnMudXJsLCBvcHRpb25zLmFzeW5jLCBvcHRpb25zLnVzZXJuYW1lLCBvcHRpb25zLnBhc3N3b3JkICk7XG5cblx0XHRcdFx0XHQvLyBBcHBseSBjdXN0b20gZmllbGRzIGlmIHByb3ZpZGVkXG5cdFx0XHRcdFx0aWYgKCBvcHRpb25zLnhockZpZWxkcyApIHtcblx0XHRcdFx0XHRcdGZvciAoIGkgaW4gb3B0aW9ucy54aHJGaWVsZHMgKSB7XG5cdFx0XHRcdFx0XHRcdHhoclsgaSBdID0gb3B0aW9ucy54aHJGaWVsZHNbIGkgXTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBPdmVycmlkZSBtaW1lIHR5cGUgaWYgbmVlZGVkXG5cdFx0XHRcdFx0aWYgKCBvcHRpb25zLm1pbWVUeXBlICYmIHhoci5vdmVycmlkZU1pbWVUeXBlICkge1xuXHRcdFx0XHRcdFx0eGhyLm92ZXJyaWRlTWltZVR5cGUoIG9wdGlvbnMubWltZVR5cGUgKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBYLVJlcXVlc3RlZC1XaXRoIGhlYWRlclxuXHRcdFx0XHRcdC8vIEZvciBjcm9zcy1kb21haW4gcmVxdWVzdHMsIHNlZWluZyBhcyBjb25kaXRpb25zIGZvciBhIHByZWZsaWdodCBhcmVcblx0XHRcdFx0XHQvLyBha2luIHRvIGEgamlnc2F3IHB1enpsZSwgd2Ugc2ltcGx5IG5ldmVyIHNldCBpdCB0byBiZSBzdXJlLlxuXHRcdFx0XHRcdC8vIChpdCBjYW4gYWx3YXlzIGJlIHNldCBvbiBhIHBlci1yZXF1ZXN0IGJhc2lzIG9yIGV2ZW4gdXNpbmcgYWpheFNldHVwKVxuXHRcdFx0XHRcdC8vIEZvciBzYW1lLWRvbWFpbiByZXF1ZXN0cywgd29uJ3QgY2hhbmdlIGhlYWRlciBpZiBhbHJlYWR5IHByb3ZpZGVkLlxuXHRcdFx0XHRcdGlmICggIW9wdGlvbnMuY3Jvc3NEb21haW4gJiYgIWhlYWRlcnNbXCJYLVJlcXVlc3RlZC1XaXRoXCJdICkge1xuXHRcdFx0XHRcdFx0aGVhZGVyc1tcIlgtUmVxdWVzdGVkLVdpdGhcIl0gPSBcIlhNTEh0dHBSZXF1ZXN0XCI7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gU2V0IGhlYWRlcnNcblx0XHRcdFx0XHRmb3IgKCBpIGluIGhlYWRlcnMgKSB7XG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRTw5XG5cdFx0XHRcdFx0XHQvLyBJRSdzIEFjdGl2ZVhPYmplY3QgdGhyb3dzIGEgJ1R5cGUgTWlzbWF0Y2gnIGV4Y2VwdGlvbiB3aGVuIHNldHRpbmdcblx0XHRcdFx0XHRcdC8vIHJlcXVlc3QgaGVhZGVyIHRvIGEgbnVsbC12YWx1ZS5cblx0XHRcdFx0XHRcdC8vXG5cdFx0XHRcdFx0XHQvLyBUbyBrZWVwIGNvbnNpc3RlbnQgd2l0aCBvdGhlciBYSFIgaW1wbGVtZW50YXRpb25zLCBjYXN0IHRoZSB2YWx1ZVxuXHRcdFx0XHRcdFx0Ly8gdG8gc3RyaW5nIGFuZCBpZ25vcmUgYHVuZGVmaW5lZGAuXG5cdFx0XHRcdFx0XHRpZiAoIGhlYWRlcnNbIGkgXSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdFx0XHR4aHIuc2V0UmVxdWVzdEhlYWRlciggaSwgaGVhZGVyc1sgaSBdICsgXCJcIiApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIERvIHNlbmQgdGhlIHJlcXVlc3Rcblx0XHRcdFx0XHQvLyBUaGlzIG1heSByYWlzZSBhbiBleGNlcHRpb24gd2hpY2ggaXMgYWN0dWFsbHlcblx0XHRcdFx0XHQvLyBoYW5kbGVkIGluIGpRdWVyeS5hamF4IChzbyBubyB0cnkvY2F0Y2ggaGVyZSlcblx0XHRcdFx0XHR4aHIuc2VuZCggKCBvcHRpb25zLmhhc0NvbnRlbnQgJiYgb3B0aW9ucy5kYXRhICkgfHwgbnVsbCApO1xuXG5cdFx0XHRcdFx0Ly8gTGlzdGVuZXJcblx0XHRcdFx0XHRjYWxsYmFjayA9IGZ1bmN0aW9uKCBfLCBpc0Fib3J0ICkge1xuXHRcdFx0XHRcdFx0dmFyIHN0YXR1cywgc3RhdHVzVGV4dCwgcmVzcG9uc2VzO1xuXG5cdFx0XHRcdFx0XHQvLyBXYXMgbmV2ZXIgY2FsbGVkIGFuZCBpcyBhYm9ydGVkIG9yIGNvbXBsZXRlXG5cdFx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICYmICggaXNBYm9ydCB8fCB4aHIucmVhZHlTdGF0ZSA9PT0gNCApICkge1xuXHRcdFx0XHRcdFx0XHQvLyBDbGVhbiB1cFxuXHRcdFx0XHRcdFx0XHRkZWxldGUgeGhyQ2FsbGJhY2tzWyBpZCBdO1xuXHRcdFx0XHRcdFx0XHRjYWxsYmFjayA9IHVuZGVmaW5lZDtcblx0XHRcdFx0XHRcdFx0eGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGpRdWVyeS5ub29wO1xuXG5cdFx0XHRcdFx0XHRcdC8vIEFib3J0IG1hbnVhbGx5IGlmIG5lZWRlZFxuXHRcdFx0XHRcdFx0XHRpZiAoIGlzQWJvcnQgKSB7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCB4aHIucmVhZHlTdGF0ZSAhPT0gNCApIHtcblx0XHRcdFx0XHRcdFx0XHRcdHhoci5hYm9ydCgpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRyZXNwb25zZXMgPSB7fTtcblx0XHRcdFx0XHRcdFx0XHRzdGF0dXMgPSB4aHIuc3RhdHVzO1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUU8MTBcblx0XHRcdFx0XHRcdFx0XHQvLyBBY2Nlc3NpbmcgYmluYXJ5LWRhdGEgcmVzcG9uc2VUZXh0IHRocm93cyBhbiBleGNlcHRpb25cblx0XHRcdFx0XHRcdFx0XHQvLyAoIzExNDI2KVxuXHRcdFx0XHRcdFx0XHRcdGlmICggdHlwZW9mIHhoci5yZXNwb25zZVRleHQgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRyZXNwb25zZXMudGV4dCA9IHhoci5yZXNwb25zZVRleHQ7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gRmlyZWZveCB0aHJvd3MgYW4gZXhjZXB0aW9uIHdoZW4gYWNjZXNzaW5nXG5cdFx0XHRcdFx0XHRcdFx0Ly8gc3RhdHVzVGV4dCBmb3IgZmF1bHR5IGNyb3NzLWRvbWFpbiByZXF1ZXN0c1xuXHRcdFx0XHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRzdGF0dXNUZXh0ID0geGhyLnN0YXR1c1RleHQ7XG5cdFx0XHRcdFx0XHRcdFx0fSBjYXRjaCggZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdC8vIFdlIG5vcm1hbGl6ZSB3aXRoIFdlYmtpdCBnaXZpbmcgYW4gZW1wdHkgc3RhdHVzVGV4dFxuXHRcdFx0XHRcdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwiXCI7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gRmlsdGVyIHN0YXR1cyBmb3Igbm9uIHN0YW5kYXJkIGJlaGF2aW9yc1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gSWYgdGhlIHJlcXVlc3QgaXMgbG9jYWwgYW5kIHdlIGhhdmUgZGF0YTogYXNzdW1lIGEgc3VjY2Vzc1xuXHRcdFx0XHRcdFx0XHRcdC8vIChzdWNjZXNzIHdpdGggbm8gZGF0YSB3b24ndCBnZXQgbm90aWZpZWQsIHRoYXQncyB0aGUgYmVzdCB3ZVxuXHRcdFx0XHRcdFx0XHRcdC8vIGNhbiBkbyBnaXZlbiBjdXJyZW50IGltcGxlbWVudGF0aW9ucylcblx0XHRcdFx0XHRcdFx0XHRpZiAoICFzdGF0dXMgJiYgb3B0aW9ucy5pc0xvY2FsICYmICFvcHRpb25zLmNyb3NzRG9tYWluICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0c3RhdHVzID0gcmVzcG9uc2VzLnRleHQgPyAyMDAgOiA0MDQ7XG5cdFx0XHRcdFx0XHRcdFx0Ly8gSUUgLSAjMTQ1MDogc29tZXRpbWVzIHJldHVybnMgMTIyMyB3aGVuIGl0IHNob3VsZCBiZSAyMDRcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCBzdGF0dXMgPT09IDEyMjMgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRzdGF0dXMgPSAyMDQ7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIENhbGwgY29tcGxldGUgaWYgbmVlZGVkXG5cdFx0XHRcdFx0XHRpZiAoIHJlc3BvbnNlcyApIHtcblx0XHRcdFx0XHRcdFx0Y29tcGxldGUoIHN0YXR1cywgc3RhdHVzVGV4dCwgcmVzcG9uc2VzLCB4aHIuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCkgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9O1xuXG5cdFx0XHRcdFx0aWYgKCAhb3B0aW9ucy5hc3luYyApIHtcblx0XHRcdFx0XHRcdC8vIGlmIHdlJ3JlIGluIHN5bmMgbW9kZSB3ZSBmaXJlIHRoZSBjYWxsYmFja1xuXHRcdFx0XHRcdFx0Y2FsbGJhY2soKTtcblx0XHRcdFx0XHR9IGVsc2UgaWYgKCB4aHIucmVhZHlTdGF0ZSA9PT0gNCApIHtcblx0XHRcdFx0XHRcdC8vIChJRTYgJiBJRTcpIGlmIGl0J3MgaW4gY2FjaGUgYW5kIGhhcyBiZWVuXG5cdFx0XHRcdFx0XHQvLyByZXRyaWV2ZWQgZGlyZWN0bHkgd2UgbmVlZCB0byBmaXJlIHRoZSBjYWxsYmFja1xuXHRcdFx0XHRcdFx0c2V0VGltZW91dCggY2FsbGJhY2sgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0Ly8gQWRkIHRvIHRoZSBsaXN0IG9mIGFjdGl2ZSB4aHIgY2FsbGJhY2tzXG5cdFx0XHRcdFx0XHR4aHIub25yZWFkeXN0YXRlY2hhbmdlID0geGhyQ2FsbGJhY2tzWyBpZCBdID0gY2FsbGJhY2s7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdGFib3J0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdFx0Y2FsbGJhY2soIHVuZGVmaW5lZCwgdHJ1ZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHR9XG5cdH0pO1xufVxuXG4vLyBGdW5jdGlvbnMgdG8gY3JlYXRlIHhocnNcbmZ1bmN0aW9uIGNyZWF0ZVN0YW5kYXJkWEhSKCkge1xuXHR0cnkge1xuXHRcdHJldHVybiBuZXcgd2luZG93LlhNTEh0dHBSZXF1ZXN0KCk7XG5cdH0gY2F0Y2goIGUgKSB7fVxufVxuXG5mdW5jdGlvbiBjcmVhdGVBY3RpdmVYSFIoKSB7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIG5ldyB3aW5kb3cuQWN0aXZlWE9iamVjdCggXCJNaWNyb3NvZnQuWE1MSFRUUFwiICk7XG5cdH0gY2F0Y2goIGUgKSB7fVxufVxuXG5cblxuXG4vLyBJbnN0YWxsIHNjcmlwdCBkYXRhVHlwZVxualF1ZXJ5LmFqYXhTZXR1cCh7XG5cdGFjY2VwdHM6IHtcblx0XHRzY3JpcHQ6IFwidGV4dC9qYXZhc2NyaXB0LCBhcHBsaWNhdGlvbi9qYXZhc2NyaXB0LCBhcHBsaWNhdGlvbi9lY21hc2NyaXB0LCBhcHBsaWNhdGlvbi94LWVjbWFzY3JpcHRcIlxuXHR9LFxuXHRjb250ZW50czoge1xuXHRcdHNjcmlwdDogLyg/OmphdmF8ZWNtYSlzY3JpcHQvXG5cdH0sXG5cdGNvbnZlcnRlcnM6IHtcblx0XHRcInRleHQgc2NyaXB0XCI6IGZ1bmN0aW9uKCB0ZXh0ICkge1xuXHRcdFx0alF1ZXJ5Lmdsb2JhbEV2YWwoIHRleHQgKTtcblx0XHRcdHJldHVybiB0ZXh0O1xuXHRcdH1cblx0fVxufSk7XG5cbi8vIEhhbmRsZSBjYWNoZSdzIHNwZWNpYWwgY2FzZSBhbmQgZ2xvYmFsXG5qUXVlcnkuYWpheFByZWZpbHRlciggXCJzY3JpcHRcIiwgZnVuY3Rpb24oIHMgKSB7XG5cdGlmICggcy5jYWNoZSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdHMuY2FjaGUgPSBmYWxzZTtcblx0fVxuXHRpZiAoIHMuY3Jvc3NEb21haW4gKSB7XG5cdFx0cy50eXBlID0gXCJHRVRcIjtcblx0XHRzLmdsb2JhbCA9IGZhbHNlO1xuXHR9XG59KTtcblxuLy8gQmluZCBzY3JpcHQgdGFnIGhhY2sgdHJhbnNwb3J0XG5qUXVlcnkuYWpheFRyYW5zcG9ydCggXCJzY3JpcHRcIiwgZnVuY3Rpb24ocykge1xuXG5cdC8vIFRoaXMgdHJhbnNwb3J0IG9ubHkgZGVhbHMgd2l0aCBjcm9zcyBkb21haW4gcmVxdWVzdHNcblx0aWYgKCBzLmNyb3NzRG9tYWluICkge1xuXG5cdFx0dmFyIHNjcmlwdCxcblx0XHRcdGhlYWQgPSBkb2N1bWVudC5oZWFkIHx8IGpRdWVyeShcImhlYWRcIilbMF0gfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuXG5cdFx0cmV0dXJuIHtcblxuXHRcdFx0c2VuZDogZnVuY3Rpb24oIF8sIGNhbGxiYWNrICkge1xuXG5cdFx0XHRcdHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIik7XG5cblx0XHRcdFx0c2NyaXB0LmFzeW5jID0gdHJ1ZTtcblxuXHRcdFx0XHRpZiAoIHMuc2NyaXB0Q2hhcnNldCApIHtcblx0XHRcdFx0XHRzY3JpcHQuY2hhcnNldCA9IHMuc2NyaXB0Q2hhcnNldDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHNjcmlwdC5zcmMgPSBzLnVybDtcblxuXHRcdFx0XHQvLyBBdHRhY2ggaGFuZGxlcnMgZm9yIGFsbCBicm93c2Vyc1xuXHRcdFx0XHRzY3JpcHQub25sb2FkID0gc2NyaXB0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCBfLCBpc0Fib3J0ICkge1xuXG5cdFx0XHRcdFx0aWYgKCBpc0Fib3J0IHx8ICFzY3JpcHQucmVhZHlTdGF0ZSB8fCAvbG9hZGVkfGNvbXBsZXRlLy50ZXN0KCBzY3JpcHQucmVhZHlTdGF0ZSApICkge1xuXG5cdFx0XHRcdFx0XHQvLyBIYW5kbGUgbWVtb3J5IGxlYWsgaW4gSUVcblx0XHRcdFx0XHRcdHNjcmlwdC5vbmxvYWQgPSBzY3JpcHQub25yZWFkeXN0YXRlY2hhbmdlID0gbnVsbDtcblxuXHRcdFx0XHRcdFx0Ly8gUmVtb3ZlIHRoZSBzY3JpcHRcblx0XHRcdFx0XHRcdGlmICggc2NyaXB0LnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdFx0XHRcdHNjcmlwdC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBzY3JpcHQgKTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gRGVyZWZlcmVuY2UgdGhlIHNjcmlwdFxuXHRcdFx0XHRcdFx0c2NyaXB0ID0gbnVsbDtcblxuXHRcdFx0XHRcdFx0Ly8gQ2FsbGJhY2sgaWYgbm90IGFib3J0XG5cdFx0XHRcdFx0XHRpZiAoICFpc0Fib3J0ICkge1xuXHRcdFx0XHRcdFx0XHRjYWxsYmFjayggMjAwLCBcInN1Y2Nlc3NcIiApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fTtcblxuXHRcdFx0XHQvLyBDaXJjdW12ZW50IElFNiBidWdzIHdpdGggYmFzZSBlbGVtZW50cyAoIzI3MDkgYW5kICM0Mzc4KSBieSBwcmVwZW5kaW5nXG5cdFx0XHRcdC8vIFVzZSBuYXRpdmUgRE9NIG1hbmlwdWxhdGlvbiB0byBhdm9pZCBvdXIgZG9tTWFuaXAgQUpBWCB0cmlja2VyeVxuXHRcdFx0XHRoZWFkLmluc2VydEJlZm9yZSggc2NyaXB0LCBoZWFkLmZpcnN0Q2hpbGQgKTtcblx0XHRcdH0sXG5cblx0XHRcdGFib3J0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBzY3JpcHQgKSB7XG5cdFx0XHRcdFx0c2NyaXB0Lm9ubG9hZCggdW5kZWZpbmVkLCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXHR9XG59KTtcblxuXG5cblxudmFyIG9sZENhbGxiYWNrcyA9IFtdLFxuXHRyanNvbnAgPSAvKD0pXFw/KD89JnwkKXxcXD9cXD8vO1xuXG4vLyBEZWZhdWx0IGpzb25wIHNldHRpbmdzXG5qUXVlcnkuYWpheFNldHVwKHtcblx0anNvbnA6IFwiY2FsbGJhY2tcIixcblx0anNvbnBDYWxsYmFjazogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGNhbGxiYWNrID0gb2xkQ2FsbGJhY2tzLnBvcCgpIHx8ICggalF1ZXJ5LmV4cGFuZG8gKyBcIl9cIiArICggbm9uY2UrKyApICk7XG5cdFx0dGhpc1sgY2FsbGJhY2sgXSA9IHRydWU7XG5cdFx0cmV0dXJuIGNhbGxiYWNrO1xuXHR9XG59KTtcblxuLy8gRGV0ZWN0LCBub3JtYWxpemUgb3B0aW9ucyBhbmQgaW5zdGFsbCBjYWxsYmFja3MgZm9yIGpzb25wIHJlcXVlc3RzXG5qUXVlcnkuYWpheFByZWZpbHRlciggXCJqc29uIGpzb25wXCIsIGZ1bmN0aW9uKCBzLCBvcmlnaW5hbFNldHRpbmdzLCBqcVhIUiApIHtcblxuXHR2YXIgY2FsbGJhY2tOYW1lLCBvdmVyd3JpdHRlbiwgcmVzcG9uc2VDb250YWluZXIsXG5cdFx0anNvblByb3AgPSBzLmpzb25wICE9PSBmYWxzZSAmJiAoIHJqc29ucC50ZXN0KCBzLnVybCApID9cblx0XHRcdFwidXJsXCIgOlxuXHRcdFx0dHlwZW9mIHMuZGF0YSA9PT0gXCJzdHJpbmdcIiAmJiAhKCBzLmNvbnRlbnRUeXBlIHx8IFwiXCIgKS5pbmRleE9mKFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIpICYmIHJqc29ucC50ZXN0KCBzLmRhdGEgKSAmJiBcImRhdGFcIlxuXHRcdCk7XG5cblx0Ly8gSGFuZGxlIGlmZiB0aGUgZXhwZWN0ZWQgZGF0YSB0eXBlIGlzIFwianNvbnBcIiBvciB3ZSBoYXZlIGEgcGFyYW1ldGVyIHRvIHNldFxuXHRpZiAoIGpzb25Qcm9wIHx8IHMuZGF0YVR5cGVzWyAwIF0gPT09IFwianNvbnBcIiApIHtcblxuXHRcdC8vIEdldCBjYWxsYmFjayBuYW1lLCByZW1lbWJlcmluZyBwcmVleGlzdGluZyB2YWx1ZSBhc3NvY2lhdGVkIHdpdGggaXRcblx0XHRjYWxsYmFja05hbWUgPSBzLmpzb25wQ2FsbGJhY2sgPSBqUXVlcnkuaXNGdW5jdGlvbiggcy5qc29ucENhbGxiYWNrICkgP1xuXHRcdFx0cy5qc29ucENhbGxiYWNrKCkgOlxuXHRcdFx0cy5qc29ucENhbGxiYWNrO1xuXG5cdFx0Ly8gSW5zZXJ0IGNhbGxiYWNrIGludG8gdXJsIG9yIGZvcm0gZGF0YVxuXHRcdGlmICgganNvblByb3AgKSB7XG5cdFx0XHRzWyBqc29uUHJvcCBdID0gc1sganNvblByb3AgXS5yZXBsYWNlKCByanNvbnAsIFwiJDFcIiArIGNhbGxiYWNrTmFtZSApO1xuXHRcdH0gZWxzZSBpZiAoIHMuanNvbnAgIT09IGZhbHNlICkge1xuXHRcdFx0cy51cmwgKz0gKCBycXVlcnkudGVzdCggcy51cmwgKSA/IFwiJlwiIDogXCI/XCIgKSArIHMuanNvbnAgKyBcIj1cIiArIGNhbGxiYWNrTmFtZTtcblx0XHR9XG5cblx0XHQvLyBVc2UgZGF0YSBjb252ZXJ0ZXIgdG8gcmV0cmlldmUganNvbiBhZnRlciBzY3JpcHQgZXhlY3V0aW9uXG5cdFx0cy5jb252ZXJ0ZXJzW1wic2NyaXB0IGpzb25cIl0gPSBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggIXJlc3BvbnNlQ29udGFpbmVyICkge1xuXHRcdFx0XHRqUXVlcnkuZXJyb3IoIGNhbGxiYWNrTmFtZSArIFwiIHdhcyBub3QgY2FsbGVkXCIgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXNwb25zZUNvbnRhaW5lclsgMCBdO1xuXHRcdH07XG5cblx0XHQvLyBmb3JjZSBqc29uIGRhdGFUeXBlXG5cdFx0cy5kYXRhVHlwZXNbIDAgXSA9IFwianNvblwiO1xuXG5cdFx0Ly8gSW5zdGFsbCBjYWxsYmFja1xuXHRcdG92ZXJ3cml0dGVuID0gd2luZG93WyBjYWxsYmFja05hbWUgXTtcblx0XHR3aW5kb3dbIGNhbGxiYWNrTmFtZSBdID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXNwb25zZUNvbnRhaW5lciA9IGFyZ3VtZW50cztcblx0XHR9O1xuXG5cdFx0Ly8gQ2xlYW4tdXAgZnVuY3Rpb24gKGZpcmVzIGFmdGVyIGNvbnZlcnRlcnMpXG5cdFx0anFYSFIuYWx3YXlzKGZ1bmN0aW9uKCkge1xuXHRcdFx0Ly8gUmVzdG9yZSBwcmVleGlzdGluZyB2YWx1ZVxuXHRcdFx0d2luZG93WyBjYWxsYmFja05hbWUgXSA9IG92ZXJ3cml0dGVuO1xuXG5cdFx0XHQvLyBTYXZlIGJhY2sgYXMgZnJlZVxuXHRcdFx0aWYgKCBzWyBjYWxsYmFja05hbWUgXSApIHtcblx0XHRcdFx0Ly8gbWFrZSBzdXJlIHRoYXQgcmUtdXNpbmcgdGhlIG9wdGlvbnMgZG9lc24ndCBzY3JldyB0aGluZ3MgYXJvdW5kXG5cdFx0XHRcdHMuanNvbnBDYWxsYmFjayA9IG9yaWdpbmFsU2V0dGluZ3MuanNvbnBDYWxsYmFjaztcblxuXHRcdFx0XHQvLyBzYXZlIHRoZSBjYWxsYmFjayBuYW1lIGZvciBmdXR1cmUgdXNlXG5cdFx0XHRcdG9sZENhbGxiYWNrcy5wdXNoKCBjYWxsYmFja05hbWUgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ2FsbCBpZiBpdCB3YXMgYSBmdW5jdGlvbiBhbmQgd2UgaGF2ZSBhIHJlc3BvbnNlXG5cdFx0XHRpZiAoIHJlc3BvbnNlQ29udGFpbmVyICYmIGpRdWVyeS5pc0Z1bmN0aW9uKCBvdmVyd3JpdHRlbiApICkge1xuXHRcdFx0XHRvdmVyd3JpdHRlbiggcmVzcG9uc2VDb250YWluZXJbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXNwb25zZUNvbnRhaW5lciA9IG92ZXJ3cml0dGVuID0gdW5kZWZpbmVkO1xuXHRcdH0pO1xuXG5cdFx0Ly8gRGVsZWdhdGUgdG8gc2NyaXB0XG5cdFx0cmV0dXJuIFwic2NyaXB0XCI7XG5cdH1cbn0pO1xuXG5cblxuXG4vLyBkYXRhOiBzdHJpbmcgb2YgaHRtbFxuLy8gY29udGV4dCAob3B0aW9uYWwpOiBJZiBzcGVjaWZpZWQsIHRoZSBmcmFnbWVudCB3aWxsIGJlIGNyZWF0ZWQgaW4gdGhpcyBjb250ZXh0LCBkZWZhdWx0cyB0byBkb2N1bWVudFxuLy8ga2VlcFNjcmlwdHMgKG9wdGlvbmFsKTogSWYgdHJ1ZSwgd2lsbCBpbmNsdWRlIHNjcmlwdHMgcGFzc2VkIGluIHRoZSBodG1sIHN0cmluZ1xualF1ZXJ5LnBhcnNlSFRNTCA9IGZ1bmN0aW9uKCBkYXRhLCBjb250ZXh0LCBrZWVwU2NyaXB0cyApIHtcblx0aWYgKCAhZGF0YSB8fCB0eXBlb2YgZGF0YSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXHRpZiAoIHR5cGVvZiBjb250ZXh0ID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRrZWVwU2NyaXB0cyA9IGNvbnRleHQ7XG5cdFx0Y29udGV4dCA9IGZhbHNlO1xuXHR9XG5cdGNvbnRleHQgPSBjb250ZXh0IHx8IGRvY3VtZW50O1xuXG5cdHZhciBwYXJzZWQgPSByc2luZ2xlVGFnLmV4ZWMoIGRhdGEgKSxcblx0XHRzY3JpcHRzID0gIWtlZXBTY3JpcHRzICYmIFtdO1xuXG5cdC8vIFNpbmdsZSB0YWdcblx0aWYgKCBwYXJzZWQgKSB7XG5cdFx0cmV0dXJuIFsgY29udGV4dC5jcmVhdGVFbGVtZW50KCBwYXJzZWRbMV0gKSBdO1xuXHR9XG5cblx0cGFyc2VkID0galF1ZXJ5LmJ1aWxkRnJhZ21lbnQoIFsgZGF0YSBdLCBjb250ZXh0LCBzY3JpcHRzICk7XG5cblx0aWYgKCBzY3JpcHRzICYmIHNjcmlwdHMubGVuZ3RoICkge1xuXHRcdGpRdWVyeSggc2NyaXB0cyApLnJlbW92ZSgpO1xuXHR9XG5cblx0cmV0dXJuIGpRdWVyeS5tZXJnZSggW10sIHBhcnNlZC5jaGlsZE5vZGVzICk7XG59O1xuXG5cbi8vIEtlZXAgYSBjb3B5IG9mIHRoZSBvbGQgbG9hZCBtZXRob2RcbnZhciBfbG9hZCA9IGpRdWVyeS5mbi5sb2FkO1xuXG4vKipcbiAqIExvYWQgYSB1cmwgaW50byBhIHBhZ2VcbiAqL1xualF1ZXJ5LmZuLmxvYWQgPSBmdW5jdGlvbiggdXJsLCBwYXJhbXMsIGNhbGxiYWNrICkge1xuXHRpZiAoIHR5cGVvZiB1cmwgIT09IFwic3RyaW5nXCIgJiYgX2xvYWQgKSB7XG5cdFx0cmV0dXJuIF9sb2FkLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0fVxuXG5cdHZhciBzZWxlY3RvciwgcmVzcG9uc2UsIHR5cGUsXG5cdFx0c2VsZiA9IHRoaXMsXG5cdFx0b2ZmID0gdXJsLmluZGV4T2YoXCIgXCIpO1xuXG5cdGlmICggb2ZmID49IDAgKSB7XG5cdFx0c2VsZWN0b3IgPSBqUXVlcnkudHJpbSggdXJsLnNsaWNlKCBvZmYsIHVybC5sZW5ndGggKSApO1xuXHRcdHVybCA9IHVybC5zbGljZSggMCwgb2ZmICk7XG5cdH1cblxuXHQvLyBJZiBpdCdzIGEgZnVuY3Rpb25cblx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggcGFyYW1zICkgKSB7XG5cblx0XHQvLyBXZSBhc3N1bWUgdGhhdCBpdCdzIHRoZSBjYWxsYmFja1xuXHRcdGNhbGxiYWNrID0gcGFyYW1zO1xuXHRcdHBhcmFtcyA9IHVuZGVmaW5lZDtcblxuXHQvLyBPdGhlcndpc2UsIGJ1aWxkIGEgcGFyYW0gc3RyaW5nXG5cdH0gZWxzZSBpZiAoIHBhcmFtcyAmJiB0eXBlb2YgcGFyYW1zID09PSBcIm9iamVjdFwiICkge1xuXHRcdHR5cGUgPSBcIlBPU1RcIjtcblx0fVxuXG5cdC8vIElmIHdlIGhhdmUgZWxlbWVudHMgdG8gbW9kaWZ5LCBtYWtlIHRoZSByZXF1ZXN0XG5cdGlmICggc2VsZi5sZW5ndGggPiAwICkge1xuXHRcdGpRdWVyeS5hamF4KHtcblx0XHRcdHVybDogdXJsLFxuXG5cdFx0XHQvLyBpZiBcInR5cGVcIiB2YXJpYWJsZSBpcyB1bmRlZmluZWQsIHRoZW4gXCJHRVRcIiBtZXRob2Qgd2lsbCBiZSB1c2VkXG5cdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0ZGF0YVR5cGU6IFwiaHRtbFwiLFxuXHRcdFx0ZGF0YTogcGFyYW1zXG5cdFx0fSkuZG9uZShmdW5jdGlvbiggcmVzcG9uc2VUZXh0ICkge1xuXG5cdFx0XHQvLyBTYXZlIHJlc3BvbnNlIGZvciB1c2UgaW4gY29tcGxldGUgY2FsbGJhY2tcblx0XHRcdHJlc3BvbnNlID0gYXJndW1lbnRzO1xuXG5cdFx0XHRzZWxmLmh0bWwoIHNlbGVjdG9yID9cblxuXHRcdFx0XHQvLyBJZiBhIHNlbGVjdG9yIHdhcyBzcGVjaWZpZWQsIGxvY2F0ZSB0aGUgcmlnaHQgZWxlbWVudHMgaW4gYSBkdW1teSBkaXZcblx0XHRcdFx0Ly8gRXhjbHVkZSBzY3JpcHRzIHRvIGF2b2lkIElFICdQZXJtaXNzaW9uIERlbmllZCcgZXJyb3JzXG5cdFx0XHRcdGpRdWVyeShcIjxkaXY+XCIpLmFwcGVuZCggalF1ZXJ5LnBhcnNlSFRNTCggcmVzcG9uc2VUZXh0ICkgKS5maW5kKCBzZWxlY3RvciApIDpcblxuXHRcdFx0XHQvLyBPdGhlcndpc2UgdXNlIHRoZSBmdWxsIHJlc3VsdFxuXHRcdFx0XHRyZXNwb25zZVRleHQgKTtcblxuXHRcdH0pLmNvbXBsZXRlKCBjYWxsYmFjayAmJiBmdW5jdGlvbigganFYSFIsIHN0YXR1cyApIHtcblx0XHRcdHNlbGYuZWFjaCggY2FsbGJhY2ssIHJlc3BvbnNlIHx8IFsganFYSFIucmVzcG9uc2VUZXh0LCBzdGF0dXMsIGpxWEhSIF0gKTtcblx0XHR9KTtcblx0fVxuXG5cdHJldHVybiB0aGlzO1xufTtcblxuXG5cblxualF1ZXJ5LmV4cHIuZmlsdGVycy5hbmltYXRlZCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4galF1ZXJ5LmdyZXAoalF1ZXJ5LnRpbWVycywgZnVuY3Rpb24oIGZuICkge1xuXHRcdHJldHVybiBlbGVtID09PSBmbi5lbGVtO1xuXHR9KS5sZW5ndGg7XG59O1xuXG5cblxuXG5cbnZhciBkb2NFbGVtID0gd2luZG93LmRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcblxuLyoqXG4gKiBHZXRzIGEgd2luZG93IGZyb20gYW4gZWxlbWVudFxuICovXG5mdW5jdGlvbiBnZXRXaW5kb3coIGVsZW0gKSB7XG5cdHJldHVybiBqUXVlcnkuaXNXaW5kb3coIGVsZW0gKSA/XG5cdFx0ZWxlbSA6XG5cdFx0ZWxlbS5ub2RlVHlwZSA9PT0gOSA/XG5cdFx0XHRlbGVtLmRlZmF1bHRWaWV3IHx8IGVsZW0ucGFyZW50V2luZG93IDpcblx0XHRcdGZhbHNlO1xufVxuXG5qUXVlcnkub2Zmc2V0ID0ge1xuXHRzZXRPZmZzZXQ6IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBpICkge1xuXHRcdHZhciBjdXJQb3NpdGlvbiwgY3VyTGVmdCwgY3VyQ1NTVG9wLCBjdXJUb3AsIGN1ck9mZnNldCwgY3VyQ1NTTGVmdCwgY2FsY3VsYXRlUG9zaXRpb24sXG5cdFx0XHRwb3NpdGlvbiA9IGpRdWVyeS5jc3MoIGVsZW0sIFwicG9zaXRpb25cIiApLFxuXHRcdFx0Y3VyRWxlbSA9IGpRdWVyeSggZWxlbSApLFxuXHRcdFx0cHJvcHMgPSB7fTtcblxuXHRcdC8vIHNldCBwb3NpdGlvbiBmaXJzdCwgaW4tY2FzZSB0b3AvbGVmdCBhcmUgc2V0IGV2ZW4gb24gc3RhdGljIGVsZW1cblx0XHRpZiAoIHBvc2l0aW9uID09PSBcInN0YXRpY1wiICkge1xuXHRcdFx0ZWxlbS5zdHlsZS5wb3NpdGlvbiA9IFwicmVsYXRpdmVcIjtcblx0XHR9XG5cblx0XHRjdXJPZmZzZXQgPSBjdXJFbGVtLm9mZnNldCgpO1xuXHRcdGN1ckNTU1RvcCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwidG9wXCIgKTtcblx0XHRjdXJDU1NMZWZ0ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJsZWZ0XCIgKTtcblx0XHRjYWxjdWxhdGVQb3NpdGlvbiA9ICggcG9zaXRpb24gPT09IFwiYWJzb2x1dGVcIiB8fCBwb3NpdGlvbiA9PT0gXCJmaXhlZFwiICkgJiZcblx0XHRcdGpRdWVyeS5pbkFycmF5KFwiYXV0b1wiLCBbIGN1ckNTU1RvcCwgY3VyQ1NTTGVmdCBdICkgPiAtMTtcblxuXHRcdC8vIG5lZWQgdG8gYmUgYWJsZSB0byBjYWxjdWxhdGUgcG9zaXRpb24gaWYgZWl0aGVyIHRvcCBvciBsZWZ0IGlzIGF1dG8gYW5kIHBvc2l0aW9uIGlzIGVpdGhlciBhYnNvbHV0ZSBvciBmaXhlZFxuXHRcdGlmICggY2FsY3VsYXRlUG9zaXRpb24gKSB7XG5cdFx0XHRjdXJQb3NpdGlvbiA9IGN1ckVsZW0ucG9zaXRpb24oKTtcblx0XHRcdGN1clRvcCA9IGN1clBvc2l0aW9uLnRvcDtcblx0XHRcdGN1ckxlZnQgPSBjdXJQb3NpdGlvbi5sZWZ0O1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRjdXJUb3AgPSBwYXJzZUZsb2F0KCBjdXJDU1NUb3AgKSB8fCAwO1xuXHRcdFx0Y3VyTGVmdCA9IHBhcnNlRmxvYXQoIGN1ckNTU0xlZnQgKSB8fCAwO1xuXHRcdH1cblxuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIG9wdGlvbnMgKSApIHtcblx0XHRcdG9wdGlvbnMgPSBvcHRpb25zLmNhbGwoIGVsZW0sIGksIGN1ck9mZnNldCApO1xuXHRcdH1cblxuXHRcdGlmICggb3B0aW9ucy50b3AgIT0gbnVsbCApIHtcblx0XHRcdHByb3BzLnRvcCA9ICggb3B0aW9ucy50b3AgLSBjdXJPZmZzZXQudG9wICkgKyBjdXJUb3A7XG5cdFx0fVxuXHRcdGlmICggb3B0aW9ucy5sZWZ0ICE9IG51bGwgKSB7XG5cdFx0XHRwcm9wcy5sZWZ0ID0gKCBvcHRpb25zLmxlZnQgLSBjdXJPZmZzZXQubGVmdCApICsgY3VyTGVmdDtcblx0XHR9XG5cblx0XHRpZiAoIFwidXNpbmdcIiBpbiBvcHRpb25zICkge1xuXHRcdFx0b3B0aW9ucy51c2luZy5jYWxsKCBlbGVtLCBwcm9wcyApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRjdXJFbGVtLmNzcyggcHJvcHMgKTtcblx0XHR9XG5cdH1cbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoe1xuXHRvZmZzZXQ6IGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXHRcdGlmICggYXJndW1lbnRzLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiBvcHRpb25zID09PSB1bmRlZmluZWQgP1xuXHRcdFx0XHR0aGlzIDpcblx0XHRcdFx0dGhpcy5lYWNoKGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRcdGpRdWVyeS5vZmZzZXQuc2V0T2Zmc2V0KCB0aGlzLCBvcHRpb25zLCBpICk7XG5cdFx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdHZhciBkb2NFbGVtLCB3aW4sXG5cdFx0XHRib3ggPSB7IHRvcDogMCwgbGVmdDogMCB9LFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXSxcblx0XHRcdGRvYyA9IGVsZW0gJiYgZWxlbS5vd25lckRvY3VtZW50O1xuXG5cdFx0aWYgKCAhZG9jICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGRvY0VsZW0gPSBkb2MuZG9jdW1lbnRFbGVtZW50O1xuXG5cdFx0Ly8gTWFrZSBzdXJlIGl0J3Mgbm90IGEgZGlzY29ubmVjdGVkIERPTSBub2RlXG5cdFx0aWYgKCAhalF1ZXJ5LmNvbnRhaW5zKCBkb2NFbGVtLCBlbGVtICkgKSB7XG5cdFx0XHRyZXR1cm4gYm94O1xuXHRcdH1cblxuXHRcdC8vIElmIHdlIGRvbid0IGhhdmUgZ0JDUiwganVzdCB1c2UgMCwwIHJhdGhlciB0aGFuIGVycm9yXG5cdFx0Ly8gQmxhY2tCZXJyeSA1LCBpT1MgMyAob3JpZ2luYWwgaVBob25lKVxuXHRcdGlmICggdHlwZW9mIGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0ICE9PSBzdHJ1bmRlZmluZWQgKSB7XG5cdFx0XHRib3ggPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXHRcdH1cblx0XHR3aW4gPSBnZXRXaW5kb3coIGRvYyApO1xuXHRcdHJldHVybiB7XG5cdFx0XHR0b3A6IGJveC50b3AgICsgKCB3aW4ucGFnZVlPZmZzZXQgfHwgZG9jRWxlbS5zY3JvbGxUb3AgKSAgLSAoIGRvY0VsZW0uY2xpZW50VG9wICB8fCAwICksXG5cdFx0XHRsZWZ0OiBib3gubGVmdCArICggd2luLnBhZ2VYT2Zmc2V0IHx8IGRvY0VsZW0uc2Nyb2xsTGVmdCApIC0gKCBkb2NFbGVtLmNsaWVudExlZnQgfHwgMCApXG5cdFx0fTtcblx0fSxcblxuXHRwb3NpdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0aWYgKCAhdGhpc1sgMCBdICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHZhciBvZmZzZXRQYXJlbnQsIG9mZnNldCxcblx0XHRcdHBhcmVudE9mZnNldCA9IHsgdG9wOiAwLCBsZWZ0OiAwIH0sXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdO1xuXG5cdFx0Ly8gZml4ZWQgZWxlbWVudHMgYXJlIG9mZnNldCBmcm9tIHdpbmRvdyAocGFyZW50T2Zmc2V0ID0ge3RvcDowLCBsZWZ0OiAwfSwgYmVjYXVzZSBpdCBpcyBpdHMgb25seSBvZmZzZXQgcGFyZW50XG5cdFx0aWYgKCBqUXVlcnkuY3NzKCBlbGVtLCBcInBvc2l0aW9uXCIgKSA9PT0gXCJmaXhlZFwiICkge1xuXHRcdFx0Ly8gd2UgYXNzdW1lIHRoYXQgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IGlzIGF2YWlsYWJsZSB3aGVuIGNvbXB1dGVkIHBvc2l0aW9uIGlzIGZpeGVkXG5cdFx0XHRvZmZzZXQgPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBHZXQgKnJlYWwqIG9mZnNldFBhcmVudFxuXHRcdFx0b2Zmc2V0UGFyZW50ID0gdGhpcy5vZmZzZXRQYXJlbnQoKTtcblxuXHRcdFx0Ly8gR2V0IGNvcnJlY3Qgb2Zmc2V0c1xuXHRcdFx0b2Zmc2V0ID0gdGhpcy5vZmZzZXQoKTtcblx0XHRcdGlmICggIWpRdWVyeS5ub2RlTmFtZSggb2Zmc2V0UGFyZW50WyAwIF0sIFwiaHRtbFwiICkgKSB7XG5cdFx0XHRcdHBhcmVudE9mZnNldCA9IG9mZnNldFBhcmVudC5vZmZzZXQoKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIG9mZnNldFBhcmVudCBib3JkZXJzXG5cdFx0XHRwYXJlbnRPZmZzZXQudG9wICArPSBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnRbIDAgXSwgXCJib3JkZXJUb3BXaWR0aFwiLCB0cnVlICk7XG5cdFx0XHRwYXJlbnRPZmZzZXQubGVmdCArPSBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnRbIDAgXSwgXCJib3JkZXJMZWZ0V2lkdGhcIiwgdHJ1ZSApO1xuXHRcdH1cblxuXHRcdC8vIFN1YnRyYWN0IHBhcmVudCBvZmZzZXRzIGFuZCBlbGVtZW50IG1hcmdpbnNcblx0XHQvLyBub3RlOiB3aGVuIGFuIGVsZW1lbnQgaGFzIG1hcmdpbjogYXV0byB0aGUgb2Zmc2V0TGVmdCBhbmQgbWFyZ2luTGVmdFxuXHRcdC8vIGFyZSB0aGUgc2FtZSBpbiBTYWZhcmkgY2F1c2luZyBvZmZzZXQubGVmdCB0byBpbmNvcnJlY3RseSBiZSAwXG5cdFx0cmV0dXJuIHtcblx0XHRcdHRvcDogIG9mZnNldC50b3AgIC0gcGFyZW50T2Zmc2V0LnRvcCAtIGpRdWVyeS5jc3MoIGVsZW0sIFwibWFyZ2luVG9wXCIsIHRydWUgKSxcblx0XHRcdGxlZnQ6IG9mZnNldC5sZWZ0IC0gcGFyZW50T2Zmc2V0LmxlZnQgLSBqUXVlcnkuY3NzKCBlbGVtLCBcIm1hcmdpbkxlZnRcIiwgdHJ1ZSlcblx0XHR9O1xuXHR9LFxuXG5cdG9mZnNldFBhcmVudDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIG9mZnNldFBhcmVudCA9IHRoaXMub2Zmc2V0UGFyZW50IHx8IGRvY0VsZW07XG5cblx0XHRcdHdoaWxlICggb2Zmc2V0UGFyZW50ICYmICggIWpRdWVyeS5ub2RlTmFtZSggb2Zmc2V0UGFyZW50LCBcImh0bWxcIiApICYmIGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudCwgXCJwb3NpdGlvblwiICkgPT09IFwic3RhdGljXCIgKSApIHtcblx0XHRcdFx0b2Zmc2V0UGFyZW50ID0gb2Zmc2V0UGFyZW50Lm9mZnNldFBhcmVudDtcblx0XHRcdH1cblx0XHRcdHJldHVybiBvZmZzZXRQYXJlbnQgfHwgZG9jRWxlbTtcblx0XHR9KTtcblx0fVxufSk7XG5cbi8vIENyZWF0ZSBzY3JvbGxMZWZ0IGFuZCBzY3JvbGxUb3AgbWV0aG9kc1xualF1ZXJ5LmVhY2goIHsgc2Nyb2xsTGVmdDogXCJwYWdlWE9mZnNldFwiLCBzY3JvbGxUb3A6IFwicGFnZVlPZmZzZXRcIiB9LCBmdW5jdGlvbiggbWV0aG9kLCBwcm9wICkge1xuXHR2YXIgdG9wID0gL1kvLnRlc3QoIHByb3AgKTtcblxuXHRqUXVlcnkuZm5bIG1ldGhvZCBdID0gZnVuY3Rpb24oIHZhbCApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgbWV0aG9kLCB2YWwgKSB7XG5cdFx0XHR2YXIgd2luID0gZ2V0V2luZG93KCBlbGVtICk7XG5cblx0XHRcdGlmICggdmFsID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHJldHVybiB3aW4gPyAocHJvcCBpbiB3aW4pID8gd2luWyBwcm9wIF0gOlxuXHRcdFx0XHRcdHdpbi5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnRbIG1ldGhvZCBdIDpcblx0XHRcdFx0XHRlbGVtWyBtZXRob2QgXTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCB3aW4gKSB7XG5cdFx0XHRcdHdpbi5zY3JvbGxUbyhcblx0XHRcdFx0XHQhdG9wID8gdmFsIDogalF1ZXJ5KCB3aW4gKS5zY3JvbGxMZWZ0KCksXG5cdFx0XHRcdFx0dG9wID8gdmFsIDogalF1ZXJ5KCB3aW4gKS5zY3JvbGxUb3AoKVxuXHRcdFx0XHQpO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRlbGVtWyBtZXRob2QgXSA9IHZhbDtcblx0XHRcdH1cblx0XHR9LCBtZXRob2QsIHZhbCwgYXJndW1lbnRzLmxlbmd0aCwgbnVsbCApO1xuXHR9O1xufSk7XG5cbi8vIEFkZCB0aGUgdG9wL2xlZnQgY3NzSG9va3MgdXNpbmcgalF1ZXJ5LmZuLnBvc2l0aW9uXG4vLyBXZWJraXQgYnVnOiBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MjkwODRcbi8vIGdldENvbXB1dGVkU3R5bGUgcmV0dXJucyBwZXJjZW50IHdoZW4gc3BlY2lmaWVkIGZvciB0b3AvbGVmdC9ib3R0b20vcmlnaHRcbi8vIHJhdGhlciB0aGFuIG1ha2UgdGhlIGNzcyBtb2R1bGUgZGVwZW5kIG9uIHRoZSBvZmZzZXQgbW9kdWxlLCB3ZSBqdXN0IGNoZWNrIGZvciBpdCBoZXJlXG5qUXVlcnkuZWFjaCggWyBcInRvcFwiLCBcImxlZnRcIiBdLCBmdW5jdGlvbiggaSwgcHJvcCApIHtcblx0alF1ZXJ5LmNzc0hvb2tzWyBwcm9wIF0gPSBhZGRHZXRIb29rSWYoIHN1cHBvcnQucGl4ZWxQb3NpdGlvbixcblx0XHRmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQgKSB7XG5cdFx0XHRpZiAoIGNvbXB1dGVkICkge1xuXHRcdFx0XHRjb21wdXRlZCA9IGN1ckNTUyggZWxlbSwgcHJvcCApO1xuXHRcdFx0XHQvLyBpZiBjdXJDU1MgcmV0dXJucyBwZXJjZW50YWdlLCBmYWxsYmFjayB0byBvZmZzZXRcblx0XHRcdFx0cmV0dXJuIHJudW1ub25weC50ZXN0KCBjb21wdXRlZCApID9cblx0XHRcdFx0XHRqUXVlcnkoIGVsZW0gKS5wb3NpdGlvbigpWyBwcm9wIF0gKyBcInB4XCIgOlxuXHRcdFx0XHRcdGNvbXB1dGVkO1xuXHRcdFx0fVxuXHRcdH1cblx0KTtcbn0pO1xuXG5cbi8vIENyZWF0ZSBpbm5lckhlaWdodCwgaW5uZXJXaWR0aCwgaGVpZ2h0LCB3aWR0aCwgb3V0ZXJIZWlnaHQgYW5kIG91dGVyV2lkdGggbWV0aG9kc1xualF1ZXJ5LmVhY2goIHsgSGVpZ2h0OiBcImhlaWdodFwiLCBXaWR0aDogXCJ3aWR0aFwiIH0sIGZ1bmN0aW9uKCBuYW1lLCB0eXBlICkge1xuXHRqUXVlcnkuZWFjaCggeyBwYWRkaW5nOiBcImlubmVyXCIgKyBuYW1lLCBjb250ZW50OiB0eXBlLCBcIlwiOiBcIm91dGVyXCIgKyBuYW1lIH0sIGZ1bmN0aW9uKCBkZWZhdWx0RXh0cmEsIGZ1bmNOYW1lICkge1xuXHRcdC8vIG1hcmdpbiBpcyBvbmx5IGZvciBvdXRlckhlaWdodCwgb3V0ZXJXaWR0aFxuXHRcdGpRdWVyeS5mblsgZnVuY05hbWUgXSA9IGZ1bmN0aW9uKCBtYXJnaW4sIHZhbHVlICkge1xuXHRcdFx0dmFyIGNoYWluYWJsZSA9IGFyZ3VtZW50cy5sZW5ndGggJiYgKCBkZWZhdWx0RXh0cmEgfHwgdHlwZW9mIG1hcmdpbiAhPT0gXCJib29sZWFuXCIgKSxcblx0XHRcdFx0ZXh0cmEgPSBkZWZhdWx0RXh0cmEgfHwgKCBtYXJnaW4gPT09IHRydWUgfHwgdmFsdWUgPT09IHRydWUgPyBcIm1hcmdpblwiIDogXCJib3JkZXJcIiApO1xuXG5cdFx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgdHlwZSwgdmFsdWUgKSB7XG5cdFx0XHRcdHZhciBkb2M7XG5cblx0XHRcdFx0aWYgKCBqUXVlcnkuaXNXaW5kb3coIGVsZW0gKSApIHtcblx0XHRcdFx0XHQvLyBBcyBvZiA1LzgvMjAxMiB0aGlzIHdpbGwgeWllbGQgaW5jb3JyZWN0IHJlc3VsdHMgZm9yIE1vYmlsZSBTYWZhcmksIGJ1dCB0aGVyZVxuXHRcdFx0XHRcdC8vIGlzbid0IGEgd2hvbGUgbG90IHdlIGNhbiBkby4gU2VlIHB1bGwgcmVxdWVzdCBhdCB0aGlzIFVSTCBmb3IgZGlzY3Vzc2lvbjpcblx0XHRcdFx0XHQvLyBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L2pxdWVyeS9wdWxsLzc2NFxuXHRcdFx0XHRcdHJldHVybiBlbGVtLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudFsgXCJjbGllbnRcIiArIG5hbWUgXTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEdldCBkb2N1bWVudCB3aWR0aCBvciBoZWlnaHRcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHRcdGRvYyA9IGVsZW0uZG9jdW1lbnRFbGVtZW50O1xuXG5cdFx0XHRcdFx0Ly8gRWl0aGVyIHNjcm9sbFtXaWR0aC9IZWlnaHRdIG9yIG9mZnNldFtXaWR0aC9IZWlnaHRdIG9yIGNsaWVudFtXaWR0aC9IZWlnaHRdLCB3aGljaGV2ZXIgaXMgZ3JlYXRlc3Rcblx0XHRcdFx0XHQvLyB1bmZvcnR1bmF0ZWx5LCB0aGlzIGNhdXNlcyBidWcgIzM4MzggaW4gSUU2Lzggb25seSwgYnV0IHRoZXJlIGlzIGN1cnJlbnRseSBubyBnb29kLCBzbWFsbCB3YXkgdG8gZml4IGl0LlxuXHRcdFx0XHRcdHJldHVybiBNYXRoLm1heChcblx0XHRcdFx0XHRcdGVsZW0uYm9keVsgXCJzY3JvbGxcIiArIG5hbWUgXSwgZG9jWyBcInNjcm9sbFwiICsgbmFtZSBdLFxuXHRcdFx0XHRcdFx0ZWxlbS5ib2R5WyBcIm9mZnNldFwiICsgbmFtZSBdLCBkb2NbIFwib2Zmc2V0XCIgKyBuYW1lIF0sXG5cdFx0XHRcdFx0XHRkb2NbIFwiY2xpZW50XCIgKyBuYW1lIF1cblx0XHRcdFx0XHQpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRcdC8vIEdldCB3aWR0aCBvciBoZWlnaHQgb24gdGhlIGVsZW1lbnQsIHJlcXVlc3RpbmcgYnV0IG5vdCBmb3JjaW5nIHBhcnNlRmxvYXRcblx0XHRcdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCB0eXBlLCBleHRyYSApIDpcblxuXHRcdFx0XHRcdC8vIFNldCB3aWR0aCBvciBoZWlnaHQgb24gdGhlIGVsZW1lbnRcblx0XHRcdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHR5cGUsIHZhbHVlLCBleHRyYSApO1xuXHRcdFx0fSwgdHlwZSwgY2hhaW5hYmxlID8gbWFyZ2luIDogdW5kZWZpbmVkLCBjaGFpbmFibGUsIG51bGwgKTtcblx0XHR9O1xuXHR9KTtcbn0pO1xuXG5cbi8vIFRoZSBudW1iZXIgb2YgZWxlbWVudHMgY29udGFpbmVkIGluIHRoZSBtYXRjaGVkIGVsZW1lbnQgc2V0XG5qUXVlcnkuZm4uc2l6ZSA9IGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcy5sZW5ndGg7XG59O1xuXG5qUXVlcnkuZm4uYW5kU2VsZiA9IGpRdWVyeS5mbi5hZGRCYWNrO1xuXG5cblxuXG4vLyBSZWdpc3RlciBhcyBhIG5hbWVkIEFNRCBtb2R1bGUsIHNpbmNlIGpRdWVyeSBjYW4gYmUgY29uY2F0ZW5hdGVkIHdpdGggb3RoZXJcbi8vIGZpbGVzIHRoYXQgbWF5IHVzZSBkZWZpbmUsIGJ1dCBub3QgdmlhIGEgcHJvcGVyIGNvbmNhdGVuYXRpb24gc2NyaXB0IHRoYXRcbi8vIHVuZGVyc3RhbmRzIGFub255bW91cyBBTUQgbW9kdWxlcy4gQSBuYW1lZCBBTUQgaXMgc2FmZXN0IGFuZCBtb3N0IHJvYnVzdFxuLy8gd2F5IHRvIHJlZ2lzdGVyLiBMb3dlcmNhc2UganF1ZXJ5IGlzIHVzZWQgYmVjYXVzZSBBTUQgbW9kdWxlIG5hbWVzIGFyZVxuLy8gZGVyaXZlZCBmcm9tIGZpbGUgbmFtZXMsIGFuZCBqUXVlcnkgaXMgbm9ybWFsbHkgZGVsaXZlcmVkIGluIGEgbG93ZXJjYXNlXG4vLyBmaWxlIG5hbWUuIERvIHRoaXMgYWZ0ZXIgY3JlYXRpbmcgdGhlIGdsb2JhbCBzbyB0aGF0IGlmIGFuIEFNRCBtb2R1bGUgd2FudHNcbi8vIHRvIGNhbGwgbm9Db25mbGljdCB0byBoaWRlIHRoaXMgdmVyc2lvbiBvZiBqUXVlcnksIGl0IHdpbGwgd29yay5cblxuLy8gTm90ZSB0aGF0IGZvciBtYXhpbXVtIHBvcnRhYmlsaXR5LCBsaWJyYXJpZXMgdGhhdCBhcmUgbm90IGpRdWVyeSBzaG91bGRcbi8vIGRlY2xhcmUgdGhlbXNlbHZlcyBhcyBhbm9ueW1vdXMgbW9kdWxlcywgYW5kIGF2b2lkIHNldHRpbmcgYSBnbG9iYWwgaWYgYW5cbi8vIEFNRCBsb2FkZXIgaXMgcHJlc2VudC4galF1ZXJ5IGlzIGEgc3BlY2lhbCBjYXNlLiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlXG4vLyBodHRwczovL2dpdGh1Yi5jb20vanJidXJrZS9yZXF1aXJlanMvd2lraS9VcGRhdGluZy1leGlzdGluZy1saWJyYXJpZXMjd2lraS1hbm9uXG5cbmlmICggdHlwZW9mIGRlZmluZSA9PT0gXCJmdW5jdGlvblwiICYmIGRlZmluZS5hbWQgKSB7XG5cdGRlZmluZSggXCJqcXVlcnlcIiwgW10sIGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBqUXVlcnk7XG5cdH0pO1xufVxuXG5cblxuXG52YXJcblx0Ly8gTWFwIG92ZXIgalF1ZXJ5IGluIGNhc2Ugb2Ygb3ZlcndyaXRlXG5cdF9qUXVlcnkgPSB3aW5kb3cualF1ZXJ5LFxuXG5cdC8vIE1hcCBvdmVyIHRoZSAkIGluIGNhc2Ugb2Ygb3ZlcndyaXRlXG5cdF8kID0gd2luZG93LiQ7XG5cbmpRdWVyeS5ub0NvbmZsaWN0ID0gZnVuY3Rpb24oIGRlZXAgKSB7XG5cdGlmICggd2luZG93LiQgPT09IGpRdWVyeSApIHtcblx0XHR3aW5kb3cuJCA9IF8kO1xuXHR9XG5cblx0aWYgKCBkZWVwICYmIHdpbmRvdy5qUXVlcnkgPT09IGpRdWVyeSApIHtcblx0XHR3aW5kb3cualF1ZXJ5ID0gX2pRdWVyeTtcblx0fVxuXG5cdHJldHVybiBqUXVlcnk7XG59O1xuXG4vLyBFeHBvc2UgalF1ZXJ5IGFuZCAkIGlkZW50aWZpZXJzLCBldmVuIGluXG4vLyBBTUQgKCM3MTAyI2NvbW1lbnQ6MTAsIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvanF1ZXJ5L3B1bGwvNTU3KVxuLy8gYW5kIENvbW1vbkpTIGZvciBicm93c2VyIGVtdWxhdG9ycyAoIzEzNTY2KVxuaWYgKCB0eXBlb2Ygbm9HbG9iYWwgPT09IHN0cnVuZGVmaW5lZCApIHtcblx0d2luZG93LmpRdWVyeSA9IHdpbmRvdy4kID0galF1ZXJ5O1xufVxuXG5cblxuXG5yZXR1cm4galF1ZXJ5O1xuXG59KSk7XG4iLCJ2YXIgdCA9IG5ldyAocmVxdWlyZSgnaG9nYW4uanMvbGliL3RlbXBsYXRlJykpLlRlbXBsYXRlKGZ1bmN0aW9uKGMscCxpKXt2YXIgXz10aGlzO18uYihpPWl8fFwiXCIpO2lmKF8ucyhfLmYoXCJsYXlvdXRcIixjLHAsMSksYyxwLDAsMTEsMjM2LFwie3sgfX1cIikpe18ucnMoYyxwLGZ1bmN0aW9uKGMscCxfKXtfLmIoXy5ycChcIm1hcFwiLGMscCxcIiAgICBcIikpO18uYihcIiAgICA8ZGl2IGNsYXNzPVxcXCJpbnRyb1xcXCI+XCIpO18uYihcIlxcblwiICsgaSk7Xy5iKFwiICAgICAgICA8aDEgY2xhc3M9XFxcImludHJvX19oZWFkZXJcXFwiPlwiKTtfLmIoXCJcXG5cIiArIGkpO18uYihcIiAgICAgICAgICAgIEFQSSA8c3BhbiBjbGFzcz1cXFwiaW50cm9fX2FwaS12ZXJzaW9uXFxcIj4yLjA8L3NwYW4+XCIpO18uYihcIlxcblwiICsgaSk7Xy5iKFwiICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcImludHJvX19zdWJoZWFkZXJcXFwiPtCa0LDRgNGC0Ysg0L/Qvi3QvdC+0LLQvtC80YM8L3NwYW4+XCIpO18uYihcIlxcblwiICsgaSk7Xy5iKFwiICAgICAgICA8L2gxPlwiKTtfLmIoXCJcXG5cIiArIGkpO18uYihcIiAgICA8L2Rpdj5cIik7Xy5iKFwiXFxuXCIpO30pO2MucG9wKCk7fXJldHVybiBfLmZsKCk7O30pO21vZHVsZS5leHBvcnRzID0geyAgcmVuZGVyOiBmdW5jdGlvbiAoKSB7IHJldHVybiB0LnJlbmRlci5hcHBseSh0LCBhcmd1bWVudHMpOyB9LCAgcjogZnVuY3Rpb24gKCkgeyByZXR1cm4gdC5yLmFwcGx5KHQsIGFyZ3VtZW50cyk7IH0sICByaTogZnVuY3Rpb24gKCkgeyByZXR1cm4gdC5yaS5hcHBseSh0LCBhcmd1bWVudHMpOyB9fTsiLCJ2YXIgdCA9IG5ldyAocmVxdWlyZSgnaG9nYW4uanMvbGliL3RlbXBsYXRlJykpLlRlbXBsYXRlKGZ1bmN0aW9uKGMscCxpKXt2YXIgXz10aGlzO18uYihpPWl8fFwiXCIpO2lmKF8ucyhfLmYoXCJsYXlvdXRcIixjLHAsMSksYyxwLDAsMTEsNjg3LFwie3sgfX1cIikpe18ucnMoYyxwLGZ1bmN0aW9uKGMscCxfKXtfLmIoXy5ycChcIm1hcFwiLGMscCxcIiAgICBcIikpO18uYihcIiAgICA8ZGl2IGNsYXNzPVxcXCJzdGFydFxcXCI+XCIpO18uYihcIlxcblwiICsgaSk7Xy5iKFwiICAgICAgICA8ZGl2IGNsYXNzPVxcXCJzdGFydF9fY29udGVudFxcXCI+XCIpO18uYihcIlxcblwiICsgaSk7Xy5iKFwiICAgICAgICAgICAgPGEgY2xhc3M9XFxcInN0YXJ0X19idXR0b25cXFwiIGhyZWY9XFxcIiNcXFwiIHRpdGxlPVxcXCJcXFwiPtCR0YvRgdGC0YDRi9C5INGB0YLQsNGA0YI8L2E+XCIpO18uYihcIlxcblwiICsgaSk7Xy5iKFwiICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiZm9sbG93LXVzXFxcIj5cIik7Xy5iKFwiXFxuXCIgKyBpKTtfLmIoXCIgICAgICAgICAgICAgICAgPGEgY2xhc3M9XFxcImZvbGxvdy11c19fbGluayBmb2xsb3ctdXNfX2xpbmtfbmFtZV90d2l0dGVyXFxcIiBocmVmPVxcXCIjXFxcIiB0aXRsZT1cXFwi0KHQu9C10LTQuCDQt9CwINC90LDQvNC4INCyINCi0LLQuNGC0YLQtdGA0LVcXFwiPtCh0LvQtdC00Lgg0LfQsCDQvdCw0LzQuCDQsiDQotCy0LjRgtGC0LXRgNC1PC9hPlwiKTtfLmIoXCJcXG5cIiArIGkpO18uYihcIiAgICAgICAgICAgICAgICA8YSBjbGFzcz1cXFwiZm9sbG93LXVzX19saW5rIGZvbGxvdy11c19fbGlua19uYW1lX2ZhY2Vib29rXFxcIiBocmVmPVxcXCIjXFxcIiB0aXRsZT1cXFwi0KHQu9C10LTQuCDQt9CwINC90LDQvNC4INCyINCk0LXQudGB0LHRg9C60LVcXFwiPtCh0LvQtdC00Lgg0LfQsCDQvdCw0LzQuCDQsiDQpNC10LnRgdCx0YPQutC1PC9hPlwiKTtfLmIoXCJcXG5cIiArIGkpO18uYihcIiAgICAgICAgICAgICAgICA8YSBjbGFzcz1cXFwiZm9sbG93LXVzX19saW5rIGZvbGxvdy11c19fbGlua19uYW1lX3ZrXFxcIiBocmVmPVxcXCIjXFxcIiB0aXRsZT1cXFwi0KHQu9C10LTQuCDQt9CwINC90LDQvNC4INCy0L4g0JLQutC+0L3RgtCw0LrRgtC1XFxcIj7QodC70LXQtNC4INC30LAg0L3QsNC80Lgg0LLQviDQktC60L7QvdGC0LDQutGC0LU8L2E+XCIpO18uYihcIlxcblwiICsgaSk7Xy5iKFwiICAgICAgICAgICAgPC9kaXY+XCIpO18uYihcIlxcblwiICsgaSk7Xy5iKFwiICAgICAgICA8L2Rpdj5cIik7Xy5iKFwiXFxuXCIgKyBpKTtfLmIoXCIgICAgPC9kaXY+XCIpO18uYihcIlxcblwiICsgaSk7Xy5iKF8ucnAoXCJmb290ZXJcIixjLHAsXCIgICAgXCIpKTt9KTtjLnBvcCgpO31yZXR1cm4gXy5mbCgpOzt9KTttb2R1bGUuZXhwb3J0cyA9IHsgIHJlbmRlcjogZnVuY3Rpb24gKCkgeyByZXR1cm4gdC5yZW5kZXIuYXBwbHkodCwgYXJndW1lbnRzKTsgfSwgIHI6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHQuci5hcHBseSh0LCBhcmd1bWVudHMpOyB9LCAgcmk6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHQucmkuYXBwbHkodCwgYXJndW1lbnRzKTsgfX07IiwidmFyIHQgPSBuZXcgKHJlcXVpcmUoJ2hvZ2FuLmpzL2xpYi90ZW1wbGF0ZScpKS5UZW1wbGF0ZShmdW5jdGlvbihjLHAsaSl7dmFyIF89dGhpcztfLmIoaT1pfHxcIlwiKTtfLmIoXCI8ZGl2IGNsYXNzPVxcXCJmb290ZXJcXFwiPlwiKTtfLmIoXCJcXG5cIiArIGkpO18uYihcIiAgICA8ZGl2IGNsYXNzPVxcXCJwYW5lbCBwYW5lbF90eXBlX3doaXRlIGJpbGxpbmctZHluYW1pY3MgZm9vdGVyX19wYW5lbCBmb290ZXJfX3BhbmVsX25hbWVfYmlsbGluZy1keW5hbWljc1xcXCIgZGF0YS1mb290ZXItc3RhdGU9XFxcInN1blxcXCI+XCIpO18uYihcIlxcblwiICsgaSk7Xy5iKFwiICAgICAgICA8ZGl2IGNsYXNzPVxcXCJiaWxsaW5nLWR5bmFtaWNzX19ncmFwaC13cmFwcGVyXFxcIj5cIik7Xy5iKFwiXFxuXCIgKyBpKTtfLmIoXCIgICAgICAgICAgICA8dWwgY2xhc3M9XFxcImJpbGxpbmctZHluYW1pY3NfX2dyYXBoXFxcIj5cIik7Xy5iKFwiXFxuXCIgKyBpKTtfLmIoXCIgICAgICAgICAgICAgICAgPGxpIGNsYXNzPVxcXCJiaWxsaW5nLWR5bmFtaWNzX19ncmFwaC1wb2ludFxcXCI+XCIpO18uYihcIlxcblwiICsgaSk7Xy5iKFwiICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwiYmlsbGluZy1keW5hbWljc19fZ3JhcGgtcG9pbnQtdmFsdWVcXFwiPlwiKTtfLmIoXCJcXG5cIiArIGkpO18uYihcIiAgICAgICAgICAgICAgICAgICAgICAgIDIwMFwiKTtfLmIoXCJcXG5cIiArIGkpO18uYihcIiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlwiKTtfLmIoXCJcXG5cIiArIGkpO18uYihcIiAgICAgICAgICAgICAgICA8L2xpPlwiKTtfLmIoXCJcXG5cIiArIGkpO18uYihcIiAgICAgICAgICAgICAgICA8bGkgY2xhc3M9XFxcImJpbGxpbmctZHluYW1pY3NfX2dyYXBoLXBvaW50XFxcIj5cIik7Xy5iKFwiXFxuXCIgKyBpKTtfLmIoXCIgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVxcXCJiaWxsaW5nLWR5bmFtaWNzX19ncmFwaC1wb2ludC12YWx1ZVxcXCI+XCIpO18uYihcIlxcblwiICsgaSk7Xy5iKFwiICAgICAgICAgICAgICAgICAgICAgICAgNzAwXCIpO18uYihcIlxcblwiICsgaSk7Xy5iKFwiICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XCIpO18uYihcIlxcblwiICsgaSk7Xy5iKFwiICAgICAgICAgICAgICAgIDwvbGk+XCIpO18uYihcIlxcblwiICsgaSk7Xy5iKFwiICAgICAgICAgICAgICAgIDxsaSBjbGFzcz1cXFwiYmlsbGluZy1keW5hbWljc19fZ3JhcGgtcG9pbnRcXFwiPlwiKTtfLmIoXCJcXG5cIiArIGkpO18uYihcIiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcImJpbGxpbmctZHluYW1pY3NfX2dyYXBoLXBvaW50LXZhbHVlXFxcIj5cIik7Xy5iKFwiXFxuXCIgKyBpKTtfLmIoXCIgICAgICAgICAgICAgICAgICAgICAgICAxMzAwXCIpO18uYihcIlxcblwiICsgaSk7Xy5iKFwiICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XCIpO18uYihcIlxcblwiICsgaSk7Xy5iKFwiICAgICAgICAgICAgICAgIDwvbGk+XCIpO18uYihcIlxcblwiICsgaSk7Xy5iKFwiICAgICAgICAgICAgICAgIDxsaSBjbGFzcz1cXFwiYmlsbGluZy1keW5hbWljc19fZ3JhcGgtcG9pbnRcXFwiPlwiKTtfLmIoXCJcXG5cIiArIGkpO18uYihcIiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcImJpbGxpbmctZHluYW1pY3NfX2dyYXBoLXBvaW50LXZhbHVlXFxcIj5cIik7Xy5iKFwiXFxuXCIgKyBpKTtfLmIoXCIgICAgICAgICAgICAgICAgICAgICAgICAxODAwXCIpO18uYihcIlxcblwiICsgaSk7Xy5iKFwiICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XCIpO18uYihcIlxcblwiICsgaSk7Xy5iKFwiICAgICAgICAgICAgICAgIDwvbGk+XCIpO18uYihcIlxcblwiICsgaSk7Xy5iKFwiICAgICAgICAgICAgPC91bD5cIik7Xy5iKFwiXFxuXCIgKyBpKTtfLmIoXCIgICAgICAgIDwvZGl2PlwiKTtfLmIoXCJcXG5cIiArIGkpO18uYihcIiAgICAgICAgPHAgY2xhc3M9XFxcImJpbGxpbmctZHluYW1pY3NfX2Rlc2NyaXB0aW9uXFxcIj5cIik7Xy5iKFwiXFxuXCIgKyBpKTtfLmIoXCIgICAgICAgICAgICDQlNC40L3QsNC80LjQutCwINGB0YDQtdC00L3QtdCz0L4g0YfQtdC60LAgKNCyINGA0YPQsdC70Y/RhSlcIik7Xy5iKFwiXFxuXCIgKyBpKTtfLmIoXCIgICAgICAgIDwvcD5cIik7Xy5iKFwiXFxuXCIgKyBpKTtfLmIoXCIgICAgPC9kaXY+XCIpO18uYihcIlxcblwiICsgaSk7Xy5iKFwiXFxuXCIgKyBpKTtfLmIoXCIgICAgPGRpdiBjbGFzcz1cXFwicGFuZWwgcGFuZWxfdHlwZV93aGl0ZSBsaWdodG5lc3MtcGFuZWwgZm9vdGVyX19wYW5lbCBmb290ZXJfX3BhbmVsX25hbWVfbGlnaHRuZXNzXFxcIiBkYXRhLWZvb3Rlci1zdGF0ZT1cXFwicGFnZTFcXFwiPlwiKTtfLmIoXCJcXG5cIiArIGkpO18uYihcIiAgICAgICAgPGRpdiBjbGFzcz1cXFwibGlnaHRuZXNzLXBhbmVsX19jb3VudGVyXFxcIj4wMCA6IDAyIDogMjU8L2Rpdj5cIik7Xy5iKFwiXFxuXCIgKyBpKTtfLmIoXCIgICAgICAgIDxkaXYgY2xhc3M9XFxcImxpZ2h0bmVzcy1wYW5lbF9fdmVyc2lvbiBsaWdodG5lc3MtcGFuZWxfX3ZlcnNpb25fb2ZfbmV3LWFwaVxcXCI+XCIpO18uYihcIlxcblwiICsgaSk7Xy5iKFwiICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcImxpZ2h0bmVzcy1wYW5lbF9fdmVyc2lvbi10aXRsZVxcXCI+0J3QvtCy0YvQuSBBUEk8L3NwYW4+XCIpO18uYihcIlxcblwiICsgaSk7Xy5iKFwiICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcImxpZ2h0bmVzcy1wYW5lbF9fcHJvZ3Jlc3MtYmFyXFxcIj5cIik7Xy5iKFwiXFxuXCIgKyBpKTtfLmIoXCIgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcImxpZ2h0bmVzcy1wYW5lbF9fcHJvZ3Jlc3MtYmFyLWZpbGxcXFwiPjwvc3Bhbj5cIik7Xy5iKFwiXFxuXCIgKyBpKTtfLmIoXCIgICAgICAgICAgICA8L3NwYW4+XCIpO18uYihcIlxcblwiICsgaSk7Xy5iKFwiICAgICAgICAgICAgPHAgY2xhc3M9XFxcImxpZ2h0bmVzcy1wYW5lbF9fdmVyc2lvbi1zcGVlZC1sZXZlbFxcXCI+XCIpO18uYihcIlxcblwiICsgaSk7Xy5iKFwiICAgICAgICAgICAgICAgIEpTINC60L7QtDogMzU4LDggS0IgIC8gIENTUyDQutC+0LQ6IDg5LDAgS0JcIik7Xy5iKFwiXFxuXCIgKyBpKTtfLmIoXCIgICAgICAgICAgICA8L3A+XCIpO18uYihcIlxcblwiICsgaSk7Xy5iKFwiICAgICAgICA8L2Rpdj5cIik7Xy5iKFwiXFxuXCIgKyBpKTtfLmIoXCIgICAgICAgIDxkaXYgY2xhc3M9XFxcImxpZ2h0bmVzcy1wYW5lbF9fdmVyc2lvbiBsaWdodG5lc3MtcGFuZWxfX3ZlcnNpb25fb2Zfb2xkLWFwaVxcXCI+XCIpO18uYihcIlxcblwiICsgaSk7Xy5iKFwiICAgICAgICAgICAgPHNwYW4gY2xhc3M9XFxcImxpZ2h0bmVzcy1wYW5lbF9fdmVyc2lvbi10aXRsZVxcXCI+0KHRgtCw0YDRi9C5IEFQSTwvc3Bhbj5cIik7Xy5iKFwiXFxuXCIgKyBpKTtfLmIoXCIgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwibGlnaHRuZXNzLXBhbmVsX19wcm9ncmVzcy1iYXJcXFwiPlwiKTtfLmIoXCJcXG5cIiArIGkpO18uYihcIiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cXFwibGlnaHRuZXNzLXBhbmVsX19wcm9ncmVzcy1iYXItZmlsbFxcXCI+PC9zcGFuPlwiKTtfLmIoXCJcXG5cIiArIGkpO18uYihcIiAgICAgICAgICAgIDwvc3Bhbj5cIik7Xy5iKFwiXFxuXCIgKyBpKTtfLmIoXCIgICAgICAgICAgICA8cCBjbGFzcz1cXFwibGlnaHRuZXNzLXBhbmVsX192ZXJzaW9uLXNwZWVkLWxldmVsXFxcIj5cIik7Xy5iKFwiXFxuXCIgKyBpKTtfLmIoXCIgICAgICAgICAgICAgICAgSlMg0LrQvtC0OiA2ODcsNiBLQiAgLyAgQ1NTINC60L7QtDogNjAsNCBLQlwiKTtfLmIoXCJcXG5cIiArIGkpO18uYihcIiAgICAgICAgICAgIDwvcD5cIik7Xy5iKFwiXFxuXCIgKyBpKTtfLmIoXCIgICAgICAgIDwvZGl2PlwiKTtfLmIoXCJcXG5cIiArIGkpO18uYihcIiAgICA8L2Rpdj5cIik7Xy5iKFwiXFxuXCIgKyBpKTtfLmIoXCJcXG5cIiArIGkpO18uYihcIiAgICA8ZGl2IGNsYXNzPVxcXCJwYW5lbCBwYW5lbF90eXBlX3doaXRlIGJhbmtvbWF0cy1wYW5lbCBmb290ZXJfX3BhbmVsIGZvb3Rlcl9fcGFuZWxfbmFtZV9hdG1cXFwiIGRhdGEtZm9vdGVyLXN0YXRlPVxcXCJ0d28tbWFya2Vyc1xcXCI+XCIpO18uYihcIlxcblwiICsgaSk7Xy5iKFwiICAgICAgICA8c3BhbiBjbGFzcz1cXFwiYmFua29tYXRzLXBhbmVsX190aXRsZVxcXCI+0JHQsNC90LrQvtC80LDRgtGLPGJyIC8+0JzQvtGB0LrQstGLPC9zcGFuPlwiKTtfLmIoXCJcXG5cIiArIGkpO18uYihcIiAgICA8L2Rpdj5cIik7Xy5iKFwiXFxuXCIgKyBpKTtfLmIoXCJcXG5cIiArIGkpO18uYihcIiAgICA8ZGl2IGNsYXNzPVxcXCJmb290ZXJfX3BhbmVsIGZvb3Rlcl9fcGFuZWxfbmFtZV9saW5rc1xcXCIgZGF0YS1mb290ZXItc3RhdGU9XFxcInBhZ2U3XFxcIj5cIik7Xy5iKFwiXFxuXCIgKyBpKTtfLmIoXCIgICAgICAgIDxhIGNsYXNzPVxcXCJmb290ZXJfX2xpbmtcXFwiIGhyZWY9XFxcIiNcXFwiIHRpdGxlPVxcXCJcXFwiPtCU0L7QutGD0LzQtdC90YLQsNGG0LjRjzwvYT5cIik7Xy5iKFwiXFxuXCIgKyBpKTtfLmIoXCIgICAgICAgIDxhIGNsYXNzPVxcXCJmb290ZXJfX2xpbmtcXFwiIGhyZWY9XFxcIiNcXFwiIHRpdGxlPVxcXCJcXFwiPtCf0YDQuNC80LXRgNGLPC9hPlwiKTtfLmIoXCJcXG5cIiArIGkpO18uYihcIiAgICAgICAgPGEgY2xhc3M9XFxcImZvb3Rlcl9fbGlua1xcXCIgaHJlZj1cXFwiI1xcXCIgdGl0bGU9XFxcIlxcXCI+0JjQtNC10Lgg0Lgg0LLQvtC/0YDQvtGB0Ys8L2E+XCIpO18uYihcIlxcblwiICsgaSk7Xy5iKFwiICAgIDwvZGl2PlwiKTtfLmIoXCJcXG5cIiArIGkpO18uYihcIjwvZGl2PlwiKTtfLmIoXCJcXG5cIik7cmV0dXJuIF8uZmwoKTs7fSk7bW9kdWxlLmV4cG9ydHMgPSB7ICByZW5kZXI6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHQucmVuZGVyLmFwcGx5KHQsIGFyZ3VtZW50cyk7IH0sICByOiBmdW5jdGlvbiAoKSB7IHJldHVybiB0LnIuYXBwbHkodCwgYXJndW1lbnRzKTsgfSwgIHJpOiBmdW5jdGlvbiAoKSB7IHJldHVybiB0LnJpLmFwcGx5KHQsIGFyZ3VtZW50cyk7IH19OyIsInZhciB0ID0gbmV3IChyZXF1aXJlKCdob2dhbi5qcy9saWIvdGVtcGxhdGUnKSkuVGVtcGxhdGUoZnVuY3Rpb24oYyxwLGkpe3ZhciBfPXRoaXM7Xy5iKGk9aXx8XCJcIik7Xy5iKFwiPGRpdiBjbGFzcz1cXFwiaGVhZGVyXFxcIj5cIik7Xy5iKFwiXFxuXCIgKyBpKTtfLmIoXCIgICAgPGRpdiBjbGFzcz1cXFwiaGVhZGVyX19wYW5lbCBwYW5lbCBwYW5lbF90eXBlX2JsYWNrIGZlYXR1cmVzXFxcIj5cIik7Xy5iKFwiXFxuXCIgKyBpKTtfLmIoXCIgICAgICAgIDxhIGNsYXNzPVxcXCJmZWF0dXJlc19fYXJyb3ctbGluayBmZWF0dXJlc19fYXJyb3ctbGlua190b19sZWZ0XFxcIiBocmVmPVxcXCIjXFxcIiB0aXRsZT1cXFwiXFxcIj7QndCw0LfQsNC0PC9hPlwiKTtfLmIoXCJcXG5cIiArIGkpO18uYihcIiAgICAgICAgPGEgY2xhc3M9XFxcImZlYXR1cmVzX19hcnJvdy1saW5rIGZlYXR1cmVzX19hcnJvdy1saW5rX3RvX3JpZ2h0XFxcIiBocmVmPVxcXCIjXFxcIiB0aXRsZT1cXFwiXFxcIj7QktC/0LXRgNGR0LQ8L2E+XCIpO18uYihcIlxcblwiICsgaSk7Xy5iKFwiXFxuXCIgKyBpKTtfLmIoXCIgICAgICAgIDx1bCBjbGFzcz1cXFwiZmVhdHVyZXNfX3RhYmxlLW9mLWNvbnRlbnRzXFxcIj5cIik7Xy5iKFwiXFxuXCIgKyBpKTtfLmIoXCIgICAgICAgICAgICA8bGkgY2xhc3M9XFxcImZlYXR1cmVzX190YWJsZS1vZi1jb250ZW50cy1pdGVtIGZlYXR1cmVzX190YWJsZS1vZi1jb250ZW50cy1pdGVtX2lzLWFjdGl2ZV90cnVlXFxcIj7Qm9C10LPQutC+0LLQtdGB0L3QvtGB0YLRjDwvbGk+XCIpO18uYihcIlxcblwiICsgaSk7Xy5iKFwiICAgICAgICAgICAgPGxpIGNsYXNzPVxcXCJmZWF0dXJlc19fdGFibGUtb2YtY29udGVudHMtaXRlbVxcXCI+0JzQvtC00YPQu9GM0L3QvtGB0YLRjDwvbGk+XCIpO18uYihcIlxcblwiICsgaSk7Xy5iKFwiICAgICAgICAgICAgPGxpIGNsYXNzPVxcXCJmZWF0dXJlc19fdGFibGUtb2YtY29udGVudHMtaXRlbVxcXCI+PC9saT5cIik7Xy5iKFwiXFxuXCIgKyBpKTtfLmIoXCIgICAgICAgICAgICA8bGkgY2xhc3M9XFxcImZlYXR1cmVzX190YWJsZS1vZi1jb250ZW50cy1pdGVtXFxcIj48L2xpPlwiKTtfLmIoXCJcXG5cIiArIGkpO18uYihcIiAgICAgICAgICAgIDxsaSBjbGFzcz1cXFwiZmVhdHVyZXNfX3RhYmxlLW9mLWNvbnRlbnRzLWl0ZW1cXFwiPjwvbGk+XCIpO18uYihcIlxcblwiICsgaSk7Xy5iKFwiICAgICAgICAgICAgPGxpIGNsYXNzPVxcXCJmZWF0dXJlc19fdGFibGUtb2YtY29udGVudHMtaXRlbVxcXCI+PC9saT5cIik7Xy5iKFwiXFxuXCIgKyBpKTtfLmIoXCIgICAgICAgIDwvdWw+XCIpO18uYihcIlxcblwiICsgaSk7Xy5iKFwiXFxuXCIgKyBpKTtfLmIoXCIgICAgICAgIDx1bCBjbGFzcz1cXFwiZmVhdHVyZXNfX2xpc3RcXFwiPlwiKTtfLmIoXCJcXG5cIiArIGkpO18uYihcIiAgICAgICAgICAgIDxsaSBjbGFzcz1cXFwiZmVhdHVyZXNfX2xpc3QtaXRlbSBmZWF0dXJlc19fbGlzdC1pdGVtX25hbWVfbGlnaHRuZXNzXFxcIj5cIik7Xy5iKFwiXFxuXCIgKyBpKTtfLmIoXCIgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiZmVhdHVyZXNfX2xpc3QtaXRlbS1zZWN0aW9uXFxcIj5cIik7Xy5iKFwiXFxuXCIgKyBpKTtfLmIoXCIgICAgICAgICAgICAgICAgICAgIDxoMSBjbGFzcz1cXFwiZmVhdHVyZXNfX2hlYWRlclxcXCI+0JvQtdCz0LrQvtCy0LXRgdC90L7RgdGC0Yw8L2gxPlwiKTtfLmIoXCJcXG5cIiArIGkpO18uYihcIiAgICAgICAgICAgICAgICAgICAgPHA+XCIpO18uYihcIlxcblwiICsgaSk7Xy5iKFwiICAgICAgICAgICAgICAgICAgICAgICAgSlMg0LggQ1NTINC60L7QtCDQvdC+0LLQvtC5INCy0LXRgNGB0LjQuCBBUEkg0LfQsNC90LjQvNCw0LXRgiDQstGB0LXQs9C+IDEwNSDQmtCxLiDQsiDQsdCw0LfQvtCy0L7QuSDQv9C+0YHRgtCw0LLQutC1LCDQstC80LXRgdGC0L4g0L/RgNC10LbQvdC40YUgMjU1INCa0LEuLCDRh9GC0L4g0L/QvtC30LLQvtC70LjQu9C+INGD0LLQtdC70LjRh9C40YLRjCDRgdC60L7RgNC+0YHRgtGMINC+0YLQutGA0YvRgtC40Y8g0YHRgtGA0LDQvdC40YYg0YEg0LrQsNGA0YLQvtC5LlwiKTtfLmIoXCJcXG5cIiArIGkpO18uYihcIiAgICAgICAgICAgICAgICAgICAgPC9wPlwiKTtfLmIoXCJcXG5cIiArIGkpO18uYihcIiAgICAgICAgICAgICAgICA8L2Rpdj5cIik7Xy5iKFwiXFxuXCIgKyBpKTtfLmIoXCIgICAgICAgICAgICA8L2xpPlwiKTtfLmIoXCJcXG5cIiArIGkpO18uYihcIiAgICAgICAgICAgIDxsaSBjbGFzcz1cXFwiZmVhdHVyZXNfX2xpc3QtaXRlbSBmZWF0dXJlc19fbGlzdC1pdGVtX25hbWVfbW9kdWxhcml0eVxcXCI+XCIpO18uYihcIlxcblwiICsgaSk7Xy5iKFwiICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImZlYXR1cmVzX19saXN0LWl0ZW0tc2VjdGlvblxcXCI+XCIpO18uYihcIlxcblwiICsgaSk7Xy5iKFwiICAgICAgICAgICAgICAgICAgICA8aDEgY2xhc3M9XFxcImZlYXR1cmVzX19oZWFkZXJcXFwiPtCc0L7QtNGD0LvRjNC90L7RgdGC0Yw8L2gxPlwiKTtfLmIoXCJcXG5cIiArIGkpO18uYihcIiAgICAgICAgICAgICAgICAgICAgPHA+XCIpO18uYihcIlxcblwiICsgaSk7Xy5iKFwiICAgICAgICAgICAgICAgICAgICAgICAg0J3QvtCy0YvQuSBBUEkg0YHQvtCy0LzQtdGB0YLQuNC8INGBINCx0L7Qu9GM0YjQuNC90YHRgtCy0L7QvCDQvNC+0LTRg9C70LXQuSDQsdC40LHQu9C40L7RgtC10LrQuCBMZWFmbGV0LiDQn9C+0LzQuNC80L4g0LPQvtGC0L7QstGL0YUg0LzQvtC00YPQu9C10LksINGC0LDQutC40YUg0LrQsNC6INC60LvQsNGB0YLQtdGA0LjQt9Cw0YbQuNGPLCDRgtC10L/Qu9C+0LLQsNGPINC60LDRgNGC0LAg0LjQu9C4INCw0L3QuNC80LjRgNC+0LLQsNC90L3Ri9C1INC80LDRgNC60LXRgNGLLCDQstGLINC80L7QttC10YLQtSDQtNC+0LHQsNCy0LjRgtGMINGB0LLQvtC4LlwiKTtfLmIoXCJcXG5cIiArIGkpO18uYihcIiAgICAgICAgICAgICAgICAgICAgPC9wPlwiKTtfLmIoXCJcXG5cIiArIGkpO18uYihcIiAgICAgICAgICAgICAgICA8L2Rpdj5cIik7Xy5iKFwiXFxuXCIgKyBpKTtfLmIoXCIgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiZmVhdHVyZXNfX2xpc3QtaXRlbS1zZWN0aW9uIGZlYXR1cmVzX19saXN0LWl0ZW0tc2VjdGlvbl9pcy1ib3R0b21fdHJ1ZVxcXCI+XCIpO18uYihcIlxcblwiICsgaSk7Xy5iKFwiICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz1cXFwiZmVhdHVyZXNfX3JvdW5kLWxpbmsgZmVhdHVyZXNfX3JvdW5kLWxpbmtfbmFtZV90d28tbWFya2Vyc1xcXCIgZGF0YS1zdGF0ZT1cXFwidHdvLW1hcmtlcnNcXFwiIGhyZWY9XFxcIiNcXFwiIHRpdGxlPVxcXCJcXFwiPjwvYT5cIik7Xy5iKFwiXFxuXCIgKyBpKTtfLmIoXCIgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPVxcXCJmZWF0dXJlc19fcm91bmQtbGluayBmZWF0dXJlc19fcm91bmQtbGlua19uYW1lX3N1blxcXCIgZGF0YS1zdGF0ZT1cXFwic3VuXFxcIiBocmVmPVxcXCIjXFxcIiB0aXRsZT1cXFwiXFxcIj48L2E+XCIpO18uYihcIlxcblwiICsgaSk7Xy5iKFwiICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz1cXFwiZmVhdHVyZXNfX3JvdW5kLWxpbmsgZmVhdHVyZXNfX3JvdW5kLWxpbmtfbmFtZV9tYXJrZXJcXFwiIGRhdGEtc3RhdGU9XFxcIm1hcmtlclxcXCIgaHJlZj1cXFwiI1xcXCIgdGl0bGU9XFxcIlxcXCI+PC9hPlwiKTtfLmIoXCJcXG5cIiArIGkpO18uYihcIiAgICAgICAgICAgICAgICA8L2Rpdj5cIik7Xy5iKFwiXFxuXCIgKyBpKTtfLmIoXCIgICAgICAgICAgICA8L2xpPlwiKTtfLmIoXCJcXG5cIiArIGkpO18uYihcIiAgICAgICAgICAgIDxsaSBjbGFzcz1cXFwiZmVhdHVyZXNfX2xpc3QtaXRlbSBmZWF0dXJlc19fbGlzdC1pdGVtX25hbWVfdGhlbWVzXFxcIj5cIik7Xy5iKFwiXFxuXCIgKyBpKTtfLmIoXCIgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiZmVhdHVyZXNfX2xpc3QtaXRlbS1zZWN0aW9uXFxcIj5cIik7Xy5iKFwiXFxuXCIgKyBpKTtfLmIoXCIgICAgICAgICAgICAgICAgICAgIDxoMSBjbGFzcz1cXFwiZmVhdHVyZXNfX2hlYWRlclxcXCI+0J3QvtCy0YvQuSDQtNC40LfQsNC50L0g0LgmbmJzcDvQstGL0LHQvtGAINGC0LXQvNGLPC9oMT5cIik7Xy5iKFwiXFxuXCIgKyBpKTtfLmIoXCIgICAgICAgICAgICAgICAgICAgIDxwPlwiKTtfLmIoXCJcXG5cIiArIGkpO18uYihcIiAgICAgICAgICAgICAgICAgICAgICAgINCY0YHQv9C+0LvRjNC30YPQudGC0LUg0YLQtdC80YMsINC60L7RgtC+0YDQsNGPINCx0YPQtNC10YIg0LvRg9GH0YjQtSDRgdC80L7RgtGA0LXRgtGM0YHRjyDQvdCwINCy0LDRiNC10Lwg0YHQsNC50YLQtSDigJQg0YLRkdC80L3Rg9GOINC40LvQuCZuYnNwO9GB0LLQtdGC0LvRg9GOLlwiKTtfLmIoXCJcXG5cIiArIGkpO18uYihcIiAgICAgICAgICAgICAgICAgICAgPC9wPlwiKTtfLmIoXCJcXG5cIiArIGkpO18uYihcIiAgICAgICAgICAgICAgICA8L2Rpdj5cIik7Xy5iKFwiXFxuXCIgKyBpKTtfLmIoXCIgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiZmVhdHVyZXNfX2xpc3QtaXRlbS1zZWN0aW9uIHRoZW1lcy1zd2l0Y2hlciBmZWF0dXJlc19fbGlzdC1pdGVtLXNlY3Rpb25faXMtYm90dG9tX3RydWVcXFwiPlwiKTtfLmIoXCJcXG5cIiArIGkpO18uYihcIiAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9XFxcInRoZW1lcy1zd2l0Y2hlcl9fc3dpdGNoZXItbGluayBmZWF0dXJlc19fcm91bmQtbGluayB0aGVtZXMtc3dpdGNoZXJfX3N3aXRjaGVyLWxpbmtfdGhlbWVfbGlnaHRcXFwiIGRhdGEtc3RhdGU9XFxcImxpZ2h0LXRoZW1lXFxcIiBocmVmPVxcXCIjXFxcIiB0aXRsZT1cXFwi0JLQutC70Y7Rh9C40YLRjCDRgdCy0LXRgtC70YPRjiDRgtC10LzRg1xcXCI+0JLQutC70Y7Rh9C40YLRjCDRgdCy0LXRgtC70YPRjiDRgtC10LzRgzwvYT5cIik7Xy5iKFwiXFxuXCIgKyBpKTtfLmIoXCIgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPVxcXCJ0aGVtZXMtc3dpdGNoZXJfX3N3aXRjaGVyLWxpbmsgZmVhdHVyZXNfX3JvdW5kLWxpbmsgdGhlbWVzLXN3aXRjaGVyX19zd2l0Y2hlci1saW5rX3RoZW1lX2RhcmtcXFwiIGRhdGEtc3RhdGU9XFxcImRhcmstdGhlbWVcXFwiIGhyZWY9XFxcIiNcXFwiIHRpdGxlPVxcXCLQktC60LvRjtGH0LjRgtGMINGC0ZHQvNC90YPRjiDRgtC10LzRg1xcXCI+0JLQutC70Y7Rh9C40YLRjCDRgtGR0LzQvdGD0Y4g0YLQtdC80YM8L2E+XCIpO18uYihcIlxcblwiICsgaSk7Xy5iKFwiICAgICAgICAgICAgICAgIDwvZGl2PlwiKTtfLmIoXCJcXG5cIiArIGkpO18uYihcIiAgICAgICAgICAgIDwvbGk+XCIpO18uYihcIlxcblwiICsgaSk7Xy5iKFwiICAgICAgICAgICAgPGxpIGNsYXNzPVxcXCJmZWF0dXJlc19fbGlzdC1pdGVtIGZlYXR1cmVzX19saXN0LWl0ZW1fbmFtZV9lbnRyYW5jZXNcXFwiPlwiKTtfLmIoXCJcXG5cIiArIGkpO18uYihcIiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJmZWF0dXJlc19fbGlzdC1pdGVtLXNlY3Rpb25cXFwiPlwiKTtfLmIoXCJcXG5cIiArIGkpO18uYihcIiAgICAgICAgICAgICAgICAgICAgPGgxIGNsYXNzPVxcXCJmZWF0dXJlc19faGVhZGVyXFxcIj7QktGF0L7QtNGLINCyINC30LTQsNC90LjRjzwvaDE+XCIpO18uYihcIlxcblwiICsgaSk7Xy5iKFwiICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJwc2V1ZG9jYXJkXFxcIj5cIik7Xy5iKFwiXFxuXCIgKyBpKTtfLmIoXCIgICAgICAgICAgICAgICAgICAgICAgICA8aDIgY2xhc3M9XFxcInBzZXVkb2NhcmRfX2hlYWRlclxcXCI+0KbQtdC90YLRgCDRgNC10LDQsdC40LvQuNGC0LDRhtC40Lgg0YDQtdGH0Lgg0KLQsNGC0YzRj9C90Ysg0KHQvtC70L7QstGM0ZHQstC+0Lk8L2gyPlwiKTtfLmIoXCJcXG5cIiArIGkpO18uYihcIiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPVxcXCJwc2V1ZG9jYXJkX19hZGRyZXNzXFxcIj7QndC10LLRgdC60LjQuSDQv9GA0L7RgdC/0LXQutGCLCAxNzA8L3A+XCIpO18uYihcIlxcblwiICsgaSk7Xy5iKFwiICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9XFxcInBzZXVkb2NhcmRfX3JvdXRlLWluc3RydWN0aW9uc1xcXCI+XCIpO18uYihcIlxcblwiICsgaSk7Xy5iKFwiICAgICAgICAgICAgICAgICAgICAgICAgICAgINCf0L7QstC10YDQvdC40YLQtSDQvdCwINCY0YHQv9C+0LvQutC+0LzRgdC60YPRjiwg0L3QviDQtNCw0LvQtdC60L4g0L3QtSDRg9C10LfQttCw0LnRgtC1Jm5ic3A74oCUINCy0LDQvCDQsiDRg9Cz0LvQvtCy0L7QtSDQt9C00LDQvdC40LUuINCf0YDQvtC50LTQuNGC0LUg0LLQviDQtNCy0L7RgCwg0LLRhdC+0LQg0LHRg9C00LXRgiDQv9C+INC/0YDQsNCy0YPRjiDRgNGD0LrRgy5cIik7Xy5iKFwiXFxuXCIgKyBpKTtfLmIoXCIgICAgICAgICAgICAgICAgICAgICAgICA8L3A+XCIpO18uYihcIlxcblwiICsgaSk7Xy5iKFwiICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9XFxcInBzZXVkb2NhcmRfX3RyeS1pdFxcXCI+XCIpO18uYihcIlxcblwiICsgaSk7Xy5iKFwiICAgICAgICAgICAgICAgICAgICAgICAgICAgINCS0LzQtdGB0YLQviDRgtGL0YHRj9GH0Lgg0YHQu9C+0LI6IDxhIGNsYXNzPVxcXCJwc2V1ZG9jYXJkX19maW5kLWVudHJhbmNlLWxpbmtcXFwiIGhyZWY9XFxcIiNcXFwiPtCd0LDQudGC0Lgg0LLRhdC+0LQ8L2E+XCIpO18uYihcIlxcblwiICsgaSk7Xy5iKFwiICAgICAgICAgICAgICAgICAgICAgICAgPC9wPlwiKTtfLmIoXCJcXG5cIiArIGkpO18uYihcIiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XCIpO18uYihcIlxcblwiICsgaSk7Xy5iKFwiICAgICAgICAgICAgICAgIDwvZGl2PlwiKTtfLmIoXCJcXG5cIiArIGkpO18uYihcIiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJmZWF0dXJlc19fbGlzdC1pdGVtLXNlY3Rpb24gZW50cmFuY2VzLWV4YW1wbGVzIGZlYXR1cmVzX19saXN0LWl0ZW0tc2VjdGlvbl9pcy1ib3R0b21fdHJ1ZVxcXCI+XCIpO18uYihcIlxcblwiICsgaSk7Xy5iKFwiICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz1cXFwiZW50cmFuY2VzLWV4YW1wbGVzX19wbGF5LXBhdXNlLWJ1dHRvblxcXCIgaHJlZj1cXFwiI1xcXCIgdGl0bGU9XFxcIlxcXCI+PC9hPlwiKTtfLmIoXCJcXG5cIiArIGkpO18uYihcIiAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPVxcXCJlbnRyYW5jZXMtZXhhbXBsZXNfX2xpc3RcXFwiPlwiKTtfLmIoXCJcXG5cIiArIGkpO18uYihcIiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz1cXFwiZW50cmFuY2VzLWV4YW1wbGVzX19pdGVtXFxcIj5cIik7Xy5iKFwiXFxuXCIgKyBpKTtfLmIoXCIgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9XFxcImVudHJhbmNlcy1leGFtcGxlc19fZXhhbXBsZS1saW5rIGVudHJhbmNlcy1leGFtcGxlc19fZXhhbXBsZS1saW5rX2lzLXNob3duX3RydWVcXFwiIGhyZWY9XFxcIiNcXFwiIGRhdGEtaWQ9XFxcIjBcXFwiIHRpdGxlPVxcXCJcXFwiPjE8L2E+XCIpO18uYihcIlxcblwiICsgaSk7Xy5iKFwiICAgICAgICAgICAgICAgICAgICAgICAgPC9saT5cIik7Xy5iKFwiXFxuXCIgKyBpKTtfLmIoXCIgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9XFxcImVudHJhbmNlcy1leGFtcGxlc19faXRlbVxcXCI+XCIpO18uYihcIlxcblwiICsgaSk7Xy5iKFwiICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPVxcXCJlbnRyYW5jZXMtZXhhbXBsZXNfX2V4YW1wbGUtbGlua1xcXCIgZGF0YS1pZD1cXFwiMVxcXCIgaHJlZj1cXFwiI1xcXCIgdGl0bGU9XFxcIlxcXCI+MjwvYT5cIik7Xy5iKFwiXFxuXCIgKyBpKTtfLmIoXCIgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlwiKTtfLmIoXCJcXG5cIiArIGkpO18uYihcIiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz1cXFwiZW50cmFuY2VzLWV4YW1wbGVzX19pdGVtXFxcIj5cIik7Xy5iKFwiXFxuXCIgKyBpKTtfLmIoXCIgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9XFxcImVudHJhbmNlcy1leGFtcGxlc19fZXhhbXBsZS1saW5rXFxcIiAgZGF0YS1pZD1cXFwiMlxcXCIgaHJlZj1cXFwiI1xcXCIgdGl0bGU9XFxcIlxcXCI+MzwvYT5cIik7Xy5iKFwiXFxuXCIgKyBpKTtfLmIoXCIgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlwiKTtfLmIoXCJcXG5cIiArIGkpO18uYihcIiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz1cXFwiZW50cmFuY2VzLWV4YW1wbGVzX19pdGVtXFxcIj5cIik7Xy5iKFwiXFxuXCIgKyBpKTtfLmIoXCIgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9XFxcImVudHJhbmNlcy1leGFtcGxlc19fZXhhbXBsZS1saW5rXFxcIiBkYXRhLWlkPVxcXCIzXFxcIiBocmVmPVxcXCIjXFxcIiB0aXRsZT1cXFwiXFxcIj40PC9hPlwiKTtfLmIoXCJcXG5cIiArIGkpO18uYihcIiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XCIpO18uYihcIlxcblwiICsgaSk7Xy5iKFwiICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPVxcXCJlbnRyYW5jZXMtZXhhbXBsZXNfX2l0ZW1cXFwiPlwiKTtfLmIoXCJcXG5cIiArIGkpO18uYihcIiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz1cXFwiZW50cmFuY2VzLWV4YW1wbGVzX19leGFtcGxlLWxpbmtcXFwiICBkYXRhLWlkPVxcXCI0XFxcIiBocmVmPVxcXCIjXFxcIiB0aXRsZT1cXFwiXFxcIj41PC9hPlwiKTtfLmIoXCJcXG5cIiArIGkpO18uYihcIiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XCIpO18uYihcIlxcblwiICsgaSk7Xy5iKFwiICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPVxcXCJlbnRyYW5jZXMtZXhhbXBsZXNfX2l0ZW1cXFwiPlwiKTtfLmIoXCJcXG5cIiArIGkpO18uYihcIiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz1cXFwiZW50cmFuY2VzLWV4YW1wbGVzX19leGFtcGxlLWxpbmtcXFwiICBkYXRhLWlkPVxcXCI1XFxcIiBocmVmPVxcXCIjXFxcIiB0aXRsZT1cXFwiXFxcIj42PC9hPlwiKTtfLmIoXCJcXG5cIiArIGkpO18uYihcIiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XCIpO18uYihcIlxcblwiICsgaSk7Xy5iKFwiICAgICAgICAgICAgICAgICAgICA8L3VsPlwiKTtfLmIoXCJcXG5cIiArIGkpO18uYihcIiAgICAgICAgICAgICAgICA8L2Rpdj5cIik7Xy5iKFwiXFxuXCIgKyBpKTtfLmIoXCIgICAgICAgICAgICA8L2xpPlwiKTtfLmIoXCJcXG5cIiArIGkpO18uYihcIiAgICAgICAgICAgIDxsaSBjbGFzcz1cXFwiZmVhdHVyZXNfX2xpc3QtaXRlbSBmZWF0dXJlc19fbGlzdC1pdGVtX25hbWVfb3Blbm5lc3NcXFwiPlwiKTtfLmIoXCJcXG5cIiArIGkpO18uYihcIiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJmZWF0dXJlc19fbGlzdC1pdGVtLXNlY3Rpb25cXFwiPlwiKTtfLmIoXCJcXG5cIiArIGkpO18uYihcIiAgICAgICAgICAgICAgICAgICAgPGgxIGNsYXNzPVxcXCJmZWF0dXJlc19faGVhZGVyXFxcIj7QntGC0LrRgNGL0YLQvtGB0YLRjDwvaDE+XCIpO18uYihcIlxcblwiICsgaSk7Xy5iKFwiICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1cXFwiZmVhdHVyZXNfX2Rpc2NyaXB0aW9uXFxcIj5cIik7Xy5iKFwiXFxuXCIgKyBpKTtfLmIoXCIgICAgICAgICAgICAgICAgICAgICAgICDQpdC+0YDQvtGI0LDRjyDQsdCw0LfQvtCy0LDRjyDRhNGD0L3QutGG0LjQvtC90LDQu9GM0L3QvtGB0YLRjFwiKTtfLmIoXCJcXG5cIiArIGkpO18uYihcIiAgICAgICAgICAgICAgICAgICAgICAgIEFQSSAy0JPQmNChINC+0LHQtdGB0L/QtdGH0LjQstCw0LXRgtGB0Y8g0LjRgdC/0L7Qu9GM0LfQvtCy0LDQvdC40LXQvCBvcGVuLXNvdXJjZSDQsdC40LHQu9C40L7RgtC10LrQuCBMZWFmbGV0LlwiKTtfLmIoXCJcXG5cIiArIGkpO18uYihcIiAgICAgICAgICAgICAgICAgICAgPC9wPlwiKTtfLmIoXCJcXG5cIiArIGkpO18uYihcIiAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9XFxcImZlYXR1cmVzX19kaXNjcmlwdGlvblxcXCI+XCIpO18uYihcIlxcblwiICsgaSk7Xy5iKFwiICAgICAgICAgICAgICAgICAgICAgICAg0KHQstC+0LHQvtC00L3QsNGPINC70LjRhtC10L3Qt9C40Y8g0L7QsdC+0LjRhSDQv9GA0L7QtdC60YLQvtCyINC/0L7Qt9Cy0L7Qu9GP0LXRgiDQstCw0Lwg0LjQt9C80LXQvdGP0YLRjCDQuCDRg9C70YPRh9GI0LDRgtGMINC40YUg0LrQvtC0INC/0L7QtCDQu9GO0LHRi9C1INC30LDQtNCw0YfQuC5cIik7Xy5iKFwiXFxuXCIgKyBpKTtfLmIoXCIgICAgICAgICAgICAgICAgICAgIDwvcD5cIik7Xy5iKFwiXFxuXCIgKyBpKTtfLmIoXCIgICAgICAgICAgICAgICAgPC9kaXY+XCIpO18uYihcIlxcblwiICsgaSk7Xy5iKFwiICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImZlYXR1cmVzX19saXN0LWl0ZW0tc2VjdGlvbiBvcGVubmVzcy1leGFtcGxlcyBmZWF0dXJlc19fbGlzdC1pdGVtLXNlY3Rpb25faXMtYm90dG9tX3RydWVcXFwiPlwiKTtfLmIoXCJcXG5cIiArIGkpO18uYihcIiAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9XFxcIm9wZW5uZXNzLWV4YW1wbGVzX19wbGF5LXBhdXNlLWJ1dHRvblxcXCIgaHJlZj1cXFwiI1xcXCIgdGl0bGU9XFxcIlxcXCI+PC9hPlwiKTtfLmIoXCJcXG5cIiArIGkpO18uYihcIiAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPVxcXCJvcGVubmVzcy1leGFtcGxlc19fbGlzdFxcXCI+XCIpO18uYihcIlxcblwiICsgaSk7Xy5iKFwiICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPVxcXCJvcGVubmVzcy1leGFtcGxlc19faXRlbVxcXCI+XCIpO18uYihcIlxcblwiICsgaSk7Xy5iKFwiICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPVxcXCJvcGVubmVzcy1leGFtcGxlc19fZXhhbXBsZS1saW5rIG9wZW5uZXNzLWV4YW1wbGVzX19leGFtcGxlLWxpbmtfaXMtc2hvd25fdHJ1ZVxcXCIgZGF0YS1pZD1cXFwiMFxcXCIgaHJlZj1cXFwiI1xcXCIgdGl0bGU9XFxcIlxcXCI+MTwvYT5cIik7Xy5iKFwiXFxuXCIgKyBpKTtfLmIoXCIgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlwiKTtfLmIoXCJcXG5cIiArIGkpO18uYihcIiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz1cXFwib3Blbm5lc3MtZXhhbXBsZXNfX2l0ZW1cXFwiPlwiKTtfLmIoXCJcXG5cIiArIGkpO18uYihcIiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz1cXFwib3Blbm5lc3MtZXhhbXBsZXNfX2V4YW1wbGUtbGlua1xcXCIgZGF0YS1pZD1cXFwiMVxcXCIgaHJlZj1cXFwiI1xcXCIgdGl0bGU9XFxcIlxcXCI+MjwvYT5cIik7Xy5iKFwiXFxuXCIgKyBpKTtfLmIoXCIgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlwiKTtfLmIoXCJcXG5cIiArIGkpO18uYihcIiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz1cXFwib3Blbm5lc3MtZXhhbXBsZXNfX2l0ZW1cXFwiPlwiKTtfLmIoXCJcXG5cIiArIGkpO18uYihcIiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz1cXFwib3Blbm5lc3MtZXhhbXBsZXNfX2V4YW1wbGUtbGlua1xcXCIgZGF0YS1pZD1cXFwiMlxcXCIgaHJlZj1cXFwiI1xcXCIgdGl0bGU9XFxcIlxcXCI+MzwvYT5cIik7Xy5iKFwiXFxuXCIgKyBpKTtfLmIoXCIgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlwiKTtfLmIoXCJcXG5cIiArIGkpO18uYihcIiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz1cXFwib3Blbm5lc3MtZXhhbXBsZXNfX2l0ZW1cXFwiPlwiKTtfLmIoXCJcXG5cIiArIGkpO18uYihcIiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz1cXFwib3Blbm5lc3MtZXhhbXBsZXNfX2V4YW1wbGUtbGlua1xcXCIgZGF0YS1pZD1cXFwiM1xcXCIgaHJlZj1cXFwiI1xcXCIgdGl0bGU9XFxcIlxcXCI+NDwvYT5cIik7Xy5iKFwiXFxuXCIgKyBpKTtfLmIoXCIgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlwiKTtfLmIoXCJcXG5cIiArIGkpO18uYihcIiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz1cXFwib3Blbm5lc3MtZXhhbXBsZXNfX2l0ZW1cXFwiPlwiKTtfLmIoXCJcXG5cIiArIGkpO18uYihcIiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz1cXFwib3Blbm5lc3MtZXhhbXBsZXNfX2V4YW1wbGUtbGlua1xcXCIgZGF0YS1pZD1cXFwiNFxcXCIgaHJlZj1cXFwiI1xcXCIgdGl0bGU9XFxcIlxcXCI+NTwvYT5cIik7Xy5iKFwiXFxuXCIgKyBpKTtfLmIoXCIgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlwiKTtfLmIoXCJcXG5cIiArIGkpO18uYihcIiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz1cXFwib3Blbm5lc3MtZXhhbXBsZXNfX2l0ZW1cXFwiPlwiKTtfLmIoXCJcXG5cIiArIGkpO18uYihcIiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz1cXFwib3Blbm5lc3MtZXhhbXBsZXNfX2V4YW1wbGUtbGlua1xcXCIgZGF0YS1pZD1cXFwiNVxcXCIgaHJlZj1cXFwiI1xcXCIgdGl0bGU9XFxcIlxcXCI+NjwvYT5cIik7Xy5iKFwiXFxuXCIgKyBpKTtfLmIoXCIgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlwiKTtfLmIoXCJcXG5cIiArIGkpO18uYihcIiAgICAgICAgICAgICAgICAgICAgPC91bD5cIik7Xy5iKFwiXFxuXCIgKyBpKTtfLmIoXCIgICAgICAgICAgICAgICAgPC9kaXY+XCIpO18uYihcIlxcblwiICsgaSk7Xy5iKFwiICAgICAgICAgICAgPC9saT5cIik7Xy5iKFwiXFxuXCIgKyBpKTtfLmIoXCIgICAgICAgICAgICA8bGkgY2xhc3M9XFxcImZlYXR1cmVzX19saXN0LWl0ZW0gZmVhdHVyZXNfX2xpc3QtaXRlbV9uYW1lX2FsbC1kZXZpY2VzXFxcIj5cIik7Xy5iKFwiXFxuXCIgKyBpKTtfLmIoXCIgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cXFwiZmVhdHVyZXNfX2xpc3QtaXRlbS1zZWN0aW9uXFxcIj5cIik7Xy5iKFwiXFxuXCIgKyBpKTtfLmIoXCIgICAgICAgICAgICAgICAgICAgIDxoMSBjbGFzcz1cXFwiZmVhdHVyZXNfX2hlYWRlclxcXCI+0J3QsCDQstGB0LXRhSDRjdC60YDQsNC90LDRhTwvaDE+XCIpO18uYihcIlxcblwiICsgaSk7Xy5iKFwiICAgICAgICAgICAgICAgICAgICA8cD5cIik7Xy5iKFwiXFxuXCIgKyBpKTtfLmIoXCIgICAgICAgICAgICAgICAgICAgICAgICDQndCw0YjQsCDQutCw0YDRgtCwINCw0LTQsNC/0YLQuNGA0YPQtdGC0YHRjyDQv9C+0LQg0YDQsNC30LzQtdGAINGN0LrRgNCw0L3QsC4g0JXQuSDQvtC00LjQvdCw0LrQvtCy0L4g0YPQtNC+0LHQvdC+INC/0L7Qu9GM0LfQvtCy0LDRgtGM0YHRjyDQvdCwINC60L7QvNC/0YzRjtGC0LXRgNCw0YUsINC/0LvQsNC90YjQtdGC0LDRhSDQuCDRgtC10LvQtdGE0L7QvdCw0YUuXCIpO18uYihcIlxcblwiICsgaSk7Xy5iKFwiICAgICAgICAgICAgICAgICAgICA8L3A+XCIpO18uYihcIlxcblwiICsgaSk7Xy5iKFwiICAgICAgICAgICAgICAgIDwvZGl2PlwiKTtfLmIoXCJcXG5cIiArIGkpO18uYihcIiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJmZWF0dXJlc19fbGlzdC1pdGVtLXNlY3Rpb24gZmVhdHVyZXNfX2xpc3QtaXRlbS1zZWN0aW9uX2lzLWJvdHRvbV90cnVlXFxcIj5cIik7Xy5iKFwiXFxuXCIgKyBpKTtfLmIoXCIgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPVxcXCJmZWF0dXJlc19fcm91bmQtbGluayBmZWF0dXJlc19fcm91bmQtbGlua19uYW1lX3NtYXJ0cGhvbmVcXFwiIGRhdGEtc3RhdGU9XFxcInNtYXJ0cGhvbmVcXFwiIGhyZWY9XFxcIiNcXFwiIHRpdGxlPVxcXCJcXFwiPjwvYT5cIik7Xy5iKFwiXFxuXCIgKyBpKTtfLmIoXCIgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPVxcXCJmZWF0dXJlc19fcm91bmQtbGluayBmZWF0dXJlc19fcm91bmQtbGlua19uYW1lX25vdGVib29rXFxcIiBkYXRhLXN0YXRlPVxcXCJub3RlcGFkXFxcIiBocmVmPVxcXCIjXFxcIiB0aXRsZT1cXFwiXFxcIj48L2E+XCIpO18uYihcIlxcblwiICsgaSk7Xy5iKFwiICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz1cXFwiZmVhdHVyZXNfX3JvdW5kLWxpbmsgZmVhdHVyZXNfX3JvdW5kLWxpbmtfbmFtZV90YWJsZXRcXFwiIGRhdGEtc3RhdGU9XFxcInRhYmxldFxcXCIgaHJlZj1cXFwiI1xcXCIgdGl0bGU9XFxcIlxcXCI+PC9hPlwiKTtfLmIoXCJcXG5cIiArIGkpO18uYihcIiAgICAgICAgICAgICAgICA8L2Rpdj5cIik7Xy5iKFwiXFxuXCIgKyBpKTtfLmIoXCIgICAgICAgICAgICA8L2xpPlwiKTtfLmIoXCJcXG5cIiArIGkpO18uYihcIiAgICAgICAgPC91bD5cIik7Xy5iKFwiXFxuXCIgKyBpKTtfLmIoXCIgICAgPC9kaXY+XCIpO18uYihcIlxcblwiICsgaSk7Xy5iKFwiXFxuXCIgKyBpKTtfLmIoXCIgICAgPGRpdiBjbGFzcz1cXFwiZGV2aWNlIHRhYmxldFxcXCI+XCIpO18uYihcIlxcblwiICsgaSk7Xy5iKFwiICAgICAgICA8ZGl2IGNsYXNzPVxcXCJ0YWJsZXRfX2Rpc3BsYXlcXFwiPlwiKTtfLmIoXCJcXG5cIiArIGkpO18uYihcIiAgICAgICAgICAgIDxkaXYgaWQ9XFxcIm1vYmlsZS1tYXBcXFwiIGNsYXNzPVxcXCJkZXZpY2VfX21hcFxcXCI+PC9kaXY+XCIpO18uYihcIlxcblwiICsgaSk7Xy5iKFwiXFxuXCIgKyBpKTtfLmIoXCIgICAgICAgICAgICA8ZGl2IGNsYXNzPVxcXCJsb3VwZVxcXCI+XCIpO18uYihcIlxcblwiICsgaSk7Xy5iKFwiICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImxvdXBlX19nbGFzcyBsb3VwZV9fZ2xhc3NfdHlwZV91c3VhbFxcXCI+PC9kaXY+XCIpO18uYihcIlxcblwiICsgaSk7Xy5iKFwiICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XFxcImxvdXBlX19nbGFzcyBsb3VwZV9fZ2xhc3NfdHlwZV9yZXRpbmFcXFwiPjwvZGl2PlwiKTtfLmIoXCJcXG5cIiArIGkpO18uYihcIiAgICAgICAgICAgIDwvZGl2PlwiKTtfLmIoXCJcXG5cIiArIGkpO18uYihcIiAgICAgICAgPC9kaXY+XCIpO18uYihcIlxcblwiICsgaSk7Xy5iKFwiICAgIDwvZGl2PlwiKTtfLmIoXCJcXG5cIiArIGkpO18uYihcIjwvZGl2PlwiKTtfLmIoXCJcXG5cIiArIGkpO18uYihcIlxcblwiKTtyZXR1cm4gXy5mbCgpOzt9KTttb2R1bGUuZXhwb3J0cyA9IHsgIHJlbmRlcjogZnVuY3Rpb24gKCkgeyByZXR1cm4gdC5yZW5kZXIuYXBwbHkodCwgYXJndW1lbnRzKTsgfSwgIHI6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHQuci5hcHBseSh0LCBhcmd1bWVudHMpOyB9LCAgcmk6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHQucmkuYXBwbHkodCwgYXJndW1lbnRzKTsgfX07IiwidmFyIHQgPSBuZXcgKHJlcXVpcmUoJ2hvZ2FuLmpzL2xpYi90ZW1wbGF0ZScpKS5UZW1wbGF0ZShmdW5jdGlvbihjLHAsaSl7dmFyIF89dGhpcztfLmIoaT1pfHxcIlwiKTtfLmIoXCI8ZGl2IGNsYXNzPVxcXCJtYXBcXFwiIGlkPVxcXCJtYXBcXFwiPjwvZGl2PlwiKTtfLmIoXCJcXG5cIik7cmV0dXJuIF8uZmwoKTs7fSk7bW9kdWxlLmV4cG9ydHMgPSB7ICByZW5kZXI6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHQucmVuZGVyLmFwcGx5KHQsIGFyZ3VtZW50cyk7IH0sICByOiBmdW5jdGlvbiAoKSB7IHJldHVybiB0LnIuYXBwbHkodCwgYXJndW1lbnRzKTsgfSwgIHJpOiBmdW5jdGlvbiAoKSB7IHJldHVybiB0LnJpLmFwcGx5KHQsIGFyZ3VtZW50cyk7IH19OyIsImlmICghQXJyYXkucHJvdG90eXBlLmluZGV4T2YpXG57XG4gIEFycmF5LnByb3RvdHlwZS5pbmRleE9mID0gZnVuY3Rpb24oZWx0IC8qLCBmcm9tKi8pXG4gIHtcbiAgICB2YXIgbGVuID0gdGhpcy5sZW5ndGggPj4+IDA7XG5cbiAgICB2YXIgZnJvbSA9IE51bWJlcihhcmd1bWVudHNbMV0pIHx8IDA7XG4gICAgZnJvbSA9IChmcm9tIDwgMClcbiAgICAgICAgID8gTWF0aC5jZWlsKGZyb20pXG4gICAgICAgICA6IE1hdGguZmxvb3IoZnJvbSk7XG4gICAgaWYgKGZyb20gPCAwKVxuICAgICAgZnJvbSArPSBsZW47XG5cbiAgICBmb3IgKDsgZnJvbSA8IGxlbjsgZnJvbSsrKVxuICAgIHtcbiAgICAgIGlmIChmcm9tIGluIHRoaXMgJiZcbiAgICAgICAgICB0aGlzW2Zyb21dID09PSBlbHQpXG4gICAgICAgIHJldHVybiBmcm9tO1xuICAgIH1cbiAgICByZXR1cm4gLTE7XG4gIH07XG59Il19
